---
name: Moment.js
slug: moment
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: null
copyright: |-
  Â© JS Foundation and other contributors
  Licensed under the MIT License.
  https://momentjs.com/docs/
homepage: http://momentjs.com/

---
- name: Add/Subtract
  id: guides/index#/warnings/add-inverted-param/
  summary: Moment deprecated ordering the parameters of add and subtract as (period, number)
  belongs_to: Guides
  description: |-
    ### Add/Subtract

    ``` javascript
    moment().add(period, number) is deprecated. Please use moment().add(number, period)
    moment().subtract(period, number) is deprecated. Please use moment().subtract(number, period)
    ```

    Moment deprecated ordering the parameters of add and subtract as (period, number). Invert your parameters.

    Bad:

    ``` javascript
    moment().add('hours', 3);
    ```

    Good:

    ``` javascript
    moment().add(3, 'hours');
    ```
- name: Bower
  id: index#/use-it/bower/
  summary: Notable files are moment.js, locale/*.js and min/moment-with-locales.js
  description: |-
    ### Bower

    [bower](https://bower.io/)

    ``` javascript
    bower install --save moment
    ```

    Notable files are `moment.js`, `locale/*.js` and `min/moment-with-locales.js`.
- name: Browser
  id: index#/use-it/browser/
  summary: Moment.js is available on cdnjs.com and on jsDelivr
  description: |-
    ### Browser

    ``` html
    <script src="moment.js"></script>
    <script>
        moment().format();
    </script>
    ```

    Moment.js is available on [cdnjs.com](https://cdnjs.com/libraries/moment.js) and on [jsDelivr](https://www.jsdelivr.com/package/npm/moment).
- name: Browserify
  id: index#/use-it/browserify/
  summary: 'Note: There is a bug that prevents moment.locale from being loaded'
  description: |-
    ### Browserify

    ``` javascript
    npm install moment
    ```

    ``` javascript
    var moment = require('moment');
    moment().format();
    ```

    **Note:** There is a bug that prevents `moment.locale` from being loaded.

    ``` javascript
    var moment = require('moment');
    moment.locale('cs');
    console.log(moment.locale()); // en
    ```

    Use the workaround below

    ``` javascript
    var moment = require('moment');
    require('moment/locale/cs');
    console.log(moment.locale()); // cs
    ```

    In order to include all the locales

    ``` javascript
    var moment = require('moment');
    require("moment/min/locales.min");
    moment.locale('cs');
    console.log(moment.locale()); // cs
    ```
- name: Date Math vs Time Math
  id: guides/index#/lib-concepts/date-time-math/
  summary: There is a logical difference between time math and date math
  belongs_to: Guides
  description: "### Date Math vs Time Math\n\nThere is a logical difference between time math and date math.\n\nIn Moment.js time math assumes a linear time scale, just incrementing or decrementing the UTC-based timestamp by the amount of the time units provided.\n\nDate math does not use a linear time scale, but rather increments or decrements the dates on the calendar. This is because the amount of time in a day, month, or year is variable.  \nFor example, due to daylight saving time transition, a day may be anywhere between 23 and 25 hours long.  \nMonths of course vary in number of days, and due to leap year, years vary in length as well. Date math can cause some interesting scenarios.\n\nDue to daylight saving time, one day may not equal 24 hours:\n\n``` javascript\n//date math\nmoment('2016-03-12 13:00:00').add(1, 'day').format('LLL')\n\"March 13, 2016 1:00 PM\"\n//time math\nmoment('2016-03-12 13:00:00').add(24, 'hours').format('LLL')\n\"March 13, 2016 2:00 PM\"\n```\n\nDue to leap years, one year may not equal 365 days:\n\n``` javascript\nmoment('2016-01-01').add(1, 'year').format('LL')\n\"January 1, 2017\"\nmoment('2016-01-01').add(365, 'day').format('LL')\n\"December 31, 2016\"\n```\n\nBecause of the variability of duration in day math, Moment's API does not officially support adding or subtracting decimal values for days and larger.  \nMoment.js will accept decimal values and do its best to handle them by rounding to the nearest whole number.\n\nAs of **2.12.0** decimal day and month values use absolute value/round to convert to integers. This means that 1.5 rounds to 2, and -1.5 rounds to -2.\n\n``` javascript\nmoment().add(1.5, 'days') == moment().add(2, 'days')\nmoment().add(-1.5, 'days') == moment().add(-2, 'days') == moment().subtract(1.5, 'days') == moment().subtract(2, 'days')\nmoment().add(2.3, 'months') == moment().add(2, 'months')\nmoment().add(-2.3, 'months') == moment().add(-2, 'months') == moment().subtract(2.3, 'months') == moment().subtract(2, 'months')\n```\n\nQuarters and years are converted to months, and then absolute value/rounded.\n\n``` javascript\nmoment().add(1.5, 'years') == moment().add(18, 'months')\nmoment().add(.8, 'years') == moment().add(9.6, 'months') == moment().add(10, 'months')\nmoment().add(1.5, 'quarters') == moment().add(4.5, 'months') == moment().add(5, 'months')\n```"
- name: Define Locale Override
  id: guides/index#/warnings/define-locale/
  summary: This deprecation warning is thrown when you attempt to change an existing locale using the defineLocale function
  belongs_to: Guides
  description: "### Define Locale Override\n\n``` javascript\nUse moment.updateLocale(localeName, config) to change an existing locale. \nmoment.defineLocale(localeName, config) should only be used for creating a new locale\n```\n\nThis deprecation warning is thrown when you attempt to change an existing locale using the defineLocale function.  \nDoing this will result in unexpected behavior related to property inheritance. moment.updateLocale will properly replace properties on an existing locale.\n\n[View original pull request](https://github.com/moment/moment/pull/2774)"
- name: Forgiving Mode
  id: guides/index#/parsing/forgiving-mode/
  summary: While strict mode works better in most situations, forgiving mode can be very useful when the format of the string being passed to moment may vary
  belongs_to: Guides
  description: "### Forgiving Mode\n\nWhile strict mode works better in most situations, forgiving mode can be very useful when the format of the string being passed to moment may vary.\n\nA common scenario where forgiving mode is useful is in situations where a third party API is providing the date, and the date format for that API could change.  \nSuppose that an API starts by sending dates in 'YYYY-MM-DD' format, and then later changes to 'MM/DD/YYYY' format.\n\nIn strict mode, the following code results in 'Invalid Date' being displayed:\n\n``` javascript\nmoment('01/12/2016', 'YYYY-MM-DD', true).format()\n\"Invalid date\"\n```\n\nIn forgiving mode using a format string, you get a wrong date:\n\n``` javascript\nmoment('01/12/2016', 'YYYY-MM-DD').format()\n\"2001-12-20T00:00:00-06:00\"\n```\n\nThe wrong date scenario in forgiving mode is certainly less obvious to the user, but by that token could go unnoticed for a long time.\n\nWhen choosing between strict and forgiving mode, it is important to consider whether it is more important that dates be accurate, or that dates never display as \"Invalid Date\"."
- name: Guides
  id: guides/index
  summary: The guides area is designed to help developers learn to better interact with the date and time problem domain, and the Moment.js library
  description: "# Moment.js\n\n## Introductory Concepts\n\nThe guides area is designed to help developers learn to better interact with the date and time problem domain, and the Moment.js library.  \nWe address our most frequently seen support requests here, so it is a great place to check for solutions to any issues you may have.\n\nThe guides section is new and still under construction. If you have a request for a guide that you would like to see here, or would like to add a guide  \nplease create an issue or make a pull request in the [momentjs.com repository](https://github.com/moment/momentjs.com).\n\nCheck out this [scrimba moment guide](https://scrimba.com/casts/cwpDGhG) if you're just starting.\n\n### Mutability 1.0.0+\n\nThe moment object in Moment.js is mutable. This means that operations like add, subtract, or set change the original moment object.  \nWhen first using Moment.js many developers are confused by scenarios like this:\n\n``` javascript\nvar a = moment('2016-01-01'); \nvar b = a.add(1, 'week'); \na.format();\n\"2016-01-08T00:00:00-06:00\"\n```\n\nAs you can see, adding one week mutated `a`. To avoid situations like that, clone the moment before performing date math:\n\n``` javascript\nvar a = moment('2016-01-01'); \nvar b = a.clone().add(1, 'week'); \na.format();\n\"2016-01-01T00:00:00-06:00\"\n```\n\n### Date Math vs Time Math\n\nThere is a logical difference between time math and date math.\n\nIn Moment.js time math assumes a linear time scale, just incrementing or decrementing the UTC-based timestamp by the amount of the time units provided.\n\nDate math does not use a linear time scale, but rather increments or decrements the dates on the calendar. This is because the amount of time in a day, month, or year is variable.  \nFor example, due to daylight saving time transition, a day may be anywhere between 23 and 25 hours long.  \nMonths of course vary in number of days, and due to leap year, years vary in length as well. Date math can cause some interesting scenarios.\n\nDue to daylight saving time, one day may not equal 24 hours:\n\n``` javascript\n//date math\nmoment('2016-03-12 13:00:00').add(1, 'day').format('LLL')\n\"March 13, 2016 1:00 PM\"\n//time math\nmoment('2016-03-12 13:00:00').add(24, 'hours').format('LLL')\n\"March 13, 2016 2:00 PM\"\n```\n\nDue to leap years, one year may not equal 365 days:\n\n``` javascript\nmoment('2016-01-01').add(1, 'year').format('LL')\n\"January 1, 2017\"\nmoment('2016-01-01').add(365, 'day').format('LL')\n\"December 31, 2016\"\n```\n\nBecause of the variability of duration in day math, Moment's API does not officially support adding or subtracting decimal values for days and larger.  \nMoment.js will accept decimal values and do its best to handle them by rounding to the nearest whole number.\n\nAs of **2.12.0** decimal day and month values use absolute value/round to convert to integers. This means that 1.5 rounds to 2, and -1.5 rounds to -2.\n\n``` javascript\nmoment().add(1.5, 'days') == moment().add(2, 'days')\nmoment().add(-1.5, 'days') == moment().add(-2, 'days') == moment().subtract(1.5, 'days') == moment().subtract(2, 'days')\nmoment().add(2.3, 'months') == moment().add(2, 'months')\nmoment().add(-2.3, 'months') == moment().add(-2, 'months') == moment().subtract(2.3, 'months') == moment().subtract(2, 'months')\n```\n\nQuarters and years are converted to months, and then absolute value/rounded.\n\n``` javascript\nmoment().add(1.5, 'years') == moment().add(18, 'months')\nmoment().add(.8, 'years') == moment().add(9.6, 'months') == moment().add(10, 'months')\nmoment().add(1.5, 'quarters') == moment().add(4.5, 'months') == moment().add(5, 'months')\n```\n\n### Time Zone vs Offset\n\nFrequently, people are confused about the difference between time zones and UTC offsets.\n\nA UTC offset is a value that represents how far a particular date and time is from UTC. It is expressed in the format HH:mm most of the time.\n\nA time zone is a geographical region where all people observe a legally mandated standard time.\n\nA time zone usually has more than one offset from UTC due to daylight saving time. Several time zones may have the same offset at some point during the year.  \nFor example, the time zones America/Chicago, America/Denver, and America/Belize all have an offset of -06:00 at varying times.  \nFor this reason, it is impossible to infer a time zone from just an offset value.\n\nThe Moment.js core library provides functionality related to adjusting times based on an offset value.  \nIt does not provide support for adjusting dates based on time zone data - this is provided by the Moment TimeZone library.\n\n[For an in depth description of this issue, see the Stack Overflow tag.](https://stackoverflow.com/tags/timezone/info)\n\n### JavaScript Date\n\nMoment.js provides a wrapper for the native JavaScript date object.  \nIn doing this, Moment.js extends the functionality and also accounts for several deficiencies in the object.\n\nParsing is notably unpredictable with native date. For instance, suppose I am using a computer in the United States, but I have a date in DD/MM/YYYY format.\n\n``` javascript\nvar a = new Date('01/12/2016'); //December 1 2016 in DD/MM/YYYY format\n//\"Tue Jan 12 2016 00:00:00 GMT-0600 (Central Standard Time)\"\n```\n\nThere is no good work-around for this behavior with the native Date object.  \nMoment's parser handles it just fine though:\n\n``` javascript\nmoment('01/12/2016', 'DD/MM/YYYY', true).format()\n\"2016-12-01T00:00:00-06:00\"\n```\n\nIn addition, the ECMA Script 5 Specification makes an unusual assertion about the offset of ISO 8601 dates:\n\n> The value of an absent time zone offset is \"Z\"\n\nEffectively what this means is that ISO 8601 dates without an offset are to be treated as UTC values, creating the following oddity:\n\n``` javascript\n//US local format\nvar a = new Date('1/1/2016'); \n//\"Fri Jan 01 2016 00:00:00 GMT-0600 (Central Standard Time)\"\n\n//ISO 8601\nvar a = new Date('2016-01-01');\n//\"Thu Dec 31 2015 18:00:00 GMT-0600 (Central Standard Time)\"\n```\n\nThe ES2015 spec fixes this mistake, bringing it in line with the ISO8601 specification, which specifies local time absent of offset.  \nThis is in it's own way bad as it has numerous negative back compatibility implications.\n\nWith Moment, the date is always interpreted as local time, unless you specify otherwise. This is not something that will change with the adoption of ES2015.\n\n``` javascript\nmoment('2016-01-01')\n//\"2016-01-01T00:00:00-06:00\"\n```\n\nArithmetic is another area where the native Date object is lacking. The Date object actually provides no API for this. Instead, it relies on overflowing date values.  \nSuppose you wanted to add 1 day to April 30, 2016. With the date object you would do the following:\n\n``` javascript\nvar a = new Date('4/30/2016'); \na.setDate(a.getDate() + 1);\n```\n\nThis does the trick, but is somewhat unintuitive.  \nMoment provides an API to add/subtract:\n\n``` javascript\nmoment('4/30/2016', 'MM/DD/YYYY').add(1, 'day')\n//\"2016-05-01T00:00:00-05:00\"\n```\n\n### Internal Properties\n\nMoment objects have several internal properties that are prefixed with `_`.\n\nThe most commonly viewed internal property is the `_d` property that holds the JavaScript Date that Moment wrappers.  \nFrequently, developers are confused by console output of the value of `_d`.  \nMoment uses a technique called epoch shifting that causes this property to sometimes differ from the actual date value that the Moment reflects.  \nIn particular if Moment TimeZone is in use, this property will almost never be the same as the actual value that Moment will output from its public `.format()` function.  \nAs such, the values of `_d` and any other properties prefixed with `_` should not be used for any purpose.\n\nTo print out the value of a Moment, use `.format()`, `.toString()` or `.toISOString()`.\n\nTo retrieve a native Date object from Moment, use `.toDate()`. This function returns a properly shifted date for interaction with third party APIs.\n\n## Parsing Guide\n\nMoment.js has a very flexible and advanced parser that allows a huge range of functionality.  \nThe flexibility of the parser also makes it one of the most frequently misused tools of Moment.js.\n\nThis section lays out some guidelines about how to correctly use the parser in your situation.\n\n### Local vs UTC vs Offset\n\nMoment offers three functions for parsing dates, the basic moment function, moment.utc, and moment.parseZone.\n\nIf you wish to interact with a date in the context of the user's local time, use the moment function.\n\n``` javascript\nmoment('2016-01-01T23:35:01');\n```\n\nThis results in a date with a UTC offset that is the same as the local computer:\n\n\"2016-01-01T23:35:01-06:00\"\n\nIf you wish to interact with the date as a UTC date, use moment.utc:\n\n``` javascript\nmoment.utc('2016-01-01T23:35:01');\n```\n\nThis results in a date with a utc offset of +0:00:\n\n\"2016-01-01T23:35:01+00:00\"\n\nIf your date format has a fixed timezone offset, use moment.parseZone:\n\n``` javascript\nmoment.parseZone(\"2013-01-01T00:00:00-13:00\");\n```\n\nThis results in a date with a fixed offset:\n\n\"2013-01-01T00:00:00-13:00\"\n\nNote that if you use moment() or moment.utc() to parse a date with a specified offset, the date will be converted from that offset to either local or UTC:\n\nThis date is shifted by 8 hours, moving from +2 to -6 (the offset of the local machine)\n\n``` javascript\nmoment('2016-01-01T00:00:00+02:00').format()\n\"2015-12-31T16:00:00-06:00\"\n```\n\nThis date is shifted by 2 hours, moving from +2 to UTC\n\n``` javascript\nmoment.utc('2016-01-01T00:00:00+02:00').format()\n\"2015-12-31T22:00:00+00:00\"\n```\n\n### Known Date Formats\n\nIf you know the format of the date string that you will be parsing, it is always the best choice to explicitly specify that format.\n\nExamples:\n\n``` javascript\nmoment('01/01/2016', 'MM/DD/YYYY')\nmoment('2016-01-01 11:31:23 PM', 'YYYY-MM-DD hh:mm:ss a')\n```\n\nIf your dates are in an ISO 8601 format, you can use a constant built into moment to indicate that:\n\n``` javascript\nmoment('2016-01-01 12:25:32', moment.ISO_8601)\n```\n\nISO 8601 formats include, but are not limited to:\n\n    2013-02-08               # A calendar date part\n    2013-W06-5               # A week date part\n    2013-02-08T09            # An hour time part separated by a T\n    2013-02-08 09            # An hour time part separated by a space\n    2013-02-08 09:30:26      # An hour, minute, and second time part\n    2013-02-08 09+07:00      # +-HH:mm\n\n[See the API documentation on parsing strings for a full listing.](https://momentjs.com/docs/#/parsing/string/)\n\n### Strict Mode\n\nStrict mode is the recommended mode for parsing dates. You should always use strict mode if your code base will allow it.  \nMore than half of the parser issues seen on GitHub and Stack Overflow can be fixed by strict mode.\n\nIn a later release, the parser will default to using strict mode.\n\nStrict mode requires the input to the moment to exactly match the specified format, including separators. Strict mode is set by passing true as the third parameter to the moment function.\n\n``` javascript\nmoment('01/01/2016', 'MM/DD/YYYY', true).format()\n\"2016-01-01T00:00:00-06:00\"\nmoment('01/01/2016 some text', 'MM/DD/YYYY', true).format()\n\"Invalid date\"\n```\n\nSeparator matching:\n\n``` javascript\n//forgiving mode\nmoment('01-01-2016', 'MM/DD/YYYY', false).format()\n\"2016-01-01T00:00:00-06:00\"\n//strict mode\nmoment('01-01-2016', 'MM/DD/YYYY', true).format()\n\"Invalid date\"\n```\n\nScenarios fixed by strict mode:\n\n``` javascript\n//UUID matches YYYYDDD because it starts with 7 digits\nmoment('5917238b-33ff-f849-cd63-80f4c9b37d0c', moment.ISO_8601).format()\n\"5917-08-26T00:00:00-05:00\"\n//strict mode fails because trailing data exists\nmoment('5917238b-33ff-f849-cd63-80f4c9b37d0c', moment.ISO_8601, true).format()\n\"Invalid date\"\n```\n\n``` javascript\n//date has out of range value but is parsed anyways\nmoment('100110/09/2015', 'MM/DD/YYYY').format()\n\"2015-10-09T00:00:00-05:00\"\n//strict mode catches out of range issue\nmoment('100110/09/2015', 'MM/DD/YYYY', true).format()\n\"Invalid date\"\n```\n\n``` javascript\n//wrong date is parsed because non-strict mode ignores data after format\nmoment('2016-12-31 11:32 PM').format('LT')\n\"11:32 AM\"\n//trailing data is noticed\nmoment('2016-12-31 11:32 PM', moment.ISO_8601, true).format('LT')\n\"Invalid date\"\n```\n\n### Forgiving Mode\n\nWhile strict mode works better in most situations, forgiving mode can be very useful when the format of the string being passed to moment may vary.\n\nA common scenario where forgiving mode is useful is in situations where a third party API is providing the date, and the date format for that API could change.  \nSuppose that an API starts by sending dates in 'YYYY-MM-DD' format, and then later changes to 'MM/DD/YYYY' format.\n\nIn strict mode, the following code results in 'Invalid Date' being displayed:\n\n``` javascript\nmoment('01/12/2016', 'YYYY-MM-DD', true).format()\n\"Invalid date\"\n```\n\nIn forgiving mode using a format string, you get a wrong date:\n\n``` javascript\nmoment('01/12/2016', 'YYYY-MM-DD').format()\n\"2001-12-20T00:00:00-06:00\"\n```\n\nThe wrong date scenario in forgiving mode is certainly less obvious to the user, but by that token could go unnoticed for a long time.\n\nWhen choosing between strict and forgiving mode, it is important to consider whether it is more important that dates be accurate, or that dates never display as \"Invalid Date\".\n\n### Multiple Formats\n\nMoment's parser supports specifying multiple possible formats for a date string. This can be extremely useful for situations where a date may be coming from multiple data sources.  \nJust pass the formats as an array:\n\n``` javascript\nmoment('12 March, 2016', ['DDMMMMY', 'MMMMDDY']).format()\n\"2016-03-12T00:00:00-06:00\"\nmoment('March 12, 2016', ['DDMMMMY', 'MMMMDDY']).format()\n\"2016-03-12T00:00:00-06:00\"\n```\n\nIn order for this functionality to work properly, moment must parse every format provided. Because of this, the more formats that are used, the longer that parsing takes.  \nMoment's heuristic for determining which format to use is as follows:\n\n- Prefer formats resulting in [valid](#/parsing/is-valid/) dates over invalid ones.\n- Prefer formats that parse more of the string than less and use more of the format than less, i.e. prefer stricter parsing.\n- Prefer formats earlier in the array than later.\n\n## Warnings and Errors\n\nThere are several places where Moment.js displays deprecation warnings about functionality that will be removed in the future. Work-arounds are outlined here.\n\n### JS Date Construction\n\n``` javascript\nMoment construction falls back to js Date. \nThis is discouraged and will be removed in an upcoming major release.\n```\n\nThis deprecation warning is thrown when no known format is found for a date passed into the string constructor.  \nTo work around this issue, specify a format for the string being passed to `moment()`.\n\n[See the parsing docs for more information.](https://momentjs.com/docs/#/parsing/)\n\n[View original GitHub issue](https://github.com/moment/moment/issues/1407)\n\n### Define Locale Override\n\n``` javascript\nUse moment.updateLocale(localeName, config) to change an existing locale. \nmoment.defineLocale(localeName, config) should only be used for creating a new locale\n```\n\nThis deprecation warning is thrown when you attempt to change an existing locale using the defineLocale function.  \nDoing this will result in unexpected behavior related to property inheritance. moment.updateLocale will properly replace properties on an existing locale.\n\n[View original pull request](https://github.com/moment/moment/pull/2774)\n\n### Parent Locale Undefined\n\nWarning removed since **2.16.0**.\n\nA locale can be defined with a parent before the parent itself is defined or loaded. If the parent doesn't exist or can't be lazy loaded when the moment is created, the parent will default to the global locale.\n\n### Locale Not Found\n\n``` javascript\nLocale <key> not found. Did you forget to load it?\n```\n\nThis warning is displayed when a global locale is set but Moment cannot find it. Perhaps this locale is not bundled in your copy.\n\n### Add/Subtract\n\n``` javascript\nmoment().add(period, number) is deprecated. Please use moment().add(number, period)\nmoment().subtract(period, number) is deprecated. Please use moment().subtract(number, period)\n```\n\nMoment deprecated ordering the parameters of add and subtract as (period, number). Invert your parameters.\n\nBad:\n\n``` javascript\nmoment().add('hours', 3);\n```\n\nGood:\n\n``` javascript\nmoment().add(3, 'hours');\n```\n\n### Min/Max\n\n``` javascript\nmoment().min is deprecated, use moment.max\nmoment().max is deprecated, use moment.min\n```\n\nThis warning is not a typo, but it is confusing.\n\nPrevious to version 2.7.0, moment supported moment().min and moment().max functions. These functions were unintuitive.\n\nMin would return the greater of the two moments in question, and max would return the lesser.\n\nDue to this inverted behavior, the suggestion provided in the deprecation warning is correct.\n\n``` javascript\nmoment('2016-01-01').min('2016-02-01').format()\n\"2016-02-01T00:00:00-06:00\"\n//is equivalent to\nmoment.max(moment('2016-01-01'), moment('2016-02-01')).format()\n\"2016-02-01T00:00:00-06:00\"\n```\n\n``` javascript\nmoment('2016-01-01').max('2016-02-01').format()\n\"2016-01-01T00:00:00-06:00\"\n//is equivalent to\nmoment.min(moment('2016-01-01'), moment('2016-02-01')).format()\n\"2016-01-01T00:00:00-06:00\"\n```\n\n[See original GitHub issue.](https://github.com/moment/moment/issues/1548)\n\n### Zone\n\n``` javascript\nmoment().zone is deprecated, \nuse moment().utcOffset instead.\n```\n\nThis deprecation was made for purposes of clarity.\n\nThe result of `moment().zone()` is an integer that indicates the number of minutes that a given moment is offset from UTC, with the sign inverted (US moments result in a positive value).\n\nUsing `moment().zone(number)` to set the offset will set the offset on the date, also using an inverted sign.\n\nBecause a time zone is not the same thing as an offset, the name was changed to utcOffset. At that time the sign was corrected to reflect the actual direction of the UTC offset.\n\n``` javascript\nmoment().zone()\n360\n//is replaced by\nmoment().utcOffset()\n-360\n\nmoment().zone(420)\n//is replaced by \nmoment().utcOffset(-420)\n```\n\n[For more information on time zone vs offset, see the Time Zone vs Offset guide.](#/lib-concepts/timezone-offset/)\n\n[View original GitHub issue.](https://github.com/moment/moment/issues/1779)\n\n## External Resources\n\nThese resources are made by members of the date/time/time zone community.\n\n### Videos\n\n**[Date and Time Odds, Ends and Oddities](https://www.youtube.com/watch?v=ieIzNP6gKqU)**\n\n- YouTube, Maggie Pint, Moment.js core contributor\n\n**[Date and Time Fundamentals](https://www.pluralsight.com/courses/date-time-fundamentals)**\n\n- Pluralsight, Matt Johnson, Moment.js core contributor\n\n### Blogs\n\n**[Matt Johnson's Blog](http://codeofmatt.com/)**\n\n- Moment.js core contributor. Date and time concepts in programming.\n\n**[Maggie Pint's Blog](https://maggiepint.com/)**\n\n- Moment.js core contributor. Moment.js development progress and roadmaps. Moment.js library help.\n\n**[Lau Taarnskov's blog](http://www.creativedeletion.com/)**\n\n- Author - Elixir Calendar. Date and time programming concepts. Elixir date and time.\n\n**[Jon Skeet's blog](https://codeblog.jonskeet.uk/)**\n\n- Author - NodaTime. Stack Overflow \\#1 user. Date and time programming concepts.\n\n### Miscellaneous\n\n**[Stack Overflow TimeZone Tag Wiki](https://stackoverflow.com/tags/timezone/info)**\n\n**[Stack Overflow DateTime vs DateTimeOffset](https://stackoverflow.com/q/4331189)**\n\n**[IANA Time Zone Database](https://www.iana.org/time-zones)**\n\n- Main time zone database. This is where Moment TimeZone sources its data from.\n\nÂ© JS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://momentjs.com/guides/](https://momentjs.com/guides/)"
- name: Internal Properties
  id: guides/index#/lib-concepts/internal-properties/
  summary: The most commonly viewed internal property is the _d property that holds the JavaScript Date that Moment wrappers
  belongs_to: Guides
  description: "### Internal Properties\n\nMoment objects have several internal properties that are prefixed with `_`.\n\nThe most commonly viewed internal property is the `_d` property that holds the JavaScript Date that Moment wrappers.  \nFrequently, developers are confused by console output of the value of `_d`.  \nMoment uses a technique called epoch shifting that causes this property to sometimes differ from the actual date value that the Moment reflects.  \nIn particular if Moment TimeZone is in use, this property will almost never be the same as the actual value that Moment will output from its public `.format()` function.  \nAs such, the values of `_d` and any other properties prefixed with `_` should not be used for any purpose.\n\nTo print out the value of a Moment, use `.format()`, `.toString()` or `.toISOString()`.\n\nTo retrieve a native Date object from Moment, use `.toDate()`. This function returns a properly shifted date for interaction with third party APIs.\n\n## Parsing Guide\n\nMoment.js has a very flexible and advanced parser that allows a huge range of functionality.  \nThe flexibility of the parser also makes it one of the most frequently misused tools of Moment.js.\n\nThis section lays out some guidelines about how to correctly use the parser in your situation."
- name: JavaScript Date
  id: guides/index#/lib-concepts/js-date/
  summary: Moment.js provides a wrapper for the native JavaScript date object
  belongs_to: Guides
  description: "### JavaScript Date\n\nMoment.js provides a wrapper for the native JavaScript date object.  \nIn doing this, Moment.js extends the functionality and also accounts for several deficiencies in the object.\n\nParsing is notably unpredictable with native date. For instance, suppose I am using a computer in the United States, but I have a date in DD/MM/YYYY format.\n\n``` javascript\nvar a = new Date('01/12/2016'); //December 1 2016 in DD/MM/YYYY format\n//\"Tue Jan 12 2016 00:00:00 GMT-0600 (Central Standard Time)\"\n```\n\nThere is no good work-around for this behavior with the native Date object.  \nMoment's parser handles it just fine though:\n\n``` javascript\nmoment('01/12/2016', 'DD/MM/YYYY', true).format()\n\"2016-12-01T00:00:00-06:00\"\n```\n\nIn addition, the ECMA Script 5 Specification makes an unusual assertion about the offset of ISO 8601 dates:\n\n> The value of an absent time zone offset is \"Z\"\n\nEffectively what this means is that ISO 8601 dates without an offset are to be treated as UTC values, creating the following oddity:\n\n``` javascript\n//US local format\nvar a = new Date('1/1/2016'); \n//\"Fri Jan 01 2016 00:00:00 GMT-0600 (Central Standard Time)\"\n\n//ISO 8601\nvar a = new Date('2016-01-01');\n//\"Thu Dec 31 2015 18:00:00 GMT-0600 (Central Standard Time)\"\n```\n\nThe ES2015 spec fixes this mistake, bringing it in line with the ISO8601 specification, which specifies local time absent of offset.  \nThis is in it's own way bad as it has numerous negative back compatibility implications.\n\nWith Moment, the date is always interpreted as local time, unless you specify otherwise. This is not something that will change with the adoption of ES2015.\n\n``` javascript\nmoment('2016-01-01')\n//\"2016-01-01T00:00:00-06:00\"\n```\n\nArithmetic is another area where the native Date object is lacking. The Date object actually provides no API for this. Instead, it relies on overflowing date values.  \nSuppose you wanted to add 1 day to April 30, 2016. With the date object you would do the following:\n\n``` javascript\nvar a = new Date('4/30/2016'); \na.setDate(a.getDate() + 1);\n```\n\nThis does the trick, but is somewhat unintuitive.  \nMoment provides an API to add/subtract:\n\n``` javascript\nmoment('4/30/2016', 'MM/DD/YYYY').add(1, 'day')\n//\"2016-05-01T00:00:00-05:00\"\n```"
- name: JS Date Construction
  id: guides/index#/warnings/js-date/
  summary: This deprecation warning is thrown when no known format is found for a date passed into the string constructor
  belongs_to: Guides
  description: "### JS Date Construction\n\n``` javascript\nMoment construction falls back to js Date. \nThis is discouraged and will be removed in an upcoming major release.\n```\n\nThis deprecation warning is thrown when no known format is found for a date passed into the string constructor.  \nTo work around this issue, specify a format for the string being passed to `moment()`.\n\n[See the parsing docs for more information.](https://momentjs.com/docs/#/parsing/)\n\n[View original GitHub issue](https://github.com/moment/moment/issues/1407)"
- name: Known Date Formats
  id: guides/index#/parsing/known-formats/
  summary: If you know the format of the date string that you will be parsing, it is always the best choice to explicitly specify that format
  belongs_to: Guides
  description: |-
    ### Known Date Formats

    If you know the format of the date string that you will be parsing, it is always the best choice to explicitly specify that format.

    Examples:

    ``` javascript
    moment('01/01/2016', 'MM/DD/YYYY')
    moment('2016-01-01 11:31:23 PM', 'YYYY-MM-DD hh:mm:ss a')
    ```

    If your dates are in an ISO 8601 format, you can use a constant built into moment to indicate that:

    ``` javascript
    moment('2016-01-01 12:25:32', moment.ISO_8601)
    ```

    ISO 8601 formats include, but are not limited to:

        2013-02-08               # A calendar date part
        2013-W06-5               # A week date part
        2013-02-08T09            # An hour time part separated by a T
        2013-02-08 09            # An hour time part separated by a space
        2013-02-08 09:30:26      # An hour, minute, and second time part
        2013-02-08 09+07:00      # +-HH:mm

    [See the API documentation on parsing strings for a full listing.](https://momentjs.com/docs/#/parsing/string/)
- name: Local vs UTC vs Offset
  id: guides/index#/parsing/local-utc-zone/
  summary: Moment offers three functions for parsing dates, the basic moment function, moment.utc, and moment.parseZone
  belongs_to: Guides
  description: |-
    ### Local vs UTC vs Offset

    Moment offers three functions for parsing dates, the basic moment function, moment.utc, and moment.parseZone.

    If you wish to interact with a date in the context of the user's local time, use the moment function.

    ``` javascript
    moment('2016-01-01T23:35:01');
    ```

    This results in a date with a UTC offset that is the same as the local computer:

    "2016-01-01T23:35:01-06:00"

    If you wish to interact with the date as a UTC date, use moment.utc:

    ``` javascript
    moment.utc('2016-01-01T23:35:01');
    ```

    This results in a date with a utc offset of +0:00:

    "2016-01-01T23:35:01+00:00"

    If your date format has a fixed timezone offset, use moment.parseZone:

    ``` javascript
    moment.parseZone("2013-01-01T00:00:00-13:00");
    ```

    This results in a date with a fixed offset:

    "2013-01-01T00:00:00-13:00"

    Note that if you use moment() or moment.utc() to parse a date with a specified offset, the date will be converted from that offset to either local or UTC:

    This date is shifted by 8 hours, moving from +2 to -6 (the offset of the local machine)

    ``` javascript
    moment('2016-01-01T00:00:00+02:00').format()
    "2015-12-31T16:00:00-06:00"
    ```

    This date is shifted by 2 hours, moving from +2 to UTC

    ``` javascript
    moment.utc('2016-01-01T00:00:00+02:00').format()
    "2015-12-31T22:00:00+00:00"
    ```
- name: Locale Not Found
  id: guides/index#/warnings/locale-not-found/
  summary: This warning is displayed when a global locale is set but Moment cannot find it
  belongs_to: Guides
  description: |-
    ### Locale Not Found

    ``` javascript
    Locale <key> not found. Did you forget to load it?
    ```

    This warning is displayed when a global locale is set but Moment cannot find it. Perhaps this locale is not bundled in your copy.
- name: Locale#calendar
  id: index#/customization/calendar/
  summary: Locale#calendar should have the following formatting strings
  description: |-
    ### Calendar 1.3.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        calendar : Object
    });
    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        calendar : Object
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        calendar : Object
    });
    ```

    `Locale#calendar` should have the following formatting strings.

    ``` javascript
    moment.locale('en', {
        calendar : {
            lastDay : '[Yesterday at] LT',
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            lastWeek : '[last] dddd [at] LT',
            nextWeek : 'dddd [at] LT',
            sameElse : 'L'
        }
    });
    ```

    Each of the `Locale#calendar` keys can also be a callback function with the scope of the current moment and first argument a moment that depicts now. It should return a formatting string.

    ``` javascript
    function callback (now) {
        return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
    }
    ```
- name: Locale#Eras
  id: index#/customization/eras/
  summary: Specify Eras for a particular locale
  description: |-
    ### Eras 2.25.0+

    ``` javascript
    moment.updateLocale('en', {
        eras: [{
            since:  '0001-01-01',
            until:  +Infinity,
            offset: 1,
            name:   'Anno Domini',
            narrow: 'AD',
            abbr:   'AD'
        }, {
            until:   -Infinity,
            since:  '0000-12-31',
            offset: 1,
            name:   'Before Christ',
            narrow: 'BC',
            abbr:   'BC'
        }],
    });
    ```

    Specify Eras for a particular locale. An era is a time interval with name and year numbering. Absolute year number (like 2020) can also be specified as 2020 AD: the 2020th year of the era AD. Similarly the absolute year number -0500 can be described as 501 BC, the 501st year from the BC era.

    ``` javascript
    eras: [{
        since:  '0001-01-01', // the start of the era
        until:  +Infinity,    // the end of the era, can be +/-Infinity
        offset: 1,            // added to year to (mostly) avoid 0 era years
        name:   'Anno Domini',// full name of era
        narrow: 'AD',         // narrow name of era
        abbr:   'AD'          // abbreviated name of era
    }]
    ```

    `since` and `until` govern the direction of the era. As in the case of `BC` it grows toward `-Infinity`, thus `since` \> `until`. For eras that increment toward +Infinity `since` \< `until`.

    Parsing/formatting of eras is accomplished with `yo`, `y*` and `N*` tokens.

    **Note**: The era-related APIs are subject to change.
- name: Locale#invalidDate
  id: index#/customization/invalid-date/
  summary: Locale#invalidDate should be a string
  description: |-
    ### Invalid Date 2.3.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        invalidDate : String
    });

    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        invalidDate : String
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        invalidDate : String
    });
    ```

    `Locale#invalidDate` should be a string.

    ``` javascript
    moment.updateLocale("es", {
      invalidDate: "Fecha invalida"
    });
    ```

    ## Durations

    Moment.js also has duration objects. Where a moment is defined as a single point in time, a duration is defined as a length of time.

    Durations do not have a defined beginning and end date. They are contextless.

    A duration is conceptually more similar to '2 hours' than to 'between 2 and 4 pm today'. As such, they are not a good solution to converting between units that depend on context.

    For example, a year can be defined as 366 days, 365 days, 365.25 days, 12 months, or 52 weeks. Trying to convert years to days makes no sense without context. It is much better to use `moment#diff` for calculating days or years between two moments than to use `Durations`.

    As [discussed here](https://github.com/moment/moment/issues/4815), the duration format for Moment.js differs very slightly from the specifications for ISO 8601 nominal duration and RFC 5545 duration.
- name: Locale#longDateFormat
  id: index#/customization/long-date-formats/
  summary: Locale#longDateFormat should be an object containing a key/value pair for each long date format L LL LLL LLLL LT LTS
  description: |-
    ### Long Date Formats 1.1.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        weekdaysMin : String[]
    });
    moment.updateLocale('en', {
        weekdaysMin : Function
    });

    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        longDateFormat : Object
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        longDateFormat : Object
    });
    ```

    `Locale#longDateFormat` should be an object containing a key/value pair for each long date format `L LL LLL LLLL LT LTS`. `LT` should be the time format, and is also used for `moment#calendar`.

    ``` javascript
    moment.updateLocale('en', {
        longDateFormat : {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "MM/DD/YYYY",
            l: "M/D/YYYY",
            LL: "MMMM Do YYYY",
            ll: "MMM D YYYY",
            LLL: "MMMM Do YYYY LT",
            lll: "MMM D YYYY LT",
            LLLL: "dddd, MMMM Do YYYY LT",
            llll: "ddd, MMM D YYYY LT"
        }
    });
    ```

    You can eliminate the lowercase `l` tokens and they will be created automatically by replacing long tokens with the short token variants.

    ``` javascript
    moment.updateLocale('en', {
        longDateFormat : {
            LT: "h:mm A",
            LTS: "h:mm:ss A",
            L: "MM/DD/YYYY",
            LL: "MMMM Do YYYY",
            LLL: "MMMM Do YYYY LT",
            LLLL: "dddd, MMMM Do YYYY LT"
        }
    });
    ```
- name: Locale#meridiem
  id: index#/customization/am-pm/
  summary: If your locale uses 'am/pm', Locale#meridiem can be omitted, as those values are the defaults
  description: |-
    ### AM/PM 1.6.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        meridiem : Function
    });
    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        meridiem : Function
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        meridiem : Function
    });
    ```

    If your locale uses 'am/pm', `Locale#meridiem` can be omitted, as those values are the defaults.

    If your locale needs any different computation for am/pm, `Locale#meridiem` should be a callback function that returns the correct string based on hour, minute, and upper/lowercase.

    ``` javascript
    moment.updateLocale('zh-cn', {
        meridiem : function (hour, minute, isLowercase) {
            if (hour < 9) {
                return "æ©ä¸";
            } else if (hour < 11 && minute < 30) {
                return "ä¸å";
            } else if (hour < 13 && minute < 30) {
                return "ä¸­å";
            } else if (hour < 18) {
                return "ä¸å";
            } else {
                return "æä¸";
            }
        }
    });
    ```
- name: Locale#meridiemParse
  id: index#/customization/am-pm-parsing/
  summary: Locale#isPM should return true if the input string is past 12 noon
  description: |-
    ### AM/PM Parsing 2.1.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        meridiemParse : RegExp
        isPM : Function
    });

    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        meridiemParse : RegExp
        isPM : Function
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        meridiemParse : RegExp
        isPM : Function
    });
    ```

    `Locale#isPM` should return true if the input string is past 12 noon. This is used in parsing the `a A` tokens.

    ``` javascript
    moment.updateLocale('en', {
        isPM : function (input) {
            return ((input + '').toLowerCase()[0] === 'p');
        }
    });
    ```

    To configure what strings should be parsed as input, set the `meridiemParse` property.

    ``` javascript
    moment.updateLocale('en', {
        meridiemParse : /[ap]\.?m?\.?/i
    });
    ```
- name: Locale#months
  id: index#/customization/month-names/
  summary: Locale#months should be an array of the month names
  description: |-
    ### Month Names 1.0.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        months : String[]
    });
    moment.updateLocale('en', {
        months : Function
    });
    moment.updateLocale('en', {
        months : {
            format : String[],
            standalone : String[]
        }
    });
    // From 2.11.0
    moment.locale('en', {
        months : {
            format : String[],
            standalone : String[]
        }
    });
    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        months : String[]
    });
    moment.locale('en', {
        months : Function
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        months : String[]
    });
    moment.lang('en', {
        months : Function
    });
    ```

    `Locale#months` should be an array of the month names.

    ``` javascript
    moment.updateLocale('en', {
        months : [
            "January", "February", "March", "April", "May", "June", "July",
            "August", "September", "October", "November", "December"
        ]
    });
    ```

    If you need more processing to calculate the name of the month, (for example, if there is different grammar for different formats), `Locale#months` can be a function with the following signature. It should always return a month name.

    ``` javascript
    moment.updateLocale('en', {
        months : function (momentToFormat, format) {
            // momentToFormat is the moment currently being formatted
            // format is the formatting string
            if (/^MMMM/.test(format)) { // if the format starts with 'MMMM'
                return nominative[momentToFormat.month()];
            } else {
                return subjective[momentToFormat.month()];
            }
        }
    });
    ```

    From version **2.11.0** months can also be an object, specifying `standalone` and `format` forms (nominative and accusative). The regular expression that is run on the format to check whether to use the `format` form is `/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/`. From version **2.14.0** a different one can be specified with the `isFormat` key.

    ``` javascript
    moment.updateLocale('en', {
        months : {
             format: 'sausio_vasario_kovo_balandÅ¾io_geguÅ¾Äs_birÅ¾elio_liepos_rugpjÅ«Äio_rugsÄjo_spalio_lapkriÄio_gruodÅ¾io'.split('_'),
             standalone: 'sausis_vasaris_kovas_balandis_geguÅ¾Ä_birÅ¾elis_liepa_rugpjÅ«tis_rugsÄjis_spalis_lapkritis_gruodis'.split('_'),
             isFormat: /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?|MMMM?(\[[^\[\]]*\]|\s+)+D[oD]?/  // from 2.14.0
        }
    });
    ```
- name: Locale#monthsShort
  id: index#/customization/month-abbreviations/
  summary: Locale#monthsShort should be an array of the month abbreviations
  description: |-
    ### Month Abbreviations 1.0.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        monthsShort : String[]
    });
    moment.updateLocale('en', {
        monthsShort : Function
    });
    moment.updateLocale('en', {
        monthsShort : {
            format: String[],
            standalone : String[]
        }
    });
    // From 2.11.0
    moment.locale('en', {
        monthsShort : {
            format: String[],
            standalone : String[]
        }
    });
    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        monthsShort : String[]
    });
    moment.locale('en', {
        monthsShort : Function
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        monthsShort : String[]
    });
    moment.lang('en', {
        monthsShort : Function
    });
    ```

    `Locale#monthsShort` should be an array of the month abbreviations.

    ``` javascript
    moment.updateLocale('en', {
        monthsShort : [
            "Jan", "Feb", "Mar", "Apr", "May", "Jun",
            "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        ]
    });
    ```

    Like `Locale#months`, `Locale#monthsShort` can be a callback function as well.

    ``` javascript
    moment.updateLocale('en', {
        monthsShort : function (momentToFormat, format) {
            if (/^MMMM/.test(format)) {
                return nominative[momentToFormat.month()];
            } else {
                return subjective[momentToFormat.month()];
            }
        }
    });
    ```

    **Note:** From version **2.11.0**, like `Locale#months`, `Locale#monthsShort` can be an object with `standalone` and `format` cases.

    ``` javascript
    moment.updateLocale('en', {
        monthsShort : {
            format: 'ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ñ_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº'.split('_'),
            standalone: 'ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°ÑÑ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº'.split('_')
        }
    });
    ```
- name: Locale#ordinal
  id: index#/customization/ordinal/
  summary: Locale#ordinal should be a function that returns the ordinal for a given number
  description: |-
    ### Ordinal 1.0.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        ordinal : Function
    });
    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        ordinal : Function
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        ordinal : Function
    });
    ```

    `Locale#ordinal` should be a function that returns the ordinal for a given number.

    ``` javascript
    moment.updateLocale('en', {
        ordinal : function (number, token) {
            var b = number % 10;
            var output = (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });
    ```

    As of **2.0.0**, the ordinal function should return both the number and the ordinal. Previously, only the ordinal was returned.

    As of **2.1.0**, the token parameter was added. It is a string of the token that is being ordinalized, for example: `M` or `d`.

    For more information on ordinal numbers, see [Wikipedia](https://en.wikipedia.org/wiki/Ordinal_number_%28linguistics%29).
- name: Locale#relativeTime
  id: index#/customization/relative-time/
  summary: Locale#relativeTime should be an object of the replacement strings for moment#from
  description: |-
    ### Relative Time 1.0.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        relativeTime : Object
    });
    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        relativeTime : Object
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        relativeTime : Object
    });
    ```

    `Locale#relativeTime` should be an object of the replacement strings for `moment#from`.

    ``` javascript
    moment.updateLocale('en', {
        relativeTime : {
            future: "in %s",
            past:   "%s ago",
            s  : 'a few seconds',
            ss : '%d seconds',
            m:  "a minute",
            mm: "%d minutes",
            h:  "an hour",
            hh: "%d hours",
            d:  "a day",
            dd: "%d days",
            w:  "a week",
            ww: "%d weeks",
            M:  "a month",
            MM: "%d months",
            y:  "a year",
            yy: "%d years"
        }
    });
    ```

    `Locale#relativeTime.future` refers to the prefix/suffix for future dates, and `Locale#relativeTime.past` refers to the prefix/suffix for past dates. For all others, a single character refers to the singular, and a double character refers to the plural.

    If a locale requires additional processing for a token, it can set the token as a function with the following signature. The function should return a string.

    ``` javascript
    function (number, withoutSuffix, key, isFuture) {
        return string;
    }
    ```

    The `key` argument refers to the replacement key in the `Locale#relativeTime` object. (eg. `s m mm h`, etc.)

    The `number` argument refers to the number of units for that key. For `m`, the number is the number of minutes, etc.

    The `withoutSuffix` argument will be true if the token will be displayed without a suffix, and false if it will be displayed with a suffix. (The reason for the inverted logic is because the default behavior is to display with the suffix.)

    The `isFuture` argument will be true if it is going to use the future suffix/prefix and false if it is going to use the past prefix/suffix.

    **Note**: Handling for `w` and `ww` was added in **2.25.0**.
- name: Locale#week
  id: index#/customization/dow-doy/
  summary: Locale#week.dow should be an integer representing the first day of the week, 0 is Sunday, 1 is Monday, ..., 6 is Saturday
  description: |-
    ### First Day of Week and First Week of Year 1.0.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        week : {
            dow : Int,
            doy : Int
         }
    });
    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        week : {
            dow : Int,
            doy : Int
        }
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        week : {
            dow : Int,
            doy : Int
        }
    });
    ```

    `Locale#week.dow` should be an integer representing the first day of the week, 0 is Sunday, 1 is Monday, ..., 6 is Saturday.

    `Locale#week.doy` should be an integer. `doy` is used together with `dow` to determine the first week of the year. `doy` is calculated as `7 + dow - janX`, where `janX` is the first day of January that must belong to the first week of the year.

    ``` javascript
    // ISO-8601, Europe
    moment.updateLocale("en", { week: {
      dow: 1, // First day of week is Monday
      doy: 4  // First week of year must contain 4 January (7 + 1 - 4)
    }});

    // US, Canada
    moment.updateLocale("en", { week: {
      dow: 0, // First day of week is Sunday
      doy: 6  // First week of year must contain 1 January (7 + 0 - 1)
    }});

    // Many Arab countries
    moment.updateLocale("en", { week: {
      dow: 6, // First day of week is Saturday
      doy: 12 // First week of year must contain 1 January (7 + 6 - 1)
    }});

    // Also common
    moment.updateLocale("en", { week: {
      dow: 1, // First day of week is Monday
      doy: 7  // First week of year must contain 1 January (7 + 1 - 1)
    }});
    ```
- name: Locale#weekdays
  id: index#/customization/weekday-names/
  summary: Locale#weekdays should be an array of the weekdays names
  description: |-
    ### Weekday Names 1.0.0+

    ``` javascript
    // From version 2.12.0 onward
    moment.updateLocale('en', {
        weekdays : String[]
    });
    moment.updateLocale('en', {
        weekdays : Function
    });
    moment.updateLocale('en', {
        weekdays : {
            standalone : String[],
            format : String[],
            isFormat : RegExp
        }
    });
    // From version 2.11.0
    moment.locale('en', {
        weekdays : {
            standalone : String[],
            format : String[],
            isFormat : Boolean
        }
    });
    // From version 2.8.1 to 2.11.2
    moment.locale('en', {
        weekdays : String[]
    });
    moment.locale('en', {
        weekdays : Function
    });

    // Deprecated version 2.8.1
    moment.lang('en', {
        weekdays : String[]
    });
    moment.lang('en', {
        weekdays : Function
    });
    ```

    `Locale#weekdays` should be an array of the weekdays names.

    ``` javascript
    moment.updateLocale('en', {
        weekdays : [
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
        ]
    });
    ```

    `Locale#weekdays` can be a callback function as well.

    ``` javascript
    moment.updateLocale('en', {
        weekdays : function (momentToFormat, format) {
            return weekdays[momentToFormat.day()];
        }
    });
    ```

    **Note:** From version **2.11.0** format/standalone cases can be passed as well. `isFormat` will be used against the full format string to determine which form to use.

    ``` javascript
    moment.updateLocale('en', {
        weekdays : {
            standalone: 'ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_ÐÑÐ¾ÑÐ½Ð¸Ðº_Ð¡ÑÐµÐ´Ð°_Ð§ÐµÑÐ²ÐµÑÐ³_ÐÑÑÐ½Ð¸ÑÐ°_Ð¡ÑÐ±Ð±Ð¾ÑÐ°'.split('_'),
            format: 'ÐÐ¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_ÐÑÐ¾ÑÐ½Ð¸Ðº_Ð¡ÑÐµÐ´Ñ_Ð§ÐµÑÐ²ÐµÑÐ³_ÐÑÑÐ½Ð¸ÑÑ_Ð¡ÑÐ±Ð±Ð¾ÑÑ'.split('_'),
            isFormat: /\[ ?[ÐÐ²] ?(?:Ð¿ÑÐ¾ÑÐ»ÑÑ|ÑÐ»ÐµÐ´ÑÑÑÑÑ|ÑÑÑ)? ?\] ?dddd/
        }
    });
    ```
- name: Locale#weekdaysMin
  id: index#/customization/weekday-min/
  summary: Locale#weekdaysMin should be an array of two letter weekday abbreviations
  description: |-
    ### Minimal Weekday Abbreviations 1.7.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        weekdaysMin : String[]
    });
    moment.updateLocale('en', {
        weekdaysMin : Function
    });

    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        weekdaysMin : String[]
    });
    moment.locale('en', {
        weekdaysMin : Function
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        weekdaysMin : String[]
    });
    moment.lang('en', {
        weekdaysMin : Function
    });
    ```

    `Locale#weekdaysMin` should be an array of two letter weekday abbreviations. The purpose of these is for things like calendar pickers, thus they should be as small as possible.

    ``` javascript
    moment.updateLocale('en', {
        weekdaysMin : ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
    });
    ```

    `Locale#weekdaysMin` can be a callback function as well.

    ``` javascript
    moment.updateLocale('en', {
        weekdaysMin : function (momentToFormat, format) {
            return weekdaysMin[momentToFormat.day()];
        }
    });
    ```
- name: Locale#weekdaysShort
  id: index#/customization/weekday-abbreviations/
  summary: Locale#weekdaysShort should be an array of the weekdays abbreviations
  description: |-
    ### Weekday Abbreviations 1.0.0+

    ``` javascript
    // From 2.12.0 onward
    moment.updateLocale('en', {
        weekdaysShort : String[]
    });
    moment.updateLocale('en', {
        weekdaysShort : Function
    });
    // From 2.8.1 to 2.11.2
    moment.locale('en', {
        weekdaysShort : String[]
    });
    moment.locale('en', {
        weekdaysShort : Function
    });

    // Deprecated in 2.8.1
    moment.lang('en', {
        weekdaysShort : String[]
    });
    moment.lang('en', {
        weekdaysShort : Function
    });
    ```

    `Locale#weekdaysShort` should be an array of the weekdays abbreviations.

    ``` javascript
    moment.updateLocale('en', {
        weekdaysShort : ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    });
    ```

    `Locale#weekdaysShort` can be a callback function as well.

    ``` javascript
    moment.updateLocale('en', {
        weekdaysShort : function (momentToFormat, format) {
            return weekdaysShort[momentToFormat.day()];
        }
    });
    ```
- name: meteor
  id: index#/use-it/meteor/
  summary: null
  description: |-
    ### meteor

    [meteor](https://www.meteor.com/) / [atmosphere](https://atmospherejs.com/) / [momentjs:moment](https://atmospherejs.com/momentjs/moment)

    ``` javascript
    meteor add momentjs:moment
    ```
- name: Min/Max
  id: guides/index#/warnings/min-max/
  summary: This warning is not a typo, but it is confusing
  belongs_to: Guides
  description: |-
    ### Min/Max

    ``` javascript
    moment().min is deprecated, use moment.max
    moment().max is deprecated, use moment.min
    ```

    This warning is not a typo, but it is confusing.

    Previous to version 2.7.0, moment supported moment().min and moment().max functions. These functions were unintuitive.

    Min would return the greater of the two moments in question, and max would return the lesser.

    Due to this inverted behavior, the suggestion provided in the deprecation warning is correct.

    ``` javascript
    moment('2016-01-01').min('2016-02-01').format()
    "2016-02-01T00:00:00-06:00"
    //is equivalent to
    moment.max(moment('2016-01-01'), moment('2016-02-01')).format()
    "2016-02-01T00:00:00-06:00"
    ```

    ``` javascript
    moment('2016-01-01').max('2016-02-01').format()
    "2016-01-01T00:00:00-06:00"
    //is equivalent to
    moment.min(moment('2016-01-01'), moment('2016-02-01')).format()
    "2016-01-01T00:00:00-06:00"
    ```

    [See original GitHub issue.](https://github.com/moment/moment/issues/1548)
- name: moment#add()
  id: index#/manipulating/add/
  summary: Mutates the original moment by adding time
  description: |-
    ### Add 1.0.0+

    ``` javascript
    moment().add(Number, String);
    moment().add(Duration);
    moment().add(Object);
    ```

    Mutates the original moment by adding time.

    This is a pretty robust function for adding time to an existing moment. To add time, pass the key of what time you want to add, and the amount you want to add.

    ``` javascript
    moment().add(7, 'days');
    ```

    There are some shorthand keys as well if you're into that whole brevity thing.

    ``` javascript
    moment().add(7, 'd');
    ```

    |              |           |
    |--------------|-----------|
    | Key          | Shorthand |
    | years        | y         |
    | quarters     | Q         |
    | months       | M         |
    | weeks        | w         |
    | days         | d         |
    | hours        | h         |
    | minutes      | m         |
    | seconds      | s         |
    | milliseconds | ms        |

    If you want to add multiple different keys at the same time, you can pass them in as an object literal.

    ``` javascript
    moment().add(7, 'days').add(1, 'months'); // with chaining
    moment().add({days:7,months:1}); // with object literal
    ```

    There are no upper limits for the amounts, so you can overload any of the parameters.

    ``` javascript
    moment().add(1000000, 'milliseconds'); // a million milliseconds
    moment().add(360, 'days'); // 360 days
    ```

    #### Special considerations for months and years

    If the day of the month on the original date is greater than the number of days in the final month, the day of the month will change to the last day in the final month.

    ``` javascript
    moment([2010, 0, 31]);                  // January 31
    moment([2010, 0, 31]).add(1, 'months'); // February 28
    ```

    There are also special considerations to keep in mind when adding time that crosses over daylight saving time. If you are adding years, months, weeks, or days, the original hour will always match the added hour.

    Adding a month will add the specified number of months to the date.

    ``` javascript
    moment([2010, 1, 28]);                 // February 28
    moment([2010, 1, 28]).add(1, 'month'); // March 28
    ```

    ``` javascript
    var m = moment(new Date(2011, 2, 12, 5, 0, 0)); // the day before DST in the US
    m.hours(); // 5
    m.add(1, 'days').hours(); // 5
    ```

    If you are adding hours, minutes, seconds, or milliseconds, the assumption is that you want precision to the hour, and will result in a different hour.

    ``` javascript
    var m = moment(new Date(2011, 2, 12, 5, 0, 0)); // the day before DST in the US
    m.hours(); // 5
    m.add(24, 'hours').hours(); // 6 (but you may have to set the timezone first)
    ```

    Alternatively, you can use [durations](#/durations/) to add to moments.

    ``` javascript
    var duration = moment.duration({'days' : 1});
    moment([2012, 0, 31]).add(duration); // February 1
    ```

    Before version **2.8.0**, the `moment#add(String, Number)` syntax was also supported. It has been deprecated in favor of `moment#add(Number, String)`.

    ``` javascript
    moment().add('seconds', 1); // Deprecated in 2.8.0
    moment().add(1, 'seconds');
    ```

    As of **2.12.0** when decimal values are passed for days and months, they are rounded to the nearest integer. Weeks, quarters, and years are converted to days or months, and then rounded to the nearest integer.

    ``` javascript
    moment().add(1.5, 'months') == moment().add(2, 'months')
    moment().add(.7, 'years') == moment().add(8, 'months') //.7*12 = 8.4, rounded to 8
    ```
- name: moment#calendar()
  id: index#/displaying/calendar-time/
  summary: Calendar time displays time relative to a given referenceDay (defaults to the start of today), but does so slightly differently than moment#fromNow
  description: |-
    ### Calendar Time 1.3.0+

    ``` javascript
    moment().calendar();
    moment().calendar(referenceDay);
    moment().calendar(referenceDay, formats);  // from 2.10.5
    moment().calendar(formats);  // from 2.25.0
    ```

    Calendar time displays time relative to a given `referenceDay` (defaults to the start of today), but does so slightly differently than `moment#fromNow`.

    `moment#calendar` will format a date with different strings depending on how close to `referenceDay`'s date (today by default) the date is.

    |                 |                        |
    |-----------------|------------------------|
    | Last week       | Last Monday at 2:30 AM |
    | The day before  | Yesterday at 2:30 AM   |
    | The same day    | Today at 2:30 AM       |
    | The next day    | Tomorrow at 2:30 AM    |
    | The next week   | Sunday at 2:30 AM      |
    | Everything else | 7/10/2011              |

    These strings are localized, and [can be customized](#/customization/calendar/).

    From **2.10.5** moment supports specifying calendar output formats per invocation:

    ``` javascript
    moment().calendar(null, {
        sameDay: '[Today]',
        nextDay: '[Tomorrow]',
        nextWeek: 'dddd',
        lastDay: '[Yesterday]',
        lastWeek: '[Last] dddd',
        sameElse: 'DD/MM/YYYY'
    });
    ```

    `sameElse` is used as the format when the moment is more than a week away from the `referenceDay`

    **Note:** From version **2.14.0** the formats argument to calendar can be a callback that is executed within the moment context with a single argument now:

    ``` javascript
    moment().calendar(null, {
      sameDay: function (now) {
        if (this.isBefore(now)) {
          return '[Will Happen Today]';
        } else {
          return '[Happened Today]';
        }
        /* ... */
      }
    });
    ```

    **Note:** From version **2.25.0** you can only pass a formats argument, it could be an object of strings and functions:

    ``` javascript
    moment().calendar({
        sameDay: '[Today]',
        nextDay: '[Tomorrow]',
        nextWeek: 'dddd',
        lastDay: '[Yesterday]',
        lastWeek: '[Last] dddd',
        sameElse: 'DD/MM/YYYY'
    });

    moment().calendar({
      sameDay: function (now) {
        if (this.isBefore(now)) {
          return '[Will Happen Today]';
        } else {
          return '[Happened Today]';
        }
        /* ... */
      }
    });
    ```
- name: moment#creationData()
  id: index#/parsing/creation-data/
  summary: null
  description: |-
    ### Creation Data 2.11.0+

    ``` javascript
    moment().creationData();
    ```

    After a moment object is created, all of the inputs can be accessed with `creationData()` method:

    ``` javascript
    moment("2013-01-02", "YYYY-MM-DD", true).creationData() === {
        input: "2013-01-02",
        format: "YYYY-MM-DD",
        locale: Locale obj,
        isUTC: false,
        strict: true
    }
    ```
- name: moment#date()
  id: index#/get-set/date/
  summary: Gets or sets the day of the month
  description: |-
    ### Date of Month 1.0.0+

    ``` javascript
    moment().date(Number);
    moment().date(); // Number
    moment().dates(Number);
    moment().dates(); // Number
    ```

    Gets or sets the day of the month.

    Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the months.

    **Note:**`Moment#date` is for the date of the month, and `Moment#day` is for the day of the week.

    **Note:** if you chain multiple actions to construct a date, you should start from a year, then a month, then a day etc. Otherwise you may get unexpected results, like when `day=31` and current month has only 30 days (the same applies to native JavaScript `Date` manipulation), the returned date will be the 30th of the current month (see [month](http://momentjs.com/docs/#/get-set/month/) for more details).

    Bad: `moment().date(day).month(month).year(year)`

    Good: `moment().year(year).month(month).date(day)`

    **2.16.0** deprecated using `moment().dates()`. Use `moment().date()` instead.
- name: moment#day()
  id: index#/get-set/day/
  summary: Gets or sets the day of the week
  description: |-
    ### Day of Week 1.3.0+

    ``` javascript
    moment().day(Number|String);
    moment().day(); // Number
    moment().days(Number|String);
    moment().days(); // Number
    ```

    Gets or sets the day of the week.

    This method can be used to set the day of the week, with Sunday as 0 and Saturday as 6.

    If the value given is from 0 to 6, the resulting date will be within the current (Sunday-to-Saturday) week.

    If the range is exceeded, it will bubble up to other weeks.

    ``` javascript
    moment().day(-7); // last Sunday (0 - 7)
    moment().day(0); // this Sunday (0)
    moment().day(7); // next Sunday (0 + 7)
    moment().day(10); // next Wednesday (3 + 7)
    moment().day(24); // 3 Wednesdays from now (3 + 7 + 7 + 7)
    ```

    **Note:**`Moment#date` is for the date of the month, and `Moment#day` is for the day of the week.

    As of **2.1.0**, a day name is also supported. This is parsed in the moment's current locale.

    ``` javascript
    moment().day("Sunday");
    moment().day("Monday");
    ```
- name: moment#dayOfYear()
  id: index#/get-set/day-of-year/
  summary: Gets or sets the day of the year
  description: |-
    ### Day of Year 2.0.0+

    ``` javascript
    moment().dayOfYear(Number);
    moment().dayOfYear(); // Number
    ```

    Gets or sets the day of the year.

    Accepts numbers from 1 to 366. If the range is exceeded, it will bubble up to the years.
- name: moment#daysInMonth()
  id: index#/displaying/days-in-month/
  summary: Get the number of days in the current month
  description: |-
    ### Days in Month 1.5.0+

    ``` javascript
    moment().daysInMonth();
    ```

    Get the number of days in the current month.

    ``` javascript
    moment("2012-02", "YYYY-MM").daysInMonth() // 29
    moment("2012-01", "YYYY-MM").daysInMonth() // 31
    ```
- name: moment#diff()
  id: index#/displaying/difference/
  summary: To get the difference in milliseconds, use moment#diff like you would use moment#from
  description: |-
    ### Difference 1.0.0+

    ``` javascript
    moment().diff(Moment|String|Number|Date|Array);
    moment().diff(Moment|String|Number|Date|Array, String);
    moment().diff(Moment|String|Number|Date|Array, String, Boolean);
    ```

    To get the difference in milliseconds, use `moment#diff` like you would use `moment#from`.

    ``` javascript
    var a = moment([2007, 0, 29]);
    var b = moment([2007, 0, 28]);
    a.diff(b) // 86400000
    ```

    To get the difference in another unit of measurement, pass that measurement as the second argument.

    ``` javascript
    var a = moment([2007, 0, 29]);
    var b = moment([2007, 0, 28]);
    a.diff(b, 'days') // 1
    ```

    To get the duration of a difference between two moments, you can pass `diff` as an argument into `moment#duration`. See the docs on [moment#duration](#/durations/diffing/) for more info.

    The supported measurements are `years`, `months`, `weeks`, `days`, `hours`, `minutes`, and `seconds`. For ease of development, the singular forms are supported as of **2.0.0**. Units of measurement other than milliseconds are available in version **1.1.1**.

    By default, `moment#diff` will truncate the result to zero decimal places, returning an integer. If you want a floating point number, pass `true` as the third argument. Before **2.0.0**, `moment#diff` returned a number rounded to the nearest integer, not a truncated number.

    ``` javascript
    var a = moment([2008, 9]);
    var b = moment([2007, 0]);
    a.diff(b, 'years');       // 1
    a.diff(b, 'years', true); // 1.75
    ```

    If the moment is earlier than the moment you are passing to `moment.fn.diff`, the return value will be negative.

    ``` javascript
    var a = moment();
    var b = moment().add(1, 'seconds');
    a.diff(b) // -1000
    b.diff(a) // 1000
    ```

    An easy way to think of this is by replacing `.diff(` with a minus operator.

    ``` javascript
              // a < b
    a.diff(b) // a - b < 0
    b.diff(a) // b - a > 0
    ```

    #### Month and year diffs

    `moment#diff` has some special handling for month and year diffs. It is optimized to ensure that two months with the same date are always a whole number apart.

    So Jan 15 to Feb 15 should be exactly 1 month.

    Feb 28 to Mar 28 should be exactly 1 month.

    Feb 28 2011 to Feb 28 2012 should be exactly 1 year.

    [See more discussion on the month and year diffs here](https://github.com/moment/moment/pull/571)

    This change to month and year diffs was made in **2.0.0**. As of version **2.9.0** diff also support quarter unit.
- name: moment#endOf()
  id: index#/manipulating/end-of/
  summary: Mutates the original moment by setting it to the end of a unit of time
  description: |-
    ### End of Time 1.7.0+

    ``` javascript
    moment().endOf(String);
    ```

    Mutates the original moment by setting it to the end of a unit of time.

    This is the same as `moment#startOf`, only instead of setting to the start of a unit of time, it sets to the end of a unit of time.

    ``` javascript
    moment().endOf("year"); // set the moment to 12-31 23:59:59.999 this year
    ```

    As of version **2.0.0**, `moment#endOf('day')` replaced `moment#eod`.

    **Note:**`moment#endOf('week')` was added in version **2.0.0**.

    As of version **2.1.0**, `moment#endOf('week')` uses the locale aware week start day.
- name: moment#format()
  id: index#/displaying/format/
  summary: This is the most robust display option
  description: |-
    ### Format 1.0.0+

    ``` javascript
    moment().format();
    moment().format(String);
    ```

    This is the most robust display option. It takes a string of tokens and replaces them with their corresponding values.

    ``` javascript
    moment().format();                                // "2014-09-08T08:02:17-05:00" (ISO 8601, no fractional seconds)
    moment().format("dddd, MMMM Do YYYY, h:mm:ss a"); // "Sunday, February 14th 2010, 3:25:50 pm"
    moment().format("ddd, hA");                       // "Sun, 3PM"
    moment().format("[Today is] dddd");               // "Today is Sunday"
    moment('gibberish').format('YYYY MM DD');         // "Invalid date"
    ```

    |                                |                    |                                                                                                                                                                                                                                                                                               |
    |--------------------------------|--------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    |                                | Token              | Output                                                                                                                                                                                                                                                                                        |
    | **Month**                      | M                  | 1 2 ... 11 12                                                                                                                                                                                                                                                                                 |
    |                                | Mo                 | 1st 2nd ... 11th 12th                                                                                                                                                                                                                                                                         |
    |                                | MM                 | 01 02 ... 11 12                                                                                                                                                                                                                                                                               |
    |                                | MMM                | Jan Feb ... Nov Dec                                                                                                                                                                                                                                                                           |
    |                                | MMMM               | January February ... November December                                                                                                                                                                                                                                                        |
    | **Quarter**                    | Q                  | 1 2 3 4                                                                                                                                                                                                                                                                                       |
    |                                | Qo                 | 1st 2nd 3rd 4th                                                                                                                                                                                                                                                                               |
    | **Day of Month**               | D                  | 1 2 ... 30 31                                                                                                                                                                                                                                                                                 |
    |                                | Do                 | 1st 2nd ... 30th 31st                                                                                                                                                                                                                                                                         |
    |                                | DD                 | 01 02 ... 30 31                                                                                                                                                                                                                                                                               |
    | **Day of Year**                | DDD                | 1 2 ... 364 365                                                                                                                                                                                                                                                                               |
    |                                | DDDo               | 1st 2nd ... 364th 365th                                                                                                                                                                                                                                                                       |
    |                                | DDDD               | 001 002 ... 364 365                                                                                                                                                                                                                                                                           |
    | **Day of Week**                | d                  | 0 1 ... 5 6                                                                                                                                                                                                                                                                                   |
    |                                | do                 | 0th 1st ... 5th 6th                                                                                                                                                                                                                                                                           |
    |                                | dd                 | Su Mo ... Fr Sa                                                                                                                                                                                                                                                                               |
    |                                | ddd                | Sun Mon ... Fri Sat                                                                                                                                                                                                                                                                           |
    |                                | dddd               | Sunday Monday ... Friday Saturday                                                                                                                                                                                                                                                             |
    | **Day of Week (Locale)**       | e                  | 0 1 ... 5 6                                                                                                                                                                                                                                                                                   |
    | **Day of Week (ISO)**          | E                  | 1 2 ... 6 7                                                                                                                                                                                                                                                                                   |
    | **Week of Year**               | w                  | 1 2 ... 52 53                                                                                                                                                                                                                                                                                 |
    |                                | wo                 | 1st 2nd ... 52nd 53rd                                                                                                                                                                                                                                                                         |
    |                                | ww                 | 01 02 ... 52 53                                                                                                                                                                                                                                                                               |
    | **Week of Year (ISO)**         | W                  | 1 2 ... 52 53                                                                                                                                                                                                                                                                                 |
    |                                | Wo                 | 1st 2nd ... 52nd 53rd                                                                                                                                                                                                                                                                         |
    |                                | WW                 | 01 02 ... 52 53                                                                                                                                                                                                                                                                               |
    | **Year**                       | YY                 | 70 71 ... 29 30                                                                                                                                                                                                                                                                               |
    |                                | YYYY               | 1970 1971 ... 2029 2030                                                                                                                                                                                                                                                                       |
    |                                | YYYYYY             | -001970 -001971 ... +001907 +001971 **Note:** [Expanded Years](https://tc39.es/ecma262/#sec-expanded-years) (Covering the full time value range of approximately 273,790 years forward or backward from 01 January, 1970)                                                                     |
    |                                | Y                  | 1970 1971 ... 9999 +10000 +10001 **Note:** This complies with the ISO 8601 standard for dates past the year 9999                                                                                                                                                                              |
    | **Era Year**                   | y                  | 1 2 ... 2020 ...                                                                                                                                                                                                                                                                              |
    | **Era**                        | N, NN, NNN         | BC AD **Note:** Abbr era name                                                                                                                                                                                                                                                                 |
    |                                | NNNN               | Before Christ, Anno Domini **Note:** Full era name                                                                                                                                                                                                                                            |
    |                                | NNNNN              | BC AD **Note:** Narrow era name                                                                                                                                                                                                                                                               |
    | **Week Year**                  | gg                 | 70 71 ... 29 30                                                                                                                                                                                                                                                                               |
    |                                | gggg               | 1970 1971 ... 2029 2030                                                                                                                                                                                                                                                                       |
    | **Week Year (ISO)**            | GG                 | 70 71 ... 29 30                                                                                                                                                                                                                                                                               |
    |                                | GGGG               | 1970 1971 ... 2029 2030                                                                                                                                                                                                                                                                       |
    | **AM/PM**                      | A                  | AM PM                                                                                                                                                                                                                                                                                         |
    |                                | a                  | am pm                                                                                                                                                                                                                                                                                         |
    | **Hour**                       | H                  | 0 1 ... 22 23                                                                                                                                                                                                                                                                                 |
    |                                | HH                 | 00 01 ... 22 23                                                                                                                                                                                                                                                                               |
    |                                | h                  | 1 2 ... 11 12                                                                                                                                                                                                                                                                                 |
    |                                | hh                 | 01 02 ... 11 12                                                                                                                                                                                                                                                                               |
    |                                | k                  | 1 2 ... 23 24                                                                                                                                                                                                                                                                                 |
    |                                | kk                 | 01 02 ... 23 24                                                                                                                                                                                                                                                                               |
    | **Minute**                     | m                  | 0 1 ... 58 59                                                                                                                                                                                                                                                                                 |
    |                                | mm                 | 00 01 ... 58 59                                                                                                                                                                                                                                                                               |
    | **Second**                     | s                  | 0 1 ... 58 59                                                                                                                                                                                                                                                                                 |
    |                                | ss                 | 00 01 ... 58 59                                                                                                                                                                                                                                                                               |
    | **Fractional Second**          | S                  | 0 1 ... 8 9                                                                                                                                                                                                                                                                                   |
    |                                | SS                 | 00 01 ... 98 99                                                                                                                                                                                                                                                                               |
    |                                | SSS                | 000 001 ... 998 999                                                                                                                                                                                                                                                                           |
    |                                | SSSS ... SSSSSSSSS | 000\[0..\] 001\[0..\] ... 998\[0..\] 999\[0..\]                                                                                                                                                                                                                                               |
    | **Time Zone**                  | z or zz            | EST CST ... MST PST **Note:** as of **1.6.0**, the z/zz format tokens have been deprecated from plain moment objects. [Read more about it here.](https://github.com/moment/moment/issues/162) However, they \*do\* work if you are using a specific time zone with the moment-timezone addon. |
    |                                | Z                  | -07:00 -06:00 ... +06:00 +07:00                                                                                                                                                                                                                                                               |
    |                                | ZZ                 | -0700 -0600 ... +0600 +0700                                                                                                                                                                                                                                                                   |
    | **Unix Timestamp**             | X                  | 1360013296                                                                                                                                                                                                                                                                                    |
    | **Unix Millisecond Timestamp** | x                  | 1360013296123                                                                                                                                                                                                                                                                                 |

    `X` was added in **2.0.0**.

    `e E gg gggg GG GGGG` were added in **2.1.0**.

    `x` was added in **2.8.4**.

    `SSSS` to `SSSSSSSSS` were added in **2.10.5**. They display 3 significant digits and the rest is filled with zeros.

    `k` and `kk` were added in **2.13.0**.

    #### Localized formats

    Because preferred formatting differs based on locale, there are a few tokens that can be used to format a moment based on its locale.

    There are upper and lower case variations on the same formats. The lowercase version is intended to be the shortened version of its uppercase counterpart.

    |                                                       |      |                                     |
    |-------------------------------------------------------|------|-------------------------------------|
    | **Time**                                              | LT   | 8:30 PM                             |
    | **Time with seconds**                                 | LTS  | 8:30:25 PM                          |
    | **Month numeral, day of month, year**                 | L    | 09/04/1986                          |
    |                                                       | l    | 9/4/1986                            |
    | **Month name, day of month, year**                    | LL   | September 4, 1986                   |
    |                                                       | ll   | Sep 4, 1986                         |
    | **Month name, day of month, year, time**              | LLL  | September 4, 1986 8:30 PM           |
    |                                                       | lll  | Sep 4, 1986 8:30 PM                 |
    | **Month name, day of month, day of week, year, time** | LLLL | Thursday, September 4, 1986 8:30 PM |
    |                                                       | llll | Thu, Sep 4, 1986 8:30 PM            |

    `l ll lll llll` are available in **2.0.0**. `LTS` was added in **2.8.4**.

    #### Escaping characters

    To escape characters in format strings, you can wrap the characters in square brackets.

    ``` javascript
    moment().format('[today] dddd'); // 'today Sunday'
    ```

    #### Similarities and differences with LDML

    **Note:** While these date formats are very similar to LDML date formats, there are a few minor differences regarding day of month, day of year, and day of week.

    For a breakdown of a few different date formatting tokens across different locales, see [this chart of date formatting tokens.](https://docs.google.com/spreadsheet/ccc?key=0AtgZluze7WMJdDBOLUZfSFIzenIwOHNjaWZoeGFqbWc&amp;hl=en_US#gid=0)

    #### Formatting speed

    To compare Moment.js formatting speed against other libraries, check out [this comparison against other libraries](https://jsperf.com/date-formatting/49).

    #### Other tokens

    If you are more comfortable working with strftime instead of LDML-like parsing tokens, you can use Ben Oakes' plugin. [benjaminoakes/moment-strftime](https://github.com/benjaminoakes/moment-strftime).

    #### Default format

    Calling `moment#format` without a format will default to `moment.defaultFormat`. Out of the box, `moment.defaultFormat` is the ISO8601 format `YYYY-MM-DDTHH:mm:ssZ`.

    As of version **2.13.0**, when in UTC mode, the default format is governed by `moment.defaultFormatUtc` which is in the format `YYYY-MM-DDTHH:mm:ss[Z]`. This returns `Z` as the offset, instead of `+00:00`.

    In certain instances, a local timezone (such as `Atlantic/Reykjavik`) may have a zero offset, and will be considered to be UTC. In such cases, it may be useful to set `moment.defaultFormat` and `moment.defaultFormatUtc` to use the same formatting.

    Changing the value of `moment.defaultFormat` will only affect formatting, and will not affect parsing. for example:

    ``` javascript
    moment.defaultFormat = "DD.MM.YYYY HH:mm";
    // parse with .toDate()
    moment('20.07.2018 09:19').toDate() // Invalid date
    // format the date string with the new defaultFormat then parse
    moment('20.07.2018 09:19', moment.defaultFormat).toDate() // Fri Jul 20 2018 09:19:00 GMT+0300
    ```
- name: moment#from()
  id: index#/displaying/from/
  summary: You may want to display a moment in relation to a time other than now
  description: |-
    ### Time from X 1.0.0+

    ``` javascript
    moment().from(Moment|String|Number|Date|Array);
    moment().from(Moment|String|Number|Date|Array, Boolean);
    ```

    You may want to display a moment in relation to a time other than now. In that case, you can use `moment#from`.

    ``` javascript
    var a = moment([2007, 0, 28]);
    var b = moment([2007, 0, 29]);
    a.from(b) // "a day ago"
    ```

    The first parameter is anything you can pass to `moment()` or an actual `Moment`.

    ``` javascript
    var a = moment([2007, 0, 28]);
    var b = moment([2007, 0, 29]);
    a.from(b);                     // "a day ago"
    a.from([2007, 0, 29]);         // "a day ago"
    a.from(new Date(2007, 0, 29)); // "a day ago"
    a.from("2007-01-29");          // "a day ago"
    ```

    Like `moment#fromNow`, passing `true` as the second parameter returns value without the suffix. This is useful wherever you need to have a human readable length of time.

    ``` javascript
    var start = moment([2007, 0, 5]);
    var end   = moment([2007, 0, 10]);
    end.from(start);       // "in 5 days"
    end.from(start, true); // "5 days"
    ```

    From version **2.10.3**, if any of the endpoints are invalid the result is the localized Invalid date string.
- name: moment#fromNow()
  id: index#/displaying/fromnow/
  summary: A common way of displaying time is handled by moment#fromNow
  description: |-
    ### Time from now 1.0.0+

    ``` javascript
    moment().fromNow();
    moment().fromNow(Boolean);
    ```

    A common way of displaying time is handled by `moment#fromNow`. This is sometimes called timeago or relative time.

    ``` javascript
    moment([2007, 0, 29]).fromNow(); // 4 years ago
    ```

    If you pass `true`, you can get the value without the suffix.

    ``` javascript
    moment([2007, 0, 29]).fromNow();     // 4 years ago
    moment([2007, 0, 29]).fromNow(true); // 4 years
    ```

    The base strings are [customized by the current locale](#/customization/relative-time/). Time is rounded to the nearest second.

    The breakdown of which string is displayed for each length of time is outlined in the table below.

    | Range                       | Key | Sample Output                    |
    |-----------------------------|-----|----------------------------------|
    | 0 to 44 seconds             | s   | a few seconds ago                |
    | *unset*                     | ss  | 44 seconds ago                   |
    | 45 to 89 seconds            | m   | a minute ago                     |
    | 90 seconds to 44 minutes    | mm  | 2 minutes ago ... 44 minutes ago |
    | 45 to 89 minutes            | h   | an hour ago                      |
    | 90 minutes to 21 hours      | hh  | 2 hours ago ... 21 hours ago     |
    | 22 to 35 hours              | d   | a day ago                        |
    | 36 hours to 25 days         | dd  | 2 days ago ... 25 days ago       |
    | 26 to 45 days               | M   | a month ago                      |
    | 45 to 319 days              | MM  | 2 months ago ... 10 months ago   |
    | 320 to 547 days (1.5 years) | y   | a year ago                       |
    | 548 days+                   | yy  | 2 years ago ... 20 years ago     |

    **Note:** From version **2.10.3**, if the target moment object is invalid the result is the localized Invalid date string.

    **Note:** The `ss` key was added in **2.18.0**. It is an optional threshold. It will never display UNLESS the user manually sets the ss threshold. Until the `ss` threshold is set, it defaults to the value of the `s` threshold minus 1 (so, invisible to the user).
- name: moment#get()
  id: index#/get-set/get/
  summary: String getter
  description: |-
    ### Get 2.2.1+

    ``` javascript
    moment().get('year');
    moment().get('month');  // 0 to 11
    moment().get('date');
    moment().get('hour');
    moment().get('minute');
    moment().get('second');
    moment().get('millisecond');
    ```

    String getter. In general

    ``` javascript
    moment().get(unit) === moment()[unit]()
    ```

    Units are case insensitive, and support plural and short forms: year (years, y), month (months, M), date (dates, D), hour (hours, h), minute (minutes, m), second (seconds, s), millisecond (milliseconds, ms).
- name: moment#hour()
  id: index#/get-set/hour/
  summary: Gets or sets the hour
  description: |-
    ### Hour 1.0.0+

    ``` javascript
    moment().hour(Number);
    moment().hour(); // Number
    moment().hours(Number);
    moment().hours(); // Number
    ```

    Gets or sets the hour.

    Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the day.
- name: moment#inspect()
  id: index#/displaying/inspect/
  summary: Returns a machine readable string, that can be evaluated to produce the same moment
  description: |-
    ### Inspect 2.16.0+

    ``` javascript
    moment().inspect();
    ```

    Returns a machine readable string, that can be evaluated to produce the same moment. Because of the name its also used in node interactive shell to display objects.

    ``` javascript
    moment().inspect() // 'moment("2016-11-09T22:23:27.861")'
    moment.utc().inspect() // 'moment.utc("2016-11-10T06:24:10.638+00:00")'
    moment.parseZone('2016-11-10T06:24:12.958+05:00').inspect() // 'moment.parseZone("2016-11-10T06:24:12.958+05:00")'
    moment(new Date('nope')).inspect() // 'moment.invalid(/* Invalid Date */)'
    moment('blah', 'YYYY').inspect() // 'moment.invalid(/* blah */)'
    ```

    **Note:** This function is mostly intended for debugging, not all cases are handled precisely.

    ## Query
- name: moment#isAfter()
  id: index#/query/is-after/
  summary: Check if a moment is after another moment
  description: |-
    ### Is After 2.0.0+

    ``` javascript
    moment().isAfter(Moment|String|Number|Date|Array);
    moment().isAfter(Moment|String|Number|Date|Array, String);
    ```

    Check if a moment is after another moment. The first argument will be parsed as a moment, if not already so.

    ``` javascript
    moment('2010-10-20').isAfter('2010-10-19'); // true
    ```

    If you want to limit the granularity to a unit other than milliseconds, pass the units as the second parameter.

    As the second parameter determines the precision, and not just a single value to check, using day will check for year, month and day.

    ``` javascript
    moment('2010-10-20').isAfter('2010-01-01', 'year'); // false
    moment('2010-10-20').isAfter('2009-12-31', 'year'); // true
    ```

    Like `moment#isSame` and `moment#isBefore`, any of the units of time that are supported for `moment#startOf` are supported for `moment#isAfter`.

    ``` javascript
    year month week isoWeek day hour minute second
    ```

    If nothing is passed to `moment#isAfter`, it will default to the current time.

    ``` javascript
    moment().isAfter(); // false
    ```
- name: moment#isBefore()
  id: index#/query/is-before/
  summary: Check if a moment is before another moment
  description: |-
    ### Is Before 2.0.0+

    ``` javascript
    moment().isBefore(Moment|String|Number|Date|Array);
    moment().isBefore(Moment|String|Number|Date|Array, String);
    ```

    Check if a moment is before another moment. The first argument will be parsed as a moment, if not already so.

    ``` javascript
    moment('2010-10-20').isBefore('2010-10-21'); // true
    ```

    If you want to limit the granularity to a unit other than milliseconds, pass the units as the second parameter.

    As the second parameter determines the precision, and not just a single value to check, using day will check for year, month and day.

    ``` javascript
    moment('2010-10-20').isBefore('2010-12-31', 'year'); // false
    moment('2010-10-20').isBefore('2011-01-01', 'year'); // true
    ```

    Like `moment#isAfter` and `moment#isSame`, any of the units of time that are supported for `moment#startOf` are supported for `moment#isBefore`.

    ``` javascript
    year month week isoWeek day hour minute second
    ```

    If nothing is passed to `moment#isBefore`, it will default to the current time.

    *NOTE*: `moment().isBefore()` has undefined behavior and should not be used! If the code runs fast the initial created moment would be the same as the one created in isBefore to perform the check, so the result would be `false`. But if the code runs slower it's possible that the moment created in isBefore is measurably after the one created in `moment()`, so the call would return `true`.
- name: moment#isBetween()
  id: index#/query/is-between/
  summary: Check if a moment is between two other moments, optionally looking at unit scale (minutes, hours, days, etc)
  description: |-
    ### Is Between 2.9.0+

    ``` javascript
    //From 2.13.0 onward
    moment().isBetween(moment-like, moment-like);
    moment().isBetween(moment-like, moment-like, String);
    moment().isBetween(moment-like, moment-like, String, String);
    // where moment-like is Moment|String|Number|Date|Array

    //2.9.0 to 2.12.0
    moment().isBetween(moment-like, moment-like);
    moment().isBetween(moment-like, moment-like, String);
    // where moment-like is Moment|String|Number|Date|Array
    ```

    Check if a moment is between two other moments, optionally looking at unit scale (minutes, hours, days, etc). The match is exclusive. The first two arguments will be parsed as moments, if not already so.

    ``` javascript
    moment('2010-10-20').isBetween('2010-10-19', '2010-10-25'); // true
    moment('2010-10-20').isBetween('2010-10-19', undefined); // true, since moment(undefined) evaluates as moment()
    ```

    Note that the order of the two arguments matter: the "smaller" date should be in the first argument.

    ``` javascript
    moment('2010-10-20').isBetween('2010-10-19', '2010-10-25'); // true
    moment('2010-10-20').isBetween('2010-10-25', '2010-10-19'); // false
    ```

    If you want to limit the granularity to a unit other than milliseconds, pass the units as the third parameter.

    ``` javascript
    moment('2010-10-20').isBetween('2010-01-01', '2012-01-01', 'year'); // false
    moment('2010-10-20').isBetween('2009-12-31', '2012-01-01', 'year'); // true
    ```

    Like `moment#isSame`, `moment#isBefore`, `moment#isAfter` any of the units of time that are supported for `moment#startOf` are supported for `moment#isBetween`. Year, month, week, isoWeek, day, hour, minute, and second.

    Version **2.13.0** introduces inclusivity. A `[` indicates inclusion of a value. A `(` indicates exclusion. If the inclusivity parameter is used, both indicators must be passed.

    ``` javascript
    moment('2016-10-30').isBetween('2016-10-30', '2016-12-30', undefined, '()'); //false
    moment('2016-10-30').isBetween('2016-10-30', '2016-12-30', undefined, '[)'); //true
    moment('2016-10-30').isBetween('2016-01-01', '2016-10-30', undefined, '()'); //false
    moment('2016-10-30').isBetween('2016-01-01', '2016-10-30', undefined, '(]'); //true
    moment('2016-10-30').isBetween('2016-10-30', '2016-10-30', undefined, '[]'); //true
    ```

    Note that in the event that the `from` and `to` parameters are the same, but the inclusivity parameters are different, false will preside.

    ``` javascript
    moment('2016-10-30').isBetween('2016-10-30', '2016-10-30', undefined, '(]'); //false
    ```

    If the inclusivity parameter is not specified, Moment will default to `()`.
- name: moment#isDST()
  id: index#/query/is-daylight-saving-time/
  summary: moment#isDST checks if the current moment is in daylight saving time
  description: |-
    ### Is Daylight Saving Time 1.2.0+

    ``` javascript
    moment().isDST();
    ```

    `moment#isDST` checks if the current moment is in daylight saving time.

    **NOTE**: This function is a HACK. moment has no way of knowing if a given time is in actual DST or not. Some time changes in a zone are DST related, some are not, and without complete timezone information it can't know.

    Moment currently checks the winter and summer time, and if the offset matches the summer offset (and summer off is different than winter off), then it reports DST. This works in vast majority of cases, but as mentioned above, is not "correct" and won't work for all cases. So don't come to us complaining.

    Event moment-timezone (at moment of writing 0.5.37) doesn't support DST info (i.e is the clock officially in DST at a given moment or not), so for things to get better some new stuff (and tzdata bundling) has to happen in moment-timezone.

    ``` javascript
    moment([2011, 2, 12]).isDST(); // false, March 12 2011 is not DST
    moment([2011, 2, 14]).isDST(); // true, March 14 2011 is DST
    // This example is for "en" locale: https://www.timeanddate.com/time/dst/2011.html
    ```
- name: moment#isDSTShifted()
  id: index#/query/is-dst-shifted/
  summary: 'Note: As of version 2.14.0 this function is deprecated'
  description: |-
    ### Is DST Shifted From 2.3.0, Deprecated 2.14.0

    ``` javascript
    moment('2013-03-10 2:30', 'YYYY-MM-DD HH:mm').isDSTShifted()
    ```

    **Note:** As of version **2.14.0** this function is **deprecated**. It doesn't give the right answer after modifying the moment object. For more information refer to [moment/3160](https://github.com/moment/moment/pull/3160)

    Another important piece of validation is to know if the date has been moved by a DST. For example, in most of the United States:

    ``` javascript
    moment('2013-03-10 2:30', 'YYYY-MM-DD HH:mm').format(); //=> '2013-03-10T01:30:00-05:00'
    ```

    This is because daylight saving time shifts the time from 2:00 to 3:00, so 2:30 isn't a real time. The resulting time is browser-dependent, either adjusting the time forward or backwards. Use `moment#isDSTShifted` to test for this condition.

    **Note:** before **2.3.0**, Moment objects in this condition always returned `false` for `moment#isValid`; they now return `true`.
- name: moment#isLeapYear()
  id: index#/query/is-leap-year/
  summary: moment#isLeapYear returns true if that year is a leap year, and false if it is not
  description: |-
    ### Is Leap Year 1.0.0+

    ``` javascript
    moment().isLeapYear();
    ```

    `moment#isLeapYear` returns `true` if that year is a leap year, and `false` if it is not.

    ``` javascript
    moment([2000]).isLeapYear() // true
    moment([2001]).isLeapYear() // false
    moment([2100]).isLeapYear() // false
    ```
- name: moment#isoWeek()
  id: index#/get-set/iso-week/
  summary: Gets or sets the ISO week of the year
  description: |-
    ### Week of Year (ISO) 2.0.0+

    ``` javascript
    moment().isoWeek(Number);
    moment().isoWeek(); // Number
    moment().isoWeeks(Number);
    moment().isoWeeks(); // Number
    ```

    Gets or sets the [ISO week of the year](https://en.wikipedia.org/wiki/ISO_week_date).

    When setting the week of the year, the day of the week is retained.
- name: moment#isoWeekday()
  id: index#/get-set/iso-weekday/
  summary: Gets or sets the ISO day of the week with 1 being Monday and 7 being Sunday
  description: |-
    ### ISO Day of Week 2.1.0+

    ``` javascript
    moment().isoWeekday(Number);
    moment().isoWeekday(); // Number
    ```

    Gets or sets the [ISO day of the week](https://en.wikipedia.org/wiki/ISO_week_date) with `1` being Monday and `7` being Sunday.

    As with `moment#day`, if the range is exceeded, it will bubble up to other weeks.

    ``` javascript
    moment().isoWeekday(1); // Monday
    moment().isoWeekday(7); // Sunday
    ```

    A day name is also supported. This is parsed in the moment's current locale.

    ``` javascript
    moment().isoWeekday("Sunday");
    moment().isoWeekday("Monday");
    ```
- name: moment#isoWeeksInYear()
  id: index#/get-set/iso-weeks-in-year/
  summary: Gets the number of weeks in the current moment's year, according to ISO weeks
  description: |-
    ### Weeks In Year (ISO) 2.6.0+

    ``` javascript
    moment().isoWeeksInYear();
    ```

    Gets the number of weeks in the current moment's year, according to [ISO weeks](https://en.wikipedia.org/wiki/ISO_week_date).
- name: moment#isoWeekYear()
  id: index#/get-set/iso-week-year/
  summary: Gets or sets the ISO week-year
  description: |-
    ### Week Year (ISO) 2.1.0+

    ``` javascript
    moment().isoWeekYear(Number);
    moment().isoWeekYear(); // Number
    ```

    Gets or sets the [ISO week-year](https://en.wikipedia.org/wiki/ISO_week_date).
- name: moment#isSame()
  id: index#/query/is-same/
  summary: Check if a moment is the same as another moment
  description: |-
    ### Is Same 2.0.0+

    ``` javascript
    moment().isSame(Moment|String|Number|Date|Array);
    moment().isSame(Moment|String|Number|Date|Array, String);
    ```

    Check if a moment is the same as another moment. The first argument will be parsed as a moment, if not already so.

    ``` javascript
    moment('2010-10-20').isSame('2010-10-20'); // true
    ```

    If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.

    ``` javascript
    moment('2010-10-20').isSame('2009-12-31', 'year');  // false
    moment('2010-10-20').isSame('2010-01-01', 'year');  // true
    moment('2010-10-20').isSame('2010-12-31', 'year');  // true
    moment('2010-10-20').isSame('2011-01-01', 'year');  // false
    ```

    When including a second parameter, it will match all units equal or larger. Passing in `month` will check `month` and `year`. Passing in `day` will check `day`, `month`, and `year`.

    ``` javascript
    moment('2010-01-01').isSame('2011-01-01', 'month'); // false, different year
    moment('2010-01-01').isSame('2010-02-01', 'day');   // false, different month
    ```

    Like `moment#isAfter` and `moment#isBefore`, any of the units of time that are supported for `moment#startOf` are supported for `moment#isSame`.

    ``` javascript
    year month week isoWeek day hour minute second
    ```

    If the two moments have different timezones, the timezone of the first moment will be used for the comparison.

    ``` javascript
    // Note: Australia/Sydney is UTC+11:00 on these dates
    moment.tz("2018-11-09T10:00:00", "Australia/Sydney").isSame(moment.tz("2018-11-08T12:00:00", "UTC"), "day"); // false
    moment.tz("2018-11-08T12:00:00", "UTC").isSame(moment.tz("2018-11-09T10:00:00", "Australia/Sydney"), "day"); // true
    ```

    *NOTE*: `moment().isSame()` has undefined behavior and should not be used! If the code runs fast the initial created moment would be the same as the one created in isSame to perform the check, so the result would be `true`. But if the code runs slower it's possible that the moment created in isSame is measurably after the one created in `moment()`, so the call would return `false`.
- name: moment#isSameOrAfter()
  id: index#/query/is-same-or-after/
  summary: Check if a moment is after or the same as another moment
  description: |-
    ### Is Same or After 2.11.0+

    ``` javascript
    moment().isSameOrAfter(Moment|String|Number|Date|Array);
    moment().isSameOrAfter(Moment|String|Number|Date|Array, String);
    ```

    Check if a moment is after or the same as another moment. The first argument will be parsed as a moment, if not already so.

    ``` javascript
    moment('2010-10-20').isSameOrAfter('2010-10-19'); // true
    moment('2010-10-20').isSameOrAfter('2010-10-20'); // true
    moment('2010-10-20').isSameOrAfter('2010-10-21'); // false
    ```

    If you want to limit the granularity to a unit other than milliseconds, pass the units as the second parameter.

    As the second parameter determines the precision, and not just a single value to check, using day will check for year, month and day.

    ``` javascript
    moment('2010-10-20').isSameOrAfter('2011-12-31', 'year'); // false
    moment('2010-10-20').isSameOrAfter('2010-01-01', 'year'); // true
    moment('2010-10-20').isSameOrAfter('2009-12-31', 'year'); // true
    ```

    Like `moment#isSame` and `moment#isBefore`, any of the units of time that are supported for `moment#startOf` are supported for `moment#isSameOrAfter`:

    ``` javascript
    year month week isoWeek day hour minute second
    ```
- name: moment#isSameOrBefore()
  id: index#/query/is-same-or-before/
  summary: Check if a moment is before or the same as another moment
  description: |-
    ### Is Same or Before 2.11.0+

    ``` javascript
    moment().isSameOrBefore(Moment|String|Number|Date|Array);
    moment().isSameOrBefore(Moment|String|Number|Date|Array, String);
    ```

    Check if a moment is before or the same as another moment. The first argument will be parsed as a moment, if not already so.

    ``` javascript
    moment('2010-10-20').isSameOrBefore('2010-10-21');  // true
    moment('2010-10-20').isSameOrBefore('2010-10-20');  // true
    moment('2010-10-20').isSameOrBefore('2010-10-19');  // false
    ```

    If you want to limit the granularity to a unit other than milliseconds, pass the units as the second parameter.

    As the second parameter determines the precision, and not just a single value to check, using day will check for year, month and day.

    ``` javascript
    moment('2010-10-20').isSameOrBefore('2009-12-31', 'year'); // false
    moment('2010-10-20').isSameOrBefore('2010-12-31', 'year'); // true
    moment('2010-10-20').isSameOrBefore('2011-01-01', 'year'); // true
    ```

    Like `moment#isAfter` and `moment#isSame`, any of the units of time that are supported for `moment#startOf` are supported for `moment#isSameOrBefore`:

    ``` javascript
    year month week isoWeek day hour minute second
    ```
- name: moment#isValid()
  id: index#/parsing/is-valid/
  summary: Moment applies stricter initialization rules than the Date constructor
  description: |-
    ### Validation 1.7.0+

    ``` javascript
    moment().isValid();
    ```

    Moment applies stricter initialization rules than the `Date` constructor.

    ``` javascript
    new Date(2013, 25, 14).toString(); // "Sat Feb 14 2015 00:00:00 GMT-0500 (EST)"
    moment([2015, 25, 35]).format();   // 'Invalid date'
    ```

    You can check whether the Moment considers the date invalid using `moment#isValid`. You can check the metrics used by `#isValid` using `moment#parsingFlags`, which returns an object.

    The following parsing flags result in an invalid date:

    - `overflow`: An overflow of a date field, such as a 13th month, a 32nd day of the month (or a 29th of February on non-leap years), a 367th day of the year, etc. `overflow` contains the index of the invalid unit to match `#invalidAt` (see below); `-1` means no overflow.
    - `invalidMonth`: An invalid month name, such as `moment('Marbruary', 'MMMM');`. Contains the invalid month string itself, or else null.
    - `empty`: An input string that contains nothing parsable, such as `moment('this is nonsense');`. Boolean.
    - `nullInput`: A `null` input, like `moment(null);`. Boolean.
    - `invalidFormat`: An empty list of formats, such as `moment('2013-05-25', [])`. Boolean.
    - `userInvalidated`: A date created explicitly as invalid, such as `moment.invalid()`. Boolean.

    In addition to the above, As of **2.13.0** the meridiem and parsedDateParts flags work together to determine date validity.

    - `meridiem`: Indicates what meridiem (AM/PM) was parsed, if any. String.
    - `parsedDateParts`: Returns an array of date parts parsed in descending order - i.e. parsedDateParts\[0\] === year. If no parts are present, but meridiem has value, date is invalid. Array.

    Additionally, if the Moment is parsed in strict mode, these flags must be empty for the Moment to be valid:

    - `unusedTokens`: array of format substrings not found in the input string
    - `unusedInput`: array of input substrings not matched to the format string

    **Note:** Moment's concept of validity became more strict and consistent between **2.2** and **2.3**. **Note:** Validity is determined on moment creation. A modified moment (i.e. `moment().hour(NaN)`) will remain valid.

    Additionally, you can use `moment#invalidAt` to determine which date unit overflowed.

    ``` javascript
    var m = moment("2011-10-10T10:20:90");
    m.isValid(); // false
    m.invalidAt(); // 5 for seconds
    ```

    The return value has the following meaning:

    1.  years
    2.  months
    3.  days
    4.  hours
    5.  minutes
    6.  seconds
    7.  milliseconds

    **Note:** In case of multiple wrong units the first one is returned (because days validity may depend on month, for example).

    # Invalid Moments

    If a moment is invalid, it behaves like a NaN in floating point operations.

    All of the following produce invalid moments:

    - `invalid.add(unit, value)`
    - `another.add(invalid)`
    - `invalid.clone()`
    - `invalid.diff(another)`
    - `invalid.endOf(unit)`
    - `invalid.max(another)`
    - `another.max(invalid)`
    - `invalid.min(another)`
    - `another.min(invalid)`
    - `invalid.set(unit, value)`
    - `invalid.startOf(unit)`
    - `invalid.subtract(unit, value)`

    The following produce a localized version of `'InvalidDate'`:

    - `invalid.format(anyFmt)` results in `'Invalid Date'` in the current locale
    - `invalid.from(another)`
    - `another.from(invalid)`
    - `invalid.fromNow(suffix)`
    - `invalid.to(another)`
    - `another.to(invalid)`
    - `invalid.toNow(suffix)`
    - `invalid.toISOString()` (Before **2.18.0**)
    - `invalid.toString()`

    The following return `false`:

    - `invalid.isAfter(another)`
    - `invalid.isAfter(invalid)`
    - `another.isAfter(invalid)`
    - `invalid.isBefore(another)`
    - `invalid.isBefore(invalid)`
    - `another.isBefore(invalid)`
    - `invalid.isBetween(another, another)`
    - `invalid.isBetween(invalid, invalid)`
    - `invalid.isSame(another)`
    - `invalid.isSame(invalid)`
    - `another.isSame(invalid)`
    - `invalid.isSameOrAfter(another)`
    - `invalid.isSameOrAfter(invalid)`
    - `another.isSameOrAfter(invalid)`
    - `invalid.isSameOrBefore(another)`
    - `invalid.isSameOrBefore(invalid)`
    - `another.isSameOrBefore(invalid)`

    And these return `null` or `NaN` with some structure:

    - `invalid.get(unit)` returns null, as all other named getters
    - `invalid.toArray() === [NaN, NaN, NaN, NaN, NaN, NaN]`
    - `invalid.toObject()` has all values set to `NaN`
    - `invalid.toDate()` returns an invalid Date object
    - `invalid.toJSON()` returns null
    - `invalid.unix()` returns null
    - `invalid.valueOf()` returns null
    - `invalid.toISOString()` returns null (As of **2.18.0**)
- name: moment#local()
  id: index#/manipulating/local/
  summary: Sets a flag on the original moment to use local time to display a moment instead of the original moment's time
  description: |-
    ### Local 1.5.0+

    ``` javascript
    moment().local();
    moment().local(Boolean); // from 2.8.0
    ```

    Sets a flag on the original moment to use local time to display a moment instead of the original moment's time.

    ``` javascript
    var a = moment.utc([2011, 0, 1, 8]);
    a.hours(); // 8 UTC
    a.local();
    a.hours(); // 0 PST
    ```

    Local can also be used to convert out of a fixed offset mode:

    ``` javascript
    moment.parseZone('2016-05-03T22:15:01+02:00').local().format(); // "2016-05-03T15:15:01-05:00"
    ```

    Passing `true` will change the time zone without changing the current time.

    ``` javascript
    moment.parseZone('2016-05-03T22:15:01+02:00').local(true).format(); //"2016-05-03T22:15:01-05:00"
    ```

    See [moment.utc()](#/parsing/utc/) for more information on UTC mode.
- name: moment#locale()
  id: index#/i18n/instance-locale/
  summary: A global locale configuration can be problematic when passing around moments that may need to be formatted into different locale
  description: |-
    ### Changing locales locally 1.7.0+

    ``` javascript
    // From version 2.8.1 onward
    moment().locale(String|String[]|Boolean);

    // Deprecated version 2.8.1
    moment().lang(String|String[]|Boolean);
    ```

    A global locale configuration can be problematic when passing around moments that may need to be formatted into different locale.

    ``` javascript
    moment.locale('en'); // default the locale to English
    var localLocale = moment();

    localLocale.locale('fr'); // set this instance to use French
    localLocale.format('LLLL'); // dimanche 15 juillet 2012 11:01
    moment().format('LLLL'); // Sunday, July 15 2012 11:01 AM

    moment.locale('es'); // change the global locale to Spanish
    localLocale.format('LLLL'); // dimanche 15 juillet 2012 11:01
    moment().format('LLLL'); // Domingo 15 Julio 2012 11:01

    localLocale.locale(['tq', 'fr']); // set this instance to the first localization found
    localLocale.format('LLLL'); // dimanche 15 juillet 2012 11:01
    moment().format('LLLL'); // Sunday, July 15 2012 11:01 AM

    localLocale.locale(false); // reset the instance locale
    localLocale.format('LLLL'); // Domingo 15 Julio 2012 11:01
    moment().format('LLLL'); // Domingo 15 Julio 2012 11:01
    ```

    If you call `moment#locale` with no parameters, you get back the locale configuration that would be used for that moment.

    ``` javascript
    var fr = moment().locale('fr');
    fr.localeData().months(moment([2012, 0])) // "janvier"
    fr.locale('en');
    fr.localeData().months(moment([2012, 0])) // "January"
    ```

    If you need to access the locale data for a moment, this is the preferred way to do so.

    As of **2.3.0**, you can also specify an array of locale identifiers. It works the same way it does in the [global locale configuration](#/i18n/changing-locale/).

    ### Loading locales in NodeJS 1.0.0+

    ``` javascript
    moment.locale(String);
    ```

    Loading locales in NodeJS is super easy. If there is a locale file in `moment/locale/` named after that key, import it first, then call `moment.locale` to load it.

    ``` javascript
    var moment = require('moment');
    //or
    // import moment from 'moment';

    // import locale file(s)
    import 'moment/locale/fr';

    moment.locale('fr');
    moment(1316116057189).fromNow(); // il y a 6 ans
    ```

    To save the step of loading individual locales (i.e. just load them all), import the `moment/min/moment-with-locales` module instead.

    ``` javascript
    import moment from 'moment/min/moment-with-locales';

    moment.locale('de');
    moment(1316116057189).fromNow(); // vor 6 Jahren
    ```

    If you want your locale supported, create a pull request to the `develop` branch with the [required locale and unit test files](#/i18n/adding-locale/).

    ### Loading locales in the browser 1.0.0+

    ``` javascript
    // From 2.8.1 onward
    moment.locale(String, Object);

    // Deprecated in 2.8.1
    moment.lang(String, Object);
    ```

    Loading locales in the browser just requires you to include the locale files. Be sure to specify the charset to prevent encoding issues.

    ``` html
    <script src="moment.js"></script>
    <script src="locale/fr.js" charset="UTF-8"></script>
    <script src="locale/pt.js" charset="UTF-8"></script>
    <script>
      moment.locale('fr');  // Set the default/global locale
      // ...
    </script>
    ```

    There are minified versions of all locales together:

    ``` html
    <script src="moment.js"></script>
    <script src="min/locales.js" charset="UTF-8"></script>
    ```

    To minimize HTTP requests, use our Grunt task to compile [Moment](https://github.com/moment/moment) with a custom list of locales:

    ``` javascript
    grunt transpile:fr,it
    ```

    ``` html
    <script src="min/moment-with-locales.custom.js" charset="UTF-8"></script>
    ```

    If you are using JSPM as plugin manager, you should add the locale in your lib.

    ``` javascript
    import * as moment from 'moment';
    import 'moment/locale/fr';
    ```

    **Note:** Locale files are defined in [UMD](https://github.com/umdjs/umd) style, so they should work seamlessly in all environments.

    ### Adding your locale to Moment.js

    To add your locale to Moment.js, submit a pull request with both a locale file and a test file. You can find examples in `moment/src/locale/fr.js` and `moment/src/test/locale/fr.js`.

    To run the tests in Node.js, do `npm install`, then `grunt`.

    If all the tests pass, submit a pull request, and thank you for contributing!

    ### Checking the current Moment.js locale 1.6.0+

    ``` javascript
    // From version 2.8.1 onward
    moment.locale();

    // Deprecated in version 2.8.1
    moment.lang();
    ```

    If you are changing locales frequently, you may want to know what locale is currently being used. This is as simple as calling `moment.locale` without any parameters.

    ``` javascript
    moment.locale('en'); // set to english
    moment.locale(); // returns 'en'
    moment.locale('fr'); // set to french
    moment.locale(); // returns 'fr'
    ```

    As of version **2.12.0** it is possible to list all locales that have been loaded and are available to use:

    ``` javascript
    moment.locales()
    ```
- name: moment#max()
  id: index#/manipulating/max/
  summary: 'Note: This function has been deprecated in 2.7.0'
  description: |-
    ### Maximum From 2.1.0, Deprecated 2.7.0

    ``` javascript
    moment().max(Moment|String|Number|Date|Array);
    ```

    **Note:** This function has been **deprecated** in **2.7.0**. Consider [`moment.min`](https://momentjs.com/docs/#/get-set/min/) instead.

    Limits the moment to a maximum of another moment value. So `a.max(b)` is the same as `a = moment.min(a, b)` (note that `max` is converted to `min`).

    Sometimes, server clocks are not quite in sync with client clocks. This ends up displaying humanized strings such as "in a few seconds" rather than "a few seconds ago". You can prevent that with `moment#max()`:

    This is the counterpart for `moment#min`.

    ``` javascript
    var momentFromServer = moment(input);
    var clampedMoment = momentFromServer.max();
    ```

    You can pass anything to `moment#max` that you would pass to `moment()`.

    ``` javascript
    moment().max(moment().add(1, 'd'));
    moment().max("2013-04-20T20:00:00+0800");
    moment().max("Jan 1 2001", "MMM D YYYY");
    moment().max(new Date(2012, 1, 8));
    ```
- name: moment#millisecond()
  id: index#/get-set/millisecond/
  summary: Gets or sets the milliseconds
  description: |-
    ### Millisecond 1.3.0+

    ``` javascript
    moment().millisecond(Number);
    moment().millisecond(); // Number
    moment().milliseconds(Number);
    moment().milliseconds(); // Number
    ```

    Gets or sets the milliseconds.

    Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the seconds.
- name: moment#min()
  id: index#/manipulating/min/
  summary: 'Note: This function has been deprecated in 2.7.0'
  description: |-
    ### Minimum From 2.1.0, Deprecated 2.7.0

    ``` javascript
    moment().min(Moment|String|Number|Date|Array);
    ```

    **Note:** This function has been **deprecated** in **2.7.0**. Consider [`moment.max`](https://momentjs.com/docs/#/get-set/max/) instead.

    Limits the moment to a minimum of another moment value. So `a.min(b)` is the same as `a = moment.max(a, b)` (note that `min` is converted to `max`).

    This is the counterpart for `moment#max`.

    ``` javascript
    moment().min("2013-04-20T20:00:00+0800");
    ```

    This can be used in conjunction with `moment#max` to clamp a moment to a range.

    ``` javascript
    var start  = moment().startOf('week');
    var end    = moment().endOf('week');
    var actual = moment().min(start).max(end);
    ```
- name: moment#minute()
  id: index#/get-set/minute/
  summary: Gets or sets the minutes
  description: |-
    ### Minute 1.0.0+

    ``` javascript
    moment().minute(Number);
    moment().minute(); // Number
    moment().minutes(Number);
    moment().minutes(); // Number
    ```

    Gets or sets the minutes.

    Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the hour.
- name: moment#month()
  id: index#/get-set/month/
  summary: Gets or sets the month
  description: |-
    ### Month 1.0.0+

    ``` javascript
    moment().month(Number|String);
    moment().month(); // Number
    moment().months(Number|String);
    moment().months(); // Number
    ```

    Gets or sets the month.

    Accepts numbers from 0 to 11. If the range is exceeded, it will bubble up to the year.

    **Note:** Months are zero indexed, so January is month 0.

    As of **2.1.0**, a month name is also supported. This is parsed in the moment's current locale.

    ``` javascript
    moment().month("January");
    moment().month("Feb");
    ```

    Before version **2.1.0**, if a moment changed months and the new month did not have enough days to keep the current day of month, it would overflow to the next month.

    As of version **2.1.0**, this was changed to be clamped to the end of the target month.

    ``` javascript
    // before 2.1.0
    moment([2012, 0, 31]).month(1).format("YYYY-MM-DD"); // 2012-03-02
    // after 2.1.0
    moment([2012, 0, 31]).month(1).format("YYYY-MM-DD"); // 2012-02-29
    ```

    **2.16.0** deprecated using `moment().months()`. Use `moment().month()` instead.
- name: moment#quarter()
  id: index#/get-set/quarter/
  summary: Gets the quarter (1 to 4)
  description: |-
    ### Quarter 2.6.0+

    ``` javascript
    moment().quarter(); // Number
    moment().quarter(Number);
    moment().quarters(); // Number
    moment().quarters(Number);
    ```

    Gets the quarter (1 to 4).

    ``` javascript
    moment('2013-01-01T00:00:00.000').quarter() // 1
    moment('2013-04-01T00:00:00.000').subtract(1, 'ms').quarter() // 1
    moment('2013-04-01T00:00:00.000').quarter() // 2
    moment('2013-07-01T00:00:00.000').subtract(1, 'ms').quarter() // 2
    moment('2013-07-01T00:00:00.000').quarter() // 3
    moment('2013-10-01T00:00:00.000').subtract(1, 'ms').quarter() // 3
    moment('2013-10-01T00:00:00.000').quarter() // 4
    moment('2014-01-01T00:00:00.000').subtract(1, 'ms').quarter() // 4
    ```

    Sets the quarter (1 to 4).

    ``` javascript
    moment('2013-01-01T00:00:00.000').quarter(2) // '2013-04-01T00:00:00.000'
    moment('2013-02-05T05:06:07.000').quarter(2).format() // '2013-05-05T05:06:07-07:00'
    ```
- name: moment#second()
  id: index#/get-set/second/
  summary: Gets or sets the seconds
  description: |-
    ### Second 1.0.0+

    ``` javascript
    moment().second(Number);
    moment().second(); // Number
    moment().seconds(Number);
    moment().seconds(); // Number
    ```

    Gets or sets the seconds.

    Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the minutes.
- name: moment#set()
  id: index#/get-set/set/
  summary: 'Units are case insensitive, and support plural and short forms: year (years, y), month (months, M), date (dates, D), hour (hours, h), minute (minutes, m), second (seconds, s), millisecond (milliseconds, ms)'
  description: |-
    ### Set 2.2.1+

    ``` javascript
    moment().set(String, Int);
    moment().set(Object(String, Int));
    ```

    Generic setter, accepting unit as first argument, and value as second:

    ``` javascript
    moment().set('year', 2013);
    moment().set('month', 3);  // April
    moment().set('date', 1);
    moment().set('hour', 13);
    moment().set('minute', 20);
    moment().set('second', 30);
    moment().set('millisecond', 123);

    moment().set({'year': 2013, 'month': 3});
    ```

    Units are case insensitive, and support plural and short forms: year (years, y), month (months, M), date (dates, D), hour (hours, h), minute (minutes, m), second (seconds, s), millisecond (milliseconds, ms).

    Object parsing was added in **2.9.0**
- name: moment#startOf()
  id: index#/manipulating/start-of/
  summary: Mutates the original moment by setting it to the start of a unit of time
  description: |-
    ### Start of Time 1.7.0+

    ``` javascript
    moment().startOf(String);
    ```

    Mutates the original moment by setting it to the start of a unit of time.

    ``` javascript
    moment().startOf('year');    // set to January 1st, 12:00 am this year
    moment().startOf('month');   // set to the first of this month, 12:00 am
    moment().startOf('quarter');  // set to the beginning of the current quarter, 1st day of months, 12:00 am
    moment().startOf('week');    // set to the first day of this week, 12:00 am
    moment().startOf('isoWeek'); // set to the first day of this week according to ISO 8601, 12:00 am
    moment().startOf('day');     // set to 12:00 am today
    moment().startOf('date');     // set to 12:00 am today
    moment().startOf('hour');    // set to now, but with 0 mins, 0 secs, and 0 ms
    moment().startOf('minute');  // set to now, but with 0 seconds and 0 milliseconds
    moment().startOf('second');  // same as moment().milliseconds(0);
    ```

    These shortcuts are essentially the same as the following.

    ``` javascript
    moment().startOf('year');
    moment().month(0).date(1).hours(0).minutes(0).seconds(0).milliseconds(0);
    ```

    ``` javascript
    moment().startOf('hour');
    moment().minutes(0).seconds(0).milliseconds(0)
    ```

    As of version **2.0.0**, `moment#startOf('day')` replaced `moment#sod`.

    **Note:**`moment#startOf('week')` was added in version **2.0.0**.

    As of version **2.1.0**, `moment#startOf('week')` uses the locale aware week start day.

    **Note:**`moment#startOf('isoWeek')` was added in version **2.2.0**.

    **Note:**`moment#startOf('date')` was added as an alias for day in **2.13.0**
- name: moment#subtract()
  id: index#/manipulating/subtract/
  summary: Mutates the original moment by subtracting time
  description: |-
    ### Subtract 1.0.0+

    ``` javascript
    moment().subtract(Number, String);
    moment().subtract(Duration);
    moment().subtract(Object);
    ```

    Mutates the original moment by subtracting time.

    This is exactly the same as `moment#add`, only instead of adding time, it subtracts time.

    ``` javascript
    moment().subtract(7, 'days');
    ```

    Before version **2.8.0**, the `moment#subtract(String, Number)` syntax was also supported. It has been deprecated in favor of `moment#subtract(Number, String)`.

    ``` javascript
    moment().subtract('seconds', 1); // Deprecated in 2.8.0
    moment().subtract(1, 'seconds');
    ```

    As of **2.12.0** when decimal values are passed for days and months, they are rounded to the nearest integer. Weeks, quarters, and years are converted to days or months, and then rounded to the nearest integer.

    ``` javascript
    moment().subtract(1.5, 'months') == moment().subtract(2, 'months')
    moment().subtract(.7, 'years') == moment().subtract(8, 'months') //.7*12 = 8.4, rounded to 8
    ```

    Note that in order to make the operations `moment.add(-.5, 'days')` and `moment.subtract(.5, 'days')` equivalent, -.5, -1.5, -2.5, etc are rounded down.
- name: moment#to()
  id: index#/displaying/to/
  summary: You may want to display a moment in relation to a time other than now
  description: |-
    ### Time to X 2.10.3+

    ``` javascript
    moment().to(Moment|String|Number|Date|Array);
    moment().to(Moment|String|Number|Date|Array, Boolean);
    ```

    You may want to display a moment in relation to a time other than now. In that case, you can use `moment#to`.

    ``` javascript
    var a = moment([2007, 0, 28]);
    var b = moment([2007, 0, 29]);
    a.to(b) // "in a day"
    ```

    The first parameter is anything you can pass to `moment()` or an actual `Moment`.

    ``` javascript
    var a = moment([2007, 0, 28]);
    var b = moment([2007, 0, 29]);
    a.to(b);                     // "in a day"
    a.to([2007, 0, 29]);         // "in a day"
    a.to(new Date(2007, 0, 29)); // "in a day"
    a.to("2007-01-29");          // "in a day"
    ```

    Like `moment#toNow`, passing `true` as the second parameter returns value without the suffix. This is useful wherever you need to have a human readable length of time.

    ``` javascript
    var start = moment([2007, 0, 5]);
    var end   = moment([2007, 0, 10]);
    end.to(start);       // "5 days ago"
    end.to(start, true); // "5 days"
    ```

    From version **2.10.3**, if any of the endpoints are invalid the result is the localized Invalid date string.
- name: moment#toArray()
  id: index#/displaying/as-array/
  summary: This returns an array that mirrors the parameters from new Date()
  description: |-
    ### As Array 1.7.0+

    ``` javascript
    moment().toArray();
    ```

    This returns an array that mirrors the parameters from `new Date()`.

    ``` javascript
    moment().toArray(); // [2013, 1, 4, 14, 40, 16, 154];
    ```
- name: moment#toDate()
  id: index#/displaying/as-javascript-date/
  summary: To get a copy of the native Date object that Moment.js wraps, use moment#toDate
  description: |-
    ### As Javascript Date 1.0.0+

    ``` javascript
    moment().toDate();
    ```

    To get a copy of the native Date object that Moment.js wraps, use `moment#toDate`.

    This will return a copy of the `Date` that the moment uses, so any changes to that `Date` will not cause moment to change. If you want to change the moment `Date`, see `moment#manipulate` or `moment#set`.

    `moment#native` has been replaced by `moment#toDate` and has been deprecated as of **1.6.0**.
- name: moment#toISOString()
  id: index#/displaying/as-iso-string/
  summary: Formats a string to the ISO8601 standard
  description: |-
    ### As ISO 8601 String 2.1.0+

    ``` javascript
    moment().toISOString();
    moment().toISOString(keepOffset); // from 2.20.0
    ```

    Formats a string to the ISO8601 standard.

    ``` javascript
    moment().toISOString() // 2013-02-04T22:44:30.652Z
    ```

    Note that `.toISOString()` returns a timestamp in UTC, even if the moment in question is in local mode. This is done to provide consistency with the specification for native JavaScript Date `.toISOString()`, as outlined in [the ES2015 specification](https://www.ecma-international.org/ecma-262/6.0/#sec-date.prototype.toisostring). From version **2.20.0**, you may call `.toISOString(true)` to prevent UTC conversion.

    From version **2.8.4** the native `Date.prototype.toISOString` is used if available, for performance reasons.
- name: moment#toJSON()
  id: index#/displaying/as-json/
  summary: When serializing an object to JSON, if there is a Moment object, it will be represented as an ISO8601 string, adjusted to UTC
  description: |-
    ### As JSON 2.0.0+

    ``` javascript
    moment().toJSON();
    ```

    When serializing an object to JSON, if there is a `Moment` object, it will be represented as an ISO8601 string, adjusted to UTC.

    ``` javascript
    JSON.stringify({
        postDate : moment()
    }); // '{"postDate":"2013-02-04T22:44:30.652Z"}'
    ```

    If instead you would like an ISO8601 string that reflects the moment's `utcOffset()`, then you can modify the `toJSON` function like this:

    ``` javascript
    moment.fn.toJSON = function() { return this.format(); }
    ```

    This changes the behavior as follows:

    ``` javascript
    JSON.stringify({
        postDate : moment()
    }); // '{"postDate":"2013-02-04T14:44:30-08:00"}'
    ```
- name: moment#toNow()
  id: index#/displaying/tonow/
  summary: A common way of displaying time is handled by moment#toNow
  description: |-
    ### Time to now 2.10.3+

    ``` javascript
    moment().toNow();
    moment().toNow(Boolean);
    ```

    A common way of displaying time is handled by `moment#toNow`. This is sometimes called timeago or relative time.

    This is similar to [`moment.fromNow`](https://momentjs.com/docs/#/displaying/fromnow/), but gives the opposite interval: `a.fromNow() = - a.toNow()`.

    This is similar to [`moment.to`](https://momentjs.com/docs/#/displaying/to/), but is special-cased for the current time. Use `moment.to`, if you want to control the two end points of the interval.

    ``` javascript
    moment([2007, 0, 29]).toNow(); // in 4 years
    ```

    If you pass `true`, you can get the value without the prefix.

    ``` javascript
    moment([2007, 0, 29]).toNow();     // in 4 years
    moment([2007, 0, 29]).toNow(true); // 4 years
    ```

    The base strings are [customized by the current locale](#/customization/relative-time/).

    The breakdown of which string is displayed for each length of time is outlined in the table below.

    | Range                       | Key | Sample Output                  |
    |-----------------------------|-----|--------------------------------|
    | 0 to 44 seconds             | s   | in seconds                     |
    | 45 to 89 seconds            | m   | in a minute                    |
    | 90 seconds to 44 minutes    | mm  | in 2 minutes ... in 44 minutes |
    | 45 to 89 minutes            | h   | in an hour                     |
    | 90 minutes to 21 hours      | hh  | in 2 hours ... in 21 hours     |
    | 22 to 35 hours              | d   | in a day                       |
    | 36 hours to 25 days         | dd  | in 2 days ... in 25 days       |
    | 26 to 45 days               | M   | in a month                     |
    | 45 to 319 days              | MM  | in 2 months ... in 10 months   |
    | 320 to 547 days (1.5 years) | y   | in a year                      |
    | 548 days+                   | yy  | in 2 years ... in 20 years     |

    From version **2.10.3**, if the target moment object is invalid the result is the localized Invalid date string.
- name: moment#toObject()
  id: index#/displaying/as-object/
  summary: This returns an object containing year, month, day-of-month, hour, minute, seconds, milliseconds
  description: |-
    ### As Object 2.10.5+

    ``` javascript
    moment().toObject();
    ```

    This returns an object containing year, month, day-of-month, hour, minute, seconds, milliseconds.

    ``` javascript
    moment().toObject()  // {
                         //     years: 2015
                         //     months: 6
                         //     date: 26,
                         //     hours: 1,
                         //     minutes: 53,
                         //     seconds: 14,
                         //     milliseconds: 600
                         // }
    ```
- name: moment#toString()
  id: index#/displaying/as-string/
  summary: Returns an english string in a similar format to JS Date's .toString()
  description: |-
    ### As String 2.1.0+

    ``` javascript
    moment().toString();
    ```

    Returns an english string in a similar format to JS Date's `.toString()`.

    ``` javascript
    moment().toString() // "Sat Apr 30 2016 16:59:46 GMT-0500"
    ```
- name: moment#unix()
  id: index#/displaying/unix-timestamp/
  summary: moment#unix outputs a Unix timestamp (the number of seconds since the Unix Epoch)
  description: |-
    ### Unix Timestamp (seconds) 1.6.0+

    ``` javascript
    moment().unix();
    ```

    `moment#unix` outputs a Unix timestamp (the number of seconds since the Unix Epoch).

    ``` javascript
    moment(1318874398806).unix(); // 1318874398
    ```

    This value is floored to the nearest second, and does not include a milliseconds component.
- name: moment#utc()
  id: index#/manipulating/utc/
  summary: Sets a flag on the original moment to use UTC to display a moment instead of the original moment's time
  description: |-
    ### UTC 1.5.0+

    ``` javascript
    moment().utc();
    moment().utc(Boolean); // from 2.8.0
    ```

    Sets a flag on the original moment to use UTC to display a moment instead of the original moment's time.

    ``` javascript
    var a = moment([2011, 0, 1, 8]);
    a.hours(); // 8 PST
    a.utc();
    a.hours(); // 16 UTC
    ```

    UTC can also be used to convert out of a fixed offset mode:

    ``` javascript
    moment.parseZone('2016-05-03T22:15:01+02:00').utc().format(); //"2016-05-03T20:15:01Z"
    ```

    Passing `true` will change the time zone without changing the current time.

    ``` javascript
    moment.parseZone('2016-05-03T22:15:01+02:00').utc(true).format(); //"2016-05-03T22:15:01Z"
    ```

    See [moment.utc()](#/parsing/utc/) for more information on UTC mode.
- name: moment#utcOffset()
  id: index#/manipulating/utc-offset/
  summary: Get or set the UTC offset in minutes
  description: |-
    ### UTC offset 2.9.0++

    ``` javascript
    moment().utcOffset();
    moment().utcOffset(Number|String);
    moment().utcOffset(Number|String, Boolean);
    ```

    Get or set the UTC offset in minutes.

    **Note:** Unlike [`moment.fn.zone`](https://momentjs.com/docs/#/manipulating/timezone-offset/) this function returns the real offset from UTC, not the reverse offset (as returned by `Date.prototype.getTimezoneOffset`).

    Getting the `utcOffset` of the current object:

    ``` javascript
    moment().utcOffset(); // (-240, -120, -60, 0, 60, 120, 240, etc.)
    ```

    Setting the UTC offset by supplying minutes. The offset is set on the moment object that `utcOffset()` is called on. If you are wanting to set the offset globally, try using [moment-timezone](https://momentjs.com/timezone/). Note that once you set an offset, it's fixed and won't change on its own (i.e there are no DST rules). If you want an actual time zone -- time in a particular location, like `America/Los_Angeles`, consider [moment-timezone](https://momentjs.com/timezone/).

    ``` javascript
    moment().utcOffset(120);
    ```

    If the input is less than `16` and greater than `-16`, it will interpret your input as hours instead.

    ``` javascript
    // these are equivalent
    moment().utcOffset(8);  // set hours offset
    moment().utcOffset(480);  // set minutes offset (8 * 60)
    ```

    It is also possible to set the UTC offset from a string.

    ``` javascript
    // these are equivalent
    moment().utcOffset("+08:00");
    moment().utcOffset(8);
    moment().utcOffset(480);
    ```

    `moment#utcOffset` will search the string for the last match of `+00 -00 +00:00 +0000 -00:00 -0000 Z`, so you can even pass an ISO8601 formatted string with offset and the moment will be changed to that UTC offset.

    Note that if the string does not include 'Z', it must include the `+` or `-` character.

    ``` javascript
    moment().utcOffset("2013-03-07T07:00:00+08:00");
    ```

    The `utcOffset` function has an optional second parameter which accepts a boolean value indicating whether to keep the existing time of day.

    - Passing `false` (the default) will keep the same instant in Universal Time, but the local time will change.

    - Passing `true` will keep the same local time, but at the expense of choosing a different point in Universal Time.

    One use of this feature is if you want to construct a moment with a specific time zone offset using only numeric input values:

    ``` javascript
    moment([2016, 0, 1, 0, 0, 0]).utcOffset(-5, true) // Equivalent to "2016-01-01T00:00:00-05:00"
    ```
- name: moment#valueOf()
  id: index#/displaying/unix-timestamp-milliseconds/
  summary: moment#valueOf simply outputs the number of milliseconds since the Unix Epoch, just like Date#valueOf
  description: |-
    ### Unix Timestamp (milliseconds) 1.0.0+

    ``` javascript
    moment().valueOf();
    +moment();
    ```

    `moment#valueOf` simply outputs the number of milliseconds since the Unix Epoch, just like `Date#valueOf`.

    ``` javascript
    moment(1318874398806).valueOf(); // 1318874398806
    +moment(1318874398806); // 1318874398806
    ```

    To get a Unix timestamp (the number of seconds since the epoch) from a `Moment`, use `moment#unix`.

    [Note: ECMAScript calls this a "Time Value"](https://www.ecma-international.org/ecma-262/6.0/#sec-time-values-and-time-range)
- name: moment#week()
  id: index#/get-set/week/
  summary: Gets or sets the week of the year
  description: |-
    ### Week of Year 2.0.0+

    ``` javascript
    moment().week(Number);
    moment().week(); // Number
    moment().weeks(Number);
    moment().weeks(); // Number
    ```

    Gets or sets the week of the year.

    Because different locales define week of year numbering differently, Moment.js added `moment#week` to get/set the localized week of the year.

    The week of the year varies depending on which day is the first day of the week (Sunday, Monday, etc), and which week is the first week of the year.

    For example, in the United States, Sunday is the first day of the week. The week with January 1st in it is the first week of the year.

    In France, Monday is the first day of the week, and the week with January 4th is the first week of the year.

    The output of `moment#week` will depend on the [locale](#/i18n) for that moment.

    When setting the week of the year, the day of the week is retained.
- name: moment#weekday()
  id: index#/get-set/weekday/
  summary: Gets or sets the day of the week according to the locale
  description: |-
    ### Day of Week (Locale Aware) 2.1.0+

    ``` javascript
    moment().weekday(Number);
    moment().weekday(); // Number
    ```

    Gets or sets the day of the week according to the locale.

    If the locale assigns Monday as the first day of the week, `moment().weekday(0)` will be Monday. If Sunday is the first day of the week, `moment().weekday(0)` will be Sunday.

    As with `moment#day`, if the range is exceeded, it will bubble up to other weeks.

    ``` javascript
    // when Monday is the first day of the week
    moment().weekday(-7); // last Monday
    moment().weekday(7); // next Monday
    // when Sunday is the first day of the week
    moment().weekday(-7); // last Sunday
    moment().weekday(7); // next Sunday
    ```
- name: moment#weeksInYear()
  id: index#/get-set/weeks-in-year/
  summary: Gets the number of weeks according to locale in the current moment's year
  description: |-
    ### Weeks In Year 2.6.0+

    ``` javascript
    moment().weeksInYear();
    ```

    Gets the number of weeks according to locale in the current moment's year.
- name: moment#weekYear()
  id: index#/get-set/week-year/
  summary: Gets or sets the week-year according to the locale
  description: |-
    ### Week Year 2.1.0+

    ``` javascript
    moment().weekYear(Number);
    moment().weekYear(); // Number
    ```

    Gets or sets the week-year according to the locale.

    Because the first day of the first week does not always fall on the first day of the year, sometimes the week-year will differ from the month year.

    For example, in the US, the week that contains Jan 1 is always the first week. In the US, weeks also start on Sunday. If Jan 1 was a Monday, Dec 31 would belong to the same week as Jan 1, and thus the same week-year as Jan 1. Dec 30 would have a different week-year than Dec 31.
- name: moment#year()
  id: index#/get-set/year/
  summary: Gets or sets the year
  description: |-
    ### Year 1.0.0+

    ``` javascript
    moment().year(Number);
    moment().year(); // Number
    moment().years(Number);
    moment().years(); // Number
    ```

    Gets or sets the year.

    Accepts numbers from -270,000 to 270,000.

    **2.6.0** deprecated using `moment().years()`. Use `moment().year()` instead.
- name: moment#zone()
  id: index#/manipulating/timezone-offset/
  summary: 'Note: This function has been deprecated in 2.9.0'
  description: |-
    ### Time zone Offset From 1.2.0, deprecated 2.9.0+

    ``` javascript
    moment().zone();
    moment().zone(Number|String);
    ```

    **Note:** This function has been **deprecated** in **2.9.0**. Consider [`moment.fn.utcOffset`](https://momentjs.com/docs/#/manipulating/utc-offset/) instead.

    Get the time zone offset in minutes.

    ``` javascript
    moment().zone(); // (60, 120, 240, etc.)
    ```

    As of version **2.1.0**, it is possible to set the offset by passing in the number of minutes offset from GMT.

    ``` javascript
    moment().zone(120);
    ```

    If the input is less than `16` and greater than `-16`, it will interpret your input as hours instead.

    ``` javascript
    // these are equivalent
    moment().zone(480);
    moment().zone(8);
    ```

    It is also possible to set the zone from a string.

    ``` javascript
    moment().zone("-08:00");
    ```

    `moment#zone` will search the string for the first match of `+00:00 +0000 -00:00 -0000`, so you can even pass an ISO8601 formatted string and the moment will be changed to that zone.

    ``` javascript
    moment().zone("2013-03-07T07:00:00-08:00");
    ```

    ## Display

    Once parsing and manipulation are done, you need some way to display the moment.
- name: moment.calendarFormat()
  id: index#/customization/calendar-format/
  summary: This lets you modify the tokens used by calendar
  description: |-
    ### Calendar Format 2.14.0+

    ``` javascript
    moment.calendarFormat = Function
    ```

    This lets you modify the tokens used by [calendar](#/customization/calendar/).

    ``` javascript
    moment.calendarFormat = function (myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        var nextMonth = now.clone().add(1, 'month');

        var retVal =  diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' :
            // introduce thisMonth and nextMonth
            (myMoment.month() === now.month() && myMoment.year() === now.year()) ? 'thisMonth' :
            (nextMonth.month() === myMoment.month() && nextMonth.year() === myMoment.year()) ? 'nextMonth' : 'sameElse';
        return retVal;
    };
    ```
- name: moment.duration#add()
  id: index#/durations/add/
  summary: Mutates the original duration by adding time
  description: |-
    ### Add Time 2.1.0+

    ``` javascript
    moment.duration().add(Number, String);
    moment.duration().add(Number);
    moment.duration().add(Duration);
    moment.duration().add(Object);
    ```

    Mutates the original duration by adding time.

    The same keys and shorthands used to create durations can be used here as the second argument.

    ``` javascript
    var a = moment.duration(1, 'd');
    var b = moment.duration(2, 'd');
    a.add(b).days(); // 3
    ```

    Note that adding an invalid duration to any other duration results in an invalid duration.
- name: moment.duration#as()
  id: index#/durations/as/
  summary: As an alternate to Duration#asX, you can use Duration#as('x')
  description: |-
    ### As Unit of Time 2.1.0+

    ``` javascript
    moment.duration().as(String);
    ```

    As an alternate to `Duration#asX`, you can use `Duration#as('x')`. All the [shorthand keys from](#/manipulating/add/) `moment#add` apply here as well.

    ``` javascript
    duration.as('hours');
    duration.as('minutes');
    duration.as('seconds');
    duration.as('milliseconds');
    ```

    Invalid durations return `NaN` for all units.
- name: moment.duration#clone()
  id: index#/durations/clone/
  summary: Create a clone of a duration
  description: |-
    ### Clone 2.19.0+

    ``` javascript
    moment.duration().clone();
    ```

    Create a clone of a duration. Durations are mutable, just like moment objects, so this lets you get a snapshot, at some point in time.

    ``` javascript
    var d1 = moment.duration();
    var d2 = d1.clone();
    d1.add(1, 'second');
    d1.asMilliseconds() !== d2.asMilliseconds();
    ```
- name: moment.duration#days()
  id: index#/durations/days/
  summary: As with the other getters for durations, moment.duration().days() gets the days (0 - 30)
  description: |-
    ### Days 1.6.0+

    ``` javascript
    moment.duration().days();
    moment.duration().asDays();
    ```

    As with the other getters for durations, `moment.duration().days()` gets the days (0 - 30).

    `moment.duration().asDays()` gets the length of the duration in days.
- name: moment.duration#get()
  id: index#/durations/get/
  summary: As an alternate to Duration#x() getters, you can use Duration#get('x')
  description: |-
    ### Get Unit of Time 2.1.0+

    ``` javascript
    moment.duration().get(String);
    ```

    As an alternate to `Duration#x()` getters, you can use `Duration#get('x')`. All the [shorthand keys from](#/manipulating/add/) `moment#add` apply here as well.

    ``` javascript
    duration.get('hours');
    duration.get('minutes');
    duration.get('seconds');
    duration.get('milliseconds');
    ```

    Invalid durations return `NaN` for all units.
- name: moment.duration#hours()
  id: index#/durations/hours/
  summary: As with the other getters for durations, moment.duration().hours() gets the hours (0 - 23)
  description: |-
    ### Hours 1.6.0+

    ``` javascript
    moment.duration().hours();
    moment.duration().asHours();
    ```

    As with the other getters for durations, `moment.duration().hours()` gets the hours (0 - 23).

    `moment.duration().asHours()` gets the length of the duration in hours.
- name: moment.duration#humanize()
  id: index#/durations/humanize/
  summary: Sometimes, you want all the goodness of moment#from but you don't want to have to create two moments, you just want to display a length of time
  description: |-
    ### Humanize 1.6.0+

    ``` javascript
    moment.duration().humanize();
    moment.duration().humanize(withSuffix);
    moment.duration().humanize(withSuffix, thresholds); // from 2.25.0
    moment.duration().humanize(thresholds);             // from 2.25.0
    ```

    Sometimes, you want all the goodness of `moment#from` but you don't want to have to create two moments, you just want to display a length of time.

    Enter `moment.duration().humanize()`.

    ``` javascript
    moment.duration(1, "minutes").humanize(); // a minute
    moment.duration(2, "minutes").humanize(); // 2 minutes
    moment.duration(24, "hours").humanize();  // a day
    ```

    By default, the return string is describing a duration `a month` (suffix-less). If you want an oriented duration `in a month`, `a month ago` (with suffix), pass in true as seen below.

    ``` javascript
    moment.duration(1, "minutes").humanize(true); // in a minute
    ```

    For suffixes before now, pass in a negative number.

    ``` javascript
    moment.duration(-1, "minutes").humanize(true); // a minute ago
    ```

    Invalid durations are humanized to the localized version of `Invalid Date`.

    ``` javascript
    moment.duration.invalid().humanize(); // Invalid Date
    ```

    Humanize output can be configured with relative time thresholds. To specify thresholds for a particular invocation of humanize, pass them as a sole argument or after suffix arg:

    ``` javascript
    moment.duration(-1, 'week').humanize(true, {d: 7, w: 4}); // a week ago
    moment.duration(-1, 'week').humanize({d: 7, w: 4}); // a week
    ```

    **Note**: Passing thresholds in humanize was added in **2.25.0**.
- name: moment.duration#locale()
  id: index#/durations/locale/
  summary: You can get or set the locale of a duration using locale(...)
  description: |-
    ### Locale 2.17.1+

    ``` javascript
    moment.duration().locale();
    moment.duration().locale(String);
    ```

    You can get or set the locale of a duration using `locale(...)`. The locale will affect the duration's string methods, like `humanize()`. See the [intl](#/i18n/) section for more information on internationalization generally.

    ``` javascript
    moment.duration(1, "minutes").locale("en").humanize(); // a minute
    moment.duration(1, "minutes").locale("fr").humanize(); // une minute
    moment.duration(1, "minutes").locale("es").humanize(); // un minuto
    ```

    Suffixes in `humanize()` are also internationalized:

    ``` javascript
    moment.duration(1, "minutes").locale("en").humanize(true); // in a minute
    moment.duration(1, "minutes").locale("fr").humanize(true); // dans une minute
    moment.duration(1, "minutes").locale("es").humanize(true); // en un minuto

    moment.duration(-1, "minutes").locale("en").humanize(true); // a minute ago
    moment.duration(-1, "minutes").locale("fr").humanize(true); // il y a une minute
    moment.duration(-1, "minutes").locale("es").humanize(true); // hace un minuto
    ```

    ## Utilities

    Moment exposes some methods which may be useful to people extending the library or writing custom parsers.
- name: moment.duration#milliseconds()
  id: index#/durations/milliseconds/
  summary: To get the number of milliseconds in a duration, use moment.duration().milliseconds()
  description: |-
    ### Milliseconds 1.6.0+

    ``` javascript
    moment.duration().milliseconds();
    moment.duration().asMilliseconds();
    ```

    To get the number of milliseconds in a duration, use `moment.duration().milliseconds()`.

    It will return a number between 0 and 999.

    ``` javascript
    moment.duration(500).milliseconds(); // 500
    moment.duration(1500).milliseconds(); // 500
    moment.duration(15000).milliseconds(); // 0
    ```

    If you want the length of the duration in milliseconds, use `moment.duration().asMilliseconds()` instead.

    ``` javascript
    moment.duration(500).asMilliseconds(); // 500
    moment.duration(1500).asMilliseconds(); // 1500
    moment.duration(15000).asMilliseconds(); // 15000
    ```
- name: moment.duration#minutes()
  id: index#/durations/minutes/
  summary: As with the other getters for durations, moment.duration().minutes() gets the minutes (0 - 59)
  description: |-
    ### Minutes 1.6.0+

    ``` javascript
    moment.duration().minutes();
    moment.duration().asMinutes();
    ```

    As with the other getters for durations, `moment.duration().minutes()` gets the minutes (0 - 59).

    `moment.duration().asMinutes()` gets the length of the duration in minutes.
- name: moment.duration#months()
  id: index#/durations/months/
  summary: As with the other getters for durations, moment.duration().months() gets the months (0 - 11)
  description: |-
    ### Months 1.6.0+

    ``` javascript
    moment.duration().months();
    moment.duration().asMonths();
    ```

    As with the other getters for durations, `moment.duration().months()` gets the months (0 - 11).

    `moment.duration().asMonths()` gets the length of the duration in months.
- name: moment.duration#seconds()
  id: index#/durations/seconds/
  summary: To get the number of seconds in a duration, use moment.duration().seconds()
  description: |-
    ### Seconds 1.6.0+

    ``` javascript
    moment.duration().seconds();
    moment.duration().asSeconds();
    ```

    To get the number of seconds in a duration, use `moment.duration().seconds()`.

    It will return a number between 0 and 59.

    ``` javascript
    moment.duration(500).seconds(); // 0
    moment.duration(1500).seconds(); // 1
    moment.duration(15000).seconds(); // 15
    ```

    If you want the length of the duration in seconds, use `moment.duration().asSeconds()` instead.

    ``` javascript
    moment.duration(500).asSeconds(); // 0.5
    moment.duration(1500).asSeconds(); // 1.5
    moment.duration(15000).asSeconds(); // 15
    ```
- name: moment.duration#subtract()
  id: index#/durations/subtract/
  summary: Mutates the original duration by subtracting time
  description: |-
    ### Subtract Time 2.1.0+

    ``` javascript
    moment.duration().subtract(Number, String);
    moment.duration().subtract(Number);
    moment.duration().subtract(Duration);
    moment.duration().subtract(Object);
    ```

    Mutates the original duration by subtracting time.

    The same keys and shorthands used to create durations can be used here as the second argument.

    ``` javascript
    var a = moment.duration(3, 'd');
    var b = moment.duration(2, 'd');
    a.subtract(b).days(); // 1
    ```

    Note that adding an invalid duration to any other duration results in an invalid duration.
- name: moment.duration#toISOString()
  id: index#/durations/as-iso-string/
  summary: Returns duration in string as specified by ISO 8601 standard
  description: |-
    ### As ISO 8601 String 2.8.0+

    ``` javascript
    moment.duration().toISOString();
    ```

    Returns duration in string as specified by [ISO 8601 standard](https://en.wikipedia.org/wiki/ISO_8601#Durations).

    ``` javascript
    moment.duration(1, 'd').toISOString() // "P1D"
    ```

    Format `PnYnMnDTnHnMnS` description:

    |      |                                                                              |
    |------|------------------------------------------------------------------------------|
    | Unit | Meaning                                                                      |
    | P    | \_P\_ stands for period. Placed at the start of the duration representation. |
    | Y    | Year                                                                         |
    | M    | Month                                                                        |
    | D    | Day                                                                          |
    | T    | Designator that precedes the time components.                                |
    | H    | Hour                                                                         |
    | M    | Minute                                                                       |
    | S    | Second                                                                       |
- name: moment.duration#toJSON()
  id: index#/durations/as-json/
  summary: When serializing a duration object to JSON, it will be represented as an ISO8601 string
  description: |-
    ### As JSON 2.9.0+

    ``` javascript
    moment.duration().toJSON();
    ```

    When serializing a duration object to JSON, it will be represented as an ISO8601 string.

    ``` javascript
    JSON.stringify({
        postDuration : moment.duration(5, 'm')
    }); // '{"postDuration":"PT5M"}'
    ```

    Invalid durations return `Invalid Date` as json representation.
- name: moment.duration#weeks()
  id: index#/durations/weeks/
  summary: As with the other getters for durations, moment.duration().weeks() gets the weeks (0 - 4)
  description: |-
    ### Weeks 1.6.0+

    ``` javascript
    moment.duration().weeks();
    moment.duration().asWeeks();
    ```

    As with the other getters for durations, `moment.duration().weeks()` gets the weeks (0 - 4).

    `moment.duration().asWeeks()` gets the length of the duration in weeks.

    Pay attention that unlike the other getters for duration, weeks are counted as a subset of the days, and are not taken off the days count.

    **Note:** The length of a duration in weeks is defined as 7 days.
- name: moment.duration#years()
  id: index#/durations/years/
  summary: As with the other getters for durations, moment.duration().years() gets the years
  description: |-
    ### Years 1.6.0+

    ``` javascript
    moment.duration().years();
    moment.duration().asYears();
    ```

    As with the other getters for durations, `moment.duration().years()` gets the years.

    `moment.duration().asYears()` gets the length of the duration in years.
- name: moment.duration()
  id: index#/durations/diffing/
  summary: You can also use duration with moment#diff to get the duration between two moments
  description: |-
    ### Using Duration with Diff 2.1.0+

    ``` javascript
    var duration = moment.duration(x.diff(y))
    ```

    You can also use duration with `moment#diff` to get the duration between two moments. To do so, simply pass the `moment#diff` method into `moment#duration` as follows:

    ``` javascript
      var x = new moment()
      var y = new moment()
      var duration = moment.duration(x.diff(y))
      // returns duration object with the duration between x and y
    ```

    See [here](#/displaying/difference/) for more information about `moment#diff`.
- name: moment.duration()
  id: index#/durations/creating/
  summary: To create a duration, call moment.duration() with the length of time in milliseconds
  description: |-
    ### Creating 1.6.0+

    ``` javascript
    moment.duration(Number, String);
    moment.duration(Number);
    moment.duration(Object);
    moment.duration(String);
    moment.duration(String, String); // 2.25.0
    ```

    To create a duration, call `moment.duration()` with the length of time in milliseconds.

    ``` javascript
    moment.duration(100); // 100 milliseconds
    ```

    If you want to create a moment with a unit of measurement other than milliseconds, you can pass the unit of measurement as well.

    ``` javascript
    moment.duration(2, 'seconds');
    moment.duration(2, 'minutes');
    moment.duration(2, 'hours');
    moment.duration(2, 'days');
    moment.duration(2, 'weeks');
    moment.duration(2, 'months');
    moment.duration(2, 'years');
    moment.duration('2', 'years'); // from 2.25.0
    ```

    The same shorthand for `moment#add` and `moment#subtract` works here as well.

    |              |           |
    |--------------|-----------|
    | Key          | Shorthand |
    | years        | y         |
    | months       | M         |
    | weeks        | w         |
    | days         | d         |
    | hours        | h         |
    | minutes      | m         |
    | seconds      | s         |
    | milliseconds | ms        |

    Much like `moment#add`, you can pass an object of values if you need multiple different units of measurement.

    ``` javascript
    moment.duration({
        seconds: 2,
        minutes: 2,
        hours: 2,
        days: 2,
        weeks: 2,
        months: '2',
        years: '2'
    });
    ```

    As of **2.1.0**, moment supports parsing ASP.NET style time spans. The following formats are supported.

    The format is an hour, minute, second string separated by colons like `23:59:59`. The number of days can be prefixed with a dot separator like so `7.23:59:59`. Partial seconds are supported as well `23:59:59.999`.

    ``` javascript
    moment.duration('23:59:59');
    moment.duration('23:59:59.999');
    moment.duration('7.23:59:59.999');
    moment.duration('23:59'); // added in 2.3.0
    ```

    As of **2.3.0**, moment also supports parsing [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) durations.

    ``` javascript
    moment.duration('P1Y2M3DT4H5M6S');
    moment.duration('P1M');
    ```

    As of **2.11.0**, duration format strings with a space between days and rest is supported.

    ``` javascript
    moment.duration('7 23:59:59.999');
    ```

    As of **2.13.0**, mixed negative and positive signs are supported when parsing durations.

    ``` javascript
    moment.duration('PT-6H3M')
    ```

    As of **2.18.0**, invalid durations are supported, similarly to invalid moments. To create an invalid duration you can pass `NaN` for a value of a unit.

    In upcoming releases expect invalid durations to cover more cases (like null values for units).

    ``` javascript
    moment.duration(NaN);
    moment.duration(NaN, 'days');
    moment.duration.invalid();
    ```
- name: moment.invalid()
  id: index#/utilities/invalid/
  summary: You can create your own invalid Moment objects, which is useful in making your own parser
  description: "### Invalid 2.3.0+\n\n``` javascript\nmoment.invalid(Object);\n```\n\nYou can create your own invalid Moment objects, which is useful in making your own parser.\n\n``` javascript\nvar m = moment.invalid();\nm.isValid();                      // false\nm.format();                       // 'Invalid date'\nm.parsingFlags().userInvalidated; // true\n```\n\n`invalid` also accepts an object which specifies which parsing flags to set. This will *not* set the `userInvalidated` parsing flag unless it's one of the properties specified.\n\n``` javascript\nvar m = moment.invalid({invalidMonth: 'Actober'});\nm.parsingFlags().invalidMonth; // 'Actober'\n```\n\nYou need not specify parsing flags recognized by Moment; the Moment will be invalid nonetheless, and the parsing flags will be returned by `parsingFlags()`.\n\n## Plugins\n\nSome other people have made plugins for Moment.js that may be useful to you.\n\n### Strftime\n\n``` javascript\nnpm install moment-strftime\n```\n\nIf you are more comfortable working with strftime instead of LDML-like parsing tokens, you can use Ben Oakes' plugin `moment-strftime`.\n\nThe repository is located at [github.com/benjaminoakes/moment-strftime](https://github.com/benjaminoakes/moment-strftime).\n\n### MSDate\n\nIf you are using OLE Automation dates in .NET check out Markit On Demand's `moment-msdate`. Using this plugin allows you to format OA dates into JavaScript dates and vice-versa.\n\nConvert a `moment` to an OA date:\n\n``` javascript\nmoment().toOADate(); // a floating point number\n```\n\nOr, convert an OA date to a `moment`:\n\n``` javascript\nmoment.fromOADate(41493); // Wed Aug 07 2013 00:00:00 GMT-0600 (MDT)\n```\n\nMore information and detailed docs can be found on GitHub at <http://markitondemand.github.io/moment-msdate/>.\n\n### Java DateFormat Parser\n\n``` javascript\nnpm install moment-jdateformatparser\n```\n\nIf you want to work with the `java.text.DateFormat` you can use this plugin.\n\nFor example,\n\n``` javascript\nmoment(\"2013-12-24 14:30\").formatWithJDF(\"dd.MM.yyyy\");  // returns the formatted date \"24.12.2013\"\nmoment().toJDFString(\"DD.MM.YYYY\");  // returns the Java format pattern \"dd.MM.yyyy\"\n```\n\nThe repository is located at [github.com/MadMG/moment-jdateformatparser](https://github.com/MadMG/moment-jdateformatparser).\n\n### Date Ranges\n\n``` javascript\nnpm install moment-range\n```\n\nIf you need to work with date ranges, you can use Gianni Chiappetta's plugin `moment-range`.\n\nDocumentation can be found on the homepage [github.com/rotaready/moment-range](https://github.com/rotaready/moment-range).\n\nAnd it is also available for the web at the repository below.\n\nThe repository is located at [github.com/rotaready/moment-range](https://github.com/rotaready/moment-range).\n\n### Twix\n\n``` javascript\nnpm install twix\n```\n\nAnother range plugin is Isaac Cambron's library `Twix`. It has many range-related features and excels at formatting ranges readably. For example,\n\n``` javascript\nvar t = moment(\"1/25/1982 9:30 AM\").twix(\"1/25/1982 1:30 PM\");\nt.isCurrent(); // false\nt.count('minutes'); // 241\nt.format();  // 'Jan 25, 1982, 9:30 AM - 1:30 PM'\nt.simpleFormat(\"h:m\"); // '9:30 - 1:30'\n```\n\nFull documentation of all the options and features is [here](http://icambron.github.io/twix.js).\n\nIt's available on npm like so:\n\n``` javascript\nnpm install twix\n```\n\nOr just grab the JS file from [here](https://raw.github.com/icambron/twix.js/master/dist/twix.js).\n\n### Precise Range\n\n``` javascript\nnpm install moment-precise-range-plugin\n```\n\nThe [Precise Range](https://codebox.org.uk/pages/moment-date-range-plugin) plugin, written by [Rob Dawson](https://github.com/codebox), can be used to display exact, human-readable representations of date/time ranges:\n\n``` javascript\nmoment(\"2014-01-01 12:00:00\").preciseDiff(\"2015-03-04 16:05:06\");\n // 1 year 2 months 3 days 4 hours 5 minutes 6 seconds\n```\n\n``` javascript\nmoment.preciseDiff(\"2014-01-01 12:00:00\", \"2014-04-20 12:00:00\");\n// 3 months 19 days\n```\n\nTo obtain the raw numeric values rather than a string, pass the value `true` as the third argument to the method:\n\n``` javascript\nmoment.preciseDiff(m1, m2, true); \n// {years : 0, months : 1, days : 2, hours : 3, minutes : 4, seconds : 5, firstDateWasLater : false}\n```\n\n### ISO Calendar\n\n``` javascript\nnpm install moment-isocalendar\n```\n\nIf you are looking for a Python-like isocalendar method, you can use Rocky Meza's plugin\n\n`moment-isocalendar`\n\nCalling the isocalendar method on a moment will return an array like the following:\n\n`[year, week_of_year, day_of_week, minutes_since_midnight]`\n\n``` javascript\nmoment().isocalendar(); // [2012, 8, 5, 870]\n```\n\nYou can also reconstruct a moment from a isocalendar array.\n\n``` javascript\nmoment.fromIsocalendar([2011, 51, 5, 870]).format('LLLL');\n// \"Friday, December 23 2011 2:30 PM\"\n```\n\nThe repository is located at [github.com/fusionbox/moment-isocalendar](https://github.com/fusionbox/moment-isocalendar).\n\n### Jalaali Calendar\n\n``` javascript\nnpm install moment-jalaali\n```\n\nIf you want to work with Jalaali calendar system (Jalali, Persian, Khorshidi or Shamsi), you can use Behrang Noruzi Niya's plugin `moment-jalaali`.\n\nWhen installed, it will wrap `moment` and moment will be able to format and parse Jalaali years and months. Here is a short example:\n\n``` javascript\nvar m = moment('1360/5/26', 'jYYYY/jM/jD'); // Parse a Jalaali date.\nm.format('jYYYY/jM/jD [is] YYYY/M/D'); // 1360/5/26 is 1981/8/17\n```\n\nThe repository is located at [github.com/behrang/moment-jalaali](https://github.com/behrang/moment-jalaali).\n\n### Hijri Calendar\n\n``` javascript\nnpm install moment-hijri\n```\n\nIf you want to work with Hijri calendar then you can use `moment-hijri` plugin. `moment-hijri` is a moment plugin for the Hijri lunar calendar based on [Umm al-Qura](http://www.ummulqura.org.sa/) calculations. This plugin is developed by [Suhail Alkowaileet](https://github.com/xsoh).\n\nWhen you install it, it will wrap `moment` and you will be able to parse Hijri dates. Here is a short example:\n\n``` javascript\nm = moment('1410/8/28', 'iYYYY/iM/iD'); // Parse a Hijri date.\nm.format('iYYYY/iM/iD [is] YYYY/M/D'); // 1410/8/28 is 1990/3/25\n```\n\nThe repository is located at [github.com/xsoh/moment-hijri](https://github.com/xsoh/moment-hijri).\n\n### Islamic Civil Calendar\n\n``` javascript\nnpm install moment-islamic-civil\n```\n\nThis is another Hijri calendar (based on civil calculations).\n\nThe repository is located at [github.com/ACGC/moment-islamic-civil](https://github.com/ACGC/moment-islamic-civil).\n\n### Recur\n\n``` javascript\nnpm install moment-recur\n```\n\nIf you need to work with recurring dates, you can use Casey Trimm's plugin `moment-recur`.\n\nThis plugin will allow you to create length-based intervals (days, weeks, etc.) and calendar-based intervals (daysOfMonth, monthsOfYear, etc.).\n\nIt provides a `matches` function to test whether a date recurs according to the rules set, as well as generator functions to get the next and previous dates in a series.\n\nThe repository, documentation, and many more examples can be found at [github.com/c-trimm/moment-recur](https://github.com/c-trimm/moment-recur)\n\n``` javascript\nvar interval = moment( \"01/01/2014\" ).recur().every(2).days(); // Length Interval\ninterval.matches( \"01/03/2014\" ); // true\ninterval.next( 2, \"L\" ); // [\"01/03/2014\", \"01/05/2014\"]\ninterval.forget( \"days\" ); // Remove a rule\ninterval.dayOfMonth( 10 ); // Calendar Interval\ninterval.matches( \"05/10/2014\" ); // true\ninterval.previous( 2, \"L\" ); // [\"12/10/2013\", \"11/10/2013\"]\n```\n\n### Twitter\n\nIf you're trying to format times for tweets like the way Twitter does, you can use the [moment.twitter](https://github.com/hijonathan/moment.twitter) plugin by [@hijonathan](https://github.com/hijonathan).\n\nIt's a simple way to display both short and long versions of human-readable timestamps.\n\n``` javascript\nmoment().subtract(5, 'hours').twitterLong();\n// 5 hours\n```\n\nYes, it does smart pluralization.\n\n``` javascript\nmoment().subtract(1, 'hour').twitterLong();\n// 1 hour\n```\n\nNot short enough for you?\n\n``` javascript\nmoment().subtract(6, 'days').twitterShort();\n// 6d\n```\n\n### Fiscal Quarters\n\nIf you ever have need for [Fiscal](https://en.wikipedia.org/wiki/Fiscal_year), Calendar or Academic quarters, you can use the [moment-fquarter](https://github.com/robgallen/moment-fquarter) plugin by [@robgallen](https://github.com/robgallen).\n\nAt its simplest, just call the fquarter method on any moment object. It returns a formatted string with April being the first quarter.\n\n``` javascript\nmoment(\"2013-01-01\").fquarter();\n// Q4 2012/13\n```\n\nYou can pass in any month as the starting quarter, e.g. July\n\n``` javascript\nmoment(\"2013-01-01\").fquarter(7);\n// Q3 2012/13\n```\n\nIf you want calendar quarters, start in January\n\n``` javascript\nmoment(\"2013-01-01\").fquarter(1);\n// Q1 2013\n```\n\n### Parse Date Format\n\n``` javascript\nnpm install moment-parseformat\n```\n\nThis plugin extracts the format of a date/time string.\n\n``` javascript\nvar format = moment.parseFormat('Thursday, February 6th, 2014 9:20pm');\n// dddd, MMMM Do, YYYY h:mma\nmoment().format(format); // format\n```\n\nThat allows to create smart date inputs that let your users set a Date/Time and lets you extract the user's preferred format for future usage. Find an example usage of it at [minutes.io](https://minutes.io/new/Meeting).\n\nThe Plugin has been authored by [@gr2m](https://github.com/gr2m). Links: [Demo](http://gr2m.github.io/moment-parseformat/) \\| [Source](https://github.com/gr2m/moment.parseFormat)\n\n### Round\n\n``` javascript\nnpm install moment-round\n```\n\nThis plugin will round date/time to a given interval.\n\nFor example,\n\n``` javascript\nrequire('moment-round');\nvar m = new moment(); // 2015-06-18 15:30:19\nm.round(5, 'seconds'); // 2015-06-18 15:30:20\nm.ceil(3, 'minutes'); // 2015-06-18 15:33:00\nm.floor(16, 'hours'); // 2015-06-18 00:00:00\nm.ceil(21, 'hours'); // 2015-06-18 21:00:00\nm.ceil(20, 'hours'); // 2015-06-19 00:00:00\n```\n\nThe repository is located at [github.com/WebDevTmas/moment-round](https://github.com/WebDevTmas/moment-round).\n\n### Transform\n\n``` javascript\nbower install moment-transform\n```\n\n[`moment-transform`](https://a----.github.io/moment-transform/) is a plugin that manipulated dates through patterns. You can use basic operations âset/add/subtractâ on individual parts (hours, month, â¦) of a Moment instance.\n\n``` javascript\nmoment().transform('YYYY-MM-+01 00:00:00.000'); // Tonight at midnight\nmoment().transform('14:30:00.000'); // Today, 2:30 pm\nmoment().transform('YYYY-MM--30 00:00:00.000'); // 30 days ago\n```\n\nOptional parameters lets you specify custom patterns and force strict pattern usage (non-alphabetic characters are not mandatory in passed string by default).\n\n``` javascript\nmoment().transform('+01MMYYYY', 'DD/MM/YYYY', false); // Tomorrow, same time\nmoment().transform('+01MMYYYY', 'DD/MM/YYYY', true); // Invalid date\n```\n\nYou can see it live [there](https://a----.github.io/moment-transform/) while the repository is [here](https://github.com/A----/moment-transform).\n\n### Taiwan Calendar\n\n``` javascript\nnpm install moment-taiwan\n```\n\nIf you want to work with Taiwan calendar system , you can use Bradwoo8621's plugin `moment-taiwan`.\n\nWhen installed, it will wrap `moment` and moment will be able to format and parse Taiwan years. Here is a short example:\n\n``` javascript\nm = moment('104/01/01', 'tYY/MM/DD') // Parse a Taiwan date\nm.format('tYY/MM/DD [is] YYYY/M/D') // 104/01/01 is 2015/01/01\n\nm.twYear() // 104\n```\n\nThe repository is located at [github.com/bradwoo8621/moment-taiwan](https://github.com/bradwoo8621/moment-taiwan).\n\n### Duration Format\n\n``` javascript\nnpm install moment-duration-format\n```\n\nThis is a plugin that will allow comprehensive formatting of Moment Durations.\n\nFor example,\n\n``` javascript\nmoment.duration(123, \"minutes\").format(\"h:mm\");\n// \"2:03\"\n```\n\nThe repository is located at [github.com/jsmreese/moment-duration-format](https://github.com/jsmreese/moment-duration-format).\n\n### Timer\n\n``` javascript\nnpm install moment-timer\n```\n\nThis is a Moment.js plugin that allows the use of timers, which offer much more control than the native JavaScript timers. It's basically a rewrite of JavaScripts own setInterval and setTimeout.\n\nFor example,\n\n``` javascript\nvar timer = moment.duration(5, \"seconds\").timer({loop: true}, function() {\n  // Callback\n});\n```\n\nThe repository is located at [github.com/SeverinDK/moment-timer](https://github.com/SeverinDK/moment-timer).\n\n### Business\n\n``` javascript\nnpm install moment-business\n```\n\nThis is a Moment.js library that allows Moment operations for Western work weeks: 7 day weeks where Saturday and Sunday are non-work days.\n\nFor example,\n\n``` javascript\nimport business from 'moment-business';\n\n// true if the moment is Mon-Fri, false otherwise\nbusiness.isWeekDay(someMoment);\n\n// Adds five work days to the Moment\nbusiness.addWeekDays(someMoment, 5);\n```\n\nThe repository is located at [github.com/jmeas/moment-business](https://github.com/jmeas/moment-business).\n\n### Short Date Formatter\n\nIf you want to format times in a short way, you can use the [moment-shortformat](https://github.com/researchgate/moment-shortformat) plugin by [@researchgate](https://github.com/researchgate).\n\nIt is based on and similar to the moment.twitter plugin but has a different output.\n\n``` javascript\nmoment().subtract(5, 'hours').short();\n// 5h ago\nmoment().add(5, 'hours').short();\n// in 5h\n```\n\nYou can also disable the use of the [relative time templates](#/customization/relative-time/)\n\n``` javascript\nmoment().subtract(1, 'hour').short(false);\n// 1h\n```\n\nIf the date is too far in the future or the past it will display like that\n\n``` javascript\nmoment().subtract(500, 'days').short();\n// 5 Mar, 1970\n```\n\n### German Holiday (Feiertag)\n\n``` javascript\nnpm install moment-feiertage --save\n```\n\nThis (moment-feiertage) is a Moment.js plugin to determine if a date is a German holiday. Holidays are taken from Wikipedia (de). It's a bit complicated to determine if a date is a holiday, because religious holidays vary every year and differ within the 16 German states.\n\nMade by [DaniSchenk](https://github.com/DaniSchenk).\n\n``` javascript\nvar someDateInSomeStates = moment('2018-11-01').isHoliday(['BW', 'SH', 'TH']);\n/* returns {\n  allStates: false,\n  holidayName: 'Allerheiligen',\n  holidayStates: [ 'BW' ],\n  testedStates: [ 'BW', 'SH', 'TH' ]\n}*/\n```\n\nThe repository is located at [github.com/DaniSchenk/moment-feiertage](https://github.com/DaniSchenk/moment-feiertage).\n\nÂ© JS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://momentjs.com/docs/](https://momentjs.com/docs/)"
- name: moment.isDate()
  id: index#/query/is-a-date/
  summary: To check if a variable is a native js Date object, use moment.isDate()
  description: |-
    ### Is a Date 2.9.0+

    ``` javascript
    moment.isDate(obj);
    ```

    To check if a variable is a native js Date object, use `moment.isDate()`.

    ``` javascript
    moment.isDate(); // false
    moment.isDate(new Date()); // true
    moment.isDate(moment()); // false
    ```

    ## i18n

    Moment.js has robust support for internationalization.

    You can load multiple locales and easily switch between them.

    In addition to assigning a global locale, you can assign a locale to a specific moment.
- name: moment.isDuration()
  id: index#/durations/is-a-duration/
  summary: To check if a variable is a moment duration object, use moment.isDuration()
  description: |-
    ### Is a Duration 1.6.0+

    ``` javascript
    moment.isDuration(obj);
    ```

    To check if a variable is a moment duration object, use `moment.isDuration()`.

    ``` javascript
    moment.isDuration() // false
    moment.isDuration(new Date()) // false
    moment.isDuration(moment()) // false
    moment.isDuration(moment.duration()) // true
    moment.isDuration(moment.duration(2, 'minutes')) // true
    ```
- name: moment.isMoment()
  id: index#/query/is-a-moment/
  summary: To check if a variable is a moment object, use moment.isMoment()
  description: |-
    ### Is a Moment 1.5.0+

    ``` javascript
    moment.isMoment(obj);
    ```

    To check if a variable is a moment object, use `moment.isMoment()`.

    ``` javascript
    moment.isMoment() // false
    moment.isMoment(new Date()) // false
    moment.isMoment(moment()) // true
    ```

    From version **2.11.0**, you can also test for a moment object by `instanceof` operator:

    ``` javascript
    moment() instanceof moment // true
    ```
- name: moment.locale()
  id: index#/i18n/pseudo-locale/
  summary: As of version 2.13.0 moment optionally includes a pseudo locale
  description: |-
    ### Pseudo Locale 2.13.0+

    ``` javascript
    moment.locale('x-pseudo')
    ```

    As of version **2.13.0** moment optionally includes a pseudo locale. This locale will populate the dates with very obviously changed data. Pseudo locales can be useful when testing, as they make obvious what data has and has not been localized. Just include the pseudo-locale, and set moment's locale to x-pseudo. Text from Moment will be very easy to spot.

    ``` javascript
    moment.locale('x-pseudo');
    moment().format('LLL'); //14 F~Ã©brÃº~Ã¡rÃ½ 2010 15:25
    moment().fromNow(); //'Ã¡ ~fÃ©w ~sÃ©cÃ³~Ã±ds Ã¡~gÃ³'
    moment().calendar(); //'T~Ã³dÃ¡~Ã½ Ã¡t 02:00'
    ```

    ## Customize

    Moment.js is very easy to customize. In general, you should create a locale setting with your customizations.

    ``` javascript
    moment.locale('en-my-settings', {
        // customizations.
    });
    ```

    You can remove a previously defined locale by passing `null` as the second argument. The deleted locale will no longer be available for use.

    ``` javascript
    moment.locale('fr'); // 'fr'
    moment.locale('en'); // 'en'
    moment.locale('fr', null);
    moment.locale('fr'); // 'en'
    ```

    As of **2.12.0** it is possible to create a locale that inherits from a parent locale.

    ``` javascript
    moment.defineLocale('en-foo', {
      parentLocale: 'en',
      /* */
    });
    ```

    Properties that are not specified in the locale will be inherited from the parent locale.

    As of **2.16.0** it is possible to define a locale with a parent that hasn't itself been defined or loaded.

    ``` javascript
    moment.defineLocale('fakeLocale', {parentLocale:'xyz'})
    ```

    As of **2.21.0** when attempting to create a moment with the newly defined locale, moment will attempt to lazy load the parent if it exists. Failing that it will default the parent to the global locale.

    As of **2.12.0** it is also possible to update a locale's properties.

    ``` javascript
    moment.updateLocale('en', {
      /**/
    });
    ```

    Any properties specified will be updated, while others will remain the same. This function does not affect moments that already exist. Note that calling `updateLocale` also changes the current global locale, to the locale that is updated; see [this GitHub issue](https://github.com/moment/moment/issues/5410) for more information.

    To revert an update use:

    ``` javascript
    moment.updateLocale('en', null);
    ```

    **2.12.0** deprecated using `moment.locale()` to change an existing locale. Use `moment.updateLocale()` instead.
- name: moment.locale()
  id: index#/i18n/changing-locale/
  summary: By default, Moment.js comes with English (United States) locale strings
  description: |-
    ### Changing locale globally 1.0.0+

    ``` javascript
    // From 2.8.1 onward
    moment.locale(String);
    moment.locale(String[]);
    moment.locale(String, Object);

    // Deprecated in 2.8.1
    moment.lang(String);
    moment.lang(String[]);
    moment.lang(String, Object);
    ```

    By default, Moment.js comes with English (United States) locale strings. If you need other locales, you can load them into Moment.js for later use.

    To load a locale, pass the key and the string values to `moment.locale`.

    More details on each of the parts of the locale bundle can be found in the [customization](#/customization/) section.

    ``` javascript
    moment.locale('fr', {
        months : 'janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre'.split('_'),
        monthsShort : 'janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourdâhui Ã ] LT',
            nextDay : '[Demain Ã ] LT',
            nextWeek : 'dddd [Ã ] LT',
            lastDay : '[Hier Ã ] LT',
            lastWeek : 'dddd [dernier Ã ] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse : /\d{1,2}(er|e)/,
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : 'e');
        },
        meridiemParse : /PD|MD/,
        isPM : function (input) {
            return input.charAt(0) === 'M';
        },
        // In case the meridiem units are not separated around 12, then implement
        // this function (look at locale/id.js for an example).
        // meridiemHour : function (hour, meridiem) {
        //     return /* 0-23 hour, given meridiem token and hour 1-12 */ ;
        // },
        meridiem : function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // Used to determine first week of the year.
        }
    });
    ```

    Details about `week.dow` and `week.doy` can be found in the [customization](#/customization/dow-doy/) section.

    Once you load a locale, it becomes the active locale. To change active locales, simply call `moment.locale` with the key of a loaded locale.

    ``` javascript
    moment.locale('fr');
    moment(1316116057189).fromNow(); // il y a une heure
    moment.locale('en');
    moment(1316116057189).fromNow(); // an hour ago
    ```

    As of **2.21.0**, Moment will `console.warn` if the locale is unavailable.

    As of **2.8.0**, changing the global locale doesn't affect existing instances.

    ``` javascript
    moment.locale('fr');
    var m = moment(1316116057189);
    m.fromNow(); // il y a une heure

    moment.locale('en');
    m.fromNow(); // il y a une heure
    moment(1316116057189).fromNow(); // an hour ago
    ```

    `moment.locale` returns the locale used. This is useful because Moment won't change locales if it doesn't know the one you specify.

    ``` javascript
    moment.locale('fr'); // 'fr'
    moment.locale('tq'); // 'fr'
    ```

    You may also specify a list of locales, and Moment will use the first one it has localizations for.

    ``` javascript
    moment.locale(['tq', 'fr']); // 'fr'
    ```

    Moment will also try locale specifier substrings from most-specific to least-specific until it finds a locale it knows. This is useful when supplying Moment with a locale string pulled from the user's environment, such as `window.navigator.language`.

    ``` javascript
    moment.locale('en-nz'); // 'en'
    ```

    Finally, Moment will search intelligently through an array of locales and their substrings.

    ``` javascript
    moment.locale(['en-nz', 'en-au']); // 'en-au', not 'en'
    ```

    The logic works as follows -- the next locale is picked and tried as-is. If that fails, the code normally tries to chop the last bit (normally the country designation) and try again. However, if the next array element has the same or longer prefix as the one to be tried, the iteration continues. So for example if the array has the sequence

    ``` javascript
    "AA-BB", "AA-CC", "XX-YY"
    ```

    then first "AA-BB" is tried, then a naive solution would try "AA", but this one instead checks to see that "AA-CC" is actually more concrete than "AA", so it tries "AA-CC" next, and only after it fails (if it fails) it tries "AA", because "XX-YY" does not have "AA" as prefix. So in the end the following locales are tried in this order (assuming all fail so the next one is tried):

    ``` javascript
    "AA-BB", "AA-CC", "AA", "XX-YY", "XX"
    ```
- name: moment.localeData()
  id: index#/i18n/locale-data/
  summary: You can access the properties of the currently loaded locale through the moment.localeData(key) function
  description: |-
    ### Accessing locale specific functionality 2.8.0+

    ``` javascript
    localeData = moment.localeData()
    localeData.months(Moment)
    localeData.months()
    localeData.monthsShort(Moment)
    localeData.monthsShort()
    localeData.monthsParse(String)
    localeData.weekdays(Moment)
    localeData.weekdays()
    localeData.weekdays(Boolean)      ## Added 2.24.0, sorts weekdays by locale
    localeData.weekdaysShort(Moment)
    localeData.weekdaysShort()
    localeData.weekdaysShort(Boolean) ## Added 2.24.0, sorts weekdays by locale
    localeData.weekdaysMin(Moment)
    localeData.weekdaysMin()
    localeData.weekdaysMin(Boolean)   ## Added 2.24.0, sorts weekdays by locale
    localeData.weekdaysParse(String)
    localeData.longDateFormat(String)
    localeData.isPM(String)
    localeData.meridiem(Number, Number, Boolean)
    localeData.calendar(String, Moment)
    localeData.relativeTime(Number, Boolean, String, Boolean)
    localeData.pastFuture(Number, String)
    localeData.ordinal(Number)
    localeData.preparse(String)
    localeData.postformat(String)
    localeData.week(Moment)
    localeData.invalidDate()
    localeData.firstDayOfWeek()
    localeData.firstDayOfYear()
    ```

    You can access the properties of the currently loaded locale through the `moment.localeData(key)` function. It returns the current locale or a locale with the given key:

    ``` javascript
    // get current locale
    var currentLocaleData = moment.localeData();
    var frLocaleData = moment.localeData('fr');
    ```

    The returned object has the following methods:

    ``` javascript
    localeData.months(aMoment);  // full month name of aMoment
    localeData.monthsShort(aMoment);  // short month name of aMoment
    localeData.monthsParse(longOrShortMonthString);  // returns month id (0 to 11) of input
    localeData.weekdays(aMoment);  // full weekday name of aMoment
    localeData.weekdaysShort(aMoment);  // short weekday name of aMoment
    localeData.weekdaysMin(aMoment);  // min weekday name of aMoment
    localeData.weekdaysParse(minShortOrLongWeekdayString);  // returns weekday id (0 to 6) of input
    localeData.longDateFormat(dateFormat);  // returns the full format of abbreviated date-time formats LT, L, LL and so on
    localeData.isPM(amPmString);  // returns true iff amPmString represents PM
    localeData.meridiem(hours, minutes, isLower);  // returns am/pm string for particular time-of-day in upper/lower case
    localeData.calendar(key, aMoment);  // returns a format that would be used for calendar representation. Key is one of 'sameDay', 'nextDay', 'lastDay', 'nextWeek', 'prevWeek', 'sameElse'
    localeData.relativeTime(number, withoutSuffix, key, isFuture);  // returns relative time string, key is on of 's', 'm', 'mm', 'h', 'hh', 'd', 'dd', 'M', 'MM', 'y', 'yy'. Single letter when number is 1.
    localeData.pastFuture(diff, relTime);  // convert relTime string to past or future string depending on diff
    localeData.ordinal(number);  // convert number to ordinal string 1 -> 1st
    localeData.preparse(str);  // called before parsing on every input string
    localeData.postformat(str);  // called after formatting on every string
    localeData.week(aMoment);  // returns week-of-year of aMoment
    localeData.invalidDate();  // returns a translation of 'Invalid date'
    localeData.firstDayOfWeek();  // 0-6 (Sunday to Saturday)
    localeData.firstDayOfYear();  // 0-15 Used to determine first week of the year.
    ```

    Details about `firstDayOfYear` can be found in the [customization](#/customization/dow-doy/) section.
- name: moment.max()
  id: index#/get-set/max/
  summary: Returns the maximum (most distant future) of the given moment instances
  description: |-
    ### Maximum 2.7.0+

    ``` javascript
    moment.max(Moment[,Moment...]);
    moment.max(Moment[]);
    ```

    Returns the maximum (most distant future) of the given moment instances.

    For example:

    ``` javascript
    var a = moment().subtract(1, 'day');
    var b = moment().add(1, 'day');
    moment.max(a, b);  // b

    var friends = fetchFriends(); /* [{name: 'Dan', birthday: '11.12.1977'}, {name: 'Mary', birthday: '11.12.1986'}, {name: 'Stephan', birthday: '11.01.1993'}]*/
    var friendsBirthDays = friends.map(function(friend){
        return moment(friend.birthday, 'DD.MM.YYYY');
    });
    moment.max(friendsBirthDays);  // '11.01.1993'
    ```

    With no arguments the function returns a moment instance with the current time.

    From version **2.10.5**, if an invalid moment is one of the arguments, the result is an invalid moment.

    ``` javascript
    moment.max(moment(), moment.invalid()).isValid() === false
    moment.max(moment.invalid(), moment()).isValid() === false
    moment.max([moment(), moment.invalid()]).isValid() === false
    moment.max([moment.invalid(), moment()]).isValid() === false
    ```
- name: moment.min()
  id: index#/get-set/min/
  summary: Returns the minimum (most distant past) of the given moment instances
  description: |-
    ### Minimum 2.7.0+

    ``` javascript
    moment.min(Moment[,Moment...]);
    moment.min(Moment[]);
    ```

    Returns the minimum (most distant past) of the given moment instances.

    For example:

    ``` javascript
    var a = moment().subtract(1, 'day');
    var b = moment().add(1, 'day');
    moment.min(a, b);  // a
    moment.min([a, b]); // a
    ```

    With no arguments the function returns a moment instance with the current time.

    From version **2.10.5**, if an invalid moment is one of the arguments, the result is an invalid moment.

    ``` javascript
    moment.min(moment(), moment.invalid()).isValid() === false
    moment.min(moment.invalid(), moment()).isValid() === false
    moment.min([moment(), moment.invalid()]).isValid() === false
    moment.min([moment.invalid(), moment()]).isValid() === false
    ```

    ## Manipulate

    Once you have a `Moment`, you may want to manipulate it in some way. There are a number of methods to help with this.

    Moment.js uses the [fluent interface pattern](https://en.wikipedia.org/wiki/Fluent_interface), also known as [method chaining](https://en.wikipedia.org/wiki/Method_chaining). This allows you to do crazy things like the following.

    ``` javascript
    moment().add(7, 'days').subtract(1, 'months').year(2009).hours(0).minutes(0).seconds(0);
    ```

    **Note:** It should be noted that moments are mutable. Calling any of the manipulation methods will change the original moment.

    If you want to create a copy and manipulate it, you should use `moment#clone` before manipulating the moment. [More info on cloning.](#/parsing/moment-clone/)
- name: moment.months()
  id: index#/i18n/listing-months-weekdays/
  summary: It is sometimes useful to get the list of months or weekdays in a locale, for example when populating a dropdown menu
  description: |-
    ### Listing the months and weekdays of the current Moment.js locale 2.3.0+

    ``` javascript
    moment.months()
    moment.monthsShort()
    moment.weekdays()
    moment.weekdaysShort()
    moment.weekdaysMin()
    ```

    It is sometimes useful to get the list of months or weekdays in a locale, for example when populating a dropdown menu.

    ``` javascript
    moment.months();
    ```

    Returns the list of months in the current locale.

    ``` javascript
    [ 'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December' ]
    ```

    Similarly, `moment.monthsShort` returns abbreviated month names, and `moment.weekdays`, `moment.weekdaysShort`, `moment.weekdaysMin` return lists of weekdays.

    You can pass an integer into each of those functions to get a specific month or weekday.

    ``` javascript
    moment.weekdays(3); // 'Wednesday'
    ```

    As of **2.13.0** you can pass a bool as the first parameter of the weekday functions. If true, the weekdays will be returned in locale specific order. For instance, in the Arabic locale, Saturday is the first day of the week, thus:

    ``` javascript
    moment.locale('ar');
    moment.weekdays(true); // lists weekdays Saturday-Friday in Arabic
    moment.weekdays(true, 2); //will result in Monday in Arabic
    ```

    **Note:** Absent the locale specific parameter, weekdays always have Sunday as index 0, regardless of the local first day of the week.

    Some locales make special considerations into account when formatting month names. For example, Dutch formats month abbreviations without a trailing period, but only if it's formatting the month between dashes. The `months` method supports passing a format in so that the months will be listed in the proper context.

    ``` javascript
    moment.locale('nl');
    moment.monthsShort(); // ['jan.', 'feb.', 'mrt.', ...]
    moment.monthsShort('-MMM-'); // [ 'jan', 'feb', 'mrt', ...]
    ```

    And finally, you can combine both the format option and the integer option.

    ``` javascript
    moment.monthsShort('-MMM-', 3); // 'apr'
    ```
- name: moment.normalizeUnits()
  id: index#/utilities/normalize-units/
  summary: Many of Moment's functions allow the caller to pass in aliases for unit enums
  description: |-
    ### Normalize Units 2.3.0+

    ``` javascript
    moment.normalizeUnits(String);
    ```

    Many of Moment's functions allow the caller to pass in aliases for unit enums. For example, all of the `get`s below are equivalent.

    ``` javascript
    var m = moment();
    m.get('y');
    m.get('year');
    m.get('years');
    ```

    If you're extending the library, you may want access to Moment's facilities for that in order to better align your functionality with Moment's.

    ``` javascript
    moment.normalizeUnits('y');      // 'year'
    moment.normalizeUnits('Y');      // 'year'
    moment.normalizeUnits('year');   // 'year'
    moment.normalizeUnits('years');  // 'year'
    moment.normalizeUnits('YeARS');  // 'year'
    ```
- name: moment.now()
  id: index#/customization/now/
  summary: If you want to change the time that Moment sees, you can specify a method that returns the number of milliseconds since the Unix epoch (January 1, 1970)
  description: |-
    ### Changing Time Source 2.11.0+

    ``` javascript
    moment.now = function () { return +new Date(); }
    ```

    If you want to change the time that Moment sees, you can specify a method that returns the number of milliseconds since the Unix epoch (January 1, 1970).

    The default is:

    ``` javascript
    moment.now = function () {
        return +new Date();
    }
    ```

    This will be used when calling `moment()`, and the current date used when tokens are omitted from `format()`. In general, any method that needs the current time uses this under the hood.
- name: moment.parseZone()
  id: index#/parsing/parse-zone/
  summary: Moment's string parsing functions like moment(string) and moment.utc(string) accept offset information if provided, but convert the resulting Moment object to local or UTC time
  description: |-
    ### parseZone 2.3.0+

    ``` javascript
    moment.parseZone()
    moment.parseZone(String)
    moment.parseZone(String, String)
    moment.parseZone(String, [String])
    moment.parseZone(String, String, Boolean)
    moment.parseZone(String, String, String, Boolean)
    ```

    Moment's string parsing functions like `moment(string)` and `moment.utc(string)` accept offset information if provided, but convert the resulting Moment object to local or UTC time. In contrast, `moment.parseZone()` parses the string but keeps the resulting Moment object in a fixed-offset timezone with the provided offset in the string.

    ``` javascript
    moment.parseZone("2013-01-01T00:00:00-13:00").utcOffset(); // -780 ("-13:00" in total minutes)
    moment.parseZone('2013 01 01 05 -13:00', 'YYYY MM DD HH ZZ').utcOffset(); // -780  ("-13:00" in total minutes)
    moment.parseZone('2013-01-01-13:00', ['DD MM YYYY ZZ', 'YYYY MM DD ZZ']).utcOffset(); // -780  ("-13:00" in total minutes);
    ```

    It also allows you to pass locale and strictness arguments.

    ``` javascript
    moment.parseZone("2013 01 01 -13:00", 'YYYY MM DD ZZ', true).utcOffset(); // -780  ("-13:00" in total minutes)
    moment.parseZone("2013-01-01-13:00", 'YYYY MM DD ZZ', true).utcOffset(); // NaN (doesn't pass the strictness check)
    moment.parseZone("2013 01 01 -13:00", 'YYYY MM DD ZZ', 'fr', true).utcOffset(); // -780 (with locale and strictness argument)
    moment.parseZone("2013 01 01 -13:00", ['DD MM YYYY ZZ', 'YYYY MM DD ZZ'], 'fr', true).utcOffset(); // -780 (with locale and strictness argument alongside an array of formats)
    ```

    `moment.parseZone` is equivalent to parsing the string and using `moment#utcOffset` to parse the zone.

    ``` javascript
    var s = "2013-01-01T00:00:00-13:00";
    moment(s).utcOffset(s);
    ```
- name: moment.relativeTimeRounding()
  id: index#/customization/relative-time-rounding/
  summary: duration.humanize rounds a possibly double value before supplying it to the relativeTime format string specified in the locale
  description: |-
    ### Relative Time Rounding 2.14.0+

    ``` javascript
    moment.relativeTimeRounding();  // getter
    moment.relativeTimeRounding(fn);  // setter
    ```

    `duration.humanize` rounds a possibly double value before supplying it to the relativeTime format string specified in the locale. To control the rounding you can use `moment.relativeTimeRounding`.

    ``` javascript
    var roundingDefault = moment.relativeTimeRounding();

    // Round relative time evaluation down
    moment.relativeTimeRounding(Math.floor);

    moment.relativeTimeThreshold('s', 60);
    moment.relativeTimeThreshold('m', 60);
    moment.relativeTimeThreshold('h', 24);
    moment.relativeTimeThreshold('d', 7);
    moment.relativeTimeThreshold('w', 4);
    moment.relativeTimeThreshold('M', 12);

    var a = moment();
    a.subtract({hours: 23, minutes: 59, seconds: 59});
    a.toNow();  // == 'in 23 hours'  'Round down towards the nearest hour'

    // back to default
    moment.relativeTimeRounding(roundingDefault);
    ```

    You can even choose to do no rounding at all:

    ``` javascript
    var retainValue = function (value) {
        return value;
    };
    moment.relativeTimeRounding(retainValue);

    var a = moment();
    a.subtract({hours: 39});
    a.toNow(); // == 'in 1.625 days', 'Round down towards the nearest year'
    ```
- name: moment.relativeTimeThreshold()
  id: index#/customization/relative-time-threshold/
  summary: duration.humanize has thresholds which define when a unit is considered a minute, an hour and so on
  description: |-
    ### Relative Time Thresholds 2.7.0+

    ``` javascript
    moment.relativeTimeThreshold(unit);  // getter
    moment.relativeTimeThreshold(unit, limit);  // setter
    ```

    `duration.humanize` has thresholds which define when a unit is considered a minute, an hour and so on. For example, by default more than 45 seconds is considered a minute, more than 22 hours is considered a day and so on. To change those cutoffs use `moment.relativeTimeThreshold(unit, limit)` where unit is one of `ss`, `s`, `m`, `h`, `d`, `w`, `M`.

    |      |               |                                                                                                                                        |
    |------|---------------|----------------------------------------------------------------------------------------------------------------------------------------|
    | unit | meaning       | usage                                                                                                                                  |
    | ss   | a few seconds | least number of seconds to be counted in seconds, minus 1. Must be set after setting the \`s\` unit or without setting the \`s\` unit. |
    | s    | seconds       | least number of seconds to be considered a minute.                                                                                     |
    | m    | minutes       | least number of minutes to be considered an hour.                                                                                      |
    | h    | hours         | least number of hours to be considered a day.                                                                                          |
    | d    | days          | least number of days to be considered a week.                                                                                          |
    | w    | weeks         | least number of weeks to be considered a month. Not used by default.                                                                   |
    | M    | months        | least number of months to be considered a year.                                                                                        |

    ``` javascript
      // Retrieve existing thresholds
      moment.relativeTimeThreshold('ss'); // 44
      moment.relativeTimeThreshold('s');  // 45
      moment.relativeTimeThreshold('m');  // 45
      moment.relativeTimeThreshold('h');  // 22
      moment.relativeTimeThreshold('d');  // 26
      moment.relativeTimeThreshold('w');  // null (disabled)
      moment.relativeTimeThreshold('M');  // 11

      // Set new thresholds
      moment.relativeTimeThreshold('s', 40);
      moment.relativeTimeThreshold('ss', 3);
      moment.relativeTimeThreshold('m', 40);
      moment.relativeTimeThreshold('h', 20);
      moment.relativeTimeThreshold('d', 25);
      moment.relativeTimeThreshold('w', 4);  // enables weeks
      moment.relativeTimeThreshold('M', 10);
    ```

    **Note:** Week unit was added in **2.25.0**. By default it is not used (set to null), but you can set it to non-null value, and also (optionally) set `d` lower, so it transitions from days to weeks earlier.

    **Note:** Retrieving thresholds was added in **2.8.1**.

    **Note:** Retrieving and setting `ss` threshold was added in **2.18.0**.
- name: moment.unix()
  id: index#/parsing/unix-timestamp/
  summary: To create a moment from a Unix timestamp (seconds since the Unix Epoch), use moment.unix(Number)
  description: |-
    ### Unix Timestamp (seconds) 1.6.0+

    ``` javascript
    moment.unix(Number)
    ```

    To create a moment from a Unix timestamp (*seconds* since the Unix Epoch), use `moment.unix(Number)`.

    ``` javascript
    var day = moment.unix(1318781876);
    ```

    This is implemented as `moment(timestamp * 1000)`, so partial seconds in the input timestamp are included.

    ``` javascript
    var day = moment.unix(1318781876.721);
    ```

    **Note:** Despite Unix timestamps being UTC-based, this function creates a moment object in *local* mode. If you need UTC, then subsequently call `.utc()`, as in:

    ``` javascript
    var day = moment.unix(1318781876).utc();
    ```
- name: moment.utc()
  id: index#/parsing/utc/
  summary: By default, moment parses and displays in local time
  description: |-
    ### UTC 1.5.0+

    ``` javascript
    moment.utc();
    moment.utc(Number);
    moment.utc(Number[]);
    moment.utc(String);
    moment.utc(String, String);
    moment.utc(String, String[]);
    moment.utc(String, String, String);
    moment.utc(String, String, String[]);
    moment.utc(String, String, Boolean);
    moment.utc(String, String, String, Boolean);
    moment.utc(Moment);
    moment.utc(Date);
    ```

    By default, moment parses and displays in local time.

    If you want to parse or display a moment in UTC, you can use `moment.utc()` instead of `moment()`.

    This brings us to an interesting feature of Moment.js. UTC mode.

    While in UTC mode, all display methods will display in UTC time instead of local time.

    ``` javascript
    moment().format();     // 2013-02-04T10:35:24-08:00
    moment.utc().format(); // 2013-02-04T18:35:24+00:00
    ```

    Additionally, while in UTC mode, all getters and setters will internally use the `Date#getUTC*` and `Date#setUTC*` methods instead of the `Date#get*` and `Date#set*` methods.

    ``` javascript
    moment.utc().seconds(30).valueOf() === new Date().setUTCSeconds(30);
    moment.utc().seconds()   === new Date().getUTCSeconds();
    ```

    It is important to note that though the displays differ above, they are both the same moment in time.

    ``` javascript
    var a = moment();
    var b = moment.utc();
    a.format();  // 2013-02-04T10:35:24-08:00
    b.format();  // 2013-02-04T18:35:24+00:00
    a.valueOf(); // 1360002924000
    b.valueOf(); // 1360002924000
    ```

    Any moment created with `moment.utc()` will be in UTC mode, and any moment created with `moment()` will not.

    To switch from UTC to local time, you can use [moment#utc](#/manipulating/utc/) or [moment#local](#/manipulating/local/).

    ``` javascript
    var a = moment.utc([2011, 0, 1, 8]);
    a.hours(); // 8 UTC
    a.local();
    a.hours(); // 0 PST
    ```
- name: Multiple Formats
  id: guides/index#/parsing/multiple-formats/
  summary: Moment's parser supports specifying multiple possible formats for a date string
  belongs_to: Guides
  description: "### Multiple Formats\n\nMoment's parser supports specifying multiple possible formats for a date string. This can be extremely useful for situations where a date may be coming from multiple data sources.  \nJust pass the formats as an array:\n\n``` javascript\nmoment('12 March, 2016', ['DDMMMMY', 'MMMMDDY']).format()\n\"2016-03-12T00:00:00-06:00\"\nmoment('March 12, 2016', ['DDMMMMY', 'MMMMDDY']).format()\n\"2016-03-12T00:00:00-06:00\"\n```\n\nIn order for this functionality to work properly, moment must parse every format provided. Because of this, the more formats that are used, the longer that parsing takes.  \nMoment's heuristic for determining which format to use is as follows:\n\n- Prefer formats resulting in [valid](#/parsing/is-valid/) dates over invalid ones.\n- Prefer formats that parse more of the string than less and use more of the format than less, i.e. prefer stricter parsing.\n- Prefer formats earlier in the array than later.\n\n## Warnings and Errors\n\nThere are several places where Moment.js displays deprecation warnings about functionality that will be removed in the future. Work-arounds are outlined here."
- name: Mutability
  id: guides/index#/lib-concepts/mutability/
  summary: The moment object in Moment.js is mutable
  belongs_to: Guides
  description: "### Mutability 1.0.0+\n\nThe moment object in Moment.js is mutable. This means that operations like add, subtract, or set change the original moment object.  \nWhen first using Moment.js many developers are confused by scenarios like this:\n\n``` javascript\nvar a = moment('2016-01-01'); \nvar b = a.add(1, 'week'); \na.format();\n\"2016-01-08T00:00:00-06:00\"\n```\n\nAs you can see, adding one week mutated `a`. To avoid situations like that, clone the moment before performing date math:\n\n``` javascript\nvar a = moment('2016-01-01'); \nvar b = a.clone().add(1, 'week'); \na.format();\n\"2016-01-01T00:00:00-06:00\"\n```"
- name: Node.js
  id: index#/use-it/node-js/
  summary: 'Note: In 2.4.0, the globally exported moment object was deprecated'
  description: "### Node.js\n\n``` javascript\nnpm install moment\n```\n\n``` javascript\nvar moment = require('moment'); // require\nmoment().format(); \n```\n\nOr in ES6 syntax:\n\n``` javascript\nimport moment from 'moment';\nmoment().format();\n```\n\n**Note:** if you want to work with a particular variation of moment timezone, for example using only data from 2012-2022, you will need to import it from the `builds` directory like so:\n\n``` javascript\nimport moment from 'moment-timezone/builds/moment-timezone-with-data-2012-2022';\n```\n\n**Note:** In **2.4.0**, the globally exported moment object was **deprecated**. It will be removed in next major release."
- name: NuGet
  id: index#/use-it/nuget/
  summary: null
  description: |-
    ### NuGet

    [NuGet](https://www.nuget.org/) / [Moment.js](https://www.nuget.org/packages/Moment.js/)

    ``` javascript
    Install-Package Moment.js
    ```
- name: Other
  id: index#/use-it/other/
  summary: To use under Java/Rhino, see these instructions
  description: |-
    ### Other

    To use under **Java/Rhino**, see [these instructions](https://gist.github.com/UnquietCode/5614860).

    To use in **Demandware**, see [these instructions](https://github.com/moment/moment/issues/1034).
- name: Parent Locale Undefined
  id: guides/index#/warnings/parent-locale/
  summary: Warning removed since 2.16.0
  belongs_to: Guides
  description: |-
    ### Parent Locale Undefined

    Warning removed since **2.16.0**.

    A locale can be defined with a parent before the parent itself is defined or loaded. If the parent doesn't exist or can't be lazy loaded when the moment is created, the parent will default to the global locale.
- name: 'Parse: Array'
  id: index#/parsing/array/
  summary: Any value past the year is optional, and will default to the lowest possible number
  description: |-
    ### Array 1.0.0+

    ``` javascript
    moment(Number[]);
    ```

    You can create a moment with an array of numbers that mirror the parameters passed to [new Date()](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date)

    `[year, month, day, hour, minute, second, millisecond]`

    ``` javascript
    moment([2010, 1, 14, 15, 25, 50, 125]); // February 14th, 3:25:50.125 PM
    ```

    Any value past the year is optional, and will default to the lowest possible number.

    ``` javascript
    moment([2010]);        // January 1st
    moment([2010, 6]);     // July 1st
    moment([2010, 6, 10]); // July 10th
    ```

    Construction with an array will create a date in the current time zone. To create a date from an array at UTC, use `moment.utc(Number[])`.

    ``` javascript
    moment.utc([2010, 1, 14, 15, 25, 50, 125]);
    ```

    **Note:** Because this mirrors the native `Date` parameters, months, hours, minutes, seconds, and milliseconds are all zero indexed. Years and days of the month are 1 indexed.

    This is often the cause of frustration, especially with months, so take note!

    If the date represented by the array does not exist, `moment#isValid` will return false.

    ``` javascript
    moment([2010, 12]).isValid();     // false (not a real month)
    moment([2010, 10, 31]).isValid(); // false (not a real day)
    moment([2010, 1, 29]).isValid();  // false (not a leap year)
    ```
- name: 'Parse: ASP.NET JSON Date'
  id: index#/parsing/asp-net-json-date/
  summary: If a string that matches this format is passed in, it will be parsed correctly
  description: |-
    ### ASP.NET JSON Date 1.3.0+

    ``` javascript
    moment(String);
    ```

    Microsoft Web API returns JSON dates in proper ISO-8601 format by default, but older ASP.NET technologies may return dates in JSON as `/Date(1198908717056)/` or `/Date(1198908717056-0700)/`

    If a string that matches this format is passed in, it will be parsed correctly.

    ``` javascript
    moment("/Date(1198908717056-0700)/"); // 2007-12-28T23:11:57.056-07:00
    ```
- name: 'Parse: Date'
  id: index#/parsing/date/
  summary: You can create a Moment with a pre-existing native Javascript Date object
  description: |-
    ### Date 1.0.0+

    ``` javascript
    moment(Date);
    ```

    You can create a `Moment` with a pre-existing native Javascript `Date` object.

    ``` javascript
    var day = new Date(2011, 9, 16);
    var dayWrapper = moment(day);
    ```

    This clones the `Date` object; further changes to the `Date` won't affect the `Moment`, and vice-versa.
- name: 'Parse: Defaults'
  id: index#/parsing/defaults/
  summary: You can create a moment object specifying only some of the units, and the rest will be defaulted to the current day, month or year, or 0 for hours, minutes, seconds and milliseconds
  description: |-
    ### Defaults 2.2.1+

    ``` javascript
    moment("15", "hh")
    ```

    You can create a moment object specifying only some of the units, and the rest will be defaulted to the current day, month or year, or 0 for hours, minutes, seconds and milliseconds.

    Defaulting to now, when nothing is passed:

    ``` javascript
    moment();  // current date and time
    ```

    Defaulting to today, when only hours, minutes, seconds and milliseconds are passed:

    ``` javascript
    moment(5, "HH");  // today, 5:00:00.000
    moment({hour: 5});  // today, 5:00:00.000
    moment({hour: 5, minute: 10});  // today, 5:10.00.000
    moment({hour: 5, minute: 10, seconds: 20});  // today, 5:10.20.000
    moment({hour: 5, minute: 10, seconds: 20, milliseconds: 300});  // today, 5:10.20.300
    ```

    Defaulting to this month and year, when only days and smaller units are passed:

    ``` javascript
    moment(5, "DD");  // this month, 5th day-of-month
    moment("4 05:06:07", "DD hh:mm:ss");  // this month, 4th day-of-month, 05:06:07.000
    ```

    Defaulting to this year, if year is not specified:

    ``` javascript
    moment(3, "MM");  // this year, 3rd month (March)
    moment("Apr 4 05:06:07", "MMM DD hh:mm:ss");  // this year, 4th April, 05:06:07.000
    ```

    ## Get + Set

    Moment.js uses overloaded getters and setters. You may be familiar with this pattern from its use in jQuery.

    Calling these methods without parameters acts as a getter, and calling them with a parameter acts as a setter.

    These map to the corresponding function on the native `Date` object.

    ``` javascript
    moment().seconds(30).valueOf() === new Date().setSeconds(30);
    moment().seconds()   === new Date().getSeconds();
    ```

    If you are in [UTC mode](#/manipulating/utc/), they will map to the UTC equivalent.

    ``` javascript
    moment.utc().seconds(30).valueOf() === new Date().setUTCSeconds(30);
    moment.utc().seconds()   === new Date().getUTCSeconds();
    ```

    For convenience, both singular and plural method names exist as of version **2.0.0**.

    **Note:** All of these methods mutate the original moment when used as setters.

    **Note:** From **2.19.0** passing `NaN` to any setter is a no-op. Before **2.19.0** it was invalidating the moment in a wrong way.
- name: 'Parse: Moment Clone'
  id: index#/parsing/moment-clone/
  summary: All moments are mutable
  description: |-
    ### Moment Clone 1.2.0+

    ``` javascript
    moment(Moment);
    ```

    All moments are mutable. If you want a clone of a moment, you can do so implicitly or explicitly.

    Calling `moment()` on a moment will clone it.

    ``` javascript
    var a = moment([2012]);
    var b = moment(a);
    a.year(2000);
    b.year(); // 2012
    ```

    Additionally, you can call `moment#clone` to clone a moment.

    ``` javascript
    var a = moment([2012]);
    var b = a.clone();
    a.year(2000);
    b.year(); // 2012
    ```
- name: 'Parse: Now'
  id: index#/parsing/now/
  summary: To get the current date and time, just call moment() with no parameters
  description: |-
    ### Now 1.0.0+

    ``` javascript
    moment();
    moment(undefined);
    // From 2.14.0 onward, also supported
    moment([]);
    moment({});
    ```

    To get the current date and time, just call `moment()` with no parameters.

    ``` javascript
    var now = moment();
    ```

    This is essentially the same as calling `moment(new Date())`.

    **Note:** From version **2.14.0**, `moment([])` and `moment({})` also return now. They used to default to start-of-today before 2.14.0, but that was arbitrary so it was changed.

    **Note:** Function parameters default to `undefined` when not passed in. Moment treats `moment(undefined)` as `moment()`.

    **Note:** Moments are created at evaluation time, so `moment().diff(moment())` may not always return 0. See [this GitHub issue](https://github.com/moment/moment/issues/5195) for more details.
- name: 'Parse: Object'
  id: index#/parsing/object/
  summary: You can create a moment by specifying some of the units in an object
  description: |-
    ### Object 2.2.1+

    ``` javascript
    moment({unit: value, ...});
    ```

    ``` javascript
    moment({ hour:15, minute:10 });
    moment({ y    :2010, M     :3, d   :5, h    :15, m      :10, s      :3, ms          :123});
    moment({ year :2010, month :3, day :5, hour :15, minute :10, second :3, millisecond :123});
    moment({ years:2010, months:3, days:5, hours:15, minutes:10, seconds:3, milliseconds:123});
    moment({ years:2010, months:3, date:5, hours:15, minutes:10, seconds:3, milliseconds:123});
    moment({ years:'2010', months:'3', date:'5', hours:'15', minutes:'10', seconds:'3', milliseconds:'123'});  // from 2.11.0
    ```

    You can create a moment by specifying some of the units in an object.

    Omitted units default to 0 or the current date, month, and year.

    `day` and `date` key both mean day-of-the-month.

    `date` was added in **2.8.4**.

    String values (as shown on the last line) are supported from version **2.11.0**.

    Note that like `moment(Array)` and `new Date(year, month, date)`, months are 0 indexed.
- name: 'Parse: Special Formats'
  id: index#/parsing/special-formats/
  summary: ISO-8601 is a standard for time and duration display
  description: |-
    ### Special Formats 2.7.0+

    ``` javascript
    moment(String, moment.CUSTOM_FORMAT, [String], [Boolean]);
    moment(String, moment.HTML5_FMT.DATETIME_LOCAL, [String], [Boolean]); // from 2.20.0
    moment(String, [..., moment.ISO_8601, ...], [String], [Boolean]);
    ```

    [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) is a standard for time and duration display. Moment already supports parsing iso-8601 strings, but this can be specified explicitly in the format/list of formats when constructing a moment.

    To specify iso-8601 parsing use `moment.ISO_8601` constant.

    ``` javascript
    moment("2010-01-01T05:06:07", moment.ISO_8601);
    moment("2010-01-01T05:06:07", ["YYYY", moment.ISO_8601]);
    ```

    As of version **2.20.0**, the following HTML5 formats are available as constants in the `moment` object's `HTML5_FMT` property (`moment.HTML5_FMT.*`):

    | Constant                 | Format                    | Example                 | Input Type                                     |
    |--------------------------|---------------------------|-------------------------|------------------------------------------------|
    | `DATETIME_LOCAL`         | `YYYY-MM-DDTHH:mm`        | 2017-12-14T16:34        | `<input type="datetime-local" />`              |
    | `DATETIME_LOCAL_SECONDS` | `YYYY-MM-DDTHH:mm:ss`     | 2017-12-14T16:34:10     | `<input type="datetime-local" step="1" />`     |
    | `DATETIME_LOCAL_MS`      | `YYYY-MM-DDTHH:mm:ss.SSS` | 2017-12-14T16:34:10.234 | `<input type="datetime-local" step="0.001" />` |
    | `DATE`                   | `YYYY-MM-DD`              | 2017-12-14              | `<input type="date" />`                        |
    | `TIME`                   | `HH:mm`                   | 16:34                   | `<input type="time" />`                        |
    | `TIME_SECONDS`           | `HH:mm:ss`                | 16:34:10                | `<input type="time" step="1" />`               |
    | `TIME_MS`                | `HH:mm:ss.SSS`            | 16:34:10.234            | `<input type="time" step="0.001" />`           |
    | `WEEK`                   | `GGGG-[W]WW`              | 2017-W50                | `<input type="week" />`                        |
    | `MONTH`                  | `YYYY-MM`                 | 2017-12                 | `<input type="month" />`                       |
- name: 'Parse: String'
  id: index#/parsing/string/
  summary: When creating a moment from a string, we first check if the string matches known ISO 8601 formats, we then check if the string matches the RFC 2822 Date time format before dropping to the fall back of new Date(string) if a known format is not found
  description: |-
    ### String 1.0.0+

    ``` javascript
    moment(String);
    ```

    When creating a moment from a string, we first check if the string matches known [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formats, we then check if the string matches the [RFC 2822 Date time](https://tools.ietf.org/html/rfc2822#section-3.3) format before dropping to the fall back of `new Date(string)` if a known format is not found.

    ``` javascript
    var day = moment("1995-12-25");
    ```

    **Warning:** Browser support for parsing strings [is inconsistent](http://dygraphs.com/date-formats.html). Because there is no specification on which formats should be supported, what works in some browsers will not work in other browsers.

    For consistent results parsing anything other than ISO 8601 strings, you should use [String + Format](#/parsing/string-format/).

    #### Supported ISO 8601 strings

    An ISO 8601 string requires a date part.

        2013-02-08  # A calendar date part
        2013-02     # A month date part
        2013-W06-5  # A week date part
        2013-039    # An ordinal date part

        20130208    # Basic (short) full date
        201303      # Basic (short) year+month
        2013        # Basic (short) year only
        2013W065    # Basic (short) week, weekday
        2013W06     # Basic (short) week only
        2013050     # Basic (short) ordinal date (year + day-of-year)

    A time part can also be included, separated from the date part by a space or an uppercase T.

        2013-02-08T09            # An hour time part separated by a T
        2013-02-08 09            # An hour time part separated by a space
        2013-02-08 09:30         # An hour and minute time part
        2013-02-08 09:30:26      # An hour, minute, and second time part
        2013-02-08 09:30:26.123  # An hour, minute, second, and millisecond time part
        2013-02-08 24:00:00.000  # hour 24, minute, second, millisecond equal 0 means next day at midnight

        20130208T080910,123      # Short date and time up to ms, separated by comma
        20130208T080910.123      # Short date and time up to ms
        20130208T080910          # Short date and time up to seconds
        20130208T0809            # Short date and time up to minutes
        20130208T08              # Short date and time, hours only

    Any of the date parts can have a time part.

        2013-02-08 09  # A calendar date part and hour time part
        2013-W06-5 09  # A week date part and hour time part
        2013-039 09    # An ordinal date part and hour time part

    If a time part is included, an offset from UTC can also be included as `+-HH:mm`, `+-HHmm`, `+-HH` or `Z`.

        2013-02-08 09+07:00            # +-HH:mm
        2013-02-08 09-0100             # +-HHmm
        2013-02-08 09Z                 # Z
        2013-02-08 09:30:26.123+07:00  # +-HH:mm
        2013-02-08 09:30:26.123+07     # +-HH

    **Note:** Support for the week and ordinal formats was added in version **2.3.0**.

    If a string does not match any of the above formats and is not able to be parsed with `Date.parse`, `moment#isValid` will return false.

    ``` javascript
    moment("not a real date").isValid(); // false
    ```

    #### The RFC 2822 date time format

    Before parsing a RFC 2822 date time the string is cleansed to remove any comments and/or newline characters. The additional characters are legal in the format but add nothing to creating a valid moment instance.

    After cleansing, the string is validated in the following space-separated sections, all using the English language:

        6 Mar 17 21:22 UT
        6 Mar 17 21:22:23 UT
        6 Mar 2017 21:22:23 GMT
        06 Mar 2017 21:22:23 Z
        Mon 06 Mar 2017 21:22:23 z
        Mon, 06 Mar 2017 21:22:23 +0000

    1.  Day of Week in three letters, followed by an optional comma. (optional)
    2.  Day of Month (1 or 2 digit), followed by a three-letter month and 2 or 4 digit year
    3.  Two-digit hours and minutes separated by a colon (:), followed optionally by another colon and seconds in 2-digits
    4.  Timezone or offset in one of the following formats:
    5.  UT : +0000
    6.  GMT : +0000
    7.  EST \| CST \| MST \| PST \| EDT \| CDT \| MDT \| PDT : US time zones\*
    8.  A - I \| K - Z : Military time zones\*
    9.  Time offset +/-9999

    \[\*\] See [section 4.3](https://tools.ietf.org/html/rfc2822#section-4.3) of the specification for details.

    The parser also confirms that the day-of-week (when included) is consistent with the date.
- name: 'Parse: String + Format'
  id: index#/parsing/string-format/
  summary: If you know the format of an input string, you can use that to parse a moment
  description: |-
    ### String + Format 1.0.0+

    ``` javascript
    moment(String, String);
    moment(String, String, String);
    moment(String, String, String[]);
    moment(String, String, Boolean);
    moment(String, String, String, Boolean);
    ```

    If you know the format of an input string, you can use that to parse a moment.

    ``` javascript
    moment("12-25-1995", "MM-DD-YYYY");
    ```

    The parser ignores non-alphanumeric characters by default, so both of the following will return the same thing.

    ``` javascript
    moment("12-25-1995", "MM-DD-YYYY");
    moment("12/25/1995", "MM-DD-YYYY");
    ```

    You may get unexpected results when parsing both date and time. The below example may not parse as you expect:

    ``` javascript
    moment('24/12/2019 09:15:00', "DD MM YYYY hh:mm:ss");
    ```

    You can use strict mode, which will identify the parsing error and set the Moment object as invalid:

    ``` javascript
    moment('24/12/2019 09:15:00', "DD MM YYYY hh:mm:ss", true);
    ```

    The parsing tokens are similar to the formatting tokens used in `moment#format`.

    #### Year, month, and day tokens

    *Tokens are case-sensitive.*

    | Input      | Example          | Description                                                          |
    |------------|------------------|----------------------------------------------------------------------|
    | `YYYY`     | `2014`           | 4 or 2 digit year. Note: Only 4 digit can be parsed on `strict` mode |
    | `YY`       | `14`             | 2 digit year                                                         |
    | `Y`        | `-25`            | Year with any number of digits and sign                              |
    | `Q`        | `1..4`           | Quarter of year. Sets month to first month in quarter.               |
    | `M MM`     | `1..12`          | Month number                                                         |
    | `MMM MMMM` | `Jan..December`  | Month name in locale set by `moment.locale()`                        |
    | `D DD`     | `1..31`          | Day of month                                                         |
    | `Do`       | `1st..31st`      | Day of month with ordinal                                            |
    | `DDD DDDD` | `1..365`         | Day of year                                                          |
    | `X`        | `1410715640.579` | Unix timestamp                                                       |
    | `x`        | `1410715640579`  | Unix ms timestamp                                                    |

    `YYYY` from version **2.10.5** supports 2 digit years, and converts them to a year near 2000 (same as `YY`).

    `Y` was added in **2.11.1**. It will match any number, signed or unsigned. It is useful for years that are not 4 digits or are before the common era. It can be used for any year.

    #### Week year, week, and weekday tokens

    For these, the lowercase tokens use the locale aware week start days, and the uppercase tokens use the [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date) start days.

    *Tokens are case-sensitive.*

    | Input      | Example        | Description                                 |
    |------------|----------------|---------------------------------------------|
    | `gggg`     | `2014`         | Locale 4 digit week year                    |
    | `gg`       | `14`           | Locale 2 digit week year                    |
    | `w ww`     | `1..53`        | Locale week of year                         |
    | `e`        | `0..6`         | Locale day of week                          |
    | `ddd dddd` | `Mon...Sunday` | Day name in locale set by `moment.locale()` |
    | `GGGG`     | `2014`         | ISO 4 digit week year                       |
    | `GG`       | `14`           | ISO 2 digit week year                       |
    | `W WW`     | `1..53`        | ISO week of year                            |
    | `E`        | `1..7`         | ISO day of week                             |

    #### Locale aware formats

    Locale aware date and time formats are also available using `LT LTS L LL LLL LLLL`. They were added in version **2.2.1**, except `LTS` which was added **2.8.4**.

    *Tokens are case-sensitive.*

    | Input  | Example                              | Description                                       |
    |--------|--------------------------------------|---------------------------------------------------|
    | `L`    | `09/04/1986`                         | Date (in local format)                            |
    | `LL`   | `September 4 1986`                   | Month name, day of month, year                    |
    | `LLL`  | `September 4 1986 8:30 PM`           | Month name, day of month, year, time              |
    | `LLLL` | `Thursday, September 4 1986 8:30 PM` | Day of week, month name, day of month, year, time |
    | `LT`   | `8:30 PM`                            | Time (without seconds)                            |
    | `LTS`  | `8:30:00 PM`                         | Time (with seconds)                               |

    #### Hour, minute, second, millisecond, and offset tokens

    *Tokens are case-sensitive.*

    | Input                    | Example        | Description                                                                    |
    |--------------------------|----------------|--------------------------------------------------------------------------------|
    | `H HH`                   | `0..23`        | Hours (24 hour time)                                                           |
    | `h hh`                   | `1..12`        | Hours (12 hour time used with `a A`.)                                          |
    | `k kk`                   | `1..24`        | Hours (24 hour time from 1 to 24)                                              |
    | `a A`                    | `am pm`        | Post or ante meridiem (Note the one character `a p` are also considered valid) |
    | `m mm`                   | `0..59`        | Minutes                                                                        |
    | `s ss`                   | `0..59`        | Seconds                                                                        |
    | `S SS SSS ... SSSSSSSSS` | `0..999999999` | Fractional seconds                                                             |
    | `Z ZZ`                   | `+12:00`       | Offset from UTC as `+-HH:mm`, `+-HHmm`, or `Z`                                 |

    From version **2.10.5**: fractional second tokens length 4 up to 9 can parse any number of digits, but will only consider the top 3 (milliseconds). Use if you have the time printed with many fractional digits and want to consume the input.

    Note that the number of `S` characters provided is only relevant when parsing in strict mode. In standard mode, `S`, `SS`, `SSS`, `SSSS` are all equivalent, and interpreted as fractions of a second. For example, `.12` is always 120 milliseconds, passing `SS` will not cause it to be interpreted as 12 milliseconds.

    `Z ZZ` were added in version **1.2.0**.

    `S SS SSS` were added in version **1.6.0**.

    `X` was added in version **2.0.0**.

    `SSSSS ... SSSSSSSSS` were added in version **2.10.5**.

    `k kk` were added in version **2.13.0**.

    Unless you specify a time zone offset, parsing a string will create a date in the current time zone.

    ``` javascript
    moment("2010-10-20 4:30",       "YYYY-MM-DD HH:mm");   // parsed as 4:30 local time
    moment("2010-10-20 4:30 +0000", "YYYY-MM-DD HH:mm Z"); // parsed as 4:30 UTC
    ```

    #### Era Year related tokens

    *Tokens are case-sensitive.*

    | Input     | Examples      | Description     |
    |-----------|---------------|-----------------|
    | y .. yyyy | `5 +5 -500`   | Years           |
    | yo        | `5th 1st`     | Ordinal Years   |
    | N         | `AD`          | Abbr Era name   |
    | NN        | `AD`          | Abbr Era name   |
    | NNN       | `AD`          | Abbr Era name   |
    | NNNN      | `Anno Domini` | Full Era name   |
    | NNNNN     | `AD`          | Narrow Era name |

    Era support was added in **2.25.0**. The tokens/API are still in flux.

    #### Notes and gotchas

    If the moment that results from the parsed input does not exist, `moment#isValid` will return false.

    ``` javascript
    moment("2010 13",           "YYYY MM").isValid();     // false (not a real month)
    moment("2010 11 31",        "YYYY MM DD").isValid();  // false (not a real day)
    moment("2010 2 29",         "YYYY MM DD").isValid();  // false (not a leap year)
    moment("2010 notamonth 29", "YYYY MMM DD").isValid(); // false (not a real month name)
    ```

    As of version **2.0.0**, a locale key can be passed as the third parameter to `moment()` and `moment.utc()`.

    ``` javascript
    moment('2012 juillet', 'YYYY MMM', 'fr');
    moment('2012 July',    'YYYY MMM', 'en');
    moment('2012 July',    'YYYY MMM', ['qj', 'en']);
    ```

    Moment's parser is very forgiving, and this can lead to undesired/unexpected behavior.

    For example, the following behavior can be observed:

    ``` javascript
    moment('2016 is a date', 'YYYY-MM-DD').isValid() //true, 2016 was matched
    ```

    Previous to **2.13.0** the parser exhibited the following behavior. This has been corrected.

    ``` javascript
    moment('I am spartacus', 'h:hh A').isValid();     //true - the 'am' matches the 'A' flag.
    ```

    As of version **2.3.0**, you may specify a boolean for the last argument to make Moment use strict parsing. Strict parsing requires that the format and input match exactly, *including delimeters*.

    ``` javascript
    moment('It is 2012-05-25', 'YYYY-MM-DD').isValid();       // true
    moment('It is 2012-05-25', 'YYYY-MM-DD', true).isValid(); // false
    moment('2012-05-25',       'YYYY-MM-DD', true).isValid(); // true
    moment('2012.05.25',       'YYYY-MM-DD', true).isValid(); // false
    ```

    You can use both locale and strictness.

    ``` javascript
    moment('2012-10-14', 'YYYY-MM-DD', 'fr', true);
    ```

    Strict parsing is frequently the best parsing option. For more information about choosing strict vs forgiving parsing, see the [parsing guide.](https://momentjs.com/guides/#/parsing/)

    #### Parsing two digit years

    By default, two digit years above 68 are assumed to be in the 1900's and years 68 or below are assumed to be in the 2000's. This can be changed by replacing the `moment.parseTwoDigitYear` method. The only argument of this method is a string containing the two years input by the user, and should return the year as an integer.

    ``` javascript
    moment.parseTwoDigitYear = function(yearString) {
        return parseInt(yearString) + 2000;
    }
    ```

    #### Parsing glued hour and minutes

    From version **2.11.0** parsing `hmm`, `Hmm`, `hmmss` and `Hmmss` is supported:

    ``` javascript
    moment("123", "hmm").format("HH:mm") === "01:23"
    moment("1234", "hmm").format("HH:mm") === "12:34"
    ```
- name: 'Parse: String + Formats'
  id: index#/parsing/string-formats/
  summary: If you don't know the exact format of an input string, but know it could be one of many, you can use an array of formats
  description: |-
    ### String + Formats 1.0.0+

    ``` javascript
    moment(String, String[], String, Boolean);
    ```

    If you don't know the exact format of an input string, but know it could be one of many, you can use an array of formats.

    This is the same as [String + Format](#/parsing/string-format/), only it will try to match the input to multiple formats.

    ``` javascript
    moment("12-25-1995", ["MM-DD-YYYY", "YYYY-MM-DD"]);
    ```

    Starting in version **2.3.0**, Moment uses some simple heuristics to determine which format to use. In order:

    - Prefer formats resulting in [valid](#/parsing/is-valid/) dates over invalid ones.
    - Prefer formats that parse more of the string than less and use more of the format than less, i.e. prefer stricter parsing.
    - Prefer formats earlier in the array than later.

    ``` javascript
    moment("29-06-1995", ["MM-DD-YYYY", "DD-MM", "DD-MM-YYYY"]); // uses the last format
    moment("05-06-1995", ["MM-DD-YYYY", "DD-MM-YYYY"]);          // uses the first format
    ```

    You may also specify a locale and strictness argument. They work the same as the single format case.

    ``` javascript
    moment("29-06-1995", ["MM-DD-YYYY", "DD-MM-YYYY"], 'fr');       // uses 'fr' locale
    moment("29-06-1995", ["MM-DD-YYYY", "DD-MM-YYYY"], true);       // uses strict parsing
    moment("05-06-1995", ["MM-DD-YYYY", "DD-MM-YYYY"], 'fr', true); // uses 'fr' locale and strict parsing
    ```

    **Note:** Parsing multiple formats is considerably slower than parsing a single format. If you can avoid it, it is much faster to parse a single format.
- name: 'Parse: Unix Timestamp'
  id: index#/parsing/unix-timestamp-milliseconds/
  summary: Similar to new Date(Number), you can create a moment by passing an integer value representing the number of milliseconds since the Unix Epoch (Jan 1 1970 12AM UTC)
  description: |-
    ### Unix Timestamp (milliseconds) 1.0.0+

    ``` javascript
    moment(Number);
    ```

    Similar to `new Date(Number)`, you can create a moment by passing an integer value representing the number of *milliseconds* since the Unix Epoch (Jan 1 1970 12AM UTC).

    ``` javascript
    var day = moment(1318781876406);
    ```

    [Note: ECMAScript calls this a "Time Value"](https://www.ecma-international.org/ecma-262/6.0/#sec-time-values-and-time-range)
- name: Recommendations
  id: index#/-project-status/recommendations/
  summary: There are several great options to consider using instead of Moment
  description: |-
    ### Recommendations

    There are several great options to consider using instead of Moment.

    When choosing, consider that:

    - Some libraries are split into modules, plugins, or companion libraries.
    - Some libraries use the ECMAScript [`Intl`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl) API for locales, time zones, or both.
    - Some libraries still provide their own locale and time zone files like Moment and Moment-Timezone do.

    **Here are the alternatives we recommend:**

    ### Luxon

    Luxon can be thought of as the evolution of Moment. It is authored by [Isaac Cambron](https://github.com/icambron), a long-time contributor to Moment. Please read [*Why does Luxon exist?*](https://moment.github.io/luxon/docs/manual/why.html) and the [*For Moment users*](https://moment.github.io/luxon/docs/manual/moment.html) pages in the Luxon documentation.

    - Locales: `Intl` provided
    - Time Zones: `Intl` provided

    ### Day.js

    Day.js is designed to be a minimalist replacement for Moment.js, using a similar API. It is not a drop-in replacement, but if you are used to using Moment's API and want to get moving quickly, consider using Day.js.

    - Locales: Custom data files that can be individually imported
    - Time Zones: `Intl` provided, via a plugin

    ### date-fns

    Date-fns offers a series of functions for manipulating JavaScript [`Date`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date) objects. For more details, scroll to "Why date-fns?" on the date-fns home page.

    - Locales: Custom data files that can be individually imported
    - Time Zones: `Intl` provided, via a separate companion library

    ### js-Joda

    js-Joda is a JavaScript port of Java's [Three-Ten Backport](https://www.threeten.org/threetenbp/), which is the base for JSR-310 implementation of the Java SE 8 `java.time` package. If you are familiar with [`java.time`](https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html), [Joda-Time](https://www.joda.org/joda-time/), or [Noda Time](https://nodatime.org/), you will find js-Joda comparable.

    - Locales: Custom data files via add-on module
    - Time Zones: Custom data files via add-on module

    ### No Library

    JavaScript has always had a [`Date`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date) object, defined ECMAScript (ECMA-262) specification [here](https://www.ecma-international.org/ecma-262/11.0/index.html#sec-date-objects).

    When using `Date` objects, be aware of the following:

    - The `Date` object internally represents a Unix timestamp with millisecond precision. It offers functions that will convert to and from the system's local time zone, but it is *always* UTC internally. Unlike a `Moment` object, it *can not* be set to use another time zone; It has no concept of "mode".

    - Using [`Date.parse`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/parse), or [`new Date(<string>)`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Timestamp_string) has been problematic and implemented inconsistently in the past. The [current specification](https://www.ecma-international.org/ecma-262/11.0/index.html#sec-date-time-string-format) defines parsing a variation of ISO 8601 strings, where date-only forms (like `"2020-09-14"`) are parsed as UTC, instead of local time as they would be by ISO 8601. Even then, not all modern implementations have implemented this specification correctly (e.g., Safari). Other types of strings *may* work, but parsing them is *implementation specific* and can vary significantly - especially with older browsers. Depending on the implementation, and the components provided in the string, you may be surprised with the result. For these reasons, we agree with [MDN's statement](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Timestamp_string) that **parsing strings with the `Date` object is strongly discouraged**.

    Modern JavaScript environments will also implement the by [ECMA-402](https://www.ecma-international.org/ecma-402) specification, which provides the [`Intl`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl) object, and defines behavioral options of the `Date` object's `toLocaleString`, `toLocaleDateString`, and `toLocaleTimeString` functions.

    When using the `Intl` object, be aware of the following:

    - Not every environment will implement the full specification. In particular, Node.js environments require internationalization support provided by ICU. See [the Node.js documentation](https://nodejs.org/docs/latest-v12.x/api/intl.html) for further details.
    - The [ECMAScript Intl compatibility table (by kangax)](http://kangax.github.io/compat-table/esintl/) can be useful in determining which features are supported and which are not.
    - Most newer environments provide IANA time zone support via the `timeZone` option in the `Intl.DateTimeFormat` constructor (and in `Date.toLocaleString`, `Date.toLocaleDateString`, and `Date.toLocaleTimeString`). This option can be used to take the internal UTC-based timestamp of a `Date` object and get a *string* that has been converted to a named time zone. However, it *can not* be used to convert a `Date` object to a different time zone.

    If the `Date` and `Intl` objects meet your needs and you fully understand their limitations, then you might consider using them directly.
- name: Require.js
  id: index#/use-it/require-js/
  summary: We strongly recommend reading this if you plan to use moment with Require.js
  description: |-
    ### Require.js

    We strongly recommend reading [this](https://github.com/requirejs/requirejs/issues/1554#issuecomment-226269905) if you plan to use moment with Require.js. Also upgrade to **2.14.0** or above for best experience.

    As a start, you might have acquired moment through bower or node_modules or anything else that places moment.js together with a locales directory in a base folder. Then you should use a tool like [adapt-pkg-main](https://github.com/jrburke/adapt-pkg-main), or manually -- using [packages config](http://requirejs.org/docs/api.html#packages).

    ``` javascript
    requirejs.config({
      packages: [{
        name: 'moment',
        // This location is relative to baseUrl. Choose bower_components
        // or node_modules, depending on how moment was installed.
        location: '[bower_components|node_modules]/moment',
        main: 'moment'
      }]
    });
    ```

    With the above setup, you can require the core with `moment` and `de` locale with `moment/locale/de`.

    ``` javascript
    // only needing core
    define(['moment'], function (moment) {
        console.log(moment().format('LLLL'));  // 'Friday, June 24, 2016 1:42 AM'
    });

    // core with single locale
    define(['moment', 'moment/locale/de'], function (moment) {
        moment.locale('de');
        console.log(moment().format('LLLL')); // 'Freitag, 24. Juni 2016 01:42'
    });

    // core with all locales
    define(['moment/min/moment-with-locales'], function (moment) {
        moment.locale('de');
        console.log(moment().format('LLLL')); // 'Freitag, 24. Juni 2016 01:42'
    });

    // async load locale
    define(['require', 'moment'], function(require, moment) {
      // Inside some module after the locale is detected. This is the
      // case where the locale is not known before module load time.
      require(['moment/locale/de'], function(localeModule) {
        // here the locale is loaded, but not yet in use
        console.log(moment().format('LLLL'));  // 'Friday, June 24, 2016 1:42 AM'

        moment.locale('de');
        // Use moment now that the locale has been properly set.
        console.log(moment().format('LLLL')); // 'Freitag, 24. Juni 2016 01:42'
      })
    });
    ```

    For more complicated use cases please read [excellent explanation by @jrburke](https://github.com/requirejs/requirejs/issues/1554#issuecomment-226269905).

    Moment will still create a `moment` global, which is useful to plugins and other third-party code. If you wish to squash that global, use the `noGlobal` option on the module config.

    ``` javascript
    require.config({
        config: {
            moment: {
                noGlobal: true
            }
        }
    });
    ```

    If you don't specify `noGlobal` then the globally exported moment will print a deprecation warning. From next major release you'll have to export it yourself if you want that behavior.

    For version **2.5.x**, in case you use other plugins that rely on Moment but are not AMD-compatible you may need to add [`wrapShim: true`](https://github.com/jrburke/r.js/blob/b8a6982d2923ae8389355edaa50d2b7f8065a01a/build/example.build.js#L68-L78) to your r.js config.

    **Note:** To allow moment.js plugins to be loaded in requirejs environments, moment is created as a named module. Because of this, moment **must** be loaded exactly as as `"moment"`, using `paths` to determine the directory. Requiring moment with a path like `"vendor\moment"` will return `undefined`.

    **Note:** From version **2.9.0** moment exports itself as an anonymous module, so if you're using only the core (no locales / plugins), then you don't need config if you put it on a non-standard location.
- name: Strict Mode
  id: guides/index#/parsing/strict-mode/
  summary: Strict mode is the recommended mode for parsing dates
  belongs_to: Guides
  description: "### Strict Mode\n\nStrict mode is the recommended mode for parsing dates. You should always use strict mode if your code base will allow it.  \nMore than half of the parser issues seen on GitHub and Stack Overflow can be fixed by strict mode.\n\nIn a later release, the parser will default to using strict mode.\n\nStrict mode requires the input to the moment to exactly match the specified format, including separators. Strict mode is set by passing true as the third parameter to the moment function.\n\n``` javascript\nmoment('01/01/2016', 'MM/DD/YYYY', true).format()\n\"2016-01-01T00:00:00-06:00\"\nmoment('01/01/2016 some text', 'MM/DD/YYYY', true).format()\n\"Invalid date\"\n```\n\nSeparator matching:\n\n``` javascript\n//forgiving mode\nmoment('01-01-2016', 'MM/DD/YYYY', false).format()\n\"2016-01-01T00:00:00-06:00\"\n//strict mode\nmoment('01-01-2016', 'MM/DD/YYYY', true).format()\n\"Invalid date\"\n```\n\nScenarios fixed by strict mode:\n\n``` javascript\n//UUID matches YYYYDDD because it starts with 7 digits\nmoment('5917238b-33ff-f849-cd63-80f4c9b37d0c', moment.ISO_8601).format()\n\"5917-08-26T00:00:00-05:00\"\n//strict mode fails because trailing data exists\nmoment('5917238b-33ff-f849-cd63-80f4c9b37d0c', moment.ISO_8601, true).format()\n\"Invalid date\"\n```\n\n``` javascript\n//date has out of range value but is parsed anyways\nmoment('100110/09/2015', 'MM/DD/YYYY').format()\n\"2015-10-09T00:00:00-05:00\"\n//strict mode catches out of range issue\nmoment('100110/09/2015', 'MM/DD/YYYY', true).format()\n\"Invalid date\"\n```\n\n``` javascript\n//wrong date is parsed because non-strict mode ignores data after format\nmoment('2016-12-31 11:32 PM').format('LT')\n\"11:32 AM\"\n//trailing data is noticed\nmoment('2016-12-31 11:32 PM', moment.ISO_8601, true).format('LT')\n\"Invalid date\"\n```"
- name: System.js
  id: index#/use-it/system-js/
  summary: To load moment, place it in the path specified by your System.config in the baseURL configuration
  description: |-
    ### System.js

    To load moment, place it in the path specified by your System.config in the baseURL configuration. Then import it into your page.

    ``` html
    <script src="system.js"></script>
    <script>
      System.config({
        baseURL: '/app'
      });

      System.import('moment.js');
     </script>
    ```

    If you need moment to be loaded as global, you can do this with the meta configuration:

    ``` javascript
    System.config({
      meta: {
        'moment': { format: 'global' }
      }
    });
    ```

    Alternatively, to provide Moment as a global to only a specific dependency, you can do this:

    ``` javascript
    System.config({
      meta: {
        'path/to/global-file.js': {
          globals: {
            moment: 'moment'
          }
        }
      }
    });
    ```
- name: The Future
  id: index#/-project-status/future/
  summary: One day soon, we hope there won't be a strong need for date and time libraries in JavaScript at all
  description: |-
    ### The Future

    ## **Temporal** - Better dates and times in the JavaScript language!

    One day soon, we hope there won't be a strong need for date and time libraries in JavaScript at all. Instead, we will be able to use capabilities of the JavaScript language itself. Though some capabilities are here today with [`Date`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date) and [`Intl`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl), we know from experience and data that there is significant room for improvement.

    The effort to make better date and time APIs in the JavaScript language is being done via [The ECMA TC39 Temporal Proposal](https://tc39.es/proposal-temporal/docs/index.html). It is currently at Stage 3 of [the TC39 process](https://tc39.es/process-document/).

    `Temporal` will be a new global object that acts as a top-level namespace (like `Math`). It exposes many separate types of objects including `Temporal.Instant`, `Temporal.ZonedDateTime`, `Temporal.PlainDateTime`, `Temporal.PlainDate`, `Temporal.PlainTime`, `Temporal.TimeZone` and several others. The [Temporal Cookbook](https://tc39.es/proposal-temporal/docs/cookbook.html) shows many "recipes" with examples of how these objects can be used in different scenarios.

    You can try out Temporal today, via [a non-production polyfill](https://github.com/tc39/proposal-temporal/tree/main/polyfill). Please give it a try, but don't use it in production (yet)!

    Please provide feedback, and consider contributing to this effort - especially if you have experience using Moment or other date and time libraries!

    ## Using Moment

    Moment was designed to work both in the browser and in Node.js.

    All code should work in both of these environments, and all unit tests are run in both of these environments.

    Currently, the following browsers are used for the ci system: Chrome on Windows XP, IE 8, 9, and 10 on Windows 7, IE 11 on Windows 10, latest Firefox on Linux, and latest Safari on OSX 10.8 and 10.11.

    If you want to try the sample codes below, just open your browser's console and enter them.
- name: Time Zone vs Offset
  id: guides/index#/lib-concepts/timezone-offset/
  summary: Frequently, people are confused about the difference between time zones and UTC offsets
  belongs_to: Guides
  description: "### Time Zone vs Offset\n\nFrequently, people are confused about the difference between time zones and UTC offsets.\n\nA UTC offset is a value that represents how far a particular date and time is from UTC. It is expressed in the format HH:mm most of the time.\n\nA time zone is a geographical region where all people observe a legally mandated standard time.\n\nA time zone usually has more than one offset from UTC due to daylight saving time. Several time zones may have the same offset at some point during the year.  \nFor example, the time zones America/Chicago, America/Denver, and America/Belize all have an offset of -06:00 at varying times.  \nFor this reason, it is impossible to infer a time zone from just an offset value.\n\nThe Moment.js core library provides functionality related to adjusting times based on an offset value.  \nIt does not provide support for adjusting dates based on time zone data - this is provided by the Moment TimeZone library.\n\n[For an in depth description of this issue, see the Stack Overflow tag.](https://stackoverflow.com/tags/timezone/info)"
- name: Troubleshooting
  id: index#/use-it/troubleshooting/
  summary: If you are having any troubles, the first place to check is the guides
  description: |-
    ### Troubleshooting

    If you are having any troubles, the first place to check is the [guides](https://momentjs.com/guides).

    If you don't find what you are looking for there, try asking a question on [Stack Overflow](https://stackoverflow.com/questions/tagged/momentjs) with the `momentjs` tag.

    Note: More than half of the issues seen on Stack Overflow can be answered by [this blog post](https://maggiepint.com/2016/05/14/moment-js-shows-the-wrong-date/).

    You can also use the [GitHub issue tracker](https://github.com/moment/moment/issues) to find related issues or open a new issue.

    In addition, Moment has a [Gitter](https://gitter.im/moment/moment) where the internal team is frequently available.

    For general troubleshooting help, [Stack Overflow](https://stackoverflow.com/questions/tagged/momentjs) is the preferred forum. Moment's maintainers are very active on Stack Overflow, as are several other knowledgeable users. The fastest response will be there.

    ## Parse

    Instead of modifying the native `Date.prototype`, Moment.js creates a wrapper for the `Date` object. To get this wrapper object, simply call `moment()` with one of the supported input types.

    The `Moment` prototype is exposed through `moment.fn`. If you want to add your own functions, that is where you would put them.

    For ease of reference, any method on the `Moment.prototype` will be referenced in the docs as `moment#method`. So `Moment.prototype.format` == `moment.fn.format` == `moment#format`.

    **Please read:**

    - `moment(...)` is local mode. Ambiguous input (without offset) is assumed to be local time. Unambiguous input (with offset) is adjusted to local time.
    - `moment.utc(...)` is utc mode. Ambiguous input is assumed to be UTC. Unambiguous input is adjusted to UTC.
    - `moment.parseZone()` keep the input zone passed in. Ambiguous input is assumed to be UTC.
    - `moment.tz(...)` with the moment-timezone plugin can parse input in a specific time zone.

    Keep in mind that a time zone and a time zone offset are two different things. An offset of -08:00 doesn't necessarily mean you are in the US Pacific time zone.

    [See the Parsing Guide for additional information](https://momentjs.com/guides/#/parsing/).
- name: Typescript
  id: index#/use-it/typescript/
  summary: As of version 2.13.0, Moment includes a typescript definition file
  description: |-
    ### Typescript 2.13.0+

    As of version **2.13.0**, Moment includes a typescript definition file.

    Install via NPM

    ``` javascript
    npm install moment
    ```

    Import and use in your Typescript file

    ``` javascript
    const moment = require('moment');

    let now = moment().format('LLLL');
    ```

    **Note:** If you have trouble importing moment

    For *Typescript 2.x* try adding `"moduleResolution": "node"` in `compilerOptions` in your `tsconfig.json` file

    For *Typescript 1.x* try adding `"allowSyntheticDefaultImports": true` in `compilerOptions` in your `tsconfig.json` file and then use the syntax

    ``` javascript
    import moment from 'moment';
    ```

    **Locale Import**

    To use `moment.locale` you first need to import the language you are targeting.

    ``` javascript
    import * as moment from 'moment';
    import 'moment/locale/pt-br';

    console.log(moment.locale()); // en
    moment.locale('fr');
    console.log(moment.locale()); // fr
    moment.locale('pt-br');
    console.log(moment.locale()); // pt-br
    ```
- name: Webpack
  id: index#/use-it/webpack/
  summary: 'Note: By default, webpack bundles all Moment.js locales (in Moment.js 2.18.1, thatâs 160 minified KBs)'
  description: |-
    ### Webpack

    ``` javascript
    npm install moment
    ```

    ``` javascript
    var moment = require('moment');
    moment().format();
    ```

    **Note:** By default, webpack bundles *all* Moment.js locales (in Moment.js 2.18.1, thatâs 160 minified KBs). To strip unnecessary locales and bundle only the used ones, add [`moment-locales-webpack-plugin`](https://www.npmjs.com/package/moment-locales-webpack-plugin):

    ``` javascript
    // webpack.config.js
    const MomentLocalesPlugin = require('moment-locales-webpack-plugin');

    module.exports = {
        plugins: [
            // To strip all locales except âenâ
            new MomentLocalesPlugin(),

            // Or: To strip all locales except âenâ, âes-usâ and âruâ
            // (âenâ is built into Moment and canât be removed)
            new MomentLocalesPlugin({
                localesToKeep: ['es-us', 'ru'],
            }),
        ],
    };
    ```

    There are other resources to optimize Moment.js with webpack, [for example this one](https://github.com/jmblog/how-to-optimize-momentjs-with-webpack).
- name: Zone
  id: guides/index#/warnings/zone/
  summary: This deprecation was made for purposes of clarity
  belongs_to: Guides
  description: "### Zone\n\n``` javascript\nmoment().zone is deprecated, \nuse moment().utcOffset instead.\n```\n\nThis deprecation was made for purposes of clarity.\n\nThe result of `moment().zone()` is an integer that indicates the number of minutes that a given moment is offset from UTC, with the sign inverted (US moments result in a positive value).\n\nUsing `moment().zone(number)` to set the offset will set the offset on the date, also using an inverted sign.\n\nBecause a time zone is not the same thing as an offset, the name was changed to utcOffset. At that time the sign was corrected to reflect the actual direction of the UTC offset.\n\n``` javascript\nmoment().zone()\n360\n//is replaced by\nmoment().utcOffset()\n-360\n\nmoment().zone(420)\n//is replaced by \nmoment().utcOffset(-420)\n```\n\n[For more information on time zone vs offset, see the Time Zone vs Offset guide.](#/lib-concepts/timezone-offset/)\n\n[View original GitHub issue.](https://github.com/moment/moment/issues/1779)\n\n## External Resources\n\nThese resources are made by members of the date/time/time zone community.\n\n### Videos\n\n**[Date and Time Odds, Ends and Oddities](https://www.youtube.com/watch?v=ieIzNP6gKqU)**\n\n- YouTube, Maggie Pint, Moment.js core contributor\n\n**[Date and Time Fundamentals](https://www.pluralsight.com/courses/date-time-fundamentals)**\n\n- Pluralsight, Matt Johnson, Moment.js core contributor\n\n### Blogs\n\n**[Matt Johnson's Blog](http://codeofmatt.com/)**\n\n- Moment.js core contributor. Date and time concepts in programming.\n\n**[Maggie Pint's Blog](https://maggiepint.com/)**\n\n- Moment.js core contributor. Moment.js development progress and roadmaps. Moment.js library help.\n\n**[Lau Taarnskov's blog](http://www.creativedeletion.com/)**\n\n- Author - Elixir Calendar. Date and time programming concepts. Elixir date and time.\n\n**[Jon Skeet's blog](https://codeblog.jonskeet.uk/)**\n\n- Author - NodaTime. Stack Overflow \\#1 user. Date and time programming concepts.\n\n### Miscellaneous\n\n**[Stack Overflow TimeZone Tag Wiki](https://stackoverflow.com/tags/timezone/info)**\n\n**[Stack Overflow DateTime vs DateTimeOffset](https://stackoverflow.com/q/4331189)**\n\n**[IANA Time Zone Database](https://www.iana.org/time-zones)**\n\n- Main time zone database. This is where Moment TimeZone sources its data from.\n\nÂ© JS Foundation and other contributors  \nLicensed under the MIT License.  \n[https://momentjs.com/guides/](https://momentjs.com/guides/)"
