---
name: Falcon
slug: falcon~2.0
text_format: markdown
generator: src:devdocs
generator_command: src:devdocs
version: '2.0'
copyright: |-
  © 2019 by Falcon contributors
  Licensed under the Apache License, Version 2.0.
  https://falcon.readthedocs.io/en/2.0.0/index.html
homepage: https://falconframework.org/

---
- name: Cookies
  id: api/cookies
  summary: Cookies can be read from a request either via the get_cookie_values() method or the cookies attribute on the Request object
  description: "# Cookies\n\n## Getting Cookies\n\nCookies can be read from a request either via the [`get_cookie_values()`](request_and_response#falcon.Request.get_cookie_values \"falcon.Request.get_cookie_values\") method or the [`cookies`](request_and_response#falcon.Request.cookies \"falcon.Request.cookies\") attribute on the [`Request`](request_and_response#falcon.Request \"falcon.Request\") object. Generally speaking, the [`get_cookie_values()`](request_and_response#falcon.Request.get_cookie_values \"falcon.Request.get_cookie_values\") method should be used unless you need a collection of all the cookies in the request.\n\n``` python\nclass Resource(object):\n    def on_get(self, req, resp):\n\n        cookies = req.cookies\n\n        my_cookie_values = req.get_cookie_values('my_cookie')\n        if my_cookie_values:\n            # NOTE: If there are multiple values set for the cookie, you\n            # will need to choose how to handle the additional values.\n            v = my_cookie_values[0]\n\n            # ...\n```\n\n## Setting Cookies\n\nSetting cookies on a response may be done either via [`set_cookie()`](request_and_response#falcon.Response.set_cookie \"falcon.Response.set_cookie\") or [`append_header()`](request_and_response#falcon.Response.append_header \"falcon.Response.append_header\").\n\nOne of these methods should be used instead of [`set_header()`](request_and_response#falcon.Response.set_header \"falcon.Response.set_header\"). With [`set_header()`](request_and_response#falcon.Response.set_header \"falcon.Response.set_header\") you cannot set multiple headers with the same name (which is how multiple cookies are sent to the client).\n\nSimple example:\n\n``` python\nclass Resource(object):\n    def on_get(self, req, resp):\n\n        # Set the cookie 'my_cookie' to the value 'my cookie value'\n        resp.set_cookie('my_cookie', 'my cookie value')\n```\n\nYou can of course also set the domain, path and lifetime of the cookie.\n\n``` python\nclass Resource(object):\n    def on_get(self, req, resp):\n        # Set the maximum age of the cookie to 10 minutes (600 seconds)\n        # and the cookie's domain to 'example.com'\n        resp.set_cookie('my_cookie', 'my cookie value',\n                        max_age=600, domain='example.com')\n```\n\nYou can also instruct the client to remove a cookie with the [`unset_cookie()`](request_and_response#falcon.Response.unset_cookie \"falcon.Response.unset_cookie\") method:\n\n``` python\nclass Resource(object):\n    def on_get(self, req, resp):\n        resp.set_cookie('bad_cookie', ':(')\n\n        # Clear the bad cookie\n        resp.unset_cookie('bad_cookie')\n```\n\n## The Secure Attribute\n\nBy default, Falcon sets the `secure` attribute for cookies. This instructs the client to never transmit the cookie in the clear over HTTP, in order to protect any sensitive data that cookie might contain. If a cookie is set, and a subsequent request is made over HTTP (rather than HTTPS), the client will not include that cookie in the request.\n\nWarning\n\nFor this attribute to be effective, your web server or load balancer will need to enforce HTTPS when setting the cookie, as well as in all subsequent requests that require the cookie to be sent back from the client.\n\nWhen running your application in a development environment, you can disable this default behavior by setting [`secure_cookies_by_default`](api#falcon.ResponseOptions.secure_cookies_by_default \"falcon.ResponseOptions.secure_cookies_by_default\") to `False` via [`API.resp_options`](api#falcon.API.resp_options \"falcon.API.resp_options\"). This lets you test your app locally without having to set up TLS. You can make this option configurable to easily switch between development and production environments.\n\nSee also: [RFC 6265, Section 4.1.2.5](https://tools.ietf.org/html/rfc6265#section-4.1.2.5)\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/cookies.html](https://falcon.readthedocs.io/en/2.0.0/api/cookies.html)"
- name: Deploying Falcon on Linux with NGINX and uWSGI
  id: deploy/nginx-uwsgi
  summary: NGINX is a powerful web server and reverse proxy and uWSGI is a fast and highly-configurable WSGI application server
  description: "# Deploying Falcon on Linux with NGINX and uWSGI\n\nNGINX is a powerful web server and reverse proxy and uWSGI is a fast and highly-configurable WSGI application server. Together, NGINX and uWSGI create a one-two punch of speed and functionality which will suffice for most applications. In addition, this stack provides the building blocks for a horizontally-scalable and highly-available (HA) production environment and the configuration below is just a starting point.\n\nThis guide provides instructions for deploying to a Linux environment only. However, with a bit of effort you should be able to adapt this configuration to other operating systems, such as OpenBSD.\n\n## Running your Application as a Different User\n\nIt is best to execute the application as a different OS user than the one who owns the source code for your application. The application user should *NOT* have write access to your source. This mitigates the chance that someone could write a malicious Python file to your source directory through an upload endpoint you might define; when your application restarts, the malicious file is loaded and proceeds to cause any number of BadThings:sup:(tm) to happen.\n\n``` sh\n$ useradd myproject --create-home\n$ useradd myproject-runner --no-create-home\n```\n\nIt is helpful to switch to the project user (myproject) and use the home directory as the application environment.\n\nIf you are working on a remote server, switch to the myproject user and pull down the source code for your application.\n\n``` sh\n$ git clone git@github.com/myorg/myproject.git /home/myproject/src\n```\n\nNote\n\nYou could use a tarball, zip file, scp or any other means to get your source onto a server.\n\nNext, create a virtual environment which can be used to install your dependencies.\n\n``` sh\n# For Python 3\n$ python3 -m venv /home/myproject/venv\n\n# For Python 2\n$ virtualenv /home/myproject/venv\n```\n\nThen install your dependencies.\n\n``` sh\n$ /home/myproject/venv/bin/pip install -r /home/myproject/src/requirements.txt\n$ /home/myproject/venv/bin/pip install -e /home/myproject/src\n$ /home/myproject/venv/bin/pip install uwsgi\n```\n\nNote\n\nThe exact commands for creating a virtual environment might differ based on the Python version you are using and your operating system. At the end of the day the application needs a virtualenv in /home/myproject/venv with the project dependencies installed. Use the `pip` binary within the virtual environment by `source venv/bin/activate` or using the full path.\n\n## Preparing your Application for Service\n\nFor the purposes of this tutorial, we’ll assume that you have implemented a way to configure your application, such as with a `create_api()` function or a module-level script. This role of this function or script is to supply an instance of [`falcon.API`](../api/api#falcon.API \"falcon.API\"), which implements the standard WSGI callable interface.\n\nYou will need to expose the [`falcon.API`](../api/api#falcon.API \"falcon.API\") instance in some way so that uWSGI can find it. For this tutorial we recommend creating a `wsgi.py` file. Modify the logic of the following example file to properly configure your application. Ensure that you expose a variable called `application` which is assigned to your [`falcon.API`](../api/api#falcon.API \"falcon.API\") instance.\n\n/home/myproject/src/wsgi.py\n\n``` python\nimport os\nimport myproject\n\n# Replace with your app's method of configuration\nconfig = myproject.get_config(os.environ['MYPROJECT_CONFIG'])\n\n# uWSGI will look for this variable\napplication = myproject.create_api(config)\n```\n\nNote that in the above example, the WSGI callable is simple assigned to a variable, `application`, rather than being passed to a self-hosting WSGI server such as `wsgiref.simple_server.make_server`. Starting an independent WSGI server in your `wsgi.py` file will render unexpected results.\n\n## Deploying Falcon behind uWSGI\n\nWith your `wsgi.py` file in place, it is time to configure uWSGI. Start by creating a simple `uwsgi.ini` file. In general, you shouldn’t commit this file to source control; it should be generated from a template by your deployment toolchain according to the target environment (number of CPUs, etc.).\n\nThis configuration, when executed, will create a new uWSGI server backed by your `wsgi.py` file and listening at `12.0.0.1:8080`.\n\n/home/myproject/src/uwsgi.ini\n\n``` ini\n[uwsgi]\nmaster = 1\nvacuum = true\nsocket = 127.0.0.1:8080\nenable-threads = true\nthunder-lock = true\nthreads = 2\nprocesses = 2\nvirtualenv = /home/myproject/venv\nwsgi-file = /home/myproject/src/wsgi.py\nchdir = /home/myproject/src\nuid = myproject-runner\ngid = myproject-runner\n```\n\nNote\n\n**Threads vs. Processes**\n\nThere are many questions to consider when deciding how to manage the processes that actually run your Python code. Are you generally CPU bound or IO bound? Is your application thread-safe? How many CPU’s do you have? What system are you on? Do you need an in-process cache?\n\nThe configuration presented here enables both threads and processes. However, you will have to experiment and do some research to understand your application’s unique requirements, and then tailor your uWSGI configuration accordingly. Generally speaking, uWSGI is flexible enough to support most types of applications.\n\nNote\n\n**TCP vs. UNIX Sockets**\n\nNGINX and uWSGI can communicate via normal TCP (using an IP address) or UNIX sockets (using a socket file). TCP sockets are easier to set up and generally work for simple deployments. If you want to have finer control over which processes, users, or groups may access the uWSGI application, or you are looking for a bit of a speed boost, consider using UNIX sockets. uWSGI can automatically drop privileges with `chmod-socket` and switch users with `chown-socket`.\n\nThe `uid` and `gid` settings, as shown above, are critical to securing your deployment. These values control the OS-level user and group the server will use to execute the application. The specified OS user and group should not have write permissions to the source directory. In this case, we use the `myproject-runner` user that was created earlier for this purpose.\n\nYou can now start uWSGI like this:\n\n``` sh\n$ /home/myproject/venv/bin/uwsgi -c uwsgi.ini\n```\n\nIf everything goes well, you should see something like this:\n\n``` python\n*** Operational MODE: preforking+threaded ***\n...\n*** uWSGI is running in multiple interpreter mode ***\n...\nspawned uWSGI master process (pid: 91828)\nspawned uWSGI worker 1 (pid: 91866, cores: 2)\nspawned uWSGI worker 2 (pid: 91867, cores: 2)\n```\n\nNote\n\nIt is always a good idea to keep an eye on the uWSGI logs, as they will contain exceptions and other information from your application that can help shed some light on unexpected behaviors.\n\n## Connecting NGINX and uWSGI\n\nAlthough uWSGI may serve HTTP requests directly, it can be helpful to use a reverse proxy, such as NGINX, to offload TLS negotiation, static file serving, etc.\n\nNGINX natively supports [the uwsgi protocol](https://uwsgi-docs.readthedocs.io/en/latest/Protocol.html), for efficiently proxying requests to uWSGI. In NGINX parlance, we will create an “upstream” and direct that upstream (via a TCP socket) to our now-running uWSGI application.\n\nBefore proceeding, install NGINX according to [the instructions for your platform](https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/).\n\nThen, create an NGINX conf file that looks something like this:\n\n/etc/nginx/sites-avaiable/myproject.conf\n\n``` ini\nserver {\n  listen 80;\n  server_name myproject.com;\n\n  access_log /var/log/nginx/myproject-access.log;\n  error_log  /var/log/nginx/myproject-error.log  warn;\n\n  location / {\n    uwsgi_pass 127.0.0.1:8080\n    include uwsgi_params;\n  }\n}\n```\n\nFinally, start (or restart) NGINX:\n\n``` sh\n$ sudo service start nginx\n```\n\nYou should now have a working application. Check your uWSGI and NGINX logs for errors if the application does not start.\n\n## Further Considerations\n\nWe did not explain how to configure TLS (HTTPS) for NGINX, leaving that as an exercise for the reader. However, we do recommend using Let’s Encrypt, which offers free, short-term certificates with auto-renewal. Visit the [Let’s Encrypt site](https://certbot.eff.org/) to learn how to integrate their service directly with NGINX.\n\nIn addition to setting up NGINX and uWSGI to run your application, you will of course need to deploy a database server or any other services required by your application. Due to the wide variety of options and considerations in this space, we have chosen not to include ancillary services in this guide. However, the Falcon community is always happy to help with deployment questions, so [please don’t hesitate to ask](https://falcon.readthedocs.io/en/stable/community/help.html#chat).\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/deploy/nginx-uwsgi.html](https://falcon.readthedocs.io/en/2.0.0/deploy/nginx-uwsgi.html)"
- name: Error Handling
  id: api/errors
  summary: When it comes to error handling, you can always directly set the error status, appropriate response headers, and error body using the resp object
  description: "# Error Handling\n\nWhen it comes to error handling, you can always directly set the error status, appropriate response headers, and error body using the `resp` object. However, Falcon tries to make things a little easier by providing a set of error classes you can raise when something goes wrong. All of these classes inherit from [`HTTPError`](#falcon.HTTPError \"falcon.HTTPError\").\n\nFalcon will convert any instance or subclass of [`HTTPError`](#falcon.HTTPError \"falcon.HTTPError\") raised by a responder, hook, or middleware component into an appropriate HTTP response. The default error serializer supports both JSON and XML. If the client indicates acceptance of both JSON and XML with equal weight, JSON will be chosen. Other media types may be supported by overriding the default serializer via [`set_error_serializer()`](api#falcon.API.set_error_serializer \"falcon.API.set_error_serializer\").\n\nNote\n\nIf a custom media type is used and the type includes a “+json” or “+xml” suffix, the default serializer will convert the error to JSON or XML, respectively.\n\nTo customize what data is passed to the serializer, subclass [`HTTPError`](#falcon.HTTPError \"falcon.HTTPError\") or any of its child classes, and override the [`to_dict()`](#falcon.HTTPError.to_dict \"falcon.HTTPError.to_dict\") method. To also support XML, override the [`to_xml()`](#falcon.HTTPError.to_xml \"falcon.HTTPError.to_xml\") method. For example:\n\n``` python\nclass HTTPNotAcceptable(falcon.HTTPNotAcceptable):\n\n    def __init__(self, acceptable):\n        description = (\n            'Please see \"acceptable\" for a list of media types '\n            'and profiles that are currently supported.'\n        )\n\n        super().__init__(description=description)\n        self._acceptable = acceptable\n\n    def to_dict(self, obj_type=dict):\n        result = super().to_dict(obj_type)\n        result['acceptable'] = self._acceptable\n        return result\n```\n\nAll classes are available directly in the `falcon` package namespace:\n\n``` python\nimport falcon\n\nclass MessageResource(object):\n    def on_get(self, req, resp):\n\n        # ...\n\n        raise falcon.HTTPBadRequest(\n            \"TTL Out of Range\",\n            \"The message's TTL must be between 60 and 300 seconds, inclusive.\"\n        )\n\n        # ...\n```\n\nNote also that any exception (not just instances of [`HTTPError`](#falcon.HTTPError \"falcon.HTTPError\")) can be caught, logged, and otherwise handled at the global level by registering one or more custom error handlers. See also [`add_error_handler()`](api#falcon.API.add_error_handler \"falcon.API.add_error_handler\") to learn more about this feature.\n\n## Base Class\n\n`class falcon.HTTPError(status, title=None, description=None, headers=None, href=None, href_text=None, code=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#HTTPError)  \nRepresents a generic HTTP error.\n\nRaise an instance or subclass of `HTTPError` to have Falcon return a formatted error response and an appropriate HTTP status code to the client when something goes wrong. JSON and XML media types are supported by default.\n\nTo customize the error presentation, implement a custom error serializer and set it on the [`API`](api#falcon.API \"falcon.API\") instance via [`set_error_serializer()`](api#falcon.API.set_error_serializer \"falcon.API.set_error_serializer\").\n\nTo customize what data is passed to the serializer, subclass `HTTPError` and override the `to_dict()` method (`to_json()` is implemented via `to_dict()`). To also support XML, override the `to_xml()` method.\n\n`status`  \nHTTP status line, e.g. ‘748 Confounded by Ponies’.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`has_representation`  \nRead-only property that determines whether error details will be serialized when composing the HTTP response. In `HTTPError` this property always returns `True`, but child classes may override it in order to return `False` when an empty HTTP body is desired.\n\n(See also: [`falcon.http_error.NoRepresentation`](#falcon.http_error.NoRepresentation \"falcon.http_error.NoRepresentation\"))\n\nNote\n\nA custom error serializer (see [`set_error_serializer()`](api#falcon.API.set_error_serializer \"falcon.API.set_error_serializer\")) may choose to set a response body regardless of the value of this property.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`title`  \nError title to send to the client.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`description`  \nDescription of the error to send to the client.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`headers`  \nExtra headers to add to the response.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`link`  \nAn href that the client can provide to the user for getting help.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`code`  \nAn internal application code that a user can reference when requesting support for the error.\n\n|       |                                                                                |\n|-------|--------------------------------------------------------------------------------|\n| Type: | [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.7)\") |\n\n[TABLE]\n\n`to_dict(obj_type=<class 'dict'>)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#HTTPError.to_dict)  \nReturn a basic dictionary representing the error.\n\nThis method can be useful when serializing the error to hash-like media types, such as YAML, JSON, and MessagePack.\n\n|              |                                                                                                    |\n|--------------|----------------------------------------------------------------------------------------------------|\n| Parameters:  | **obj_type** – A dict-like type that will be used to store the error information (default `dict`). |\n| Returns:     | A dictionary populated with the error’s title, description, etc.                                   |\n| Return type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\")                    |\n\n`to_json()` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#HTTPError.to_json)  \nReturn a pretty-printed JSON representation of the error.\n\n|              |                                                                               |\n|--------------|-------------------------------------------------------------------------------|\n| Returns:     | A JSON document for the error.                                                |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`to_xml()` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#HTTPError.to_xml)  \nReturn an XML-encoded representation of the error.\n\n|              |                                                                               |\n|--------------|-------------------------------------------------------------------------------|\n| Returns:     | An XML document for the error.                                                |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n## Mixins\n\n`class falcon.http_error.NoRepresentation` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#NoRepresentation)  \nMixin for `HTTPError` child classes that have no representation.\n\nThis class can be mixed in when inheriting from `HTTPError`, in order to override the `has_representation` property such that it always returns `False`. This, in turn, will cause Falcon to return an empty response body to the client.\n\nYou can use this mixin when defining errors that either should not have a body (as dictated by HTTP standards or common practice), or in the case that a detailed error response may leak information to an attacker.\n\nNote\n\nThis mixin class must appear before `HTTPError` in the base class list when defining the child; otherwise, it will not override the `has_representation` property as expected.\n\n## Predefined Errors\n\n`exception falcon.HTTPBadRequest(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPBadRequest)  \n400 Bad Request.\n\nThe server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n\n(See also: [RFC 7231, Section 6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1))\n\n[TABLE]\n\n`exception falcon.HTTPInvalidHeader(msg, header_name, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPInvalidHeader)  \n400 Bad Request.\n\nOne of the headers in the request is invalid.\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPMissingHeader(header_name, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPMissingHeader)  \n400 Bad Request\n\nA header is missing from the request.\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPInvalidParam(msg, param_name, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPInvalidParam)  \n400 Bad Request\n\nA parameter in the request is invalid. This error may refer to a parameter in a query string, form, or document that was submitted with the request.\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPMissingParam(param_name, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPMissingParam)  \n400 Bad Request\n\nA parameter is missing from the request. This error may refer to a parameter in a query string, form, or document that was submitted with the request.\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPUnauthorized(title=None, description=None, challenges=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUnauthorized)  \n401 Unauthorized.\n\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\n\nThe server generating a 401 response MUST send a WWW-Authenticate header field containing at least one challenge applicable to the target resource.\n\nIf the request included authentication credentials, then the 401 response indicates that authorization has been refused for those credentials. The user agent MAY repeat the request with a new or replaced Authorization header field. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user agent SHOULD present the enclosed representation to the user, since it usually contains relevant diagnostic information.\n\n(See also: [RFC 7235, Section 3.1](https://tools.ietf.org/html/rfc7235#section-3.1))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPForbidden(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPForbidden)  \n403 Forbidden.\n\nThe server understood the request but refuses to authorize it.\n\nA server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).\n\nIf authentication credentials were provided in the request, the server considers them insufficient to grant access. The client SHOULD NOT automatically repeat the request with the same credentials. The client MAY repeat the request with new or different credentials. However, a request might be forbidden for reasons unrelated to the credentials.\n\nAn origin server that wishes to “hide” the current existence of a forbidden target resource MAY instead respond with a status code of 404 Not Found.\n\n(See also: [RFC 7231, Section 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPNotFound(headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPNotFound)  \n404 Not Found.\n\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\n\nA 404 status code does not indicate whether this lack of representation is temporary or permanent; the 410 Gone status code is preferred over 404 if the origin server knows, presumably through some configurable means, that the condition is likely to be permanent.\n\nA 404 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7231, Section 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPMethodNotAllowed(allowed_methods, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPMethodNotAllowed)  \n405 Method Not Allowed.\n\nThe method received in the request-line is known by the origin server but not supported by the target resource.\n\nThe origin server MUST generate an Allow header field in a 405 response containing a list of the target resource’s currently supported methods.\n\nA 405 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7231, Section 6.5.5](https://tools.ietf.org/html/rfc7231#section-6.5.5))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPNotAcceptable(description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPNotAcceptable)  \n406 Not Acceptable.\n\nThe target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.\n\nThe server SHOULD generate a payload containing a list of available representation characteristics and corresponding resource identifiers from which the user or user agent can choose the one most appropriate. A user agent MAY automatically select the most appropriate choice from that list. However, this specification does not define any standard for such automatic selection, as described in [RFC 7231, Section 6.4.1](https://tools.ietf.org/html/rfc7231#section-6.4.1)\n\n(See also: [RFC 7231, Section 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPConflict(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPConflict)  \n409 Conflict.\n\nThe request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.\n\nThe server SHOULD generate a payload that includes enough information for a user to recognize the source of the conflict.\n\nConflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the representation being PUT included changes to a resource that conflict with those made by an earlier (third-party) request, the origin server might use a 409 response to indicate that it can’t complete the request. In this case, the response representation would likely contain information useful for merging the differences based on the revision history.\n\n(See also: [RFC 7231, Section 6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPGone(headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPGone)  \n410 Gone.\n\nThe target resource is no longer available at the origin server and this condition is likely to be permanent.\n\nIf the origin server does not know, or has no facility to determine, whether or not the condition is permanent, the status code 404 Not Found ought to be used instead.\n\nThe 410 response is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable and that the server owners desire that remote links to that resource be removed. Such an event is common for limited-time, promotional services and for resources belonging to individuals no longer associated with the origin server’s site. It is not necessary to mark all permanently unavailable resources as “gone” or to keep the mark for any length of time – that is left to the discretion of the server owner.\n\nA 410 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7231, Section 6.5.9](https://tools.ietf.org/html/rfc7231#section-6.5.9))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPLengthRequired(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPLengthRequired)  \n411 Length Required.\n\nThe server refuses to accept the request without a defined Content- Length.\n\nThe client MAY repeat the request if it adds a valid Content-Length header field containing the length of the message body in the request message.\n\n(See also: [RFC 7231, Section 6.5.10](https://tools.ietf.org/html/rfc7231#section-6.5.10))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPPreconditionFailed(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPPreconditionFailed)  \n412 Precondition Failed.\n\nOne or more conditions given in the request header fields evaluated to false when tested on the server.\n\nThis response code allows the client to place preconditions on the current resource state (its current representations and metadata) and, thus, prevent the request method from being applied if the target resource is in an unexpected state.\n\n(See also: [RFC 7232, Section 4.2](https://tools.ietf.org/html/rfc7232#section-4.2))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPPayloadTooLarge(title=None, description=None, retry_after=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPPayloadTooLarge)  \n413 Payload Too Large.\n\nThe server is refusing to process a request because the request payload is larger than the server is willing or able to process.\n\nThe server MAY close the connection to prevent the client from continuing the request.\n\nIf the condition is temporary, the server SHOULD generate a Retry- After header field to indicate that it is temporary and after what time the client MAY try again.\n\n(See also: [RFC 7231, Section 6.5.11](https://tools.ietf.org/html/rfc7231#section-6.5.11))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPUriTooLong(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUriTooLong)  \n414 URI Too Long.\n\nThe server is refusing to service the request because the request- target is longer than the server is willing to interpret.\n\nThis rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a “black hole” of redirection (e.g., a redirected URI prefix that points to a suffix of itself) or when the server is under attack by a client attempting to exploit potential security holes.\n\nA 414 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7231, Section 6.5.12](https://tools.ietf.org/html/rfc7231#section-6.5.12))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPUnsupportedMediaType(description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUnsupportedMediaType)  \n415 Unsupported Media Type.\n\nThe origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.\n\nThe format problem might be due to the request’s indicated Content- Type or Content-Encoding, or as a result of inspecting the data directly.\n\n(See also: [RFC 7231, Section 6.5.13](https://tools.ietf.org/html/rfc7231#section-6.5.13))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPRangeNotSatisfiable(resource_length, headers=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPRangeNotSatisfiable)  \n416 Range Not Satisfiable.\n\nNone of the ranges in the request’s Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.\n\nFor byte ranges, failing to overlap the current extent means that the first-byte-pos of all of the byte-range-spec values were greater than the current length of the selected representation. When this status code is generated in response to a byte-range request, the sender SHOULD generate a Content-Range header field specifying the current length of the selected representation.\n\n(See also: [RFC 7233, Section 4.4](https://tools.ietf.org/html/rfc7233#section-4.4))\n\n|             |                                                                                                                         |\n|-------------|-------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **resource_length** – The maximum value for the last-byte-pos of a range request. Used to set the Content-Range header. |\n\n&nbsp;\n\n`exception falcon.HTTPUnprocessableEntity(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUnprocessableEntity)  \n422 Unprocessable Entity.\n\nThe server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions.\n\nFor example, this error condition may occur if an XML request body contains well-formed (i.e., syntactically correct), but semantically erroneous, XML instructions.\n\n(See also: [RFC 4918, Section 11.2](https://tools.ietf.org/html/rfc4918#section-11.2))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPLocked(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPLocked)  \n423 Locked.\n\nThe 423 (Locked) status code means the source or destination resource of a method is locked. This response SHOULD contain an appropriate precondition or postcondition code, such as ‘lock-token-submitted’ or ‘no-conflicting-lock’.\n\n(See also: [RFC 4918, Section 11.3](https://tools.ietf.org/html/rfc4918#section-11.3))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPFailedDependency(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPFailedDependency)  \n424 Failed Dependency.\n\nThe 424 (Failed Dependency) status code means that the method could not be performed on the resource because the requested action depended on another action and that action failed.\n\n(See also: [RFC 4918, Section 11.4](https://tools.ietf.org/html/rfc4918#section-11.4))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPPreconditionRequired(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPPreconditionRequired)  \n428 Precondition Required.\n\nThe 428 status code indicates that the origin server requires the request to be conditional.\n\nIts typical use is to avoid the “lost update” problem, where a client GETs a resource’s state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict. By requiring requests to be conditional, the server can assure that clients are working with the correct copies.\n\nResponses using this status code SHOULD explain how to resubmit the request successfully.\n\n(See also: [RFC 6585, Section 3](https://tools.ietf.org/html/rfc6585#section-3))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPTooManyRequests(title=None, description=None, retry_after=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPTooManyRequests)  \n429 Too Many Requests.\n\nThe user has sent too many requests in a given amount of time (“rate limiting”).\n\nThe response representations SHOULD include details explaining the condition, and MAY include a Retry-After header indicating how long to wait before making a new request.\n\nResponses with the 429 status code MUST NOT be stored by a cache.\n\n(See also: [RFC 6585, Section 4](https://tools.ietf.org/html/rfc6585#section-4))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPRequestHeaderFieldsTooLarge(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPRequestHeaderFieldsTooLarge)  \n431 Request Header Fields Too Large.\n\nThe 431 status code indicates that the server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.\n\nIt can be used both when the set of request header fields in total is too large, and when a single header field is at fault. In the latter case, the response representation SHOULD specify which header field was too large.\n\nResponses with the 431 status code MUST NOT be stored by a cache.\n\n(See also: [RFC 6585, Section 5](https://tools.ietf.org/html/rfc6585#section-5))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPUnavailableForLegalReasons(title=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUnavailableForLegalReasons)  \n451 Unavailable For Legal Reasons.\n\nThe server is denying access to the resource as a consequence of a legal demand.\n\nThe server in question might not be an origin server. This type of legal demand typically most directly affects the operations of ISPs and search engines.\n\nResponses using this status code SHOULD include an explanation, in the response body, of the details of the legal demand: the party making it, the applicable legislation or regulation, and what classes of person and resource it applies to.\n\nNote that in many cases clients can still access the denied resource by using technical countermeasures such as a VPN or the Tor network.\n\nA 451 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7725, Section 3](https://tools.ietf.org/html/rfc7725#section-3))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPInternalServerError(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPInternalServerError)  \n500 Internal Server Error.\n\nThe server encountered an unexpected condition that prevented it from fulfilling the request.\n\n(See also: [RFC 7231, Section 6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPNotImplemented(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPNotImplemented)  \n501 Not Implemented.\n\nThe 501 (Not Implemented) status code indicates that the server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.\n\nA 501 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls as described in [RFC 7234, Section 4.2.2.](https://tools.ietf.org/html/rfc7234#section-4.2.2.)\n\n(See also: [RFC 7231, Section 6.6.2](https://tools.ietf.org/html/rfc7231#section-6.6.2))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPBadGateway(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPBadGateway)  \n502 Bad Gateway.\n\nThe server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.\n\n(See also: [RFC 7231, Section 6.6.3](https://tools.ietf.org/html/rfc7231#section-6.6.3))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPServiceUnavailable(title=None, description=None, retry_after=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPServiceUnavailable)  \n503 Service Unavailable.\n\nThe server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.\n\nThe server MAY send a Retry-After header field to suggest an appropriate amount of time for the client to wait before retrying the request.\n\nNote: The existence of the 503 status code does not imply that a server has to use it when becoming overloaded. Some servers might simply refuse the connection.\n\n(See also: [RFC 7231, Section 6.6.4](https://tools.ietf.org/html/rfc7231#section-6.6.4))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPGatewayTimeout(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPGatewayTimeout)  \n504 Gateway Timeout.\n\nThe 504 (Gateway Timeout) status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.\n\n(See also: [RFC 7231, Section 6.6.5](https://tools.ietf.org/html/rfc7231#section-6.6.5))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPVersionNotSupported(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPVersionNotSupported)  \n505 HTTP Version Not Supported\n\nThe 505 (HTTP Version Not Supported) status code indicates that the server does not support, or refuses to support, the major version of HTTP that was used in the request message. The server is indicating that it is unable or unwilling to complete the request using the same major version as the client (as described in [RFC 7230, Section 2.6](https://tools.ietf.org/html/rfc7230#section-2.6)), other than with this error message. The server SHOULD generate a representation for the 505 response that describes why that version is not supported and what other protocols are supported by that server.\n\n(See also: [RFC 7231, Section 6.6.6](https://tools.ietf.org/html/rfc7231#section-6.6.6))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPInsufficientStorage(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPInsufficientStorage)  \n507 Insufficient Storage.\n\nThe 507 (Insufficient Storage) status code means the method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. This condition is considered to be temporary. If the request that received this status code was the result of a user action, the request MUST NOT be repeated until it is requested by a separate user action.\n\n(See also: [RFC 4918, Section 11.5](https://tools.ietf.org/html/rfc4918#section-11.5))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPLoopDetected(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPLoopDetected)  \n508 Loop Detected.\n\nThe 508 (Loop Detected) status code indicates that the server terminated an operation because it encountered an infinite loop while processing a request with “Depth: infinity”. This status indicates that the entire operation failed.\n\n(See also: [RFC 5842, Section 7.2](https://tools.ietf.org/html/rfc5842#section-7.2))\n\n[TABLE]\n\n&nbsp;\n\n`exception falcon.HTTPNetworkAuthenticationRequired(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPNetworkAuthenticationRequired)  \n511 Network Authentication Required.\n\nThe 511 status code indicates that the client needs to authenticate to gain network access.\n\nThe response representation SHOULD contain a link to a resource that allows the user to submit credentials.\n\nNote that the 511 response SHOULD NOT contain a challenge or the authentication interface itself, because clients would show the interface as being associated with the originally requested URL, which may cause confusion.\n\nThe 511 status SHOULD NOT be generated by origin servers; it is intended for use by intercepting proxies that are interposed as a means of controlling access to the network.\n\nResponses with the 511 status code MUST NOT be stored by a cache.\n\n(See also: [RFC 6585, Section 6](https://tools.ietf.org/html/rfc6585#section-6))\n\n[TABLE]\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/errors.html](https://falcon.readthedocs.io/en/2.0.0/api/errors.html)"
- name: falcon.after()
  id: api/hooks#falcon.after
  summary: Decorator to execute the given action function after the responder
  belongs_to: Hooks
  description: "`falcon.after(action, *args, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/hooks.html#after)\n\nDecorator to execute the given action function *after* the responder.\n\n[TABLE]\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/hooks.html](https://falcon.readthedocs.io/en/2.0.0/api/hooks.html)"
- name: falcon.API
  id: api/api#falcon.API
  summary: This class is the main entry point into a Falcon-based app
  belongs_to: The API Class
  description: |-
    `class falcon.API(media_type='application/json', request_type=<class 'falcon.request.Request'>, response_type=<class 'falcon.response.Response'>, middleware=None, router=None, independent_middleware=True)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API)

    This class is the main entry point into a Falcon-based app.

    Each API instance provides a callable WSGI interface and a routing engine.

    [TABLE]
- name: falcon.API.add_error_handler()
  id: api/api#falcon.API.add_error_handler
  summary: Register a handler for one or more exception types
  belongs_to: The API Class
  description: |-
    `add_error_handler(exception, handler=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.add_error_handler)

    Register a handler for one or more exception types.

    Error handlers may be registered for any exception type, including [`HTTPError`](errors#falcon.HTTPError "falcon.HTTPError") or [`HTTPStatus`](status#falcon.HTTPStatus "falcon.HTTPStatus"). This feature provides a central location for logging and otherwise handling exceptions raised by responders, hooks, and middleware components.

    A handler can raise an instance of [`HTTPError`](errors#falcon.HTTPError "falcon.HTTPError") or [`HTTPStatus`](status#falcon.HTTPStatus "falcon.HTTPStatus") to communicate information about the issue to the client. Alternatively, a handler may modify `resp` directly.

    Error handlers are matched in LIFO order. In other words, when searching for an error handler to match a raised exception, and more than one handler matches the exception type, the framework will choose the one that was most recently registered. Therefore, more general error handlers (e.g., for the standard `Exception` type) should be added first, to avoid masking more specific handlers for subclassed types.

    Note

    By default, the framework installs two handlers, one for [`HTTPError`](errors#falcon.HTTPError "falcon.HTTPError") and one for [`HTTPStatus`](status#falcon.HTTPStatus "falcon.HTTPStatus"). These can be overridden by adding a custom error handler method for the exception type in question.

    [TABLE]
- name: falcon.API.add_route()
  id: api/api#falcon.API.add_route
  summary: Associate a templatized URI path with a resource
  belongs_to: The API Class
  description: |-
    `add_route(uri_template, resource, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.add_route)

    Associate a templatized URI path with a resource.

    Falcon routes incoming requests to resources based on a set of URI templates. If the path requested by the client matches the template for a given route, the request is then passed on to the associated resource for processing.

    If no route matches the request, control then passes to a default responder that simply raises an instance of [`HTTPNotFound`](errors#falcon.HTTPNotFound "falcon.HTTPNotFound").

    This method delegates to the configured router’s `add_route()` method. To override the default behavior, pass a custom router object to the [`API`](#falcon.API "falcon.API") initializer.

    (See also: [Routing](routing#routing))

    [TABLE]

    Note

    Any additional keyword arguments not defined above are passed through to the underlying router’s `add_route()` method. The default router ignores any additional keyword arguments, but custom routers may take advantage of this feature to receive additional options when setting up routes. Custom routers MUST accept such arguments using the variadic pattern (`**kwargs`), and ignore any keyword arguments that they don’t support.
- name: falcon.API.add_sink()
  id: api/api#falcon.API.add_sink
  summary: Register a sink method for the API
  belongs_to: The API Class
  description: |-
    `add_sink(sink, prefix='/')` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.add_sink)

    Register a sink method for the API.

    If no route matches a request, but the path in the requested URI matches a sink prefix, Falcon will pass control to the associated sink, regardless of the HTTP method requested.

    Using sinks, you can drain and dynamically handle a large number of routes, when creating static resources and responders would be impractical. For example, you might use a sink to create a smart proxy that forwards requests to one or more backend services.

    [TABLE]
- name: falcon.API.add_static_route()
  id: api/api#falcon.API.add_static_route
  summary: Add a route to a directory of static files
  belongs_to: The API Class
  description: |-
    `add_static_route(prefix, directory, downloadable=False, fallback_filename=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.add_static_route)

    Add a route to a directory of static files.

    Static routes provide a way to serve files directly. This feature provides an alternative to serving files at the web server level when you don’t have that option, when authorization is required, or for testing purposes.

    Warning

    Serving files directly from the web server, rather than through the Python app, will always be more efficient, and therefore should be preferred in production deployments. For security reasons, the directory and the fallback_filename (if provided) should be read only for the account running the application.

    Static routes are matched in LIFO order. Therefore, if the same prefix is used for two routes, the second one will override the first. This also means that more specific routes should be added *after* less specific ones. For example, the following sequence would result in `'/foo/bar/thing.js'` being mapped to the `'/foo/bar'` route, and `'/foo/xyz/thing.js'` being mapped to the `'/foo'` route:

    ``` python
    api.add_static_route('/foo', foo_path)
    api.add_static_route('/foo/bar', foobar_path)
    ```

    [TABLE]
- name: falcon.API.req_options
  id: api/api#falcon.API.req_options
  summary: A set of behavioral options related to incoming requests
  belongs_to: The API Class
  description: |-
    `req_options`

    A set of behavioral options related to incoming requests. (See also: [`RequestOptions`](#falcon.RequestOptions "falcon.RequestOptions"))
- name: falcon.API.resp_options
  id: api/api#falcon.API.resp_options
  summary: A set of behavioral options related to outgoing responses
  belongs_to: The API Class
  description: |-
    `resp_options`

    A set of behavioral options related to outgoing responses. (See also: [`ResponseOptions`](#falcon.ResponseOptions "falcon.ResponseOptions"))
- name: falcon.API.router_options
  id: api/api#falcon.API.router_options
  summary: Configuration options for the router
  belongs_to: The API Class
  description: |-
    `router_options`

    Configuration options for the router. If a custom router is in use, and it does not expose any configurable options, referencing this attribute will raise an instance of `AttributeError`.

    (See also: [CompiledRouterOptions](#compiled-router-options))
- name: falcon.API.set_error_serializer()
  id: api/api#falcon.API.set_error_serializer
  summary: Override the default serializer for instances of HTTPError
  belongs_to: The API Class
  description: |-
    `set_error_serializer(serializer)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.set_error_serializer)

    Override the default serializer for instances of [`HTTPError`](errors#falcon.HTTPError "falcon.HTTPError").

    When a responder raises an instance of [`HTTPError`](errors#falcon.HTTPError "falcon.HTTPError"), Falcon converts it to an HTTP response automatically. The default serializer supports JSON and XML, but may be overridden by this method to use a custom serializer in order to support other media types.

    Note

    If a custom media type is used and the type includes a “+json” or “+xml” suffix, the default serializer will convert the error to JSON or XML, respectively.

    Note

    The default serializer will not render any response body for [`HTTPError`](errors#falcon.HTTPError "falcon.HTTPError") instances where the `has_representation` property evaluates to `False` (such as in the case of types that subclass [`falcon.http_error.NoRepresentation`](errors#falcon.http_error.NoRepresentation "falcon.http_error.NoRepresentation")). However a custom serializer will be called regardless of the property value, and it may choose to override the representation logic.

    The [`HTTPError`](errors#falcon.HTTPError "falcon.HTTPError") class contains helper methods, such as `to_json()` and `to_dict()`, that can be used from within custom serializers. For example:

    ``` python
    def my_serializer(req, resp, exception):
        representation = None

        preferred = req.client_prefers(('application/x-yaml',
                                        'application/json'))

        if exception.has_representation and preferred is not None:
            if preferred == 'application/json':
                representation = exception.to_json()
            else:
                representation = yaml.dump(exception.to_dict(),
                                           encoding=None)
            resp.body = representation
            resp.content_type = preferred

        resp.append_header('Vary', 'Accept')
    ```

    |             |                                                                                                                                                                                                                                                        |
    |-------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters: | **serializer** (*callable*) – A function taking the form `func(req, resp, exception)`, where `req` is the request object that was passed to the responder method, `resp` is the response object, and `exception` is an instance of `falcon.HTTPError`. |
- name: falcon.before()
  id: api/hooks#falcon.before
  summary: Decorator to execute the given action function before the responder
  belongs_to: Hooks
  description: |-
    `falcon.before(action, *args, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/hooks.html#before)

    Decorator to execute the given action function *before* the responder.

    [TABLE]
- name: falcon.Context
  id: api/util#falcon.Context
  summary: Convenience class to hold contextual information in its attributes
  belongs_to: Utilities
  description: |-
    `class falcon.Context` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#Context)

    Convenience class to hold contextual information in its attributes.

    This class is used as the default [`Request`](request_and_response#falcon.Request "falcon.Request") and [`Response`](request_and_response#falcon.Response "falcon.Response") context type (see [`Request.context_type`](request_and_response#falcon.Request.context_type "falcon.Request.context_type") and [`Response.context_type`](request_and_response#falcon.Response.context_type "falcon.Response.context_type"), respectively).

    In Falcon versions prior to 2.0, the default context type was `dict`. To ease the migration to attribute-based context object approach, this class also implements the mapping interface; that is, object attributes are linked to dictionary items, and vice versa. For instance:

    ``` python
    >>> context = falcon.Context()
    >>> context.cache_strategy = 'lru'
    >>> context.get('cache_strategy')
    'lru'
    >>> 'cache_strategy' in context
    True
    ```

    Note

    Python 2 specific `dict` methods are exposed regardless of the Python language version, however, as they are delegated to the underlying `__dict__`, a similar error would be raised as if attempting to use these methods for a usual Python 3 dict.
- name: falcon.deprecated()
  id: api/util#falcon.deprecated
  summary: Flags a method as deprecated
  belongs_to: Utilities
  description: |-
    `falcon.deprecated(instructions)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#deprecated)

    Flags a method as deprecated.

    This function returns a decorator which can be used to mark deprecated functions. Applying this decorator will result in a warning being emitted when the function is used.

    |             |                                                                                                                                                                                 |
    |-------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters: | **instructions** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – Specific guidance for the developer, e.g.: ‘Please migrate to add_proxy(…)’‘ |
- name: falcon.dt_to_http()
  id: api/util#falcon.dt_to_http
  summary: Converts a datetime instance to an HTTP date string
  belongs_to: Utilities
  description: |-
    `falcon.dt_to_http(dt)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#dt_to_http)

    Converts a `datetime` instance to an HTTP date string.

    |              |                                                                               |
    |--------------|-------------------------------------------------------------------------------|
    | Parameters:  | **dt** (*datetime*) – A `datetime` instance to convert, assumed to be UTC.    |
    | Returns:     | An RFC 1123 date string, e.g.: “Tue, 15 Nov 1994 12:45:26 GMT”.               |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.ETag
  id: api/util#falcon.ETag
  summary: Convenience class to represent a parsed HTTP entity-tag
  belongs_to: Utilities
  description: |-
    `class falcon.ETag` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#ETag)

    Convenience class to represent a parsed HTTP entity-tag.

    This class is simply a subclass of `str` with a few helper methods and an extra attribute to indicate whether the entity-tag is weak or strong. The value of the string is equivalent to what RFC 7232 calls an “opaque-tag”, i.e. an entity-tag sans quotes and the weakness indicator.

    Note

    Given that a weak entity-tag comparison can be performed by using the `==` operator (per the example below), only a [`strong_compare()`](#falcon.ETag.strong_compare "falcon.ETag.strong_compare") method is provided.

    Here is an example `on_get()` method that demonstrates how to use instances of this class:

    ``` python
    def on_get(self, req, resp):
        content_etag = self._get_content_etag()
        for etag in (req.if_none_match or []):
            if etag == '*' or etag == content_etag:
                resp.status = falcon.HTTP_304
                return

        # ...

        resp.etag = content_etag
        resp.status = falcon.HTTP_200
    ```

    (See also: RFC 7232)
- name: falcon.ETag.dumps()
  id: api/util#falcon.ETag.dumps
  summary: Serialize the ETag to a string suitable for use in a precondition header
  belongs_to: Utilities
  description: |-
    `dumps()` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#ETag.dumps)

    Serialize the ETag to a string suitable for use in a precondition header.

    (See also: [RFC 7232, Section 2.3](https://tools.ietf.org/html/rfc7232#section-2.3))

    |              |                                                                               |
    |--------------|-------------------------------------------------------------------------------|
    | Returns:     | An opaque quoted string, possibly prefixed by a weakness indicator `W/`.      |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |

    `classmethod loads(etag_str)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#ETag.loads)

    Class method that deserializes a single entity-tag string from a precondition header.

    Note

    This method is meant to be used only for parsing a single entity-tag. It can not be used to parse a comma-separated list of values.

    (See also: [RFC 7232, Section 2.3](https://tools.ietf.org/html/rfc7232#section-2.3))

    |              |                                                                                                                                                                          |
    |--------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **etag_str** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – An ASCII string representing a single entity-tag, as defined by RFC 7232. |
    | Returns:     | An instance of `~.ETag` representing the parsed entity-tag.                                                                                                              |
    | Return type: | [ETag](#falcon.ETag "falcon.ETag")                                                                                                                                       |
- name: falcon.ETag.is_weak
  id: api/util#falcon.ETag.is_weak
  summary: True if the entity-tag is weak, otherwise False
  belongs_to: Utilities
  description: |-
    `is_weak`

    `True` if the entity-tag is weak, otherwise `False`.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.ETag.strong_compare()
  id: api/util#falcon.ETag.strong_compare
  summary: Performs a strong entity-tag comparison
  belongs_to: Utilities
  description: "`strong_compare(other)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#ETag.strong_compare)\n\nPerforms a strong entity-tag comparison.\n\nTwo entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.\n\n(See also: [RFC 7232, Section 2.3.2](https://tools.ietf.org/html/rfc7232#section-2.3.2))\n\n[TABLE]\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/util.html](https://falcon.readthedocs.io/en/2.0.0/api/util.html)"
- name: falcon.Forwarded
  id: api/request_and_response#falcon.Forwarded
  summary: Represents a parsed Forwarded header
  belongs_to: Request & Response
  description: |-
    `class falcon.Forwarded` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/forwarded.html#Forwarded)

    Represents a parsed Forwarded header.

    (See also: [RFC 7239, Section 4](https://tools.ietf.org/html/rfc7239#section-4))
- name: falcon.Forwarded.dest
  id: api/request_and_response#falcon.Forwarded.dest
  summary: The value of the “by” parameter, or None if the parameter is absent
  belongs_to: Request & Response
  description: |-
    `dest`

    The value of the “by” parameter, or `None` if the parameter is absent. Identifies the client-facing interface of the proxy.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Forwarded.host
  id: api/request_and_response#falcon.Forwarded.host
  summary: The value of the “host” parameter, or None if the parameter is absent
  belongs_to: Request & Response
  description: |-
    `host`

    The value of the “host” parameter, or `None` if the parameter is absent. Provides the host request header field as received by the proxy.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Forwarded.scheme
  id: api/request_and_response#falcon.Forwarded.scheme
  summary: The value of the “proto” parameter, or None if the parameter is absent
  belongs_to: Request & Response
  description: |-
    `scheme`

    The value of the “proto” parameter, or `None` if the parameter is absent. Indicates the protocol that was used to make the request to the proxy.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |

    ## Response
- name: falcon.Forwarded.src
  id: api/request_and_response#falcon.Forwarded.src
  summary: The value of the “for” parameter, or None if the parameter is absent
  belongs_to: Request & Response
  description: |-
    `src`

    The value of the “for” parameter, or `None` if the parameter is absent. Identifies the node making the request to the proxy.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.get_bound_method()
  id: api/util#falcon.get_bound_method
  summary: Get a bound method of the given object by name
  belongs_to: Utilities
  description: |-
    `falcon.get_bound_method(obj, method_name)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#get_bound_method)

    Get a bound method of the given object by name.

    [TABLE]
- name: falcon.get_http_status()
  id: api/util#falcon.get_http_status
  summary: null
  belongs_to: Utilities
  description: |-
    `falcon.get_http_status(status_code, default_reason='Unknown')` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#get_http_status)

    Gets both the http status code and description from just a code

    [TABLE]
- name: falcon.http_date_to_dt()
  id: api/util#falcon.http_date_to_dt
  summary: Converts an HTTP date string to a datetime instance
  belongs_to: Utilities
  description: |-
    `falcon.http_date_to_dt(http_date, obs_date=False)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#http_date_to_dt)

    Converts an HTTP date string to a datetime instance.

    |                    |                                                                                                                                                                                                             |
    |--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:        | **http_date** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – An RFC 1123 date string, e.g.: “Tue, 15 Nov 1994 12:45:26 GMT”.                                             |
    | Keyword Arguments: |                                                                                                                                                                                                             |
    |                    | **obs_date** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)")) – Support obs-date formats according to RFC 7231, e.g.: “Sunday, 06-Nov-94 08:49:37 GMT” (default `False`). |
    | Returns:           | A UTC datetime instance corresponding to the given HTTP date.                                                                                                                                               |
    | Return type:       | datetime                                                                                                                                                                                                    |
    | Raises:            | [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.7)") – http_date doesn’t match any of the available time formats                                                 |
- name: falcon.http_error.NoRepresentation
  id: api/errors#falcon.http_error.NoRepresentation
  summary: Mixin for HTTPError child classes that have no representation
  belongs_to: Error Handling
  description: "`class falcon.http_error.NoRepresentation` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#NoRepresentation)\n\nMixin for `HTTPError` child classes that have no representation.\n\nThis class can be mixed in when inheriting from `HTTPError`, in order to override the `has_representation` property such that it always returns `False`. This, in turn, will cause Falcon to return an empty response body to the client.\n\nYou can use this mixin when defining errors that either should not have a body (as dictated by HTTP standards or common practice), or in the case that a detailed error response may leak information to an attacker.\n\nNote\n\nThis mixin class must appear before `HTTPError` in the base class list when defining the child; otherwise, it will not override the `has_representation` property as expected.\n\n## Predefined Errors\n\n`exception falcon.HTTPBadRequest(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPBadRequest)\n\n400 Bad Request.\n\nThe server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).\n\n(See also: [RFC 7231, Section 6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1))\n\n[TABLE]\n\n`exception falcon.HTTPInvalidHeader(msg, header_name, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPInvalidHeader)\n\n400 Bad Request.\n\nOne of the headers in the request is invalid.\n\n[TABLE]\n\n`exception falcon.HTTPMissingHeader(header_name, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPMissingHeader)\n\n400 Bad Request\n\nA header is missing from the request.\n\n[TABLE]\n\n`exception falcon.HTTPInvalidParam(msg, param_name, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPInvalidParam)\n\n400 Bad Request\n\nA parameter in the request is invalid. This error may refer to a parameter in a query string, form, or document that was submitted with the request.\n\n[TABLE]\n\n`exception falcon.HTTPMissingParam(param_name, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPMissingParam)\n\n400 Bad Request\n\nA parameter is missing from the request. This error may refer to a parameter in a query string, form, or document that was submitted with the request.\n\n[TABLE]\n\n`exception falcon.HTTPUnauthorized(title=None, description=None, challenges=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUnauthorized)\n\n401 Unauthorized.\n\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\n\nThe server generating a 401 response MUST send a WWW-Authenticate header field containing at least one challenge applicable to the target resource.\n\nIf the request included authentication credentials, then the 401 response indicates that authorization has been refused for those credentials. The user agent MAY repeat the request with a new or replaced Authorization header field. If the 401 response contains the same challenge as the prior response, and the user agent has already attempted authentication at least once, then the user agent SHOULD present the enclosed representation to the user, since it usually contains relevant diagnostic information.\n\n(See also: [RFC 7235, Section 3.1](https://tools.ietf.org/html/rfc7235#section-3.1))\n\n[TABLE]\n\n`exception falcon.HTTPForbidden(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPForbidden)\n\n403 Forbidden.\n\nThe server understood the request but refuses to authorize it.\n\nA server that wishes to make public why the request has been forbidden can describe that reason in the response payload (if any).\n\nIf authentication credentials were provided in the request, the server considers them insufficient to grant access. The client SHOULD NOT automatically repeat the request with the same credentials. The client MAY repeat the request with new or different credentials. However, a request might be forbidden for reasons unrelated to the credentials.\n\nAn origin server that wishes to “hide” the current existence of a forbidden target resource MAY instead respond with a status code of 404 Not Found.\n\n(See also: [RFC 7231, Section 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4))\n\n[TABLE]\n\n`exception falcon.HTTPNotFound(headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPNotFound)\n\n404 Not Found.\n\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\n\nA 404 status code does not indicate whether this lack of representation is temporary or permanent; the 410 Gone status code is preferred over 404 if the origin server knows, presumably through some configurable means, that the condition is likely to be permanent.\n\nA 404 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7231, Section 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3))\n\n[TABLE]\n\n`exception falcon.HTTPMethodNotAllowed(allowed_methods, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPMethodNotAllowed)\n\n405 Method Not Allowed.\n\nThe method received in the request-line is known by the origin server but not supported by the target resource.\n\nThe origin server MUST generate an Allow header field in a 405 response containing a list of the target resource’s currently supported methods.\n\nA 405 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7231, Section 6.5.5](https://tools.ietf.org/html/rfc7231#section-6.5.5))\n\n[TABLE]\n\n`exception falcon.HTTPNotAcceptable(description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPNotAcceptable)\n\n406 Not Acceptable.\n\nThe target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request, and the server is unwilling to supply a default representation.\n\nThe server SHOULD generate a payload containing a list of available representation characteristics and corresponding resource identifiers from which the user or user agent can choose the one most appropriate. A user agent MAY automatically select the most appropriate choice from that list. However, this specification does not define any standard for such automatic selection, as described in [RFC 7231, Section 6.4.1](https://tools.ietf.org/html/rfc7231#section-6.4.1)\n\n(See also: [RFC 7231, Section 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6))\n\n[TABLE]\n\n`exception falcon.HTTPConflict(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPConflict)\n\n409 Conflict.\n\nThe request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request.\n\nThe server SHOULD generate a payload that includes enough information for a user to recognize the source of the conflict.\n\nConflicts are most likely to occur in response to a PUT request. For example, if versioning were being used and the representation being PUT included changes to a resource that conflict with those made by an earlier (third-party) request, the origin server might use a 409 response to indicate that it can’t complete the request. In this case, the response representation would likely contain information useful for merging the differences based on the revision history.\n\n(See also: [RFC 7231, Section 6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8))\n\n[TABLE]\n\n`exception falcon.HTTPGone(headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPGone)\n\n410 Gone.\n\nThe target resource is no longer available at the origin server and this condition is likely to be permanent.\n\nIf the origin server does not know, or has no facility to determine, whether or not the condition is permanent, the status code 404 Not Found ought to be used instead.\n\nThe 410 response is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable and that the server owners desire that remote links to that resource be removed. Such an event is common for limited-time, promotional services and for resources belonging to individuals no longer associated with the origin server’s site. It is not necessary to mark all permanently unavailable resources as “gone” or to keep the mark for any length of time – that is left to the discretion of the server owner.\n\nA 410 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7231, Section 6.5.9](https://tools.ietf.org/html/rfc7231#section-6.5.9))\n\n[TABLE]\n\n`exception falcon.HTTPLengthRequired(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPLengthRequired)\n\n411 Length Required.\n\nThe server refuses to accept the request without a defined Content- Length.\n\nThe client MAY repeat the request if it adds a valid Content-Length header field containing the length of the message body in the request message.\n\n(See also: [RFC 7231, Section 6.5.10](https://tools.ietf.org/html/rfc7231#section-6.5.10))\n\n[TABLE]\n\n`exception falcon.HTTPPreconditionFailed(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPPreconditionFailed)\n\n412 Precondition Failed.\n\nOne or more conditions given in the request header fields evaluated to false when tested on the server.\n\nThis response code allows the client to place preconditions on the current resource state (its current representations and metadata) and, thus, prevent the request method from being applied if the target resource is in an unexpected state.\n\n(See also: [RFC 7232, Section 4.2](https://tools.ietf.org/html/rfc7232#section-4.2))\n\n[TABLE]\n\n`exception falcon.HTTPPayloadTooLarge(title=None, description=None, retry_after=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPPayloadTooLarge)\n\n413 Payload Too Large.\n\nThe server is refusing to process a request because the request payload is larger than the server is willing or able to process.\n\nThe server MAY close the connection to prevent the client from continuing the request.\n\nIf the condition is temporary, the server SHOULD generate a Retry- After header field to indicate that it is temporary and after what time the client MAY try again.\n\n(See also: [RFC 7231, Section 6.5.11](https://tools.ietf.org/html/rfc7231#section-6.5.11))\n\n[TABLE]\n\n`exception falcon.HTTPUriTooLong(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUriTooLong)\n\n414 URI Too Long.\n\nThe server is refusing to service the request because the request- target is longer than the server is willing to interpret.\n\nThis rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a “black hole” of redirection (e.g., a redirected URI prefix that points to a suffix of itself) or when the server is under attack by a client attempting to exploit potential security holes.\n\nA 414 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7231, Section 6.5.12](https://tools.ietf.org/html/rfc7231#section-6.5.12))\n\n[TABLE]\n\n`exception falcon.HTTPUnsupportedMediaType(description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUnsupportedMediaType)\n\n415 Unsupported Media Type.\n\nThe origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource.\n\nThe format problem might be due to the request’s indicated Content- Type or Content-Encoding, or as a result of inspecting the data directly.\n\n(See also: [RFC 7231, Section 6.5.13](https://tools.ietf.org/html/rfc7231#section-6.5.13))\n\n[TABLE]\n\n`exception falcon.HTTPRangeNotSatisfiable(resource_length, headers=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPRangeNotSatisfiable)\n\n416 Range Not Satisfiable.\n\nNone of the ranges in the request’s Range header field overlap the current extent of the selected resource or that the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges.\n\nFor byte ranges, failing to overlap the current extent means that the first-byte-pos of all of the byte-range-spec values were greater than the current length of the selected representation. When this status code is generated in response to a byte-range request, the sender SHOULD generate a Content-Range header field specifying the current length of the selected representation.\n\n(See also: [RFC 7233, Section 4.4](https://tools.ietf.org/html/rfc7233#section-4.4))\n\n|             |                                                                                                                         |\n|-------------|-------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **resource_length** – The maximum value for the last-byte-pos of a range request. Used to set the Content-Range header. |\n\n`exception falcon.HTTPUnprocessableEntity(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUnprocessableEntity)\n\n422 Unprocessable Entity.\n\nThe server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions.\n\nFor example, this error condition may occur if an XML request body contains well-formed (i.e., syntactically correct), but semantically erroneous, XML instructions.\n\n(See also: [RFC 4918, Section 11.2](https://tools.ietf.org/html/rfc4918#section-11.2))\n\n[TABLE]\n\n`exception falcon.HTTPLocked(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPLocked)\n\n423 Locked.\n\nThe 423 (Locked) status code means the source or destination resource of a method is locked. This response SHOULD contain an appropriate precondition or postcondition code, such as ‘lock-token-submitted’ or ‘no-conflicting-lock’.\n\n(See also: [RFC 4918, Section 11.3](https://tools.ietf.org/html/rfc4918#section-11.3))\n\n[TABLE]\n\n`exception falcon.HTTPFailedDependency(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPFailedDependency)\n\n424 Failed Dependency.\n\nThe 424 (Failed Dependency) status code means that the method could not be performed on the resource because the requested action depended on another action and that action failed.\n\n(See also: [RFC 4918, Section 11.4](https://tools.ietf.org/html/rfc4918#section-11.4))\n\n[TABLE]\n\n`exception falcon.HTTPPreconditionRequired(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPPreconditionRequired)\n\n428 Precondition Required.\n\nThe 428 status code indicates that the origin server requires the request to be conditional.\n\nIts typical use is to avoid the “lost update” problem, where a client GETs a resource’s state, modifies it, and PUTs it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict. By requiring requests to be conditional, the server can assure that clients are working with the correct copies.\n\nResponses using this status code SHOULD explain how to resubmit the request successfully.\n\n(See also: [RFC 6585, Section 3](https://tools.ietf.org/html/rfc6585#section-3))\n\n[TABLE]\n\n`exception falcon.HTTPTooManyRequests(title=None, description=None, retry_after=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPTooManyRequests)\n\n429 Too Many Requests.\n\nThe user has sent too many requests in a given amount of time (“rate limiting”).\n\nThe response representations SHOULD include details explaining the condition, and MAY include a Retry-After header indicating how long to wait before making a new request.\n\nResponses with the 429 status code MUST NOT be stored by a cache.\n\n(See also: [RFC 6585, Section 4](https://tools.ietf.org/html/rfc6585#section-4))\n\n[TABLE]\n\n`exception falcon.HTTPRequestHeaderFieldsTooLarge(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPRequestHeaderFieldsTooLarge)\n\n431 Request Header Fields Too Large.\n\nThe 431 status code indicates that the server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields.\n\nIt can be used both when the set of request header fields in total is too large, and when a single header field is at fault. In the latter case, the response representation SHOULD specify which header field was too large.\n\nResponses with the 431 status code MUST NOT be stored by a cache.\n\n(See also: [RFC 6585, Section 5](https://tools.ietf.org/html/rfc6585#section-5))\n\n[TABLE]\n\n`exception falcon.HTTPUnavailableForLegalReasons(title=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPUnavailableForLegalReasons)\n\n451 Unavailable For Legal Reasons.\n\nThe server is denying access to the resource as a consequence of a legal demand.\n\nThe server in question might not be an origin server. This type of legal demand typically most directly affects the operations of ISPs and search engines.\n\nResponses using this status code SHOULD include an explanation, in the response body, of the details of the legal demand: the party making it, the applicable legislation or regulation, and what classes of person and resource it applies to.\n\nNote that in many cases clients can still access the denied resource by using technical countermeasures such as a VPN or the Tor network.\n\nA 451 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls.\n\n(See also: [RFC 7725, Section 3](https://tools.ietf.org/html/rfc7725#section-3))\n\n[TABLE]\n\n`exception falcon.HTTPInternalServerError(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPInternalServerError)\n\n500 Internal Server Error.\n\nThe server encountered an unexpected condition that prevented it from fulfilling the request.\n\n(See also: [RFC 7231, Section 6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1))\n\n[TABLE]\n\n`exception falcon.HTTPNotImplemented(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPNotImplemented)\n\n501 Not Implemented.\n\nThe 501 (Not Implemented) status code indicates that the server does not support the functionality required to fulfill the request. This is the appropriate response when the server does not recognize the request method and is not capable of supporting it for any resource.\n\nA 501 response is cacheable by default; i.e., unless otherwise indicated by the method definition or explicit cache controls as described in [RFC 7234, Section 4.2.2.](https://tools.ietf.org/html/rfc7234#section-4.2.2.)\n\n(See also: [RFC 7231, Section 6.6.2](https://tools.ietf.org/html/rfc7231#section-6.6.2))\n\n[TABLE]\n\n`exception falcon.HTTPBadGateway(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPBadGateway)\n\n502 Bad Gateway.\n\nThe server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request.\n\n(See also: [RFC 7231, Section 6.6.3](https://tools.ietf.org/html/rfc7231#section-6.6.3))\n\n[TABLE]\n\n`exception falcon.HTTPServiceUnavailable(title=None, description=None, retry_after=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPServiceUnavailable)\n\n503 Service Unavailable.\n\nThe server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay.\n\nThe server MAY send a Retry-After header field to suggest an appropriate amount of time for the client to wait before retrying the request.\n\nNote: The existence of the 503 status code does not imply that a server has to use it when becoming overloaded. Some servers might simply refuse the connection.\n\n(See also: [RFC 7231, Section 6.6.4](https://tools.ietf.org/html/rfc7231#section-6.6.4))\n\n[TABLE]\n\n`exception falcon.HTTPGatewayTimeout(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPGatewayTimeout)\n\n504 Gateway Timeout.\n\nThe 504 (Gateway Timeout) status code indicates that the server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request.\n\n(See also: [RFC 7231, Section 6.6.5](https://tools.ietf.org/html/rfc7231#section-6.6.5))\n\n[TABLE]\n\n`exception falcon.HTTPVersionNotSupported(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPVersionNotSupported)\n\n505 HTTP Version Not Supported\n\nThe 505 (HTTP Version Not Supported) status code indicates that the server does not support, or refuses to support, the major version of HTTP that was used in the request message. The server is indicating that it is unable or unwilling to complete the request using the same major version as the client (as described in [RFC 7230, Section 2.6](https://tools.ietf.org/html/rfc7230#section-2.6)), other than with this error message. The server SHOULD generate a representation for the 505 response that describes why that version is not supported and what other protocols are supported by that server.\n\n(See also: [RFC 7231, Section 6.6.6](https://tools.ietf.org/html/rfc7231#section-6.6.6))\n\n[TABLE]\n\n`exception falcon.HTTPInsufficientStorage(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPInsufficientStorage)\n\n507 Insufficient Storage.\n\nThe 507 (Insufficient Storage) status code means the method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. This condition is considered to be temporary. If the request that received this status code was the result of a user action, the request MUST NOT be repeated until it is requested by a separate user action.\n\n(See also: [RFC 4918, Section 11.5](https://tools.ietf.org/html/rfc4918#section-11.5))\n\n[TABLE]\n\n`exception falcon.HTTPLoopDetected(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPLoopDetected)\n\n508 Loop Detected.\n\nThe 508 (Loop Detected) status code indicates that the server terminated an operation because it encountered an infinite loop while processing a request with “Depth: infinity”. This status indicates that the entire operation failed.\n\n(See also: [RFC 5842, Section 7.2](https://tools.ietf.org/html/rfc5842#section-7.2))\n\n[TABLE]\n\n`exception falcon.HTTPNetworkAuthenticationRequired(title=None, description=None, headers=None, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/errors.html#HTTPNetworkAuthenticationRequired)\n\n511 Network Authentication Required.\n\nThe 511 status code indicates that the client needs to authenticate to gain network access.\n\nThe response representation SHOULD contain a link to a resource that allows the user to submit credentials.\n\nNote that the 511 response SHOULD NOT contain a challenge or the authentication interface itself, because clients would show the interface as being associated with the originally requested URL, which may cause confusion.\n\nThe 511 status SHOULD NOT be generated by origin servers; it is intended for use by intercepting proxies that are interposed as a means of controlling access to the network.\n\nResponses with the 511 status code MUST NOT be stored by a cache.\n\n(See also: [RFC 6585, Section 6](https://tools.ietf.org/html/rfc6585#section-6))\n\n[TABLE]\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/errors.html](https://falcon.readthedocs.io/en/2.0.0/api/errors.html)"
- name: falcon.http_now()
  id: api/util#falcon.http_now
  summary: Returns the current UTC time as an IMF-fixdate
  belongs_to: Utilities
  description: |-
    `falcon.http_now()` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#http_now)

    Returns the current UTC time as an IMF-fixdate.

    |              |                                                                                |
    |--------------|--------------------------------------------------------------------------------|
    | Returns:     | The current UTC time as an IMF-fixdate, e.g., ‘Tue, 15 Nov 1994 12:45:26 GMT’. |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")  |
- name: falcon.HTTPError
  id: api/errors#falcon.HTTPError
  summary: Represents a generic HTTP error
  belongs_to: Error Handling
  description: |-
    `class falcon.HTTPError(status, title=None, description=None, headers=None, href=None, href_text=None, code=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#HTTPError)

    Represents a generic HTTP error.

    Raise an instance or subclass of `HTTPError` to have Falcon return a formatted error response and an appropriate HTTP status code to the client when something goes wrong. JSON and XML media types are supported by default.

    To customize the error presentation, implement a custom error serializer and set it on the [`API`](api#falcon.API "falcon.API") instance via [`set_error_serializer()`](api#falcon.API.set_error_serializer "falcon.API.set_error_serializer").

    To customize what data is passed to the serializer, subclass `HTTPError` and override the `to_dict()` method (`to_json()` is implemented via `to_dict()`). To also support XML, override the `to_xml()` method.
- name: falcon.HTTPError.code
  id: api/errors#falcon.HTTPError.code
  summary: An internal application code that a user can reference when requesting support for the error
  belongs_to: Error Handling
  description: |-
    `code`

    An internal application code that a user can reference when requesting support for the error.

    |       |                                                                                |
    |-------|--------------------------------------------------------------------------------|
    | Type: | [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.7)") |

    [TABLE]
- name: falcon.HTTPError.description
  id: api/errors#falcon.HTTPError.description
  summary: Description of the error to send to the client
  belongs_to: Error Handling
  description: |-
    `description`

    Description of the error to send to the client.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.HTTPError.has_representation
  id: api/errors#falcon.HTTPError.has_representation
  summary: Read-only property that determines whether error details will be serialized when composing the HTTP response
  belongs_to: Error Handling
  description: |-
    `has_representation`

    Read-only property that determines whether error details will be serialized when composing the HTTP response. In `HTTPError` this property always returns `True`, but child classes may override it in order to return `False` when an empty HTTP body is desired.

    (See also: [`falcon.http_error.NoRepresentation`](#falcon.http_error.NoRepresentation "falcon.http_error.NoRepresentation"))

    Note

    A custom error serializer (see [`set_error_serializer()`](api#falcon.API.set_error_serializer "falcon.API.set_error_serializer")) may choose to set a response body regardless of the value of this property.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.HTTPError.headers
  id: api/errors#falcon.HTTPError.headers
  summary: Extra headers to add to the response
  belongs_to: Error Handling
  description: |-
    `headers`

    Extra headers to add to the response.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.HTTPError.link
  id: api/errors#falcon.HTTPError.link
  summary: An href that the client can provide to the user for getting help
  belongs_to: Error Handling
  description: |-
    `link`

    An href that the client can provide to the user for getting help.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.HTTPError.status
  id: api/errors#falcon.HTTPError.status
  summary: HTTP status line, e.g
  belongs_to: Error Handling
  description: |-
    `status`

    HTTP status line, e.g. ‘748 Confounded by Ponies’.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.HTTPError.title
  id: api/errors#falcon.HTTPError.title
  summary: Error title to send to the client
  belongs_to: Error Handling
  description: |-
    `title`

    Error title to send to the client.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.HTTPError.to_dict()
  id: api/errors#falcon.HTTPError.to_dict
  summary: Return a basic dictionary representing the error
  belongs_to: Error Handling
  description: |-
    `to_dict(obj_type=<class 'dict'>)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#HTTPError.to_dict)

    Return a basic dictionary representing the error.

    This method can be useful when serializing the error to hash-like media types, such as YAML, JSON, and MessagePack.

    |              |                                                                                                    |
    |--------------|----------------------------------------------------------------------------------------------------|
    | Parameters:  | **obj_type** – A dict-like type that will be used to store the error information (default `dict`). |
    | Returns:     | A dictionary populated with the error’s title, description, etc.                                   |
    | Return type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)")                    |
- name: falcon.HTTPError.to_json()
  id: api/errors#falcon.HTTPError.to_json
  summary: Return a pretty-printed JSON representation of the error
  belongs_to: Error Handling
  description: |-
    `to_json()` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#HTTPError.to_json)

    Return a pretty-printed JSON representation of the error.

    |              |                                                                               |
    |--------------|-------------------------------------------------------------------------------|
    | Returns:     | A JSON document for the error.                                                |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.HTTPError.to_xml()
  id: api/errors#falcon.HTTPError.to_xml
  summary: Return an XML-encoded representation of the error
  belongs_to: Error Handling
  description: |-
    `to_xml()` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_error.html#HTTPError.to_xml)

    Return an XML-encoded representation of the error.

    |              |                                                                               |
    |--------------|-------------------------------------------------------------------------------|
    | Returns:     | An XML document for the error.                                                |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |

    ## Mixins
- name: falcon.HTTPStatus
  id: api/status#falcon.HTTPStatus
  summary: Represents a generic HTTP status
  belongs_to: Status Codes
  description: |-
    `class falcon.HTTPStatus(status, headers=None, body=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_status.html#HTTPStatus)

    Represents a generic HTTP status.

    Raise an instance of this class from a hook, middleware, or responder to short-circuit request processing in a manner similar to `falcon.HTTPError`, but for non-error status codes.
- name: falcon.HTTPStatus.body
  id: api/status#falcon.HTTPStatus.body
  summary: String representing response content
  belongs_to: Status Codes
  description: "`body`\n\nString representing response content. If Unicode, Falcon will encode as UTF-8 in the response.\n\n|       |                                                                                          |\n|-------|------------------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") or unicode |\n\n[TABLE]\n\n## 1xx Informational\n\n``` python\nHTTP_CONTINUE = HTTP_100\nHTTP_SWITCHING_PROTOCOLS = HTTP_101\nHTTP_PROCESSING = HTTP_102\n\nHTTP_100 = '100 Continue'\nHTTP_101 = '101 Switching Protocols'\nHTTP_102 = '102 Processing'\n```\n\n## 2xx Success\n\n``` python\nHTTP_OK = HTTP_200\nHTTP_CREATED = HTTP_201\nHTTP_ACCEPTED = HTTP_202\nHTTP_NON_AUTHORITATIVE_INFORMATION = HTTP_203\nHTTP_NO_CONTENT = HTTP_204\nHTTP_RESET_CONTENT = HTTP_205\nHTTP_PARTIAL_CONTENT = HTTP_206\nHTTP_MULTI_STATUS = HTTP_207\nHTTP_ALREADY_REPORTED = HTTP_208\nHTTP_IM_USED = HTTP_226\n\nHTTP_200 = '200 OK'\nHTTP_201 = '201 Created'\nHTTP_202 = '202 Accepted'\nHTTP_203 = '203 Non-Authoritative Information'\nHTTP_204 = '204 No Content'\nHTTP_205 = '205 Reset Content'\nHTTP_206 = '206 Partial Content'\nHTTP_207 = '207 Multi-Status'\nHTTP_208 = '208 Already Reported'\nHTTP_226 = '226 IM Used'\n```\n\n## 3xx Redirection\n\n``` python\nHTTP_MULTIPLE_CHOICES = HTTP_300\nHTTP_MOVED_PERMANENTLY = HTTP_301\nHTTP_FOUND = HTTP_302\nHTTP_SEE_OTHER = HTTP_303\nHTTP_NOT_MODIFIED = HTTP_304\nHTTP_USE_PROXY = HTTP_305\nHTTP_TEMPORARY_REDIRECT = HTTP_307\nHTTP_PERMANENT_REDIRECT = HTTP_308\n\nHTTP_300 = '300 Multiple Choices'\nHTTP_301 = '301 Moved Permanently'\nHTTP_302 = '302 Found'\nHTTP_303 = '303 See Other'\nHTTP_304 = '304 Not Modified'\nHTTP_305 = '305 Use Proxy'\nHTTP_307 = '307 Temporary Redirect'\nHTTP_308 = '308 Permanent Redirect'\n```\n\n## 4xx Client Error\n\n``` python\nHTTP_BAD_REQUEST = HTTP_400\nHTTP_UNAUTHORIZED = HTTP_401  # <-- Really means \"unauthenticated\"\nHTTP_PAYMENT_REQUIRED = HTTP_402\nHTTP_FORBIDDEN = HTTP_403  # <-- Really means \"unauthorized\"\nHTTP_NOT_FOUND = HTTP_404\nHTTP_METHOD_NOT_ALLOWED = HTTP_405\nHTTP_NOT_ACCEPTABLE = HTTP_406\nHTTP_PROXY_AUTHENTICATION_REQUIRED = HTTP_407\nHTTP_REQUEST_TIMEOUT = HTTP_408\nHTTP_CONFLICT = HTTP_409\nHTTP_GONE = HTTP_410\nHTTP_LENGTH_REQUIRED = HTTP_411\nHTTP_PRECONDITION_FAILED = HTTP_412\nHTTP_REQUEST_ENTITY_TOO_LARGE = HTTP_413\nHTTP_REQUEST_URI_TOO_LONG = HTTP_414\nHTTP_UNSUPPORTED_MEDIA_TYPE = HTTP_415\nHTTP_REQUESTED_RANGE_NOT_SATISFIABLE = HTTP_416\nHTTP_EXPECTATION_FAILED = HTTP_417\nHTTP_IM_A_TEAPOT = HTTP_418\nHTTP_UNPROCESSABLE_ENTITY = HTTP_422\nHTTP_LOCKED = HTTP_423\nHTTP_FAILED_DEPENDENCY = HTTP_424\nHTTP_UPGRADE_REQUIRED = HTTP_426\nHTTP_PRECONDITION_REQUIRED = HTTP_428\nHTTP_TOO_MANY_REQUESTS = HTTP_429\nHTTP_REQUEST_HEADER_FIELDS_TOO_LARGE = HTTP_431\nHTTP_UNAVAILABLE_FOR_LEGAL_REASONS = HTTP_451\n\nHTTP_400 = '400 Bad Request'\nHTTP_401 = '401 Unauthorized'  # <-- Really means \"unauthenticated\"\nHTTP_402 = '402 Payment Required'\nHTTP_403 = '403 Forbidden'  # <-- Really means \"unauthorized\"\nHTTP_404 = '404 Not Found'\nHTTP_405 = '405 Method Not Allowed'\nHTTP_406 = '406 Not Acceptable'\nHTTP_407 = '407 Proxy Authentication Required'\nHTTP_408 = '408 Request Time-out'\nHTTP_409 = '409 Conflict'\nHTTP_410 = '410 Gone'\nHTTP_411 = '411 Length Required'\nHTTP_412 = '412 Precondition Failed'\nHTTP_413 = '413 Payload Too Large'\nHTTP_414 = '414 URI Too Long'\nHTTP_415 = '415 Unsupported Media Type'\nHTTP_416 = '416 Range Not Satisfiable'\nHTTP_417 = '417 Expectation Failed'\nHTTP_418 = \"418 I'm a teapot\"\nHTTP_422 = \"422 Unprocessable Entity\"\nHTTP_423 = '423 Locked'\nHTTP_424 = '424 Failed Dependency'\nHTTP_426 = '426 Upgrade Required'\nHTTP_428 = '428 Precondition Required'\nHTTP_429 = '429 Too Many Requests'\nHTTP_431 = '431 Request Header Fields Too Large'\nHTTP_451 = '451 Unavailable For Legal Reasons'\n```\n\n## 5xx Server Error\n\n``` python\nHTTP_INTERNAL_SERVER_ERROR = HTTP_500\nHTTP_NOT_IMPLEMENTED = HTTP_501\nHTTP_BAD_GATEWAY = HTTP_502\nHTTP_SERVICE_UNAVAILABLE = HTTP_503\nHTTP_GATEWAY_TIMEOUT = HTTP_504\nHTTP_HTTP_VERSION_NOT_SUPPORTED = HTTP_505\nHTTP_INSUFFICIENT_STORAGE = HTTP_507\nHTTP_LOOP_DETECTED = HTTP_508\nHTTP_NETWORK_AUTHENTICATION_REQUIRED = HTTP_511\n\nHTTP_500 = '500 Internal Server Error'\nHTTP_501 = '501 Not Implemented'\nHTTP_502 = '502 Bad Gateway'\nHTTP_503 = '503 Service Unavailable'\nHTTP_504 = '504 Gateway Time-out'\nHTTP_505 = '505 HTTP Version not supported'\nHTTP_507 = '507 Insufficient Storage'\nHTTP_508 = '508 Loop Detected'\nHTTP_511 = '511 Network Authentication Required'\n```\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/status.html](https://falcon.readthedocs.io/en/2.0.0/api/status.html)"
- name: falcon.HTTPStatus.headers
  id: api/status#falcon.HTTPStatus.headers
  summary: Extra headers to add to the response
  belongs_to: Status Codes
  description: |-
    `headers`

    Extra headers to add to the response.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.HTTPStatus.status
  id: api/status#falcon.HTTPStatus.status
  summary: HTTP status line, e.g
  belongs_to: Status Codes
  description: |-
    `status`

    HTTP status line, e.g. ‘748 Confounded by Ponies’.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.media.BaseHandler
  id: api/media#falcon.media.BaseHandler
  summary: null
  belongs_to: Media
  description: |-
    `class falcon.media.BaseHandler` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/base.html#BaseHandler)

    Abstract Base Class for an internet media type handler
- name: falcon.media.BaseHandler.deserialize()
  id: api/media#falcon.media.BaseHandler.deserialize
  summary: Deserialize the falcon.Request body
  belongs_to: Media
  description: |-
    `deserialize(stream, content_type, content_length)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/base.html#BaseHandler.deserialize)

    Deserialize the [`falcon.Request`](request_and_response#falcon.Request "falcon.Request") body.

    [TABLE]

    ## Handlers
- name: falcon.media.BaseHandler.serialize()
  id: api/media#falcon.media.BaseHandler.serialize
  summary: null
  belongs_to: Media
  description: |-
    `serialize(media, content_type)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/base.html#BaseHandler.serialize)

    Serialize the media object on a [`falcon.Response`](request_and_response#falcon.Response "falcon.Response")

    [TABLE]
- name: falcon.media.Handlers
  id: api/media#falcon.media.Handlers
  summary: A dictionary like object that manages internet media type handlers
  belongs_to: Media
  description: "`class falcon.media.Handlers(initial=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/handlers.html#Handlers)\n\nA dictionary like object that manages internet media type handlers.\n\n## Media Type Constants\n\nThe `falcon` module provides a number of constants for common media types, including the following:\n\n``` python\nfalcon.MEDIA_JSON\nfalcon.MEDIA_MSGPACK\nfalcon.MEDIA_YAML\nfalcon.MEDIA_XML\nfalcon.MEDIA_HTML\nfalcon.MEDIA_JS\nfalcon.MEDIA_TEXT\nfalcon.MEDIA_JPEG\nfalcon.MEDIA_PNG\nfalcon.MEDIA_GIF\n```\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/media.html](https://falcon.readthedocs.io/en/2.0.0/api/media.html)"
- name: falcon.media.JSONHandler
  id: api/media#falcon.media.JSONHandler
  summary: JSON media handler
  belongs_to: Media
  description: |-
    `class falcon.media.JSONHandler(dumps=None, loads=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/json.html#JSONHandler)

    JSON media handler.

    This handler uses Python’s standard [`json`](https://docs.python.org/3/library/json.html#module-json "(in Python v3.7)") library by default, but can be easily configured to use any of a number of third-party JSON libraries, depending on your needs. For example, you can often realize a significant performance boost under CPython by using an alternative library. Good options in this respect include `orjson`, `python-rapidjson`, and `mujson`.

    Note

    If you are deploying to PyPy, we recommend sticking with the standard library’s JSON implementation, since it will be faster in most cases as compared to a third-party library.

    Overriding the default JSON implementation is simply a matter of specifying the desired `dumps` and `loads` functions:

    ``` python
    import falcon
    from falcon import media

    import rapidjson

    json_handler = media.JSONHandler(
        dumps=rapidjson.dumps,
        loads=rapidjson.loads,
    )
    extra_handlers = {
        'application/json': json_handler,
    }

    api = falcon.API()
    api.req_options.media_handlers.update(extra_handlers)
    api.resp_options.media_handlers.update(extra_handlers)
    ```

    By default, `ensure_ascii` is passed to the `json.dumps` function. If you override the `dumps` function, you will need to explicitly set `ensure_ascii` to `False` in order to enable the serialization of Unicode characters to UTF-8. This is easily done by using `functools.partial` to apply the desired keyword argument. In fact, you can use this same technique to customize any option supported by the `dumps` and `loads` functions:

    ``` python
    from functools import partial

    from falcon import media
    import rapidjson

    json_handler = media.JSONHandler(
        dumps=partial(
            rapidjson.dumps,
            ensure_ascii=False, sort_keys=True
        ),
    )
    ```

    [TABLE]
- name: falcon.media.JSONHandler.deserialize()
  id: api/media#falcon.media.JSONHandler.deserialize
  summary: Deserialize the falcon.Request body
  belongs_to: Media
  description: |-
    `deserialize(stream, content_type, content_length)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/json.html#JSONHandler.deserialize)

    Deserialize the [`falcon.Request`](request_and_response#falcon.Request "falcon.Request") body.

    [TABLE]
- name: falcon.media.JSONHandler.serialize()
  id: api/media#falcon.media.JSONHandler.serialize
  summary: null
  belongs_to: Media
  description: |-
    `serialize(media, content_type)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/json.html#JSONHandler.serialize)

    Serialize the media object on a [`falcon.Response`](request_and_response#falcon.Response "falcon.Response")

    [TABLE]
- name: falcon.media.MessagePackHandler
  id: api/media#falcon.media.MessagePackHandler
  summary: Handler built using the msgpack module
  belongs_to: Media
  description: |-
    `class falcon.media.MessagePackHandler` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/msgpack.html#MessagePackHandler)

    Handler built using the `msgpack` module.

    This handler uses `msgpack.unpackb()` and `msgpack.packb()`. The MessagePack `bin` type is used to distinguish between Unicode strings (`str` on Python 3, `unicode` on Python 2) and byte strings (`bytes` on Python 2/3, or `str` on Python 2).

    Note

    This handler requires the extra `msgpack` package (version 0.5.2 or higher), which must be installed in addition to `falcon` from PyPI:

    ``` last
    $ pip install msgpack
    ```
- name: falcon.media.MessagePackHandler.deserialize()
  id: api/media#falcon.media.MessagePackHandler.deserialize
  summary: Deserialize the falcon.Request body
  belongs_to: Media
  description: |-
    `deserialize(stream, content_type, content_length)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/msgpack.html#MessagePackHandler.deserialize)

    Deserialize the [`falcon.Request`](request_and_response#falcon.Request "falcon.Request") body.

    [TABLE]
- name: falcon.media.MessagePackHandler.serialize()
  id: api/media#falcon.media.MessagePackHandler.serialize
  summary: null
  belongs_to: Media
  description: |-
    `serialize(media, content_type)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/msgpack.html#MessagePackHandler.serialize)

    Serialize the media object on a [`falcon.Response`](request_and_response#falcon.Response "falcon.Response")

    [TABLE]

    ## Custom Handler Type

    If Falcon doesn’t have an internet media type handler that supports your use case, you can easily implement your own using the abstract base class provided by Falcon:
- name: falcon.media.validators.jsonschema.validate()
  id: api/media#falcon.media.validators.jsonschema.validate
  summary: Decorator for validating req.media using JSON Schema
  belongs_to: Media
  description: |-
    `falcon.media.validators.jsonschema.validate(req_schema=None, resp_schema=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/validators/jsonschema.html#validate)

    Decorator for validating `req.media` using JSON Schema.

    This decorator provides standard JSON Schema validation via the `jsonschema` package available from PyPI. Semantic validation via the *format* keyword is enabled for the default checkers implemented by `jsonschema.FormatChecker`.

    Note

    The `` jsonschema` `` package must be installed separately in order to use this decorator, as Falcon does not install it by default.

    See [json-schema.org](http://json-schema.org/) for more information on defining a compatible dictionary.

    [TABLE]

    #### Example

    ``` python
    from falcon.media.validators import jsonschema

    # -- snip --

    @jsonschema.validate(my_post_schema)
    def on_post(self, req, resp):

    # -- snip --
    ```

    If JSON Schema does not meet your needs, a custom validator may be implemented in a similar manner to the one above.

    ## Content-Type Negotiation

    Falcon currently only supports partial negotiation out of the box. By default, when the `media` attribute is used it attempts to de/serialize based on the `Content-Type` header value. The missing link that Falcon doesn’t provide is the connection between the [`falcon.Request`](request_and_response#falcon.Request "falcon.Request") `Accept` header provided by a user and the [`falcon.Response`](request_and_response#falcon.Response "falcon.Response") `Content-Type` header.

    If you do need full negotiation, it is very easy to bridge the gap using middleware. Here is an example of how this can be done:

    ``` python
    class NegotiationMiddleware(object):
        def process_request(self, req, resp):
            resp.content_type = req.accept
    ```

    ## Replacing the Default Handlers

    When creating your API object you can either add or completely replace all of the handlers. For example, lets say you want to write an API that sends and receives MessagePack. We can easily do this by telling our Falcon API that we want a default media-type of `application/msgpack` and then create a new [`Handlers`](#falcon.media.Handlers "falcon.media.Handlers") object specifying the desired media type and a handler that can process that data.

    ``` python
    import falcon
    from falcon import media


    handlers = media.Handlers({
        'application/msgpack': media.MessagePackHandler(),
    })

    api = falcon.API(media_type='application/msgpack')

    api.req_options.media_handlers = handlers
    api.resp_options.media_handlers = handlers
    ```

    Alternatively, if you would like to add an additional handler such as MessagePack, this can be easily done in the following manner:

    ``` python
    import falcon
    from falcon import media


    extra_handlers = {
        'application/msgpack': media.MessagePackHandler(),
    }

    api = falcon.API()

    api.req_options.media_handlers.update(extra_handlers)
    api.resp_options.media_handlers.update(extra_handlers)
    ```

    ## Supported Handler Types
- name: falcon.Request
  id: api/request_and_response#falcon.Request
  summary: Represents a client’s HTTP request
  belongs_to: Request & Response
  description: |-
    `class falcon.Request(env, options=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request)

    Represents a client’s HTTP request.

    Note

    `Request` is not meant to be instantiated directly by responders.

    |                    |                                                                                                                                                                   |
    |--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:        | **env** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)")) – A WSGI environment dict passed in from the server. See also PEP-3333. |
    | Keyword Arguments: |                                                                                                                                                                   |
    |                    | **options** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)")) – Set of global options passed from the API handler.                |
- name: falcon.Request.accept
  id: api/request_and_response#falcon.Request.accept
  summary: Value of the Accept header, or ‘/’ if the header is missing
  belongs_to: Request & Response
  description: |-
    `accept`

    Value of the Accept header, or ‘*/*’ if the header is missing.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.access_route
  id: api/request_and_response#falcon.Request.access_route
  summary: IP address of the original client, as well as any known addresses of proxies fronting the WSGI server
  belongs_to: Request & Response
  description: |-
    `access_route`

    IP address of the original client, as well as any known addresses of proxies fronting the WSGI server.

    The following request headers are checked, in order of preference, to determine the addresses:

    - `Forwarded`
    - `X-Forwarded-For`
    - `X-Real-IP`

    If none of these headers are available, the value of [`remote_addr`](#falcon.Request.remote_addr "falcon.Request.remote_addr") is used instead.

    Note

    Per [RFC 7239](https://tools.ietf.org/html/rfc7239), the access route may contain “unknown” and obfuscated identifiers, in addition to IPv4 and IPv6 addresses

    Warning

    Headers can be forged by any client or proxy. Use this property with caution and validate all values before using them. Do not rely on the access route to authorize requests.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.7)") |
- name: falcon.Request.app
  id: api/request_and_response#falcon.Request.app
  summary: The initial portion of the request URI’s path that corresponds to the application object, so that the application knows its virtual “location”. This may be an empty string, if the application corresponds to the “root” of the server
  belongs_to: Request & Response
  description: |-
    `app`

    The initial portion of the request URI’s path that corresponds to the application object, so that the application knows its virtual “location”. This may be an empty string, if the application corresponds to the “root” of the server.

    (Corresponds to the “SCRIPT_NAME” environ variable defined by PEP-3333.)

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.auth
  id: api/request_and_response#falcon.Request.auth
  summary: Value of the Authorization header, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `auth`

    Value of the Authorization header, or `None` if the header is missing.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.bounded_stream
  id: api/request_and_response#falcon.Request.bounded_stream
  summary: File-like wrapper around stream to normalize certain differences between the native input objects employed by different WSGI servers
  belongs_to: Request & Response
  description: |-
    `bounded_stream`

    File-like wrapper around `stream` to normalize certain differences between the native input objects employed by different WSGI servers. In particular, `bounded_stream` is aware of the expected Content-Length of the body, and will never block on out-of-bounds reads, assuming the client does not stall while transmitting the data to the server.

    For example, the following will not block when Content-Length is 0 or the header is missing altogether:

    ``` python
    data = req.bounded_stream.read()
    ```

    This is also safe:

    ``` python
    doc = json.load(req.bounded_stream)
    ```
- name: falcon.Request.client_accepts()
  id: api/request_and_response#falcon.Request.client_accepts
  summary: Determine whether or not the client accepts a given media type
  belongs_to: Request & Response
  description: |-
    `client_accepts(media_type)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.client_accepts)

    Determine whether or not the client accepts a given media type.

    |              |                                                                                                                                   |
    |--------------|-----------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **media_type** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – An Internet media type to check. |
    | Returns:     | `True` if the client has indicated in the Accept header that it accepts the specified media type. Otherwise, returns `False`.     |
    | Return type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)")                                                  |
- name: falcon.Request.client_accepts_json
  id: api/request_and_response#falcon.Request.client_accepts_json
  summary: True if the Accept header indicates that the client is willing to receive JSON, otherwise False
  belongs_to: Request & Response
  description: |-
    `client_accepts_json`

    `True` if the Accept header indicates that the client is willing to receive JSON, otherwise `False`.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.Request.client_accepts_msgpack
  id: api/request_and_response#falcon.Request.client_accepts_msgpack
  summary: True if the Accept header indicates that the client is willing to receive MessagePack, otherwise False
  belongs_to: Request & Response
  description: |-
    `client_accepts_msgpack`

    `True` if the Accept header indicates that the client is willing to receive MessagePack, otherwise `False`.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.Request.client_accepts_xml
  id: api/request_and_response#falcon.Request.client_accepts_xml
  summary: True if the Accept header indicates that the client is willing to receive XML, otherwise False
  belongs_to: Request & Response
  description: |-
    `client_accepts_xml`

    `True` if the Accept header indicates that the client is willing to receive XML, otherwise `False`.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.Request.client_prefers()
  id: api/request_and_response#falcon.Request.client_prefers
  summary: Return the client’s preferred media type, given several choices
  belongs_to: Request & Response
  description: |-
    `client_prefers(media_types)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.client_prefers)

    Return the client’s preferred media type, given several choices.

    |              |                                                                                                                                                                                    |
    |--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **media_types** (*iterable of str*) – One or more Internet media types from which to choose the client’s preferred type. This value **must** be an iterable collection of strings. |
    | Returns:     | The client’s preferred media type, based on the Accept header. Returns `None` if the client does not accept any of the given types.                                                |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")                                                                                                      |

    `context_type`

    alias of `falcon.util.structures.Context`
- name: falcon.Request.content_length
  id: api/request_and_response#falcon.Request.content_length
  summary: Value of the Content-Length header converted to an int, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `content_length`

    Value of the Content-Length header converted to an `int`, or `None` if the header is missing.

    |       |                                                                                |
    |-------|--------------------------------------------------------------------------------|
    | Type: | [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.7)") |
- name: falcon.Request.content_type
  id: api/request_and_response#falcon.Request.content_type
  summary: Value of the Content-Type header, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `content_type`

    Value of the Content-Type header, or `None` if the header is missing.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.context
  id: api/request_and_response#falcon.Request.context
  summary: Empty object to hold any data (in its attributes) about the request which is specific to your app (e.g
  belongs_to: Request & Response
  description: |-
    `context`

    Empty object to hold any data (in its attributes) about the request which is specific to your app (e.g. session object). Falcon itself will not interact with this attribute after it has been initialized.

    Note

    **New in 2.0:** the default `context_type` (see below) was changed from dict to a bare class, and the preferred way to pass request-specific data is now to set attributes directly on the `context` object, for example:

    ``` python
    req.context.role = 'trial'
    req.context.user = 'guest'
    ```

    |       |                                                                                      |
    |-------|--------------------------------------------------------------------------------------|
    | Type: | [object](https://docs.python.org/3/library/functions.html#object "(in Python v3.7)") |
- name: falcon.Request.context_type
  id: api/request_and_response#falcon.Request.context_type
  summary: Class variable that determines the factory or type to use for initializing the context attribute
  belongs_to: Request & Response
  description: |-
    `context_type`

    Class variable that determines the factory or type to use for initializing the `context` attribute. By default, the framework will instantiate bare objects (instances of the bare [`falcon.Context`](util#falcon.Context "falcon.Context") class). However, you may override this behavior by creating a custom child class of `falcon.Request`, and then passing that new class to `falcon.API()` by way of the latter’s `request_type` parameter.

    Note

    When overriding `context_type` with a factory function (as opposed to a class), the function is called like a method of the current Request instance. Therefore the first argument is the Request instance itself (self).

    |       |       |
    |-------|-------|
    | Type: | class |
- name: falcon.Request.cookies
  id: api/request_and_response#falcon.Request.cookies
  summary: A dict of name/value cookie pairs
  belongs_to: Request & Response
  description: |-
    `cookies`

    A dict of name/value cookie pairs. The returned object should be treated as read-only to avoid unintended side-effects. If a cookie appears more than once in the request, only the first value encountered will be made available here.

    See also: [`get_cookie_values()`](#falcon.Request.get_cookie_values "falcon.Request.get_cookie_values")

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.Request.date
  id: api/request_and_response#falcon.Request.date
  summary: Value of the Date header, converted to a datetime instance
  belongs_to: Request & Response
  description: |-
    `date`

    Value of the Date header, converted to a `datetime` instance. The header value is assumed to conform to RFC 1123.

    |       |          |
    |-------|----------|
    | Type: | datetime |
- name: falcon.Request.env
  id: api/request_and_response#falcon.Request.env
  summary: Reference to the WSGI environ dict passed in from the server
  belongs_to: Request & Response
  description: |-
    `env`

    Reference to the WSGI environ `dict` passed in from the server. (See also PEP-3333.)

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.Request.expect
  id: api/request_and_response#falcon.Request.expect
  summary: Value of the Expect header, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `expect`

    Value of the Expect header, or `None` if the header is missing.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.forwarded
  id: api/request_and_response#falcon.Request.forwarded
  summary: Value of the Forwarded header, as a parsed list of falcon.Forwarded objects, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `forwarded`

    Value of the Forwarded header, as a parsed list of [`falcon.Forwarded`](#falcon.Forwarded "falcon.Forwarded") objects, or `None` if the header is missing. If the header value is malformed, Falcon will make a best effort to parse what it can.

    (See also: [RFC 7239, Section 4](https://tools.ietf.org/html/rfc7239#section-4))

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.7)") |
- name: falcon.Request.forwarded_host
  id: api/request_and_response#falcon.Request.forwarded_host
  summary: Original host request header as received by the first proxy in front of the application server
  belongs_to: Request & Response
  description: |-
    `forwarded_host`

    Original host request header as received by the first proxy in front of the application server.

    The following request headers are checked, in order of preference, to determine the forwarded scheme:

    - `Forwarded`
    - `X-Forwarded-Host`

    If none of the above headers are available, or if the Forwarded header is available but the “host” parameter is not included in the first hop, the value of [`host`](#falcon.Request.host "falcon.Request.host") is returned instead.

    Note

    Reverse proxies are often configured to set the Host header directly to the one that was originally requested by the user agent; in that case, using [`host`](#falcon.Request.host "falcon.Request.host") is sufficient.

    (See also: [RFC 7239, Section 4](https://tools.ietf.org/html/rfc7239#section-4))

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.forwarded_prefix
  id: api/request_and_response#falcon.Request.forwarded_prefix
  summary: The prefix of the original URI for proxied requests
  belongs_to: Request & Response
  description: |-
    `forwarded_prefix`

    The prefix of the original URI for proxied requests. Uses [`forwarded_scheme`](#falcon.Request.forwarded_scheme "falcon.Request.forwarded_scheme") and [`forwarded_host`](#falcon.Request.forwarded_host "falcon.Request.forwarded_host") in order to reconstruct the original URI.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.forwarded_scheme
  id: api/request_and_response#falcon.Request.forwarded_scheme
  summary: Original URL scheme requested by the user agent, if the request was proxied
  belongs_to: Request & Response
  description: |-
    `forwarded_scheme`

    Original URL scheme requested by the user agent, if the request was proxied. Typical values are ‘http’ or ‘https’.

    The following request headers are checked, in order of preference, to determine the forwarded scheme:

    - `Forwarded`
    - `X-Forwarded-For`

    If none of these headers are available, or if the Forwarded header is available but does not contain a “proto” parameter in the first hop, the value of [`scheme`](#falcon.Request.scheme "falcon.Request.scheme") is returned instead.

    (See also: [RFC 7239, Section 1](https://tools.ietf.org/html/rfc7239#section-1))

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.forwarded_uri
  id: api/request_and_response#falcon.Request.forwarded_uri
  summary: Original URI for proxied requests
  belongs_to: Request & Response
  description: |-
    `forwarded_uri`

    Original URI for proxied requests. Uses [`forwarded_scheme`](#falcon.Request.forwarded_scheme "falcon.Request.forwarded_scheme") and [`forwarded_host`](#falcon.Request.forwarded_host "falcon.Request.forwarded_host") in order to reconstruct the original URI requested by the user agent.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.get_cookie_values()
  id: api/request_and_response#falcon.Request.get_cookie_values
  summary: Return all values provided in the Cookie header for the named cookie
  belongs_to: Request & Response
  description: |-
    `get_cookie_values(name)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_cookie_values)

    Return all values provided in the Cookie header for the named cookie.

    (See also: [Getting Cookies](cookies#getting-cookies))

    |              |                                                                                                                                                                                                                                                                                                           |
    |--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – Cookie name, case-sensitive.                                                                                                                                                                                   |
    | Returns:     | Ordered list of all values specified in the Cookie header for the named cookie, or `None` if the cookie was not included in the request. If the cookie is specified more than once in the header, the returned list of values will preserve the ordering of the individual `cookie-pair`’s in the header. |
    | Return type: | [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.7)")                                                                                                                                                                                                                           |
- name: falcon.Request.get_header()
  id: api/request_and_response#falcon.Request.get_header
  summary: Retrieve the raw string value for the given header
  belongs_to: Request & Response
  description: |-
    `get_header(name, required=False, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_header)

    Retrieve the raw string value for the given header.

    [TABLE]
- name: falcon.Request.get_header_as_datetime()
  id: api/request_and_response#falcon.Request.get_header_as_datetime
  summary: Return an HTTP header with HTTP-Date values as a datetime
  belongs_to: Request & Response
  description: |-
    `get_header_as_datetime(header, required=False, obs_date=False)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_header_as_datetime)

    Return an HTTP header with HTTP-Date values as a datetime.

    [TABLE]
- name: falcon.Request.get_param()
  id: api/request_and_response#falcon.Request.get_param
  summary: Return the raw value of a query string parameter as a string
  belongs_to: Request & Response
  description: |-
    `get_param(name, required=False, store=None, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param)

    Return the raw value of a query string parameter as a string.

    Note

    If an HTML form is POSTed to the API using the *application/x-www-form-urlencoded* media type, Falcon can automatically parse the parameters from the request body and merge them into the query string parameters. To enable this functionality, set [`auto_parse_form_urlencoded`](api#falcon.RequestOptions.auto_parse_form_urlencoded "falcon.RequestOptions.auto_parse_form_urlencoded") to `True` via [`API.req_options`](api#falcon.API.req_options "falcon.API.req_options").

    Note

    Similar to the way multiple keys in form data is handled, if a query parameter is assigned a comma-separated list of values (e.g., `foo=a,b,c`), only one of those values will be returned, and it is undefined which one. Use [`get_param_as_list()`](#falcon.Request.get_param_as_list "falcon.Request.get_param_as_list") to retrieve all the values.

    [TABLE]
- name: falcon.Request.get_param_as_bool()
  id: api/request_and_response#falcon.Request.get_param_as_bool
  summary: Return the value of a query string parameter as a boolean
  belongs_to: Request & Response
  description: |-
    `get_param_as_bool(name, required=False, store=None, blank_as_true=True, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_bool)

    Return the value of a query string parameter as a boolean.

    This method treats valueless parameters as flags. By default, if no value is provided for the parameter in the query string, `True` is assumed and returned. If the parameter is missing altogether, `None` is returned as with other `get_param_*()` methods, which can be easily treated as falsy by the caller as needed.

    The following boolean strings are supported:

    ``` python
    TRUE_STRINGS = ('true', 'True', 'yes', '1', 'on')
    FALSE_STRINGS = ('false', 'False', 'no', '0', 'off')
    ```

    [TABLE]
- name: falcon.Request.get_param_as_date()
  id: api/request_and_response#falcon.Request.get_param_as_date
  summary: Return the value of a query string parameter as a date
  belongs_to: Request & Response
  description: |-
    `get_param_as_date(name, format_string='%Y-%m-%d', required=False, store=None, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_date)

    Return the value of a query string parameter as a date.

    [TABLE]
- name: falcon.Request.get_param_as_datetime()
  id: api/request_and_response#falcon.Request.get_param_as_datetime
  summary: Return the value of a query string parameter as a datetime
  belongs_to: Request & Response
  description: |-
    `get_param_as_datetime(name, format_string='%Y-%m-%dT%H:%M:%SZ', required=False, store=None, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_datetime)

    Return the value of a query string parameter as a datetime.

    [TABLE]
- name: falcon.Request.get_param_as_float()
  id: api/request_and_response#falcon.Request.get_param_as_float
  summary: Return the value of a query string parameter as an float
  belongs_to: Request & Response
  description: |-
    `get_param_as_float(name, required=False, min_value=None, max_value=None, store=None, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_float)

    Return the value of a query string parameter as an float.

    [TABLE]

    Raises

    HTTPBadRequest: The param was not found in the request, even though

    it was required to be there, or it was found but could not be converted to an `float`. Also raised if the param’s value falls outside the given interval, i.e., the value must be in the interval: min_value \<= value \<= max_value to avoid triggering an error.
- name: falcon.Request.get_param_as_int()
  id: api/request_and_response#falcon.Request.get_param_as_int
  summary: Return the value of a query string parameter as an int
  belongs_to: Request & Response
  description: |-
    `get_param_as_int(name, required=False, min_value=None, max_value=None, store=None, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_int)

    Return the value of a query string parameter as an int.

    [TABLE]

    Raises

    HTTPBadRequest: The param was not found in the request, even though

    it was required to be there, or it was found but could not be converted to an `int`. Also raised if the param’s value falls outside the given interval, i.e., the value must be in the interval: min_value \<= value \<= max_value to avoid triggering an error.
- name: falcon.Request.get_param_as_json()
  id: api/request_and_response#falcon.Request.get_param_as_json
  summary: Return the decoded JSON value of a query string parameter
  belongs_to: Request & Response
  description: |-
    `get_param_as_json(name, required=False, store=None, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_json)

    Return the decoded JSON value of a query string parameter.

    Given a JSON value, decode it to an appropriate Python type, (e.g., `dict`, `list`, `str`, `int`, `bool`, etc.)

    [TABLE]
- name: falcon.Request.get_param_as_list()
  id: api/request_and_response#falcon.Request.get_param_as_list
  summary: Return the value of a query string parameter as a list
  belongs_to: Request & Response
  description: |-
    `get_param_as_list(name, transform=None, required=False, store=None, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_list)

    Return the value of a query string parameter as a list.

    List items must be comma-separated or must be provided as multiple instances of the same param in the query string ala *application/x-www-form-urlencoded*.

    [TABLE]
- name: falcon.Request.get_param_as_uuid()
  id: api/request_and_response#falcon.Request.get_param_as_uuid
  summary: Return the value of a query string parameter as an UUID
  belongs_to: Request & Response
  description: |-
    `get_param_as_uuid(name, required=False, store=None, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_uuid)

    Return the value of a query string parameter as an UUID.

    The value to convert must conform to the standard UUID string representation per RFC 4122. For example, the following strings are all valid:

    ``` python
    # Lowercase
    '64be949b-3433-4d36-a4a8-9f19d352fee8'

    # Uppercase
    'BE71ECAA-F719-4D42-87FD-32613C2EEB60'

    # Mixed
    '81c8155C-D6de-443B-9495-39Fa8FB239b5'
    ```

    [TABLE]

    Raises

    HTTPBadRequest: The param was not found in the request, even though

    it was required to be there, or it was found but could not be converted to a `UUID`.
- name: falcon.Request.has_param()
  id: api/request_and_response#falcon.Request.has_param
  summary: Determine whether or not the query string parameter already exists
  belongs_to: Request & Response
  description: |-
    `has_param(name)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.has_param)

    Determine whether or not the query string parameter already exists.

    |              |                                                                                                                                           |
    |--------------|-------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – Parameter name, case-sensitive (e.g., ‘sort’). |
    | Returns:     | `True` if param is found, or `False` if param is not found.                                                                               |
    | Return type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)")                                                          |
- name: falcon.Request.headers
  id: api/request_and_response#falcon.Request.headers
  summary: Raw HTTP headers from the request with canonical dash-separated names
  belongs_to: Request & Response
  description: |-
    `headers`

    Raw HTTP headers from the request with canonical dash-separated names. Parsing all the headers to create this dict is done the first time this attribute is accessed, and the returned object should be treated as read-only. Note that this parsing can be costly, so unless you need all the headers in this format, you should instead use the `get_header()` method or one of the convenience attributes to get a value for a specific header.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.Request.host
  id: api/request_and_response#falcon.Request.host
  summary: null
  belongs_to: Request & Response
  description: |-
    `host`

    Host request header field

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.if_match
  id: api/request_and_response#falcon.Request.if_match
  summary: Value of the If-Match header, as a parsed list of falcon.ETag objects or None if the header is missing or its value is blank
  belongs_to: Request & Response
  description: |-
    `if_match`

    Value of the If-Match header, as a parsed list of [`falcon.ETag`](util#falcon.ETag "falcon.ETag") objects or `None` if the header is missing or its value is blank.

    This property provides a list of all `entity-tags` in the header, both strong and weak, in the same order as listed in the header.

    (See also: [RFC 7232, Section 3.1](https://tools.ietf.org/html/rfc7232#section-3.1))

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.7)") |
- name: falcon.Request.if_modified_since
  id: api/request_and_response#falcon.Request.if_modified_since
  summary: Value of the If-Modified-Since header, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `if_modified_since`

    Value of the If-Modified-Since header, or `None` if the header is missing.

    |       |          |
    |-------|----------|
    | Type: | datetime |
- name: falcon.Request.if_none_match
  id: api/request_and_response#falcon.Request.if_none_match
  summary: Value of the If-None-Match header, as a parsed list of falcon.ETag objects or None if the header is missing or its value is blank
  belongs_to: Request & Response
  description: |-
    `if_none_match`

    Value of the If-None-Match header, as a parsed list of [`falcon.ETag`](util#falcon.ETag "falcon.ETag") objects or `None` if the header is missing or its value is blank.

    This property provides a list of all `entity-tags` in the header, both strong and weak, in the same order as listed in the header.

    (See also: [RFC 7232, Section 3.2](https://tools.ietf.org/html/rfc7232#section-3.2))

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.7)") |
- name: falcon.Request.if_range
  id: api/request_and_response#falcon.Request.if_range
  summary: Value of the If-Range header, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `if_range`

    Value of the If-Range header, or `None` if the header is missing.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.if_unmodified_since
  id: api/request_and_response#falcon.Request.if_unmodified_since
  summary: Value of the If-Unmodified-Since header, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `if_unmodified_since`

    Value of the If-Unmodified-Since header, or `None` if the header is missing.

    |       |          |
    |-------|----------|
    | Type: | datetime |
- name: falcon.Request.log_error()
  id: api/request_and_response#falcon.Request.log_error
  summary: Write an error message to the server’s log
  belongs_to: Request & Response
  description: |-
    `log_error(message)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.log_error)

    Write an error message to the server’s log.

    Prepends timestamp and request info to message, and writes the result out to the WSGI server’s error stream (`wsgi.error`).

    |             |                                                                                                                                                                                                          |
    |-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters: | **message** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") *or* *unicode*) – Description of the problem. On Python 2, instances of `unicode` will be converted to UTF-8. |
- name: falcon.Request.media
  id: api/request_and_response#falcon.Request.media
  summary: Returns a deserialized form of the request stream
  belongs_to: Request & Response
  description: |-
    `media`

    Returns a deserialized form of the request stream. When called, it will attempt to deserialize the request stream using the Content-Type header as well as the media-type handlers configured via [`falcon.RequestOptions`](api#falcon.RequestOptions "falcon.RequestOptions").

    See [Media](media#media) for more information regarding media handling.

    Warning

    This operation will consume the request stream the first time it’s called and cache the results. Follow-up calls will just retrieve a cached version of the object.

    |       |                                                                                      |
    |-------|--------------------------------------------------------------------------------------|
    | Type: | [object](https://docs.python.org/3/library/functions.html#object "(in Python v3.7)") |
- name: falcon.Request.method
  id: api/request_and_response#falcon.Request.method
  summary: null
  belongs_to: Request & Response
  description: |-
    `method`

    HTTP method requested (e.g., ‘GET’, ‘POST’, etc.)

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.netloc
  id: api/request_and_response#falcon.Request.netloc
  summary: Returns the ‘host:port’ portion of the request URL
  belongs_to: Request & Response
  description: |-
    `netloc`

    Returns the ‘host:port’ portion of the request URL. The port may be ommitted if it is the default one for the URL’s schema (80 for HTTP and 443 for HTTPS).

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.options
  id: api/request_and_response#falcon.Request.options
  summary: Set of global options passed from the API handler
  belongs_to: Request & Response
  description: |-
    `options`

    Set of global options passed from the API handler.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.Request.params
  id: api/request_and_response#falcon.Request.params
  summary: The mapping of request query parameter names to their values
  belongs_to: Request & Response
  description: |-
    `params`

    The mapping of request query parameter names to their values. Where the parameter appears multiple times in the query string, the value mapped to that parameter key will be a list of all the values in the order seen.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.Request.path
  id: api/request_and_response#falcon.Request.path
  summary: Path portion of the request URI (not including query string)
  belongs_to: Request & Response
  description: |-
    `path`

    Path portion of the request URI (not including query string).

    Note

    `req.path` may be set to a new value by a `process_request()` middleware method in order to influence routing. If the original request path was URL encoded, it will be decoded before being returned by this attribute. If this attribute is to be used by the app for any upstream requests, any non URL-safe characters in the path must be URL encoded back before making the request.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.port
  id: api/request_and_response#falcon.Request.port
  summary: Port used for the request
  belongs_to: Request & Response
  description: |-
    `port`

    Port used for the request. If the request URI does not specify a port, the default one for the given schema is returned (80 for HTTP and 443 for HTTPS).

    |       |                                                                                |
    |-------|--------------------------------------------------------------------------------|
    | Type: | [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.7)") |
- name: falcon.Request.prefix
  id: api/request_and_response#falcon.Request.prefix
  summary: The prefix of the request URI, including scheme, host, and WSGI app (if any)
  belongs_to: Request & Response
  description: |-
    `prefix`

    The prefix of the request URI, including scheme, host, and WSGI app (if any).

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.query_string
  id: api/request_and_response#falcon.Request.query_string
  summary: Query string portion of the request URI, without the preceding ‘?’ character
  belongs_to: Request & Response
  description: |-
    `query_string`

    Query string portion of the request URI, without the preceding ‘?’ character.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.range
  id: api/request_and_response#falcon.Request.range
  summary: A 2-member tuple parsed from the value of the Range header
  belongs_to: Request & Response
  description: |-
    `range`

    A 2-member `tuple` parsed from the value of the Range header.

    The two members correspond to the first and last byte positions of the requested resource, inclusive. Negative indices indicate offset from the end of the resource, where -1 is the last byte, -2 is the second-to-last byte, and so forth.

    Only continous ranges are supported (e.g., “bytes=0-0,-1” would result in an HTTPBadRequest exception when the attribute is accessed.)

    |       |              |
    |-------|--------------|
    | Type: | tuple of int |
- name: falcon.Request.range_unit
  id: api/request_and_response#falcon.Request.range_unit
  summary: null
  belongs_to: Request & Response
  description: |-
    `range_unit`

    Unit of the range parsed from the value of the Range header, or `None` if the header is missing

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.referer
  id: api/request_and_response#falcon.Request.referer
  summary: Value of the Referer header, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `referer`

    Value of the Referer header, or `None` if the header is missing.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.relative_uri
  id: api/request_and_response#falcon.Request.relative_uri
  summary: The path and query string portion of the request URI, omitting the scheme and host
  belongs_to: Request & Response
  description: |-
    `relative_uri`

    The path and query string portion of the request URI, omitting the scheme and host.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.remote_addr
  id: api/request_and_response#falcon.Request.remote_addr
  summary: IP address of the closest client or proxy to the WSGI server
  belongs_to: Request & Response
  description: |-
    `remote_addr`

    IP address of the closest client or proxy to the WSGI server.

    This property is determined by the value of `REMOTE_ADDR` in the WSGI environment dict. Since this address is not derived from an HTTP header, clients and proxies can not forge it.

    Note

    If your application is behind one or more reverse proxies, you can use [`access_route`](#falcon.Request.access_route "falcon.Request.access_route") to retrieve the real IP address of the client.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.scheme
  id: api/request_and_response#falcon.Request.scheme
  summary: URL scheme used for the request
  belongs_to: Request & Response
  description: |-
    `scheme`

    URL scheme used for the request. Either ‘http’ or ‘https’.

    Note

    If the request was proxied, the scheme may not match what was originally requested by the client. [`forwarded_scheme`](#falcon.Request.forwarded_scheme "falcon.Request.forwarded_scheme") can be used, instead, to handle such cases.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.stream
  id: api/request_and_response#falcon.Request.stream
  summary: File-like input object for reading the body of the request, if any
  belongs_to: Request & Response
  description: |-
    `stream`

    File-like input object for reading the body of the request, if any. This object provides direct access to the server’s data stream and is non-seekable. In order to avoid unintended side effects, and to provide maximum flexibility to the application, Falcon itself does not buffer or spool the data in any way.

    Since this object is provided by the WSGI server itself, rather than by Falcon, it may behave differently depending on how you host your app. For example, attempting to read more bytes than are expected (as determined by the Content-Length header) may or may not block indefinitely. It’s a good idea to test your WSGI server to find out how it behaves.

    This can be particulary problematic when a request body is expected, but none is given. In this case, the following call blocks under certain WSGI servers:

    ``` python
    # Blocks if Content-Length is 0
    data = req.stream.read()
    ```

    The workaround is fairly straightforward, if verbose:

    ``` python
    # If Content-Length happens to be 0, or the header is
    # missing altogether, this will not block.
    data = req.stream.read(req.content_length or 0)
    ```

    Alternatively, when passing the stream directly to a consumer, it may be necessary to branch off the value of the Content-Length header:

    ``` python
    if req.content_length:
        doc = json.load(req.stream)
    ```

    For a slight performance cost, you may instead wish to use [`bounded_stream`](#falcon.Request.bounded_stream "falcon.Request.bounded_stream"), which wraps the native WSGI input object to normalize its behavior.

    Note

    If an HTML form is POSTed to the API using the *application/x-www-form-urlencoded* media type, and the [`auto_parse_form_urlencoded`](api#falcon.RequestOptions.auto_parse_form_urlencoded "falcon.RequestOptions.auto_parse_form_urlencoded") option is set, the framework will consume `stream` in order to parse the parameters and merge them into the query string parameters. In this case, the stream will be left at EOF.
- name: falcon.Request.subdomain
  id: api/request_and_response#falcon.Request.subdomain
  summary: Leftmost (i.e., most specific) subdomain from the hostname
  belongs_to: Request & Response
  description: |-
    `subdomain`

    Leftmost (i.e., most specific) subdomain from the hostname. If only a single domain name is given, `subdomain` will be `None`.

    Note

    If the hostname in the request is an IP address, the value for `subdomain` is undefined.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.uri
  id: api/request_and_response#falcon.Request.uri
  summary: The fully-qualified URI for the request
  belongs_to: Request & Response
  description: |-
    `uri`

    The fully-qualified URI for the request.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.uri_template
  id: api/request_and_response#falcon.Request.uri_template
  summary: The template for the route that was matched for this request
  belongs_to: Request & Response
  description: |-
    `uri_template`

    The template for the route that was matched for this request. May be `None` if the request has not yet been routed, as would be the case for `process_request()` middleware methods. May also be `None` if your app uses a custom routing engine and the engine does not provide the URI template when resolving a route.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.url
  id: api/request_and_response#falcon.Request.url
  summary: Alias for uri
  belongs_to: Request & Response
  description: |-
    `url`

    Alias for `uri`.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Request.user_agent
  id: api/request_and_response#falcon.Request.user_agent
  summary: Value of the User-Agent header, or None if the header is missing
  belongs_to: Request & Response
  description: |-
    `user_agent`

    Value of the User-Agent header, or `None` if the header is missing.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.RequestOptions
  id: api/api#falcon.RequestOptions
  summary: Defines a set of configurable request options
  belongs_to: The API Class
  description: |-
    `class falcon.RequestOptions` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#RequestOptions)

    Defines a set of configurable request options.

    An instance of this class is exposed via [`API.req_options`](#falcon.API.req_options "falcon.API.req_options") for configuring certain [`Request`](request_and_response#falcon.Request "falcon.Request") behaviors.
- name: falcon.RequestOptions.auto_parse_form_urlencoded
  id: api/api#falcon.RequestOptions.auto_parse_form_urlencoded
  summary: Set to True in order to automatically consume the request stream and merge the results into the request’s query string params when the request’s content type is application/x-www-form-urlencoded (default False)
  belongs_to: The API Class
  description: |-
    `auto_parse_form_urlencoded`

    Set to `True` in order to automatically consume the request stream and merge the results into the request’s query string params when the request’s content type is *application/x-www-form-urlencoded* (default `False`).

    Enabling this option makes the form parameters accessible via [`params`](request_and_response#falcon.Request.params "falcon.Request.params"), [`get_param()`](request_and_response#falcon.Request.get_param "falcon.Request.get_param"), etc.

    Warning

    When this option is enabled, the request’s body stream will be left at EOF. The original data is not retained by the framework.

    Note

    The character encoding for fields, before percent-encoding non-ASCII bytes, is assumed to be UTF-8. The special `_charset_` field is ignored if present.

    Falcon expects form-encoded request bodies to be encoded according to the standard W3C algorithm (see also [http://goo.gl/6rlcux](http://goo.gl/6rlcux)).
- name: falcon.RequestOptions.auto_parse_qs_csv
  id: api/api#falcon.RequestOptions.auto_parse_qs_csv
  summary: Set to True to split query string values on any non-percent-encoded commas (default False)
  belongs_to: The API Class
  description: |-
    `auto_parse_qs_csv`

    Set to `True` to split query string values on any non-percent-encoded commas (default `False`). When `False`, values containing commas are left as-is. In this mode, list items are taken only from multiples of the same parameter name within the query string (i.e. `/?t=1,2,3&t=4` becomes `['1,2,3', '4']`). When `auto_parse_qs_csv` is set to `True`, the query string value is also split on non-percent-encoded commas and these items are added to the final list (i.e. `/?t=1,2,3&t=4` becomes `['1', '2', '3', '4']`).
- name: falcon.RequestOptions.default_media_type
  id: api/api#falcon.RequestOptions.default_media_type
  summary: The default media-type to use when deserializing a response
  belongs_to: The API Class
  description: |-
    `default_media_type`

    The default media-type to use when deserializing a response. This value is normally set to the media type provided when a [`falcon.API`](#falcon.API "falcon.API") is initialized; however, if created independently, this will default to the `DEFAULT_MEDIA_TYPE` specified by Falcon.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.RequestOptions.keep_blank_qs_values
  id: api/api#falcon.RequestOptions.keep_blank_qs_values
  summary: Set to False to ignore query string params that have missing or blank values (default True)
  belongs_to: The API Class
  description: |-
    `keep_blank_qs_values`

    Set to `False` to ignore query string params that have missing or blank values (default `True`). For comma-separated values, this option also determines whether or not empty elements in the parsed list are retained.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.RequestOptions.media_handlers
  id: api/api#falcon.RequestOptions.media_handlers
  summary: A dict-like object that allows you to configure the media-types that you would like to handle
  belongs_to: The API Class
  description: |-
    `media_handlers`

    A dict-like object that allows you to configure the media-types that you would like to handle. By default, a handler is provided for the `application/json` media type.

    |       |                                                                 |
    |-------|-----------------------------------------------------------------|
    | Type: | [Handlers](media#falcon.media.Handlers "falcon.media.Handlers") |
- name: falcon.RequestOptions.strip_url_path_trailing_slash
  id: api/api#falcon.RequestOptions.strip_url_path_trailing_slash
  summary: Set to True in order to strip the trailing slash, if present, at the end of the URL path (default False)
  belongs_to: The API Class
  description: |-
    `strip_url_path_trailing_slash`

    Set to `True` in order to strip the trailing slash, if present, at the end of the URL path (default `False`). When this option is enabled, the URL path is normalized by stripping the trailing slash character. This lets the application define a single route to a resource for a path that may or may not end in a forward slash. However, this behavior can be problematic in certain cases, such as when working with authentication schemes that employ URL-based signatures.
- name: falcon.Response
  id: api/request_and_response#falcon.Response
  summary: Represents an HTTP response to a client request
  belongs_to: Request & Response
  description: |-
    `class falcon.Response(options=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response)

    Represents an HTTP response to a client request.

    Note

    `Response` is not meant to be instantiated directly by responders.

    |                    |                                                                                                                                                    |
    |--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|
    | Keyword Arguments: |                                                                                                                                                    |
    |                    | **options** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)")) – Set of global options passed from the API handler. |
- name: falcon.Response.accept_ranges
  id: api/request_and_response#falcon.Response.accept_ranges
  summary: Set the Accept-Ranges header
  belongs_to: Request & Response
  description: |-
    `accept_ranges`

    Set the Accept-Ranges header.

    The Accept-Ranges header field indicates to the client which range units are supported (e.g. “bytes”) for the target resource.

    If range requests are not supported for the target resource, the header may be set to “none” to advise the client not to attempt any such requests.

    Note

    “none” is the literal string, not Python’s built-in `None` type.
- name: falcon.Response.add_link()
  id: api/request_and_response#falcon.Response.add_link
  summary: Add a link header to the response
  belongs_to: Request & Response
  description: |-
    `add_link(target, rel, title=None, title_star=None, anchor=None, hreflang=None, type_hint=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.add_link)

    Add a link header to the response.

    (See also: [RFC 5988, Section 1](https://tools.ietf.org/html/rfc5988#section-1))

    Note

    Calling this method repeatedly will cause each link to be appended to the Link header value, separated by commas.

    Note

    So-called “link-extension” elements, as defined by RFC 5988, are not yet supported. See also Issue \#288.

    [TABLE]
- name: falcon.Response.append_header()
  id: api/request_and_response#falcon.Response.append_header
  summary: Set or append a header for this response
  belongs_to: Request & Response
  description: |-
    `append_header(name, value)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.append_header)

    Set or append a header for this response.

    If the header already exists, the new value will normally be appended to it, delimited by a comma. The notable exception to this rule is Set-Cookie, in which case a separate header line for each value will be included in the response.

    Note

    While this method can be used to efficiently append raw Set-Cookie headers to the response, you may find [`set_cookie()`](#falcon.Response.set_cookie "falcon.Response.set_cookie") to be more convenient.

    [TABLE]
- name: falcon.Response.body
  id: api/request_and_response#falcon.Response.body
  summary: String representing response content
  belongs_to: Request & Response
  description: |-
    `body`

    String representing response content.

    If set to a Unicode type (`unicode` in Python 2, or `str` in Python 3), Falcon will encode the text as UTF-8 in the response. If the content is already a byte string, use the [`data`](#falcon.Response.data "falcon.Response.data") attribute instead (it’s faster).

    |       |                                                                                          |
    |-------|------------------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") or unicode |
- name: falcon.Response.cache_control
  id: api/request_and_response#falcon.Response.cache_control
  summary: Set the Cache-Control header
  belongs_to: Request & Response
  description: |-
    `cache_control`

    Set the Cache-Control header.

    Used to set a list of cache directives to use as the value of the Cache-Control header. The list will be joined with “, ” to produce the value for the header.
- name: falcon.Response.complete
  id: api/request_and_response#falcon.Response.complete
  summary: Set to True from within a middleware method to signal to the framework that request processing should be short-circuited (see also Middleware)
  belongs_to: Request & Response
  description: |-
    `complete`

    Set to `True` from within a middleware method to signal to the framework that request processing should be short-circuited (see also [Middleware](middleware#middleware)).

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.Response.content_length
  id: api/request_and_response#falcon.Response.content_length
  summary: Set the Content-Length header
  belongs_to: Request & Response
  description: |-
    `content_length`

    Set the Content-Length header.

    This property can be used for responding to HEAD requests when you aren’t actually providing the response body, or when streaming the response. If either the `body` property or the `data` property is set on the response, the framework will force Content-Length to be the length of the given body bytes. Therefore, it is only necessary to manually set the content length when those properties are not used.

    Note

    In cases where the response content is a stream (readable file-like object), Falcon will not supply a Content-Length header to the WSGI server unless `content_length` is explicitly set. Consequently, the server may choose to use chunked encoding or one of the other strategies suggested by PEP-3333.
- name: falcon.Response.content_location
  id: api/request_and_response#falcon.Response.content_location
  summary: Set the Content-Location header
  belongs_to: Request & Response
  description: |-
    `content_location`

    Set the Content-Location header.

    This value will be URI encoded per RFC 3986. If the value that is being set is already URI encoded it should be decoded first or the header should be set manually using the set_header method.
- name: falcon.Response.content_range
  id: api/request_and_response#falcon.Response.content_range
  summary: A tuple to use in constructing a value for the Content-Range header
  belongs_to: Request & Response
  description: |-
    `content_range`

    A tuple to use in constructing a value for the Content-Range header.

    The tuple has the form (*start*, *end*, *length*, \[*unit*\]), where *start* and *end* designate the range (inclusive), and *length* is the total length, or ‘\*’ if unknown. You may pass `int`’s for these numbers (no need to convert to `str` beforehand). The optional value *unit* describes the range unit and defaults to ‘bytes’

    Note

    You only need to use the alternate form, ‘bytes \*/1234’, for responses that use the status ‘416 Range Not Satisfiable’. In this case, raising `falcon.HTTPRangeNotSatisfiable` will do the right thing.

    (See also: [RFC 7233, Section 4.2](https://tools.ietf.org/html/rfc7233#section-4.2))
- name: falcon.Response.content_type
  id: api/request_and_response#falcon.Response.content_type
  summary: Sets the Content-Type header
  belongs_to: Request & Response
  description: |-
    `content_type`

    Sets the Content-Type header.

    The `falcon` module provides a number of constants for common media types, including `falcon.MEDIA_JSON`, `falcon.MEDIA_MSGPACK`, `falcon.MEDIA_YAML`, `falcon.MEDIA_XML`, `falcon.MEDIA_HTML`, `falcon.MEDIA_JS`, `falcon.MEDIA_TEXT`, `falcon.MEDIA_JPEG`, `falcon.MEDIA_PNG`, and `falcon.MEDIA_GIF`.

    `context_type`

    alias of `falcon.util.structures.Context`
- name: falcon.Response.context
  id: api/request_and_response#falcon.Response.context
  summary: Dictionary to hold any data about the response which is specific to your app
  belongs_to: Request & Response
  description: |-
    `context`

    Dictionary to hold any data about the response which is specific to your app. Falcon itself will not interact with this attribute after it has been initialized.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |

    `context`

    Empty object to hold any data (in its attributes) about the response which is specific to your app (e.g. session object). Falcon itself will not interact with this attribute after it has been initialized.

    Note

    **New in 2.0:** the default `context_type` (see below) was changed from dict to a bare class, and the preferred way to pass response-specific data is now to set attributes directly on the `context` object, for example:

    ``` python
    resp.context.cache_strategy = 'lru'
    ```

    |       |                                                                                      |
    |-------|--------------------------------------------------------------------------------------|
    | Type: | [object](https://docs.python.org/3/library/functions.html#object "(in Python v3.7)") |
- name: falcon.Response.context_type
  id: api/request_and_response#falcon.Response.context_type
  summary: Class variable that determines the factory or type to use for initializing the context attribute
  belongs_to: Request & Response
  description: |-
    `context_type`

    Class variable that determines the factory or type to use for initializing the `context` attribute. By default, the framework will instantiate bare objects (instances of the bare [`falcon.Context`](util#falcon.Context "falcon.Context") class). However, you may override this behavior by creating a custom child class of `falcon.Response`, and then passing that new class to `falcon.API()` by way of the latter’s `response_type` parameter.

    Note

    When overriding `context_type` with a factory function (as opposed to a class), the function is called like a method of the current Response instance. Therefore the first argument is the Response instance itself (self).

    |       |       |
    |-------|-------|
    | Type: | class |
- name: falcon.Response.data
  id: api/request_and_response#falcon.Response.data
  summary: Byte string representing response content
  belongs_to: Request & Response
  description: |-
    `data`

    Byte string representing response content.

    Use this attribute in lieu of `body` when your content is already a byte string (`str` or `bytes` in Python 2, or simply `bytes` in Python 3). See also the note below.

    Note

    Under Python 2.x, if your content is of type `str`, using the `data` attribute instead of `body` is the most efficient approach. However, if your text is of type `unicode`, you will need to use the `body` attribute instead.

    Under Python 3.x, on the other hand, the 2.x `str` type can be thought of as having been replaced by what was once the `unicode` type, and so you will need to always use the `body` attribute for strings to ensure Unicode characters are properly encoded in the HTTP response.

    |       |                                                                                   |
    |-------|-----------------------------------------------------------------------------------|
    | Type: | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.7)") |
- name: falcon.Response.delete_header()
  id: api/request_and_response#falcon.Response.delete_header
  summary: Delete a header that was previously set for this response
  belongs_to: Request & Response
  description: |-
    `delete_header(name)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.delete_header)

    Delete a header that was previously set for this response.

    If the header was not previously set, nothing is done (no error is raised). Otherwise, all values set for the header will be removed from the response.

    Note that calling this method is equivalent to setting the corresponding header property (when said property is available) to `None`. For example:

    ``` python
    resp.etag = None
    ```

    Warning

    This method cannot be used with the Set-Cookie header. Instead, use [`unset_cookie()`](#falcon.Response.unset_cookie "falcon.Response.unset_cookie") to remove a cookie and ensure that the user agent expires its own copy of the data as well.

    |             |                                                                                                                                                                                                                                                                                                                   |
    |-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters: | **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – Header name (case-insensitive). Must be of type `str` or `StringType` and contain only US-ASCII characters. Under Python 2.x, the `unicode` type is also accepted, although such strings are also limited to US-ASCII. |
    | Raises:     | [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.7)") – `name` cannot be `'Set-Cookie'`.                                                                                                                                                                                |
- name: falcon.Response.downloadable_as
  id: api/request_and_response#falcon.Response.downloadable_as
  summary: Set the Content-Disposition header using the given filename
  belongs_to: Request & Response
  description: |-
    `downloadable_as`

    Set the Content-Disposition header using the given filename.

    The value will be used for the *filename* directive. For example, given `'report.pdf'`, the Content-Disposition header would be set to: `'attachment; filename="report.pdf"'`.
- name: falcon.Response.etag
  id: api/request_and_response#falcon.Response.etag
  summary: Set the ETag header
  belongs_to: Request & Response
  description: |-
    `etag`

    Set the ETag header.

    The ETag header will be wrapped with double quotes `"value"` in case the user didn’t pass it.
- name: falcon.Response.expires
  id: api/request_and_response#falcon.Response.expires
  summary: Set the Expires header
  belongs_to: Request & Response
  description: |-
    `expires`

    Set the Expires header. Set to a `datetime` (UTC) instance.

    Note

    Falcon will format the `datetime` as an HTTP date string.
- name: falcon.Response.get_header()
  id: api/request_and_response#falcon.Response.get_header
  summary: Retrieve the raw string value for the given header
  belongs_to: Request & Response
  description: |-
    `get_header(name, default=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.get_header)

    Retrieve the raw string value for the given header.

    Normally, when a header has multiple values, they will be returned as a single, comma-delimited string. However, the Set-Cookie header does not support this format, and so attempting to retrieve it will raise an error.

    |                    |                                                                                                                                                                                                                                                                 |
    |--------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:        | **name** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – Header name, case-insensitive. Must be of type `str` or `StringType`, and only character values 0x00 through 0xFF may be used on platforms that use wide characters. |
    | Keyword Arguments: |                                                                                                                                                                                                                                                                 |
    |                    | **default** – Value to return if the header is not found (default `None`).                                                                                                                                                                                      |
    | Raises:            | [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "(in Python v3.7)") – The value of the ‘Set-Cookie’ header(s) was requested.                                                                                                        |
    | Returns:           | The value of the specified header if set, or the default value if not set.                                                                                                                                                                                      |
    | Return type:       | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")                                                                                                                                                                                   |
- name: falcon.Response.headers
  id: api/request_and_response#falcon.Response.headers
  summary: Copy of all headers set for the response, sans cookies
  belongs_to: Request & Response
  description: |-
    `headers`

    Copy of all headers set for the response, sans cookies. Note that a new copy is created and returned each time this property is referenced.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.Response.last_modified
  id: api/request_and_response#falcon.Response.last_modified
  summary: Set the Last-Modified header
  belongs_to: Request & Response
  description: |-
    `last_modified`

    Set the Last-Modified header. Set to a `datetime` (UTC) instance.

    Note

    Falcon will format the `datetime` as an HTTP date string.
- name: falcon.Response.location
  id: api/request_and_response#falcon.Response.location
  summary: Set the Location header
  belongs_to: Request & Response
  description: |-
    `location`

    Set the Location header.

    This value will be URI encoded per RFC 3986. If the value that is being set is already URI encoded it should be decoded first or the header should be set manually using the set_header method.
- name: falcon.Response.media
  id: api/request_and_response#falcon.Response.media
  summary: A serializable object supported by the media handlers configured via falcon.RequestOptions
  belongs_to: Request & Response
  description: |-
    `media`

    A serializable object supported by the media handlers configured via [`falcon.RequestOptions`](api#falcon.RequestOptions "falcon.RequestOptions").

    See [Media](media#media) for more information regarding media handling.

    |       |                                                                                      |
    |-------|--------------------------------------------------------------------------------------|
    | Type: | [object](https://docs.python.org/3/library/functions.html#object "(in Python v3.7)") |
- name: falcon.Response.options
  id: api/request_and_response#falcon.Response.options
  summary: Set of global options passed from the API handler
  belongs_to: Request & Response
  description: |-
    `options`

    Set of global options passed from the API handler.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.Response.retry_after
  id: api/request_and_response#falcon.Response.retry_after
  summary: Set the Retry-After header
  belongs_to: Request & Response
  description: |-
    `retry_after`

    Set the Retry-After header.

    The expected value is an integral number of seconds to use as the value for the header. The HTTP-date syntax is not supported.
- name: falcon.Response.set_cookie()
  id: api/request_and_response#falcon.Response.set_cookie
  summary: Set a response cookie
  belongs_to: Request & Response
  description: |-
    `set_cookie(name, value, expires=None, max_age=None, domain=None, path=None, secure=None, http_only=True)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.set_cookie)

    Set a response cookie.

    Note

    This method can be called multiple times to add one or more cookies to the response.

    See also

    To learn more about setting cookies, see [Setting Cookies](cookies#setting-cookies). The parameters listed below correspond to those defined in [RFC 6265](http://tools.ietf.org/html/rfc6265).

    [TABLE]
- name: falcon.Response.set_header()
  id: api/request_and_response#falcon.Response.set_header
  summary: Set a header for this response to a given value
  belongs_to: Request & Response
  description: |-
    `set_header(name, value)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.set_header)

    Set a header for this response to a given value.

    Warning

    Calling this method overwrites any values already set for this header. To append an additional value for this header, use [`append_header()`](#falcon.Response.append_header "falcon.Response.append_header") instead.

    Warning

    This method cannot be used to set cookies; instead, use [`append_header()`](#falcon.Response.append_header "falcon.Response.append_header") or [`set_cookie()`](#falcon.Response.set_cookie "falcon.Response.set_cookie").

    [TABLE]
- name: falcon.Response.set_headers()
  id: api/request_and_response#falcon.Response.set_headers
  summary: Set several headers at once
  belongs_to: Request & Response
  description: |-
    `set_headers(headers)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.set_headers)

    Set several headers at once.

    This method can be used to set a collection of raw header names and values all at once.

    Warning

    Calling this method overwrites any existing values for the given header. If a list containing multiple instances of the same header is provided, only the last value will be used. To add multiple values to the response for a given header, see [`append_header()`](#falcon.Response.append_header "falcon.Response.append_header").

    Warning

    This method cannot be used to set cookies; instead, use [`append_header()`](#falcon.Response.append_header "falcon.Response.append_header") or [`set_cookie()`](#falcon.Response.set_cookie "falcon.Response.set_cookie").

    [TABLE]
- name: falcon.Response.set_stream()
  id: api/request_and_response#falcon.Response.set_stream
  summary: Convenience method for setting both stream and content_length
  belongs_to: Request & Response
  description: |-
    `set_stream(stream, content_length)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.set_stream)

    Convenience method for setting both `stream` and `content_length`.

    Although the `stream` and `content_length` properties may be set directly, using this method ensures `content_length` is not accidentally neglected when the length of the stream is known in advance. Using this method is also slightly more performant as compared to setting the properties individually.

    Note

    If the stream length is unknown, you can set `stream` directly, and ignore `content_length`. In this case, the WSGI server may choose to use chunked encoding or one of the other strategies suggested by PEP-3333.

    [TABLE]

    `stream_len`

    Set the Content-Length header.

    This property can be used for responding to HEAD requests when you aren’t actually providing the response body, or when streaming the response. If either the `body` property or the `data` property is set on the response, the framework will force Content-Length to be the length of the given body bytes. Therefore, it is only necessary to manually set the content length when those properties are not used.

    Note

    In cases where the response content is a stream (readable file-like object), Falcon will not supply a Content-Length header to the WSGI server unless `content_length` is explicitly set. Consequently, the server may choose to use chunked encoding or one of the other strategies suggested by PEP-3333.
- name: falcon.Response.status
  id: api/request_and_response#falcon.Response.status
  summary: HTTP status line (e.g., ‘200 OK’)
  belongs_to: Request & Response
  description: |-
    `status`

    HTTP status line (e.g., ‘200 OK’). Falcon requires the full status line, not just the code (e.g., 200). This design makes the framework more efficient because it does not have to do any kind of conversion or lookup when composing the WSGI response.

    If not set explicitly, the status defaults to ‘200 OK’.

    Note

    Falcon provides a number of constants for common status codes. They all start with the `HTTP_` prefix, as in: `falcon.HTTP_204`.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.Response.stream
  id: api/request_and_response#falcon.Response.stream
  summary: Either a file-like object with a read() method that takes an optional size argument and returns a block of bytes, or an iterable object, representing response content, and yielding blocks as byte strings
  belongs_to: Request & Response
  description: |-
    `stream`

    Either a file-like object with a `read()` method that takes an optional size argument and returns a block of bytes, or an iterable object, representing response content, and yielding blocks as byte strings. Falcon will use *wsgi.file_wrapper*, if provided by the WSGI server, in order to efficiently serve file-like objects.

    Note

    If the stream is set to an iterable object that requires resource cleanup, it can implement a close() method to do so. The close() method will be called upon completion of the request.
- name: falcon.Response.stream_len
  id: api/request_and_response#falcon.Response.stream_len
  summary: Deprecated alias for content_length
  belongs_to: Request & Response
  description: |-
    `stream_len`

    Deprecated alias for [`content_length`](#falcon.Response.content_length "falcon.Response.content_length").

    |       |                                                                                |
    |-------|--------------------------------------------------------------------------------|
    | Type: | [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.7)") |
- name: falcon.Response.unset_cookie()
  id: api/request_and_response#falcon.Response.unset_cookie
  summary: Clears the contents of the cookie, and instructs the user agent to immediately expire its own copy of the cookie
  belongs_to: Request & Response
  description: |-
    `unset_cookie(name)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.unset_cookie)

    Unset a cookie in the response

    Clears the contents of the cookie, and instructs the user agent to immediately expire its own copy of the cookie.

    Warning

    In order to successfully remove a cookie, both the path and the domain must match the values that were used when the cookie was created.
- name: falcon.Response.vary
  id: api/request_and_response#falcon.Response.vary
  summary: Value to use for the Vary header
  belongs_to: Request & Response
  description: "`vary`\n\nValue to use for the Vary header.\n\nSet this property to an iterable of header names. For a single asterisk or field value, simply pass a single-element `list` or `tuple`.\n\nThe “Vary” header field in a response describes what parts of a request message, aside from the method, Host header field, and request target, might influence the origin server’s process for selecting and representing this response. The value consists of either a single asterisk (“\\*”) or a list of header field names (case-insensitive).\n\n(See also: [RFC 7231, Section 7.1.4](https://tools.ietf.org/html/rfc7231#section-7.1.4))\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/request_and_response.html](https://falcon.readthedocs.io/en/2.0.0/api/request_and_response.html)"
- name: falcon.ResponseOptions
  id: api/api#falcon.ResponseOptions
  summary: Defines a set of configurable response options
  belongs_to: The API Class
  description: |-
    `class falcon.ResponseOptions` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#ResponseOptions)

    Defines a set of configurable response options.

    An instance of this class is exposed via [`API.resp_options`](#falcon.API.resp_options "falcon.API.resp_options") for configuring certain [`Response`](request_and_response#falcon.Response "falcon.Response") behaviors.
- name: falcon.ResponseOptions.default_media_type
  id: api/api#falcon.ResponseOptions.default_media_type
  summary: The default Internet media type (RFC 2046) to use when deserializing a response
  belongs_to: The API Class
  description: |-
    `default_media_type`

    The default Internet media type (RFC 2046) to use when deserializing a response. This value is normally set to the media type provided when a [`falcon.API`](#falcon.API "falcon.API") is initialized; however, if created independently, this will default to the `DEFAULT_MEDIA_TYPE` specified by Falcon.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.ResponseOptions.media_handlers
  id: api/api#falcon.ResponseOptions.media_handlers
  summary: A dict-like object that allows you to configure the media-types that you would like to handle
  belongs_to: The API Class
  description: |-
    `media_handlers`

    A dict-like object that allows you to configure the media-types that you would like to handle. By default, a handler is provided for the `application/json` media type.

    |       |                                                                 |
    |-------|-----------------------------------------------------------------|
    | Type: | [Handlers](media#falcon.media.Handlers "falcon.media.Handlers") |
- name: falcon.ResponseOptions.secure_cookies_by_default
  id: api/api#falcon.ResponseOptions.secure_cookies_by_default
  summary: Set to False in development environments to make the secure attribute for all cookies default to False
  belongs_to: The API Class
  description: |-
    `secure_cookies_by_default`

    Set to `False` in development environments to make the `secure` attribute for all cookies default to `False`. This can make testing easier by not requiring HTTPS. Note, however, that this setting can be overridden via `set_cookie()`’s `secure` kwarg.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.ResponseOptions.static_media_types
  id: api/api#falcon.ResponseOptions.static_media_types
  summary: A mapping of dot-prefixed file extensions to Internet media types (RFC 2046)
  belongs_to: The API Class
  description: |-
    `static_media_types`

    A mapping of dot-prefixed file extensions to Internet media types (RFC 2046). Defaults to `mimetypes.types_map` after calling `mimetypes.init()`.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |

    `class falcon.routing.CompiledRouterOptions` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouterOptions)

    Defines a set of configurable router options.

    An instance of this class is exposed via [`API.router_options`](#falcon.API.router_options "falcon.API.router_options") for configuring certain [`CompiledRouter`](routing#falcon.routing.CompiledRouter "falcon.routing.CompiledRouter") behaviors.
- name: falcon.routing.BaseConverter
  id: api/routing#falcon.routing.BaseConverter
  summary: Abstract base class for URI template field converters
  belongs_to: Routing
  description: |-
    `class falcon.routing.BaseConverter` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#BaseConverter)

    Abstract base class for URI template field converters.
- name: falcon.routing.BaseConverter.convert()
  id: api/routing#falcon.routing.BaseConverter.convert
  summary: Convert a URI template field value to another format or type
  belongs_to: Routing
  description: |-
    `convert(value)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#BaseConverter.convert)

    Convert a URI template field value to another format or type.

    [TABLE]

    ## Custom Routers

    A custom routing engine may be specified when instantiating [`falcon.API()`](api#falcon.API "falcon.API"). For example:

    ``` python
    router = MyRouter()
    api = API(router=router)
    ```

    Custom routers may derive from the default [`CompiledRouter`](#falcon.routing.CompiledRouter "falcon.routing.CompiledRouter") engine, or implement a completely different routing strategy (such as object-based routing).

    A custom router is any class that implements the following interface:

    ``` python
    class MyRouter(object):
        def add_route(self, uri_template, resource, **kwargs):
            """Adds a route between URI path template and resource.

            Args:
                uri_template (str): A URI template to use for the route
                resource (object): The resource instance to associate with
                    the URI template.

            Keyword Args:
                suffix (str): Optional responder name suffix for this
                    route. If a suffix is provided, Falcon will map GET
                    requests to ``on_get_{suffix}()``, POST requests to
                    ``on_post_{suffix}()``, etc. In this way, multiple
                    closely-related routes can be mapped to the same
                    resource. For example, a single resource class can
                    use suffixed responders to distinguish requests for
                    a single item vs. a collection of those same items.
                    Another class might use a suffixed responder to handle
                    a shortlink route in addition to the regular route for
                    the resource.

                **kwargs (dict): Accepts any additional keyword arguments
                    that were originally passed to the falcon.API.add_route()
                    method. These arguments MUST be accepted via the
                    double-star variadic pattern (**kwargs), and ignore any
                    unrecognized or unsupported arguments.
            """

        def find(self, uri, req=None):
            """Search for a route that matches the given partial URI.

            Args:
                uri(str): The requested path to route.

            Keyword Args:
                 req(Request): The Request object that will be passed to
                    the routed responder. The router may use `req` to
                    further differentiate the requested route. For
                    example, a header may be used to determine the
                    desired API version and route the request
                    accordingly.

                    Note:
                        The `req` keyword argument was added in version
                        1.2. To ensure backwards-compatibility, routers
                        that do not implement this argument are still
                        supported.

            Returns:
                tuple: A 4-member tuple composed of (resource, method_map,
                    params, uri_template), or ``None`` if no route matches
                    the requested path.

            """
    ```

    ## Default Router
- name: falcon.routing.compile_uri_template()
  id: api/routing#falcon.routing.compile_uri_template
  summary: Compile the given URI template string into a pattern matcher
  belongs_to: Routing
  description: "`falcon.routing.compile_uri_template(template)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/util.html#compile_uri_template)\n\nCompile the given URI template string into a pattern matcher.\n\nThis function can be used to construct custom routing engines that iterate through a list of possible routes, attempting to match an incoming request against each route’s compiled regular expression.\n\nEach field is converted to a named group, so that when a match is found, the fields can be easily extracted using `re.MatchObject.groupdict()`.\n\nThis function does not support the more flexible templating syntax used in the default router. Only simple paths with bracketed field expressions are recognized. For example:\n\n``` python\n/\n/books\n/books/{isbn}\n/books/{isbn}/characters\n/books/{isbn}/characters/{name}\n```\n\nAlso, note that if the template contains a trailing slash character, it will be stripped in order to normalize the routing logic.\n\n|              |                                                                                                                                                                                                               |\n|--------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **template** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – The template to compile. Note that field names are restricted to ASCII a-z, A-Z, and the underscore character. |\n| Returns:     | (template_field_names, template_regex)                                                                                                                                                                        |\n| Return type: | [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.7)\")                                                                                                                             |\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/routing.html](https://falcon.readthedocs.io/en/2.0.0/api/routing.html)"
- name: falcon.routing.CompiledRouter
  id: api/routing#falcon.routing.CompiledRouter
  summary: Fast URI router which compiles its routing logic to Python code
  belongs_to: Routing
  description: |-
    `class falcon.routing.CompiledRouter` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouter)

    Fast URI router which compiles its routing logic to Python code.

    Generally you do not need to use this router class directly, as an instance is created by default when the falcon.API class is initialized.

    The router treats URI paths as a tree of URI segments and searches by checking the URI one segment at a time. Instead of interpreting the route tree for each look-up, it generates inlined, bespoke Python code to perform the search, then compiles that code. This makes the route processing quite fast.
- name: falcon.routing.CompiledRouter.add_route()
  id: api/routing#falcon.routing.CompiledRouter.add_route
  summary: Adds a route between a URI path template and a resource
  belongs_to: Routing
  description: |-
    `add_route(uri_template, resource, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouter.add_route)

    Adds a route between a URI path template and a resource.

    This method may be overridden to customize how a route is added.

    [TABLE]
- name: falcon.routing.CompiledRouter.find()
  id: api/routing#falcon.routing.CompiledRouter.find
  summary: Search for a route that matches the given partial URI
  belongs_to: Routing
  description: |-
    `find(uri, req=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouter.find)

    Search for a route that matches the given partial URI.

    [TABLE]
- name: falcon.routing.CompiledRouter.map_http_methods()
  id: api/routing#falcon.routing.CompiledRouter.map_http_methods
  summary: Map HTTP methods (e.g., GET, POST) to methods of a resource object
  belongs_to: Routing
  description: |-
    `map_http_methods(resource, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouter.map_http_methods)

    Map HTTP methods (e.g., GET, POST) to methods of a resource object.

    This method is called from [`add_route()`](#falcon.routing.CompiledRouter.add_route "falcon.routing.CompiledRouter.add_route") and may be overridden to provide a custom mapping strategy.

    |                    ||
    |--------------------||
    | Parameters:        | **resource** (*instance*) – Object which represents a REST resource. The default maps the HTTP method `GET` to `on_get()`, `POST` to `on_post()`, etc. If any HTTP methods are not supported by your resource, simply don’t define the corresponding request handlers, and Falcon will do the right thing.                                                                                                                                                                                                                                                                                                                          |
    | Keyword Arguments: ||
    |                    | **suffix** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – Optional responder name suffix for this route. If a suffix is provided, Falcon will map GET requests to `on_get_{suffix}()`, POST requests to `on_post_{suffix}()`, etc. In this way, multiple closely-related routes can be mapped to the same resource. For example, a single resource class can use suffixed responders to distinguish requests for a single item vs. a collection of those same items. Another class might use a suffixed responder to handle a shortlink route in addition to the regular route for the resource. |

    ## Routing Utilities

    The *falcon.routing* module contains the following utilities that may be used by custom routing engines.
- name: falcon.routing.DateTimeConverter
  id: api/routing#falcon.routing.DateTimeConverter
  summary: Converts a field value to a datetime
  belongs_to: Routing
  description: |-
    `class falcon.routing.DateTimeConverter(format_string='%Y-%m-%dT%H:%M:%SZ')` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#DateTimeConverter)

    Converts a field value to a datetime.

    Identifier: `dt`

    |                    |                                                                                                                                                                                                                                              |
    |--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Keyword Arguments: |                                                                                                                                                                                                                                              |
    |                    | **format_string** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – String used to parse the field value into a datetime. Any format recognized by strptime() is supported (default `'%Y-%m-%dT%H:%M:%SZ'`). |
- name: falcon.routing.DateTimeConverter.convert()
  id: api/routing#falcon.routing.DateTimeConverter.convert
  summary: Convert a URI template field value to another format or type
  belongs_to: Routing
  description: |-
    `convert(value)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#DateTimeConverter.convert)

    Convert a URI template field value to another format or type.

    [TABLE]

    ## Custom Converters

    Custom converters can be registered via the [`converters`](api#falcon.routing.CompiledRouterOptions.converters "falcon.routing.CompiledRouterOptions.converters") router option. A converter is simply a class that implements the `BaseConverter` interface:
- name: falcon.routing.IntConverter
  id: api/routing#falcon.routing.IntConverter
  summary: Converts a field value to an int
  belongs_to: Routing
  description: |-
    `class falcon.routing.IntConverter(num_digits=None, min=None, max=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#IntConverter)

    Converts a field value to an int.

    Identifier: `int`

    [TABLE]
- name: falcon.routing.IntConverter.convert()
  id: api/routing#falcon.routing.IntConverter.convert
  summary: Convert a URI template field value to another format or type
  belongs_to: Routing
  description: |-
    `convert(value)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#IntConverter.convert)

    Convert a URI template field value to another format or type.

    [TABLE]
- name: falcon.routing.map_http_methods()
  id: api/routing#falcon.routing.map_http_methods
  summary: Maps HTTP methods (e.g., GET, POST) to methods of a resource object
  belongs_to: Routing
  description: |-
    `falcon.routing.map_http_methods(resource, suffix=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/util.html#map_http_methods)

    Maps HTTP methods (e.g., GET, POST) to methods of a resource object.

    |                    |                                                                                                                                                                                                                                                                                 |
    |--------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:        | **resource** – An object with *responder* methods, following the naming convention *on\_\**, that correspond to each method the resource supports. For example, if a resource supports GET and POST, it should define `on_get(self, req, resp)` and `on_post(self, req, resp)`. |
    | Keyword Arguments: |                                                                                                                                                                                                                                                                                 |
    |                    | **suffix** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – Optional responder name suffix for this route. If a suffix is provided, Falcon will map GET requests to `on_get_{suffix}()`, POST requests to `on_post_{suffix}()`, etc.           |
    | Returns:           | A mapping of HTTP methods to explicitly defined resource responders.                                                                                                                                                                                                            |
    | Return type:       | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)")                                                                                                                                                                                                 |
- name: falcon.routing.set_default_responders()
  id: api/routing#falcon.routing.set_default_responders
  summary: Maps HTTP methods not explicitly defined on a resource to default responders
  belongs_to: Routing
  description: |-
    `falcon.routing.set_default_responders(method_map)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/util.html#set_default_responders)

    Maps HTTP methods not explicitly defined on a resource to default responders.

    |             |                                                                                                  |
    |-------------|--------------------------------------------------------------------------------------------------|
    | Parameters: | **method_map** – A dict with HTTP methods mapped to responders explicitly defined in a resource. |
- name: falcon.routing.UUIDConverter
  id: api/routing#falcon.routing.UUIDConverter
  summary: Converts a field value to a uuid.UUID
  belongs_to: Routing
  description: |-
    `class falcon.routing.UUIDConverter` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#UUIDConverter)

    Converts a field value to a uuid.UUID.

    Identifier: `uuid`

    In order to be converted, the field value must consist of a string of 32 hexadecimal digits, as defined in [RFC 4122, Section 3.](https://tools.ietf.org/html/rfc4122#section-3.) Note, however, that hyphens and the URN prefix are optional.
- name: falcon.routing.UUIDConverter.convert()
  id: api/routing#falcon.routing.UUIDConverter.convert
  summary: Convert a URI template field value to another format or type
  belongs_to: Routing
  description: |-
    `convert(value)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#UUIDConverter.convert)

    Convert a URI template field value to another format or type.

    [TABLE]
- name: falcon.testing.capture_responder_args()
  id: api/testing#falcon.testing.capture_responder_args
  summary: Before hook for capturing responder arguments
  belongs_to: Testing
  description: |-
    `falcon.testing.capture_responder_args(req, resp, resource, params)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/resource.html#capture_responder_args)

    Before hook for capturing responder arguments.

    Adds the following attributes to the hooked responder’s resource class:

    - captured_req
    - captured_resp
    - captured_kwargs
- name: falcon.testing.closed_wsgi_iterable()
  id: api/testing#falcon.testing.closed_wsgi_iterable
  summary: Wraps an iterable to ensure its close() method is called
  belongs_to: Testing
  description: "`falcon.testing.closed_wsgi_iterable(iterable)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/helpers.html#closed_wsgi_iterable)\n\nWraps an iterable to ensure its `close()` method is called.\n\nWraps the given `iterable` in an iterator utilizing a `for` loop as illustrated in [the PEP-3333 server/gateway side example](https://www.python.org/dev/peps/pep-3333/#the-server-gateway-side). Finally, if the iterable has a `close()` method, it is called upon exception or exausting iteration.\n\nFurthermore, the first bytestring yielded from iteration, if any, is prefetched before returning the wrapped iterator in order to ensure the WSGI `start_response` function is called even if the WSGI application is a generator.\n\n|              |                                                                                            |\n|--------------|--------------------------------------------------------------------------------------------|\n| Parameters:  | **iterable** (*iterable*) – An iterable that yields zero or more bytestrings, per PEP-3333 |\n| Returns:     | An iterator yielding the same bytestrings as `iterable`                                    |\n| Return type: | iterator                                                                                   |\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/testing.html](https://falcon.readthedocs.io/en/2.0.0/api/testing.html)"
- name: falcon.testing.Cookie
  id: api/testing#falcon.testing.Cookie
  summary: Represents a cookie returned by a simulated request
  belongs_to: Testing
  description: |-
    `class falcon.testing.Cookie(morsel)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#Cookie)

    Represents a cookie returned by a simulated request.

    |             |                                                                      |
    |-------------|----------------------------------------------------------------------|
    | Parameters: | **morsel** – A `Morsel` object from which to derive the cookie data. |
- name: falcon.testing.Cookie.domain
  id: api/testing#falcon.testing.Cookie.domain
  summary: The domain to which this cookie is restricted, or None if not specified
  belongs_to: Testing
  description: |-
    `domain`

    The domain to which this cookie is restricted, or `None` if not specified.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.testing.Cookie.expires
  id: api/testing#falcon.testing.Cookie.expires
  summary: Expiration timestamp for the cookie, or None if not specified
  belongs_to: Testing
  description: |-
    `expires`

    Expiration timestamp for the cookie, or `None` if not specified.

    |       |                                                                                                           |
    |-------|-----------------------------------------------------------------------------------------------------------|
    | Type: | [datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.7)") |
- name: falcon.testing.Cookie.http_only
  id: api/testing#falcon.testing.Cookie.http_only
  summary: Whether or not the cookie may only be included in unscripted requests from the client
  belongs_to: Testing
  description: |-
    `http_only`

    Whether or not the cookie may only be included in unscripted requests from the client.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.testing.Cookie.max_age
  id: api/testing#falcon.testing.Cookie.max_age
  summary: The lifetime of the cookie in seconds, or None if not specified
  belongs_to: Testing
  description: |-
    `max_age`

    The lifetime of the cookie in seconds, or `None` if not specified.

    |       |                                                                                |
    |-------|--------------------------------------------------------------------------------|
    | Type: | [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.7)") |
- name: falcon.testing.Cookie.name
  id: api/testing#falcon.testing.Cookie.name
  summary: The cookie’s name
  belongs_to: Testing
  description: |-
    `name`

    The cookie’s name.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.testing.Cookie.path
  id: api/testing#falcon.testing.Cookie.path
  summary: The path prefix to which this cookie is restricted, or None if not specified
  belongs_to: Testing
  description: |-
    `path`

    The path prefix to which this cookie is restricted, or `None` if not specified.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.testing.Cookie.secure
  id: api/testing#falcon.testing.Cookie.secure
  summary: Whether or not the cookie may only only be transmitted from the client via HTTPS
  belongs_to: Testing
  description: |-
    `secure`

    Whether or not the cookie may only only be transmitted from the client via HTTPS.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.testing.Cookie.value
  id: api/testing#falcon.testing.Cookie.value
  summary: The value of the cookie
  belongs_to: Testing
  description: |-
    `value`

    The value of the cookie.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.testing.create_environ()
  id: api/testing#falcon.testing.create_environ
  summary: Creates a mock PEP-3333 environ dict for simulating WSGI requests
  belongs_to: Testing
  description: |-
    `falcon.testing.create_environ(path='/', query_string='', protocol='HTTP/1.1', scheme='http', host='falconframework.org', port=None, headers=None, app='', body='', method='GET', wsgierrors=None, file_wrapper=None, remote_addr=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/helpers.html#create_environ)

    Creates a mock PEP-3333 environ `dict` for simulating WSGI requests.

    [TABLE]
- name: falcon.testing.rand_string()
  id: api/testing#falcon.testing.rand_string
  summary: Returns a randomly-generated string, of a random length
  belongs_to: Testing
  description: |-
    `falcon.testing.rand_string(min, max)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/helpers.html#rand_string)

    Returns a randomly-generated string, of a random length.

    [TABLE]
- name: falcon.testing.redirected()
  id: api/testing#falcon.testing.redirected
  summary: null
  belongs_to: Testing
  description: |-
    `falcon.testing.redirected(stdout=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='UTF-8'>, stderr=<_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/helpers.html#redirected)

    A context manager to temporarily redirect stdout or stderr

    e.g.:

    with redirected(stderr=os.devnull):

    …
- name: falcon.testing.Result
  id: api/testing#falcon.testing.Result
  summary: Encapsulates the result of a simulated WSGI request
  belongs_to: Testing
  description: |-
    `class falcon.testing.Result(iterable, status, headers)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#Result)

    Encapsulates the result of a simulated WSGI request.

    [TABLE]
- name: falcon.testing.Result.content
  id: api/testing#falcon.testing.Result.content
  summary: Raw response body, or bytes if the response body was empty
  belongs_to: Testing
  description: |-
    `content`

    Raw response body, or `bytes` if the response body was empty.

    |       |                                                                                   |
    |-------|-----------------------------------------------------------------------------------|
    | Type: | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes "(in Python v3.7)") |
- name: falcon.testing.Result.cookies
  id: api/testing#falcon.testing.Result.cookies
  summary: A dictionary of falcon.testing.Cookie values parsed from the response, by name
  belongs_to: Testing
  description: |-
    `cookies`

    A dictionary of [`falcon.testing.Cookie`](#falcon.testing.Cookie "falcon.testing.Cookie") values parsed from the response, by name.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.testing.Result.encoding
  id: api/testing#falcon.testing.Result.encoding
  summary: Text encoding of the response body, or None if the encoding can not be determined
  belongs_to: Testing
  description: |-
    `encoding`

    Text encoding of the response body, or `None` if the encoding can not be determined.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.testing.Result.headers
  id: api/testing#falcon.testing.Result.headers
  summary: A case-insensitive dictionary containing all the headers in the response, except for cookies, which may be accessed via the cookies attribute
  belongs_to: Testing
  description: |-
    `headers`

    A case-insensitive dictionary containing all the headers in the response, except for cookies, which may be accessed via the `cookies` attribute.

    Note

    Multiple instances of a header in the response are currently not supported; it is unspecified which value will “win” and be represented in `headers`.

    |       |                     |
    |-------|---------------------|
    | Type: | CaseInsensitiveDict |
- name: falcon.testing.Result.json
  id: api/testing#falcon.testing.Result.json
  summary: Deserialized JSON body
  belongs_to: Testing
  description: |-
    `json`

    Deserialized JSON body. Will be `None` if the body has no content to deserialize. Otherwise, raises an error if the response is not valid JSON.

    |       |                   |
    |-------|-------------------|
    | Type: | JSON serializable |
- name: falcon.testing.Result.status
  id: api/testing#falcon.testing.Result.status
  summary: null
  belongs_to: Testing
  description: |-
    `status`

    HTTP status string given in the response

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.testing.Result.status_code
  id: api/testing#falcon.testing.Result.status_code
  summary: null
  belongs_to: Testing
  description: |-
    `status_code`

    The code portion of the HTTP status string

    |       |                                                                                |
    |-------|--------------------------------------------------------------------------------|
    | Type: | [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.7)") |
- name: falcon.testing.Result.text
  id: api/testing#falcon.testing.Result.text
  summary: Decoded response body of type unicode under Python 2.7, and of type str otherwise
  belongs_to: Testing
  description: |-
    `text`

    Decoded response body of type `unicode` under Python 2.7, and of type `str` otherwise. If the content type does not specify an encoding, UTF-8 is assumed.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.testing.SimpleTestResource
  id: api/testing#falcon.testing.SimpleTestResource
  summary: Mock resource for functional testing of framework components
  belongs_to: Testing
  description: |-
    `class falcon.testing.SimpleTestResource(status=None, body=None, json=None, headers=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/resource.html#SimpleTestResource)

    Mock resource for functional testing of framework components.

    This class implements a simple test resource that can be extended as needed to test middleware, hooks, and the Falcon framework itself.

    Only noop `on_get()` and `on_post()` responders are implemented; when overriding these, or adding additional responders in child classes, they can be decorated with the [`falcon.testing.capture_responder_args()`](#falcon.testing.capture_responder_args "falcon.testing.capture_responder_args") hook in order to capture the *req*, *resp*, and *params* arguments that are passed to the responder. Responders may also be decorated with the `falcon.testing.set_resp_defaults()` hook in order to set *resp* properties to default *status*, *body*, and *header* values.

    [TABLE]
- name: falcon.testing.SimpleTestResource.called
  id: api/testing#falcon.testing.SimpleTestResource.called
  summary: Whether or not a req/resp was captured
  belongs_to: Testing
  description: |-
    `called`

    Whether or not a req/resp was captured.

    |       |                                                                                  |
    |-------|----------------------------------------------------------------------------------|
    | Type: | [bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)") |
- name: falcon.testing.SimpleTestResource.captured_kwargs
  id: api/testing#falcon.testing.SimpleTestResource.captured_kwargs
  summary: The last dictionary of kwargs, beyond req and resp, that were passed into any one of the responder methods
  belongs_to: Testing
  description: |-
    `captured_kwargs`

    The last dictionary of kwargs, beyond `req` and `resp`, that were passed into any one of the responder methods.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.testing.SimpleTestResource.captured_req
  id: api/testing#falcon.testing.SimpleTestResource.captured_req
  summary: The last Request object passed into any one of the responder methods
  belongs_to: Testing
  description: |-
    `captured_req`

    The last Request object passed into any one of the responder methods.

    |       |                                                                        |
    |-------|------------------------------------------------------------------------|
    | Type: | [falcon.Request](request_and_response#falcon.Request "falcon.Request") |
- name: falcon.testing.SimpleTestResource.captured_resp
  id: api/testing#falcon.testing.SimpleTestResource.captured_resp
  summary: The last Response object passed into any one of the responder methods
  belongs_to: Testing
  description: |-
    `captured_resp`

    The last Response object passed into any one of the responder methods.

    |       |                                                                           |
    |-------|---------------------------------------------------------------------------|
    | Type: | [falcon.Response](request_and_response#falcon.Response "falcon.Response") |
- name: falcon.testing.simulate_delete()
  id: api/testing#falcon.testing.simulate_delete
  summary: Simulates a DELETE request to a WSGI application
  belongs_to: Testing
  description: |-
    `falcon.testing.simulate_delete(app, path, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_delete)

    Simulates a DELETE request to a WSGI application.

    Equivalent to:

    ``` python
    simulate_request(app, 'DELETE', path, **kwargs)
    ```

    [TABLE]
- name: falcon.testing.simulate_get()
  id: api/testing#falcon.testing.simulate_get
  summary: Simulates a GET request to a WSGI application
  belongs_to: Testing
  description: |-
    `falcon.testing.simulate_get(app, path, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_get)

    Simulates a GET request to a WSGI application.

    Equivalent to:

    ``` python
    simulate_request(app, 'GET', path, **kwargs)
    ```

    [TABLE]
- name: falcon.testing.simulate_head()
  id: api/testing#falcon.testing.simulate_head
  summary: Simulates a HEAD request to a WSGI application
  belongs_to: Testing
  description: |-
    `falcon.testing.simulate_head(app, path, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_head)

    Simulates a HEAD request to a WSGI application.

    Equivalent to:

    ``` python
    simulate_request(app, 'HEAD', path, **kwargs)
    ```

    [TABLE]
- name: falcon.testing.simulate_options()
  id: api/testing#falcon.testing.simulate_options
  summary: Simulates an OPTIONS request to a WSGI application
  belongs_to: Testing
  description: |-
    `falcon.testing.simulate_options(app, path, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_options)

    Simulates an OPTIONS request to a WSGI application.

    Equivalent to:

    ``` python
    simulate_request(app, 'OPTIONS', path, **kwargs)
    ```

    [TABLE]
- name: falcon.testing.simulate_patch()
  id: api/testing#falcon.testing.simulate_patch
  summary: Simulates a PATCH request to a WSGI application
  belongs_to: Testing
  description: |-
    `falcon.testing.simulate_patch(app, path, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_patch)

    Simulates a PATCH request to a WSGI application.

    Equivalent to:

    ``` python
    simulate_request(app, 'PATCH', path, **kwargs)
    ```

    [TABLE]
- name: falcon.testing.simulate_post()
  id: api/testing#falcon.testing.simulate_post
  summary: Simulates a POST request to a WSGI application
  belongs_to: Testing
  description: |-
    `falcon.testing.simulate_post(app, path, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_post)

    Simulates a POST request to a WSGI application.

    Equivalent to:

    ``` python
    simulate_request(app, 'POST', path, **kwargs)
    ```

    [TABLE]
- name: falcon.testing.simulate_put()
  id: api/testing#falcon.testing.simulate_put
  summary: Simulates a PUT request to a WSGI application
  belongs_to: Testing
  description: |-
    `falcon.testing.simulate_put(app, path, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_put)

    Simulates a PUT request to a WSGI application.

    Equivalent to:

    ``` python
    simulate_request(app, 'PUT', path, **kwargs)
    ```

    [TABLE]
- name: falcon.testing.simulate_request()
  id: api/testing#falcon.testing.simulate_request
  summary: Simulates a request to a WSGI application
  belongs_to: Testing
  description: |-
    `falcon.testing.simulate_request(app, method='GET', path='/', query_string=None, headers=None, body=None, json=None, file_wrapper=None, wsgierrors=None, params=None, params_csv=True, protocol='http', host='falconframework.org', remote_addr=None, extras=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_request)

    Simulates a request to a WSGI application.

    Performs a request against a WSGI application. Uses [`wsgiref.validate`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref.validate "(in Python v3.7)") to ensure the response is valid WSGI.

    [TABLE]
- name: falcon.testing.StartResponseMock
  id: api/testing#falcon.testing.StartResponseMock
  summary: Mock object representing a WSGI start_response callable
  belongs_to: Testing
  description: |-
    `class falcon.testing.StartResponseMock` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/srmock.html#StartResponseMock)

    Mock object representing a WSGI `start_response` callable.
- name: falcon.testing.StartResponseMock.call_count
  id: api/testing#falcon.testing.StartResponseMock.call_count
  summary: Number of times start_response was called
  belongs_to: Testing
  description: |-
    `call_count`

    Number of times `start_response` was called.

    |       |                                                                                |
    |-------|--------------------------------------------------------------------------------|
    | Type: | [int](https://docs.python.org/3/library/functions.html#int "(in Python v3.7)") |
- name: falcon.testing.StartResponseMock.headers
  id: api/testing#falcon.testing.StartResponseMock.headers
  summary: Raw headers list passed to start_response, per PEP-333
  belongs_to: Testing
  description: |-
    `headers`

    Raw headers list passed to `start_response`, per PEP-333.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [list](https://docs.python.org/3/library/stdtypes.html#list "(in Python v3.7)") |
- name: falcon.testing.StartResponseMock.headers_dict
  id: api/testing#falcon.testing.StartResponseMock.headers_dict
  summary: Headers as a case-insensitive dict-like object, instead of a list
  belongs_to: Testing
  description: |-
    `headers_dict`

    Headers as a case-insensitive `dict`-like object, instead of a `list`.

    |       |                                                                                 |
    |-------|---------------------------------------------------------------------------------|
    | Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)") |
- name: falcon.testing.StartResponseMock.status
  id: api/testing#falcon.testing.StartResponseMock.status
  summary: HTTP status line, e.g
  belongs_to: Testing
  description: |-
    `status`

    HTTP status line, e.g. ‘785 TPS Cover Sheet not attached’.

    |       |                                                                               |
    |-------|-------------------------------------------------------------------------------|
    | Type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)") |
- name: falcon.testing.TestCase
  id: api/testing#falcon.testing.TestCase
  summary: Extends unittest to support WSGI functional testing
  belongs_to: Testing
  description: |-
    `class falcon.testing.TestCase(methodName='runTest')` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/test_case.html#TestCase)

    Extends [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "(in Python v3.7)") to support WSGI functional testing.

    Note

    If available, uses `testtools` in lieu of [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "(in Python v3.7)").

    This base class provides some extra plumbing for unittest-style test cases, to help simulate WSGI calls without having to spin up an actual web server. Various simulation methods are derived from [`falcon.testing.TestClient`](#falcon.testing.TestClient "falcon.testing.TestClient").

    Simply inherit from this class in your test case classes instead of [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "(in Python v3.7)") or `testtools.TestCase`.
- name: falcon.testing.TestCase.app
  id: api/testing#falcon.testing.TestCase.app
  summary: 'A WSGI application to target when simulating requests (default: falcon.API())'
  belongs_to: Testing
  description: |-
    `app`

    A WSGI application to target when simulating requests (default: `falcon.API()`). When testing your application, you will need to set this to your own instance of `falcon.API`. For example:

    ``` python
    from falcon import testing
    import myapp


    class MyTestCase(testing.TestCase):
        def setUp(self):
            super(MyTestCase, self).setUp()

            # Assume the hypothetical `myapp` package has a
            # function called `create()` to initialize and
            # return a `falcon.API` instance.
            self.app = myapp.create()


    class TestMyApp(MyTestCase):
        def test_get_message(self):
            doc = {u'message': u'Hello world!'}

            result = self.simulate_get('/messages/42')
            self.assertEqual(result.json, doc)
    ```

    |       |                                                                                      |
    |-------|--------------------------------------------------------------------------------------|
    | Type: | [object](https://docs.python.org/3/library/functions.html#object "(in Python v3.7)") |
- name: falcon.testing.TestCase.setUp()
  id: api/testing#falcon.testing.TestCase.setUp
  summary: Hook method for setting up the test fixture before exercising it
  belongs_to: Testing
  description: |-
    `setUp()` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/test_case.html#TestCase.setUp)

    Hook method for setting up the test fixture before exercising it.
- name: falcon.testing.TestClient
  id: api/testing#falcon.testing.TestClient
  summary: Simulates requests to a WSGI application
  belongs_to: Testing
  description: |-
    `class falcon.testing.TestClient(app, headers=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient)

    Simulates requests to a WSGI application.

    This class provides a contextual wrapper for Falcon’s `simulate_*` test functions. It lets you replace this:

    ``` python
    simulate_get(app, '/messages')
    simulate_head(app, '/messages')
    ```

    with this:

    ``` python
    client = TestClient(app)
    client.simulate_get('/messages')
    client.simulate_head('/messages')
    ```

    Note

    The methods all call `self.simulate_request()` for convenient overriding of request preparation by child classes.

    |                    |                                                                                                                                                                                                                                                                         |
    |--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:        | **app** (*callable*) – A WSGI application to target when simulating requests                                                                                                                                                                                            |
    | Keyword Arguments: |                                                                                                                                                                                                                                                                         |
    |                    | **headers** ([dict](https://docs.python.org/3/library/stdtypes.html#dict "(in Python v3.7)")) – Default headers to set on every request (default `None`). These defaults may be overridden by passing values for the same headers to one of the `simulate_*()` methods. |
- name: falcon.testing.TestClient.simulate_delete()
  id: api/testing#falcon.testing.TestClient.simulate_delete
  summary: Simulates a DELETE request to a WSGI application
  belongs_to: Testing
  description: |-
    `simulate_delete(path='/', **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_delete)

    Simulates a DELETE request to a WSGI application.

    (See also: [`falcon.testing.simulate_delete()`](#falcon.testing.simulate_delete "falcon.testing.simulate_delete"))
- name: falcon.testing.TestClient.simulate_get()
  id: api/testing#falcon.testing.TestClient.simulate_get
  summary: Simulates a GET request to a WSGI application
  belongs_to: Testing
  description: |-
    `simulate_get(path='/', **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_get)

    Simulates a GET request to a WSGI application.

    (See also: [`falcon.testing.simulate_get()`](#falcon.testing.simulate_get "falcon.testing.simulate_get"))
- name: falcon.testing.TestClient.simulate_head()
  id: api/testing#falcon.testing.TestClient.simulate_head
  summary: Simulates a HEAD request to a WSGI application
  belongs_to: Testing
  description: |-
    `simulate_head(path='/', **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_head)

    Simulates a HEAD request to a WSGI application.

    (See also: [`falcon.testing.simulate_head()`](#falcon.testing.simulate_head "falcon.testing.simulate_head"))
- name: falcon.testing.TestClient.simulate_options()
  id: api/testing#falcon.testing.TestClient.simulate_options
  summary: Simulates an OPTIONS request to a WSGI application
  belongs_to: Testing
  description: |-
    `simulate_options(path='/', **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_options)

    Simulates an OPTIONS request to a WSGI application.

    (See also: [`falcon.testing.simulate_options()`](#falcon.testing.simulate_options "falcon.testing.simulate_options"))
- name: falcon.testing.TestClient.simulate_patch()
  id: api/testing#falcon.testing.TestClient.simulate_patch
  summary: Simulates a PATCH request to a WSGI application
  belongs_to: Testing
  description: |-
    `simulate_patch(path='/', **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_patch)

    Simulates a PATCH request to a WSGI application.

    (See also: [`falcon.testing.simulate_patch()`](#falcon.testing.simulate_patch "falcon.testing.simulate_patch"))
- name: falcon.testing.TestClient.simulate_post()
  id: api/testing#falcon.testing.TestClient.simulate_post
  summary: Simulates a POST request to a WSGI application
  belongs_to: Testing
  description: |-
    `simulate_post(path='/', **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_post)

    Simulates a POST request to a WSGI application.

    (See also: [`falcon.testing.simulate_post()`](#falcon.testing.simulate_post "falcon.testing.simulate_post"))
- name: falcon.testing.TestClient.simulate_put()
  id: api/testing#falcon.testing.TestClient.simulate_put
  summary: Simulates a PUT request to a WSGI application
  belongs_to: Testing
  description: |-
    `simulate_put(path='/', **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_put)

    Simulates a PUT request to a WSGI application.

    (See also: [`falcon.testing.simulate_put()`](#falcon.testing.simulate_put "falcon.testing.simulate_put"))
- name: falcon.testing.TestClient.simulate_request()
  id: api/testing#falcon.testing.TestClient.simulate_request
  summary: Simulates a request to a WSGI application
  belongs_to: Testing
  description: |-
    `simulate_request(*args, **kwargs)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_request)

    Simulates a request to a WSGI application.

    Wraps [`falcon.testing.simulate_request()`](#falcon.testing.simulate_request "falcon.testing.simulate_request") to perform a WSGI request directly against `self.app`. Equivalent to:

    ``` python
    falcon.testing.simulate_request(self.app, *args, **kwargs)
    ```
- name: falcon.TimezoneGMT
  id: api/util#falcon.TimezoneGMT
  summary: GMT timezone class implementing the datetime.tzinfo interface
  belongs_to: Utilities
  description: |-
    `class falcon.TimezoneGMT` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/time.html#TimezoneGMT)

    GMT timezone class implementing the [`datetime.tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "(in Python v3.7)") interface.
- name: falcon.TimezoneGMT.dst()
  id: api/util#falcon.TimezoneGMT.dst
  summary: Return the daylight saving time (DST) adjustment
  belongs_to: Utilities
  description: |-
    `dst(dt)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/time.html#TimezoneGMT.dst)

    Return the daylight saving time (DST) adjustment.

    |              |                                                                                                                              |
    |--------------|------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **dt** ([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.7)")) – Ignored |
    | Returns:     | DST adjustment for GMT, which is always 0.                                                                                   |
    | Return type: | [datetime.timedelta](https://docs.python.org/3/library/datetime.html#datetime.timedelta "(in Python v3.7)")                  |
- name: falcon.TimezoneGMT.tzname()
  id: api/util#falcon.TimezoneGMT.tzname
  summary: Get the name of this timezone
  belongs_to: Utilities
  description: |-
    `tzname(dt)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/time.html#TimezoneGMT.tzname)

    Get the name of this timezone.

    |              |                                                                                                                              |
    |--------------|------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **dt** ([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.7)")) – Ignored |
    | Returns:     | “GMT”                                                                                                                        |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")                                                |
- name: falcon.TimezoneGMT.utcoffset()
  id: api/util#falcon.TimezoneGMT.utcoffset
  summary: Get the offset from UTC
  belongs_to: Utilities
  description: |-
    `utcoffset(dt)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/time.html#TimezoneGMT.utcoffset)

    Get the offset from UTC.

    |              |                                                                                                                              |
    |--------------|------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **dt** ([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime "(in Python v3.7)")) – Ignored |
    | Returns:     | GMT offset, which is equivalent to UTC and so is aways 0.                                                                    |
    | Return type: | [datetime.timedelta](https://docs.python.org/3/library/datetime.html#datetime.timedelta "(in Python v3.7)")                  |
- name: falcon.to_query_str()
  id: api/util#falcon.to_query_str
  summary: Converts a dictionary of parameters to a query string
  belongs_to: Utilities
  description: |-
    `falcon.to_query_str(params, comma_delimited_lists=True, prefix=True)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#to_query_str)

    Converts a dictionary of parameters to a query string.

    [TABLE]
- name: falcon.uri.decode()
  id: api/util#falcon.uri.decode
  summary: Decodes percent-encoded characters in a URI or query string
  belongs_to: Utilities
  description: |-
    `falcon.uri.decode(encoded_uri, unquote_plus=True)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/uri.html#decode)

    Decodes percent-encoded characters in a URI or query string.

    This function models the behavior of `urllib.parse.unquote_plus`, albeit in a faster, more straightforward manner.

    |                    |                                                                                                                                                                                                                                                                                                                                             |
    |--------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:        | **encoded_uri** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – An encoded URI (full or partial).                                                                                                                                                                                                         |
    | Keyword Arguments: |                                                                                                                                                                                                                                                                                                                                             |
    |                    | **unquote_plus** ([bool](https://docs.python.org/3/library/functions.html#bool "(in Python v3.7)")) – Set to `False` to retain any plus (‘+’) characters in the given string, rather than converting them to spaces (default `True`). Typically you should set this to `False` when decoding any part of a URI other than the query string. |
    | Returns:           | A decoded URL. If the URL contains escaped non-ASCII characters, UTF-8 is assumed per RFC 3986.                                                                                                                                                                                                                                             |
    | Return type:       | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")                                                                                                                                                                                                                                                               |
- name: falcon.uri.encode()
  id: api/util#falcon.uri.encode
  summary: Encodes a full or relative URI according to RFC 3986
  belongs_to: Utilities
  description: |-
    `falcon.uri.encode(uri)`

    Encodes a full or relative URI according to RFC 3986.

    RFC 3986 defines a set of “unreserved” characters as well as a set of “reserved” characters used as delimiters. This function escapes all other “disallowed” characters by percent-encoding them.

    Note

    This utility is faster in the average case than the similar `quote` function found in `urlib`. It also strives to be easier to use by assuming a sensible default of allowed characters.

    |              |                                                                                                                                                                                                                                                                                    |
    |--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **uri** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – URI or part of a URI to encode. If this is a wide string (i.e., `compat.text_type`), it will be encoded to a UTF-8 byte array and any multibyte sequences will be percent-encoded as-is. |
    | Returns:     | An escaped version of `uri`, where all disallowed characters have been percent-encoded.                                                                                                                                                                                            |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")                                                                                                                                                                                                      |
- name: falcon.uri.encode_value()
  id: api/util#falcon.uri.encode_value
  summary: Encodes a value string according to RFC 3986
  belongs_to: Utilities
  description: |-
    `falcon.uri.encode_value(uri)`

    Encodes a value string according to RFC 3986.

    Disallowed characters are percent-encoded in a way that models `urllib.parse.quote(safe="~")`. However, the Falcon function is faster in the average case than the similar `quote` function found in urlib. It also strives to be easier to use by assuming a sensible default of allowed characters.

    All reserved characters are lumped together into a single set of “delimiters”, and everything in that set is escaped.

    Note

    RFC 3986 defines a set of “unreserved” characters as well as a set of “reserved” characters used as delimiters.

    |              |                                                                                                                                                                                                                                                                                                                                                                                                             |
    |--------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **uri** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – URI fragment to encode. It is assumed not to cross delimiter boundaries, and so any reserved URI delimiter characters included in it will be escaped. If `value` is a wide string (i.e., `compat.text_type`), it will be encoded to a UTF-8 byte array and any multibyte sequences will be percent-encoded as-is. |
    | Returns:     | An escaped version of `uri`, where all disallowed characters have been percent-encoded.                                                                                                                                                                                                                                                                                                                     |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")                                                                                                                                                                                                                                                                                                                               |
- name: falcon.uri.parse_host()
  id: api/util#falcon.uri.parse_host
  summary: Parse a canonical ‘host:port’ string into parts
  belongs_to: Utilities
  description: |-
    `falcon.uri.parse_host(host, default_port=None)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/uri.html#parse_host)

    Parse a canonical ‘host:port’ string into parts.

    Parse a host string (which may or may not contain a port) into parts, taking into account that the string may contain either a domain name or an IP address. In the latter case, both IPv4 and IPv6 addresses are supported.

    |                    |                                                                                                                                                                                       |
    |--------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | Parameters:        | **host** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – Host string to parse, optionally containing a port number.                                 |
    | Keyword Arguments: |                                                                                                                                                                                       |
    |                    | **default_port** ([int](https://docs.python.org/3/library/functions.html#int "(in Python v3.7)")) – Port number to return when the host string does not contain one (default `None`). |
    | Returns:           | A parsed (*host*, *port*) tuple from the given host string, with the port converted to an `int`. If the host string does not specify a port, `default_port` is used instead.          |
    | Return type:       | [tuple](https://docs.python.org/3/library/stdtypes.html#tuple "(in Python v3.7)")                                                                                                     |
- name: falcon.uri.parse_query_string()
  id: api/util#falcon.uri.parse_query_string
  summary: Parse a query string into a dict
  belongs_to: Utilities
  description: |-
    `falcon.uri.parse_query_string(query_string, keep_blank=False, csv=True)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/uri.html#parse_query_string)

    Parse a query string into a dict.

    Query string parameters are assumed to use standard form-encoding. Only parameters with values are returned. For example, given ‘foo=bar&flag’, this function would ignore ‘flag’ unless the `keep_blank_qs_values` option is set.

    Note

    In addition to the standard HTML form-based method for specifying lists by repeating a given param multiple times, Falcon supports a more compact form in which the param may be given a single time but set to a `list` of comma-separated elements (e.g., ‘foo=a,b,c’).

    When using this format, all commas uri-encoded will not be treated by Falcon as a delimiter. If the client wants to send a value as a list, it must not encode the commas with the values.

    The two different ways of specifying lists may not be mixed in a single query string for the same parameter.

    [TABLE]
- name: falcon.uri.unquote_string()
  id: api/util#falcon.uri.unquote_string
  summary: null
  belongs_to: Utilities
  description: |-
    `falcon.uri.unquote_string(quoted)` [\[source\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/uri.html#unquote_string)

    Unquote an RFC 7320 “quoted-string”.

    |              |                                                                                                                           |
    |--------------|---------------------------------------------------------------------------------------------------------------------------|
    | Parameters:  | **quoted** ([str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")) – Original quoted string       |
    | Returns:     | unquoted string                                                                                                           |
    | Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str "(in Python v3.7)")                                             |
    | Raises:      | [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "(in Python v3.7)") – `quoted` was not a `str`. |

    ## Miscellaneous
- name: FAQ
  id: user/faq
  summary: Falcon is designed for applications that require a high level of customization or performance tuning
  description: "# FAQ\n\n- [Design Philosophy](#design-philosophy)\n  - [Why doesn’t Falcon come with batteries included?](#why-doesn-t-falcon-come-with-batteries-included)\n  - [Why doesn’t Falcon create a new Resource instance for every request?](#why-doesn-t-falcon-create-a-new-resource-instance-for-every-request)\n  - [Why does raising an error inside a resource crash my app?](#why-does-raising-an-error-inside-a-resource-crash-my-app)\n  - [How do I generate API documentation for my Falcon API?](#how-do-i-generate-api-documentation-for-my-falcon-api)\n- [Performance](#performance)\n  - [Does Falcon work with HTTP/2?](#does-falcon-work-with-http-2)\n  - [Is Falcon thread-safe?](#is-falcon-thread-safe)\n  - [Does Falcon support asyncio?](#does-falcon-support-asyncio)\n  - [Does Falcon support WebSocket?](#does-falcon-support-websocket)\n- [Routing](#routing)\n  - [How do I implement CORS with Falcon?](#how-do-i-implement-cors-with-falcon)\n  - [How do I implement redirects within Falcon?](#how-do-i-implement-redirects-within-falcon)\n  - [How do I split requests between my original app and the part I migrated to Falcon?](#how-do-i-split-requests-between-my-original-app-and-the-part-i-migrated-to-falcon)\n  - [How do I implement both POSTing and GETing items for the same resource?](#how-do-i-implement-both-posting-and-geting-items-for-the-same-resource)\n  - [What is the recommended way to map related routes to resource classes?](#what-is-the-recommended-way-to-map-related-routes-to-resource-classes)\n- [Extensibility](#extensibility)\n  - [How do I use WSGI middleware with Falcon?](#how-do-i-use-wsgi-middleware-with-falcon)\n  - [How can I pass data from a hook to a responder, and between hooks?](#how-can-i-pass-data-from-a-hook-to-a-responder-and-between-hooks)\n  - [How can I write a custom handler for 404 and 500 pages in falcon?](#how-can-i-write-a-custom-handler-for-404-and-500-pages-in-falcon)\n- [Request Handling](#request-handling)\n  - [How do I authenticate requests?](#how-do-i-authenticate-requests)\n  - [Why does req.stream.read() hang for certain requests?](#why-does-req-stream-read-hang-for-certain-requests)\n  - [How does Falcon handle a trailing slash in the request path?](#how-does-falcon-handle-a-trailing-slash-in-the-request-path)\n  - [Why is my query parameter missing from the req object?](#why-is-my-query-parameter-missing-from-the-req-object)\n  - [Why are ‘+’ characters in my params being converted to spaces?](#why-are-characters-in-my-params-being-converted-to-spaces)\n  - [How can I access POSTed form params?](#how-can-i-access-posted-form-params)\n  - [How can I access POSTed files?](#how-can-i-access-posted-files)\n  - [How do I consume a query string that has a JSON value?](#how-do-i-consume-a-query-string-that-has-a-json-value)\n  - [How can I handle forward slashes within a route template field?](#how-can-i-handle-forward-slashes-within-a-route-template-field)\n  - [How do I adapt my code to default context type changes in Falcon 2.0?](#how-do-i-adapt-my-code-to-default-context-type-changes-in-falcon-2-0)\n- [Response Handling](#response-handling)\n  - [How can I use resp.media with types like datetime?](#how-can-i-use-resp-media-with-types-like-datetime)\n  - [Does Falcon set Content-Length or do I need to do that explicitly?](#does-falcon-set-content-length-or-do-i-need-to-do-that-explicitly)\n  - [Why is an empty response body returned when I raise an instance of HTTPError?](#why-is-an-empty-response-body-returned-when-i-raise-an-instance-of-httperror)\n  - [I’m setting a response body, but it isn’t getting returned. What’s going on?](#i-m-setting-a-response-body-but-it-isn-t-getting-returned-what-s-going-on)\n  - [I’m setting a cookie, but it isn’t being returned in subsequent requests.](#i-m-setting-a-cookie-but-it-isn-t-being-returned-in-subsequent-requests)\n  - [How can I serve a downloadable file with falcon?](#how-can-i-serve-a-downloadable-file-with-falcon)\n  - [Can Falcon serve static files?](#can-falcon-serve-static-files)\n- [Misc.](#misc)\n  - [How do I manage my database connections?](#how-do-i-manage-my-database-connections)\n  - [What is the recommended approach for making configuration variables available to multiple resource classes?](#what-is-the-recommended-approach-for-making-configuration-variables-available-to-multiple-resource-classes)\n  - [How do I test my Falcon app? Can I use pytest?](#how-do-i-test-my-falcon-app-can-i-use-pytest)\n\n## Design Philosophy\n\n### Why doesn’t Falcon come with batteries included?\n\nFalcon is designed for applications that require a high level of customization or performance tuning. The framework’s minimalist design frees the developer to select the best strategies and 3rd-party packages for the task at hand.\n\nThe Python ecosystem offers a number of great packages that you can use from within your responders, hooks, and middleware components. As a starting point, the community maintains a list of [Falcon add-ons and complementary packages](https://github.com/falconry/falcon/wiki).\n\n### Why doesn’t Falcon create a new Resource instance for every request?\n\nFalcon generally tries to minimize the number of objects that it instantiates. It does this for two reasons: first, to avoid the expense of creating the object, and second to reduce memory usage by reducing the total number of objects required under highly concurrent workloads. Therefore, when adding a route, Falcon requires an *instance* of your resource class, rather than the class type. That same instance will be used to serve all requests coming in on that route.\n\n### Why does raising an error inside a resource crash my app?\n\nGenerally speaking, Falcon assumes that resource responders (such as `on_get()`, `on_post()`, etc.) will, for the most part, do the right thing. In other words, Falcon doesn’t try very hard to protect responder code from itself.\n\nThis approach reduces the number of checks that Falcon would otherwise have to perform, making the framework more efficient. With that in mind, writing a high-quality API based on Falcon requires that:\n\n1.  Resource responders set response variables to sane values.\n2.  Your code is well-tested, with high code coverage.\n3.  Errors are anticipated, detected, and handled appropriately within each responder and with the aid of custom error handlers.\n\nTip\n\nFalcon will re-raise errors that do not inherit from [`HTTPError`](../api/errors#falcon.HTTPError \"falcon.HTTPError\") unless you have registered a custom error handler for that type (see also: [falcon.API](../api/api#api)).\n\n### How do I generate API documentation for my Falcon API?\n\nWhen it comes to API documentation, some developers prefer to use the API implementation as the user contract or source of truth (taking an implementation-first approach), while other developers prefer to use the API spec itself as the contract, implementing and testing the API against that spec (taking a design-first approach).\n\nAt the risk of erring on the side of flexibility, Falcon does not provide API spec support out of the box. However, there are several community projects available in this vein. Our [Add on Catalog](https://github.com/falconry/falcon/wiki/Add-on-Catalog) lists a couple of these projects, but you may also wish to search [PyPI](https://pypi.python.org/pypi) for additional packages.\n\nIf you are interested in the design-first approach mentioned above, you may also want to check out API design and gateway services such as Tyk, Apiary, Amazon API Gateway, or Google Cloud Endpoints.\n\n## Performance\n\n### Does Falcon work with HTTP/2?\n\nFalcon is a WSGI framework and as such does not serve HTTP requests directly. However, you can get most of the benefits of HTTP/2 by simply deploying any HTTP/2-compliant web server or load balancer in front of your app to translate between HTTP/2 and HTTP/1.1. Eventually we expect that Python web servers (such as uWSGI) will support HTTP/2 natively, eliminating the need for a translation layer.\n\n### Is Falcon thread-safe?\n\nThe Falcon framework is, itself, thread-safe. For example, new [`Request`](../api/request_and_response#falcon.Request \"falcon.Request\") and [`Response`](../api/request_and_response#falcon.Response \"falcon.Response\") objects are created for each incoming HTTP request. However, a single instance of each resource class attached to a route is shared among all requests. Middleware objects and other types of hooks, such as custom error handlers, are likewise shared. Therefore, as long as you implement these classes and callables in a thread-safe manner, and ensure that any third-party libraries used by your app are also thread-safe, your WSGI app as a whole will be thread-safe.\n\nThat being said, IO-bound Falcon APIs are usually scaled via multiple processes and green threads (courtesy of the [gevent](http://www.gevent.org/) library or similar) which aren’t truly running concurrently, so there may be some edge cases where Falcon is not thread-safe that we aren’t aware of. If you run into any issues, please let us know.\n\n### Does Falcon support asyncio?\n\nDue to the limitations of WSGI, Falcon is unable to support `asyncio` at this time. However, we are exploring alternatives to WSGI (such as [ASGI](https://github.com/django/asgiref/blob/master/specs/asgi.rst)) that will allow us to support asyncio natively in the future.\n\nIn the meantime, we recommend using the battle-tested [gevent](http://www.gevent.org/) library via Gunicorn or uWSGI to scale IO-bound services. [meinheld](https://pypi.org/project/meinheld/) has also been used successfully by the community to power high-throughput, low-latency services. Note that if you use Gunicorn, you can combine gevent and PyPy to achieve an impressive level of performance. (Unfortunately, uWSGI does not yet support using gevent and PyPy together.)\n\n### Does Falcon support WebSocket?\n\nDue to the limitations of WSGI, Falcon is unable to support the WebSocket protocol as stated above.\n\nIn the meantime, you might try leveraging [uWSGI’s native WebSocket support](http://uwsgi.readthedocs.io/en/latest/WebSockets.html), or implementing a standalone service via Aymeric Augustin’s handy [websockets](https://pypi.python.org/pypi/websockets/4.0.1) library.\n\n## Routing\n\n### How do I implement CORS with Falcon?\n\nIn order for a website or SPA to access an API hosted under a different domain name, that API must implement [Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS). For a public API, implementing CORS in Falcon can be as simple as implementing a middleware component similar to the following:\n\n``` python\nclass CORSComponent(object):\n    def process_response(self, req, resp, resource, req_succeeded):\n        resp.set_header('Access-Control-Allow-Origin', '*')\n\n        if (req_succeeded\n            and req.method == 'OPTIONS'\n            and req.get_header('Access-Control-Request-Method')\n        ):\n            # NOTE(kgriffs): This is a CORS preflight request. Patch the\n            #   response accordingly.\n\n            allow = resp.get_header('Allow')\n            resp.delete_header('Allow')\n\n            allow_headers = req.get_header(\n                'Access-Control-Request-Headers',\n                default='*'\n            )\n\n            resp.set_headers((\n                ('Access-Control-Allow-Methods', allow),\n                ('Access-Control-Allow-Headers', allow_headers),\n                ('Access-Control-Max-Age', '86400'),  # 24 hours\n            ))\n```\n\nWhen using the above approach, OPTIONS requests must also be special-cased in any other middleware or hooks you use for auth, content-negotiation, etc. For example, you will typically skip auth for preflight requests because it is simply unnecessary; note that such request do not include the Authorization header in any case.\n\nFor more sophisticated use cases, have a look at Falcon add-ons from the community, such as [falcon-cors](https://github.com/lwcolton/falcon-cors), or try one of the generic [WSGI CORS libraries available on PyPI](https://pypi.python.org/pypi?%3Aaction=search&term=cors&submit=search). If you use an API gateway, you might also look into what CORS functionality it provides at that level.\n\n### How do I implement redirects within Falcon?\n\nFalcon provides a number of exception classes that can be raised to redirect the client to a different location (see also [Redirection](../api/redirects#redirects)).\n\nNote, however, that it is more efficient to handle permanent redirects directly with your web server, if possible, rather than placing additional load on your app for such requests.\n\n### How do I split requests between my original app and the part I migrated to Falcon?\n\nIt is common to carve out a portion of an app and reimplement it in Falcon to boost performance where it is most needed.\n\nIf you have access to your load balancer or reverse proxy configuration, we recommend setting up path or subdomain-based rules to split requests between your original implementation and the parts that have been migrated to Falcon (e.g., by adding an additional `location` directive to your NGINX config).\n\nIf the above approach isn’t an option for your deployment, you can implement a simple WSGI wrapper that does the same thing:\n\n``` python\ndef application(environ, start_response):\n    try:\n        # NOTE(kgriffs): Prefer the host header; the web server\n        # isn't supposed to mess with it, so it should be what\n        # the client actually sent.\n        host = environ['HTTP_HOST']\n    except KeyError:\n        # NOTE(kgriffs): According to PEP-3333, this header\n        # will always be present.\n        host = environ['SERVER_NAME']\n\n    if host.startswith('api.'):\n        return falcon_app(environ, start_response)\n    elif:\n        return webapp2_app(environ, start_response)\n```\n\nSee also [PEP 3333](https://www.python.org/dev/peps/pep-3333/#environ-variables) for a complete list of the variables that are provided via `environ`.\n\n### How do I implement both POSTing and GETing items for the same resource?\n\nSuppose you have the following routes:\n\n``` python\n# Resource Collection\nGET /resources{?marker, limit}\nPOST /resources\n\n# Resource Item\nGET /resources/{id}\nPATCH /resources/{id}\nDELETE /resources/{id}\n```\n\nYou can implement this sort of API by simply using two Python classes, one to represent a single resource, and another to represent the collection of said resources. It is common to place both classes in the same module (see also [this section of the tutorial](tutorial#tutorial-serving-images).)\n\nAlternatively, you can use suffixed responders to map both routes to the same resource class:\n\n``` python\nclass MyResource(object):\n    def on_get(self, req, resp, id):\n        pass\n\n    def on_patch(self, req, resp, id):\n        pass\n\n    def on_delete(self, req, resp, id):\n        pass\n\n    def on_get_collection(self, req, resp):\n        pass\n\n    def on_post_collection(self, req, resp):\n        pass\n\n\n# ...\n\n\nresource = MyResource()\napi.add_route('/resources/{id}', resource)\napi.add_route('/resources', resource, suffix='collection')\n```\n\n### What is the recommended way to map related routes to resource classes?\n\nLet’s say we have the following URL schema:\n\n``` python\nGET  /game/ping\nGET  /game/{game_id}\nPOST /game/{game_id}\nGET  /game/{game_id}/state\nPOST /game/{game_id}/state\n```\n\nWe can break this down into three resources:\n\n``` python\nPing:\n\n    GET  /game/ping\n\nGame:\n\n    GET  /game/{game_id}\n    POST /game/{game_id}\n\nGameState:\n\n    GET  /game/{game_id}/state\n    POST /game/{game_id}/state\n```\n\nGameState may be thought of as a sub-resource of Game. It is a distinct logical entity encapsulated within a more general Game concept.\n\nIn Falcon, these resources would be implemented with standard classes:\n\n``` python\nclass Ping(object):\n\n    def on_get(self, req, resp):\n        resp.body = '{\"message\": \"pong\"}'\n\n\nclass Game(object):\n\n    def __init__(self, dao):\n        self._dao = dao\n\n    def on_get(self, req, resp, game_id):\n        pass\n\n    def on_post(self, req, resp, game_id):\n        pass\n\n\nclass GameState(object):\n\n    def __init__(self, dao):\n        self._dao = dao\n\n    def on_get(self, req, resp, game_id):\n        pass\n\n    def on_post(self, req, resp, game_id):\n        pass\n\n\napi = falcon.API()\n\n# Game and GameState are closely related, and so it\n# probably makes sense for them to share an object\n# in the Data Access Layer. This could just as\n# easily use a DB object or ORM layer.\n#\n# Note how the resources classes provide a layer\n# of abstraction or indirection which makes your\n# app more flexible since the data layer can\n# evolve somewhat independently from the presentation\n# layer.\ngame_dao = myapp.DAL.Game(myconfig)\n\napi.add_route('/game/ping', Ping())\napi.add_route('/game/{game_id}', Game(game_dao))\napi.add_route('/game/{game_id}/state', GameState(game_dao))\n```\n\nAlternatively, a single resource class could implement suffixed responders in order to handle all three routes:\n\n``` python\nclass Game(object):\n\n    def __init__(self, dao):\n        self._dao = dao\n\n    def on_get(self, req, resp, game_id):\n        pass\n\n    def on_post(self, req, resp, game_id):\n        pass\n\n    def on_get_state(self, req, resp, game_id):\n        pass\n\n    def on_post_state(self, req, resp, game_id):\n        pass\n\n    def on_get_ping(self, req, resp):\n        resp.data = b'{\"message\": \"pong\"}'\n\n\n# ...\n\n\napi = falcon.API()\n\ngame = Game(myapp.DAL.Game(myconfig))\n\napi.add_route('/game/{game_id}', game)\napi.add_route('/game/{game_id}/state', game, suffix='state')\napi.add_route('/game/ping', game, suffix='ping')\n```\n\n## Extensibility\n\n### How do I use WSGI middleware with Falcon?\n\nInstances of [`falcon.API`](../api/api#falcon.API \"falcon.API\") are first-class WSGI apps, so you can use the standard pattern outlined in PEP-3333. In your main “app” file, you would simply wrap your api instance with a middleware app. For example:\n\n``` python\nimport my_restful_service\nimport some_middleware\n\napp = some_middleware.DoSomethingFancy(my_restful_service.api)\n```\n\nSee also the [WSGI middleware example](https://www.python.org/dev/peps/pep-3333/#middleware-components-that-play-both-sides) given in PEP-3333.\n\n### How can I pass data from a hook to a responder, and between hooks?\n\nYou can inject extra responder kwargs from a hook by adding them to the *params* dict passed into the hook. You can also set custom attributes on the `req.context` object, as a way of passing contextual information around:\n\n``` python\ndef authorize(req, resp, resource, params):\n    # Check authentication/authorization\n    # ...\n\n    req.context.role = 'root'\n    req.context.scopes = ('storage', 'things')\n    req.context.uid = 0\n\n# ...\n\n@falcon.before(authorize)\ndef on_post(self, req, resp):\n    pass\n```\n\n### How can I write a custom handler for 404 and 500 pages in falcon?\n\nWhen a route can not be found for an incoming request, Falcon uses a default responder that simply raises an instance of [`falcon.HTTPNotFound`](../api/errors#falcon.HTTPNotFound \"falcon.HTTPNotFound\"). You can use [`falcon.API.add_error_handler()`](../api/api#falcon.API.add_error_handler \"falcon.API.add_error_handler\") to register a custom error handler for this exception type. Alternatively, you may be able to configure your web server to transform the response for you (e.g., using Nginx’s `error_page` directive).\n\n500 errors are typically the result of an unhandled exception making its way up to the web server. To handle these errors more gracefully, you can add a custom error handler for Python’s base [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception \"(in Python v3.7)\") type.\n\n## Request Handling\n\n### How do I authenticate requests?\n\nHooks and middleware components can be used together to authenticate and authorize requests. For example, a middleware component could be used to parse incoming credentials and place the results in `req.context`. Downstream components or hooks could then use this information to authorize the request, taking into account the user’s role and the requested resource.\n\n### Why does req.stream.read() hang for certain requests?\n\nThis behavior is an unfortunate artifact of the request body mechanics not being fully defined by the WSGI spec (PEP-3333). This is discussed in the reference documentation for [`stream`](../api/request_and_response#falcon.Request.stream \"falcon.Request.stream\"), and a workaround is provided in the form of [`bounded_stream`](../api/request_and_response#falcon.Request.bounded_stream \"falcon.Request.bounded_stream\").\n\n### How does Falcon handle a trailing slash in the request path?\n\nIf your app sets [`strip_url_path_trailing_slash`](../api/api#falcon.RequestOptions.strip_url_path_trailing_slash \"falcon.RequestOptions.strip_url_path_trailing_slash\") to `True`, Falcon will normalize incoming URI paths to simplify later processing and improve the predictability of application logic. This can be helpful when implementing a REST API schema that does not interpret a trailing slash character as referring to the name of an implicit sub-resource, as traditionally used by websites to reference index pages.\n\nFor example, with this option enabled, adding a route for `'/foo/bar'` implicitly adds a route for `'/foo/bar/'`. In other words, requests coming in for either path will be sent to the same resource.\n\nNote\n\nStarting with version 2.0, the default for the [`strip_url_path_trailing_slash`](../api/api#falcon.RequestOptions.strip_url_path_trailing_slash \"falcon.RequestOptions.strip_url_path_trailing_slash\") request option changed from `True` to `False`.\n\n### Why is my query parameter missing from the req object?\n\nIf a query param does not have a value, Falcon will by default ignore that parameter. For example, passing `'foo'` or `'foo='` will result in the parameter being ignored.\n\nIf you would like to recognize such parameters, you must set the `keep_blank_qs_values` request option to `True`. Request options are set globally for each instance of [`falcon.API`](../api/api#falcon.API \"falcon.API\") via the [`req_options`](../api/api#falcon.API.req_options \"falcon.API.req_options\") property. For example:\n\n``` python\napi.req_options.keep_blank_qs_values = True\n```\n\n### Why are ‘+’ characters in my params being converted to spaces?\n\nThe `+` character is often used instead of `%20` to represent spaces in query string params, due to the historical conflation of form parameter encoding (`application/x-www-form-urlencoded`) and URI percent-encoding. Therefore, Falcon, converts `+` to a space when decoding strings.\n\nTo work around this, RFC 3986 specifies `+` as a reserved character, and recommends percent-encoding any such characters when their literal value is desired (`%2B` in the case of `+`).\n\n### How can I access POSTed form params?\n\nBy default, Falcon does not consume request bodies. However, setting the `auto_parse_form_urlencoded` to `True` on an instance of `falcon.API` will cause the framework to consume the request body when the content type is `application/x-www-form-urlencoded`, making the form parameters accessible via [`params`](../api/request_and_response#falcon.Request.params \"falcon.Request.params\"), [`get_param()`](../api/request_and_response#falcon.Request.get_param \"falcon.Request.get_param\"), etc.\n\n``` python\napi.req_options.auto_parse_form_urlencoded = True\n```\n\nAlternatively, POSTed form parameters may be read directly from [`stream`](../api/request_and_response#falcon.Request.stream \"falcon.Request.stream\") and parsed via [`falcon.uri.parse_query_string()`](../api/util#falcon.uri.parse_query_string \"falcon.uri.parse_query_string\") or [urllib.parse.parse_qs()](https://docs.python.org/3.6/library/urllib.parse.html#urllib.parse.parse_qs).\n\n### How can I access POSTed files?\n\nFalcon does not currently support parsing files submitted by an HTTP form (`multipart/form-data`), although we do plan to add this feature in a future version. In the meantime, you can use the standard `cgi.FieldStorage` class to parse the request:\n\n``` python\n# TODO: Either validate that content type is multipart/form-data\n# here, or in another hook before allowing execution to proceed.\n\n# This must be done to avoid a bug in cgi.FieldStorage\nenv = req.env\nenv.setdefault('QUERY_STRING', '')\n\n# TODO: Add error handling, when the request is not formatted\n# correctly or does not contain the desired field...\n\n# TODO: Consider overriding make_file, so that you can\n# stream directly to the destination rather than\n# buffering using TemporaryFile (see http://goo.gl/Yo8h3P)\nform = cgi.FieldStorage(fp=req.stream, environ=env)\n\nfile_item = form[name]\nif file_item.file:\n    # TODO: It's an uploaded file... read it in\nelse:\n    # TODO: Raise an error\n```\n\nYou might also try this [streaming_form_data](https://streaming-form-data.readthedocs.io/en/latest/) package by Siddhant Goel, or searching PyPI for additional options from the community.\n\n### How do I consume a query string that has a JSON value?\n\nFalcon defaults to treating commas in a query string as literal characters delimiting a comma separated list. For example, given the query string `?c=1,2,3`, Falcon defaults to adding this to your `request.params` dictionary as `{'c': ['1', '2', '3']}`. If you attempt to use JSON in the value of the query string, for example `?c={'a':1,'b':2}`, the value will get added to your `request.params` in a way that you probably don’t expect: `{'c': [\"{'a':1\", \"'b':2}\"]}`.\n\nCommas are a reserved character that can be escaped according to [RFC 3986 - 2.2. Reserved Characters](https://tools.ietf.org/html/rfc3986#section-2.2), so one possible solution is to percent encode any commas that appear in your JSON query string. The other option is to switch the way Falcon handles commas in a query string by setting the [`auto_parse_qs_csv`](../api/api#falcon.RequestOptions.auto_parse_qs_csv \"falcon.RequestOptions.auto_parse_qs_csv\") to `False` on an instance of [`falcon.API`](../api/api#falcon.API \"falcon.API\"):\n\n``` python\napi.req_options.auto_parse_qs_csv = False\n```\n\nWhen [`auto_parse_qs_csv`](../api/api#falcon.RequestOptions.auto_parse_qs_csv \"falcon.RequestOptions.auto_parse_qs_csv\") is set to `False`, the value of the query string `?c={'a':1,'b':2}` will be added to the `req.params` dictionary as `{'c': \"{'a':1,'b':2}\"}`. This lets you consume JSON whether or not the client chooses to escape commas in the request.\n\n### How can I handle forward slashes within a route template field?\n\nIn Falcon 1.3 we shipped initial support for [field converters](http://falcon.readthedocs.io/en/stable/api/routing.html#field-converters). We’ve discussed building on this feature to support consuming multiple path segments ala Flask. This work is currently planned for 2.0.\n\nIn the meantime, the workaround is to percent-encode the forward slash. If you don’t control the clients and can’t enforce this, you can implement a Falcon middleware component to rewrite the path before it is routed.\n\n### How do I adapt my code to default context type changes in Falcon 2.0?\n\nThe default request/response context type has been changed from dict to a bare class in Falcon 2.0. Instead of setting dictionary items, you can now simply set attributes on the object:\n\n``` python\n# Before Falcon 2.0\nreq.context['cache_backend'] = MyUltraFastCache.connect()\n\n# Falcon 2.0\nreq.context.cache_backend = MyUltraFastCache.connect()\n```\n\nThe new default context type emulates a dict-like mapping interface in a way that context attributes are linked to dict items, i.e. setting an object attribute also sets the corresponding dict item, and vice versa. As a result, existing code will largely work unmodified with Falcon 2.0. Nevertheless, it is recommended to migrate to the new interface as outlined above since the dict-like mapping interface may be removed from the context type in a future release.\n\nWarning\n\nIf you need to mix-and-match both approaches under migration, beware that setting attributes such as *items* or *values* would obviously shadow the corresponding mapping interface functions.\n\nIf an existing project is making extensive use of dictionary contexts, the type can be explicitly overridden back to dict by employing custom request/response types:\n\n``` python\nclass RequestWithDictContext(falcon.Request):\n    context_type = dict\n\nclass ResponseWithDictContext(falcon.Response):\n    context_type = dict\n\n# ...\n\napi = falcon.API(request_type=RequestWithDictContext,\n                 response_type=ResponseWithDictContext)\n```\n\n## Response Handling\n\n### How can I use resp.media with types like datetime?\n\nThe default JSON handler for `resp.media` only supports the objects and types listed in the table documented under [json.JSONEncoder](https://docs.python.org/3.6/library/json.html#json.JSONEncoder). To handle additional types, you can either serialize them beforehand, or create a custom JSON media handler that sets the `default` param for `json.dumps()`. When deserializing an incoming request body, you may also wish to implement `object_hook` for `json.loads()`. Note, however, that setting the `default` or `object_hook` params can negatively impact the performance of (de)serialization.\n\n### Does Falcon set Content-Length or do I need to do that explicitly?\n\nFalcon will try to do this for you, based on the value of `resp.body`, `resp.data`, or `resp.stream_len` (whichever is set in the response, checked in that order.)\n\nFor dynamically-generated content, you can choose to not set `stream_len`, in which case Falcon will then leave off the Content-Length header, and hopefully your WSGI server will do the Right Thing™ (assuming you’ve told it to enable keep-alive).\n\nNote\n\nPEP-3333 prohibits apps from setting hop-by-hop headers itself, such as Transfer-Encoding.\n\n### Why is an empty response body returned when I raise an instance of HTTPError?\n\nFalcon attempts to serialize the [`HTTPError`](../api/errors#falcon.HTTPError \"falcon.HTTPError\") instance using its [`to_json()`](../api/errors#falcon.HTTPError.to_json \"falcon.HTTPError.to_json\") or [`to_xml()`](../api/errors#falcon.HTTPError.to_xml \"falcon.HTTPError.to_xml\") methods, according to the Accept header in the request. If neither JSON nor XML is acceptable, no response body will be generated. You can override this behavior if needed via [`set_error_serializer()`](../api/api#falcon.API.set_error_serializer \"falcon.API.set_error_serializer\").\n\n### I’m setting a response body, but it isn’t getting returned. What’s going on?\n\nFalcon skips processing the response body when, according to the HTTP spec, no body should be returned. If the client sends a HEAD request, the framework will always return an empty body. Falcon will also return an empty body whenever the response status is any of the following:\n\n``` python\nfalcon.HTTP_100\nfalcon.HTTP_204\nfalcon.HTTP_416\nfalcon.HTTP_304\n```\n\nIf you have another case where the body isn’t being returned, it’s probably a bug! [Let us know](https://falcon.readthedocs.io/en/2.0.0/community/help.html#help) so we can help.\n\n### I’m setting a cookie, but it isn’t being returned in subsequent requests.\n\nBy default, Falcon enables the `secure` cookie attribute. Therefore, if you are testing your app over HTTP (instead of HTTPS), the client will not send the cookie in subsequent requests.\n\n(See also the [cookie documentation](../api/cookies#cookie-secure-attribute).)\n\n### How can I serve a downloadable file with falcon?\n\nIn the `on_get()` responder method for the resource, you can tell the user agent to download the file by setting the Content-Disposition header. Falcon includes the `downloadable_as` property to make this easy:\n\n``` python\nresp.downloadable_as = 'report.pdf'\n```\n\n### Can Falcon serve static files?\n\nFalcon makes it easy to efficiently serve static files by simply assigning an open file to `resp.stream` [as demonstrated in the tutorial](tutorial#tutorial-serving-images). You can also serve an entire directory of files via [`falcon.API.add_static_route()`](../api/api#falcon.API.add_static_route \"falcon.API.add_static_route\"). However, if possible, it is best to serve static files directly from a web server like Nginx, or from a CDN.\n\n## Misc.\n\n### How do I manage my database connections?\n\nAssuming your database library manages its own connection pool, all you need to do is initialize the client and pass an instance of it into your resource classes. For example, using SQLAlchemy Core:\n\n``` python\nengine = create_engine('sqlite:///:memory:')\nresource = SomeResource(engine)\n```\n\nThen, within `SomeResource`:\n\n``` python\n# Read from the DB\nresult = self._engine.execute(some_table.select())\nfor row in result:\n    # ....\nresult.close()\n\n# ...\n\n# Write to the DB within a transaction\nwith self._engine.begin() as connection:\n    r1 = connection.execute(some_table.select())\n    # ...\n    connection.execute(\n        some_table.insert(),\n        col1=7,\n        col2='this is some data'\n    )\n```\n\nWhen using a data access layer, simply pass the engine into your data access objects instead. See also [this sample Falcon project](https://github.com/jmvrbanac/falcon-example) that demonstrates using an ORM with Falcon.\n\nYou can also create a middleware component to automatically check out database connections for each request, but this can make it harder to track down errors, or to tune for the needs of individual requests.\n\nIf you need to transparently handle reconnecting after an error, or for other use cases that may not be supported by your client library, simply encapsulate the client library within a management class that handles all the tricky bits, and pass that around instead.\n\n### What is the recommended approach for making configuration variables available to multiple resource classes?\n\nPeople usually fall into two camps when it comes to this question. The first camp likes to instantiate a config object and pass that around to the initializers of the resource classes so the data sharing is explicit. The second camp likes to create a config module and import that wherever it’s needed.\n\nWith the latter approach, to control when the config is actually loaded, it’s best not to instantiate it at the top level of the config module’s namespace. This avoids any problematic side-effects that may be caused by loading the config whenever Python happens to process the first import of the config module. Instead, consider implementing a function in the module that returns a new or cached config object on demand.\n\nOther than that, it’s pretty much up to you if you want to use the standard library config library or something like `aumbry` as demonstrated by this [falcon example app](https://github.com/jmvrbanac/falcon-example/tree/master/example)\n\n(See also the **Configuration** section of our [Complementary Packages wiki page](https://github.com/falconry/falcon/wiki/Complementary-Packages). You may also wish to search PyPI for other options).\n\n### How do I test my Falcon app? Can I use pytest?\n\nFalcon’s testing framework supports both `unittest` and `pytest`. In fact, the tutorial in the docs provides an excellent introduction to [testing Falcon apps with pytest](http://falcon.readthedocs.io/en/stable/user/tutorial.html#testing-your-application).\n\n(See also: [Testing](http://falcon.readthedocs.io/en/stable/api/testing.html))\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/user/faq.html](https://falcon.readthedocs.io/en/2.0.0/user/faq.html)"
- name: Hooks
  id: api/hooks
  summary: Falcon supports before and after hooks
  description: "# Hooks\n\nFalcon supports *before* and *after* hooks. You install a hook simply by applying one of the decorators below, either to an individual responder or to an entire resource.\n\nFor example, consider this hook that validates a POST request for an image resource:\n\n``` python\ndef validate_image_type(req, resp, resource, params):\n    if req.content_type not in ALLOWED_IMAGE_TYPES:\n        msg = 'Image type not allowed. Must be PNG, JPEG, or GIF'\n        raise falcon.HTTPBadRequest('Bad request', msg)\n```\n\nYou would attach this hook to an `on_post` responder like so:\n\n``` python\n@falcon.before(validate_image_type)\ndef on_post(self, req, resp):\n    pass\n```\n\nOr, suppose you had a hook that you would like to apply to *all* responders for a given resource. In that case, you would simply decorate the resource class:\n\n``` python\n@falcon.before(extract_project_id)\nclass Message(object):\n    def on_post(self, req, resp, project_id):\n        pass\n\n    def on_get(self, req, resp, project_id):\n        pass\n```\n\nNote\n\nWhen decorating an entire resource class, all method names that resemble responders, including *suffix*ed (see also [`add_route()`](api#falcon.API.add_route \"falcon.API.add_route\")) ones, are decorated. If, for instance, a method is called `on_get_items`, but it is not meant for handling `GET` requests under a route with the *suffix* `items`, the easiest workaround for preventing the hook function from being applied to the method is renaming it not to clash with the responder pattern.\n\nNote also that you can pass additional arguments to your hook function as needed:\n\n``` python\ndef validate_image_type(req, resp, resource, params, allowed_types):\n    if req.content_type not in allowed_types:\n        msg = 'Image type not allowed.'\n        raise falcon.HTTPBadRequest('Bad request', msg)\n\n@falcon.before(validate_image_type, ['image/png'])\ndef on_post(self, req, resp):\n    pass\n```\n\nFalcon supports using any callable as a hook. This allows for using a class instead of a function:\n\n``` python\nclass Authorize(object):\n    def __init__(self, roles):\n        self._roles = roles\n\n    def __call__(self, req, resp, resource, params):\n        pass\n\n@falcon.before(Authorize(['admin']))\ndef on_post(self, req, resp):\n    pass\n```\n\nFalcon [middleware components](middleware#middleware) can also be used to insert logic before and after requests. However, unlike hooks, [middleware components](middleware#middleware) are triggered **globally** for all requests.\n\nTip\n\nIn order to pass data from a hook function to a resource function use the `req.context` and `resp.context` objects. These context objects are intended to hold request and response data specific to your app as it passes through the framework.\n\n`falcon.before(action, *args, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/hooks.html#before)  \nDecorator to execute the given action function *before* the responder.\n\n[TABLE]\n\n`falcon.after(action, *args, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/hooks.html#after)  \nDecorator to execute the given action function *after* the responder.\n\n[TABLE]\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/hooks.html](https://falcon.readthedocs.io/en/2.0.0/api/hooks.html)"
- name: Installation
  id: user/install
  summary: PyPy is the fastest way to run your Falcon app
  description: "# Installation\n\n## PyPy\n\n[PyPy](http://pypy.org/) is the fastest way to run your Falcon app. Both PyPy2.7 and PyPy3.5 are supported as of PyPy v5.10.\n\n``` bash\n$ pip install falcon\n```\n\nOr, to install the latest beta or release candidate, if any:\n\n``` bash\n$ pip install --pre falcon\n```\n\n## CPython\n\nFalcon also fully supports [CPython](https://www.python.org/downloads/) 2.7 and 3.5+.\n\nUniversal and manylinux wheels are available on PyPI for the Falcon framework. Installation is as simple as:\n\n``` bash\n$ pip install falcon\n```\n\nInstalling one of the pre-built Falcon wheels is a great way to get up and running quickly. However, when deploying your application in production, you may wish to compile Falcon via Cython yourself, using the target system’s native toolchain.\n\nThe following commands tell pip to install Cython, and then to invoke Falcon’s `setup.py`, which will in turn detect the presence of Cython and then compile (AKA cythonize) the Falcon framework with the system’s default C compiler.\n\n``` bash\n$ pip install cython\n$ pip install --no-binary :all: falcon\n```\n\nIf you want to verify that Cython is being invoked, simply pass `-v` to pip in order to echo the compilation commands:\n\n``` bash\n$ pip install -v --no-binary :all: falcon\n```\n\n**Installing on OS X**\n\nXcode Command Line Tools are required to compile Cython. Install them with this command:\n\n``` bash\n$ xcode-select --install\n```\n\nThe Clang compiler treats unrecognized command-line options as errors, for example:\n\n``` bash\nclang: error: unknown argument: '-mno-fused-madd' [-Wunused-command-line-argument-hard-error-in-future]\n```\n\nYou might also see warnings about unused functions. You can work around these issues by setting additional Clang C compiler flags as follows:\n\n``` bash\n$ export CFLAGS=\"-Qunused-arguments -Wno-unused-function\"\n```\n\n## Dependencies\n\nFalcon does not require the installation of any other packages, although if Cython has been installed into the environment, it will be used to optimize the framework as explained above.\n\n## WSGI Server\n\nFalcon speaks WSGI, and so in order to serve a Falcon app, you will need a WSGI server. Gunicorn and uWSGI are some of the more popular ones out there, but anything that can load a WSGI app will do.\n\nAll Windows developers can use Waitress production-quality pure-Python WSGI server with very acceptable performance. Unfortunately Gunicorn is still not working on Windows and uWSGI need to have Cygwin on Windows installed. Waitress can be good alternative for Windows users if they want quick start using Falcon on it.\n\n``` bash\n$ pip install [gunicorn|uwsgi|waitress]\n```\n\n## Source Code\n\nFalcon [lives on GitHub](https://github.com/falconry/falcon), making the code easy to browse, download, fork, etc. Pull requests are always welcome! Also, please remember to star the project if it makes you happy. :)\n\nOnce you have cloned the repo or downloaded a tarball from GitHub, you can install Falcon like this:\n\n``` bash\n$ cd falcon\n$ pip install .\n```\n\nOr, if you want to edit the code, first fork the main repo, clone the fork to your desktop, and then run the following to install it using symbolic linking, so that when you change your code, the changes will be automagically available to your app without having to reinstall the package:\n\n``` bash\n$ cd falcon\n$ pip install -e .\n```\n\nYou can manually test changes to the Falcon framework by switching to the directory of the cloned repo and then running pytest:\n\n``` bash\n$ cd falcon\n$ pip install -r requirements/tests\n$ pytest tests\n```\n\nOr, to run the default set of tests:\n\n``` bash\n$ pip install tox && tox\n```\n\nTip\n\nSee also the [tox.ini](https://github.com/falconry/falcon/blob/master/tox.ini) file for a full list of available environments.\n\nFinally, to build Falcon’s docs from source, simply run:\n\n``` bash\n$ pip install tox && tox -e docs\n```\n\nOnce the docs have been built, you can view them by opening the following index page in your browser. On OS X it’s as simple as:\n\n``` python\n$ open docs/_build/html/index.html\n```\n\nOr on Linux:\n\n``` python\n$ xdg-open docs/_build/html/index.html\n```\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/user/install.html](https://falcon.readthedocs.io/en/2.0.0/user/install.html)"
- name: Introduction
  id: user/intro
  summary: Perfection is finally attained not when there is no longer anything to add, but when there is no longer anything to take away
  description: "# Introduction\n\nPerfection is finally attained not when there is no longer anything to add, but when there is no longer anything to take away.\n\n*- Antoine de Saint-Exupéry*\n\n[Falcon](https://falconframework.org) is a reliable, high-performance Python web framework for building large-scale app backends and microservices. It encourages the REST architectural style, and tries to do as little as possible while remaining highly effective.\n\nFalcon apps work with any WSGI server, and run like a champ under CPython 2.7/3.5+ and PyPy.\n\n## How is Falcon different?\n\nWe designed Falcon to support the demanding needs of large-scale microservices and responsive app backends. Falcon complements more general Python web frameworks by providing bare-metal performance, reliability, and flexibility wherever you need it.\n\n**Fast.** Same hardware, more requests. Falcon turns around requests several times faster than most other Python frameworks. For an extra speed boost, Falcon compiles itself with Cython when available, and also works well with [PyPy](https://pypy.org). Considering a move to another programming language? Benchmark with Falcon + PyPy first.\n\n**Reliable.** We go to great lengths to avoid introducing breaking changes, and when we do they are fully documented and only introduced (in the spirit of [SemVer](http://semver.org/)) with a major version increment. The code is rigorously tested with numerous inputs and we require 100% coverage at all times. Falcon does not depend on any external Python packages.\n\n**Flexible.** Falcon leaves a lot of decisions and implementation details to you, the API developer. This gives you a lot of freedom to customize and tune your implementation. Due to Falcon’s minimalist design, Python community members are free to independently innovate on [Falcon add-ons and complementary packages](https://github.com/falconry/falcon/wiki).\n\n**Debuggable.** Falcon eschews magic. It’s easy to tell which inputs lead to which outputs. Unhandled exceptions are never encapsulated or masked. Potentially surprising behaviors, such as automatic request body parsing, are well-documented and disabled by default. Finally, when it comes to the framework itself, we take care to keep logic paths simple and understandable. All this makes it easier to reason about the code and to debug edge cases in large-scale deployments.\n\n## Features\n\n- Highly-optimized, extensible code base\n- Intuitive routing via URI templates and REST-inspired resource classes\n- Easy access to headers and bodies through request and response classes\n- DRY request processing via middleware components and hooks\n- Idiomatic HTTP error responses\n- Straightforward exception handling\n- Snappy unit testing through WSGI helpers and mocks\n- Supports Python 2.7, 3.5+\n- Compatible with PyPy\n\n## About Apache 2.0\n\nFalcon is released under the terms of the [Apache 2.0 License](http://opensource.org/licenses/Apache-2.0). This means that you can use it in your commercial applications without having to also open-source your own code. It also means that if someone happens to contribute code that is associated with a patent, you are granted a free license to use said patent. That’s a pretty sweet deal.\n\nNow, if you do make changes to Falcon itself, please consider contributing your awesome work back to the community.\n\n## Falcon License\n\nCopyright 2012-2017 by Rackspace Hosting, Inc. and other contributors, as noted in the individual source code files.\n\nLicensed under the Apache License, Version 2.0 (the “License”); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n\nBy contributing to this project, you agree to also license your source code under the terms of the Apache License, Version 2.0, as described above.\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/user/intro.html](https://falcon.readthedocs.io/en/2.0.0/user/intro.html)"
- name: Media
  id: api/media
  summary: Falcon allows for easy and customizable internet media type handling
  description: "# Media\n\nFalcon allows for easy and customizable internet media type handling. By default Falcon only enables a single JSON handler. However, additional handlers can be configured through the [`falcon.RequestOptions`](api#falcon.RequestOptions \"falcon.RequestOptions\") and [`falcon.ResponseOptions`](api#falcon.ResponseOptions \"falcon.ResponseOptions\") objects specified on your [`falcon.API`](api#falcon.API \"falcon.API\").\n\nNote\n\nTo avoid unnecessary overhead, Falcon will only process request media the first time the media property is referenced. Once it has been referenced, it’ll use the cached result for subsequent interactions.\n\n## Usage\n\nZero configuration is needed if you’re creating a JSON API. Just access or set the `media` attribute as appropriate and let Falcon do the heavy lifting for you.\n\n``` python\nimport falcon\n\n\nclass EchoResource(object):\n    def on_post(self, req, resp):\n        message = req.media.get('message')\n\n        resp.media = {'message': message}\n        resp.status = falcon.HTTP_200\n```\n\nWarning\n\nOnce `media` is called on a request, it’ll consume the request’s stream.\n\n## Validating Media\n\nFalcon currently only provides a JSON Schema media validator; however, JSON Schema is very versatile and can be used to validate any deserialized media type that JSON also supports (i.e. dicts, lists, etc).\n\n`falcon.media.validators.jsonschema.validate(req_schema=None, resp_schema=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/validators/jsonschema.html#validate)  \nDecorator for validating `req.media` using JSON Schema.\n\nThis decorator provides standard JSON Schema validation via the `jsonschema` package available from PyPI. Semantic validation via the *format* keyword is enabled for the default checkers implemented by `jsonschema.FormatChecker`.\n\nNote\n\nThe `` jsonschema` `` package must be installed separately in order to use this decorator, as Falcon does not install it by default.\n\nSee [json-schema.org](http://json-schema.org/) for more information on defining a compatible dictionary.\n\n[TABLE]\n\n#### Example\n\n``` python\nfrom falcon.media.validators import jsonschema\n\n# -- snip --\n\n@jsonschema.validate(my_post_schema)\ndef on_post(self, req, resp):\n\n# -- snip --\n```\n\nIf JSON Schema does not meet your needs, a custom validator may be implemented in a similar manner to the one above.\n\n## Content-Type Negotiation\n\nFalcon currently only supports partial negotiation out of the box. By default, when the `media` attribute is used it attempts to de/serialize based on the `Content-Type` header value. The missing link that Falcon doesn’t provide is the connection between the [`falcon.Request`](request_and_response#falcon.Request \"falcon.Request\") `Accept` header provided by a user and the [`falcon.Response`](request_and_response#falcon.Response \"falcon.Response\") `Content-Type` header.\n\nIf you do need full negotiation, it is very easy to bridge the gap using middleware. Here is an example of how this can be done:\n\n``` python\nclass NegotiationMiddleware(object):\n    def process_request(self, req, resp):\n        resp.content_type = req.accept\n```\n\n## Replacing the Default Handlers\n\nWhen creating your API object you can either add or completely replace all of the handlers. For example, lets say you want to write an API that sends and receives MessagePack. We can easily do this by telling our Falcon API that we want a default media-type of `application/msgpack` and then create a new [`Handlers`](#falcon.media.Handlers \"falcon.media.Handlers\") object specifying the desired media type and a handler that can process that data.\n\n``` python\nimport falcon\nfrom falcon import media\n\n\nhandlers = media.Handlers({\n    'application/msgpack': media.MessagePackHandler(),\n})\n\napi = falcon.API(media_type='application/msgpack')\n\napi.req_options.media_handlers = handlers\napi.resp_options.media_handlers = handlers\n```\n\nAlternatively, if you would like to add an additional handler such as MessagePack, this can be easily done in the following manner:\n\n``` python\nimport falcon\nfrom falcon import media\n\n\nextra_handlers = {\n    'application/msgpack': media.MessagePackHandler(),\n}\n\napi = falcon.API()\n\napi.req_options.media_handlers.update(extra_handlers)\napi.resp_options.media_handlers.update(extra_handlers)\n```\n\n## Supported Handler Types\n\n`class falcon.media.JSONHandler(dumps=None, loads=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/json.html#JSONHandler)  \nJSON media handler.\n\nThis handler uses Python’s standard [`json`](https://docs.python.org/3/library/json.html#module-json \"(in Python v3.7)\") library by default, but can be easily configured to use any of a number of third-party JSON libraries, depending on your needs. For example, you can often realize a significant performance boost under CPython by using an alternative library. Good options in this respect include `orjson`, `python-rapidjson`, and `mujson`.\n\nNote\n\nIf you are deploying to PyPy, we recommend sticking with the standard library’s JSON implementation, since it will be faster in most cases as compared to a third-party library.\n\nOverriding the default JSON implementation is simply a matter of specifying the desired `dumps` and `loads` functions:\n\n``` python\nimport falcon\nfrom falcon import media\n\nimport rapidjson\n\njson_handler = media.JSONHandler(\n    dumps=rapidjson.dumps,\n    loads=rapidjson.loads,\n)\nextra_handlers = {\n    'application/json': json_handler,\n}\n\napi = falcon.API()\napi.req_options.media_handlers.update(extra_handlers)\napi.resp_options.media_handlers.update(extra_handlers)\n```\n\nBy default, `ensure_ascii` is passed to the `json.dumps` function. If you override the `dumps` function, you will need to explicitly set `ensure_ascii` to `False` in order to enable the serialization of Unicode characters to UTF-8. This is easily done by using `functools.partial` to apply the desired keyword argument. In fact, you can use this same technique to customize any option supported by the `dumps` and `loads` functions:\n\n``` python\nfrom functools import partial\n\nfrom falcon import media\nimport rapidjson\n\njson_handler = media.JSONHandler(\n    dumps=partial(\n        rapidjson.dumps,\n        ensure_ascii=False, sort_keys=True\n    ),\n)\n```\n\n[TABLE]\n\n`deserialize(stream, content_type, content_length)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/json.html#JSONHandler.deserialize)  \nDeserialize the [`falcon.Request`](request_and_response#falcon.Request \"falcon.Request\") body.\n\n[TABLE]\n\n`serialize(media, content_type)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/json.html#JSONHandler.serialize)  \nSerialize the media object on a [`falcon.Response`](request_and_response#falcon.Response \"falcon.Response\")\n\n[TABLE]\n\n`class falcon.media.MessagePackHandler` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/msgpack.html#MessagePackHandler)  \nHandler built using the `msgpack` module.\n\nThis handler uses `msgpack.unpackb()` and `msgpack.packb()`. The MessagePack `bin` type is used to distinguish between Unicode strings (`str` on Python 3, `unicode` on Python 2) and byte strings (`bytes` on Python 2/3, or `str` on Python 2).\n\nNote\n\nThis handler requires the extra `msgpack` package (version 0.5.2 or higher), which must be installed in addition to `falcon` from PyPI:\n\n``` last\n$ pip install msgpack\n```\n\n`deserialize(stream, content_type, content_length)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/msgpack.html#MessagePackHandler.deserialize)  \nDeserialize the [`falcon.Request`](request_and_response#falcon.Request \"falcon.Request\") body.\n\n[TABLE]\n\n`serialize(media, content_type)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/msgpack.html#MessagePackHandler.serialize)  \nSerialize the media object on a [`falcon.Response`](request_and_response#falcon.Response \"falcon.Response\")\n\n[TABLE]\n\n## Custom Handler Type\n\nIf Falcon doesn’t have an internet media type handler that supports your use case, you can easily implement your own using the abstract base class provided by Falcon:\n\n`class falcon.media.BaseHandler` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/base.html#BaseHandler)  \nAbstract Base Class for an internet media type handler\n\n`serialize(media, content_type)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/base.html#BaseHandler.serialize)  \nSerialize the media object on a [`falcon.Response`](request_and_response#falcon.Response \"falcon.Response\")\n\n[TABLE]\n\n`deserialize(stream, content_type, content_length)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/base.html#BaseHandler.deserialize)  \nDeserialize the [`falcon.Request`](request_and_response#falcon.Request \"falcon.Request\") body.\n\n[TABLE]\n\n## Handlers\n\n`class falcon.media.Handlers(initial=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/media/handlers.html#Handlers)  \nA dictionary like object that manages internet media type handlers.\n\n## Media Type Constants\n\nThe `falcon` module provides a number of constants for common media types, including the following:\n\n``` python\nfalcon.MEDIA_JSON\nfalcon.MEDIA_MSGPACK\nfalcon.MEDIA_YAML\nfalcon.MEDIA_XML\nfalcon.MEDIA_HTML\nfalcon.MEDIA_JS\nfalcon.MEDIA_TEXT\nfalcon.MEDIA_JPEG\nfalcon.MEDIA_PNG\nfalcon.MEDIA_GIF\n```\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/media.html](https://falcon.readthedocs.io/en/2.0.0/api/media.html)"
- name: Middleware
  id: api/middleware
  summary: Middleware components provide a way to execute logic before the framework routes each request, after each request is routed but before the target responder is called, or just before the response is returned for each request
  description: "# Middleware\n\nMiddleware components provide a way to execute logic before the framework routes each request, after each request is routed but before the target responder is called, or just before the response is returned for each request. Components are registered with the `middleware` kwarg when instantiating Falcon’s [API class](api#api).\n\nNote\n\nUnlike hooks, middleware methods apply globally to the entire API.\n\nFalcon’s middleware interface is defined as follows:\n\n``` python\nclass ExampleComponent(object):\n    def process_request(self, req, resp):\n        \"\"\"Process the request before routing it.\n\n        Note:\n            Because Falcon routes each request based on req.path, a\n            request can be effectively re-routed by setting that\n            attribute to a new value from within process_request().\n\n        Args:\n            req: Request object that will eventually be\n                routed to an on_* responder method.\n            resp: Response object that will be routed to\n                the on_* responder.\n        \"\"\"\n\n    def process_resource(self, req, resp, resource, params):\n        \"\"\"Process the request after routing.\n\n        Note:\n            This method is only called when the request matches\n            a route to a resource.\n\n        Args:\n            req: Request object that will be passed to the\n                routed responder.\n            resp: Response object that will be passed to the\n                responder.\n            resource: Resource object to which the request was\n                routed.\n            params: A dict-like object representing any additional\n                params derived from the route's URI template fields,\n                that will be passed to the resource's responder\n                method as keyword arguments.\n        \"\"\"\n\n    def process_response(self, req, resp, resource, req_succeeded):\n        \"\"\"Post-processing of the response (after routing).\n\n        Args:\n            req: Request object.\n            resp: Response object.\n            resource: Resource object to which the request was\n                routed. May be None if no route was found\n                for the request.\n            req_succeeded: True if no exceptions were raised while\n                the framework processed and routed the request;\n                otherwise False.\n        \"\"\"\n```\n\nTip\n\nBecause *process_request* executes before routing has occurred, if a component modifies `req.path` in its *process_request* method, the framework will use the modified value to route the request.\n\nFor example:\n\n``` python\n# Route requests based on the host header.\nreq.path = '/' + req.host + req.path\n```\n\nTip\n\nThe *process_resource* method is only called when the request matches a route to a resource. To take action when a route is not found, a [`sink`](api#falcon.API.add_sink \"falcon.API.add_sink\") may be used instead.\n\nTip\n\nIn order to pass data from a middleware function to a resource function use the `req.context` and `resp.context` objects. These context objects are intended to hold request and response data specific to your app as it passes through the framework.\n\nEach component’s *process_request*, *process_resource*, and *process_response* methods are executed hierarchically, as a stack, following the ordering of the list passed via the `middleware` kwarg of [falcon.API](api#api). For example, if a list of middleware objects are passed as `[mob1, mob2, mob3]`, the order of execution is as follows:\n\n``` python\nmob1.process_request\n    mob2.process_request\n        mob3.process_request\n            mob1.process_resource\n                mob2.process_resource\n                    mob3.process_resource\n            <route to resource responder method>\n        mob3.process_response\n    mob2.process_response\nmob1.process_response\n```\n\nNote that each component need not implement all `process_*` methods; in the case that one of the three methods is missing, it is treated as a noop in the stack. For example, if `mob2` did not implement *process_request* and `mob3` did not implement *process_response*, the execution order would look like this:\n\n``` python\nmob1.process_request\n    _\n        mob3.process_request\n            mob1.process_resource\n                mob2.process_resource\n                    mob3.process_resource\n            <route to responder method>\n        _\n    mob2.process_response\nmob1.process_response\n```\n\n## Short-circuiting\n\nA *process_request* middleware method may short-circuit further request processing by setting [`complete`](request_and_response#falcon.Response.complete \"falcon.Response.complete\") to `True`, e.g.:\n\n``` python\nresp.complete = True\n```\n\nAfter the method returns, setting this flag will cause the framework to skip any remaining *process_request* and *process_resource* methods, as well as the responder method that the request would have been routed to. However, any *process_response* middleware methods will still be called.\n\nIn a similar manner, setting [`complete`](request_and_response#falcon.Response.complete \"falcon.Response.complete\") to `True` from within a *process_resource* method will short-circuit further request processing at that point.\n\nThis feature affords use cases in which the response may be pre-constructed, such as in the case of caching.\n\n## Exception Handling\n\nIf one of the *process_request* middleware methods raises an exception, it will be processed according to the exception type. If the type matches a registered error handler, that handler will be invoked and then the framework will begin to unwind the stack, skipping any lower layers. The error handler may itself raise an instance of [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\") or [`HTTPStatus`](status#falcon.HTTPStatus \"falcon.HTTPStatus\"), in which case the framework will use the latter exception to update the *resp* object.\n\nNote\n\nBy default, the framework installs two handlers, one for [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\") and one for [`HTTPStatus`](status#falcon.HTTPStatus \"falcon.HTTPStatus\"). These can be overridden via [`add_error_handler()`](api#falcon.API.add_error_handler \"falcon.API.add_error_handler\").\n\nRegardless, the framework will continue unwinding the middleware stack. For example, if *mob2.process_request* were to raise an error, the framework would execute the stack as follows:\n\n``` python\nmob1.process_request\n    mob2.process_request\n        <skip mob1/mob2 process_resource>\n        <skip mob3.process_request>\n        <skip mob3.process_resource>\n        <skip route to resource responder method>\n        mob3.process_response\n    mob2.process_response\nmob1.process_response\n```\n\nAs illustrated above, by default, all *process_response* methods will be executed, even when a *process_request*, *process_resource*, or resource responder raises an error. This behavior is controlled by the [API class’s](api#api) `independent_middleware` keyword argument.\n\nFinally, if one of the *process_response* methods raises an error, or the routed `on_*` responder method itself raises an error, the exception will be handled in a similar manner as above. Then, the framework will execute any remaining middleware on the stack.\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/middleware.html](https://falcon.readthedocs.io/en/2.0.0/api/middleware.html)"
- name: Preamble & Disclaimer
  id: deploy/intro
  summary: Falcon conforms to the standard WSGI protocol that most Python web applications have been using since 2003
  description: "# Preamble & Disclaimer\n\nFalcon conforms to the standard [WSGI protocol](https://www.python.org/dev/peps/pep-0333/) that most Python web applications have been using since 2003. If you have deployed Python applications like Django, Flask, or others, you will find yourself quite at home with Falcon and your standard Apache/mod_wsgi, gunicorn, or other WSGI servers should suffice.\n\nThere are many ways to deploy a Python application. The aim of these quickstarts is to simply get you up and running, not to give you a perfectly tuned or secure environment. You will almost certainly need to customize these configurations for any serious production deployment.\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/deploy/intro.html](https://falcon.readthedocs.io/en/2.0.0/deploy/intro.html)"
- name: Quickstart
  id: user/quickstart
  summary: If you haven’t done so already, please take a moment to install the Falcon web framework before continuing
  description: "# Quickstart\n\nIf you haven’t done so already, please take a moment to [install](install#install) the Falcon web framework before continuing.\n\n## Learning by Example\n\nHere is a simple example from Falcon’s README, showing how to get started writing an API:\n\n``` python\n# things.py\n\n# Let's get this party started!\nimport falcon\n\n\n# Falcon follows the REST architectural style, meaning (among\n# other things) that you think in terms of resources and state\n# transitions, which map to HTTP verbs.\nclass ThingsResource(object):\n    def on_get(self, req, resp):\n        \"\"\"Handles GET requests\"\"\"\n        resp.status = falcon.HTTP_200  # This is the default status\n        resp.body = ('\\nTwo things awe me most, the starry sky '\n                     'above me and the moral law within me.\\n'\n                     '\\n'\n                     '    ~ Immanuel Kant\\n\\n')\n\n# falcon.API instances are callable WSGI apps\napp = falcon.API()\n\n# Resources are represented by long-lived class instances\nthings = ThingsResource()\n\n# things will handle all requests to the '/things' URL path\napp.add_route('/things', things)\n```\n\nYou can run the above example using any WSGI server, such as uWSGI or Gunicorn. For example:\n\n``` bash\n$ pip install gunicorn\n$ gunicorn things:app\n```\n\nOn Windows where Gunicorn and uWSGI don’t work yet you can use Waitress server\n\n``` bash\n$ pip install waitress\n$ waitress-serve --port=8000 things:app\n```\n\nThen, in another terminal:\n\n``` bash\n$ curl localhost:8000/things\n```\n\nCurl is a bit of a pain to use, so let’s install [HTTPie](https://github.com/jkbr/httpie) and use it from now on.\n\n``` bash\n$ pip install --upgrade httpie\n$ http localhost:8000/things\n```\n\n## More Features\n\nHere is a more involved example that demonstrates reading headers and query parameters, handling errors, and working with request and response bodies.\n\n``` python\nimport json\nimport logging\nimport uuid\nfrom wsgiref import simple_server\n\nimport falcon\nimport requests\n\n\nclass StorageEngine(object):\n\n    def get_things(self, marker, limit):\n        return [{'id': str(uuid.uuid4()), 'color': 'green'}]\n\n    def add_thing(self, thing):\n        thing['id'] = str(uuid.uuid4())\n        return thing\n\n\nclass StorageError(Exception):\n\n    @staticmethod\n    def handle(ex, req, resp, params):\n        description = ('Sorry, couldn\\'t write your thing to the '\n                       'database. It worked on my box.')\n\n        raise falcon.HTTPError(falcon.HTTP_725,\n                               'Database Error',\n                               description)\n\n\nclass SinkAdapter(object):\n\n    engines = {\n        'ddg': 'https://duckduckgo.com',\n        'y': 'https://search.yahoo.com/search',\n    }\n\n    def __call__(self, req, resp, engine):\n        url = self.engines[engine]\n        params = {'q': req.get_param('q', True)}\n        result = requests.get(url, params=params)\n\n        resp.status = str(result.status_code) + ' ' + result.reason\n        resp.content_type = result.headers['content-type']\n        resp.body = result.text\n\n\nclass AuthMiddleware(object):\n\n    def process_request(self, req, resp):\n        token = req.get_header('Authorization')\n        account_id = req.get_header('Account-ID')\n\n        challenges = ['Token type=\"Fernet\"']\n\n        if token is None:\n            description = ('Please provide an auth token '\n                           'as part of the request.')\n\n            raise falcon.HTTPUnauthorized('Auth token required',\n                                          description,\n                                          challenges,\n                                          href='http://docs.example.com/auth')\n\n        if not self._token_is_valid(token, account_id):\n            description = ('The provided auth token is not valid. '\n                           'Please request a new token and try again.')\n\n            raise falcon.HTTPUnauthorized('Authentication required',\n                                          description,\n                                          challenges,\n                                          href='http://docs.example.com/auth')\n\n    def _token_is_valid(self, token, account_id):\n        return True  # Suuuuuure it's valid...\n\n\nclass RequireJSON(object):\n\n    def process_request(self, req, resp):\n        if not req.client_accepts_json:\n            raise falcon.HTTPNotAcceptable(\n                'This API only supports responses encoded as JSON.',\n                href='http://docs.examples.com/api/json')\n\n        if req.method in ('POST', 'PUT'):\n            if 'application/json' not in req.content_type:\n                raise falcon.HTTPUnsupportedMediaType(\n                    'This API only supports requests encoded as JSON.',\n                    href='http://docs.examples.com/api/json')\n\n\nclass JSONTranslator(object):\n    # NOTE: Starting with Falcon 1.3, you can simply\n    # use req.media and resp.media for this instead.\n\n    def process_request(self, req, resp):\n        # req.stream corresponds to the WSGI wsgi.input environ variable,\n        # and allows you to read bytes from the request body.\n        #\n        # See also: PEP 3333\n        if req.content_length in (None, 0):\n            # Nothing to do\n            return\n\n        body = req.stream.read()\n        if not body:\n            raise falcon.HTTPBadRequest('Empty request body',\n                                        'A valid JSON document is required.')\n\n        try:\n            req.context.doc = json.loads(body.decode('utf-8'))\n\n        except (ValueError, UnicodeDecodeError):\n            raise falcon.HTTPError(falcon.HTTP_753,\n                                   'Malformed JSON',\n                                   'Could not decode the request body. The '\n                                   'JSON was incorrect or not encoded as '\n                                   'UTF-8.')\n\n    def process_response(self, req, resp, resource):\n        if not hasattr(resp.context, 'result'):\n            return\n\n        resp.body = json.dumps(resp.context.result)\n\n\ndef max_body(limit):\n\n    def hook(req, resp, resource, params):\n        length = req.content_length\n        if length is not None and length > limit:\n            msg = ('The size of the request is too large. The body must not '\n                   'exceed ' + str(limit) + ' bytes in length.')\n\n            raise falcon.HTTPPayloadTooLarge(\n                'Request body is too large', msg)\n\n    return hook\n\n\nclass ThingsResource(object):\n\n    def __init__(self, db):\n        self.db = db\n        self.logger = logging.getLogger('thingsapp.' + __name__)\n\n    def on_get(self, req, resp, user_id):\n        marker = req.get_param('marker') or ''\n        limit = req.get_param_as_int('limit') or 50\n\n        try:\n            result = self.db.get_things(marker, limit)\n        except Exception as ex:\n            self.logger.error(ex)\n\n            description = ('Aliens have attacked our base! We will '\n                           'be back as soon as we fight them off. '\n                           'We appreciate your patience.')\n\n            raise falcon.HTTPServiceUnavailable(\n                'Service Outage',\n                description,\n                30)\n\n        # An alternative way of doing DRY serialization would be to\n        # create a custom class that inherits from falcon.Request. This\n        # class could, for example, have an additional 'doc' property\n        # that would serialize to JSON under the covers.\n        #\n        # NOTE: Starting with Falcon 1.3, you can simply\n        # use resp.media for this instead.\n        resp.context.result = result\n\n        resp.set_header('Powered-By', 'Falcon')\n        resp.status = falcon.HTTP_200\n\n    @falcon.before(max_body(64 * 1024))\n    def on_post(self, req, resp, user_id):\n        try:\n            doc = req.context.doc\n        except AttributeError:\n            raise falcon.HTTPBadRequest(\n                'Missing thing',\n                'A thing must be submitted in the request body.')\n\n        proper_thing = self.db.add_thing(doc)\n\n        resp.status = falcon.HTTP_201\n        resp.location = '/%s/things/%s' % (user_id, proper_thing['id'])\n\n\n# Configure your WSGI server to load \"things.app\" (app is a WSGI callable)\napp = falcon.API(middleware=[\n    AuthMiddleware(),\n    RequireJSON(),\n    JSONTranslator(),\n])\n\ndb = StorageEngine()\nthings = ThingsResource(db)\napp.add_route('/{user_id}/things', things)\n\n# If a responder ever raised an instance of StorageError, pass control to\n# the given handler.\napp.add_error_handler(StorageError, StorageError.handle)\n\n# Proxy some things to another service; this example shows how you might\n# send parts of an API off to a legacy system that hasn't been upgraded\n# yet, or perhaps is a single cluster that all data centers have to share.\nsink = SinkAdapter()\napp.add_sink(sink, r'/search/(?P<engine>ddg|y)\\Z')\n\n# Useful for debugging problems in your API; works with pdb.set_trace(). You\n# can also use Gunicorn to host your app. Gunicorn can be configured to\n# auto-restart workers when it detects a code change, and it also works\n# with pdb.\nif __name__ == '__main__':\n    httpd = simple_server.make_server('127.0.0.1', 8000, app)\n    httpd.serve_forever()\n```\n\nTo test this example go to the another terminal and run:\n\n``` bash\n$ http localhost:8000/1/things authorization:custom-token\n```\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/user/quickstart.html](https://falcon.readthedocs.io/en/2.0.0/user/quickstart.html)"
- name: Redirection
  id: api/redirects
  summary: Falcon defines a set of exceptions that can be raised within a middleware method, hook, or responder in order to trigger a 3xx (Redirection) response to the client
  description: "# Redirection\n\nFalcon defines a set of exceptions that can be raised within a middleware method, hook, or responder in order to trigger a 3xx (Redirection) response to the client. Raising one of these classes short-circuits request processing in a manner similar to raising an instance or subclass of [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\")\n\n## Redirects\n\n`exception falcon.HTTPMovedPermanently(location, headers=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/redirects.html#HTTPMovedPermanently)  \n301 Moved Permanently.\n\nThe 301 (Moved Permanently) status code indicates that the target resource has been assigned a new permanent URI.\n\nNote\n\nFor historical reasons, a user agent MAY change the request method from POST to GET for the subsequent request. If this behavior is undesired, the 308 (Permanent Redirect) status code can be used instead.\n\n(See also: [RFC 7231, Section 6.4.2](https://tools.ietf.org/html/rfc7231#section-6.4.2))\n\n|             |                                                                                                                                                       |\n|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **location** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – URI to provide as the Location header in the response. |\n\n`exception falcon.HTTPFound(location, headers=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/redirects.html#HTTPFound)  \n302 Found.\n\nThe 302 (Found) status code indicates that the target resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client ought to continue to use the effective request URI for future requests.\n\nNote\n\nFor historical reasons, a user agent MAY change the request method from POST to GET for the subsequent request. If this behavior is undesired, the 307 (Temporary Redirect) status code can be used instead.\n\n(See also: [RFC 7231, Section 6.4.3](https://tools.ietf.org/html/rfc7231#section-6.4.3))\n\n|             |                                                                                                                                                       |\n|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **location** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – URI to provide as the Location header in the response. |\n\n&nbsp;\n\n`exception falcon.HTTPSeeOther(location, headers=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/redirects.html#HTTPSeeOther)  \n303 See Other.\n\nThe 303 (See Other) status code indicates that the server is redirecting the user agent to a *different* resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request.\n\nA 303 response to a GET request indicates that the origin server does not have a representation of the target resource that can be transferred over HTTP. However, the Location header in the response may be dereferenced to obtain a representation for an alternative resource. The recipient may find this alternative useful, even though it does not represent the original target resource.\n\nNote\n\nThe new URI in the Location header field is not considered equivalent to the effective request URI.\n\n(See also: [RFC 7231, Section 6.4.4](https://tools.ietf.org/html/rfc7231#section-6.4.4))\n\n|             |                                                                                                                                                       |\n|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **location** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – URI to provide as the Location header in the response. |\n\n&nbsp;\n\n`exception falcon.HTTPTemporaryRedirect(location, headers=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/redirects.html#HTTPTemporaryRedirect)  \n307 Temporary Redirect.\n\nThe 307 (Temporary Redirect) status code indicates that the target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI. Since the redirection can change over time, the client ought to continue using the original effective request URI for future requests.\n\nNote\n\nThis status code is similar to 302 (Found), except that it does not allow changing the request method from POST to GET.\n\n(See also: [RFC 7231, Section 6.4.7](https://tools.ietf.org/html/rfc7231#section-6.4.7))\n\n|             |                                                                                                                                                       |\n|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **location** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – URI to provide as the Location header in the response. |\n\n&nbsp;\n\n`exception falcon.HTTPPermanentRedirect(location, headers=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/redirects.html#HTTPPermanentRedirect)  \n308 Permanent Redirect.\n\nThe 308 (Permanent Redirect) status code indicates that the target resource has been assigned a new permanent URI.\n\nNote\n\nThis status code is similar to 301 (Moved Permanently), except that it does not allow changing the request method from POST to GET.\n\n(See also: [RFC 7238, Section 3](https://tools.ietf.org/html/rfc7238#section-3))\n\n|             |                                                                                                                                                       |\n|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **location** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – URI to provide as the Location header in the response. |\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/redirects.html](https://falcon.readthedocs.io/en/2.0.0/api/redirects.html)"
- name: Request & Response
  id: api/request_and_response
  summary: Instances of the Request and Response classes are passed into responders as the second and third arguments, respectively
  description: "# Request & Response\n\nInstances of the Request and Response classes are passed into responders as the second and third arguments, respectively.\n\n``` python\nimport falcon\n\n\nclass Resource(object):\n\n    def on_get(self, req, resp):\n        resp.body = '{\"message\": \"Hello world!\"}'\n        resp.status = falcon.HTTP_200\n```\n\n## Request\n\n`class falcon.Request(env, options=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request)  \nRepresents a client’s HTTP request.\n\nNote\n\n`Request` is not meant to be instantiated directly by responders.\n\n|                    |                                                                                                                                                                   |\n|--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:        | **env** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\")) – A WSGI environment dict passed in from the server. See also PEP-3333. |\n| Keyword Arguments: |                                                                                                                                                                   |\n|                    | **options** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\")) – Set of global options passed from the API handler.                |\n\n`env`  \nReference to the WSGI environ `dict` passed in from the server. (See also PEP-3333.)\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`context`  \nEmpty object to hold any data (in its attributes) about the request which is specific to your app (e.g. session object). Falcon itself will not interact with this attribute after it has been initialized.\n\nNote\n\n**New in 2.0:** the default `context_type` (see below) was changed from dict to a bare class, and the preferred way to pass request-specific data is now to set attributes directly on the `context` object, for example:\n\n``` python\nreq.context.role = 'trial'\nreq.context.user = 'guest'\n```\n\n|       |                                                                                      |\n|-------|--------------------------------------------------------------------------------------|\n| Type: | [object](https://docs.python.org/3/library/functions.html#object \"(in Python v3.7)\") |\n\n`context_type`  \nClass variable that determines the factory or type to use for initializing the `context` attribute. By default, the framework will instantiate bare objects (instances of the bare [`falcon.Context`](util#falcon.Context \"falcon.Context\") class). However, you may override this behavior by creating a custom child class of `falcon.Request`, and then passing that new class to `falcon.API()` by way of the latter’s `request_type` parameter.\n\nNote\n\nWhen overriding `context_type` with a factory function (as opposed to a class), the function is called like a method of the current Request instance. Therefore the first argument is the Request instance itself (self).\n\n|       |       |\n|-------|-------|\n| Type: | class |\n\n`scheme`  \nURL scheme used for the request. Either ‘http’ or ‘https’.\n\nNote\n\nIf the request was proxied, the scheme may not match what was originally requested by the client. [`forwarded_scheme`](#falcon.Request.forwarded_scheme \"falcon.Request.forwarded_scheme\") can be used, instead, to handle such cases.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`forwarded_scheme`  \nOriginal URL scheme requested by the user agent, if the request was proxied. Typical values are ‘http’ or ‘https’.\n\nThe following request headers are checked, in order of preference, to determine the forwarded scheme:\n\n- `Forwarded`\n- `X-Forwarded-For`\n\nIf none of these headers are available, or if the Forwarded header is available but does not contain a “proto” parameter in the first hop, the value of [`scheme`](#falcon.Request.scheme \"falcon.Request.scheme\") is returned instead.\n\n(See also: [RFC 7239, Section 1](https://tools.ietf.org/html/rfc7239#section-1))\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`method`  \nHTTP method requested (e.g., ‘GET’, ‘POST’, etc.)\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`host`  \nHost request header field\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`forwarded_host`  \nOriginal host request header as received by the first proxy in front of the application server.\n\nThe following request headers are checked, in order of preference, to determine the forwarded scheme:\n\n- `Forwarded`\n- `X-Forwarded-Host`\n\nIf none of the above headers are available, or if the Forwarded header is available but the “host” parameter is not included in the first hop, the value of [`host`](#falcon.Request.host \"falcon.Request.host\") is returned instead.\n\nNote\n\nReverse proxies are often configured to set the Host header directly to the one that was originally requested by the user agent; in that case, using [`host`](#falcon.Request.host \"falcon.Request.host\") is sufficient.\n\n(See also: [RFC 7239, Section 4](https://tools.ietf.org/html/rfc7239#section-4))\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`port`  \nPort used for the request. If the request URI does not specify a port, the default one for the given schema is returned (80 for HTTP and 443 for HTTPS).\n\n|       |                                                                                |\n|-------|--------------------------------------------------------------------------------|\n| Type: | [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.7)\") |\n\n`netloc`  \nReturns the ‘host:port’ portion of the request URL. The port may be ommitted if it is the default one for the URL’s schema (80 for HTTP and 443 for HTTPS).\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`subdomain`  \nLeftmost (i.e., most specific) subdomain from the hostname. If only a single domain name is given, `subdomain` will be `None`.\n\nNote\n\nIf the hostname in the request is an IP address, the value for `subdomain` is undefined.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`app`  \nThe initial portion of the request URI’s path that corresponds to the application object, so that the application knows its virtual “location”. This may be an empty string, if the application corresponds to the “root” of the server.\n\n(Corresponds to the “SCRIPT_NAME” environ variable defined by PEP-3333.)\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`uri`  \nThe fully-qualified URI for the request.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`url`  \nAlias for `uri`.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`forwarded_uri`  \nOriginal URI for proxied requests. Uses [`forwarded_scheme`](#falcon.Request.forwarded_scheme \"falcon.Request.forwarded_scheme\") and [`forwarded_host`](#falcon.Request.forwarded_host \"falcon.Request.forwarded_host\") in order to reconstruct the original URI requested by the user agent.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`relative_uri`  \nThe path and query string portion of the request URI, omitting the scheme and host.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`prefix`  \nThe prefix of the request URI, including scheme, host, and WSGI app (if any).\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`forwarded_prefix`  \nThe prefix of the original URI for proxied requests. Uses [`forwarded_scheme`](#falcon.Request.forwarded_scheme \"falcon.Request.forwarded_scheme\") and [`forwarded_host`](#falcon.Request.forwarded_host \"falcon.Request.forwarded_host\") in order to reconstruct the original URI.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`path`  \nPath portion of the request URI (not including query string).\n\nNote\n\n`req.path` may be set to a new value by a `process_request()` middleware method in order to influence routing. If the original request path was URL encoded, it will be decoded before being returned by this attribute. If this attribute is to be used by the app for any upstream requests, any non URL-safe characters in the path must be URL encoded back before making the request.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`query_string`  \nQuery string portion of the request URI, without the preceding ‘?’ character.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`uri_template`  \nThe template for the route that was matched for this request. May be `None` if the request has not yet been routed, as would be the case for `process_request()` middleware methods. May also be `None` if your app uses a custom routing engine and the engine does not provide the URI template when resolving a route.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`remote_addr`  \nIP address of the closest client or proxy to the WSGI server.\n\nThis property is determined by the value of `REMOTE_ADDR` in the WSGI environment dict. Since this address is not derived from an HTTP header, clients and proxies can not forge it.\n\nNote\n\nIf your application is behind one or more reverse proxies, you can use [`access_route`](#falcon.Request.access_route \"falcon.Request.access_route\") to retrieve the real IP address of the client.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`access_route`  \nIP address of the original client, as well as any known addresses of proxies fronting the WSGI server.\n\nThe following request headers are checked, in order of preference, to determine the addresses:\n\n- `Forwarded`\n- `X-Forwarded-For`\n- `X-Real-IP`\n\nIf none of these headers are available, the value of [`remote_addr`](#falcon.Request.remote_addr \"falcon.Request.remote_addr\") is used instead.\n\nNote\n\nPer [RFC 7239](https://tools.ietf.org/html/rfc7239), the access route may contain “unknown” and obfuscated identifiers, in addition to IPv4 and IPv6 addresses\n\nWarning\n\nHeaders can be forged by any client or proxy. Use this property with caution and validate all values before using them. Do not rely on the access route to authorize requests.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.7)\") |\n\n`forwarded`  \nValue of the Forwarded header, as a parsed list of [`falcon.Forwarded`](#falcon.Forwarded \"falcon.Forwarded\") objects, or `None` if the header is missing. If the header value is malformed, Falcon will make a best effort to parse what it can.\n\n(See also: [RFC 7239, Section 4](https://tools.ietf.org/html/rfc7239#section-4))\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.7)\") |\n\n`date`  \nValue of the Date header, converted to a `datetime` instance. The header value is assumed to conform to RFC 1123.\n\n|       |          |\n|-------|----------|\n| Type: | datetime |\n\n`auth`  \nValue of the Authorization header, or `None` if the header is missing.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`user_agent`  \nValue of the User-Agent header, or `None` if the header is missing.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`referer`  \nValue of the Referer header, or `None` if the header is missing.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`accept`  \nValue of the Accept header, or ‘*/*’ if the header is missing.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`client_accepts_json`  \n`True` if the Accept header indicates that the client is willing to receive JSON, otherwise `False`.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`client_accepts_msgpack`  \n`True` if the Accept header indicates that the client is willing to receive MessagePack, otherwise `False`.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`client_accepts_xml`  \n`True` if the Accept header indicates that the client is willing to receive XML, otherwise `False`.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`cookies`  \nA dict of name/value cookie pairs. The returned object should be treated as read-only to avoid unintended side-effects. If a cookie appears more than once in the request, only the first value encountered will be made available here.\n\nSee also: [`get_cookie_values()`](#falcon.Request.get_cookie_values \"falcon.Request.get_cookie_values\")\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`content_type`  \nValue of the Content-Type header, or `None` if the header is missing.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`content_length`  \nValue of the Content-Length header converted to an `int`, or `None` if the header is missing.\n\n|       |                                                                                |\n|-------|--------------------------------------------------------------------------------|\n| Type: | [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.7)\") |\n\n`stream`  \nFile-like input object for reading the body of the request, if any. This object provides direct access to the server’s data stream and is non-seekable. In order to avoid unintended side effects, and to provide maximum flexibility to the application, Falcon itself does not buffer or spool the data in any way.\n\nSince this object is provided by the WSGI server itself, rather than by Falcon, it may behave differently depending on how you host your app. For example, attempting to read more bytes than are expected (as determined by the Content-Length header) may or may not block indefinitely. It’s a good idea to test your WSGI server to find out how it behaves.\n\nThis can be particulary problematic when a request body is expected, but none is given. In this case, the following call blocks under certain WSGI servers:\n\n``` python\n# Blocks if Content-Length is 0\ndata = req.stream.read()\n```\n\nThe workaround is fairly straightforward, if verbose:\n\n``` python\n# If Content-Length happens to be 0, or the header is\n# missing altogether, this will not block.\ndata = req.stream.read(req.content_length or 0)\n```\n\nAlternatively, when passing the stream directly to a consumer, it may be necessary to branch off the value of the Content-Length header:\n\n``` python\nif req.content_length:\n    doc = json.load(req.stream)\n```\n\nFor a slight performance cost, you may instead wish to use [`bounded_stream`](#falcon.Request.bounded_stream \"falcon.Request.bounded_stream\"), which wraps the native WSGI input object to normalize its behavior.\n\nNote\n\nIf an HTML form is POSTed to the API using the *application/x-www-form-urlencoded* media type, and the [`auto_parse_form_urlencoded`](api#falcon.RequestOptions.auto_parse_form_urlencoded \"falcon.RequestOptions.auto_parse_form_urlencoded\") option is set, the framework will consume `stream` in order to parse the parameters and merge them into the query string parameters. In this case, the stream will be left at EOF.\n\n`bounded_stream`  \nFile-like wrapper around `stream` to normalize certain differences between the native input objects employed by different WSGI servers. In particular, `bounded_stream` is aware of the expected Content-Length of the body, and will never block on out-of-bounds reads, assuming the client does not stall while transmitting the data to the server.\n\nFor example, the following will not block when Content-Length is 0 or the header is missing altogether:\n\n``` python\ndata = req.bounded_stream.read()\n```\n\nThis is also safe:\n\n``` python\ndoc = json.load(req.bounded_stream)\n```\n\n`expect`  \nValue of the Expect header, or `None` if the header is missing.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`media`  \nReturns a deserialized form of the request stream. When called, it will attempt to deserialize the request stream using the Content-Type header as well as the media-type handlers configured via [`falcon.RequestOptions`](api#falcon.RequestOptions \"falcon.RequestOptions\").\n\nSee [Media](media#media) for more information regarding media handling.\n\nWarning\n\nThis operation will consume the request stream the first time it’s called and cache the results. Follow-up calls will just retrieve a cached version of the object.\n\n|       |                                                                                      |\n|-------|--------------------------------------------------------------------------------------|\n| Type: | [object](https://docs.python.org/3/library/functions.html#object \"(in Python v3.7)\") |\n\n`range`  \nA 2-member `tuple` parsed from the value of the Range header.\n\nThe two members correspond to the first and last byte positions of the requested resource, inclusive. Negative indices indicate offset from the end of the resource, where -1 is the last byte, -2 is the second-to-last byte, and so forth.\n\nOnly continous ranges are supported (e.g., “bytes=0-0,-1” would result in an HTTPBadRequest exception when the attribute is accessed.)\n\n|       |              |\n|-------|--------------|\n| Type: | tuple of int |\n\n`range_unit`  \nUnit of the range parsed from the value of the Range header, or `None` if the header is missing\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`if_match`  \nValue of the If-Match header, as a parsed list of [`falcon.ETag`](util#falcon.ETag \"falcon.ETag\") objects or `None` if the header is missing or its value is blank.\n\nThis property provides a list of all `entity-tags` in the header, both strong and weak, in the same order as listed in the header.\n\n(See also: [RFC 7232, Section 3.1](https://tools.ietf.org/html/rfc7232#section-3.1))\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.7)\") |\n\n`if_none_match`  \nValue of the If-None-Match header, as a parsed list of [`falcon.ETag`](util#falcon.ETag \"falcon.ETag\") objects or `None` if the header is missing or its value is blank.\n\nThis property provides a list of all `entity-tags` in the header, both strong and weak, in the same order as listed in the header.\n\n(See also: [RFC 7232, Section 3.2](https://tools.ietf.org/html/rfc7232#section-3.2))\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.7)\") |\n\n`if_modified_since`  \nValue of the If-Modified-Since header, or `None` if the header is missing.\n\n|       |          |\n|-------|----------|\n| Type: | datetime |\n\n`if_unmodified_since`  \nValue of the If-Unmodified-Since header, or `None` if the header is missing.\n\n|       |          |\n|-------|----------|\n| Type: | datetime |\n\n`if_range`  \nValue of the If-Range header, or `None` if the header is missing.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`headers`  \nRaw HTTP headers from the request with canonical dash-separated names. Parsing all the headers to create this dict is done the first time this attribute is accessed, and the returned object should be treated as read-only. Note that this parsing can be costly, so unless you need all the headers in this format, you should instead use the `get_header()` method or one of the convenience attributes to get a value for a specific header.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`params`  \nThe mapping of request query parameter names to their values. Where the parameter appears multiple times in the query string, the value mapped to that parameter key will be a list of all the values in the order seen.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`options`  \nSet of global options passed from the API handler.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`client_accepts(media_type)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.client_accepts)  \nDetermine whether or not the client accepts a given media type.\n\n|              |                                                                                                                                   |\n|--------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **media_type** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – An Internet media type to check. |\n| Returns:     | `True` if the client has indicated in the Accept header that it accepts the specified media type. Otherwise, returns `False`.     |\n| Return type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\")                                                  |\n\n`client_prefers(media_types)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.client_prefers)  \nReturn the client’s preferred media type, given several choices.\n\n|              |                                                                                                                                                                                    |\n|--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **media_types** (*iterable of str*) – One or more Internet media types from which to choose the client’s preferred type. This value **must** be an iterable collection of strings. |\n| Returns:     | The client’s preferred media type, based on the Accept header. Returns `None` if the client does not accept any of the given types.                                                |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")                                                                                                      |\n\n`context_type`  \nalias of `falcon.util.structures.Context`\n\n`get_cookie_values(name)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_cookie_values)  \nReturn all values provided in the Cookie header for the named cookie.\n\n(See also: [Getting Cookies](cookies#getting-cookies))\n\n|              |                                                                                                                                                                                                                                                                                                           |\n|--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – Cookie name, case-sensitive.                                                                                                                                                                                   |\n| Returns:     | Ordered list of all values specified in the Cookie header for the named cookie, or `None` if the cookie was not included in the request. If the cookie is specified more than once in the header, the returned list of values will preserve the ordering of the individual `cookie-pair`’s in the header. |\n| Return type: | [list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.7)\")                                                                                                                                                                                                                           |\n\n`get_header(name, required=False, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_header)  \nRetrieve the raw string value for the given header.\n\n[TABLE]\n\n`get_header_as_datetime(header, required=False, obs_date=False)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_header_as_datetime)  \nReturn an HTTP header with HTTP-Date values as a datetime.\n\n[TABLE]\n\n`get_param(name, required=False, store=None, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param)  \nReturn the raw value of a query string parameter as a string.\n\nNote\n\nIf an HTML form is POSTed to the API using the *application/x-www-form-urlencoded* media type, Falcon can automatically parse the parameters from the request body and merge them into the query string parameters. To enable this functionality, set [`auto_parse_form_urlencoded`](api#falcon.RequestOptions.auto_parse_form_urlencoded \"falcon.RequestOptions.auto_parse_form_urlencoded\") to `True` via [`API.req_options`](api#falcon.API.req_options \"falcon.API.req_options\").\n\nNote\n\nSimilar to the way multiple keys in form data is handled, if a query parameter is assigned a comma-separated list of values (e.g., `foo=a,b,c`), only one of those values will be returned, and it is undefined which one. Use [`get_param_as_list()`](#falcon.Request.get_param_as_list \"falcon.Request.get_param_as_list\") to retrieve all the values.\n\n[TABLE]\n\n`get_param_as_bool(name, required=False, store=None, blank_as_true=True, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_bool)  \nReturn the value of a query string parameter as a boolean.\n\nThis method treats valueless parameters as flags. By default, if no value is provided for the parameter in the query string, `True` is assumed and returned. If the parameter is missing altogether, `None` is returned as with other `get_param_*()` methods, which can be easily treated as falsy by the caller as needed.\n\nThe following boolean strings are supported:\n\n``` python\nTRUE_STRINGS = ('true', 'True', 'yes', '1', 'on')\nFALSE_STRINGS = ('false', 'False', 'no', '0', 'off')\n```\n\n[TABLE]\n\n`get_param_as_date(name, format_string='%Y-%m-%d', required=False, store=None, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_date)  \nReturn the value of a query string parameter as a date.\n\n[TABLE]\n\n`get_param_as_datetime(name, format_string='%Y-%m-%dT%H:%M:%SZ', required=False, store=None, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_datetime)  \nReturn the value of a query string parameter as a datetime.\n\n[TABLE]\n\n`get_param_as_float(name, required=False, min_value=None, max_value=None, store=None, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_float)  \nReturn the value of a query string parameter as an float.\n\n[TABLE]\n\nRaises  \nHTTPBadRequest: The param was not found in the request, even though  \nit was required to be there, or it was found but could not be converted to an `float`. Also raised if the param’s value falls outside the given interval, i.e., the value must be in the interval: min_value \\<= value \\<= max_value to avoid triggering an error.\n\n`get_param_as_int(name, required=False, min_value=None, max_value=None, store=None, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_int)  \nReturn the value of a query string parameter as an int.\n\n[TABLE]\n\nRaises  \nHTTPBadRequest: The param was not found in the request, even though  \nit was required to be there, or it was found but could not be converted to an `int`. Also raised if the param’s value falls outside the given interval, i.e., the value must be in the interval: min_value \\<= value \\<= max_value to avoid triggering an error.\n\n`get_param_as_json(name, required=False, store=None, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_json)  \nReturn the decoded JSON value of a query string parameter.\n\nGiven a JSON value, decode it to an appropriate Python type, (e.g., `dict`, `list`, `str`, `int`, `bool`, etc.)\n\n[TABLE]\n\n`get_param_as_list(name, transform=None, required=False, store=None, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_list)  \nReturn the value of a query string parameter as a list.\n\nList items must be comma-separated or must be provided as multiple instances of the same param in the query string ala *application/x-www-form-urlencoded*.\n\n[TABLE]\n\n`get_param_as_uuid(name, required=False, store=None, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.get_param_as_uuid)  \nReturn the value of a query string parameter as an UUID.\n\nThe value to convert must conform to the standard UUID string representation per RFC 4122. For example, the following strings are all valid:\n\n``` python\n# Lowercase\n'64be949b-3433-4d36-a4a8-9f19d352fee8'\n\n# Uppercase\n'BE71ECAA-F719-4D42-87FD-32613C2EEB60'\n\n# Mixed\n'81c8155C-D6de-443B-9495-39Fa8FB239b5'\n```\n\n[TABLE]\n\nRaises  \nHTTPBadRequest: The param was not found in the request, even though  \nit was required to be there, or it was found but could not be converted to a `UUID`.\n\n`has_param(name)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.has_param)  \nDetermine whether or not the query string parameter already exists.\n\n|              |                                                                                                                                           |\n|--------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – Parameter name, case-sensitive (e.g., ‘sort’). |\n| Returns:     | `True` if param is found, or `False` if param is not found.                                                                               |\n| Return type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\")                                                          |\n\n`log_error(message)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#Request.log_error)  \nWrite an error message to the server’s log.\n\nPrepends timestamp and request info to message, and writes the result out to the WSGI server’s error stream (`wsgi.error`).\n\n|             |                                                                                                                                                                                                          |\n|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **message** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") *or* *unicode*) – Description of the problem. On Python 2, instances of `unicode` will be converted to UTF-8. |\n\n`class falcon.Forwarded` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/forwarded.html#Forwarded)  \nRepresents a parsed Forwarded header.\n\n(See also: [RFC 7239, Section 4](https://tools.ietf.org/html/rfc7239#section-4))\n\n`src`  \nThe value of the “for” parameter, or `None` if the parameter is absent. Identifies the node making the request to the proxy.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`dest`  \nThe value of the “by” parameter, or `None` if the parameter is absent. Identifies the client-facing interface of the proxy.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`host`  \nThe value of the “host” parameter, or `None` if the parameter is absent. Provides the host request header field as received by the proxy.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`scheme`  \nThe value of the “proto” parameter, or `None` if the parameter is absent. Indicates the protocol that was used to make the request to the proxy.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n## Response\n\n`class falcon.Response(options=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response)  \nRepresents an HTTP response to a client request.\n\nNote\n\n`Response` is not meant to be instantiated directly by responders.\n\n|                    |                                                                                                                                                    |\n|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| Keyword Arguments: |                                                                                                                                                    |\n|                    | **options** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\")) – Set of global options passed from the API handler. |\n\n`status`  \nHTTP status line (e.g., ‘200 OK’). Falcon requires the full status line, not just the code (e.g., 200). This design makes the framework more efficient because it does not have to do any kind of conversion or lookup when composing the WSGI response.\n\nIf not set explicitly, the status defaults to ‘200 OK’.\n\nNote\n\nFalcon provides a number of constants for common status codes. They all start with the `HTTP_` prefix, as in: `falcon.HTTP_204`.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`media`  \nA serializable object supported by the media handlers configured via [`falcon.RequestOptions`](api#falcon.RequestOptions \"falcon.RequestOptions\").\n\nSee [Media](media#media) for more information regarding media handling.\n\n|       |                                                                                      |\n|-------|--------------------------------------------------------------------------------------|\n| Type: | [object](https://docs.python.org/3/library/functions.html#object \"(in Python v3.7)\") |\n\n`body`  \nString representing response content.\n\nIf set to a Unicode type (`unicode` in Python 2, or `str` in Python 3), Falcon will encode the text as UTF-8 in the response. If the content is already a byte string, use the [`data`](#falcon.Response.data \"falcon.Response.data\") attribute instead (it’s faster).\n\n|       |                                                                                          |\n|-------|------------------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") or unicode |\n\n`data`  \nByte string representing response content.\n\nUse this attribute in lieu of `body` when your content is already a byte string (`str` or `bytes` in Python 2, or simply `bytes` in Python 3). See also the note below.\n\nNote\n\nUnder Python 2.x, if your content is of type `str`, using the `data` attribute instead of `body` is the most efficient approach. However, if your text is of type `unicode`, you will need to use the `body` attribute instead.\n\nUnder Python 3.x, on the other hand, the 2.x `str` type can be thought of as having been replaced by what was once the `unicode` type, and so you will need to always use the `body` attribute for strings to ensure Unicode characters are properly encoded in the HTTP response.\n\n|       |                                                                                   |\n|-------|-----------------------------------------------------------------------------------|\n| Type: | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.7)\") |\n\n`stream`  \nEither a file-like object with a `read()` method that takes an optional size argument and returns a block of bytes, or an iterable object, representing response content, and yielding blocks as byte strings. Falcon will use *wsgi.file_wrapper*, if provided by the WSGI server, in order to efficiently serve file-like objects.\n\nNote\n\nIf the stream is set to an iterable object that requires resource cleanup, it can implement a close() method to do so. The close() method will be called upon completion of the request.\n\n`stream_len`  \nDeprecated alias for [`content_length`](#falcon.Response.content_length \"falcon.Response.content_length\").\n\n|       |                                                                                |\n|-------|--------------------------------------------------------------------------------|\n| Type: | [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.7)\") |\n\n`context`  \nDictionary to hold any data about the response which is specific to your app. Falcon itself will not interact with this attribute after it has been initialized.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`context`  \nEmpty object to hold any data (in its attributes) about the response which is specific to your app (e.g. session object). Falcon itself will not interact with this attribute after it has been initialized.\n\nNote\n\n**New in 2.0:** the default `context_type` (see below) was changed from dict to a bare class, and the preferred way to pass response-specific data is now to set attributes directly on the `context` object, for example:\n\n``` python\nresp.context.cache_strategy = 'lru'\n```\n\n|       |                                                                                      |\n|-------|--------------------------------------------------------------------------------------|\n| Type: | [object](https://docs.python.org/3/library/functions.html#object \"(in Python v3.7)\") |\n\n`context_type`  \nClass variable that determines the factory or type to use for initializing the `context` attribute. By default, the framework will instantiate bare objects (instances of the bare [`falcon.Context`](util#falcon.Context \"falcon.Context\") class). However, you may override this behavior by creating a custom child class of `falcon.Response`, and then passing that new class to `falcon.API()` by way of the latter’s `response_type` parameter.\n\nNote\n\nWhen overriding `context_type` with a factory function (as opposed to a class), the function is called like a method of the current Response instance. Therefore the first argument is the Response instance itself (self).\n\n|       |       |\n|-------|-------|\n| Type: | class |\n\n`options`  \nSet of global options passed from the API handler.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`headers`  \nCopy of all headers set for the response, sans cookies. Note that a new copy is created and returned each time this property is referenced.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`complete`  \nSet to `True` from within a middleware method to signal to the framework that request processing should be short-circuited (see also [Middleware](middleware#middleware)).\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`accept_ranges`  \nSet the Accept-Ranges header.\n\nThe Accept-Ranges header field indicates to the client which range units are supported (e.g. “bytes”) for the target resource.\n\nIf range requests are not supported for the target resource, the header may be set to “none” to advise the client not to attempt any such requests.\n\nNote\n\n“none” is the literal string, not Python’s built-in `None` type.\n\n`add_link(target, rel, title=None, title_star=None, anchor=None, hreflang=None, type_hint=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.add_link)  \nAdd a link header to the response.\n\n(See also: [RFC 5988, Section 1](https://tools.ietf.org/html/rfc5988#section-1))\n\nNote\n\nCalling this method repeatedly will cause each link to be appended to the Link header value, separated by commas.\n\nNote\n\nSo-called “link-extension” elements, as defined by RFC 5988, are not yet supported. See also Issue \\#288.\n\n[TABLE]\n\n`append_header(name, value)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.append_header)  \nSet or append a header for this response.\n\nIf the header already exists, the new value will normally be appended to it, delimited by a comma. The notable exception to this rule is Set-Cookie, in which case a separate header line for each value will be included in the response.\n\nNote\n\nWhile this method can be used to efficiently append raw Set-Cookie headers to the response, you may find [`set_cookie()`](#falcon.Response.set_cookie \"falcon.Response.set_cookie\") to be more convenient.\n\n[TABLE]\n\n`cache_control`  \nSet the Cache-Control header.\n\nUsed to set a list of cache directives to use as the value of the Cache-Control header. The list will be joined with “, ” to produce the value for the header.\n\n`content_length`  \nSet the Content-Length header.\n\nThis property can be used for responding to HEAD requests when you aren’t actually providing the response body, or when streaming the response. If either the `body` property or the `data` property is set on the response, the framework will force Content-Length to be the length of the given body bytes. Therefore, it is only necessary to manually set the content length when those properties are not used.\n\nNote\n\nIn cases where the response content is a stream (readable file-like object), Falcon will not supply a Content-Length header to the WSGI server unless `content_length` is explicitly set. Consequently, the server may choose to use chunked encoding or one of the other strategies suggested by PEP-3333.\n\n`content_location`  \nSet the Content-Location header.\n\nThis value will be URI encoded per RFC 3986. If the value that is being set is already URI encoded it should be decoded first or the header should be set manually using the set_header method.\n\n`content_range`  \nA tuple to use in constructing a value for the Content-Range header.\n\nThe tuple has the form (*start*, *end*, *length*, \\[*unit*\\]), where *start* and *end* designate the range (inclusive), and *length* is the total length, or ‘\\*’ if unknown. You may pass `int`’s for these numbers (no need to convert to `str` beforehand). The optional value *unit* describes the range unit and defaults to ‘bytes’\n\nNote\n\nYou only need to use the alternate form, ‘bytes \\*/1234’, for responses that use the status ‘416 Range Not Satisfiable’. In this case, raising `falcon.HTTPRangeNotSatisfiable` will do the right thing.\n\n(See also: [RFC 7233, Section 4.2](https://tools.ietf.org/html/rfc7233#section-4.2))\n\n`content_type`  \nSets the Content-Type header.\n\nThe `falcon` module provides a number of constants for common media types, including `falcon.MEDIA_JSON`, `falcon.MEDIA_MSGPACK`, `falcon.MEDIA_YAML`, `falcon.MEDIA_XML`, `falcon.MEDIA_HTML`, `falcon.MEDIA_JS`, `falcon.MEDIA_TEXT`, `falcon.MEDIA_JPEG`, `falcon.MEDIA_PNG`, and `falcon.MEDIA_GIF`.\n\n`context_type`  \nalias of `falcon.util.structures.Context`\n\n`delete_header(name)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.delete_header)  \nDelete a header that was previously set for this response.\n\nIf the header was not previously set, nothing is done (no error is raised). Otherwise, all values set for the header will be removed from the response.\n\nNote that calling this method is equivalent to setting the corresponding header property (when said property is available) to `None`. For example:\n\n``` python\nresp.etag = None\n```\n\nWarning\n\nThis method cannot be used with the Set-Cookie header. Instead, use [`unset_cookie()`](#falcon.Response.unset_cookie \"falcon.Response.unset_cookie\") to remove a cookie and ensure that the user agent expires its own copy of the data as well.\n\n|             |                                                                                                                                                                                                                                                                                                                   |\n|-------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – Header name (case-insensitive). Must be of type `str` or `StringType` and contain only US-ASCII characters. Under Python 2.x, the `unicode` type is also accepted, although such strings are also limited to US-ASCII. |\n| Raises:     | [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.7)\") – `name` cannot be `'Set-Cookie'`.                                                                                                                                                                                |\n\n`downloadable_as`  \nSet the Content-Disposition header using the given filename.\n\nThe value will be used for the *filename* directive. For example, given `'report.pdf'`, the Content-Disposition header would be set to: `'attachment; filename=\"report.pdf\"'`.\n\n`etag`  \nSet the ETag header.\n\nThe ETag header will be wrapped with double quotes `\"value\"` in case the user didn’t pass it.\n\n`expires`  \nSet the Expires header. Set to a `datetime` (UTC) instance.\n\nNote\n\nFalcon will format the `datetime` as an HTTP date string.\n\n`get_header(name, default=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.get_header)  \nRetrieve the raw string value for the given header.\n\nNormally, when a header has multiple values, they will be returned as a single, comma-delimited string. However, the Set-Cookie header does not support this format, and so attempting to retrieve it will raise an error.\n\n|                    |                                                                                                                                                                                                                                                                 |\n|--------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:        | **name** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – Header name, case-insensitive. Must be of type `str` or `StringType`, and only character values 0x00 through 0xFF may be used on platforms that use wide characters. |\n| Keyword Arguments: |                                                                                                                                                                                                                                                                 |\n|                    | **default** – Value to return if the header is not found (default `None`).                                                                                                                                                                                      |\n| Raises:            | [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.7)\") – The value of the ‘Set-Cookie’ header(s) was requested.                                                                                                        |\n| Returns:           | The value of the specified header if set, or the default value if not set.                                                                                                                                                                                      |\n| Return type:       | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")                                                                                                                                                                                   |\n\n`last_modified`  \nSet the Last-Modified header. Set to a `datetime` (UTC) instance.\n\nNote\n\nFalcon will format the `datetime` as an HTTP date string.\n\n`location`  \nSet the Location header.\n\nThis value will be URI encoded per RFC 3986. If the value that is being set is already URI encoded it should be decoded first or the header should be set manually using the set_header method.\n\n`retry_after`  \nSet the Retry-After header.\n\nThe expected value is an integral number of seconds to use as the value for the header. The HTTP-date syntax is not supported.\n\n`set_cookie(name, value, expires=None, max_age=None, domain=None, path=None, secure=None, http_only=True)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.set_cookie)  \nSet a response cookie.\n\nNote\n\nThis method can be called multiple times to add one or more cookies to the response.\n\nSee also\n\nTo learn more about setting cookies, see [Setting Cookies](cookies#setting-cookies). The parameters listed below correspond to those defined in [RFC 6265](http://tools.ietf.org/html/rfc6265).\n\n[TABLE]\n\n`set_header(name, value)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.set_header)  \nSet a header for this response to a given value.\n\nWarning\n\nCalling this method overwrites any values already set for this header. To append an additional value for this header, use [`append_header()`](#falcon.Response.append_header \"falcon.Response.append_header\") instead.\n\nWarning\n\nThis method cannot be used to set cookies; instead, use [`append_header()`](#falcon.Response.append_header \"falcon.Response.append_header\") or [`set_cookie()`](#falcon.Response.set_cookie \"falcon.Response.set_cookie\").\n\n[TABLE]\n\n`set_headers(headers)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.set_headers)  \nSet several headers at once.\n\nThis method can be used to set a collection of raw header names and values all at once.\n\nWarning\n\nCalling this method overwrites any existing values for the given header. If a list containing multiple instances of the same header is provided, only the last value will be used. To add multiple values to the response for a given header, see [`append_header()`](#falcon.Response.append_header \"falcon.Response.append_header\").\n\nWarning\n\nThis method cannot be used to set cookies; instead, use [`append_header()`](#falcon.Response.append_header \"falcon.Response.append_header\") or [`set_cookie()`](#falcon.Response.set_cookie \"falcon.Response.set_cookie\").\n\n[TABLE]\n\n`set_stream(stream, content_length)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.set_stream)  \nConvenience method for setting both `stream` and `content_length`.\n\nAlthough the `stream` and `content_length` properties may be set directly, using this method ensures `content_length` is not accidentally neglected when the length of the stream is known in advance. Using this method is also slightly more performant as compared to setting the properties individually.\n\nNote\n\nIf the stream length is unknown, you can set `stream` directly, and ignore `content_length`. In this case, the WSGI server may choose to use chunked encoding or one of the other strategies suggested by PEP-3333.\n\n[TABLE]\n\n`stream_len`  \nSet the Content-Length header.\n\nThis property can be used for responding to HEAD requests when you aren’t actually providing the response body, or when streaming the response. If either the `body` property or the `data` property is set on the response, the framework will force Content-Length to be the length of the given body bytes. Therefore, it is only necessary to manually set the content length when those properties are not used.\n\nNote\n\nIn cases where the response content is a stream (readable file-like object), Falcon will not supply a Content-Length header to the WSGI server unless `content_length` is explicitly set. Consequently, the server may choose to use chunked encoding or one of the other strategies suggested by PEP-3333.\n\n`unset_cookie(name)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#Response.unset_cookie)  \nUnset a cookie in the response\n\nClears the contents of the cookie, and instructs the user agent to immediately expire its own copy of the cookie.\n\nWarning\n\nIn order to successfully remove a cookie, both the path and the domain must match the values that were used when the cookie was created.\n\n`vary`  \nValue to use for the Vary header.\n\nSet this property to an iterable of header names. For a single asterisk or field value, simply pass a single-element `list` or `tuple`.\n\nThe “Vary” header field in a response describes what parts of a request message, aside from the method, Host header field, and request target, might influence the origin server’s process for selecting and representing this response. The value consists of either a single asterisk (“\\*”) or a list of header field names (case-insensitive).\n\n(See also: [RFC 7231, Section 7.1.4](https://tools.ietf.org/html/rfc7231#section-7.1.4))\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/request_and_response.html](https://falcon.readthedocs.io/en/2.0.0/api/request_and_response.html)"
- name: Routing
  id: api/routing
  summary: Falcon routes incoming requests to resources based on a set of URI templates
  description: "# Routing\n\nFalcon routes incoming requests to resources based on a set of URI templates. If the path requested by the client matches the template for a given route, the request is then passed on to the associated resource for processing.\n\nIf no route matches the request, control then passes to a default responder that simply raises an instance of [`HTTPNotFound`](errors#falcon.HTTPNotFound \"falcon.HTTPNotFound\"). Normally this will result in sending a 404 response back to the client.\n\nHere’s a quick example to show how all the pieces fit together:\n\n``` python\nimport json\n\nimport falcon\n\nclass ImagesResource(object):\n\n    def on_get(self, req, resp):\n        doc = {\n            'images': [\n                {\n                    'href': '/images/1eaf6ef1-7f2d-4ecc-a8d5-6e8adba7cc0e.png'\n                }\n            ]\n        }\n\n        # Create a JSON representation of the resource\n        resp.body = json.dumps(doc, ensure_ascii=False)\n\n        # The following line can be omitted because 200 is the default\n        # status returned by the framework, but it is included here to\n        # illustrate how this may be overridden as needed.\n        resp.status = falcon.HTTP_200\n\napi = application = falcon.API()\n\nimages = ImagesResource()\napi.add_route('/images', images)\n```\n\n## Default Router\n\nFalcon’s default routing engine is based on a decision tree that is first compiled into Python code, and then evaluated by the runtime.\n\nThe [`add_route()`](api#falcon.API.add_route \"falcon.API.add_route\") method is used to associate a URI template with a resource. Falcon then maps incoming requests to resources based on these templates.\n\nFalcon’s default router uses Python classes to represent resources. In practice, these classes act as controllers in your application. They convert an incoming request into one or more internal actions, and then compose a response back to the client based on the results of those actions. (See also: [Tutorial: Creating Resources](../user/tutorial#tutorial-resources))\n\n``` python\n           ┌────────────┐\nrequest  → │            │\n           │ Resource   │ ↻ Orchestrate the requested action\n           │ Controller │ ↻ Compose the result\nresponse ← │            │\n           └────────────┘\n```\n\nEach resource class defines various “responder” methods, one for each HTTP method the resource allows. Responder names start with `on_` and are named according to which HTTP method they handle, as in `on_get()`, `on_post()`, `on_put()`, etc.\n\nNote\n\nIf your resource does not support a particular HTTP method, simply omit the corresponding responder and Falcon will use a default responder that raises an instance of [`HTTPMethodNotAllowed`](errors#falcon.HTTPMethodNotAllowed \"falcon.HTTPMethodNotAllowed\") when that method is requested. Normally this results in sending a 405 response back to the client.\n\nResponders must always define at least two arguments to receive [`Request`](request_and_response#falcon.Request \"falcon.Request\") and [`Response`](request_and_response#falcon.Response \"falcon.Response\") objects, respectively:\n\n``` python\ndef on_post(self, req, resp):\n    pass\n```\n\nThe [`Request`](request_and_response#falcon.Request \"falcon.Request\") object represents the incoming HTTP request. It exposes properties and methods for examining headers, query string parameters, and other metadata associated with the request. A file-like stream object is also provided for reading any data that was included in the body of the request.\n\nThe [`Response`](request_and_response#falcon.Response \"falcon.Response\") object represents the application’s HTTP response to the above request. It provides properties and methods for setting status, header and body data. The [`Response`](request_and_response#falcon.Response \"falcon.Response\") object also exposes a dict-like [`context`](request_and_response#falcon.Response.context \"falcon.Response.context\") property for passing arbitrary data to hooks and middleware methods.\n\nNote\n\nRather than directly manipulate the [`Response`](request_and_response#falcon.Response \"falcon.Response\") object, a responder may raise an instance of either [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\") or [`HTTPStatus`](status#falcon.HTTPStatus \"falcon.HTTPStatus\"). Falcon will convert these exceptions to appropriate HTTP responses. Alternatively, you can handle them youself via [`add_error_handler()`](api#falcon.API.add_error_handler \"falcon.API.add_error_handler\").\n\nIn addition to the standard `req` and `resp` parameters, if the route’s template contains field expressions, any responder that desires to receive requests for that route must accept arguments named after the respective field names defined in the template.\n\nA field expression consists of a bracketed field name. For example, given the following template:\n\n``` python\n/user/{name}\n```\n\nA PUT request to “/user/kgriffs” would be routed to:\n\n``` python\ndef on_put(self, req, resp, name):\n    pass\n```\n\nBecause field names correspond to argument names in responder methods, they must be valid Python identifiers.\n\nIndividual path segments may contain one or more field expressions, and fields need not span the entire path segment. For example:\n\n``` python\n/repos/{org}/{repo}/compare/{usr0}:{branch0}...{usr1}:{branch1}\n/serviceRoot/People('{name}')\n```\n\n(See also the [Falcon tutorial](../user/tutorial#tutorial) for additional examples and a walkthough of setting up routes within the context of a sample application.)\n\n## Field Converters\n\nFalcon’s default router supports the use of field converters to transform a URI template field value. Field converters may also perform simple input validation. For example, the following URI template uses the `int` converter to convert the value of `tid` to a Python `int`, but only if it has exactly eight digits:\n\n``` python\n/teams/{tid:int(8)}\n```\n\nIf the value is malformed and can not be converted, Falcon will reject the request with a 404 response to the client.\n\nConverters are instantiated with the argument specification given in the field expression. These specifications follow the standard Python syntax for passing arguments. For example, the comments in the following code show how a converter would be instantiated given different argument specifications in the URI template:\n\n``` python\n# IntConverter()\napi.add_route(\n    '/a/{some_field:int}',\n    some_resource\n)\n\n# IntConverter(8)\napi.add_route(\n    '/b/{some_field:int(8)}',\n    some_resource\n)\n\n# IntConverter(8, min=10000000)\napi.add_route(\n    '/c/{some_field:int(8, min=10000000)}',\n    some_resource\n)\n```\n\n## Built-in Converters\n\n| Identifier | Class                                                                                       | Example                            |\n|------------|---------------------------------------------------------------------------------------------|------------------------------------|\n| `int`      | [`IntConverter`](#falcon.routing.IntConverter \"falcon.routing.IntConverter\")                | `/teams/{tid:int(8)}`              |\n| `uuid`     | [`UUIDConverter`](#falcon.routing.UUIDConverter \"falcon.routing.UUIDConverter\")             | `/diff/{left:uuid}...{right:uuid}` |\n| `dt`       | [`DateTimeConverter`](#falcon.routing.DateTimeConverter \"falcon.routing.DateTimeConverter\") | `/logs/{day:dt(\"%Y-%m-%d\")}`       |\n\n`class falcon.routing.IntConverter(num_digits=None, min=None, max=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#IntConverter)  \nConverts a field value to an int.\n\nIdentifier: `int`\n\n[TABLE]\n\n`convert(value)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#IntConverter.convert)  \nConvert a URI template field value to another format or type.\n\n[TABLE]\n\n`class falcon.routing.UUIDConverter` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#UUIDConverter)  \nConverts a field value to a uuid.UUID.\n\nIdentifier: `uuid`\n\nIn order to be converted, the field value must consist of a string of 32 hexadecimal digits, as defined in [RFC 4122, Section 3.](https://tools.ietf.org/html/rfc4122#section-3.) Note, however, that hyphens and the URN prefix are optional.\n\n`convert(value)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#UUIDConverter.convert)  \nConvert a URI template field value to another format or type.\n\n[TABLE]\n\n&nbsp;\n\n`class falcon.routing.DateTimeConverter(format_string='%Y-%m-%dT%H:%M:%SZ')` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#DateTimeConverter)  \nConverts a field value to a datetime.\n\nIdentifier: `dt`\n\n|                    |                                                                                                                                                                                                                                              |\n|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Keyword Arguments: |                                                                                                                                                                                                                                              |\n|                    | **format_string** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – String used to parse the field value into a datetime. Any format recognized by strptime() is supported (default `'%Y-%m-%dT%H:%M:%SZ'`). |\n\n`convert(value)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#DateTimeConverter.convert)  \nConvert a URI template field value to another format or type.\n\n[TABLE]\n\n## Custom Converters\n\nCustom converters can be registered via the [`converters`](api#falcon.routing.CompiledRouterOptions.converters \"falcon.routing.CompiledRouterOptions.converters\") router option. A converter is simply a class that implements the `BaseConverter` interface:\n\n`class falcon.routing.BaseConverter` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#BaseConverter)  \nAbstract base class for URI template field converters.\n\n`convert(value)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/converters.html#BaseConverter.convert)  \nConvert a URI template field value to another format or type.\n\n[TABLE]\n\n## Custom Routers\n\nA custom routing engine may be specified when instantiating [`falcon.API()`](api#falcon.API \"falcon.API\"). For example:\n\n``` python\nrouter = MyRouter()\napi = API(router=router)\n```\n\nCustom routers may derive from the default [`CompiledRouter`](#falcon.routing.CompiledRouter \"falcon.routing.CompiledRouter\") engine, or implement a completely different routing strategy (such as object-based routing).\n\nA custom router is any class that implements the following interface:\n\n``` python\nclass MyRouter(object):\n    def add_route(self, uri_template, resource, **kwargs):\n        \"\"\"Adds a route between URI path template and resource.\n\n        Args:\n            uri_template (str): A URI template to use for the route\n            resource (object): The resource instance to associate with\n                the URI template.\n\n        Keyword Args:\n            suffix (str): Optional responder name suffix for this\n                route. If a suffix is provided, Falcon will map GET\n                requests to ``on_get_{suffix}()``, POST requests to\n                ``on_post_{suffix}()``, etc. In this way, multiple\n                closely-related routes can be mapped to the same\n                resource. For example, a single resource class can\n                use suffixed responders to distinguish requests for\n                a single item vs. a collection of those same items.\n                Another class might use a suffixed responder to handle\n                a shortlink route in addition to the regular route for\n                the resource.\n\n            **kwargs (dict): Accepts any additional keyword arguments\n                that were originally passed to the falcon.API.add_route()\n                method. These arguments MUST be accepted via the\n                double-star variadic pattern (**kwargs), and ignore any\n                unrecognized or unsupported arguments.\n        \"\"\"\n\n    def find(self, uri, req=None):\n        \"\"\"Search for a route that matches the given partial URI.\n\n        Args:\n            uri(str): The requested path to route.\n\n        Keyword Args:\n             req(Request): The Request object that will be passed to\n                the routed responder. The router may use `req` to\n                further differentiate the requested route. For\n                example, a header may be used to determine the\n                desired API version and route the request\n                accordingly.\n\n                Note:\n                    The `req` keyword argument was added in version\n                    1.2. To ensure backwards-compatibility, routers\n                    that do not implement this argument are still\n                    supported.\n\n        Returns:\n            tuple: A 4-member tuple composed of (resource, method_map,\n                params, uri_template), or ``None`` if no route matches\n                the requested path.\n\n        \"\"\"\n```\n\n## Default Router\n\n`class falcon.routing.CompiledRouter` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouter)  \nFast URI router which compiles its routing logic to Python code.\n\nGenerally you do not need to use this router class directly, as an instance is created by default when the falcon.API class is initialized.\n\nThe router treats URI paths as a tree of URI segments and searches by checking the URI one segment at a time. Instead of interpreting the route tree for each look-up, it generates inlined, bespoke Python code to perform the search, then compiles that code. This makes the route processing quite fast.\n\n`add_route(uri_template, resource, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouter.add_route)  \nAdds a route between a URI path template and a resource.\n\nThis method may be overridden to customize how a route is added.\n\n[TABLE]\n\n`find(uri, req=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouter.find)  \nSearch for a route that matches the given partial URI.\n\n[TABLE]\n\n`map_http_methods(resource, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouter.map_http_methods)  \nMap HTTP methods (e.g., GET, POST) to methods of a resource object.\n\nThis method is called from [`add_route()`](#falcon.routing.CompiledRouter.add_route \"falcon.routing.CompiledRouter.add_route\") and may be overridden to provide a custom mapping strategy.\n\n|                    ||\n|--------------------||\n| Parameters:        | **resource** (*instance*) – Object which represents a REST resource. The default maps the HTTP method `GET` to `on_get()`, `POST` to `on_post()`, etc. If any HTTP methods are not supported by your resource, simply don’t define the corresponding request handlers, and Falcon will do the right thing.                                                                                                                                                                                                                                                                                                                          |\n| Keyword Arguments: ||\n|                    | **suffix** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – Optional responder name suffix for this route. If a suffix is provided, Falcon will map GET requests to `on_get_{suffix}()`, POST requests to `on_post_{suffix}()`, etc. In this way, multiple closely-related routes can be mapped to the same resource. For example, a single resource class can use suffixed responders to distinguish requests for a single item vs. a collection of those same items. Another class might use a suffixed responder to handle a shortlink route in addition to the regular route for the resource. |\n\n## Routing Utilities\n\nThe *falcon.routing* module contains the following utilities that may be used by custom routing engines.\n\n`falcon.routing.map_http_methods(resource, suffix=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/util.html#map_http_methods)  \nMaps HTTP methods (e.g., GET, POST) to methods of a resource object.\n\n|                    |                                                                                                                                                                                                                                                                                 |\n|--------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:        | **resource** – An object with *responder* methods, following the naming convention *on\\_\\**, that correspond to each method the resource supports. For example, if a resource supports GET and POST, it should define `on_get(self, req, resp)` and `on_post(self, req, resp)`. |\n| Keyword Arguments: |                                                                                                                                                                                                                                                                                 |\n|                    | **suffix** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – Optional responder name suffix for this route. If a suffix is provided, Falcon will map GET requests to `on_get_{suffix}()`, POST requests to `on_post_{suffix}()`, etc.           |\n| Returns:           | A mapping of HTTP methods to explicitly defined resource responders.                                                                                                                                                                                                            |\n| Return type:       | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\")                                                                                                                                                                                                 |\n\n&nbsp;\n\n`falcon.routing.set_default_responders(method_map)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/util.html#set_default_responders)  \nMaps HTTP methods not explicitly defined on a resource to default responders.\n\n|             |                                                                                                  |\n|-------------|--------------------------------------------------------------------------------------------------|\n| Parameters: | **method_map** – A dict with HTTP methods mapped to responders explicitly defined in a resource. |\n\n&nbsp;\n\n`falcon.routing.compile_uri_template(template)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/util.html#compile_uri_template)  \nCompile the given URI template string into a pattern matcher.\n\nThis function can be used to construct custom routing engines that iterate through a list of possible routes, attempting to match an incoming request against each route’s compiled regular expression.\n\nEach field is converted to a named group, so that when a match is found, the fields can be easily extracted using `re.MatchObject.groupdict()`.\n\nThis function does not support the more flexible templating syntax used in the default router. Only simple paths with bracketed field expressions are recognized. For example:\n\n``` python\n/\n/books\n/books/{isbn}\n/books/{isbn}/characters\n/books/{isbn}/characters/{name}\n```\n\nAlso, note that if the template contains a trailing slash character, it will be stripped in order to normalize the routing logic.\n\n|              |                                                                                                                                                                                                               |\n|--------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **template** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – The template to compile. Note that field names are restricted to ASCII a-z, A-Z, and the underscore character. |\n| Returns:     | (template_field_names, template_regex)                                                                                                                                                                        |\n| Return type: | [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.7)\")                                                                                                                             |\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/routing.html](https://falcon.readthedocs.io/en/2.0.0/api/routing.html)"
- name: Status Codes
  id: api/status
  summary: Falcon provides a list of constants for common HTTP response status codes
  description: "# Status Codes\n\nFalcon provides a list of constants for common [HTTP response status codes](http://httpstatus.es).\n\nFor example:\n\n``` python\n# Override the default \"200 OK\" response status\nresp.status = falcon.HTTP_409\n```\n\nOr, using the more verbose name:\n\n``` python\nresp.status = falcon.HTTP_CONFLICT\n```\n\nUsing these constants helps avoid typos and cuts down on the number of string objects that must be created when preparing responses.\n\nFalcon also provides a generic `HTTPStatus` class. Raise this class from a hook, middleware, or a responder to stop handling the request and skip to the response handling. It takes status, additional headers and body as input arguments.\n\n## HTTPStatus\n\n`class falcon.HTTPStatus(status, headers=None, body=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/http_status.html#HTTPStatus)  \nRepresents a generic HTTP status.\n\nRaise an instance of this class from a hook, middleware, or responder to short-circuit request processing in a manner similar to `falcon.HTTPError`, but for non-error status codes.\n\n`status`  \nHTTP status line, e.g. ‘748 Confounded by Ponies’.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`headers`  \nExtra headers to add to the response.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`body`  \nString representing response content. If Unicode, Falcon will encode as UTF-8 in the response.\n\n|       |                                                                                          |\n|-------|------------------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") or unicode |\n\n[TABLE]\n\n## 1xx Informational\n\n``` python\nHTTP_CONTINUE = HTTP_100\nHTTP_SWITCHING_PROTOCOLS = HTTP_101\nHTTP_PROCESSING = HTTP_102\n\nHTTP_100 = '100 Continue'\nHTTP_101 = '101 Switching Protocols'\nHTTP_102 = '102 Processing'\n```\n\n## 2xx Success\n\n``` python\nHTTP_OK = HTTP_200\nHTTP_CREATED = HTTP_201\nHTTP_ACCEPTED = HTTP_202\nHTTP_NON_AUTHORITATIVE_INFORMATION = HTTP_203\nHTTP_NO_CONTENT = HTTP_204\nHTTP_RESET_CONTENT = HTTP_205\nHTTP_PARTIAL_CONTENT = HTTP_206\nHTTP_MULTI_STATUS = HTTP_207\nHTTP_ALREADY_REPORTED = HTTP_208\nHTTP_IM_USED = HTTP_226\n\nHTTP_200 = '200 OK'\nHTTP_201 = '201 Created'\nHTTP_202 = '202 Accepted'\nHTTP_203 = '203 Non-Authoritative Information'\nHTTP_204 = '204 No Content'\nHTTP_205 = '205 Reset Content'\nHTTP_206 = '206 Partial Content'\nHTTP_207 = '207 Multi-Status'\nHTTP_208 = '208 Already Reported'\nHTTP_226 = '226 IM Used'\n```\n\n## 3xx Redirection\n\n``` python\nHTTP_MULTIPLE_CHOICES = HTTP_300\nHTTP_MOVED_PERMANENTLY = HTTP_301\nHTTP_FOUND = HTTP_302\nHTTP_SEE_OTHER = HTTP_303\nHTTP_NOT_MODIFIED = HTTP_304\nHTTP_USE_PROXY = HTTP_305\nHTTP_TEMPORARY_REDIRECT = HTTP_307\nHTTP_PERMANENT_REDIRECT = HTTP_308\n\nHTTP_300 = '300 Multiple Choices'\nHTTP_301 = '301 Moved Permanently'\nHTTP_302 = '302 Found'\nHTTP_303 = '303 See Other'\nHTTP_304 = '304 Not Modified'\nHTTP_305 = '305 Use Proxy'\nHTTP_307 = '307 Temporary Redirect'\nHTTP_308 = '308 Permanent Redirect'\n```\n\n## 4xx Client Error\n\n``` python\nHTTP_BAD_REQUEST = HTTP_400\nHTTP_UNAUTHORIZED = HTTP_401  # <-- Really means \"unauthenticated\"\nHTTP_PAYMENT_REQUIRED = HTTP_402\nHTTP_FORBIDDEN = HTTP_403  # <-- Really means \"unauthorized\"\nHTTP_NOT_FOUND = HTTP_404\nHTTP_METHOD_NOT_ALLOWED = HTTP_405\nHTTP_NOT_ACCEPTABLE = HTTP_406\nHTTP_PROXY_AUTHENTICATION_REQUIRED = HTTP_407\nHTTP_REQUEST_TIMEOUT = HTTP_408\nHTTP_CONFLICT = HTTP_409\nHTTP_GONE = HTTP_410\nHTTP_LENGTH_REQUIRED = HTTP_411\nHTTP_PRECONDITION_FAILED = HTTP_412\nHTTP_REQUEST_ENTITY_TOO_LARGE = HTTP_413\nHTTP_REQUEST_URI_TOO_LONG = HTTP_414\nHTTP_UNSUPPORTED_MEDIA_TYPE = HTTP_415\nHTTP_REQUESTED_RANGE_NOT_SATISFIABLE = HTTP_416\nHTTP_EXPECTATION_FAILED = HTTP_417\nHTTP_IM_A_TEAPOT = HTTP_418\nHTTP_UNPROCESSABLE_ENTITY = HTTP_422\nHTTP_LOCKED = HTTP_423\nHTTP_FAILED_DEPENDENCY = HTTP_424\nHTTP_UPGRADE_REQUIRED = HTTP_426\nHTTP_PRECONDITION_REQUIRED = HTTP_428\nHTTP_TOO_MANY_REQUESTS = HTTP_429\nHTTP_REQUEST_HEADER_FIELDS_TOO_LARGE = HTTP_431\nHTTP_UNAVAILABLE_FOR_LEGAL_REASONS = HTTP_451\n\nHTTP_400 = '400 Bad Request'\nHTTP_401 = '401 Unauthorized'  # <-- Really means \"unauthenticated\"\nHTTP_402 = '402 Payment Required'\nHTTP_403 = '403 Forbidden'  # <-- Really means \"unauthorized\"\nHTTP_404 = '404 Not Found'\nHTTP_405 = '405 Method Not Allowed'\nHTTP_406 = '406 Not Acceptable'\nHTTP_407 = '407 Proxy Authentication Required'\nHTTP_408 = '408 Request Time-out'\nHTTP_409 = '409 Conflict'\nHTTP_410 = '410 Gone'\nHTTP_411 = '411 Length Required'\nHTTP_412 = '412 Precondition Failed'\nHTTP_413 = '413 Payload Too Large'\nHTTP_414 = '414 URI Too Long'\nHTTP_415 = '415 Unsupported Media Type'\nHTTP_416 = '416 Range Not Satisfiable'\nHTTP_417 = '417 Expectation Failed'\nHTTP_418 = \"418 I'm a teapot\"\nHTTP_422 = \"422 Unprocessable Entity\"\nHTTP_423 = '423 Locked'\nHTTP_424 = '424 Failed Dependency'\nHTTP_426 = '426 Upgrade Required'\nHTTP_428 = '428 Precondition Required'\nHTTP_429 = '429 Too Many Requests'\nHTTP_431 = '431 Request Header Fields Too Large'\nHTTP_451 = '451 Unavailable For Legal Reasons'\n```\n\n## 5xx Server Error\n\n``` python\nHTTP_INTERNAL_SERVER_ERROR = HTTP_500\nHTTP_NOT_IMPLEMENTED = HTTP_501\nHTTP_BAD_GATEWAY = HTTP_502\nHTTP_SERVICE_UNAVAILABLE = HTTP_503\nHTTP_GATEWAY_TIMEOUT = HTTP_504\nHTTP_HTTP_VERSION_NOT_SUPPORTED = HTTP_505\nHTTP_INSUFFICIENT_STORAGE = HTTP_507\nHTTP_LOOP_DETECTED = HTTP_508\nHTTP_NETWORK_AUTHENTICATION_REQUIRED = HTTP_511\n\nHTTP_500 = '500 Internal Server Error'\nHTTP_501 = '501 Not Implemented'\nHTTP_502 = '502 Bad Gateway'\nHTTP_503 = '503 Service Unavailable'\nHTTP_504 = '504 Gateway Time-out'\nHTTP_505 = '505 HTTP Version not supported'\nHTTP_507 = '507 Insufficient Storage'\nHTTP_508 = '508 Loop Detected'\nHTTP_511 = '511 Network Authentication Required'\n```\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/status.html](https://falcon.readthedocs.io/en/2.0.0/api/status.html)"
- name: Testing
  id: api/testing
  summary: Functional testing framework for Falcon apps and Falcon itself
  description: "# Testing\n\n## Reference\n\nFunctional testing framework for Falcon apps and Falcon itself.\n\nFalcon’s testing module contains various test classes and utility functions to support functional testing for both Falcon-based apps and the Falcon framework itself.\n\nThe testing framework supports both unittest and pytest:\n\n``` python\n# -----------------------------------------------------------------\n# unittest\n# -----------------------------------------------------------------\n\nfrom falcon import testing\nimport myapp\n\n\nclass MyTestCase(testing.TestCase):\n    def setUp(self):\n        super(MyTestCase, self).setUp()\n\n        # Assume the hypothetical `myapp` package has a\n        # function called `create()` to initialize and\n        # return a `falcon.API` instance.\n        self.app = myapp.create()\n\n\nclass TestMyApp(MyTestCase):\n    def test_get_message(self):\n        doc = {u'message': u'Hello world!'}\n\n        result = self.simulate_get('/messages/42')\n        self.assertEqual(result.json, doc)\n\n\n# -----------------------------------------------------------------\n# pytest\n# -----------------------------------------------------------------\n\nfrom falcon import testing\nimport pytest\n\nimport myapp\n\n\n# Depending on your testing strategy and how your application\n# manages state, you may be able to broaden the fixture scope\n# beyond the default 'function' scope used in this example.\n\n@pytest.fixture()\ndef client():\n    # Assume the hypothetical `myapp` package has a function called\n    # `create()` to initialize and return a `falcon.API` instance.\n    return testing.TestClient(myapp.create())\n\n\ndef test_get_message(client):\n    doc = {u'message': u'Hello world!'}\n\n    result = client.simulate_get('/messages/42')\n    assert result.json == doc\n```\n\n`class falcon.testing.Result(iterable, status, headers)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#Result)  \nEncapsulates the result of a simulated WSGI request.\n\n[TABLE]\n\n`status`  \nHTTP status string given in the response\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`status_code`  \nThe code portion of the HTTP status string\n\n|       |                                                                                |\n|-------|--------------------------------------------------------------------------------|\n| Type: | [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.7)\") |\n\n`headers`  \nA case-insensitive dictionary containing all the headers in the response, except for cookies, which may be accessed via the `cookies` attribute.\n\nNote\n\nMultiple instances of a header in the response are currently not supported; it is unspecified which value will “win” and be represented in `headers`.\n\n|       |                     |\n|-------|---------------------|\n| Type: | CaseInsensitiveDict |\n\n`cookies`  \nA dictionary of [`falcon.testing.Cookie`](#falcon.testing.Cookie \"falcon.testing.Cookie\") values parsed from the response, by name.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n`encoding`  \nText encoding of the response body, or `None` if the encoding can not be determined.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`content`  \nRaw response body, or `bytes` if the response body was empty.\n\n|       |                                                                                   |\n|-------|-----------------------------------------------------------------------------------|\n| Type: | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.7)\") |\n\n`text`  \nDecoded response body of type `unicode` under Python 2.7, and of type `str` otherwise. If the content type does not specify an encoding, UTF-8 is assumed.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`json`  \nDeserialized JSON body. Will be `None` if the body has no content to deserialize. Otherwise, raises an error if the response is not valid JSON.\n\n|       |                   |\n|-------|-------------------|\n| Type: | JSON serializable |\n\n`class falcon.testing.Cookie(morsel)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#Cookie)  \nRepresents a cookie returned by a simulated request.\n\n|             |                                                                      |\n|-------------|----------------------------------------------------------------------|\n| Parameters: | **morsel** – A `Morsel` object from which to derive the cookie data. |\n\n`name`  \nThe cookie’s name.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`value`  \nThe value of the cookie.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`expires`  \nExpiration timestamp for the cookie, or `None` if not specified.\n\n|       |                                                                                                           |\n|-------|-----------------------------------------------------------------------------------------------------------|\n| Type: | [datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.7)\") |\n\n`path`  \nThe path prefix to which this cookie is restricted, or `None` if not specified.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`domain`  \nThe domain to which this cookie is restricted, or `None` if not specified.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`max_age`  \nThe lifetime of the cookie in seconds, or `None` if not specified.\n\n|       |                                                                                |\n|-------|--------------------------------------------------------------------------------|\n| Type: | [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.7)\") |\n\n`secure`  \nWhether or not the cookie may only only be transmitted from the client via HTTPS.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`http_only`  \nWhether or not the cookie may only be included in unscripted requests from the client.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n&nbsp;\n\n`falcon.testing.simulate_request(app, method='GET', path='/', query_string=None, headers=None, body=None, json=None, file_wrapper=None, wsgierrors=None, params=None, params_csv=True, protocol='http', host='falconframework.org', remote_addr=None, extras=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_request)  \nSimulates a request to a WSGI application.\n\nPerforms a request against a WSGI application. Uses [`wsgiref.validate`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref.validate \"(in Python v3.7)\") to ensure the response is valid WSGI.\n\n[TABLE]\n\n&nbsp;\n\n`falcon.testing.simulate_get(app, path, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_get)  \nSimulates a GET request to a WSGI application.\n\nEquivalent to:\n\n``` python\nsimulate_request(app, 'GET', path, **kwargs)\n```\n\n[TABLE]\n\n&nbsp;\n\n`falcon.testing.simulate_head(app, path, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_head)  \nSimulates a HEAD request to a WSGI application.\n\nEquivalent to:\n\n``` python\nsimulate_request(app, 'HEAD', path, **kwargs)\n```\n\n[TABLE]\n\n&nbsp;\n\n`falcon.testing.simulate_post(app, path, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_post)  \nSimulates a POST request to a WSGI application.\n\nEquivalent to:\n\n``` python\nsimulate_request(app, 'POST', path, **kwargs)\n```\n\n[TABLE]\n\n&nbsp;\n\n`falcon.testing.simulate_put(app, path, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_put)  \nSimulates a PUT request to a WSGI application.\n\nEquivalent to:\n\n``` python\nsimulate_request(app, 'PUT', path, **kwargs)\n```\n\n[TABLE]\n\n&nbsp;\n\n`falcon.testing.simulate_options(app, path, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_options)  \nSimulates an OPTIONS request to a WSGI application.\n\nEquivalent to:\n\n``` python\nsimulate_request(app, 'OPTIONS', path, **kwargs)\n```\n\n[TABLE]\n\n&nbsp;\n\n`falcon.testing.simulate_patch(app, path, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_patch)  \nSimulates a PATCH request to a WSGI application.\n\nEquivalent to:\n\n``` python\nsimulate_request(app, 'PATCH', path, **kwargs)\n```\n\n[TABLE]\n\n&nbsp;\n\n`falcon.testing.simulate_delete(app, path, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#simulate_delete)  \nSimulates a DELETE request to a WSGI application.\n\nEquivalent to:\n\n``` python\nsimulate_request(app, 'DELETE', path, **kwargs)\n```\n\n[TABLE]\n\n&nbsp;\n\n`class falcon.testing.TestClient(app, headers=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient)  \nSimulates requests to a WSGI application.\n\nThis class provides a contextual wrapper for Falcon’s `simulate_*` test functions. It lets you replace this:\n\n``` python\nsimulate_get(app, '/messages')\nsimulate_head(app, '/messages')\n```\n\nwith this:\n\n``` python\nclient = TestClient(app)\nclient.simulate_get('/messages')\nclient.simulate_head('/messages')\n```\n\nNote\n\nThe methods all call `self.simulate_request()` for convenient overriding of request preparation by child classes.\n\n|                    |                                                                                                                                                                                                                                                                         |\n|--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:        | **app** (*callable*) – A WSGI application to target when simulating requests                                                                                                                                                                                            |\n| Keyword Arguments: |                                                                                                                                                                                                                                                                         |\n|                    | **headers** ([dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\")) – Default headers to set on every request (default `None`). These defaults may be overridden by passing values for the same headers to one of the `simulate_*()` methods. |\n\n`simulate_delete(path='/', **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_delete)  \nSimulates a DELETE request to a WSGI application.\n\n(See also: [`falcon.testing.simulate_delete()`](#falcon.testing.simulate_delete \"falcon.testing.simulate_delete\"))\n\n`simulate_get(path='/', **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_get)  \nSimulates a GET request to a WSGI application.\n\n(See also: [`falcon.testing.simulate_get()`](#falcon.testing.simulate_get \"falcon.testing.simulate_get\"))\n\n`simulate_head(path='/', **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_head)  \nSimulates a HEAD request to a WSGI application.\n\n(See also: [`falcon.testing.simulate_head()`](#falcon.testing.simulate_head \"falcon.testing.simulate_head\"))\n\n`simulate_options(path='/', **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_options)  \nSimulates an OPTIONS request to a WSGI application.\n\n(See also: [`falcon.testing.simulate_options()`](#falcon.testing.simulate_options \"falcon.testing.simulate_options\"))\n\n`simulate_patch(path='/', **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_patch)  \nSimulates a PATCH request to a WSGI application.\n\n(See also: [`falcon.testing.simulate_patch()`](#falcon.testing.simulate_patch \"falcon.testing.simulate_patch\"))\n\n`simulate_post(path='/', **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_post)  \nSimulates a POST request to a WSGI application.\n\n(See also: [`falcon.testing.simulate_post()`](#falcon.testing.simulate_post \"falcon.testing.simulate_post\"))\n\n`simulate_put(path='/', **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_put)  \nSimulates a PUT request to a WSGI application.\n\n(See also: [`falcon.testing.simulate_put()`](#falcon.testing.simulate_put \"falcon.testing.simulate_put\"))\n\n`simulate_request(*args, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/client.html#TestClient.simulate_request)  \nSimulates a request to a WSGI application.\n\nWraps [`falcon.testing.simulate_request()`](#falcon.testing.simulate_request \"falcon.testing.simulate_request\") to perform a WSGI request directly against `self.app`. Equivalent to:\n\n``` python\nfalcon.testing.simulate_request(self.app, *args, **kwargs)\n```\n\n&nbsp;\n\n`class falcon.testing.TestCase(methodName='runTest')` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/test_case.html#TestCase)  \nExtends [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest \"(in Python v3.7)\") to support WSGI functional testing.\n\nNote\n\nIf available, uses `testtools` in lieu of [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest \"(in Python v3.7)\").\n\nThis base class provides some extra plumbing for unittest-style test cases, to help simulate WSGI calls without having to spin up an actual web server. Various simulation methods are derived from [`falcon.testing.TestClient`](#falcon.testing.TestClient \"falcon.testing.TestClient\").\n\nSimply inherit from this class in your test case classes instead of [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase \"(in Python v3.7)\") or `testtools.TestCase`.\n\n`app`  \nA WSGI application to target when simulating requests (default: `falcon.API()`). When testing your application, you will need to set this to your own instance of `falcon.API`. For example:\n\n``` python\nfrom falcon import testing\nimport myapp\n\n\nclass MyTestCase(testing.TestCase):\n    def setUp(self):\n        super(MyTestCase, self).setUp()\n\n        # Assume the hypothetical `myapp` package has a\n        # function called `create()` to initialize and\n        # return a `falcon.API` instance.\n        self.app = myapp.create()\n\n\nclass TestMyApp(MyTestCase):\n    def test_get_message(self):\n        doc = {u'message': u'Hello world!'}\n\n        result = self.simulate_get('/messages/42')\n        self.assertEqual(result.json, doc)\n```\n\n|       |                                                                                      |\n|-------|--------------------------------------------------------------------------------------|\n| Type: | [object](https://docs.python.org/3/library/functions.html#object \"(in Python v3.7)\") |\n\n`setUp()` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/test_case.html#TestCase.setUp)  \nHook method for setting up the test fixture before exercising it.\n\n&nbsp;\n\n`class falcon.testing.SimpleTestResource(status=None, body=None, json=None, headers=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/resource.html#SimpleTestResource)  \nMock resource for functional testing of framework components.\n\nThis class implements a simple test resource that can be extended as needed to test middleware, hooks, and the Falcon framework itself.\n\nOnly noop `on_get()` and `on_post()` responders are implemented; when overriding these, or adding additional responders in child classes, they can be decorated with the [`falcon.testing.capture_responder_args()`](#falcon.testing.capture_responder_args \"falcon.testing.capture_responder_args\") hook in order to capture the *req*, *resp*, and *params* arguments that are passed to the responder. Responders may also be decorated with the `falcon.testing.set_resp_defaults()` hook in order to set *resp* properties to default *status*, *body*, and *header* values.\n\n[TABLE]\n\n`called`  \nWhether or not a req/resp was captured.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`captured_req`  \nThe last Request object passed into any one of the responder methods.\n\n|       |                                                                        |\n|-------|------------------------------------------------------------------------|\n| Type: | [falcon.Request](request_and_response#falcon.Request \"falcon.Request\") |\n\n`captured_resp`  \nThe last Response object passed into any one of the responder methods.\n\n|       |                                                                           |\n|-------|---------------------------------------------------------------------------|\n| Type: | [falcon.Response](request_and_response#falcon.Response \"falcon.Response\") |\n\n`captured_kwargs`  \nThe last dictionary of kwargs, beyond `req` and `resp`, that were passed into any one of the responder methods.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n&nbsp;\n\n`class falcon.testing.StartResponseMock` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/srmock.html#StartResponseMock)  \nMock object representing a WSGI `start_response` callable.\n\n`call_count`  \nNumber of times `start_response` was called.\n\n|       |                                                                                |\n|-------|--------------------------------------------------------------------------------|\n| Type: | [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.7)\") |\n\n`status`  \nHTTP status line, e.g. ‘785 TPS Cover Sheet not attached’.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`headers`  \nRaw headers list passed to `start_response`, per PEP-333.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [list](https://docs.python.org/3/library/stdtypes.html#list \"(in Python v3.7)\") |\n\n`headers_dict`  \nHeaders as a case-insensitive `dict`-like object, instead of a `list`.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n&nbsp;\n\n`falcon.testing.capture_responder_args(req, resp, resource, params)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/resource.html#capture_responder_args)  \nBefore hook for capturing responder arguments.\n\nAdds the following attributes to the hooked responder’s resource class:\n\n- captured_req\n- captured_resp\n- captured_kwargs\n\n&nbsp;\n\n`falcon.testing.rand_string(min, max)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/helpers.html#rand_string)  \nReturns a randomly-generated string, of a random length.\n\n[TABLE]\n\n&nbsp;\n\n`falcon.testing.create_environ(path='/', query_string='', protocol='HTTP/1.1', scheme='http', host='falconframework.org', port=None, headers=None, app='', body='', method='GET', wsgierrors=None, file_wrapper=None, remote_addr=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/helpers.html#create_environ)  \nCreates a mock PEP-3333 environ `dict` for simulating WSGI requests.\n\n[TABLE]\n\n&nbsp;\n\n`falcon.testing.redirected(stdout=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='UTF-8'>, stderr=<_io.TextIOWrapper name='<stderr>' mode='w' encoding='UTF-8'>)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/helpers.html#redirected)  \nA context manager to temporarily redirect stdout or stderr\n\ne.g.:\n\nwith redirected(stderr=os.devnull):  \n…\n\n&nbsp;\n\n`falcon.testing.closed_wsgi_iterable(iterable)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/testing/helpers.html#closed_wsgi_iterable)  \nWraps an iterable to ensure its `close()` method is called.\n\nWraps the given `iterable` in an iterator utilizing a `for` loop as illustrated in [the PEP-3333 server/gateway side example](https://www.python.org/dev/peps/pep-3333/#the-server-gateway-side). Finally, if the iterable has a `close()` method, it is called upon exception or exausting iteration.\n\nFurthermore, the first bytestring yielded from iteration, if any, is prefetched before returning the wrapped iterator in order to ensure the WSGI `start_response` function is called even if the WSGI application is a generator.\n\n|              |                                                                                            |\n|--------------|--------------------------------------------------------------------------------------------|\n| Parameters:  | **iterable** (*iterable*) – An iterable that yields zero or more bytestrings, per PEP-3333 |\n| Returns:     | An iterator yielding the same bytestrings as `iterable`                                    |\n| Return type: | iterator                                                                                   |\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/testing.html](https://falcon.readthedocs.io/en/2.0.0/api/testing.html)"
- name: The API Class
  id: api/api
  summary: Falcon’s API class is a WSGI “application” that you can host with any standard-compliant WSGI server
  description: "# The API Class\n\nFalcon’s API class is a WSGI “application” that you can host with any standard-compliant WSGI server.\n\n``` python\nimport falcon\n\napp = falcon.API()\n```\n\n`class falcon.API(media_type='application/json', request_type=<class 'falcon.request.Request'>, response_type=<class 'falcon.response.Response'>, middleware=None, router=None, independent_middleware=True)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API)  \nThis class is the main entry point into a Falcon-based app.\n\nEach API instance provides a callable WSGI interface and a routing engine.\n\n[TABLE]\n\n`req_options`  \nA set of behavioral options related to incoming requests. (See also: [`RequestOptions`](#falcon.RequestOptions \"falcon.RequestOptions\"))\n\n`resp_options`  \nA set of behavioral options related to outgoing responses. (See also: [`ResponseOptions`](#falcon.ResponseOptions \"falcon.ResponseOptions\"))\n\n`router_options`  \nConfiguration options for the router. If a custom router is in use, and it does not expose any configurable options, referencing this attribute will raise an instance of `AttributeError`.\n\n(See also: [CompiledRouterOptions](#compiled-router-options))\n\n`add_error_handler(exception, handler=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.add_error_handler)  \nRegister a handler for one or more exception types.\n\nError handlers may be registered for any exception type, including [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\") or [`HTTPStatus`](status#falcon.HTTPStatus \"falcon.HTTPStatus\"). This feature provides a central location for logging and otherwise handling exceptions raised by responders, hooks, and middleware components.\n\nA handler can raise an instance of [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\") or [`HTTPStatus`](status#falcon.HTTPStatus \"falcon.HTTPStatus\") to communicate information about the issue to the client. Alternatively, a handler may modify `resp` directly.\n\nError handlers are matched in LIFO order. In other words, when searching for an error handler to match a raised exception, and more than one handler matches the exception type, the framework will choose the one that was most recently registered. Therefore, more general error handlers (e.g., for the standard `Exception` type) should be added first, to avoid masking more specific handlers for subclassed types.\n\nNote\n\nBy default, the framework installs two handlers, one for [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\") and one for [`HTTPStatus`](status#falcon.HTTPStatus \"falcon.HTTPStatus\"). These can be overridden by adding a custom error handler method for the exception type in question.\n\n[TABLE]\n\n`add_route(uri_template, resource, **kwargs)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.add_route)  \nAssociate a templatized URI path with a resource.\n\nFalcon routes incoming requests to resources based on a set of URI templates. If the path requested by the client matches the template for a given route, the request is then passed on to the associated resource for processing.\n\nIf no route matches the request, control then passes to a default responder that simply raises an instance of [`HTTPNotFound`](errors#falcon.HTTPNotFound \"falcon.HTTPNotFound\").\n\nThis method delegates to the configured router’s `add_route()` method. To override the default behavior, pass a custom router object to the [`API`](#falcon.API \"falcon.API\") initializer.\n\n(See also: [Routing](routing#routing))\n\n[TABLE]\n\nNote\n\nAny additional keyword arguments not defined above are passed through to the underlying router’s `add_route()` method. The default router ignores any additional keyword arguments, but custom routers may take advantage of this feature to receive additional options when setting up routes. Custom routers MUST accept such arguments using the variadic pattern (`**kwargs`), and ignore any keyword arguments that they don’t support.\n\n`add_sink(sink, prefix='/')` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.add_sink)  \nRegister a sink method for the API.\n\nIf no route matches a request, but the path in the requested URI matches a sink prefix, Falcon will pass control to the associated sink, regardless of the HTTP method requested.\n\nUsing sinks, you can drain and dynamically handle a large number of routes, when creating static resources and responders would be impractical. For example, you might use a sink to create a smart proxy that forwards requests to one or more backend services.\n\n[TABLE]\n\n`add_static_route(prefix, directory, downloadable=False, fallback_filename=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.add_static_route)  \nAdd a route to a directory of static files.\n\nStatic routes provide a way to serve files directly. This feature provides an alternative to serving files at the web server level when you don’t have that option, when authorization is required, or for testing purposes.\n\nWarning\n\nServing files directly from the web server, rather than through the Python app, will always be more efficient, and therefore should be preferred in production deployments. For security reasons, the directory and the fallback_filename (if provided) should be read only for the account running the application.\n\nStatic routes are matched in LIFO order. Therefore, if the same prefix is used for two routes, the second one will override the first. This also means that more specific routes should be added *after* less specific ones. For example, the following sequence would result in `'/foo/bar/thing.js'` being mapped to the `'/foo/bar'` route, and `'/foo/xyz/thing.js'` being mapped to the `'/foo'` route:\n\n``` python\napi.add_static_route('/foo', foo_path)\napi.add_static_route('/foo/bar', foobar_path)\n```\n\n[TABLE]\n\n`set_error_serializer(serializer)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/api.html#API.set_error_serializer)  \nOverride the default serializer for instances of [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\").\n\nWhen a responder raises an instance of [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\"), Falcon converts it to an HTTP response automatically. The default serializer supports JSON and XML, but may be overridden by this method to use a custom serializer in order to support other media types.\n\nNote\n\nIf a custom media type is used and the type includes a “+json” or “+xml” suffix, the default serializer will convert the error to JSON or XML, respectively.\n\nNote\n\nThe default serializer will not render any response body for [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\") instances where the `has_representation` property evaluates to `False` (such as in the case of types that subclass [`falcon.http_error.NoRepresentation`](errors#falcon.http_error.NoRepresentation \"falcon.http_error.NoRepresentation\")). However a custom serializer will be called regardless of the property value, and it may choose to override the representation logic.\n\nThe [`HTTPError`](errors#falcon.HTTPError \"falcon.HTTPError\") class contains helper methods, such as `to_json()` and `to_dict()`, that can be used from within custom serializers. For example:\n\n``` python\ndef my_serializer(req, resp, exception):\n    representation = None\n\n    preferred = req.client_prefers(('application/x-yaml',\n                                    'application/json'))\n\n    if exception.has_representation and preferred is not None:\n        if preferred == 'application/json':\n            representation = exception.to_json()\n        else:\n            representation = yaml.dump(exception.to_dict(),\n                                       encoding=None)\n        resp.body = representation\n        resp.content_type = preferred\n\n    resp.append_header('Vary', 'Accept')\n```\n\n|             |                                                                                                                                                                                                                                                        |\n|-------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **serializer** (*callable*) – A function taking the form `func(req, resp, exception)`, where `req` is the request object that was passed to the responder method, `resp` is the response object, and `exception` is an instance of `falcon.HTTPError`. |\n\n`class falcon.RequestOptions` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/request.html#RequestOptions)  \nDefines a set of configurable request options.\n\nAn instance of this class is exposed via [`API.req_options`](#falcon.API.req_options \"falcon.API.req_options\") for configuring certain [`Request`](request_and_response#falcon.Request \"falcon.Request\") behaviors.\n\n`keep_blank_qs_values`  \nSet to `False` to ignore query string params that have missing or blank values (default `True`). For comma-separated values, this option also determines whether or not empty elements in the parsed list are retained.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`auto_parse_form_urlencoded`  \nSet to `True` in order to automatically consume the request stream and merge the results into the request’s query string params when the request’s content type is *application/x-www-form-urlencoded* (default `False`).\n\nEnabling this option makes the form parameters accessible via [`params`](request_and_response#falcon.Request.params \"falcon.Request.params\"), [`get_param()`](request_and_response#falcon.Request.get_param \"falcon.Request.get_param\"), etc.\n\nWarning\n\nWhen this option is enabled, the request’s body stream will be left at EOF. The original data is not retained by the framework.\n\nNote\n\nThe character encoding for fields, before percent-encoding non-ASCII bytes, is assumed to be UTF-8. The special `_charset_` field is ignored if present.\n\nFalcon expects form-encoded request bodies to be encoded according to the standard W3C algorithm (see also [http://goo.gl/6rlcux](http://goo.gl/6rlcux)).\n\n`auto_parse_qs_csv`  \nSet to `True` to split query string values on any non-percent-encoded commas (default `False`). When `False`, values containing commas are left as-is. In this mode, list items are taken only from multiples of the same parameter name within the query string (i.e. `/?t=1,2,3&t=4` becomes `['1,2,3', '4']`). When `auto_parse_qs_csv` is set to `True`, the query string value is also split on non-percent-encoded commas and these items are added to the final list (i.e. `/?t=1,2,3&t=4` becomes `['1', '2', '3', '4']`).\n\n`strip_url_path_trailing_slash`  \nSet to `True` in order to strip the trailing slash, if present, at the end of the URL path (default `False`). When this option is enabled, the URL path is normalized by stripping the trailing slash character. This lets the application define a single route to a resource for a path that may or may not end in a forward slash. However, this behavior can be problematic in certain cases, such as when working with authentication schemes that employ URL-based signatures.\n\n`default_media_type`  \nThe default media-type to use when deserializing a response. This value is normally set to the media type provided when a [`falcon.API`](#falcon.API \"falcon.API\") is initialized; however, if created independently, this will default to the `DEFAULT_MEDIA_TYPE` specified by Falcon.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`media_handlers`  \nA dict-like object that allows you to configure the media-types that you would like to handle. By default, a handler is provided for the `application/json` media type.\n\n|       |                                                                 |\n|-------|-----------------------------------------------------------------|\n| Type: | [Handlers](media#falcon.media.Handlers \"falcon.media.Handlers\") |\n\n&nbsp;\n\n`class falcon.ResponseOptions` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/response.html#ResponseOptions)  \nDefines a set of configurable response options.\n\nAn instance of this class is exposed via [`API.resp_options`](#falcon.API.resp_options \"falcon.API.resp_options\") for configuring certain [`Response`](request_and_response#falcon.Response \"falcon.Response\") behaviors.\n\n`secure_cookies_by_default`  \nSet to `False` in development environments to make the `secure` attribute for all cookies default to `False`. This can make testing easier by not requiring HTTPS. Note, however, that this setting can be overridden via `set_cookie()`’s `secure` kwarg.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`default_media_type`  \nThe default Internet media type (RFC 2046) to use when deserializing a response. This value is normally set to the media type provided when a [`falcon.API`](#falcon.API \"falcon.API\") is initialized; however, if created independently, this will default to the `DEFAULT_MEDIA_TYPE` specified by Falcon.\n\n|       |                                                                               |\n|-------|-------------------------------------------------------------------------------|\n| Type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`media_handlers`  \nA dict-like object that allows you to configure the media-types that you would like to handle. By default, a handler is provided for the `application/json` media type.\n\n|       |                                                                 |\n|-------|-----------------------------------------------------------------|\n| Type: | [Handlers](media#falcon.media.Handlers \"falcon.media.Handlers\") |\n\n`static_media_types`  \nA mapping of dot-prefixed file extensions to Internet media types (RFC 2046). Defaults to `mimetypes.types_map` after calling `mimetypes.init()`.\n\n|       |                                                                                 |\n|-------|---------------------------------------------------------------------------------|\n| Type: | [dict](https://docs.python.org/3/library/stdtypes.html#dict \"(in Python v3.7)\") |\n\n&nbsp;\n\n`class falcon.routing.CompiledRouterOptions` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/routing/compiled.html#CompiledRouterOptions)  \nDefines a set of configurable router options.\n\nAn instance of this class is exposed via [`API.router_options`](#falcon.API.router_options \"falcon.API.router_options\") for configuring certain [`CompiledRouter`](routing#falcon.routing.CompiledRouter \"falcon.routing.CompiledRouter\") behaviors.\n\n`converters`  \nRepresents the collection of named converters that may be referenced in URI template field expressions. Adding additional converters is simply a matter of mapping an identifier to a converter class:\n\n``` python\napi.router_options.converters['mc'] = MyConverter\n```\n\nThe identifier can then be used to employ the converter within a URI template:\n\n``` python\napi.add_route('/{some_field:mc}', some_resource)\n```\n\nConverter names may only contain ASCII letters, digits, and underscores, and must start with either a letter or an underscore.\n\nWarning\n\nConverter instances are shared between requests. Therefore, in threaded deployments, care must be taken to implement custom converters in a thread-safe manner.\n\n(See also: [Field Converters](routing#routing-field-converters))\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/api.html](https://falcon.readthedocs.io/en/2.0.0/api/api.html)"
- name: Tutorial
  id: user/tutorial
  summary: In this tutorial we’ll walk through building an API for a simple image sharing service
  description: "# Tutorial\n\nIn this tutorial we’ll walk through building an API for a simple image sharing service. Along the way, we’ll discuss Falcon’s major features and introduce the terminology used by the framework.\n\n## First Steps\n\nThe first thing we’ll do is [install](install#install) Falcon inside a fresh [virtualenv](http://docs.python-guide.org/en/latest/dev/virtualenvs/). To that end, let’s create a new project folder called “look”, and set up a virtual environment within it that we can use for the tutorial:\n\n``` bash\n$ mkdir look\n$ cd look\n$ virtualenv .venv\n$ source .venv/bin/activate\n$ pip install falcon\n```\n\nIt’s customary for the project’s top-level module to be called the same as the project, so let’s create another “look” folder inside the first one and mark it as a python module by creating an empty `__init__.py` file in it:\n\n``` bash\n$ mkdir look\n$ touch look/__init__.py\n```\n\nNext, let’s create a new file that will be the entry point into your app:\n\n``` bash\n$ touch look/app.py\n```\n\nThe file hierarchy should now look like this:\n\n``` bash\nlook\n├── .venv\n└── look\n    ├── __init__.py\n    └── app.py\n```\n\nNow, open `app.py` in your favorite text editor and add the following lines:\n\n``` python\nimport falcon\n\napi = application = falcon.API()\n```\n\nThis code creates your WSGI application and aliases it as `api`. You can use any variable names you like, but we’ll use `application` since that is what Gunicorn, by default, expects it to be called (we’ll see how this works in the next section of the tutorial).\n\nNote\n\nA WSGI application is just a callable with a well-defined signature so that you can host the application with any web server that understands the [WSGI protocol](http://legacy.python.org/dev/peps/pep-3333/).\n\nNext let’s take a look at the [`falcon.API`](../api/api#falcon.API \"falcon.API\") class. Install [IPython](http://ipython.org/) and fire it up:\n\n``` bash\n$ pip install ipython\n$ ipython\n```\n\nNow, type the following to introspect the [`falcon.API`](../api/api#falcon.API \"falcon.API\") callable:\n\n``` bash\nIn [1]: import falcon\n\nIn [2]: falcon.API.__call__?\n```\n\nAlternatively, you can use the standard Python `help()` function:\n\n``` bash\nIn [3]: help(falcon.API.__call__)\n```\n\nNote the method signature. `env` and `start_response` are standard WSGI params. Falcon adds a thin abstraction on top of these params so you don’t have to interact with them directly.\n\nThe Falcon framework contains extensive inline documentation that you can query using the above technique.\n\nTip\n\nIn addition to [IPython](http://ipython.org/), the Python community maintains several other super-powered REPLs that you may wish to try, including [bpython](http://bpython-interpreter.org/) and [ptpython](https://github.com/jonathanslenders/ptpython).\n\n## Hosting Your App\n\nNow that you have a simple Falcon app, you can take it for a spin with a WSGI server. Python includes a reference server for self-hosting, but let’s use something more robust that you might use in production.\n\nOpen a new terminal and run the following:\n\n``` bash\n$ source .venv/bin/activate\n$ pip install gunicorn\n$ gunicorn --reload look.app\n```\n\n(Note the use of the `--reload` option to tell Gunicorn to reload the app whenever its code changes.)\n\nIf you are a Windows user, Waitress can be used in lieu of Gunicorn, since the latter doesn’t work under Windows:\n\n``` bash\n$ pip install waitress\n$ waitress-serve --port=8000 look.app:api\n```\n\nNow, in a different terminal, try querying the running app with curl:\n\n``` bash\n$ curl -v localhost:8000\n```\n\nYou should get a 404. That’s actually OK, because we haven’t specified any routes yet. Falcon includes a default 404 response handler that will fire for any requested path for which a route does not exist.\n\nWhile curl certainly gets the job done, it can be a bit crufty to use. [HTTPie](https://github.com/jkbr/httpie) is a modern, user-friendly alternative. Let’s install HTTPie and use it from now on:\n\n``` bash\n$ source .venv/bin/activate\n$ pip install httpie\n$ http localhost:8000\n```\n\n## Creating Resources\n\nFalcon’s design borrows several key concepts from the REST architectural style.\n\nCentral to both REST and the Falcon framework is the concept of a “resource”. Resources are simply all the things in your API or application that can be accessed by a URL. For example, an event booking application may have resources such as “ticket” and “venue”, while a video game backend may have resources such as “achievements” and “player”.\n\nURLs provide a way for the client to uniquely identify resources. For example, `/players` might identify the “list of all players” resource, while `/players/45301f54` might identify the “individual player with ID 45301f54”, and `/players/45301f54/achievements` the “list of all achievements for the player resource with ID 45301f54”.\n\n``` python\n  POST        /players/45301f54/achievements\n└──────┘    └────────────────────────────────┘\n Action            Resource Identifier\n```\n\nIn the REST architectural style, the URL only identifies the resource; it does not specify what action to take on that resource. Instead, users choose from a set of standard methods. For HTTP, these are the familiar GET, POST, HEAD, etc. Clients can query a resource to discover which methods it supports.\n\nNote\n\nThis is one of the key differences between the REST and RPC architectural styles. REST applies a standard set of verbs across any number of resources, as opposed to having each application define its own unique set of methods.\n\nDepending on the requested action, the server may or may not return a representation to the client. Representations may be encoded in any one of a number of Internet media types, such as JSON and HTML.\n\nFalcon uses Python classes to represent resources. In practice, these classes act as controllers in your application. They convert an incoming request into one or more internal actions, and then compose a response back to the client based on the results of those actions.\n\n``` python\n           ┌────────────┐\nrequest  → │            │\n           │ Resource   │ ↻ Orchestrate the requested action\n           │ Controller │ ↻ Compose the result\nresponse ← │            │\n           └────────────┘\n```\n\nA resource in Falcon is just a regular Python class that includes one or more methods representing the standard HTTP verbs supported by that resource. Each requested URL is mapped to a specific resource.\n\nSince we are building an image-sharing API, let’s start by creating an “images” resource. Create a new module, `images.py` next to `app.py`, and add the following code to it:\n\n``` python\nimport json\n\nimport falcon\n\n\nclass Resource(object):\n\n    def on_get(self, req, resp):\n        doc = {\n            'images': [\n                {\n                    'href': '/images/1eaf6ef1-7f2d-4ecc-a8d5-6e8adba7cc0e.png'\n                }\n            ]\n        }\n\n        # Create a JSON representation of the resource\n        resp.body = json.dumps(doc, ensure_ascii=False)\n\n        # The following line can be omitted because 200 is the default\n        # status returned by the framework, but it is included here to\n        # illustrate how this may be overridden as needed.\n        resp.status = falcon.HTTP_200\n```\n\nAs you can see, `Resource` is just a regular class. You can name the class anything you like. Falcon uses duck-typing, so you don’t need to inherit from any sort of special base class.\n\nThe image resource above defines a single method, `on_get()`. For any HTTP method you want your resource to support, simply add an `on_*()` method to the class, where `*` is any one of the standard HTTP methods, lowercased (e.g., `on_get()`, `on_put()`, `on_head()`, etc.).\n\nNote\n\nSupported HTTP methods are those specified in [RFC 7231](https://tools.ietf.org/html/rfc7231) and [RFC 5789](https://tools.ietf.org/html/rfc5789). This includes GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE, and PATCH.\n\nWe call these well-known methods “responders”. Each responder takes (at least) two params, one representing the HTTP request, and one representing the HTTP response to that request. By convention, these are called `req` and `resp`, respectively. Route templates and hooks can inject extra params, as we shall see later on.\n\nRight now, the image resource responds to GET requests with a simple `200 OK` and a JSON body. Falcon’s Internet media type defaults to `application/json` but you can set it to whatever you like. Noteworthy JSON alternatives include [YAML](http://yaml.org/) and [MessagePack](http://msgpack.org/).\n\nNext let’s wire up this resource and see it in action. Go back to `app.py` and modify it so that it looks something like this:\n\n``` python\nimport falcon\n\nfrom .images import Resource\n\n\napi = application = falcon.API()\n\nimages = Resource()\napi.add_route('/images', images)\n```\n\nNow, when a request comes in for `/images`, Falcon will call the responder on the images resource that corresponds to the requested HTTP method.\n\nLet’s try it. Restart Gunicorn (unless you’re using `--reload`), and send a GET request to the resource:\n\n``` bash\n$ http localhost:8000/images\n```\n\nYou should receive a `200 OK` response, including a JSON-encoded representation of the “images” resource.\n\nNote\n\n`add_route()` expects an instance of the resource class, not the class itself. The same instance is used for all requests. This strategy improves performance and reduces memory usage, but this also means that if you host your application with a threaded web server, resources and their dependencies must be thread-safe.\n\nSo far we have only implemented a responder for GET. Let’s see what happens when a different method is requested:\n\n``` bash\n$ http PUT localhost:8000/images\n```\n\nThis time you should get back `405 Method Not Allowed`, since the resource does not support the `PUT` method. Note the value of the Allow header:\n\n``` bash\nallow: GET, OPTIONS\n```\n\nThis is generated automatically by Falcon based on the set of methods implemented by the target resource. If a resource does not include its own OPTIONS responder, the framework provides a default implementation. Therefore, OPTIONS is always included in the list of allowable methods.\n\nNote\n\nIf you have a lot of experience with other Python web frameworks, you may be used to using decorators to set up your routes. Falcon’s particular approach provides the following benefits:\n\n- The URL structure of the application is centralized. This makes it easier to reason about and maintain the API over time.\n- The use of resource classes maps somewhat naturally to the REST architectural style, in which a URL is used to identify a resource only, not the action to perform on that resource.\n- Resource class methods provide a uniform interface that does not have to be reinvented (and maintained) from class to class and application to application.\n\nNext, just for fun, let’s modify our resource to use [MessagePack](http://msgpack.org/) instead of JSON. Start by installing the relevant package:\n\n``` bash\n$ pip install msgpack-python\n```\n\nThen, update the responder to use the new media type:\n\n``` python\nimport falcon\n\nimport msgpack\n\n\nclass Resource(object):\n\n    def on_get(self, req, resp):\n        doc = {\n            'images': [\n                {\n                    'href': '/images/1eaf6ef1-7f2d-4ecc-a8d5-6e8adba7cc0e.png'\n                }\n            ]\n        }\n\n        resp.data = msgpack.packb(doc, use_bin_type=True)\n        resp.content_type = falcon.MEDIA_MSGPACK\n        resp.status = falcon.HTTP_200\n```\n\nNote the use of `resp.data` in lieu of `resp.body`. If you assign a bytestring to the latter, Falcon will figure it out, but you can realize a small performance gain by assigning directly to `resp.data`.\n\nAlso note the use of `falcon.MEDIA_MSGPACK`. The `falcon` module provides a number of constants for common media types, including `falcon.MEDIA_JSON`, `falcon.MEDIA_MSGPACK`, `falcon.MEDIA_YAML`, `falcon.MEDIA_XML`, `falcon.MEDIA_HTML`, `falcon.MEDIA_JS`, `falcon.MEDIA_TEXT`, `falcon.MEDIA_JPEG`, `falcon.MEDIA_PNG`, and `falcon.MEDIA_GIF`.\n\nRestart Gunicorn (unless you’re using `--reload`), and then try sending a GET request to the revised resource:\n\n``` bash\n$ http localhost:8000/images\n```\n\n## Testing your application\n\nFully exercising your code is critical to creating a robust application. Let’s take a moment to write a test for what’s been implemented so far.\n\nFirst, create a `tests` directory with `__init__.py` and a test module (`test_app.py`) inside it. The project’s structure should now look like this:\n\n``` bash\nlook\n├── .venv\n├── look\n│   ├── __init__.py\n│   ├── app.py\n│   └── images.py\n└── tests\n    ├── __init__.py\n    └── test_app.py\n```\n\nFalcon supports [testing](../api/testing#testing) its [`API`](../api/api#falcon.API \"falcon.API\") object by simulating HTTP requests.\n\nTests can either be written using Python’s standard [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest \"(in Python v3.7)\") module, or with any of a number of third-party testing frameworks, such as [pytest](http://docs.pytest.org/en/latest/). For this tutorial we’ll use [pytest](http://docs.pytest.org/en/latest/) since it allows for more pythonic test code as compared to the JUnit-inspired [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest \"(in Python v3.7)\") module.\n\nLet’s start by installing the [pytest](http://docs.pytest.org/en/latest/) package:\n\n``` bash\n$ pip install pytest\n```\n\nNext, edit `test_app.py` to look like this:\n\n``` python\nimport falcon\nfrom falcon import testing\nimport msgpack\nimport pytest\n\nfrom look.app import api\n\n\n@pytest.fixture\ndef client():\n    return testing.TestClient(api)\n\n\n# pytest will inject the object returned by the \"client\" function\n# as an additional parameter.\ndef test_list_images(client):\n    doc = {\n        'images': [\n            {\n                'href': '/images/1eaf6ef1-7f2d-4ecc-a8d5-6e8adba7cc0e.png'\n            }\n        ]\n    }\n\n    response = client.simulate_get('/images')\n    result_doc = msgpack.unpackb(response.content, raw=False)\n\n    assert result_doc == doc\n    assert response.status == falcon.HTTP_OK\n```\n\nFrom the main project directory, exercise your new test by running pytest against the `tests` directory:\n\n``` bash\n$ pytest tests\n```\n\nIf pytest reports any errors, take a moment to fix them up before proceeding to the next section of the tutorial.\n\n## Request and Response Objects\n\nEach responder in a resource receives a `Request` object that can be used to read the headers, query parameters, and body of the request. You can use the standard `help()` function or IPython’s magic `?` function to list the attributes and methods of Falcon’s `Request` class:\n\n``` bash\nIn [1]: import falcon\n\nIn [2]: falcon.Request?\n```\n\nEach responder also receives a `Response` object that can be used for setting the status code, headers, and body of the response:\n\n``` bash\nIn [3]: falcon.Response?\n```\n\nThis will be useful when creating a POST endpoint in the application that can add new image resources to our collection. We’ll tackle this functionality next.\n\nWe’ll use TDD this time around, to demonstrate how to apply this particular testing strategy when developing a Falcon application. Via tests, we’ll first define precisely what we want the application to do, and then code until the tests tell us that we’re done.\n\nNote\n\nTo learn more about TDD, you may wish to check out one of the many books on the topic, such as [Test Driven Development with Python](http://www.obeythetestinggoat.com/pages/book.html). The examples in this particular book use the Django framework and even JavaScript, but the author covers a number of testing principles that are widely applicable.\n\nLet’s start by adding an additional import statement to `test_app.py`. We need to import two modules from `unittest.mock` if you are using Python 3, or from `mock` if you are using Python 2.\n\n``` python\n# Python 3\nfrom unittest.mock import mock_open, call\n\n# Python 2\nfrom mock import mock_open, call\n```\n\nFor Python 2, you will also need to install the `mock` package:\n\n``` bash\n$ pip install mock\n```\n\nNow add the following test:\n\n``` python\n# \"monkeypatch\" is a special built-in pytest fixture that can be\n# used to install mocks.\ndef test_posted_image_gets_saved(client, monkeypatch):\n    mock_file_open = mock_open()\n    monkeypatch.setattr('io.open', mock_file_open)\n\n    fake_uuid = '123e4567-e89b-12d3-a456-426655440000'\n    monkeypatch.setattr('uuid.uuid4', lambda: fake_uuid)\n\n    # When the service receives an image through POST...\n    fake_image_bytes = b'fake-image-bytes'\n    response = client.simulate_post(\n        '/images',\n        body=fake_image_bytes,\n        headers={'content-type': 'image/png'}\n    )\n\n    # ...it must return a 201 code, save the file, and return the\n    # image's resource location.\n    assert response.status == falcon.HTTP_CREATED\n    assert call().write(fake_image_bytes) in mock_file_open.mock_calls\n    assert response.headers['location'] == '/images/{}.png'.format(fake_uuid)\n```\n\nAs you can see, this test relies heavily on mocking, making it somewhat fragile in the face of implementation changes. We’ll revisit this later. For now, run the tests again and watch to make sure they fail. A key step in the TDD workflow is verifying that your tests **do not** pass before moving on to the implementation:\n\n``` bash\n$ pytest tests\n```\n\nTo make the new test pass, we need to add a new method for handling POSTs. Open `images.py` and add a POST responder to the `Resource` class as follows:\n\n``` python\nimport io\nimport os\nimport uuid\nimport mimetypes\n\nimport falcon\nimport msgpack\n\n\nclass Resource(object):\n\n    _CHUNK_SIZE_BYTES = 4096\n\n    # The resource object must now be initialized with a path used during POST\n    def __init__(self, storage_path):\n        self._storage_path = storage_path\n\n    # This is the method we implemented before\n    def on_get(self, req, resp):\n        doc = {\n            'images': [\n                {\n                    'href': '/images/1eaf6ef1-7f2d-4ecc-a8d5-6e8adba7cc0e.png'\n                }\n            ]\n        }\n\n        resp.data = msgpack.packb(doc, use_bin_type=True)\n        resp.content_type = falcon.MEDIA_MSGPACK\n        resp.status = falcon.HTTP_200\n\n    def on_post(self, req, resp):\n        ext = mimetypes.guess_extension(req.content_type)\n        name = '{uuid}{ext}'.format(uuid=uuid.uuid4(), ext=ext)\n        image_path = os.path.join(self._storage_path, name)\n\n        with io.open(image_path, 'wb') as image_file:\n            while True:\n                chunk = req.stream.read(self._CHUNK_SIZE_BYTES)\n                if not chunk:\n                    break\n\n                image_file.write(chunk)\n\n        resp.status = falcon.HTTP_201\n        resp.location = '/images/' + name\n```\n\nAs you can see, we generate a unique name for the image, and then write it out by reading from `req.stream`. It’s called `stream` instead of `body` to emphasize the fact that you are really reading from an input stream; by default Falcon does not spool or decode request data, instead giving you direct access to the incoming binary stream provided by the WSGI server.\n\nNote the use of `falcon.HTTP_201` for setting the response status to “201 Created”. We could have also used the `falcon.HTTP_CREATED` alias. For a full list of predefined status strings, simply call `help()` on `falcon.status_codes`:\n\n``` bash\nIn [4]: help(falcon.status_codes)\n```\n\nThe last line in the `on_post()` responder sets the Location header for the newly created resource. (We will create a route for that path in just a minute.) The [`Request`](../api/request_and_response#falcon.Request \"falcon.Request\") and [`Response`](../api/request_and_response#falcon.Response \"falcon.Response\") classes contain convenient attributes for reading and setting common headers, but you can always access any header by name with the `req.get_header()` and `resp.set_header()` methods.\n\nTake a moment to run pytest again to check your progress:\n\n``` bash\n$ pytest tests\n```\n\nYou should see a `TypeError` as a consequence of adding the `storage_path` parameter to `Resource.__init__()`.\n\nTo fix this, simply edit `app.py` and pass in a path to the initializer. For now, just use the working directory from which you started the service:\n\n``` python\nimages = Resource(storage_path='.')\n```\n\nTry running the tests again. This time, they should pass with flying colors!\n\n``` bash\n$ pytest tests\n```\n\nFinally, restart Gunicorn and then try sending a POST request to the resource from the command line (substituting `test.png` for a path to any PNG you like.)\n\n``` bash\n$ http POST localhost:8000/images Content-Type:image/png < test.png\n```\n\nNow, if you check your storage directory, it should contain a copy of the image you just POSTed.\n\nUpward and onward!\n\n## Refactoring for testability\n\nEarlier we pointed out that our POST test relied heavily on mocking, relying on assumptions that may or may not hold true as the code evolves. To mitigate this problem, we’ll not only have to refactor the tests, but also the application itself.\n\nWe’ll start by factoring out the business logic from the resource’s POST responder in `images.py` so that it can be tested independently. In this case, the resource’s “business logic” is simply the image-saving operation:\n\n``` python\nimport io\nimport mimetypes\nimport os\nimport uuid\n\nimport falcon\nimport msgpack\n\n\nclass Resource(object):\n\n    def __init__(self, image_store):\n        self._image_store = image_store\n\n    def on_get(self, req, resp):\n        doc = {\n            'images': [\n                {\n                    'href': '/images/1eaf6ef1-7f2d-4ecc-a8d5-6e8adba7cc0e.png'\n                }\n            ]\n        }\n\n        resp.data = msgpack.packb(doc, use_bin_type=True)\n        resp.content_type = falcon.MEDIA_MSGPACK\n        resp.status = falcon.HTTP_200\n\n    def on_post(self, req, resp):\n        name = self._image_store.save(req.stream, req.content_type)\n        resp.status = falcon.HTTP_201\n        resp.location = '/images/' + name\n\n\nclass ImageStore(object):\n\n    _CHUNK_SIZE_BYTES = 4096\n\n    # Note the use of dependency injection for standard library\n    # methods. We'll use these later to avoid monkey-patching.\n    def __init__(self, storage_path, uuidgen=uuid.uuid4, fopen=io.open):\n        self._storage_path = storage_path\n        self._uuidgen = uuidgen\n        self._fopen = fopen\n\n    def save(self, image_stream, image_content_type):\n        ext = mimetypes.guess_extension(image_content_type)\n        name = '{uuid}{ext}'.format(uuid=self._uuidgen(), ext=ext)\n        image_path = os.path.join(self._storage_path, name)\n\n        with self._fopen(image_path, 'wb') as image_file:\n            while True:\n                chunk = image_stream.read(self._CHUNK_SIZE_BYTES)\n                if not chunk:\n                    break\n\n                image_file.write(chunk)\n\n        return name\n```\n\nLet’s check to see if we broke anything with the changes above:\n\n``` bash\n$ pytest tests\n```\n\nHmm, it looks like we forgot to update `app.py`. Let’s do that now:\n\n``` python\nimport falcon\n\nfrom .images import ImageStore, Resource\n\n\napi = application = falcon.API()\n\nimage_store = ImageStore('.')\nimages = Resource(image_store)\napi.add_route('/images', images)\n```\n\nLet’s try again:\n\n``` bash\n$ pytest tests\n```\n\nNow you should see a failed test assertion regarding `mock_file_open`. To fix this, we need to switch our strategy from monkey-patching to dependency injection. Return to `app.py` and modify it to look similar to the following:\n\n``` python\nimport falcon\n\nfrom .images import ImageStore, Resource\n\n\ndef create_app(image_store):\n    image_resource = Resource(image_store)\n    api = falcon.API()\n    api.add_route('/images', image_resource)\n    return api\n\n\ndef get_app():\n    image_store = ImageStore('.')\n    return create_app(image_store)\n```\n\nAs you can see, the bulk of the setup logic has been moved to `create_app()`, which can be used to obtain an API object either for testing or for hosting in production. `get_app()` takes care of instantiating additional resources and configuring the application for hosting.\n\nThe command to run the application is now:\n\n``` bash\n$ gunicorn --reload 'look.app:get_app()'\n```\n\nFinally, we need to update the test code. Modify `test_app.py` to look similar to this:\n\n``` python\nimport io\n\n# Python 3\nfrom unittest.mock import call, MagicMock, mock_open\n\n# Python 2\n# from mock import call, MagicMock, mock_open\n\nimport falcon\nfrom falcon import testing\nimport msgpack\nimport pytest\n\nimport look.app\nimport look.images\n\n\n@pytest.fixture\ndef mock_store():\n    return MagicMock()\n\n\n@pytest.fixture\ndef client(mock_store):\n    api = look.app.create_app(mock_store)\n    return testing.TestClient(api)\n\n\ndef test_list_images(client):\n    doc = {\n        'images': [\n            {\n                'href': '/images/1eaf6ef1-7f2d-4ecc-a8d5-6e8adba7cc0e.png'\n            }\n        ]\n    }\n\n    response = client.simulate_get('/images')\n    result_doc = msgpack.unpackb(response.content, raw=False)\n\n    assert result_doc == doc\n    assert response.status == falcon.HTTP_OK\n\n\n# With clever composition of fixtures, we can observe what happens with\n# the mock injected into the image resource.\ndef test_post_image(client, mock_store):\n    file_name = 'fake-image-name.xyz'\n\n    # We need to know what ImageStore method will be used\n    mock_store.save.return_value = file_name\n    image_content_type = 'image/xyz'\n\n    response = client.simulate_post(\n        '/images',\n        body=b'some-fake-bytes',\n        headers={'content-type': image_content_type}\n    )\n\n    assert response.status == falcon.HTTP_CREATED\n    assert response.headers['location'] == '/images/{}'.format(file_name)\n    saver_call = mock_store.save.call_args\n\n    # saver_call is a unittest.mock.call tuple. It's first element is a\n    # tuple of positional arguments supplied when calling the mock.\n    assert isinstance(saver_call[0][0], falcon.request_helpers.BoundedStream)\n    assert saver_call[0][1] == image_content_type\n```\n\nAs you can see, we’ve redone the POST. While there are fewer mocks, the assertions have gotten more elaborate to properly check interactions at the interface boundaries.\n\nLet’s check our progress:\n\n``` bash\n$ pytest tests\n```\n\nAll green! But since we used a mock, we’re no longer covering the actual saving of the image. Let’s add a test for that:\n\n``` python\ndef test_saving_image(monkeypatch):\n    # This still has some mocks, but they are more localized and do not\n    # have to be monkey-patched into standard library modules (always a\n    # risky business).\n    mock_file_open = mock_open()\n\n    fake_uuid = '123e4567-e89b-12d3-a456-426655440000'\n    def mock_uuidgen():\n        return fake_uuid\n\n    fake_image_bytes = b'fake-image-bytes'\n    fake_request_stream = io.BytesIO(fake_image_bytes)\n    storage_path = 'fake-storage-path'\n    store = look.images.ImageStore(\n        storage_path,\n        uuidgen=mock_uuidgen,\n        fopen=mock_file_open\n    )\n\n    assert store.save(fake_request_stream, 'image/png') == fake_uuid + '.png'\n    assert call().write(fake_image_bytes) in mock_file_open.mock_calls\n```\n\nNow give it a try:\n\n``` bash\n$ pytest tests -k test_saving_image\n```\n\nLike the former test, this one still uses mocks. But the structure of the code has been improved through the techniques of componentization and dependency inversion, making the application more flexible and testable.\n\nTip\n\nChecking code [coverage](https://coverage.readthedocs.io/) would have helped us detect the missing test above; it’s always a good idea to include coverage testing in your workflow to ensure you don’t have any bugs hiding off somewhere in an unexercised code path.\n\n## Functional tests\n\nFunctional tests define the application’s behavior from the outside. When using TDD, this can be a more natural place to start as opposed to lower-level unit testing, since it is difficult to anticipate what internal interfaces and components are needed in advance of defining the application’s user-facing functionality.\n\nIn the case of the refactoring work from the last section, we could have inadvertently introduced a functional bug into the application that our unit tests would not have caught. This can happen when a bug is a result of an unexpected interaction between multiple units, between the application and the web server, or between the application and any external services it depends on.\n\nWith test helpers such as `simulate_get()` and `simulate_post()`, we can create tests that span multiple units. But we can also go one step further and run the application as a normal, separate process (e.g. with Gunicorn). We can then write tests that interact with the running process through HTTP, behaving like a normal client.\n\nLet’s see this in action. Create a new test module, `tests/test_integration.py` with the following contents:\n\n``` python\nimport os\n\nimport requests\n\n\ndef test_posted_image_gets_saved():\n    file_save_prefix = '/tmp/'\n    location_prefix = '/images/'\n    fake_image_bytes = b'fake-image-bytes'\n\n    response = requests.post(\n        'http://localhost:8000/images',\n        data=fake_image_bytes,\n        headers={'content-type': 'image/png'}\n    )\n\n    assert response.status_code == 201\n    location = response.headers['location']\n    assert location.startswith(location_prefix)\n    image_name = location.replace(location_prefix, '')\n\n    file_path = file_save_prefix + image_name\n    with open(file_path, 'rb') as image_file:\n        assert image_file.read() == fake_image_bytes\n\n    os.remove(file_path)\n```\n\nNext, install the `requests` package (as required by the new test) and make sure Gunicorn is up and running:\n\n``` bash\n$ pip install requests\n$ gunicorn 'look.app:get_app()'\n```\n\nThen, in another terminal, try running the new test:\n\n``` bash\n$ pytest tests -k test_posted_image_gets_saved\n```\n\nThe test will fail since it expects the image file to reside under `/tmp`. To fix this, modify `app.py` to add the ability to configure the image storage directory with an environment variable:\n\n``` python\nimport os\n\nimport falcon\n\nfrom .images import ImageStore, Resource\n\n\ndef create_app(image_store):\n    image_resource = Resource(image_store)\n    api = falcon.API()\n    api.add_route('/images', image_resource)\n    return api\n\n\ndef get_app():\n    storage_path = os.environ.get('LOOK_STORAGE_PATH', '.')\n    image_store = ImageStore(storage_path)\n    return create_app(image_store)\n```\n\nNow you can re-run the app against the desired storage directory:\n\n``` bash\n$ LOOK_STORAGE_PATH=/tmp gunicorn --reload 'look.app:get_app()'\n```\n\nYou should now be able to re-run the test and see it succeed:\n\n``` bash\n$ pytest tests -k test_posted_image_gets_saved\n```\n\nNote\n\nThe above process of starting, testing, stopping, and cleaning up after each test run can (and really should be) automated. Depending on your needs, you can develop your own automation fixtures, or use a library such as [mountepy](https://github.com/butla/mountepy).\n\nMany developers choose to write tests like the above to sanity-check their application’s primary functionality, while leaving the bulk of testing to simulated requests and unit tests. These latter types of tests generally execute much faster and facilitate more fine-grained test assertions as compared to higher-level functional and system tests. That being said, testing strategies vary widely and you should choose the one that best suits your needs.\n\nAt this point, you should have a good grip on how to apply common testing strategies to your Falcon application. For the sake of brevity we’ll omit further testing instructions from the following sections, focusing instead on showcasing more of Falcon’s features.\n\n## Serving Images\n\nNow that we have a way of getting images into the service, we of course need a way to get them back out. What we want to do is return an image when it is requested, using the path that came back in the Location header.\n\nTry executing the following:\n\n``` bash\n$ http localhost:8000/images/db79e518-c8d3-4a87-93fe-38b620f9d410.png\n```\n\nIn response, you should get a `404 Not Found`. This is the default response given by Falcon when it can not find a resource that matches the requested URL path.\n\nLet’s address this by creating a separate class to represent a single image resource. We will then add an `on_get()` method to respond to the path above.\n\nGo ahead and edit your `images.py` file to look something like this:\n\n``` python\nimport io\nimport os\nimport re\nimport uuid\nimport mimetypes\n\nimport falcon\nimport msgpack\n\n\nclass Collection(object):\n\n    def __init__(self, image_store):\n        self._image_store = image_store\n\n    def on_get(self, req, resp):\n        # TODO: Modify this to return a list of href's based on\n        # what images are actually available.\n        doc = {\n            'images': [\n                {\n                    'href': '/images/1eaf6ef1-7f2d-4ecc-a8d5-6e8adba7cc0e.png'\n                }\n            ]\n        }\n\n        resp.data = msgpack.packb(doc, use_bin_type=True)\n        resp.content_type = falcon.MEDIA_MSGPACK\n        resp.status = falcon.HTTP_200\n\n    def on_post(self, req, resp):\n        name = self._image_store.save(req.stream, req.content_type)\n        resp.status = falcon.HTTP_201\n        resp.location = '/images/' + name\n\n\nclass Item(object):\n\n    def __init__(self, image_store):\n        self._image_store = image_store\n\n    def on_get(self, req, resp, name):\n        resp.content_type = mimetypes.guess_type(name)[0]\n        resp.stream, resp.content_length = self._image_store.open(name)\n\n\nclass ImageStore(object):\n\n    _CHUNK_SIZE_BYTES = 4096\n    _IMAGE_NAME_PATTERN = re.compile(\n        '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\\.[a-z]{2,4}$'\n    )\n\n    def __init__(self, storage_path, uuidgen=uuid.uuid4, fopen=io.open):\n        self._storage_path = storage_path\n        self._uuidgen = uuidgen\n        self._fopen = fopen\n\n    def save(self, image_stream, image_content_type):\n        ext = mimetypes.guess_extension(image_content_type)\n        name = '{uuid}{ext}'.format(uuid=self._uuidgen(), ext=ext)\n        image_path = os.path.join(self._storage_path, name)\n\n        with self._fopen(image_path, 'wb') as image_file:\n            while True:\n                chunk = image_stream.read(self._CHUNK_SIZE_BYTES)\n                if not chunk:\n                    break\n\n                image_file.write(chunk)\n\n        return name\n\n    def open(self, name):\n        # Always validate untrusted input!\n        if not self._IMAGE_NAME_PATTERN.match(name):\n            raise IOError('File not found')\n\n        image_path = os.path.join(self._storage_path, name)\n        stream = self._fopen(image_path, 'rb')\n        content_length = os.path.getsize(image_path)\n\n        return stream, content_length\n```\n\nAs you can see, we renamed `Resource` to `Collection` and added a new `Item` class to represent a single image resource. Alternatively, these two classes could be consolidated into one by using suffixed responders. (See also: [`add_route()`](../api/api#falcon.API.add_route \"falcon.API.add_route\"))\n\nAlso, note the `name` parameter for the `on_get()` responder. Any URI parameters that you specify in your routes will be turned into corresponding kwargs and passed into the target responder as such. We’ll see how to specify URI parameters in a moment.\n\nInside the `on_get()` responder, we set the Content-Type header based on the filename extension, and then stream out the image directly from an open file handle. Note the use of `resp.content_length`. Whenever using `resp.stream` instead of `resp.body` or `resp.data`, you typically also specify the expected length of the stream using the Content-Length header, so that the web client knows how much data to read from the response.\n\nNote\n\nIf you do not know the size of the stream in advance, you can work around that by using chunked encoding, but that’s beyond the scope of this tutorial.\n\nIf `resp.status` is not set explicitly, it defaults to `200 OK`, which is exactly what we want `on_get()` to do.\n\nNow let’s wire everything up and give it a try. Edit `app.py` to look similar to the following:\n\n``` python\nimport os\n\nimport falcon\n\nimport images\n\n\ndef create_app(image_store):\n    api = falcon.API()\n    api.add_route('/images', images.Collection(image_store))\n    api.add_route('/images/{name}', images.Item(image_store))\n    return api\n\n\ndef get_app():\n    storage_path = os.environ.get('LOOK_STORAGE_PATH', '.')\n    image_store = images.ImageStore(storage_path)\n    return create_app(image_store)\n```\n\nAs you can see, we specified a new route, `/images/{name}`. This causes Falcon to expect all associated responders to accept a `name` argument.\n\nNote\n\nFalcon also supports more complex parameterized path segments that contain multiple values. For example, a version control API might use the following route template for diffing two code branches:\n\n``` python\n/repos/{org}/{repo}/compare/{usr0}:{branch0}...{usr1}:{branch1}\n```\n\nNow re-run your app and try to POST another picture:\n\n``` bash\n$ http POST localhost:8000/images Content-Type:image/png < test.png\n```\n\nMake a note of the path returned in the Location header, and use it to GET the image:\n\n``` bash\n$ http localhost:8000/images/dddff30e-d2a6-4b57-be6a-b985ee67fa87.png\n```\n\nHTTPie won’t display the image, but you can see that the response headers were set correctly. Just for fun, go ahead and paste the above URI into your browser. The image should display correctly.\n\n## Introducing Hooks\n\nAt this point you should have a pretty good understanding of the basic parts that make up a Falcon-based API. Before we finish up, let’s just take a few minutes to clean up the code and add some error handling.\n\nFirst, let’s check the incoming media type when something is posted to make sure it is a common image type. We’ll implement this with a `before` hook.\n\nStart by defining a list of media types the service will accept. Place this constant near the top, just after the import statements in `images.py`:\n\n``` python\nALLOWED_IMAGE_TYPES = (\n    'image/gif',\n    'image/jpeg',\n    'image/png',\n)\n```\n\nThe idea here is to only accept GIF, JPEG, and PNG images. You can add others to the list if you like.\n\nNext, let’s create a hook that will run before each request to post a message. Add this method below the definition of `ALLOWED_IMAGE_TYPES`:\n\n``` python\ndef validate_image_type(req, resp, resource, params):\n    if req.content_type not in ALLOWED_IMAGE_TYPES:\n        msg = 'Image type not allowed. Must be PNG, JPEG, or GIF'\n        raise falcon.HTTPBadRequest('Bad request', msg)\n```\n\nAnd then attach the hook to the `on_post()` responder:\n\n``` python\n@falcon.before(validate_image_type)\ndef on_post(self, req, resp):\n    # ...\n```\n\nNow, before every call to that responder, Falcon will first invoke `validate_image_type()`. There isn’t anything special about this function, other than it must accept four arguments. Every hook takes, as its first two arguments, a reference to the same `req` and `resp` objects that are passed into responders. The `resource` argument is a Resource instance associated with the request. The fourth argument, named `params` by convention, is a reference to the kwarg dictionary Falcon creates for each request. `params` will contain the route’s URI template params and their values, if any.\n\nAs you can see in the example above, you can use `req` to get information about the incoming request. However, you can also use `resp` to play with the HTTP response as needed, and you can even use hooks to inject extra kwargs:\n\n``` python\ndef extract_project_id(req, resp, resource, params):\n    \"\"\"Adds `project_id` to the list of params for all responders.\n\n    Meant to be used as a `before` hook.\n    \"\"\"\n    params['project_id'] = req.get_header('X-PROJECT-ID')\n```\n\nNow, you might imagine that such a hook should apply to all responders for a resource. In fact, hooks can be applied to an entire resource by simply decorating the class:\n\n``` python\n@falcon.before(extract_project_id)\nclass Message(object):\n\n    # ...\n```\n\nSimilar logic can be applied globally with middleware. (See also: [falcon.middleware](../api/middleware#middleware))\n\nNow that you’ve added a hook to validate the media type, you can see it in action by attempting to POST something nefarious:\n\n``` bash\n$ http POST localhost:8000/images Content-Type:image/jpx\n```\n\nYou should get back a `400 Bad Request` status and a nicely structured error body.\n\nTip\n\nWhen something goes wrong, you usually want to give your users some info to help them resolve the issue. The exception to this rule is when an error occurs because the user is requested something they are not authorized to access. In that case, you may wish to simply return `404 Not Found` with an empty body, in case a malicious user is fishing for information that will help them crack your app.\n\nCheck out the [hooks reference](../api/hooks#hooks) to learn more.\n\n## Error Handling\n\nGenerally speaking, Falcon assumes that resource responders (`on_get()`, `on_post()`, etc.) will, for the most part, do the right thing. In other words, Falcon doesn’t try very hard to protect responder code from itself.\n\nThis approach reduces the number of (often) extraneous checks that Falcon would otherwise have to perform, making the framework more efficient. With that in mind, writing a high-quality API based on Falcon requires that:\n\n1.  Resource responders set response variables to sane values.\n2.  Untrusted input (i.e., input from an external client or service) is validated.\n3.  Your code is well-tested, with high code coverage.\n4.  Errors are anticipated, detected, logged, and handled appropriately within each responder or by global error handling hooks.\n\nWhen it comes to error handling, you can always directly set the error status, appropriate response headers, and error body using the `resp` object. However, Falcon tries to make things a little easier by providing a [set of error classes](../api/errors#predefined-errors) you can raise when something goes wrong. Falcon will convert any instance or subclass of [`falcon.HTTPError`](../api/errors#falcon.HTTPError \"falcon.HTTPError\") raised by a responder, hook, or middleware component into an appropriate HTTP response.\n\nYou may raise an instance of [`falcon.HTTPError`](../api/errors#falcon.HTTPError \"falcon.HTTPError\") directly, or use any one of a number of [predefined errors](../api/errors#predefined-errors) that are designed to set the response headers and body appropriately for each error type.\n\nTip\n\nFalcon will re-raise errors that do not inherit from [`falcon.HTTPError`](../api/errors#falcon.HTTPError \"falcon.HTTPError\") unless you have registered a custom error handler for that type.\n\nError handlers may be registered for any type, including [`HTTPError`](../api/errors#falcon.HTTPError \"falcon.HTTPError\"). This feature provides a central location for logging and otherwise handling exceptions raised by responders, hooks, and middleware components.\n\nSee also: [`add_error_handler()`](../api/api#falcon.API.add_error_handler \"falcon.API.add_error_handler\").\n\nLet’s see a quick example of how this works. Try requesting an invalid image name from your application:\n\n``` bash\n$ http localhost:8000/images/voltron.png\n```\n\nAs you can see, the result isn’t exactly graceful. To fix this, we’ll need to add some exception handling. Modify your `Item` class as follows:\n\n``` python\nclass Item(object):\n\n    def __init__(self, image_store):\n        self._image_store = image_store\n\n    def on_get(self, req, resp, name):\n        resp.content_type = mimetypes.guess_type(name)[0]\n\n        try:\n            resp.stream, resp.content_length = self._image_store.open(name)\n        except IOError:\n            # Normally you would also log the error.\n            raise falcon.HTTPNotFound()\n```\n\nNow let’s try that request again:\n\n``` bash\n$ http localhost:8000/images/voltron.png\n```\n\nAdditional information about error handling is available in the [error handling reference](../api/errors#errors).\n\n## What Now?\n\nOur friendly community is available to answer your questions and help you work through sticky problems. See also: [Getting Help](https://falcon.readthedocs.io/en/2.0.0/community/help.html#help).\n\nAs mentioned previously, Falcon’s docstrings are quite extensive, and so you can learn a lot just by poking around Falcon’s modules from a Python REPL, such as [IPython](http://ipython.org/) or [bpython](http://bpython-interpreter.org/).\n\nAlso, don’t be shy about pulling up Falcon’s source code on GitHub or in your favorite text editor. The team has tried to make the code as straightforward and readable as possible; where other documentation may fall short, the code basically can’t be wrong.\n\nA number of Falcon add-ons, templates, and complementary packages are available for use in your projects. We’ve listed several of these on the [Falcon wiki](https://github.com/falconry/falcon/wiki) as a starting point, but you may also wish to search PyPI for additional resources.\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/user/tutorial.html](https://falcon.readthedocs.io/en/2.0.0/user/tutorial.html)"
- name: Utilities
  id: api/util
  summary: URI utilities
  description: "# Utilities\n\n## URI Functions\n\nURI utilities.\n\nThis module provides utility functions to parse, encode, decode, and otherwise manipulate a URI. These functions are not available directly in the `falcon` module, and so must be explicitly imported:\n\n``` python\nfrom falcon import uri\n\nname, port = uri.parse_host('example.org:8080')\n```\n\n`falcon.uri.encode(uri)`  \nEncodes a full or relative URI according to RFC 3986.\n\nRFC 3986 defines a set of “unreserved” characters as well as a set of “reserved” characters used as delimiters. This function escapes all other “disallowed” characters by percent-encoding them.\n\nNote\n\nThis utility is faster in the average case than the similar `quote` function found in `urlib`. It also strives to be easier to use by assuming a sensible default of allowed characters.\n\n|              |                                                                                                                                                                                                                                                                                    |\n|--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **uri** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – URI or part of a URI to encode. If this is a wide string (i.e., `compat.text_type`), it will be encoded to a UTF-8 byte array and any multibyte sequences will be percent-encoded as-is. |\n| Returns:     | An escaped version of `uri`, where all disallowed characters have been percent-encoded.                                                                                                                                                                                            |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")                                                                                                                                                                                                      |\n\n`falcon.uri.encode_value(uri)`  \nEncodes a value string according to RFC 3986.\n\nDisallowed characters are percent-encoded in a way that models `urllib.parse.quote(safe=\"~\")`. However, the Falcon function is faster in the average case than the similar `quote` function found in urlib. It also strives to be easier to use by assuming a sensible default of allowed characters.\n\nAll reserved characters are lumped together into a single set of “delimiters”, and everything in that set is escaped.\n\nNote\n\nRFC 3986 defines a set of “unreserved” characters as well as a set of “reserved” characters used as delimiters.\n\n|              |                                                                                                                                                                                                                                                                                                                                                                                                             |\n|--------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **uri** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – URI fragment to encode. It is assumed not to cross delimiter boundaries, and so any reserved URI delimiter characters included in it will be escaped. If `value` is a wide string (i.e., `compat.text_type`), it will be encoded to a UTF-8 byte array and any multibyte sequences will be percent-encoded as-is. |\n| Returns:     | An escaped version of `uri`, where all disallowed characters have been percent-encoded.                                                                                                                                                                                                                                                                                                                     |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")                                                                                                                                                                                                                                                                                                                               |\n\n&nbsp;\n\n`falcon.uri.decode(encoded_uri, unquote_plus=True)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/uri.html#decode)  \nDecodes percent-encoded characters in a URI or query string.\n\nThis function models the behavior of `urllib.parse.unquote_plus`, albeit in a faster, more straightforward manner.\n\n|                    |                                                                                                                                                                                                                                                                                                                                             |\n|--------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:        | **encoded_uri** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – An encoded URI (full or partial).                                                                                                                                                                                                         |\n| Keyword Arguments: |                                                                                                                                                                                                                                                                                                                                             |\n|                    | **unquote_plus** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\")) – Set to `False` to retain any plus (‘+’) characters in the given string, rather than converting them to spaces (default `True`). Typically you should set this to `False` when decoding any part of a URI other than the query string. |\n| Returns:           | A decoded URL. If the URL contains escaped non-ASCII characters, UTF-8 is assumed per RFC 3986.                                                                                                                                                                                                                                             |\n| Return type:       | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")                                                                                                                                                                                                                                                               |\n\n&nbsp;\n\n`falcon.uri.parse_host(host, default_port=None)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/uri.html#parse_host)  \nParse a canonical ‘host:port’ string into parts.\n\nParse a host string (which may or may not contain a port) into parts, taking into account that the string may contain either a domain name or an IP address. In the latter case, both IPv4 and IPv6 addresses are supported.\n\n|                    |                                                                                                                                                                                       |\n|--------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:        | **host** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – Host string to parse, optionally containing a port number.                                 |\n| Keyword Arguments: |                                                                                                                                                                                       |\n|                    | **default_port** ([int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.7)\")) – Port number to return when the host string does not contain one (default `None`). |\n| Returns:           | A parsed (*host*, *port*) tuple from the given host string, with the port converted to an `int`. If the host string does not specify a port, `default_port` is used instead.          |\n| Return type:       | [tuple](https://docs.python.org/3/library/stdtypes.html#tuple \"(in Python v3.7)\")                                                                                                     |\n\n&nbsp;\n\n`falcon.uri.parse_query_string(query_string, keep_blank=False, csv=True)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/uri.html#parse_query_string)  \nParse a query string into a dict.\n\nQuery string parameters are assumed to use standard form-encoding. Only parameters with values are returned. For example, given ‘foo=bar&flag’, this function would ignore ‘flag’ unless the `keep_blank_qs_values` option is set.\n\nNote\n\nIn addition to the standard HTML form-based method for specifying lists by repeating a given param multiple times, Falcon supports a more compact form in which the param may be given a single time but set to a `list` of comma-separated elements (e.g., ‘foo=a,b,c’).\n\nWhen using this format, all commas uri-encoded will not be treated by Falcon as a delimiter. If the client wants to send a value as a list, it must not encode the commas with the values.\n\nThe two different ways of specifying lists may not be mixed in a single query string for the same parameter.\n\n[TABLE]\n\n&nbsp;\n\n`falcon.uri.unquote_string(quoted)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/uri.html#unquote_string)  \nUnquote an RFC 7320 “quoted-string”.\n\n|              |                                                                                                                           |\n|--------------|---------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **quoted** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – Original quoted string       |\n| Returns:     | unquoted string                                                                                                           |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")                                             |\n| Raises:      | [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError \"(in Python v3.7)\") – `quoted` was not a `str`. |\n\n## Miscellaneous\n\n`falcon.deprecated(instructions)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#deprecated)  \nFlags a method as deprecated.\n\nThis function returns a decorator which can be used to mark deprecated functions. Applying this decorator will result in a warning being emitted when the function is used.\n\n|             |                                                                                                                                                                                 |\n|-------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters: | **instructions** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – Specific guidance for the developer, e.g.: ‘Please migrate to add_proxy(…)’‘ |\n\n&nbsp;\n\n`falcon.http_now()` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#http_now)  \nReturns the current UTC time as an IMF-fixdate.\n\n|              |                                                                                |\n|--------------|--------------------------------------------------------------------------------|\n| Returns:     | The current UTC time as an IMF-fixdate, e.g., ‘Tue, 15 Nov 1994 12:45:26 GMT’. |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")  |\n\n&nbsp;\n\n`falcon.dt_to_http(dt)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#dt_to_http)  \nConverts a `datetime` instance to an HTTP date string.\n\n|              |                                                                               |\n|--------------|-------------------------------------------------------------------------------|\n| Parameters:  | **dt** (*datetime*) – A `datetime` instance to convert, assumed to be UTC.    |\n| Returns:     | An RFC 1123 date string, e.g.: “Tue, 15 Nov 1994 12:45:26 GMT”.               |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n&nbsp;\n\n`falcon.http_date_to_dt(http_date, obs_date=False)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#http_date_to_dt)  \nConverts an HTTP date string to a datetime instance.\n\n|                    |                                                                                                                                                                                                             |\n|--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:        | **http_date** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – An RFC 1123 date string, e.g.: “Tue, 15 Nov 1994 12:45:26 GMT”.                                             |\n| Keyword Arguments: |                                                                                                                                                                                                             |\n|                    | **obs_date** ([bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\")) – Support obs-date formats according to RFC 7231, e.g.: “Sunday, 06-Nov-94 08:49:37 GMT” (default `False`). |\n| Returns:           | A UTC datetime instance corresponding to the given HTTP date.                                                                                                                                               |\n| Return type:       | datetime                                                                                                                                                                                                    |\n| Raises:            | [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.7)\") – http_date doesn’t match any of the available time formats                                                 |\n\n&nbsp;\n\n`falcon.to_query_str(params, comma_delimited_lists=True, prefix=True)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#to_query_str)  \nConverts a dictionary of parameters to a query string.\n\n[TABLE]\n\n&nbsp;\n\n`falcon.get_http_status(status_code, default_reason='Unknown')` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#get_http_status)  \nGets both the http status code and description from just a code\n\n[TABLE]\n\n&nbsp;\n\n`falcon.get_bound_method(obj, method_name)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/misc.html#get_bound_method)  \nGet a bound method of the given object by name.\n\n[TABLE]\n\n&nbsp;\n\n`class falcon.TimezoneGMT` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/time.html#TimezoneGMT)  \nGMT timezone class implementing the [`datetime.tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo \"(in Python v3.7)\") interface.\n\n`dst(dt)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/time.html#TimezoneGMT.dst)  \nReturn the daylight saving time (DST) adjustment.\n\n|              |                                                                                                                              |\n|--------------|------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **dt** ([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.7)\")) – Ignored |\n| Returns:     | DST adjustment for GMT, which is always 0.                                                                                   |\n| Return type: | [datetime.timedelta](https://docs.python.org/3/library/datetime.html#datetime.timedelta \"(in Python v3.7)\")                  |\n\n`tzname(dt)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/time.html#TimezoneGMT.tzname)  \nGet the name of this timezone.\n\n|              |                                                                                                                              |\n|--------------|------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **dt** ([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.7)\")) – Ignored |\n| Returns:     | “GMT”                                                                                                                        |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")                                                |\n\n`utcoffset(dt)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/time.html#TimezoneGMT.utcoffset)  \nGet the offset from UTC.\n\n|              |                                                                                                                              |\n|--------------|------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **dt** ([datetime.datetime](https://docs.python.org/3/library/datetime.html#datetime.datetime \"(in Python v3.7)\")) – Ignored |\n| Returns:     | GMT offset, which is equivalent to UTC and so is aways 0.                                                                    |\n| Return type: | [datetime.timedelta](https://docs.python.org/3/library/datetime.html#datetime.timedelta \"(in Python v3.7)\")                  |\n\n&nbsp;\n\n`class falcon.Context` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#Context)  \nConvenience class to hold contextual information in its attributes.\n\nThis class is used as the default [`Request`](request_and_response#falcon.Request \"falcon.Request\") and [`Response`](request_and_response#falcon.Response \"falcon.Response\") context type (see [`Request.context_type`](request_and_response#falcon.Request.context_type \"falcon.Request.context_type\") and [`Response.context_type`](request_and_response#falcon.Response.context_type \"falcon.Response.context_type\"), respectively).\n\nIn Falcon versions prior to 2.0, the default context type was `dict`. To ease the migration to attribute-based context object approach, this class also implements the mapping interface; that is, object attributes are linked to dictionary items, and vice versa. For instance:\n\n``` python\n>>> context = falcon.Context()\n>>> context.cache_strategy = 'lru'\n>>> context.get('cache_strategy')\n'lru'\n>>> 'cache_strategy' in context\nTrue\n```\n\nNote\n\nPython 2 specific `dict` methods are exposed regardless of the Python language version, however, as they are delegated to the underlying `__dict__`, a similar error would be raised as if attempting to use these methods for a usual Python 3 dict.\n\n&nbsp;\n\n`class falcon.ETag` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#ETag)  \nConvenience class to represent a parsed HTTP entity-tag.\n\nThis class is simply a subclass of `str` with a few helper methods and an extra attribute to indicate whether the entity-tag is weak or strong. The value of the string is equivalent to what RFC 7232 calls an “opaque-tag”, i.e. an entity-tag sans quotes and the weakness indicator.\n\nNote\n\nGiven that a weak entity-tag comparison can be performed by using the `==` operator (per the example below), only a [`strong_compare()`](#falcon.ETag.strong_compare \"falcon.ETag.strong_compare\") method is provided.\n\nHere is an example `on_get()` method that demonstrates how to use instances of this class:\n\n``` python\ndef on_get(self, req, resp):\n    content_etag = self._get_content_etag()\n    for etag in (req.if_none_match or []):\n        if etag == '*' or etag == content_etag:\n            resp.status = falcon.HTTP_304\n            return\n\n    # ...\n\n    resp.etag = content_etag\n    resp.status = falcon.HTTP_200\n```\n\n(See also: RFC 7232)\n\n`is_weak`  \n`True` if the entity-tag is weak, otherwise `False`.\n\n|       |                                                                                  |\n|-------|----------------------------------------------------------------------------------|\n| Type: | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.7)\") |\n\n`dumps()` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#ETag.dumps)  \nSerialize the ETag to a string suitable for use in a precondition header.\n\n(See also: [RFC 7232, Section 2.3](https://tools.ietf.org/html/rfc7232#section-2.3))\n\n|              |                                                                               |\n|--------------|-------------------------------------------------------------------------------|\n| Returns:     | An opaque quoted string, possibly prefixed by a weakness indicator `W/`.      |\n| Return type: | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\") |\n\n`classmethod loads(etag_str)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#ETag.loads)  \nClass method that deserializes a single entity-tag string from a precondition header.\n\nNote\n\nThis method is meant to be used only for parsing a single entity-tag. It can not be used to parse a comma-separated list of values.\n\n(See also: [RFC 7232, Section 2.3](https://tools.ietf.org/html/rfc7232#section-2.3))\n\n|              |                                                                                                                                                                          |\n|--------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Parameters:  | **etag_str** ([str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.7)\")) – An ASCII string representing a single entity-tag, as defined by RFC 7232. |\n| Returns:     | An instance of `~.ETag` representing the parsed entity-tag.                                                                                                              |\n| Return type: | [ETag](#falcon.ETag \"falcon.ETag\")                                                                                                                                       |\n\n`strong_compare(other)` [\\[source\\]](https://falcon.readthedocs.io/en/2.0.0/_modules/falcon/util/structures.html#ETag.strong_compare)  \nPerforms a strong entity-tag comparison.\n\nTwo entity-tags are equivalent if both are not weak and their opaque-tags match character-by-character.\n\n(See also: [RFC 7232, Section 2.3.2](https://tools.ietf.org/html/rfc7232#section-2.3.2))\n\n[TABLE]\n\n© 2019 by Falcon contributors  \nLicensed under the Apache License, Version 2.0.  \n[https://falcon.readthedocs.io/en/2.0.0/api/util.html](https://falcon.readthedocs.io/en/2.0.0/api/util.html)"
