---
name: XSLT & XPath
slug: xslt_xpath
text_format: markdown
generator: src:devdocs
version: null
copyright: |-
  © 2005–2022 MDN contributors.
  Licensed under the Creative Commons Attribution-ShareAlike License v2.5
  or later.
  https://developer.mozilla.org/en-US/docs/Web/XSLT
homepage: null
generator_command: doc src:devdocs use xslt_xpath

---
- name: ancestor
  id: xpath/axes/ancestor
  summary: The ancestor axis indicates all the ancestors of the context node beginning with the parent node and traveling through to the root node
  description: "# ancestor\n\nThe `ancestor` axis indicates all the ancestors of the context node beginning with the parent node and traveling through to the root node.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/ancestor](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/ancestor)"
- name: ancestor-or-self
  id: xpath/axes/ancestor-or-self
  summary: The ancestor-or-self axis indicates the context node and all of its ancestors, including the root node
  description: "# ancestor-or-self\n\nThe `ancestor-or-self` axis indicates the context node and all of its ancestors, including the root node.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/ancestor-or-self](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/ancestor-or-self)"
- name: attribute
  id: xpath/axes/attribute
  summary: The attribute axis indicates the attributes of the context node
  description: "# attribute\n\nThe `attribute` axis indicates the attributes of the context node. Only elements have attributes. This axis can be abbreviated with the at sign (`@`).\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/attribute](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/attribute)"
- name: Axes
  id: xpath/axes
  summary: 'XSLT/XPath Reference: XSLT elements, EXSLT functions, XPath functions, XPath axes There are thirteen different axes in the XPath specification'
  description: "# Axes\n\n**[XSLT/XPath Reference](../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](functions), [XPath axes](axes) There are thirteen different axes in the [XPath](../xpath) specification. An axis represents a relationship to the context node, and is used to locate nodes relative to that node on the tree.\n\nFor further information on using XPath expressions, please see the [For Further Reading](../xslt/transforming_xml_with_xslt#for_further_reading) section at the end of [Transforming XML with XSLT](../xslt/transforming_xml_with_xslt) document. Also see the ['axes' section in the xpath spec](https://www.w3.org/TR/xpath-30/#axes).\n\n[ancestor](axes/ancestor)  \nIndicates all the ancestors of the context node beginning with the parent node and traveling through to the root node.\n\n[ancestor-or-self](axes/ancestor-or-self)  \nIndicates the context node and all of its ancestors, including the root node.\n\n[attribute](axes/attribute)  \nIndicates the attributes of the context node. Only elements have attributes. This axis can be abbreviated with the at sign (`@`).\n\n[child](axes/child)  \nIndicates the children of the context node. If an XPath expression does not specify an axis, this is understood by default. Since only the root node or element nodes have children, any other use will select nothing.\n\n[descendant](axes/descendant)  \nIndicates all of the children of the context node, and all of their children, and so forth. Attribute and namespace nodes are **not** included - the `parent` of an `attribute` node is an element node, but `attribute` nodes are not the children of their parents.\n\n[descendant-or-self](axes/descendant-or-self)  \nIndicates the context node and all of its descendants. Attribute and namespace nodes are **not** included - the `parent` of an `attribute` node is an element node, but `attribute` nodes are not the children of their parents.\n\n[following](axes/following)  \nIndicates all the nodes that appear after the context node, except any `descendant`, `attribute`, and `namespace` nodes.\n\n[following-sibling](axes/following-sibling)  \nIndicates all the nodes that have the same parent as the context node and appear after the context node in the source document.\n\n[namespace](axes/namespace) *(not supported)*  \nIndicates all the nodes that are in scope for the context node. In this case, the context node must be an element node.\n\n[parent](axes/parent)  \nIndicates the single node that is the parent of the context node. It can be abbreviated as two periods (`..`).\n\n[preceding](axes/preceding)  \nIndicates all the nodes that precede the context node in the document except any `ancestor`, `attribute` and `namespace` nodes.\n\n[preceding-sibling](axes/preceding-sibling)  \nIndicates all the nodes that have the same parent as the context node and appear before the context node in the source document.\n\n[self](axes/self)  \nIndicates the context node itself. It can be abbreviated as a single period (`.`).\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes)"
- name: boolean()
  id: xpath/functions/boolean
  summary: The boolean function evaluates an expression and returns true or false
  description: "# boolean\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `boolean` function evaluates an expression and returns true or false.\n\n## Syntax\n\n``` js\nboolean( expression )\n```\n\n## Arguments\n\n`expression`  \nThe expression to be evaluated. The expression can refer to numbers and node-sets as well as booleans.\n\n## Returns\n\nBoolean `true` or `false` after evaluating `expression`.\n\n## Notes\n\n- A number evaluates to false if it is positive or negative zero or `NaN`. Otherwise, it evaluates true.\n- A node-set evaluates to true if it is non-empty.\n- A string evaluates to false if it an empty string. Otherwise, it evaluates to true.\n- An object of a type other than the four basic types is converted to a boolean in a way that is dependent on that type.\n\n## Defined\n\n[XPath 1.0 4.3](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-boolean)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/boolean](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/boolean)"
- name: ceiling()
  id: xpath/functions/ceiling
  summary: The ceiling function evaluates a decimal number and returns the smallest integer greater than or equal to the decimal number
  description: "# ceiling\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `ceiling` function evaluates a decimal number and returns the smallest integer greater than or equal to the decimal number.\n\n## Syntax\n\n``` notranslate\nceiling( number )\n```\n\n## Arguments\n\n`number`  \nThe number to be evaluated.\n\n## Returns\n\nThe nearest integer greater than or equal to `number`.\n\nfor example:\n\n`ceiling (5.2)` = *6*\n\n`ceiling (-5.2)` = *-5*\n\n## Defined\n\n[XPath 1.0 4.4](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-ceiling)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/ceiling](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/ceiling)"
- name: child
  id: xpath/axes/child
  summary: The child axis indicates the children of the context node
  description: "# child\n\nThe `child` axis indicates the children of the context node. If an XPath expression does not specify an axis, the `child` axis is understood by default. Since only the root node or element nodes have children, any other use will select nothing.\n\n## Specifications\n\n| Specification                                            |\n|----------------------------------------------------------|\n| [XPath3.1 \\# axes](https://www.w3.org/TR/xpath-31/#axes) |\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/child](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/child)"
- name: choose()
  id: xpath/functions/choose
  summary: The choose function returns one of the specified objects based on a boolean parameter
  description: "# choose\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `choose` function returns one of the specified objects based on a boolean parameter.\n\n**Note:** This method should be used instead of `if ()`, which has been deprecated.\n\n## Syntax\n\n``` notranslate\nchoose( boolean , object1, object2 )\n```\n\n## Arguments\n\n`boolean`  \nThe boolean operation to use when determining which object to return.\n\n`object1`  \nThe first object to consider returning.\n\n`object2`  \nThe second object to consider returning.\n\n## Returns\n\nIf the boolean parameter is true, the first object is returned; otherwise, the second object is returned.\n\n**Note:** All parameters are evaluated, even the one that's not returned.\n\n## Defined\n\n[XForms 1.1](https://www.w3.org/TR/xforms11/#fn-choose)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/choose](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/choose)"
- name: Common errors
  id: xslt/common_errors
  summary: Your server needs to send both the source and the stylesheet with a XML mime type, text/xml or application/xml
  description: "# Common XSLT Errors\n\n## MIME types\n\nYour server needs to send both the source and the stylesheet with a XML mime type, `text/xml` or `application/xml`. To find out the current type, load the file in Mozilla and look at the page info. Or use a download tool, those usually tell the mime type.\n\nIn Firefox 6 and forward, you can also use the official XSLT mimetype: `application/xslt+xml`.\n\n## Namespace\n\nThe XSLT 1.0 namespace is [`http://www.w3.org/1999/XSL/Transform`](https://www.w3.org/1999/XSL/Transform). Older versions of IE used a different namespace. However these versions also used a draft version of XSLT which is incompatible with what eventually became the XSLT 1.0 specification. Firefox only supports the official XSLT 1.0 version.\n\n## Missing features\n\nThere are some features in the XSLT 1.0 specification which Firefox unfortunately does not yet support. Specifically:\n\n- The `namespace::` axis in XPath expressions. Support for this will hopefully be available in the future.\n- The `disable-output-escaping` attribute. This feature controls how serializing the constructed output document works. However Firefox never serializes the output document and so the attribute isn't really applicable. While we could try to add some heuristics to serialize and reparse just the part of the output document which has `disable-output-escaping` applied, heuristics often get things wrong and lead to surprising results, hence we've been reluctant to add this so far. Often times stylesheets contain code like `<xsl:text disable-output-escaping=\"yes\">&nbsp;</xsl:text>`, this is equivalent to putting `&#160;` in the stylesheet which will work great in all XSLT engines. We do realize that the lack of `disable-output-escaping` is a problem and we'd like to find a solution for it, however so far we haven't found any good solutions.\n- The `<xsl:namespace-alias>` element.\n\nIf you'd like to help out with any of the above features, help would be greatly appreciated.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Common_errors](https://developer.mozilla.org/en-US/docs/Web/XSLT/Common_errors)"
- name: Comparison with CSS selectors
  id: xpath/comparison_with_css_selectors
  summary: This article seeks to document the difference between CSS Selectors and XPath for web developers to be able to better choose the right tool for the right job
  description: "# Comparison of CSS Selectors and XPath\n\n**[XSLT/XPath Reference](../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](functions), [XPath axes](axes)\n\nThis article seeks to document the difference between CSS Selectors and XPath for web developers to be able to better choose the right tool for the right job.\n\n| [XPath feature](../xpath)                                                                                  | [CSS equivalent](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)                                                                                                                                         |\n|------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [`ancestor`](axes/ancestor), [`parent`](axes/parent) or [`preceding-sibling`](axes/preceding-sibling) axis | [`:has()`](https://developer.mozilla.org/en-US/docs/Web/CSS/:has) selector Experimental                                                                                                                                  |\n| [`attribute`](axes/attribute) axis                                                                         | [Attribute selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors)                                                                                                                              |\n| [`child`](axes/child) axis                                                                                 | [Child combinator](https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator)                                                                                                                                    |\n| [`descendant`](axes/descendant) axis                                                                       | [Descendant combinator](https://developer.mozilla.org/en-US/docs/Web/CSS/Descendant_combinator)                                                                                                                          |\n| [`following-sibling`](axes/following-sibling) axis                                                         | [General sibling combinator](https://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_combinator) or [adjacent sibling combinator](https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator) |\n| [`self`](axes/self) axis                                                                                   | [`:scope`](https://developer.mozilla.org/en-US/docs/Web/CSS/:scope) or [`:host`](https://developer.mozilla.org/en-US/docs/Web/CSS/:host) selector                                                                        |\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Comparison_with_CSS_selectors](https://developer.mozilla.org/en-US/docs/Web/XPath/Comparison_with_CSS_selectors)"
- name: concat()
  id: xpath/functions/concat
  summary: The concat function concatenates two or more strings and returns the resulting string
  description: "# concat\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `concat` function concatenates two or more strings and returns the resulting string.\n\n## Syntax\n\n``` notranslate\nconcat( string1, string2 [,stringn]* )\n```\n\n## Arguments\n\n`stringn`  \nThis function accepts two or more arguments. Each of these arguments is a string.\n\n## Returns\n\nA single string that is the concatenation of all the strings passed to the function as arguments.\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-concat)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/concat](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/concat)"
- name: contains()
  id: xpath/functions/contains
  summary: The contains function determines whether the first argument string contains the second argument string and returns boolean true or false
  description: "# contains\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `contains` function determines whether the first argument string contains the second argument string and returns boolean true or false.\n\n## Syntax\n\n``` notranslate\ncontains(haystack, needle)\n```\n\n## Arguments\n\n`haystack`  \nThe string to be searched\n\n`needle`  \nThe string to look for as a substring of `haystack`\n\n## Returns\n\n`true` if `haystack` contains `needle`. Otherwise, `false`.\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-contains)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/contains](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/contains)"
- name: count()
  id: xpath/functions/count
  summary: The count function counts the number of nodes in a node-set and returns an integer
  description: "# count\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `count` function counts the number of nodes in a node-set and returns an integer.\n\n## Syntax\n\n``` notranslate\ncount( node-set )\n```\n\n## Arguments\n\n`node-set`  \nThe node set to be counted.\n\n## Returns\n\nAn integer representing the number of nodes in a node-set.\n\n## Defined\n\n[XPath 1.0 4.1](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-count)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/count](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/count)"
- name: current()
  id: xpath/functions/current
  summary: The current function can be used to get the context node in an XSLT instruction
  description: "# current\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `current` function can be used to get the context node in an XSLT instruction.\n\n## Syntax\n\n``` notranslate\ncurrent()\n```\n\n## Returns\n\nA node-set containing only the current node.\n\n## Notes\n\nThis function is an XSLT-specific addition to XPath. It is not a part of the core XPath function library.\n\nFor an outermost expression (an expression not occurring within another expression), the current node is always the same as the context node (which will be returned by the `.` or `self` syntax). The following two are semantically equivalent.\n\n``` xml\n<xsl:value-of select=\"current()\"/>\n```\n\n``` xml\n<xsl:value-of select=\".\"/>\n```\n\nIn an inner expression (e.g. in square brackets), the current node is still the same as it would have been in an outermost expression. Thus within all of the following three expressions the `current` function (not the entire expressions) returns the same node. Moreover, the latter two are semantically equivalent.\n\n``` xml\n<xsl:value-of select=\"current()\"/>\n```\n\n``` xml\n<xsl:value-of select=\"foo/bar[current() = X]\"/>\n```\n\n``` xml\n<xsl:variable name=\"current\" select=\"current()\"/>\n<xsl:value-of select=\"foo/bar[$current = X]\"/>\n```\n\nAnd the next code is also semantically equivalent to the latter two, since the `.` occurs in an outermost expression.\n\n``` xml\n<xsl:variable name=\"current\" select=\".\"/>\n<xsl:value-of select=\"foo/bar[$current = X]\"/>\n```\n\nBut the `.` always relate to the narrowest context. Thus in\n\n``` xml\n<xsl:value-of select=\"foo/bar[. = X]\"/>\n```\n\nthe `.` returns the `bar` node, which may be different from the current node.\n\n## Defined\n\n[XSLT 1.0 12.4](https://www.w3.org/TR/1999/REC-xslt-19991116/#function-current)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/current](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/current)"
- name: descendant
  id: xpath/axes/descendant
  summary: The descendant axis indicates all of the children of the context node, and all of their children, and so forth
  description: "# descendant\n\nThe `descendant` axis indicates all of the children of the context node, and all of their children, and so forth. Attribute and namespace nodes are **not** included - the `parent` of an `attribute` node is an element node, but `attribute` nodes are not the children of their parents.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/descendant](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/descendant)"
- name: descendant-or-self
  id: xpath/axes/descendant-or-self
  summary: The descendant-or-self axis indicates the context node and all of its descendants
  description: "# descendant-or-self\n\nThe `descendant-or-self` axis indicates the context node and all of its descendants. Attribute and namespace nodes are **not** included - the `parent` of an `attribute` node is an element node, but `attribute` nodes are not the children of their parents.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/descendant-or-self](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/descendant-or-self)"
- name: document()
  id: xpath/functions/document
  summary: The document finds a node-set in an external document, or multiple external documents, and returns the resulting node-set
  description: "# document\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `document` finds a node-set in an external document, or multiple external documents, and returns the resulting node-set.\n\n## Syntax\n\n``` notranslate\ndocument( URI [,node-set] )\n```\n\n## Arguments\n\n`URI`  \nAn absolute or relative URI of the document to be retrieved. The URI may also include a fragment identifier.\n\n`node-set` (optional)  \nAn expression pointing to a node-set in the external document that should be returned.\n\n## Returns\n\nA node-set.\n\n## Notes\n\n- If the URI contains a fragment identifier and that fragment can be identified in the external document, that fragment will be treated as the root in the `node-set` argument's expression. If the `node-set` argument is omitted, the entire fragment will be returned.\n- If the `URI` argument is a node-set, and the second argument is present, each node in the node-set will be evaluated as a separate URI, and the returned node-set will be as if the `document` function has been called multiple times (each time with the same second argument just as given in the function call) and the resulting node-sets had been concatenated into a single node-set.\n- Other specific conditions exist with specified behaviors. See the XSLT 1.0 documentation for details.\n- Since the URI is relative to the XSL document, `document(\"\")` would return the root node of the current document.\n\nThis function is an XSLT-specific addition to XPath. It is not a part of the core XPath function library.\n\n## Defined\n\n[XSLT 1.0 12.1](https://www.w3.org/TR/1999/REC-xslt-19991116/#function-document)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/document](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/document)"
- name: element-available()
  id: xpath/functions/element-available
  summary: The element-available function determines if an element is available and returns true or false
  description: "# element-available\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `element-available` function determines if an element is available and returns true or false.\n\n## Syntax\n\n``` notranslate\nelement-available( QName )\n```\n\n## Arguments\n\n`QName`  \nMust evaluate to a valid QName. The QName is expanded into an expanded-name using the namespace declarations in scope for the expression.\n\n## Returns\n\nReturns true if and only if the expanded-name is the name of an instruction. If the expanded-name has a namespace URI equal to the XSLT namespace URI, then it refers to an element defined by XSLT. Otherwise, it refers to an extension element. If the expanded-name has a null namespace URI, the element-available function will return false.\n\n## Defined\n\n[XSLT 1.0 15](https://www.w3.org/TR/1999/REC-xslt-19991116/#function-element-available)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/element-available](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/element-available)"
- name: false()
  id: xpath/functions/false
  summary: The false function returns boolean false
  description: "# false\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `false` function returns boolean false.\n\n## Syntax\n\n``` notranslate\nfalse()\n```\n\n## Returns\n\nBoolean `false`.\n\n## Notes\n\nThis function is useful part of a comparison:\n\n``` xml\n<xsl:if test=\"boolean((1 &gt; 2) = false())\">\n  The expression evaluates as true\n</xsl:if>\n```\n\n## Defined\n\n[XPath 1.0 4.3](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-false)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/false](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/false)"
- name: floor()
  id: xpath/functions/floor
  summary: The floor function evaluates a decimal number and returns the largest integer less than or equal to the decimal number
  description: "# floor\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `floor` function evaluates a decimal number and returns the largest integer less than or equal to the decimal number.\n\n## Syntax\n\n``` notranslate\nfloor( number )\n```\n\n## Arguments\n\n`number`  \nThe decimal number to be evaluated.\n\n## Returns\n\nThe nearest integer less than or equal to `number`.\n\n## Defined\n\n[XPath 1.0 4.4](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-floor)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/floor](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/floor)"
- name: following
  id: xpath/axes/following
  summary: The following axis indicates all the nodes that appear after the context node, except any descendant, attribute, and namespace nodes
  description: "# following\n\nThe `following` axis indicates all the nodes that appear after the context node, except any `descendant`, `attribute`, and `namespace` nodes.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/following](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/following)"
- name: following-sibling
  id: xpath/axes/following-sibling
  summary: The following-sibling axis indicates all the nodes that have the same parent as the context node and appear after the context node in the source document
  description: "# following-sibling\n\nThe `following-sibling` axis indicates all the nodes that have the same parent as the context node and appear after the context node in the source document.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/following-sibling](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/following-sibling)"
- name: format-number()
  id: xpath/functions/format-number
  summary: The format-number function evaluates a number and returns a string representing the number in a given format
  description: "# format-number\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `format-number` function evaluates a number and returns a string representing the number in a given format.\n\n## Syntax\n\n``` notranslate\nformat-number(number, pattern)\nformat-number(number, pattern, decimalFormat)\n```\n\n## Parameters\n\n`number`  \nThe number to be formatted\n\n`pattern`  \nA string in the format of the Java [DecimalFormat](https://docs.oracle.com/javase/8/docs/api/java/text/DecimalFormat.html) class.\n\n`decimalFormat` (optional)  \nThe name of an [`xsl:decimal-format`](../../xslt/element/decimal-format) element that defines the number format to be used. If omitted, the default decimal-format will be used.\n\n## Return value\n\nA string representing the number in the new format.\n\n## Notes\n\nThis function is an XSLT-specific addition to XPath. It is not a part of the core XPath function library.\n\n## Defined\n\n[XSLT 1.0 12.3](https://www.w3.org/TR/1999/REC-xslt-19991116/#function-format-number)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/format-number](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/format-number)"
- name: function-available()
  id: xpath/functions/function-available
  summary: The function-available function determines if a given function is available and returns boolean true or false
  description: "# function-available\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `function-available` function determines if a given function is available and returns boolean true or false.\n\n## Syntax\n\n``` notranslate\nfunction-available( name )\n```\n\n## Arguments\n\n`name`  \nThe name of the function to test.\n\n## Returns\n\nBoolean `true` or `false`.\n\n## Defined\n\n[XSLT 1.0 15](https://www.w3.org/TR/1999/REC-xslt-19991116/#function-function-available)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/function-available](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/function-available)"
- name: Functions
  id: xpath/functions
  summary: 'XSLT/XPath Reference: XSLT elements, EXSLT functions, XPath functions, XPath axes The following is an annotated list of core XPath functions and XSLT-specific additions to XPath, including a description, syntax, a list of arguments, result-type, source in the appropriate W3C Recommendation'
  description: "# Functions\n\n**[XSLT/XPath Reference](../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](functions), [XPath axes](axes) The following is an annotated list of core [XPath](../xpath) functions and [XSLT](../index)-specific additions to XPath, including a description, syntax, a list of arguments, result-type, source in the appropriate W3C Recommendation. For further information on using XPath/XSLT functions, please see the [For Further Reading](../xslt/transforming_xml_with_xslt) page.\n\n- [boolean()](functions/boolean)\n- [ceiling()](functions/ceiling)\n- [choose()](functions/choose)\n- [concat()](functions/concat)\n- [contains()](functions/contains)\n- [count()](functions/count)\n- [current()](functions/current) *XSLT-specific*\n- [document()](functions/document) *XSLT-specific*\n- [element-available()](functions/element-available)\n- [false()](functions/false)\n- [floor()](functions/floor)\n- [format-number()](functions/format-number) *XSLT-specific*\n- [function-available()](functions/function-available)\n- [generate-id()](functions/generate-id) *XSLT-specific*\n- [id()](functions/id)\n- [key()](functions/key) *XSLT-specific*\n- [lang()](functions/lang)\n- [last()](functions/last)\n- [local-name()](functions/local-name)\n- [name()](functions/name)\n- [namespace-uri()](functions/namespace-uri)\n- [normalize-space()](functions/normalize-space)\n- [not()](functions/not)\n- [number()](functions/number)\n- [position()](functions/position)\n- [round()](functions/round)\n- [starts-with()](functions/starts-with)\n- [string()](functions/string)\n- [string-length()](functions/string-length)\n- [substring()](functions/substring)\n- [substring-after()](functions/substring-after)\n- [substring-before()](functions/substring-before)\n- [sum()](functions/sum)\n- [system-property()](functions/system-property) *XSLT-specific*\n- [translate()](functions/translate)\n- [true()](functions/true)\n- [unparsed-entity-url()](functions/unparsed-entity-url) *XSLT-specific*\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions)"
- name: generate-id()
  id: xpath/functions/generate-id
  summary: The generate-id function generates a unique id for the first node in a given node-set and returns a string containing that id
  description: "# generate-id\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `generate-id` function generates a unique id for the first node in a given node-set and returns a string containing that id.\n\n## Syntax\n\n``` notranslate\ngenerate-id( [node-set] )\n```\n\n## Arguments\n\n`node-set` (optional)  \nAn id will be generated for the first node in this node-set. If omitted, the current context node will be used.\n\n## Returns\n\nA string containing the generated id.\n\n## Notes\n\n- The same id must be generated every time for the same node in the current document in the current transformation.\n- The generated id may not be the same in subsequent transformations.\n\nThis function is an XSLT-specific addition to XPath. It is not a part of the core XPath function library.\n\n## Defined\n\n[XSLT 1.0 12.4](https://www.w3.org/TR/1999/REC-xslt-19991116/#function-generate-id)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/generate-id](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/generate-id)"
- name: id()
  id: xpath/functions/id
  summary: The id function finds nodes matching the given ids and returns a node-set containing the identified nodes
  description: "# id\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `id` function finds nodes matching the given ids and returns a node-set containing the identified nodes.\n\n## Syntax\n\n``` notranslate\nid( expression )\n```\n\n## Arguments\n\n`expression`  \nIf `expression` is a node-set, then the string value of each node in the node-set is treated as an individual id. The returned node set is the nodes corresponding to those ids. If `expression` is a string, or anything other than a node-set, then `expression` is treated as a space-separated list of ids. The returned node set is the nodes corresponding to those ids.\n\n## Returns\n\nA node-set containing the node or nodes identified by the given id or ids.\n\n## Notes\n\n- The DTD of the XML document determines what attribute is an ID. See [XPath 1.0 5.2.1](https://www.w3.org/TR/xpath/#unique-id)\n\n## Defined\n\n[XPath 1.0 4.1](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-id)\n\n## Gecko support\n\nPartially supported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/id](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/id)"
- name: Introduction to using XPath in JavaScript
  id: xpath/introduction_to_using_xpath_in_javascript
  summary: This document describes the interface for using XPath in JavaScript internally, in extensions, and from websites
  description: "# Introduction to using XPath in JavaScript\n\nThis document describes the interface for using [XPath](../xpath) in JavaScript internally, in extensions, and from websites. Mozilla implements a fair amount of the [DOM 3 XPath](https://www.w3.org/TR/2004/NOTE-DOM-Level-3-XPath-20040226/), which means that XPath expressions can be run against both HTML and XML documents.\n\nThe main interface to using XPath is the [evaluate](https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate) function of the [document](https://developer.mozilla.org/en-US/docs/Web/API/Document) object.\n\n## document.evaluate()\n\nThis method evaluates [XPath](../xpath) expressions against an [XML](https://developer.mozilla.org/en-US/docs/Glossary/XML) based document (including HTML documents), and returns a [`XPathResult`](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult) object, which can be a single node or a set of nodes. The existing documentation for this method is located at [document.evaluate](https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate), but it is rather sparse for our needs at the moment; a more comprehensive examination will be given below.\n\n``` js\nconst xpathResult = document.evaluate(xpathExpression, contextNode, namespaceResolver, resultType, result);\n```\n\n## Parameters\n\nThe [`evaluate()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate) method takes a total of five parameters:\n\n- `xpathExpression`: A string containing the XPath expression to be evaluated.\n- `contextNode`: A node in the document against which the `xpathExpression` should be evaluated, including any and all of its child nodes. The [document](https://developer.mozilla.org/en-US/docs/Web/API/Document) node is the most commonly used.\n- `namespaceResolver`: A function that will be passed any namespace prefixes contained within `xpathExpression` which returns a string representing the namespace URI associated with that prefix. This enables conversion between the prefixes used in the XPath expressions and the possibly different prefixes used in the document. The function can be either:\n  - [Created](#implementing_a_default_namespace_resolver) by using the [`createNSResolver`](https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver) method of a [`XPathEvaluator`](https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator) object. You should use this virtually all of the time.\n  - `null`, which can be used for HTML documents or when no namespace prefixes are used. Note that, if the `xpathExpression` contains a namespace prefix, this will result in a `DOMException` being thrown with the code `NAMESPACE_ERR`.\n  - A custom user-defined function. See the [Using a User Defined Namespace Resolver](#implementing_a_user_defined_namespace_resolver) section in the appendix for details.\n- `resultType`: A [constant](#xpathresult_defined_constants) that specifies the desired result type to be returned as a result of the evaluation. The most commonly passed constant is `XPathResult.ANY_TYPE` which will return the results of the XPath expression as the most natural type. There is a section in the appendix which contains a full list of the [available constants](#xpathresult_defined_constants). They are explained below in the section \"[Specifying the Return Type](#specifying_the_return_type).\"\n- `result`: If an existing `XPathResult` object is specified, it will be reused to return the results. Specifying `null` will create a new `XPathResult` object.\n\n## Return Value\n\nReturns `xpathResult`, which is an `XPathResult` object of the type [specified](#specifying_the_return_type) in the `resultType` parameter. The `XPathResult` Interface is defined [here](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult).\n\n## Implementing a Default Namespace Resolver\n\nWe create a namespace resolver using the `createNSResolver` method of the [document](https://developer.mozilla.org/en-US/docs/Web/API/Document) object.\n\n``` js\nconst nsResolver = document.createNSResolver(contextNode.ownerDocument === null ? contextNode.documentElement : contextNode.ownerDocument.documentElement);\n```\n\nOr alternatively by using the `createNSResolver` method of a `XPathEvaluator` object.\n\n``` js\nconst xpEvaluator = new XPathEvaluator();\nconst nsResolver = xpEvaluator.createNSResolver(contextNode.ownerDocument === null ? contextNode.documentElement : contextNode.ownerDocument.documentElement);\n```\n\nAnd then pass `document.evaluate`, the `nsResolver` variable as the `namespaceResolver` parameter.\n\nNote: XPath defines QNames without a prefix to match only elements in the null namespace. There is no way in XPath to pick up the default namespace as applied to a regular element reference (e.g., `p[@id='_myid']` for `xmlns='http://www.w3.org/1999/xhtml'`). To match default elements in a non-null namespace, you either have to refer to a particular element using a form such as `['namespace-uri()='http://www.w3.org/1999/xhtml' and name()='p' and @id='_myid']` ([this approach](#using_xpath_functions_to_reference_elements_with_a_default_namespace) works well for dynamic XPath's where the namespaces might not be known) or use prefixed name tests, and create a namespace resolver mapping the prefix to the namespace. Read more on [how to create a user-defined namespace resolver](#implementing_a_user_defined_namespace_resolver), if you wish to take the latter approach.\n\n## Notes\n\nAdapts any DOM node to resolve namespaces so that an [XPath](../xpath) expression can be easily evaluated relative to the context of the node where it appeared within the document. This adapter works like the DOM Level 3 method `lookupNamespaceURI` on nodes in resolving the `namespaceURI` from a given prefix using the current information available in the node's hierarchy at the time `lookupNamespaceURI` is called. Also correctly resolves the implicit `xml` prefix.\n\n## Specifying the Return Type\n\nThe returned variable `xpathResult` from `document.evaluate` can either be composed of individual nodes ([simple types](#simple_types)), or a collection of nodes ([node-set types](#node-set_types)).\n\n#### Simple Types\n\nWhen the desired result type in `resultType` is specified as either:\n\n- `NUMBER_TYPE` - a double\n- `STRING_TYPE` - a string\n- `BOOLEAN_TYPE` - a boolean\n\nWe obtain the returned value of the expression by accessing the following properties respectively of the `XPathResult` object.\n\n- `numberValue`\n- `stringValue`\n- `booleanValue`\n\n##### Example\n\nThe following uses the XPath expression [`count(//p)`](functions/count) to obtain the number of `<p>` elements in an HTML document:\n\n``` js\nconst paragraphCount = document.evaluate('count(//p)', document, null, XPathResult.ANY_TYPE, null);\n\nconsole.log(`This document contains ${paragraphCount.numberValue} paragraph elements.`);\n```\n\nAlthough JavaScript allows us to convert the number to a string for display, the XPath interface will not automatically convert the numerical result if the `stringValue` property is requested, so the following code will **not** work:\n\n``` js\nconst paragraphCount = document.evaluate('count(//p)', document, null, XPathResult.ANY_TYPE, null);\n\nconsole.log(`This document contains ${paragraphCount.stringValue} paragraph elements.`);\n```\n\nInstead, it will return an exception with the code `NS_DOM_TYPE_ERROR`.\n\n#### Node-Set Types\n\nThe `XPathResult` object allows node-sets to be returned in 3 principal different types:\n\n- [Iterators](#iterators)\n- [Snapshots](#snapshots)\n- [First Nodes](#first_node)\n\n##### Iterators\n\nWhen the specified result type in the `resultType` parameter is either:\n\n- `UNORDERED_NODE_ITERATOR_TYPE`\n- `ORDERED_NODE_ITERATOR_TYPE`\n\nThe `XPathResult` object returned is a node-set of matched nodes which will behave as an iterator, allowing us to access the individual nodes contained by using the `iterateNext()` method of the `XPathResult`.\n\nOnce we have iterated over all of the individual matched nodes, `iterateNext()` will return `null`.\n\nNote however, that if the document is mutated (the document tree is modified) between iterations that will invalidate the iteration and the `invalidIteratorState` property of `XPathResult` is set to `true`, and a `NS_ERROR_DOM_INVALID_STATE_ERR` exception is thrown.\n\n``` js\nconst iterator = document.evaluate('//phoneNumber', documentNode, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);\n\ntry {\n  let thisNode = iterator.iterateNext();\n\n  while (thisNode) {\n    console.log(thisNode.textContent);\n    thisNode = iterator.iterateNext();\n  }\n}\ncatch(e) {\n  console.error(`Error: Document tree modified during iteration ${e}`);\n}\n```\n\n##### Snapshots\n\nWhen the specified result type in the `resultType` parameter is either:\n\n- `UNORDERED_NODE_SNAPSHOT_TYPE`\n- `ORDERED_NODE_SNAPSHOT_TYPE`\n\nThe `XPathResult` object returned is a static node-set of matched nodes, which allows us to access each node through the `snapshotItem(itemNumber)` method of the `XPathResult` object, where `itemNumber` is the index of the node to be retrieved. The total number of nodes contained can be accessed through the `snapshotLength` property.\n\nSnapshots do not change with document mutations, so unlike the iterators, the snapshot does not become invalid, but it may not correspond to the current document, for example, the nodes may have been moved, it might contain nodes that no longer exist, or new nodes could have been added.\n\n``` js\nconst nodesSnapshot = document.evaluate('//phoneNumber', documentNode, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n\nfor (let i=0; i < nodesSnapshot.snapshotLength; i++)\n{\n  console.log(nodesSnapshot.snapshotItem(i).textContent);\n}\n```\n\n##### First Node\n\nWhen the specified result type in the `resultType` parameter is either:\n\n- `ANY_UNORDERED_NODE_TYPE`\n- `FIRST_ORDERED_NODE_TYPE`\n\nThe `XPathResult` object returned is only the first found node that matched the XPath expression. This can be accessed through the `singleNodeValue` property of the `XPathResult` object. This will be `null` if the node set is empty.\n\nNote that, for the unordered subtype the single node returned might not be the first in document order, but for the ordered subtype you are guaranteed to get the first matched node in the document order.\n\n``` js\nconst firstPhoneNumber = document.evaluate('//phoneNumber', documentNode, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n\nconsole.log(`The first phone number found is ${firstPhoneNumber.singleNodeValue.textContent}`);\n```\n\n#### The ANY_TYPE Constant\n\nWhen the result type in the `resultType` parameter is specified as `ANY_TYPE`, the `XPathResult` object returned, will be whatever type that naturally results from the evaluation of the expression.\n\nIt could be any of the simple types (`NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE`), **but**, if the returned result type is a node-set then it will **only** be an `UNORDERED_NODE_ITERATOR_TYPE`.\n\nTo determine that type after evaluation, we use the `resultType` property of the `XPathResult` object. The [constant](#xpathresult_defined_constants) values of this property are defined in the appendix. None Yet =====Any_Type Example===== \\<pre\\> \\</pre\\>\n\n## Examples\n\n## Within an HTML Document\n\nThe following code is intended to be placed in any JavaScript fragment within or linked to the HTML document against which the XPath expression is to be evaluated.\n\nTo extract all the `<h2>` heading elements in an HTML document using XPath, the `xpathExpression` is '`//h2`'. Where, `//` is the Recursive Descent Operator that matches elements with the nodeName `h2` anywhere in the document tree. The full code for this is: link to introductory xpath doc\n\n``` js\nconst headings = document.evaluate('//h2', document, null, XPathResult.ANY_TYPE, null);\n```\n\nNotice that, since HTML does not have namespaces, we have passed `null` for the `namespaceResolver` parameter.\n\nSince we wish to search over the entire document for the headings, we have used the [document](https://developer.mozilla.org/en-US/docs/Web/API/Document) object itself as the `contextNode`.\n\nThe result of this expression is an `XPathResult` object. If we wish to know the type of result returned, we may evaluate the `resultType` property of the returned object. In this case, that will evaluate to `4`, an `UNORDERED_NODE_ITERATOR_TYPE`. This is the default return type when the result of the XPath expression is a node set. It provides access to a single node at a time and may not return nodes in a particular order. To access the returned nodes, we use the `iterateNext()` method of the returned object:\n\n``` js\nlet thisHeading = headings.iterateNext();\n\nlet alertText = 'Level 2 headings in this document are:\\n'\n\nwhile (thisHeading) {\n  alertText += `${thisHeading.textContent}\\n`;\n  thisHeading = headings.iterateNext();\n}\n```\n\nOnce we iterate to a node, we have access to all the standard DOM interfaces on that node. After iterating through all the `h2` elements returned from our expression, any further calls to `iterateNext()` will return `null`.\n\n## Evaluating against an XML document within an Extension\n\nThe following uses an XML document located at `chrome://yourextension/content/peopleDB.xml` as an example.\n\n``` xml\n<?xml version=\"1.0\"?>\n<people xmlns:xul = \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\" >\n  <person>\n    <name first=\"george\" last=\"bush\" />\n    <address street=\"1600 pennsylvania avenue\" city=\"washington\" country=\"usa\"/>\n    <phoneNumber>202-456-1111</phoneNumber>\n  </person>\n  <person>\n    <name first=\"tony\" last=\"blair\" />\n    <address street=\"10 downing street\" city=\"london\" country=\"uk\"/>\n    <phoneNumber>020 7925 0918</phoneNumber>\n  </person>\n</people>\n```\n\nTo make the contents of the XML document available within the extension, we create an [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) object to load the document synchronously, the variable `xmlDoc` will contain the document as an [`XMLDocument`](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument) object against which we can use the `evaluate` method\n\nJavaScript used in the extensions xul/js documents.\n\n``` js\nconst req = new XMLHttpRequest();\n\nreq.open(\"GET\", \"chrome://yourextension/content/peopleDB.xml\", false);\nreq.send(null);\n\nconst xmlDoc = req.responseXML;\n\nconst nsResolver = xmlDoc.createNSResolver( xmlDoc.ownerDocument === null ? xmlDoc.documentElement : xmlDoc.ownerDocument.documentElement);\n\nconst personIterator = xmlDoc.evaluate('//person', xmlDoc, nsResolver, XPathResult.ANY_TYPE, null);\n```\n\n## Appendix\n\n## Implementing a User Defined Namespace Resolver\n\nThis is an example for illustration only. This function will need to take namespace prefixes from the `xpathExpression` and return the URI that corresponds to that prefix. For example, the expression:\n\n``` notranslate\n'//xhtml:td/mathml:math'\n```\n\nwill select all [MathML](https://developer.mozilla.org/en-US/docs/Web/MathML) expressions that are the children of (X)HTML table data cell elements.\n\nIn order to associate the '`mathml:`' prefix with the namespace URI '`http://www.w3.org/1998/Math/MathML`' and '`xhtml:`' with the URI '`http://www.w3.org/1999/xhtml`' we provide a function:\n\n``` js\nfunction nsResolver(prefix) {\n  const ns = {\n    'xhtml': 'http://www.w3.org/1999/xhtml',\n    'mathml': 'http://www.w3.org/1998/Math/MathML'\n  };\n  return ns[prefix] || null;\n}\n```\n\nOur call to `document.evaluate` would then looks like:\n\n``` js\ndocument.evaluate('//xhtml:td/mathml:math', document, nsResolver, XPathResult.ANY_TYPE, null);\n```\n\n## Implementing a default namespace for XML documents\n\nAs noted in the [Implementing a Default Namespace Resolver](#implementing_a_default_namespace_resolver) previously, the default resolver does not handle the default namespace for XML documents. For example with this document:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n    <entry />\n    <entry />\n    <entry />\n</feed>\n```\n\n`doc.evaluate('//entry', doc, nsResolver, XPathResult.ANY_TYPE, null)` will return an empty set, where `nsResolver` is the resolver returned by `createNSResolver`. Passing a `null` resolver doesn't work any better, either.\n\nOne possible workaround is to create a custom resolver that returns the correct default namespace (the Atom namespace in this case). Note that you still have to use some namespace prefix in your XPath expression, so that the resolver function will be able to change it to your required namespace. E.g.:\n\n``` js\nfunction resolver() {\n    return 'http://www.w3.org/2005/Atom';\n}\ndoc.evaluate('//myns:entry', doc, resolver, XPathResult.ANY_TYPE, null)\n```\n\nNote that a more complex resolver will be required if the document uses multiple namespaces.\n\nAn approach which might work better (and allow namespaces not to be known ahead of time) is described in the next section.\n\n## Using XPath functions to reference elements with a default namespace\n\nAnother approach to match default elements in a non-null namespace (and one which works well for dynamic XPath expressions where the namespaces might not be known), involves referring to a particular element using a form such as `[namespace-uri()='http://www.w3.org/1999/xhtml' and name()='p' and @id='_myid']`. This circumvents the problem of an XPath query not being able to detect the default namespace on a regularly labeled element.\n\n## Getting specifically namespaced elements and attributes regardless of prefix\n\nIf one wishes to provide flexibility in namespaces (as they are intended) by not necessarily requiring a particular prefix to be used when finding a namespaced element or attribute, one must use special techniques.\n\nWhile one can adapt the approach in the above section to test for namespaced elements regardless of the prefix chosen (using [`local-name()`](functions/local-name) in combination with [`namespace-uri()`](functions/namespace-uri) instead of [`name()`](functions/name)), a more challenging situation occurs, however, if one wishes to grab an element with a particular namespaced attribute in a predicate (given the absence of implementation-independent variables in XPath 1.0).\n\nFor example, one might try (incorrectly) to grab an element with a namespaced attribute as follows: `const xpathlink = someElements[local-name(@*)=\"href\" and namespace-uri(@*)='http://www.w3.org/1999/xlink'];`\n\nThis could inadvertently grab some elements if one of its attributes existed that had a local name of \"`href`\", but it was a different attribute which had the targeted (XLink) namespace (instead of [`@href`](axes/attribute)).\n\nIn order to accurately grab elements with the XLink `@href` attribute (without also being confined to predefined prefixes in a namespace resolver), one could obtain them as follows:\n\n``` js\nconst xpathEls = 'someElements[@*[local-name() = \"href\" and namespace-uri() = \"http://www.w3.org/1999/xlink\"]]'; // Grabs elements with any single attribute that has both the local name 'href' and the XLink namespace\nconst thislevel = xml.evaluate(xpathEls, xml, null, XPathResult.ANY_TYPE, null);\nlet thisitemEl = thislevel.iterateNext();\n```\n\n#### XPathResult Defined Constants\n\n| Result Type Defined Constant | Value | Description                                                                                                                                                                                          |\n|------------------------------|-------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ANY_TYPE                     | 0     | A result set containing whatever type naturally results from the evaluation of the expression. Note that if the result is a node-set then UNORDERED_NODE_ITERATOR_TYPE is always the resulting type. |\n| NUMBER_TYPE                  | 1     | A result containing a single number. This is useful for example, in an XPath expression using the `count()` function.                                                                                |\n| STRING_TYPE                  | 2     | A result containing a single string.                                                                                                                                                                 |\n| BOOLEAN_TYPE                 | 3     | A result containing a single boolean value. This is useful for example, in an XPath expression using the `not()` function.                                                                           |\n| UNORDERED_NODE_ITERATOR_TYPE | 4     | A result node-set containing all the nodes matching the expression. The nodes may not necessarily be in the same order that they appear in the document.                                             |\n| ORDERED_NODE_ITERATOR_TYPE   | 5     | A result node-set containing all the nodes matching the expression. The nodes in the result set are in the same order that they appear in the document.                                              |\n| UNORDERED_NODE_SNAPSHOT_TYPE | 6     | A result node-set containing snapshots of all the nodes matching the expression. The nodes may not necessarily be in the same order that they appear in the document.                                |\n| ORDERED_NODE_SNAPSHOT_TYPE   | 7     | A result node-set containing snapshots of all the nodes matching the expression. The nodes in the result set are in the same order that they appear in the document.                                 |\n| ANY_UNORDERED_NODE_TYPE      | 8     | A result node-set containing any single node that matches the expression. The node is not necessarily the first node in the document that matches the expression.                                    |\n| FIRST_ORDERED_NODE_TYPE      | 9     | A result node-set containing the first node in the document that matches the expression.                                                                                                             |\n\n## See also\n\n- [XPath](../xpath)\n- [XML Path Language](https://www.xml.com/pub/a/2000/08/holman/index.html?page=2#xpath-info) from *[What is XSLT?](https://www.xml.com/pub/a/2000/08/holman/)* by G. Ken Holman\n\n## Original Document Information\n\n- Based upon an original document by James Graham.\n- Other Contributors: James Thompson.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript](https://developer.mozilla.org/en-US/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript)"
- name: key()
  id: xpath/functions/key
  summary: The key function returns a node-set of nodes that have the given value for the given key
  description: "# key\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `key` function returns a node-set of nodes that have the given value for the given key.\n\n## Syntax\n\n``` notranslate\nkey( keyname, value )\n```\n\n## Arguments\n\n`keyname`  \nA string containing the name of the [`xsl:key`](../../xslt/element/key) element to be used.\n\n`value`  \nThe returned node-set will contain every node that has this value for the given key.\n\n## Returns\n\nA node set.\n\n## Notes\n\n- The [`xsl:key`](../../xslt/element/key) element defines what attribute on what given elements will be used to match the key.\n\nThis function is an XSLT-specific addition to XPath. It is not a part of the core XPath function library.\n\n## Defined\n\n[XSLT 1.0 12.2](https://www.w3.org/TR/1999/REC-xslt-19991116/#function-key)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/key](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/key)"
- name: lang()
  id: xpath/functions/lang
  summary: The lang function determines whether the context node matches the given language and returns boolean true or false
  description: "# lang\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `lang` function determines whether the context node matches the given language and returns boolean true or false.\n\n## Syntax\n\n``` notranslate\nlang(string )\n```\n\n## Arguments\n\n`string`  \nThe language code or localization (language and country) code to be matched.\n\n## Returns\n\n`true` if the context node matches the given languages. Otherwise, `false`.\n\n## Notes\n\n- A node's language is determined by its `xml:lang` attribute. If the current node does not have an `xml:lang` attribute, then the value of the `xml:lang` attribute of the nearest ancestor that has an `xml:lang` attribute will determine the current node's language. If the language cannot be determined (no ancestor has an `xml:lang` attribute), this function will return false.\n- If the given `string` does not specify a country code, this function will match nodes of that language with any country code. The converse is not true.\n\nGiven this fragment of XML:\n\n``` xml\n<p xml:lang=\"en\">I went up a floor.</p>\n<p xml:lang=\"en-GB\">I took the lift.</p>\n<p xml:lang=\"en-US\">I rode the elevator.</p>\n```\n\nAnd this part of an XSL template:\n\n``` xml\n<xsl:value-of select=\"count(//p[lang('en')])\" />\n<xsl:value-of select=\"count(//p[lang('en-GB')])\" />\n<xsl:value-of select=\"count(//p[lang('en-US')])\" />\n<xsl:value-of select=\"count(//p[lang('de')])\" />\n```\n\nThe output might be:\n\n``` notranslate\n3\n1\n1\n0\n```\n\n## Defined\n\n[XPath 1.0 4.3](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-lang)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/lang](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/lang)"
- name: last()
  id: xpath/functions/last
  summary: The last function returns a number equal to the context size from the expression evaluation context
  description: "# last\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `last` function returns a number equal to the context size from the expression evaluation context.\n\n## Syntax\n\n``` notranslate\nlast()\n```\n\n## Returns\n\nAn integer equal to the context size from the expression evaluation context.\n\n## Notes\n\n- This is often used with the [position()](position) function to determine if a particular node is the last in a node-set.\n\n## Defined\n\n[XPath 1.0 4.1](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-last)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/last](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/last)"
- name: local-name()
  id: xpath/functions/local-name
  summary: The local-name function returns a string representing the local name of the first node in a given node-set
  description: "# local-name\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `local-name` function returns a string representing the local name of the first node in a given node-set.\n\n## Syntax\n\n``` notranslate\nlocal-name( [node-set] )\n```\n\n## Arguments\n\n`node-set` (optional)  \nThe local name of the first node in this node-set will be returned. If this argument is omitted, the current context node will be used.\n\n## Returns\n\nA string.\n\n## Notes\n\n- The local name is the local part of an [expanded-name](https://www.w3.org/TR/xpath/#dt-expanded-name).\n\n## Defined\n\n[XPath 1.0 4.1](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-local-name)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/local-name](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/local-name)"
- name: name()
  id: xpath/functions/name
  summary: The name function returns a string representing the QName of the first node in a given node-set
  description: "# name\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `name` function returns a string representing the QName of the first node in a given node-set.\n\n## Syntax\n\n``` notranslate\nname( [node-set] )\n```\n\n## Arguments\n\n`node-set` (optional)  \nThe QName of the first node in this node-set will be returned. If this argument is omitted, the current context node will be used.\n\n## Returns\n\nA string representing the QName of a node.\n\n## Notes\n\n- The [QName](https://www.w3.org/TR/REC-xml-names/#NT-QName) is the node's qualified name, including its namespace prefix and its local name.\n\n## Defined\n\n[XPath 1.0 4.1](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-local-name)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/name](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/name)"
- name: namespace
  id: xpath/axes/namespace
  summary: The namespace axis indicates all the nodes that are in scope for the context node
  description: "# namespace\n\n*(not supported)*\n\nThe `namespace` axis indicates all the nodes that are in scope for the context node. In this case, the context node must be an element node.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/namespace](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/namespace)"
- name: namespace-uri()
  id: xpath/functions/namespace-uri
  summary: The namespace-uri function returns a string representing the namespace URI of the first node in a given node-set
  description: "# namespace-uri\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `namespace-uri` function returns a string representing the namespace URI of the first node in a given node-set.\n\n## Syntax\n\n``` notranslate\nnamespace-uri( [node-set] )\n```\n\n## Arguments\n\n`node-set` (optional)  \nThe namespace URI of the first node in this node-set will be returned. If this argument is omitted, the current context node will be used.\n\n## Returns\n\nA string representing URI of the namespace in which the given node resides.\n\n## Notes\n\n- If the given node does not have a specified namespace, the returned string will be an empty string.\n- For nodes other than element and attribute nodes, the returned string will always be an empty string.\n\n## Defined\n\n[XPath 1.0 4.1](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-local-name)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/namespace-uri](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/namespace-uri)"
- name: normalize-space()
  id: xpath/functions/normalize-space
  summary: The normalize-space function strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string
  description: "# normalize-space\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `normalize-space` function strips leading and trailing white-space from a string, replaces sequences of whitespace characters by a single space, and returns the resulting string.\n\n## Syntax\n\n``` notranslate\nnormalize-space( [string] )\n```\n\n## Arguments\n\n`string` (optional)  \nThe string to be normalized. If omitted, string used will be the same as the context node converted to a string.\n\n## Returns\n\nThe normalized string.\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-normalize-space)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/normalize-space](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/normalize-space)"
- name: not()
  id: xpath/functions/not
  summary: The not function evaluates a boolean expression and returns the opposite value
  description: "# not\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `not` function evaluates a boolean expression and returns the opposite value.\n\n## Syntax\n\n``` notranslate\nnot( expression )\n```\n\n## Arguments\n\n`expression`  \nThe expression is evaluated exactly as if it were passed as an argument to the [boolean()](boolean) function.\n\n## Returns\n\nTrue for an expression that evaluates to false; false for an expression that evaluates to true.\n\n## Notes\n\n- This function should behave similarly to the [boolean()](boolean) function except that it returns the opposite value.\n- You can test if an element doesn't have some attribute.\n  ``` xml\n  <xsl:for-each match=\"//a[not(@name and @name = 'badname')]\">\n    <!-- iterates over any <a> element in the document, that\n          either has no 'name' attribute at all, or it has one,\n          but its value is not \"badname\". -->\n  </xsl:template>\n  ```\n\n## Defined\n\n[XPath 1.0 4.3](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-not)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/not](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/not)"
- name: number()
  id: xpath/functions/number
  summary: The number function converts an object to a number and returns the number
  description: "# number\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `number` function converts an object to a number and returns the number.\n\n## Syntax\n\n``` notranslate\nnumber( [object] )\n```\n\n## Arguments\n\n`object` (optional)  \nThe object to be converted to a number. If this argument is omitted, the current context node will be used.\n\n## Returns\n\nThe resulting number after converting the object.\n\n## Notes\n\n- Strings are converted to a number by stripping the leading whitespace in the string before the number and ignoring whitespace after the number. If the string does not match this pattern, then the string is converted to NaN.\n- Boolean true is converted to 1. False is converted to 0.\n- A node-set is first converted to a string as if by a call to the [string()](string) function and then converted in the same way as a string argument.\n- An object of a type other than the four basic types is converted to a number in a way that is dependent on that type.\n\n## Defined\n\n[XPath 1.0 4.4](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-number)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/number](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/number)"
- name: parent
  id: xpath/axes/parent
  summary: The parent axis indicates the single node that is the parent of the context node
  description: "# parent\n\nThe `parent` axis indicates the single node that is the parent of the context node. It can be abbreviated as two periods (`..`).\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/parent](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/parent)"
- name: PI Parameters
  id: xslt/pi_parameters
  summary: XSLT supports the concept of passing parameters to a stylesheet when executing it
  description: "# PI Parameters\n\n## Overview\n\nXSLT supports the concept of passing parameters to a stylesheet when executing it. This has been possible for a while when using the [XSLTProcessor](https://developer.mozilla.org/en-US/XSLTProcessor) in JavaScript. However when using an `<?xml-stylesheet?>` processing instruction (PI) there used to be no way to provide parameters.\n\nTo solve this two new PIs are implemented in [Firefox 2](https://developer.mozilla.org/en-US/Firefox_2) (see [Supported versions](#supported_versions) below for details), `<?xslt-param?>` and `<?xslt-param-namespace?>`. Both PIs can contain \"pseudo attributes\" the same way that the `xml-stylesheet` PI does.\n\nThe following document passes the two parameters \"color\" and \"size\" to the stylesheet \"style.xsl\".\n\n``` xml\n<?xslt-param name=\"color\" value=\"blue\"?>\n<?xslt-param name=\"size\" select=\"2\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"style.xsl\"?>\n```\n\nNote that these PIs have no effect when transformation is done using the `XSLTProcessor` object in JavaScript.\n\n## Processing instructions\n\nThe attributes in the `xslt-param` and `xslt-param-namespace` PIs are parsed using the rules defined in [xml-stylesheet](https://www.w3.org/TR/xml-stylesheet/). Any unrecognized attributes must be ignored. Parsing of any attribute must not fail due to the presence of an unrecognized attribute as long as that attribute follows the syntax in `xml-stylesheet`.\n\nBoth the `xslt-param` and the `xslt-param-namespace` PIs must appear in the prolog of the document, i.e. before the first element tag. All PIs in the prolog must be honored, both ones occurring before and ones occurring after any `xml-stylesheet` PIs.\n\nIf there are multiple `xml-stylesheet` PIs the parameters apply to all stylesheets as a consequence of that all stylesheets are imported into a single stylesheet per the XSLT spec.reference? Note that multiple `xml-stylesheet` XSLT PIs are not supported in Firefox currently.\n\n#### xslt-param\n\nThe `xslt-param` PI supports 4 attributes:\n\nname  \nThe local-name part of the parameter name. No syntax checking is done on the attribute, however if it is not a valid [NCName](https://www.w3.org/TR/REC-xml-names/#NT-NCName) it will never match any parameter in the stylesheet.\n\nnamespace  \nThe namespace of the parameter name. No syntax checking is done on the attribute.\n\nvalue  \nContains the string value for the parameter. The value of the attribute is used as value for the parameter. The datatype will always be *string*.\n\nselect  \nAn [XPath](https://developer.mozilla.org/en-US/XPath) expression for the parameter. The value of the attribute is parsed as an XPath expression. The result of evaluating the expression is used as value for the parameter.\n\nIf the **name** attribute is missing or empty the PI is ignored.\n\nIf the **namespace** attribute is missing or empty the null namespace is used.\n\nIt is not an error to specify a parameter name that does not exist in the stylesheet (or that is a variable in the stylesheet). The PI is ignored.\n\nIf both **value** and **select** are present or if neither **value** nor **select** are present the PI is ignored.\n\nNote that `value=\"...\"` is not strictly equal to `select=\"'...'\"` since the value can contain both apostrophe and quote characters.\n\n##### Examples\n\nSet the parameter 'color' to the string 'red':\n\n``` xml\n<?xslt-param name=\"color\" value=\"red\"?>\n```\n\nSet the parameter 'columns' to the number 2:\n\n``` xml\n<?xslt-param name=\"columns\" select=\"2\"?>\n```\n\nSet the parameter 'books' to a nodeset containing all `<book>` elements in the null namespace:\n\n``` xml\n<?xslt-param name=\"books\" select=\"//book\"?>\n```\n\nSet the parameter 'show-toc' to boolean `true`:\n\n``` xml\n<?xslt-param name=\"show-toc\" select=\"true()\"?>\n```\n\n##### The select attribute context\n\nThe following context is used to parse and evaluate the expression in the **select** attribute.\n\n- The context node is the node used as initial current node used when executing the stylesheet.\n- The context position is the position of the context node in the initial current node list used when executing the stylesheet.\n- The context size is the size of the initial current node list used when executing the stylesheet.\n- No variables are available.\n- The function library is the standard XPath function library.\n- The namespace declarations are determined by the `xslt-param-namespace` PIs, see below.\n\nIf the **select** attribute fails to parse or execute, the PI is ignored (in particular, it does not fall back to the **value** attribute).\n\n#### xslt-param-namespace\n\nThe `xslt-param-namespace` uses two attributes:\n\nprefix  \nThe prefix that is mapped.\n\nnamespace  \nThe namespace the prefix maps to.\n\nAn `xslt-param-namespace` PI affects the expression in the **select** attribute for all `xslt-param`s following the PI. This applies even if there are other nodes such as comments or other PIs between the `xslt-param-namespace` and `xslt-param` PIs.\n\nIt is not an error for multiple PIs to use the same prefix, every new PI just changes what namespace the prefix maps to.\n\nIf **prefix** is missing, empty, or equals an invalid NCName, the PI is ignored.\n\nIf **namespace** is missing, the PI is ignored. If **namespace** is empty, the prefix mapping is removed.\n\n##### Examples\n\nSet the parameter 'books' to a nodeset containing all `<book>` elements in the '[http://www.example.org/myNamespace](http://www.example.org/myNamespace)' namespace:\n\n``` xml\n<?xslt-param-namespace prefix=\"my\" namespace=\"http://www.example.org/myNamespace\"?>\n<?xslt-param name=\"books\" select=\"//my:book\"?>\n```\n\n## Supported versions\n\nSupported as of Firefox 2.0.0.1. The **value** attribute is supported in Firefox 2, but the **select** attribute crashes for some expressions in the 2.0 release.\n\n## Possible future developments\n\nShould we allow any XSLT functions in the expression? `document()` seems useful, but it seems tricky to maintain the invariant that `generate-id()` should produce the same string for the same document.\n\nWhat about querying URL parameters in the XSLT stylesheet? E.g. Passing them to specified \\<xsl:param\\>'s.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/PI_Parameters](https://developer.mozilla.org/en-US/docs/Web/XSLT/PI_Parameters)"
- name: position()
  id: xpath/functions/position
  summary: The position function returns a number equal to the context position from the expression evaluation context
  description: "# position\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `position` function returns a number equal to the context position from the expression evaluation context.\n\n## Syntax\n\n``` notranslate\nposition()\n```\n\n## Returns\n\nAn integer equal to the context position from the expression evaluation context.\n\n## Notes\n\n- Note that a node's position in a context is not zero-based. The first node has a position of 1.\n- The context is determined by the rest of the path.\n  ``` xml\n  <xsl:template match=\"//a[position() = 5]\">\n    <!-- this template matches the fifth a element\n            anywhere in the document. -->\n  </xsl:template>\n  ```\n\n  ``` xml\n  <xsl:template match=\"//div[@class='foo']/bar[position() = 1]\">\n    <!-- this template matches the first bar element that is\n        a child of a div element with a class attribute equal to \"foo\" -->\n  </xsl:template>\n  ```\n\n## Defined\n\n[XPath 1.0 4.1](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-position)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/position](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/position)"
- name: preceding
  id: xpath/axes/preceding
  summary: The preceding axis indicates all the nodes that precede the context node in the document except any ancestor, attribute and namespace nodes
  description: "# preceding\n\nThe `preceding` axis indicates all the nodes that precede the context node in the document except any `ancestor`, `attribute` and `namespace` nodes.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/preceding](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/preceding)"
- name: preceding-sibling
  id: xpath/axes/preceding-sibling
  summary: The preceding-sibling axis indicates all the nodes that have the same parent as the context node and appear before the context node in the source document
  description: "# preceding-sibling\n\nThe `preceding-sibling` axis indicates all the nodes that have the same parent as the context node and appear before the context node in the source document.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/preceding-sibling](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/preceding-sibling)"
- name: round()
  id: xpath/functions/round
  summary: The round function returns a number that is the nearest integer to the given number
  description: "# round\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `round` function returns a number that is the nearest integer to the given number.\n\n## Syntax\n\n``` notranslate\nround( decimal )\n```\n\n## Arguments\n\n`decimal`  \nThe decimal number to be rounded.\n\n## Returns\n\nThe nearest integer less then, greater than, or equal to `decimal`.\n\n## Notes\n\n- -0.5 rounds to negative zero. 0.4 rounds to positive zero.\n\n## Defined\n\n[XPath 1.0 4.4](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-round)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/round](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/round)"
- name: self
  id: xpath/axes/self
  summary: The self axis indicates the context node itself
  description: "# self\n\nThe `self` axis indicates the context node itself. It can be abbreviated as a single period (`.`).\n\n## Specifications\n\n| Specification                                            |\n|----------------------------------------------------------|\n| [XPath3.1 \\# axes](https://www.w3.org/TR/xpath-31/#axes) |\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/self](https://developer.mozilla.org/en-US/docs/Web/XPath/Axes/self)"
- name: Snippets
  id: xpath/snippets
  summary: This article provides some XPath code snippets — simple examples of how to a few simple utility functions based on standard interfaces from the DOM Level 3 XPath specification that expose XPath functionality to JavaScript code
  description: "# XPath snippets\n\nThis article provides some XPath code snippets — simple examples of how to a few simple **utility functions** based on standard interfaces from the [DOM Level 3 XPath specification](https://www.w3.org/TR/DOM-Level-3-XPath/) that expose XPath functionality to JavaScript code. The snippets are functions you can use in the real world in your own code.\n\n## Node-specific *evaluator* function\n\nThe following custom utility function can be used to evaluate XPath expressions on given XML nodes. The first argument is a DOM node or Document object, while the second is a string defining an XPath expression.\n\n#### Example: Defining a custom node-specific `evaluateXPath()` utility function\n\n``` js\n// Evaluate an XPath expression aExpression against a given DOM node\n// or Document object (aNode), returning the results as an array\n// thanks wanderingstan at morethanwarm dot mail dot com for the\n// initial work.\nfunction evaluateXPath(aNode, aExpr) {\n  const xpe = new XPathEvaluator();\n  const nsResolver = xpe.createNSResolver(aNode.ownerDocument === null ? aNode.documentElement : aNode.ownerDocument.documentElement);\n  const result = xpe.evaluate(aExpr, aNode, nsResolver, 0, null);\n  const found = [];\n  let res;\n  while (res = result.iterateNext())\n    found.push(res);\n  return found;\n}\n```\n\nThis function uses the `new XPathEvaluator()` constructor, which is supported in Firefox, Chrome, Opera and Safari, but not in Edge or Internet Explorer. Scripts in a Web document which might be accessed by Edge or Internet Explorer users should replace the call to `new XPathEvaluator()` with the following fragment:\n\n``` js\n  // XPathEvaluator is implemented on objects that implement Document\n  const xpe = aNode.ownerDocument || aNode;\n```\n\nIn that case the creation of the [XPathNSResolver](https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver) can be simplified as:\n\n``` js\n  const nsResolver = xpe.createNSResolver(xpe.documentElement);\n```\n\nNote however that `createNSResolver` should only be used if you are sure the namespace prefixes in the XPath expression match those in the document you want to query (and that no default namespace is being used (though see [document.createNSResolver](https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver) for a workaround)). Otherwise, you have to provide your own implementation of XPathNSResolver.\n\nIf you are using [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) to read a local or remote XML file into a DOM tree (as described in [Parsing and serializing XML](https://developer.mozilla.org/en-US/docs/Web/Guide/Parsing_and_serializing_XML)), the first argument to `evaluateXPath()` should be `req.responseXML`.\n\n#### Sample usage\n\nAssume we have the following XML document (see also [How to Create a DOM tree](https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/How_to_create_a_DOM_tree) and [Parsing and serializing XML](https://developer.mozilla.org/en-US/docs/Web/Guide/Parsing_and_serializing_XML)):\n\n##### Example: An XML document to use with the custom `evaluateXPath()` utility function\n\n``` xml\n<?xml version=\"1.0\"?>\n<people>\n  <person first-name=\"eric\" middle-initial=\"H\" last-name=\"jung\">\n    <address street=\"321 south st\" city=\"denver\" state=\"co\" country=\"usa\"/>\n    <address street=\"123 main st\" city=\"arlington\" state=\"ma\" country=\"usa\"/>\n  </person>\n\n  <person first-name=\"jed\" last-name=\"brown\">\n    <address street=\"321 north st\" city=\"atlanta\" state=\"ga\" country=\"usa\"/>\n    <address street=\"123 west st\" city=\"seattle\" state=\"wa\" country=\"usa\"/>\n    <address street=\"321 south avenue\" city=\"denver\" state=\"co\" country=\"usa\"/>\n  </person>\n</people>\n```\n\nYou can now \"query\" the document with XPath expressions. Although walking the DOM tree can achieve similar results, using XPath expressions is much quicker and more powerful. If you can rely on `id` attributes, `document.getElementById()` is still powerful, but it's not nearly as powerful as XPath. Here are some examples.\n\n##### Example: JavaScript code with the custom `evaluateXPath()` utility function\n\n``` js\n// display the last names of all people in the doc\nlet results = evaluateXPath(people, \"//person/@last-name\");\nfor (const i in results)\n  console.log(`Person #${i} has the last name ${results[i].value}`);\n\n// get the 2nd person node\nresults = evaluateXPath(people, \"/people/person[2]\");\n\n// get all the person nodes that have addresses in denver\nresults = evaluateXPath(people, \"//person[address/@city='denver']\");\n\n// get all the addresses that have \"south\" in the street name\nresults = evaluateXPath(people,  \"//address[contains(@street, 'south')]\");\nconsole.log(results.length);\n```\n\n## docEvaluateArray\n\nThe following is a simple utility function to get (ordered) XPath results into an array, regardless of whether there is a special need for namespace resolvers, etc. It avoids the more complex syntax of [`document.evaluate()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate) for cases when it is not required as well as the need to use the special iterators on [`XPathResult`](https://developer.mozilla.org/en-US/docs/Web/API/XPathResult) (by returning an array instead).\n\n#### Example: Defining a simple `docEvaluateArray()` utility function\n\n``` js\n// Example usage:\n// const els = docEvaluateArray('//a');\n// console.log(els[0].nodeName); // gives 'A' in HTML document with at least one link\n\nfunction docEvaluateArray (expr, doc, context, resolver) {\n  let i;\n  const a = [];\n  doc = doc || (context ? context.ownerDocument : document);\n  resolver = resolver || null;\n  context = context || doc;\n\n  const result = doc.evaluate(expr, context, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n  for (let i = 0; i < result.snapshotLength; i++) {\n    a.push(result.snapshotItem(i));\n  }\n  return a;\n}\n```\n\n## getXPathForElement\n\nThe following function allows one to pass an element and an XML document to find a unique string XPath expression leading back to that element.\n\n#### Example: Defining a `getXPathForElement()` utility function\n\n``` js\nfunction getXPathForElement(el, xml) {\n  let xpath = '';\n  let pos, tempitem2;\n\n  while (el !== xml.documentElement) {\n    pos = 0;\n    tempitem2 = el;\n    while (tempitem2) {\n      if (tempitem2.nodeType === 1 && tempitem2.nodeName === el.nodeName) { // If it is ELEMENT_NODE of the same name\n        pos += 1;\n      }\n      tempitem2 = tempitem2.previousSibling;\n    }\n\n    xpath = `*[name()='${el.nodeName}' and namespace-uri()='${el.namespaceURI ?? ''}'][${pos}]/${xpath}`;\n\n    el = el.parentNode;\n  }\n  xpath = `/*[name()='${xml.documentElement.nodeName}' and namespace-uri()='${el.namespaceURI ?? ''}']/${xpath}`;\n  xpath = xpath.replace(/\\/$/, '');\n  return xpath;\n}\n```\n\n## Resources\n\n- [XPath](../xpath)\n- [Forum discussion on this topic](https://forums.mozillazine.org/viewtopic.php?t=229106)\n\n## See also\n\n- [Introduction to using XPath in JavaScript](introduction_to_using_xpath_in_javascript)\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Snippets](https://developer.mozilla.org/en-US/docs/Web/XPath/Snippets)"
- name: starts-with()
  id: xpath/functions/starts-with
  summary: The starts-with checks whether the first string starts with the second string and returns true or false
  description: "# starts-with\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `starts-with` checks whether the first string starts with the second string and returns true or false.\n\n## Syntax\n\n``` notranslate\nstarts-with(haystack, needle)\n```\n\n## Arguments\n\n`haystack`  \nThe string to look in.\n\n`needle`  \nThe string to look for.\n\n## Returns\n\n`true` if `haystack` starts with `needle`. Otherwise, `false`.\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-starts-with)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/starts-with](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/starts-with)"
- name: string()
  id: xpath/functions/string
  summary: The string function converts the given argument to a string
  description: "# string\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `string` function converts the given argument to a string.\n\n## Syntax\n\n``` notranslate\nstring( [object] )\n```\n\n## Arguments\n\n`object` (optional)  \nThe object to convert to a string. If omitted, the context node is used.\n\n## Returns\n\nA string\n\n## Notes\n\n- If the object is a node-set, the string value of the first node in the set is returned.\n- A number is converted as follows:\n  - NaN is converted to the string NaN.\n  - Positive zero is converted to the string 0.\n  - Negative zero is converted to the string 0.\n  - Positive infinity is converted to the string Infinity.\n  - Negative infinity is converted to the string -Infinity.\n  - Decimal numbers between -1 and 1 are converted to a string with a single leading 0 before the decimal point.\n  - Boolean true is converted to the string true.\n  - Boolean false is converted to the string false.\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-string)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/string](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/string)"
- name: string-length()
  id: xpath/functions/string-length
  summary: The string-length function returns a number equal to the number of characters in a given string
  description: "# string-length\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `string-length` function returns a number equal to the number of characters in a given string.\n\n## Syntax\n\n``` notranslate\nstring-length( [string] )\n```\n\n## Arguments\n\n`string` (optional)  \nThe string to evaluate. If omitted, string used will be the same as the context node converted to a string.\n\n## Returns\n\nAn integer equal to the number of characters in the string.\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-string-length)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/string-length](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/string-length)"
- name: substring()
  id: xpath/functions/substring
  summary: The substring function returns a part of a given string
  description: "# substring\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `substring` function returns a part of a given string.\n\n## Syntax\n\n``` notranslate\nsubstring(string, start)\nsubstring(string, start, length)\n```\n\n## Arguments\n\n`string`  \nThe string to evaluate.\n\n`start`  \nThe position within `string` the substring begins\n\n`length` Optional  \nThe length of the substring. If omitted, the returned string will contain every character from the `start` position to the end of `string`.\n\n## Returns\n\nA string.\n\n## Notes\n\nAs in other XPath functions, the position is not zero-based. The first character in the string has a position of 1, not 0.\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-substring)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/substring](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/substring)"
- name: substring-after()
  id: xpath/functions/substring-after
  summary: The substring-after function returns a string that is the rest of a given string after a given substring
  description: "# substring-after\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `substring-after` function returns a string that is the rest of a given string after a given substring.\n\n## Syntax\n\n``` notranslate\nsubstring-after( haystack, needle )\n```\n\n## Arguments\n\n`haystack`  \nThe string to be evaluated. Part of this string will be returned.\n\n`needle`  \nThe substring to search for. Everything after the first occurrence of `needle` in `haystack` will be returned.\n\n## Returns\n\nA string.\n\n## Examples\n\n| XPath Example                  | Output         |\n|--------------------------------|----------------|\n| `substring-after('aa-bb','-')` | `bb`           |\n| `substring-after('aa-bb','a')` | `a-bb`         |\n| `substring-after('aa-bb','b')` | `b`            |\n| `substring-after('aa-bb','q')` | (empty string) |\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-substring-after)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/substring-after](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/substring-after)"
- name: substring-before()
  id: xpath/functions/substring-before
  summary: The substring-before function returns a string that is the part of a given string before a given substring
  description: "# substring-before\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `substring-before` function returns a string that is the part of a given string before a given substring.\n\n## Syntax\n\n``` notranslate\nsubstring-before( haystack, needle )\n```\n\n## Arguments\n\n`haystack`  \nThe string to be evaluated. Part of this string will be returned.\n\n`needle`  \nThe substring to search for. Everything before the first occurrence of `needle` in `haystack` will be returned.\n\n## Returns\n\nA string.\n\n## Examples\n\n| XPath Example                   | Output           |\n|---------------------------------|------------------|\n| `substring-before('aa-bb','-')` | `aa`             |\n| `substring-before('aa-bb','a')` | `(empty string)` |\n| `substring-before('aa-bb','b')` | `aa-`            |\n| `substring-before('aa-bb','q')` | (empty string)   |\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-substring-before)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/substring-before](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/substring-before)"
- name: sum()
  id: xpath/functions/sum
  summary: The sum function returns a number that is the sum of the numeric values of each node in a given node-set
  description: "# sum\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `sum` function returns a number that is the sum of the numeric values of each node in a given node-set.\n\n## Syntax\n\n``` notranslate\nsum(node-set)\n```\n\n## Arguments\n\n`node-set`  \nThe node-set to be evaluated. Each node in this node-set is evaluated as if it were passed to the [number()](number) function, and a sum of the resulting numbers is returned.\n\n## Returns\n\nA number.\n\n## Notes\n\n*(None)*\n\n## Defined\n\n[XPath 1.0 4.3](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-sum)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/sum](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/sum)"
- name: system-property()
  id: xpath/functions/system-property
  summary: The system-property function returns an object representing the given system-property
  description: "# system-property\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `system-property` function returns an object representing the given system-property.\n\n## Syntax\n\n``` notranslate\nsystem-property(name)\n```\n\n## Arguments\n\n`name` (optional)  \nThe name of the system property. The argument must evaluate to a string that is a QName. The QName is expanded into a name using the namespace declarations in scope for the expression. The system-property function returns an object representing the value of the system property identified by the name. If there is no such system property, the empty string should be returned.\n\n## Returns\n\nAn object representing the given system-property.\n\n## Notes\n\n- xsl:version, a number giving the version of XSLT implemented by the processor; for XSLT processors implementing the version of XSLT specified by this document, this is the number 1.0\n- xsl:vendor, a string identifying the vendor of the XSLT processor\n- xsl:vendor-url, a string containing a URL identifying the vendor of the XSLT processor; typically this is the host page (home page) of the vendor's Web site.\n\n## Defined\n\n[XSLT 1.0 12.4](https://www.w3.org/TR/1999/REC-xslt-19991116/#function-system-property)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/system-property](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/system-property)"
- name: Transforming XML with An Overview
  id: xslt/transforming_xml_with_xslt/an_overview
  summary: The eXtensible Stylesheet Language/Transform is a very powerful language, and a complete discussion of it is well beyond the scope of this article, but a brief discussion of some basic concepts will be helpful in understanding the description of Netscape's capabilities that follows
  description: "# An Overview\n\n[« Transforming XML with XSLT](../transforming_xml_with_xslt)\n\nThe eXtensible Stylesheet Language/Transform is a very powerful language, and a complete discussion of it is well beyond the scope of this article, but a brief discussion of some basic concepts will be helpful in understanding the description of Netscape's capabilities that follows.\n\nAn XSLT stylesheet is an XML document.  \nUnlike CSS, which has its own specialized syntax, an XSLT stylesheet is an XML document, which must conform to all XML rules, including well-formedness. So the model for transformation is that one XML document is used to transform another XML document.\n\nAn XSLT stylesheet is marked as such by the inclusion of a standard XSLT heading.  \nThe outermost element in an XSLT stylesheet must be the `<xsl:stylesheet>` element (an acceptable alternate is the `<xsl:transform>` element). This element will include at least one namespace declaration and the mandatory version attribute. Other namespaces and three optional attributes may also be included.\n\nThe mandatory namespace for XSLT is `\"http://www.w3.org/1999/XSL/Transform\"`.  \nNamespaces are the subject of a fair amount of confusion in XML. Despite the fact that very often namespaces appear to be URIs, they do not, in fact, refer to a resource located at that address. Instead they are a way of specifying a unique identifier for a known set of elements. The string `\"http://www.w3.org/1999/XSL/Transform\"` is a constant that designates the elements so marked as belonging to the set of tags designated by the W3C in the 1999 XSLT Recommendation. Another string that is occasionally seen in stylesheets, `\"http://www.w3.org/TR/WD-xsl\"`, indicates compliance with an earlier working draft (hence the WD) of the W3C document. This latter namespace is not compatible with the one that the W3C eventually adopted and is not supported by Netscape.\n\nBecause typing `\"http://www.w3.org/1999/XSL/Transform\"` repeatedly would be tedious and would render the markup difficult to read, there is a standard mechanism for assigning a shorthand name to the namespace in the stylesheet heading. Thus a full example of the opening stylesheet element might look like this.\n\n`<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\">`  \nThe xmlns pseudo-attribute maps the shorthand name xsl onto the full namespace for use throughout the document that follows. Thus the stylesheet element above is prefixed with `xsl:`. Although xsl is the conventionally used shorthand name (called the prefix), it is not mandatory and it is quite possible to choose a different one. The examples in this article all assume the use of the xsl prefix.\n\nAll XSLT transformations are performed on trees, not documents.  \nThe XSLT transformation engine, called the processor, does not work directly on documents. Before transformation can take place, the primary XML document(s) and the stylesheet document(s) must be run through a parser, which creates an abstract representation of the structure of the document in memory. This representation, called the tree, is what is actually manipulated by the processor. The tree is an abstract datatype, a conceptual model which can be implemented in various ways depending on the parser and the processor. :Netscape's uses a structure similar to the W3C DOM as its tree structure, but others are possible. The only requirements concern the disposition of objects in the tree, their properties, and their relationships.\n\nThe tree consists of a hierarchical framework of nodes. It can be made up of seven different types of nodes: the single root node, element nodes, text nodes, attribute nodes, comment nodes, processing instruction nodes, and namespace nodes.\n\nAt the top of the tree is the root node. The root node does not correspond to any individual part of the XML document: it represents the document as whole. Below the root node are its children, which can be elements, comments, processing instructions and so on. Some of those children may also have children. And this can continue for several levels. There are certain constraints on which type of nodes can occur where: for example, text nodes can have no children.\n\nThe result of the processor's action is also a tree. Netscape uses this tree to render the contents in the browser window.\n\nXSLT is a high-level declarative language.  \nIn essence, an XSLT stylesheet is a set of rules, called templates, which declare that any node that matches this specific pattern should be manipulated in this specific way and end up in this specific position in the result tree. The particulars of how this is to be accomplished are left up to the processor. Because the order of execution of the stylesheet cannot be guaranteed, XSLT does not support any functionality that produces side-effects. In this it is like Lisp or Scheme.\n\nLocations on the tree are specified using XPath, another W3C Recommendation.  \nTransformations depend on the processor's being able to pinpoint individual nodes on the tree. To facilitate this, the W3C decided to use a separate language, XPath, which also has uses outside the XSLT context. As its name implies, XPath defines a \"path\" the processor must take through the tree to arrive at the desired node. This path consists of XPath-specific expressions to be evaluated, expressions which may include a number of conditions to be matched, a way of associating nodes, and/or an indication of directionality within the tree. A fuller description of the parts of XPath most commonly used in XSLT follows in the reference section.\n\nPotential conflicts in template matching are resolved by using a set of cascading precedence rules.  \nIn general, a more specific template rule takes precedence over a less specific one and, other things being equal, a template rule that appears later in the document takes precedence over one that appears earlier.\n\nStylesheets can be attached to an XML document via a processing instruction.  \nThe simplest way to indicate which XSLT stylesheet should be used to process a particular XML document is to include a processing instruction in the XML document itself. For example, if the stylesheet is called inventory.xsl and resides in the same directory as the XML document, the processing instruction in the XML document would look like this:\n\n`<?xml-stylesheet type=\"text/xml\" href=\"inventory.xsl\"?>`  \nThis must be placed in the prolog section of the XML document.\n\nTo learn more about XSLT and XPath, see the [For Further Reading](https://developer.mozilla.org/en-US/Transforming_XML_with_XSLT/For_Further_Reading) section at the end of this article.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Transforming_XML_with_XSLT/An_Overview](https://developer.mozilla.org/en-US/docs/Web/XSLT/Transforming_XML_with_XSLT/An_Overview)"
- name: Transforming XML with For Further Reading
  id: xslt/transforming_xml_with_xslt/for_further_reading
  summary: © 2005–2022 MDN contributors
  description: "# For Further Reading\n\n[« Transforming XML with XSLT](../transforming_xml_with_xslt)\n\n## Print\n\n## Books\n\n- **XSLT: Programmer's Reference, Second Edition**\n  - **Author**: Michael H. Kay\n  - **Length**: 992 pages\n  - **Publisher**: Wrox; 2 edition (May 3, 2001)\n  - **ISBN**: 0764543814\n    - Michael Kay is a member of the W3C XSL Working Group and the developer of his own open-source XSLT processor, Saxon. He is also the author of the only book on this subject to have reached a second edition. This is a very big book, well laid out, and exhaustive, if sometimes exhausting, in detail, covering every possible base in the XSLT story.\n\n[https://www.amazon.com/XSLT-Programmers-Reference-Programmer/dp/0764543814](https://www.amazon.com/XSLT-Programmers-Reference-Programmer/dp/0764543814)\n\n- **XSLT**\n  - **Author**: Doug Tidwell\n  - **Length**: 473 pages\n  - **Publisher**: O'Reilly Media; 1 edition (August 15, 2001)\n  - **ISBN**: 0596000537\n    - Doug Tidwell is a senior developer at IBM and a prominent evangelist for XML technologies generally. He is the author of several articles and tutorials on various aspects of XML at IBM's extensive XML developer site. This book is somewhat less comprehensive than Michael Kay's, but it covers the basics well, and offers some intriguing examples.\n\n[https://www.amazon.com/Xslt-Doug-Tidwell/dp/0596000537](https://www.amazon.com/Xslt-Doug-Tidwell/dp/0596000537)\n\n- **Learning XML, Second Edition**\n  - **Author**: Erik T. Ray\n  - **Length**: 432 pages\n  - **Publisher**: O'Reilly Media; 2 edition (September 22, 2003)\n  - **ISBN**: 0596004206\n    - As the title indicates, this is an overview of XML generally. Chapter 6 is devoted specifically to XSLT.\n\n[https://www.amazon.com/gp/product/0596004206](https://www.amazon.com/gp/product/0596004206)\n\n## Digital\n\n## Websites\n\n- **World Wide Web Consortium**\n  - **The W3C homepage**: [https://www.w3.org](https://www.w3.org)\n  - **The main XSL page**: [https://www.w3.org/Style/XSL/](https://www.w3.org/Style/XSL/)\n  - **XSLT specifications overview**: [https://www.w3.org/TR/xslt/](https://www.w3.org/TR/xslt/)\n  - **Archive of public style (CSS and XSLT) discussions**: [https://lists.w3.org/Archives/Public/www-style/](https://lists.w3.org/Archives/Public/www-style/)\n  - **XPath specifications overview**: [https://www.w3.org/TR/xpath/](https://www.w3.org/TR/xpath/)\n    - The World Wide Web Consortium is the body that publishes Recommendations for a number of web-based technologies, many of which become the de-facto standard.\n\n## Articles\n\n- [Hands-on XSL](https://www.ibm.com/developerworks/library/x-hands-on-xsl/) by Don R. Day\n- [What is XSLT?](https://www.xml.com/pub/a/2000/08/holman/index.html) by G. Ken Holman\n\n## Tutorials/Examples\n\n- [Jeni's XSLT Pages](https://www.jenitennison.com/xslt/)\n- [XMLPitstop.com](https://web.archive.org/web/20211209064736/https://www.xmlpitstop.com/default_datatype_SSC.html)\n- [XSL Tutorial](https://nwalsh.com/docs/tutorials/xsl/)\n\n## Other\n\n- [Extensible Stylesheet Language (XSL)](http://xml.coverpages.org/xsl.html)\n- **XSL-List**\n  - **Subscribe**: [https://www.mulberrytech.com/xsl/xsl-list/index.html](https://www.mulberrytech.com/xsl/xsl-list/index.html)\n  - **Archives**: [https://www.biglist.com/lists/xsl-list/archives/](https://www.biglist.com/lists/xsl-list/archives/)\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Transforming_XML_with_XSLT/For_Further_Reading](https://developer.mozilla.org/en-US/docs/Web/XSLT/Transforming_XML_with_XSLT/For_Further_Reading)"
- name: Transforming XML with The Netscape XSLT XPath Reference
  id: xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference
  summary: The following is an alphabetized and annotated list of the elements, axes, and functions from the W3C's 1.0 Recommendation for XSLT, as well as from the appropriate sections of the XPath Recommendation
  description: "# The Netscape XSLT/XPath Reference\n\nThe following is an alphabetized and annotated list of the elements, axes, and functions from the W3C's 1.0 Recommendation for XSLT, as well as from the appropriate sections of the XPath Recommendation. Development of the XSLT processor is ongoing, and this document will be updated as functionality is expanded.\n\n## Elements\n\n- [xsl:apply-imports](../element/apply-imports) *(supported)*\n- [xsl:apply-templates](../element/apply-templates) *(supported)*\n- [xsl:attribute](../element/attribute) *(supported)*\n- [xsl:attribute-set](../element/attribute-set) *(supported)*\n- [xsl:call-template](../element/call-template) *(supported)*\n- [xsl:choose](../element/choose) *(supported)*\n- [xsl:comment](../element/comment) *(supported)*\n- [xsl:copy](../element/copy) *(supported)*\n- [xsl:copy-of](../element/copy-of) *(supported)*\n- [xsl:decimal-format](../element/decimal-format) *(supported)*\n- [xsl:element](../element) *(supported)*\n- [xsl:fallback](../element/fallback) *(not supported)*\n- [xsl:for-each](../element/for-each) *(supported)*\n- [xsl:if](../element/if) *(supported)*\n- [xsl:import](../element/import) *(mostly supported)*\n- [xsl:include](../element/include) *(supported)*\n- [xsl:key](../element/key) *(supported)*\n- [xsl:message](../element/message) *(supported)*\n- [xsl:namespace-alias](../element/namespace-alias) *(not supported)*\n- [xsl:number](../element/number) *(partially supported)*\n- [xsl:otherwise](../element/otherwise) *(supported)*\n- [xsl:output](../element/output) *(partially supported)*\n- [xsl:param](../element/param) *(supported)*\n- [xsl:preserve-space](../element/preserve-space) *(supported)*\n- [xsl:processing-instruction](../element/processing-instruction)\n- [xsl:sort](../element/sort) *(supported)*\n- [xsl:strip-space](../element/strip-space) *(supported)*\n- [xsl:stylesheet](../element/stylesheet) *(partially supported)*\n- [xsl:template](../element/template) *(supported)*\n- [xsl:text](../element/text) *(partially supported)*\n- [xsl:transform](../element/transform) *(supported)*\n- [xsl:value-of](../element/value-of) *(partially supported)*\n- [xsl:variable](../element/variable) *(supported)*\n- [xsl:when](../element/when) *(supported)*\n- [xsl:with-param](../element/with-param) *(supported)*\n\n## Axes\n\n- [ancestor](../../xpath/axes/ancestor)\n- [ancestor-or-self](../../xpath/axes/ancestor-or-self)\n- [attribute](../../xpath/axes/attribute)\n- [child](../../xpath/axes/child)\n- [descendant](../../xpath/axes/descendant)\n- [descendant-or-self](../../xpath/axes/descendant-or-self)\n- [following](../../xpath/axes/following)\n- [following-sibling](../../xpath/axes/following-sibling)\n- [namespace](../../xpath/axes/namespace) *(not supported)*\n- [parent](../../xpath/axes/parent)\n- [preceding](../../xpath/axes/preceding)\n- [preceding-sibling](../../xpath/axes/preceding-sibling)\n- [self](../../xpath/axes/self)\n\n## Functions\n\n- [boolean()](../../xpath/functions/boolean) *(supported)*\n- [ceiling()](../../xpath/functions/ceiling) *(supported)*\n- [concat()](../../xpath/functions/concat) *(supported)*\n- [contains()](../../xpath/functions/contains) *(supported)*\n- [count()](../../xpath/functions/count) *(supported)*\n- [current()](../../xpath/functions/current) *(supported)*\n- [document()](../../xpath/functions/document) *(supported)*\n- [element-available()](../../xpath/functions/element-available) *(supported)*\n- [false()](../../xpath/functions/false) *(supported)*\n- [floor()](../../xpath/functions/floor) *(supported)*\n- [format-number()](../../xpath/functions/format-number) *(supported)*\n- [function-available()](../../xpath/functions/function-available) *(supported)*\n- [generate-id()](../../xpath/functions/generate-id) *(supported)*\n- [id()](../../xpath/functions/id) *(partially supported)*\n- [key()](../../xpath/functions/key) *(supported)*\n- [lang()](../../xpath/functions/lang) *(supported)*\n- [last()](../../xpath/functions/last) *(supported)*\n- [local-name()](../../xpath/functions/local-name) *(supported)*\n- [name()](../../xpath/functions/name) *(supported)*\n- [namespace-uri()](../../xpath/functions/namespace-uri) *(supported)*\n- [normalize-space()](../../xpath/functions/normalize-space) *(supported)*\n- [not()](../../xpath/functions/not) *(supported)*\n- [number()](../../xpath/functions/number) *(supported)*\n- [position()](../../xpath/functions/position) *(supported)*\n- [round()](../../xpath/functions/round) *(supported)*\n- [starts-with()](../../xpath/functions/starts-with) *(supported)*\n- [string()](../../xpath/functions/string) *(supported)*\n- [string-length()](../../xpath/functions/string-length) *(supported)*\n- [substring()](../../xpath/functions/substring) *(supported)*\n- [substring-after()](../../xpath/functions/substring-after) *(supported)*\n- [substring-before()](../../xpath/functions/substring-before) *(supported)*\n- [sum()](../../xpath/functions/sum) *(supported)*\n- [system-property()](../../xpath/functions/system-property) *(supported)*\n- [translate()](../../xpath/functions/translate) *(supported)*\n- [true()](../../xpath/functions/true) *(supported)*\n- [unparsed-entity-url()](../../xpath/functions/unparsed-entity-url) *(not supported)*\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Transforming_XML_with_XSLT/The_Netscape_XSLT_XPath_Reference](https://developer.mozilla.org/en-US/docs/Web/XSLT/Transforming_XML_with_XSLT/The_Netscape_XSLT_XPath_Reference)"
- name: Transforming XML with XSLT
  id: xslt/transforming_xml_with_xslt
  summary: The separation of content and presentation is a key design feature of XML
  description: "# Transforming XML with XSLT\n\n**[XSLT/XPath Reference](transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../xpath/functions), [XPath axes](../xpath/axes)\n\n## An Overview\n\n[An Overview](transforming_xml_with_xslt/an_overview)\n\nThe separation of content and presentation is a key design feature of [XML](https://developer.mozilla.org/en-US/docs/Web/XML). The structure of an XML document is designed to reflect and clarify important relationships among the individual aspects of the content itself, unhindered by a need to provide any indication about how this data should eventually be presented. This intelligent structuring is particularly important as more and more data transfers are automated and take place between highly heterogeneous machines linked by a network.\n\nYet eventually much of the content stored in XML documents will need to be presented to human readers. Because a browser provides a familiar and highly flexible interface, it is an ideal mechanism for delivering such presentation versions of XML content. Built from the ground up utilizing a wide variety of XML technologies, Firefox incorporates within itself all of the mechanisms needed to process both original XML documents and the specialized stylesheets used to style and lay them out for HTML display, reducing server load with client-side processing.\n\nAt present, Gecko (the layout engine behind Firefox) supports two forms of XML stylesheets. For basic control of appearance — fonts, colors, position, and so forth — Gecko uses [CSS](https://developer.mozilla.org/en-US/docs/Web/CSS).\n\nOur focus here is on the second type of stylesheet that Gecko supports: the XSLT stylesheet. XSLT stands for eXtensible Stylesheet Language/Transform and the name is apt. XSLT allows a stylesheet author to transform a primary XML document in two significant ways: manipulating and sorting the content, including a wholesale reordering of it if so desired, and transforming the content into a different format (and in the case of Firefox, the focus is on converting it on the fly into HTML which can then be displayed by the browser).\n\n## XSLT/XPath reference\n\n## Elements\n\n[Elements](element)\n\n- [xsl:apply-imports](element/apply-imports) *(supported)*\n- [xsl:apply-templates](element/apply-templates) *(supported)*\n- [xsl:attribute](element/attribute) *(supported)*\n- [xsl:attribute-set](element/attribute-set) *(supported)*\n- [xsl:call-template](element/call-template) *(supported)*\n- [xsl:choose](element/choose) *(supported)*\n- [xsl:comment](element/comment) *(supported)*\n- [xsl:copy](element/copy) *(supported)*\n- [xsl:copy-of](element/copy-of) *(supported)*\n- [xsl:decimal-format](element/decimal-format) *(supported)*\n- [xsl:element](element/element) *(supported)*\n- [xsl:fallback](element/fallback) *(not supported)*\n- [xsl:for-each](element/for-each) *(supported)*\n- [xsl:if](element/if) *(supported)*\n- [xsl:import](element/import) *(mostly supported)*\n- [xsl:include](element/include) *(supported)*\n- [xsl:key](element/key) *(supported)*\n- [xsl:message](element/message) *(supported)*\n- [xsl:namespace-alias](element/namespace-alias) *(not supported)*\n- [xsl:number](element/number) *(partially supported)*\n- [xsl:otherwise](element/otherwise) *(supported)*\n- [xsl:output](element/output) *(partially supported)*\n- [xsl:param](element/param) *(supported)*\n- [xsl:preserve-space](element/preserve-space) *(supported)*\n- [xsl:processing-instruction](element/processing-instruction)\n- [xsl:sort](element/sort) *(supported)*\n- [xsl:strip-space](element/strip-space) *(supported)*\n- [xsl:stylesheet](element/stylesheet) *(partially supported)*\n- [xsl:template](element/template) *(supported)*\n- [xsl:text](element/text) *(partially supported)*\n- [xsl:transform](element/transform) *(supported)*\n- [xsl:value-of](element/value-of) *(partially supported)*\n- [xsl:variable](element/variable) *(supported)*\n- [xsl:when](element/when) *(supported)*\n- [xsl:with-param](element/with-param) *(supported)*\n\n## Axes\n\n[Axes](../xpath/axes)\n\n- [ancestor](../xpath/axes/ancestor)\n- [ancestor-or-self](../xpath/axes/ancestor-or-self)\n- [attribute](../xpath/axes/attribute)\n- [child](../xpath/axes/child)\n- [descendant](../xpath/axes/descendant)\n- [descendant-or-self](../xpath/axes/descendant-or-self)\n- [following](../xpath/axes/following)\n- [following-sibling](../xpath/axes/following-sibling)\n- [namespace](../xpath/axes/namespace) *(not supported)*\n- [parent](../xpath/axes/parent)\n- [preceding](../xpath/axes/preceding)\n- [preceding-sibling](../xpath/axes/preceding-sibling)\n- [self](../xpath/axes/self)\n\n## Functions\n\n[Functions](../xpath/functions)\n\n- [boolean()](../xpath/functions/boolean) *(supported)*\n- [ceiling()](../xpath/functions/ceiling) *(supported)*\n- [concat()](../xpath/functions/concat) *(supported)*\n- [contains()](../xpath/functions/contains) *(supported)*\n- [count()](../xpath/functions/count) *(supported)*\n- [current()](../xpath/functions/current) *(supported)*\n- [document()](../xpath/functions/document) *(supported)*\n- [element-available()](../xpath/functions/element-available) *(supported)*\n- [false()](../xpath/functions/false) *(supported)*\n- [floor()](../xpath/functions/floor) *(supported)*\n- [format-number()](../xpath/functions/format-number) *(supported)*\n- [function-available()](../xpath/functions/function-available) *(supported)*\n- [generate-id()](../xpath/functions/generate-id) *(supported)*\n- [id()](../xpath/functions/id) *(partially supported)*\n- [key()](../xpath/functions/key) *(supported)*\n- [lang()](../xpath/functions/lang) *(supported)*\n- [last()](../xpath/functions/last) *(supported)*\n- [local-name()](../xpath/functions/local-name) *(supported)*\n- [name()](../xpath/functions/name) *(supported)*\n- [namespace-uri()](../xpath/functions/namespace-uri) *(supported)*\n- [normalize-space()](../xpath/functions/normalize-space) *(supported)*\n- [not()](../xpath/functions/not) *(supported)*\n- [number()](../xpath/functions/number) *(supported)*\n- [position()](../xpath/functions/position) *(supported)*\n- [round()](../xpath/functions/round) *(supported)*\n- [starts-with()](../xpath/functions/starts-with) *(supported)*\n- [string()](../xpath/functions/string) *(supported)*\n- [string-length()](../xpath/functions/string-length) *(supported)*\n- [substring()](../xpath/functions/substring) *(supported)*\n- [substring-after()](../xpath/functions/substring-after) *(supported)*\n- [substring-before()](../xpath/functions/substring-before) *(supported)*\n- [sum()](../xpath/functions/sum) *(supported)*\n- [system-property()](../xpath/functions/system-property) *(supported)*\n- [translate()](../xpath/functions/translate) *(supported)*\n- [true()](../xpath/functions/true) *(supported)*\n- [unparsed-entity-url()](../xpath/functions/unparsed-entity-url) *(not supported)*\n\n## For Further Reading\n\n[For Further Reading](transforming_xml_with_xslt/for_further_reading)\n\n- [Books](transforming_xml_with_xslt/for_further_reading#books)\n- [Digital](transforming_xml_with_xslt/for_further_reading#digital)\n  - [Websites](transforming_xml_with_xslt/for_further_reading#websites)\n  - [Articles](transforming_xml_with_xslt/for_further_reading#articles)\n  - [Tutorials/Examples](transforming_xml_with_xslt/for_further_reading#tutorials.2fexamples)\n  - [Other](transforming_xml_with_xslt/for_further_reading#other)\n\n## Original Document Information\n\n- Copyright Information: Copyright © 2001-2003 Netscape. All rights reserved.\n- Note: This reprinted article was originally part of the DevEdge site.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Transforming_XML_with_XSLT](https://developer.mozilla.org/en-US/docs/Web/XSLT/Transforming_XML_with_XSLT)"
- name: translate()
  id: xpath/functions/translate
  summary: The translate function evaluates a string and a set of characters to translate and returns the translated string
  description: "# translate\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `translate` function evaluates a string and a set of characters to translate and returns the translated string.\n\n## Syntax\n\n``` notranslate\ntranslate(string, abc, XYZ)\n```\n\n## Arguments\n\n`string`  \nThe string to evaluate.\n\n`abc`  \nThe string of characters that will be replaced.\n\n`XYZ`  \nThe string of characters used for replacement. The first character in `XYZ` will replace every occurrence of the first character in `abc` that appears in `string`.\n\n## Returns\n\nThe translated string.\n\n## Notes\n\nXPath notes that the translate function is not a sufficient solution for case conversion in all languages. A future version of XPath may provide additional functions for case conversion.\n\nHowever, this is the closest we have at present to a function that can convert a string to uppercase or lowercase.\n\nExample\n\n``` xml\n<xsl:value-of select=\"translate('The quick brown fox.', 'abcdefghijklmnopqrstuvwxyz', 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')\" />\n```\n\nOutput\n\n``` notranslate\nTHE QUICK BROWN FOX.\n```\n\n- If `abc` is longer than `XYZ`, then every occurrence of characters in `abc` that do not have a corresponding character in `XYZ` will be removed.\n\nExample\n\n``` xml\n<xsl:value-of select=\"translate('The quick brown fox.', 'brown', 'red')\" />\n```\n\nOutput\n\n``` notranslate\nThe quick red fdx.\n```\n\n- If `XYZ` contains more characters than `abc`, the extra characters are ignored.\n\n## Defined\n\n[XPath 1.0 4.2](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-translate)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/translate](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/translate)"
- name: true()
  id: xpath/functions/true
  summary: The true function returns a boolean value of true
  description: "# true\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `true` function returns a boolean value of true.\n\n## Syntax\n\n``` notranslate\ntrue()\n```\n\n## Returns\n\nBoolean `true`.\n\n## Defined\n\n[XPath 1.0 4.3](https://www.w3.org/TR/1999/REC-xpath-19991116/#function-true)\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/true](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/true)"
- name: unparsed-entity-url()
  id: xpath/functions/unparsed-entity-url
  summary: The unparsed-entity-url() function returns the URI of the unparsed entity with the given name
  description: "# unparsed-entity-url\n\n**[XSLT/XPath Reference](../../xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../../xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../functions), [XPath axes](../axes)\n\nThe `unparsed-entity-url()` function returns the URI of the unparsed entity with the given name. This is non-XML data referenced in the DTD of the source document.\n\n## Syntax\n\n``` notranslate\nstring unparsed-entity-url(string)\n```\n\n## Arguments\n\nThe name of the unparsed entity. If the argument is not a string, it is converted using the rules of the string() function. The name should be an XML Name.\n\n## Returns\n\nThe URI of the unparsed entity retrieved from the DTD, if it exists. Otherwise an empty string.\n\n## Defined\n\n[XSLT 1.0 12.4](https://www.w3.org/TR/1999/REC-xslt-19991116/#function-unparsed-entity-uri)\n\n## Gecko support\n\nNot supported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/unparsed-entity-url](https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/unparsed-entity-url)"
- name: Using the Mozilla JavaScript interface to XSL Transformations
  id: xslt/using_the_mozilla_javascript_interface_to_xsl_transformations
  summary: Before you can use it, you must import a stylesheet with the XSLTProcessor.importStylesheet() method
  description: "# Using the Mozilla JavaScript interface to XSL Transformations\n\nThis document describes the JavaScript interface in Mozilla 1.2 and up to the XSLT Processing Engine (TransforMiiX).\n\n## Creating an XSLTProcessor\n\nTo start, you need to create an [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) object:\n\n``` js\nconst processor = new XSLTProcessor();\n```\n\n## Specifying the stylesheet\n\nBefore you can use it, you must import a stylesheet with the `XSLTProcessor.importStylesheet()` method. It has a single parameter, which is the DOM Node of the XSLT stylesheet to import.\n\n**Note:** The import is live, meaning that if you alter the stylesheet DOM after importing it, this will be reflected in the processing. Rather than modifying the DOM it is recommended to use stylesheet parameters which are usually easier and can give better performance.\n\n``` js\nconst testTransform = document.implementation.createDocument(\"\", \"test\", null);\n\n// Just an example to get a transform into a script as a DOM\n// XMLDocument.load is asynchronous, so all processing happens in the\n// onload handler\ntestTransform.addEventListener(\"load\", onload, false);\ntestTransform.load(\"test-transform.xml\");\nfunction onload() {\n  processor.importStylesheet(testTransform);\n}\n```\n\n`XSLTProcessor.importStylesheet()` requires one argument, a DOM Node. If that node is a document node, you can pass in a full XSL Transform or a [literal result element transform](https://www.w3.org/TR/xslt/#result-element-stylesheet), otherwise it must be an `xsl:stylesheet` or `xsl:transform` element.\n\n## Transforming the document\n\nYou can use the `XSLTProcessor.transformToDocument()` or `XSLTProcessor.transformToFragment()` methods to transform a document using the imported XSLT stylesheet.\n\n#### transformToDocument\n\n`XSLTProcessor.transformToDocument()` takes one argument, the source node to transform, and returns a new [`Document`](https://developer.mozilla.org/en-US/docs/Web/API/Document) with the results of the transformation:\n\n``` js\nconst newDocument = processor.transformToDocument(domToBeTransformed);\n```\n\nThe resultant object depends on the [output method](https://www.w3.org/TR/1999/REC-xslt-19991116/#output) of the stylesheet:\n\n- **html** - [`HTMLDocument`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument)\n- **xml** - [`XMLDocument`](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument)\n- **text** - [`XMLDocument`](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument) with a single root element `<transformiix:result>` with the text as a child\n\n#### transformToFragment\n\nYou can also use `XSLTProcessor.transformToFragment()` which will return a [`DocumentFragment`](https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment) node. This is handy because appending a fragment to another node transparently appends all the children of that fragment, and the fragment itself is not merged. Fragments are therefore useful for moving nodes around and storing them without the overhead of a full document object.\n\n`XSLTProcessor.transformToFragment()` takes two arguments: the source document to be transformed (as above) and the [`Document`](https://developer.mozilla.org/en-US/docs/Web/API/Document) object that will own the fragment (all fragments must be owned by a document).\n\n``` js\nconst ownerDocument = document.implementation.createDocument(\"\", \"test\", null);\nconst newFragment = processor.transformToFragment(domToBeTransformed, ownerDocument);\n```\n\n`XSLTProcessor.transformToFragment()` will only produce HTML DOM objects if the owner document is itself an [`HTMLDocument`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument), or if the output method of the stylesheet is HTML. It will **not** produce an HTML DOM objects if only the toplevel element of the result is [`<html>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html) as `XSLTProcessor.transformToFragment()` is rarely used to create this element. If you want to override this, you can set the output method normally in the standard way.\n\n#### transforming HTML\n\nUnfortunately it is currently not supported to transform HTML nodes using XSLT. Some things work if you use lower case node-names in patterns and expressions, and treat the nodes as if they are in the null namespace, however this is not very well tested so it might not work in all situations. It is also possible that this will change in a future release.\n\nTransforming XHTML should work as expected though.\n\n## Setting parameters\n\nYou can control [parameters for the stylesheet](https://www.w3.org/TR/1999/REC-xslt-19991116/#variables) using the `XSLTProcessor.setParameter()`, `XSLTProcessor.getParameter()`, and `XSLTProcessor.removeParameter()` methods. These all take a namespace URI and a local name as the first two parameters, with `XSLTProcessor.setParameter()` taking a third - the value of the parameter to be set. See [The XSLT/JavaScript Interface in Gecko](xslt_js_interface_in_gecko/setting_parameters) for an example.\n\n## Resetting\n\nThe [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) object also implements a `XSLTProcessor.reset()` method, which can be used to remove all stylesheets and parameters then put the processor back into its initial state. This method is implemented in Gecko 1.3 and later.\n\n## Resources\n\nThe following reflect the interface of the [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) object:\n\n- [XSLTProcessor.webidl](https://dxr.mozilla.org/mozilla-central/source/dom/webidl/XSLTProcessor.webidl)\n- [txXSLTProcessor.cpp](https://dxr.mozilla.org/mozilla-central/source/dom/xslt/xslt/txXSLTProcessor.cpp)\n\n## See also\n\n- [The XSLT JavaScript Interface in Gecko](xslt_js_interface_in_gecko)\n- [document.load()](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument/load) regarding the loading of XML documents (as used above)\n\n## Original Document Information\n\n- Author(s): Mike Hearn\n- Last Updated Date: December 21, 2005\n- Copyright Information: Copyright (C) Mike Hearn\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Using_the_Mozilla_JavaScript_interface_to_XSL_Transformations](https://developer.mozilla.org/en-US/docs/Web/XSLT/Using_the_Mozilla_JavaScript_interface_to_XSL_Transformations)"
- name: XPath
  id: xpath
  summary: XPath stands for XML Path Language
  description: "# XPath\n\n**[XSLT/XPath Reference](xslt/transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](xslt/element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](xpath/functions), [XPath axes](xpath/axes)\n\nXPath stands for XML Path Language. It uses a non-XML syntax to provide a flexible way of addressing (pointing to) different parts of an [XML](https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction) document. It can also be used to test addressed nodes within a document to determine whether they match a pattern or not.\n\nXPath is mainly used in [XSLT](index), but can also be used as a much more powerful way of navigating through the [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model) of any XML-like language document using [`XPathExpression`](https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression), such as [HTML](https://developer.mozilla.org/en-US/docs/Web/HTML) and [SVG](https://developer.mozilla.org/en-US/docs/Web/SVG), instead of relying on the [`Document.getElementById()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) or [`Document.querySelectorAll()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll) methods, the [`Node.childNodes`](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes) properties, and other DOM Core features.\n\nXPath uses a path notation (as in URLs) for navigating through the hierarchical structure of an XML document. It uses a non-XML syntax so that it can be used in URIs and XML attribute values.\n\n**Note:** Support for XPath varies widely; it's supported reasonably well in Firefox (although there are no plans to improve support further), while other browsers implement it to a lesser extent, if at all. If you need a polyfill, you may consider [js-xpath](https://sourceforge.net/projects/js-xpath/files/js-xpath/1.0.0/xpath.js/download) or [wicked-good-xpath](https://github.com/google/wicked-good-xpath).\n\n## Documentation\n\n[Introduction to using XPath in JavaScript](xpath/introduction_to_using_xpath_in_javascript)  \nDescribes a non-XSLT use of XPath.\n\n[XPath:Axes](xpath/axes)  \nList and definition of the axes defined in the XPath specification. Axes are used to describe the relationships between nodes.\n\n[XPath:Functions](xpath/functions)  \nList and description of the core XPath functions and XSLT-specific additions to XPath.\n\n[Transforming XML with XSLT](xslt/transforming_xml_with_xslt)  \nXSLT uses XPath to address code segments in an XML document that it wishes to transform.\n\n[XPath snippets](xpath/snippets)  \nThese are JavaScript utility functions, that can be used in your own code, based on [DOM Level 3 XPath](https://www.w3.org/TR/DOM-Level-3-XPath/) APIs.\n\n[What is XSLT?](https://www.xml.com/pub/a/2000/08/holman/)  \nThis extensive introduction to XSLT and XPath assumes no prior knowledge of the technologies, and guides the reader through background, context, structure, concepts, and introductory terminology.\n\n## Tools\n\n[XPath tester](https://extendsclass.com/xpath-tester.html)  \nAn online XPath Builder/Debugger.\n\n## Related Topics\n\n- [XSLT](index), [XML](https://developer.mozilla.org/en-US/docs/Web/XML), [DOM](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)\n- [Comparison of CSS Selectors and XPath](xpath/comparison_with_css_selectors)\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XPath](https://developer.mozilla.org/en-US/docs/Web/XPath)"
- name: xsl:apply-imports
  id: xslt/element/apply-imports
  summary: The <xsl:apply-imports> element is fairly arcane, used mostly in complex stylesheets
  description: "# \\<xsl:apply-imports\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:apply-imports>` element is fairly arcane, used mostly in complex stylesheets. Import precedence requires that template rules in main stylesheets have higher precedence than template rules in imported stylesheets. Sometimes, however, it is useful to be able to force the processor to use a template rule from the (lower precedence) imported stylesheet rather than an equivalent rule in the main stylesheet.\n\n## Syntax\n\n``` xml\n<xsl:apply-imports/>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 5.6.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/apply-imports](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/apply-imports)"
- name: xsl:apply-templates
  id: xslt/element/apply-templates
  summary: The <xsl:apply-templates> element selects a set of nodes in the input tree and instructs the processor to apply the proper templates to them
  description: "# \\<xsl:apply-templates\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:apply-templates>` element selects a set of nodes in the input tree and instructs the processor to apply the proper templates to them.\n\n## Syntax\n\n``` xml\n<xsl:apply-templates select=EXPRESSION mode=NAME>\n  <xsl:with-param> [optional]\n  <xsl:sort> [optional]\n</xsl:apply-templates>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\n`select`  \nUses an XPath expression that specifies the nodes to be processed. An asterisk(`*`) selects the entire node-set. If this attribute is not set, all child nodes of the current node are selected.\n\n`mode`  \nIf there are multiple ways of processing defined for the same node, distinguishes among them.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT section 5.4.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/apply-templates](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/apply-templates)"
- name: xsl:attribute
  id: xslt/element/attribute
  summary: The <xsl:attribute> element creates an attribute in the output document, using any values that can be accessed from the stylesheet
  description: "# \\<xsl:attribute\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:attribute>` element creates an attribute in the output document, using any values that can be accessed from the stylesheet. The element must be defined before any other output document element inside the output document element for which it establishes attribute values. But it may be after or inside elements that won't be part of the output (like `<xsl:choose>` or `<xsl:apply-templates>` etc.).\n\n## Syntax\n\n``` xml\n<xsl:attribute name=NAME namespace=URI>\n  TEMPLATE\n</xsl:attribute>\n```\n\n## Required Attributes\n\n`name`  \nSpecifies the name of the attribute to be created in the output document. The name must be a valid QName.\n\n## Optional Attributes\n\n`namespace`  \nDefines the namespace URI for this attribute in the output document. You cannot set the related namespace prefix with this element.\n\n## Type\n\nInstruction, appears within a template or an `<xsl:attribute-set>` element.\n\n## Defined\n\nXSLT, section 7.1.3.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/attribute](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/attribute)"
- name: xsl:attribute-set
  id: xslt/element/attribute-set
  summary: The <xsl:attribute-set> element creates a named set of attributes, which can then be applied as whole to the output document, in a manner similar to named styles in CSS
  description: "# \\<xsl:attribute-set\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:attribute-set>` element creates a named set of attributes, which can then be applied as whole to the output document, in a manner similar to named styles in CSS.\n\n## Syntax\n\n``` xml\n<xsl:attribute-set name=NAME use-attribute-sets=LIST-OF-NAMES>\n  <xsl:attribute>\n</xsl:attribute-set>\n```\n\n## Required Attributes\n\n`name`  \nSpecifies the name of the attribute set. The name must be a valid QName.\n\n## Optional Attributes\n\n`use-attribute-sets`  \nBuilds an attribute set from other attribute sets. The names of the contributing sets must be separated with whitespace characters and must not directly or indirectly embed themselves.\n\n## Type\n\nTop-level, must be the child of `<xsl:stylesheet>` or `<xsl:transform>`.\n\n## Defined\n\nXSLT, section 7.1.4.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/attribute-set](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/attribute-set)"
- name: xsl:call-template
  id: xslt/element/call-template
  summary: The <xsl:call-template> element invokes a named template
  description: "# \\<xsl:call-template\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:call-template>` element invokes a named template.\n\n## Syntax\n\n``` xml\n<xsl:call-template name=NAME>\n  <xsl:with-param> [optional]\n</xsl:call-template>\n```\n\n## Required Attribute\n\n`name`  \nSpecifies the name of the template you wish to invoke.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 6.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/call-template](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/call-template)"
- name: xsl:choose
  id: xslt/element/choose
  summary: The <xsl:choose> element defines a choice among a number of alternatives
  description: "# \\<xsl:choose\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:choose>` element defines a choice among a number of alternatives. It behaves like a switch statement in procedural languages.\n\n## Syntax\n\n``` xml\n<xsl:choose>\n  <xsl:when test=\"[whatever to test1]\"></xsl:when>\n  <xsl:when test=\"[whatever to test2]\"></xsl:when>\n  <xsl:otherwise></xsl:otherwise> [optional]\n</xsl:choose>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nInstruction, appears with a template. It contains one or more `<xsl:when>` elements, and, optionally, a final `<xsl:otherwise>` element.\n\n## Defined\n\nXSLT, section 9.2.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/choose](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/choose)"
- name: xsl:comment
  id: xslt/element/comment
  summary: The <xsl:comment> element writes a comment to the output document
  description: "# \\<xsl:comment\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:comment>` element writes a comment to the output document. It must include only text.\n\n## Syntax\n\n``` xml\n<xsl:comment>\n  TEMPLATE\n</xsl:comment>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 7.4.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/comment](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/comment)"
- name: xsl:copy
  id: xslt/element/copy
  summary: The <xsl:copy> element transfers a shallow copy (the node and any associated namespace node) of the current node to the output document
  description: "# \\<xsl:copy\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:copy>` element transfers a shallow copy (the node and any associated namespace node) of the current node to the output document. It does not copy any children or attributes of the current node.\n\n## Syntax\n\n``` xml\n<xsl:copy use-attribute-sets=LIST-OF-NAMES>\n  TEMPLATE\n</xsl:copy>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\n`use-attribute-sets`  \nLists attribute sets that should be applied to the output node, if it is an element. Names of the sets should be separated with whitespace characters.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 7.5.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/copy](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/copy)"
- name: xsl:copy-of
  id: xslt/element/copy-of
  summary: The <xsl:copy-of> element makes a deep copy (including descendant nodes) of whatever the select attribute specifies to the output document
  description: "# \\<xsl:copy-of\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:copy-of>` element makes a deep copy (including descendant nodes) of whatever the select attribute specifies to the output document.\n\n## Syntax\n\n``` xml\n<xsl:copy-of select=EXPRESSION />\n```\n\n## Required Attributes\n\n`select`  \nUses an XPath expression that specifies what is to be copied.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 11.3.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/copy-of](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/copy-of)"
- name: xsl:decimal-format
  id: xslt/element/decimal-format
  summary: The <xsl:decimal-format> element defines the characters and symbols that are to be used in converting numbers into strings using the format-number( ) function
  description: "# \\<xsl:decimal-format\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:decimal-format>` element defines the characters and symbols that are to be used in converting numbers into strings using the `format-number( )` function.\n\n## Syntax\n\n``` xml\n<xsl:decimal-format\n  name=NAME\n  decimal-separator=CHARACTER\n  grouping-separator=CHARACTER\n  infinity=STRING\n  minus-sign=CHARACTER\n  NaN=STRING\n  percent=CHARACTER\n  per-mille=CHARACTER\n  zero-digit=CHARACTER\n  digit=CHARACTER\n  pattern-separator=CHARACTER />\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\n`name`  \nSpecifies a name for this format.\n\n`decimal-separator`  \nSpecifies the decimal point character. The default is (`.`).\n\n`grouping-separator`  \nSpecifies the thousands separator character. The default is (`,`).\n\n`infinity`  \nSpecifies the string used to represent infinity. The default is the string \"`Infinity`\".\n\n`minus-sign`  \nSpecifies the minus sign character. The default is the hyphen (`-`).\n\n`NaN`  \nSpecifies the string used when the value is not a number. The default is the string \"`NaN`\".\n\n`percent`  \nSpecifies the percentage sign character. The default is (`%`).\n\n`per-mille`  \nSpecifies the per thousand character. The default is (`‰`).\n\n`zero-digit`  \nSpecifies the digit zero character. The default is (`0`).\n\n`digit`  \nSpecifies the character used in the format pattern to stand for a digit. The default is (`#`).\n\n`pattern-separator`  \nSpecifies the character separating positive and negative subpatterns in a format pattern. The default is the semi-colon (`;`).\n\n## Type\n\nTop-level, must be the child of `<xsl:stylesheet>` or `<xsl:transform>`.\n\n## Defined\n\nXSLT, section 12.3.\n\n## Gecko support\n\nSupported as of 1.0 (Mozilla 1.0, Netscape 7.0).\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/decimal-format](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/decimal-format)"
- name: xsl:Element
  id: xslt/element
  summary: 'There are two types of elements discussed here: top-level elements and instructions'
  description: "# XSLT elements reference\n\n**[XSLT/XPath Reference](transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../xpath/functions), [XPath axes](../xpath/axes)\n\nThere are two types of elements discussed here: top-level elements and instructions. A top-level element must appear as the child of either `<xsl:stylesheet>` or `<xsl:transform>`. An instruction, on the other hand, is associated with a template. A stylesheet may include several templates. A third type of element, not discussed here, is the literal result element (LRE). An LRE also appears in a template. It consists of any non-instruction element that should be copied as-is to the result document, for example, an `<hr>` element in an HTML conversion stylesheet.\n\nOn a related note, any attribute in an LRE and some attributes of a limited number of XSLT elements can also include what is known as an attribute value template. An attribute value template is a string that includes an embedded XPath expression which is used to specify the value of an attribute. At run-time the expression is evaluated and the result of the evaluation is substituted for the XPath expression. For example, assume that a variable \"`image-dir`\" is defined as follows:\n\n``` xml\n<xsl:variable name=\"image-dir\">/images</xsl:variable>\n```\n\nThe expression to be evaluated is placed inside curly brackets:\n\n``` xml\n<img src=\"{$image-dir}/mygraphic.jpg\"/>\n```\n\nThis would result in the following:\n\n``` xml\n<img src=\"/images/mygraphic.jpg\"/>\n```\n\nThe element annotations that follow include a description, a syntax listing, a list of required and optional attributes, a description of type and position, its source in the W3C Recommendation and an explanation of the degree of present Gecko support.\n\n- [`<xsl:apply-imports>`](element/apply-imports)\n- [`<xsl:apply-templates>`](element/apply-templates)\n- [`<xsl:attribute>`](element/attribute)\n- [`<xsl:attribute-set>`](element/attribute-set)\n- [`<xsl:call-template>`](element/call-template)\n- [`<xsl:choose>`](element/choose)\n- [`<xsl:comment>`](element/comment)\n- [`<xsl:copy>`](element/copy)\n- [`<xsl:copy-of>`](element/copy-of)\n- [`<xsl:decimal-format>`](element/decimal-format)\n- [`<xsl:element>`](element/element)\n- [`<xsl:fallback>`](element/fallback) *(not supported)*\n- [`<xsl:for-each>`](element/for-each)\n- [`<xsl:if>`](element/if)\n- [`<xsl:import>`](element/import) *(mostly supported)*\n- [`<xsl:include>`](element/include)\n- [`<xsl:key>`](element/key)\n- [`<xsl:message>`](element/message)\n- [`<xsl:namespace-alias>`](element/namespace-alias) *(not supported)*\n- [`<xsl:number>`](element/number) *(partially supported)*\n- [`<xsl:otherwise>`](element/otherwise)\n- [`<xsl:output>`](element/output) *(partially supported)*\n- [`<xsl:param>`](element/param)\n- [`<xsl:preserve-space>`](element/preserve-space)\n- [`<xsl:processing-instruction>`](element/processing-instruction)\n- [`<xsl:sort>`](element/sort)\n- [`<xsl:strip-space>`](element/strip-space)\n- [`<xsl:stylesheet>`](element/stylesheet) *(partially supported)*\n- [`<xsl:template>`](element/template)\n- [`<xsl:text>`](element/text) *(partially supported)*\n- [`<xsl:transform>`](element/transform)\n- [`<xsl:value-of>`](element/value-of) *(partially supported)*\n- [`<xsl:variable>`](element/variable)\n- [`<xsl:when>`](element/when)\n- [`<xsl:with-param>`](element/with-param)\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element)"
- name: xsl:element
  id: xslt/element/element
  summary: The <xsl:element> element creates an element in the output document
  description: "# \\<xsl:element\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:element>` element creates an element in the output document.\n\n## Syntax\n\n``` xml\n<xsl:element name=NAME namespace=URI use-attribute-sets=LIST-OF-NAMES >\n  TEMPLATE\n</xsl:element>\n```\n\n## Required Attributes\n\n`name`  \nSpecifies the desired name of the output element. The name must be a valid QName.\n\n## Optional Attributes\n\n`namespace`  \nSpecifies the namespace of the output element.\n\n`use-attribute-sets`  \nA whitespace‐separated list of [`attribute-set` element](attribute-set) names to be applied to the `element` element's output element. Applied attributes can be overridden via nested `attribute` elements.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 7.1.2.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/element](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/element)"
- name: xsl:fallback
  id: xslt/element/fallback
  summary: The <xsl:fallback> element specifies what template to use if a given extension (or, eventually, newer version) element is not supported
  description: "# \\<xsl:fallback\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:fallback>` element specifies what template to use if a given extension (or, eventually, newer version) element is not supported.\n\n## Syntax\n\n``` xml\n<xsl:fallback>\n  TEMPLATE\n</xsl:fallback>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 15\n\n## Gecko support\n\nNot supported at this time.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/fallback](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/fallback)"
- name: xsl:for-each
  id: xslt/element/for-each
  summary: The <xsl:for-each> element selects a set of nodes and processes each of them in the same way
  description: "# \\<xsl:for-each\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:for-each>` element selects a set of nodes and processes each of them in the same way. It is often used to iterate through a set of nodes or to change the current node. If one or more `<xsl:sort>` elements appear as the children of this element, sorting occurs before processing. Otherwise, nodes are processed in document order.\n\n## Syntax\n\n``` xml\n<xsl:for-each select=EXPRESSION>\n  <xsl:sort> [optional]\n  TEMPLATE\n</xsl:for-each>\n```\n\n## Required Attributes\n\n`select`  \nUses an XPath expression to select nodes to be processed.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 8.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/for-each](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/for-each)"
- name: xsl:if
  id: xslt/element/if
  summary: The <xsl:if> element contains a test attribute and a template
  description: "# \\<xsl:if\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:if>` element contains a test attribute and a template. If the test evaluates to true, the template is processed. In this it is similar to an if statement in other languages. To achieve the functionality of an if-then-else statement, however, use the `<xsl:choose>` element with one `<xsl:when>` and one `<xsl:otherwise>` children.\n\n## Syntax\n\n``` xml\n<xsl:if test=EXPRESSION>\n  TEMPLATE\n</xsl:if>\n```\n\n## Required Attributes\n\n`test`  \nContains an XPath expression that can be evaluated (using the rules defined for `boolean( )` if necessary) to a Boolean value. If the value is true, the template is processed; if it is not, no action is taken.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSL section 9.1.\n\n## Gecko support\n\nSupported\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/if](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/if)"
- name: xsl:import
  id: xslt/element/import
  summary: The <xsl:import> element is a top-level element that serves to import the contents of one stylesheet into another stylesheet
  description: "# \\<xsl:import\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:import>` element is a top-level element that serves to import the contents of one stylesheet into another stylesheet. Generally speaking, the contents of the imported stylesheet have a lower import precedence than that of the importing stylesheet. This is in contrast to `<xsl:include>` where the contents of the included stylesheet have exactly the same precedence as the contents of the including stylesheet.\n\n## Syntax\n\n``` xml\n<xsl:import href=URI />\n```\n\n## Required Attributes\n\n`href`  \nSpecifies the URI of the stylesheet to import.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nTop-level, must appear before any other child of `<xsl:stylesheet>` or `<xsl:transform>` in the importing stylesheet.\n\n## Defined\n\nXSLT, section 2.6.2.\n\n## Gecko support\n\nMostly supported with a few issues with top level variables and parameters as of Mozilla 1.0.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/import](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/import)"
- name: xsl:include
  id: xslt/element/include
  summary: The <xsl:include> element merges the contents of one stylesheet with another
  description: "# \\<xsl:include\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:include>` element merges the contents of one stylesheet with another. Unlike the case of `<xsl:import>`, the contents of an included stylesheet have exactly the same precedence as the contents of the including stylesheet.\n\n## Syntax\n\n``` xml\n<xsl:include href=URI />\n```\n\n## Required Attributes\n\n`href`  \nSpecifies the URI of the stylesheet to include.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nTop-level, may appear in any order as a child of `<xsl:stylesheet>` or `<xsl:transform>`.\n\n## Defined\n\nXSLT, section 2.6.1.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/include](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/include)"
- name: xsl:key
  id: xslt/element/key
  summary: The <xsl:key> element declares a named key which can be used elsewhere in the stylesheet with the key( ) function
  description: "# \\<xsl:key\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:key>` element declares a named key which can be used elsewhere in the stylesheet with the `key( )` function.\n\n## Syntax\n\n``` xml\n<xsl:key name=NAME match=EXPRESSION\n  use=EXPRESSION />\n```\n\n## Required Attributes\n\n`name`  \nSpecifies a name for this key. Must be a QName.\n\n`match`  \nDefines the nodes for which this key is applicable.\n\n`use`  \nSpecifies an XPath expression that will be used to determine the value of the key for each of the applicable nodes.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nTop-level, must be the child of `<xsl:stylesheet>` or `<xsl:transform>`.\n\n## Defined\n\nXSLT, section 12.2.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/key](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/key)"
- name: xsl:message
  id: xslt/element/message
  summary: The <xsl:message> element outputs a message (to the JavaScript Console in NS) and optionally terminates execution of the stylesheet
  description: "# \\<xsl:message\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:message>` element outputs a message (to the JavaScript Console in NS) and optionally terminates execution of the stylesheet. It can be useful for debugging.\n\n## Syntax\n\n``` xml\n<xsl:message terminate=\"yes\" | \"no\" >\n  TEMPLATE\n</xsl:message>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\n`terminate`  \nSet to \"`yes`\", indicates that execution should be terminated. The default value is \"`no`\", in which case the message is output and execution continues.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 13.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/message](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/message)"
- name: xsl:namespace-alias
  id: xslt/element/namespace-alias
  summary: The <xsl:namespace-alias> element is a rarely used device that maps a namespace in the stylesheet to a different namespace in the output tree
  description: "# \\<xsl:namespace-alias\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:namespace-alias>` element is a rarely used device that maps a namespace in the stylesheet to a different namespace in the output tree. The most common use for this element is in generating a stylesheet from another stylesheet. To prevent a normally `xsl:`-prefixed literal result element (which should be copied as-is to the result tree) from being misunderstood by the processor, it is assigned a temporary namespace which is appropriately re-converted back to the XSLT namespace in the output tree.\n\n## Syntax\n\n``` xml\n<xsl:namespace-alias stylesheet-prefix=NAME result-prefix=NAME />\n```\n\n## Required Attributes\n\n`stylesheet-prefix`  \nSpecifies the temporary namespace.\n\n`result-prefix`  \nSpecifies the desired namespace for the output tree.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nTop-level, must be the child of `<xsl:stylesheet>` or `<xsl:transform>`.\n\n## Defined\n\nXSLT, section 7.1.1\n\n## Gecko support\n\nNot supported at this time.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/namespace-alias](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/namespace-alias)"
- name: xsl:number
  id: xslt/element/number
  summary: The <xsl:number> element counts things sequentially
  description: "# \\<xsl:number\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:number>` element counts things sequentially. It can also be used to quickly format a number.\n\n## Syntax\n\n``` xml\n<xsl:number\n  count=EXPRESSION\n  level=\"single\" | \"multiple\" | \"any\"\n  from=EXPRESSION\n  value=EXPRESSION\n  format=FORMAT-STRING\n  lang=XML:LANG-CODE\n  letter-value=\"alphabetic\" | \"traditional\"\n  grouping-separator=CHARACTER\n  grouping-size=NUMBER  />\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\n`count`  \nSpecifies what in the source tree should be numbered sequentially. It uses an XPath expression.\n\n`level`  \nDefines how levels of the source tree should be considered in generating sequential numbers. It has three valid values: `single`, `multiple`, and `any`. The default value is `single`:\n\n`single`  \nNumbers sibling nodes sequentially, as in the items in a list. The processor goes to the first node in the [`ancestor-or-self`](../../xpath/axes/ancestor-or-self) axis that matches the `count` attribute and then counts that node plus all its preceding siblings (stopping when it reaches a match to the `from` attribute, if there is one) that also match the `count` attribute. If no match is found, the sequence will be an empty list.\n\n`multiple`  \nNumbers nodes as a composite sequence that reflects the hierarchic position of the node, e.g. 1.2.2.5. (The nested format can be specified with the `format` attribute, e.g. A.1.1). The processor looks at all [`ancestors`](../../xpath/axes/ancestor) of the current node and the current node itself, stopping when it reaches a match for the `from` attribute, if there is one. For each node in this list that matches the `count` attribute, the processor counts how many preceding matching siblings it has, and adds one for the node itself. If no match is found, the sequence will be an empty list.\n\n`any` (Not supported at this time.)  \nNumbers all matching nodes, regardless of level, sequentially. The [`ancestor`](../../xpath/axes/ancestor), [`self`](../../xpath/axes/self), and [`preceding`](../../xpath/axes/preceding) axes are all considered. The processor starts at the current node and proceeds in reverse document order, stopping if it reaches a match to any `from` attribute. If no match to the `count` attribute is found, the sequence will be an empty list. This level is not supported at this time.\n\nfrom  \nSpecifies where the numbering should start or start over. The sequence begins with the first descendant of the node that matches the `from` attribute.\n\nvalue  \nApplies a given format to a number. This is a quick way to format a user-supplied number (as opposed to a node sequence number) in any of the standard `<xsl:number>` formats.\n\nformat  \nDefines the format of the generated number:\n\nformat=\"1\"  \n1 2 3 . . . (This is the only format supported at this time)\n\nformat=\"01\"  \n01 02 03 . . . 09 10 11 . . .\n\nformat=\"a\"  \na b c . . .y z aa ab . . .\n\nformat=\"A\"  \nA B C . . . Y Z AA AB . . .\n\nformat=\"i\"  \ni ii iii iv v . . .\n\nformat=\"I\"  \nI II III IV V . . .\n\nlang (Not supported at this time.)  \nSpecifies which language's alphabet should be used in letter-based numbering formats.\n\nletter-value  \nDisambiguates between numbering sequences that use letters. Some languages have more than one numbering system that use letters. If both systems begin with the same token, ambiguity can arise. This attribute can have the value \"`alphabetic`\" or \"`traditional`\". The default is \"`alphabetic`\".\n\ngrouping-separator  \nSpecifies what character should be used as the group (e.g. thousands) separator. The default is the comma (`,`).\n\ngrouping-size  \nIndicates the number of digits that make up a numeric group. The default value is \"`3`\".\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 7.7\n\n## Gecko support\n\nPartial support. See comments above.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/number](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/number)"
- name: xsl:otherwise
  id: xslt/element/otherwise
  summary: The <xsl:otherwise> element is used to define the action that should be taken when none of the <xsl:when> conditions apply
  description: "# \\<xsl:otherwise\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:otherwise>` element is used to define the action that should be taken when none of the `<xsl:when>` conditions apply. It is similar to the `else` or `default` case in other programing languages.\n\n## Syntax\n\n``` xml\n<xsl:otherwise>\n  TEMPLATE\n</xsl:otherwise>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nSubinstruction, must appear as the last child of an `<xsl:choose>` element, within a template.\n\n## Defined\n\nXSLT, section 9.2\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/otherwise](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/otherwise)"
- name: xsl:output
  id: xslt/element/output
  summary: The <xsl:output> element controls the characteristics of the output document
  description: "# \\<xsl:output\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:output>` element controls the characteristics of the output document. To function correctly in Netscape, this element, with the method attribute, must be used. As of 7.0, `method=\"text\"` works as expected.\n\n## Syntax\n\n``` xml\n<xsl:output\n  method=\"xml\" | \"html\" | \"text\"\n  version=STRING\n  encoding=STRING\n  omit-xml-declaration=\"yes\" | \"no\"\n  standalone=\"yes\" | \"no\"\n  doctype-public=STRING\n  doctype-system=STRING\n  cdata-section-elements=LIST-OF-NAMES\n  indent=\"yes\" | \"no\"\n  media-type=STRING />\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\n`method`  \nSpecifies output format.\n\n`version`  \nSpecifies the value of the version attribute of the XML or HTML declaration in the output document. This attribute is only used when `method=\"html\"` or `method=\"xml\"`.\n\n`encoding`  \nSpecifies the value of the `encoding` attribute in the output document.\n\n`omit-xml-declaration`  \nIndicates whether or not to include an XML declaration in the output. Acceptable values are \"`yes`\" or \"`no`\".\n\n`standalone` (Not supported.)  \nIf present, indicates that a standalone declaration should occur in the output document and gives its value. Acceptable values are \"yes\" or \"no\".\n\n`doctype-public`  \nSpecifies the value of the `PUBLIC` attribute of the `DOCTYPE` declaration in the output document.\n\n`doctype-system`  \nSpecifies the value of the `SYSTEM` attribute of the `DOCTYPE` declaration in the output document.\n\n`cdata-section-elements`  \nLists elements whose text contents should be written as `CDATA` sections. Elements should be whitespace separated.\n\n`indent` (Not supported.)  \nSpecifies if the output should be indented to indicate its hierarchic structure.\n\n`media-type` (Not supported.)  \nSpecifies the output document MIME type.\n\n## Type\n\nTop-level, must be the child `<xsl:stylesheet>` or `<xsl:transform>`.\n\n## Defined\n\nXSLT, section 16.\n\n## Gecko support\n\nPartial support. See comments above.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/output](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/output)"
- name: xsl:param
  id: xslt/element/param
  summary: The <xsl:param> element establishes a parameter by name and, optionally, a default value for that parameter
  description: "# \\<xsl:param\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:param>` element establishes a parameter by name and, optionally, a default value for that parameter. When used as a top-level element, the parameter is global . When used inside an `<xsl:template>` element, the parameter is local to that template. In this case it must be the first child element of the template.\n\n## Syntax\n\n``` xml\n<xsl:param name=NAME select=EXPRESSION>\n  TEMPLATE\n</xsl:param>\n```\n\n## Required Attributes\n\n`name`  \nNames the parameter. This must be a QName.\n\n## Optional Attributes\n\n`select`  \nUses an XPath expression to provide a default value if none is specified.\n\n## Type\n\nInstruction, can appear as a top-level element or within a template.\n\n## Defined\n\nXSLT, section 11.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/param](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/param)"
- name: xsl:preserve-space
  id: xslt/element/preserve-space
  summary: The <xsl:preserve-space> element defines the elements in the source document for which whitespace should be preserved
  description: "# \\<xsl:preserve-space\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:preserve-space>` element defines the elements in the source document for which whitespace should be preserved. If there is more than one element, separate the names with a whitespace character. Preserving whitespace is the default setting, so this element only needs to be used to counteract an `<xsl:strip-space>` element.\n\n## Syntax\n\n``` xml\n<xsl:preserve-space elements=LIST-OF-ELEMENT-NAMES />\n```\n\n## Required Attributes\n\n`elements`  \nSpecifies the elements for which whitespace should be preserved.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nTop-level, must be a child of `<xsl:stylesheet>` or `<xsl:transform>`.\n\n## Defined\n\nXSLT, section 3.4\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/preserve-space](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/preserve-space)"
- name: xsl:processing-instruction
  id: xslt/element/processing-instruction
  summary: The <xsl:processing-instruction> element writes a processing instruction to the output document
  description: "# \\<xsl:processing-instruction\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:processing-instruction>` element writes a processing instruction to the output document.\n\n## Syntax\n\n`<xsl:processing-instruction name=NAME> TEMPLATE </xsl:processing-instruction>`\n\n## Required Attributes\n\n`name`  \nSpecifies the name of this processing instruction.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 7.3\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/processing-instruction](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/processing-instruction)"
- name: xsl:sort
  id: xslt/element/sort
  summary: The <xsl:sort> element defines a sort key for nodes selected by <xsl:apply-templates> or <xsl:for-each> and determines the order in which they are processed
  description: "# \\<xsl:sort\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:sort>` element defines a sort key for nodes selected by `<xsl:apply-templates>` or `<xsl:for-each>` and determines the order in which they are processed.\n\n## Syntax\n\n``` xml\n<xsl:sort\n  select=EXPRESSION\n  order=\"ascending\" | \"descending\"\n  case-order=\"upper-first\" | \"lower-first\"\n  lang=XML:LANG-CODE\n  data-type=\"text\" | \"number\" />\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\n`select`  \nUses an XPath expression to specify the nodes to be sorted.\n\n`order`  \nSpecifies whether the nodes should be processed in \"`ascending`\" or \"`descending`\" order. The default is \"`ascending`\".\n\n`case-order`  \nIndicates whether upper- or lowercase letters are to be ordered first. The allowable values are \"`upper-first`\" and \"`lower-first`\".\n\n`lang`  \nSpecifies which language is to be used by the sort.\n\n`data-type`  \nDefines whether items are to be ordered alphabetically or numerically. The allowable values are \"`text`\" and \"`number`\" with \"`text`\" being the default.\n\n## Type\n\nSubinstruction, always appears as a child of \\<xsl:for-each\\>, where it must appear before the template proper or of \\<xsl:apply-templates\\>.\n\n## Defined\n\nXSLT, section10.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/sort](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/sort)"
- name: xsl:strip-space
  id: xslt/element/strip-space
  summary: The <xsl:strip-space> element defines the elements in the source document for which whitespace should be removed
  description: "# \\<xsl:strip-space\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:strip-space>` element defines the elements in the source document for which whitespace should be removed.\n\n## Syntax\n\n``` xml\n<xsl:strip-space elements=LIST-OF-ELEMENT-NAMES />\n```\n\n## Required Attributes\n\n`elements`  \nSpecifies a space-separated list of elements in the source whose whitespace-only text nodes should be removed.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nTop-level, must be a child of `<xsl:stylesheet>` or `<xsl:transform>`.\n\n## Defined\n\nXSLT, section 3.4\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/strip-space](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/strip-space)"
- name: xsl:stylesheet
  id: xslt/element/stylesheet
  summary: The <xsl:stylesheet> element (or the equivalent <xsl:transform> element) is the outermost element of a stylesheet
  description: "# \\<xsl:stylesheet\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:stylesheet>` element (or the equivalent `<xsl:transform>` element) is the outermost element of a stylesheet.\n\n## Namespace Declaration\n\nA pseudo-attribute required to identify the document as an XSLT stylesheet. Typically this is `xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"`.\n\n## Syntax\n\n``` xml\n<xsl:stylesheet\n  version=\"NUMBER\"\n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n  id=\"NAME\"\n  extension-element-prefixes=\"LIST-OF-NAMES\"\n  exclude-result-prefixes=\"LIST-OF-NAMES\">\n    ENTIRE STYLESHEET\n</xsl:stylesheet>\n```\n\n## Required Attributes\n\n`version`  \nSpecifies the version of XSLT required by this stylesheet.\n\n## Optional Attributes\n\n`exclude-result-prefixes`  \nSpecifies any namespace used in this document that should not be sent to the output document. The list is whitespace separated.\n\n`extension-element-prefixes`  \nSpecifies a space-separated list of any namespace prefixes for extension elements in this document.\n\n`default-collation`  \nSpecifies the default collation used by all [XPath](https://developer.mozilla.org/en-US/docs/Glossary/XPath) expressions appearing in attributes or text value templates that have the element as an ancestor, unless overridden by another `default-collation` attribute on an inner element. It also determines the collation used by certain XSLT constructs (such as [`<xsl:key>`](key) and [`<xsl:for-each-group>`](for-each-group)) within its scope.\n\n`default-mode`  \nDefines the default value for the `mode` attribute of all [`<xsl:template>`](template) and [`<xsl:apply-templates>`](apply-templates) elements within its scope.\n\n`default-validation`  \nDefines the default value of the `validation` attribute of all relevant instructions appearing within its scope.\n\n`expand-text`  \nDetermines whether descendant text nodes of the element are treated as text value templates.\n\n`id`  \nSpecifies an `id` for this stylesheet. This is most often used when the stylesheet is embedded in another XML document.\n\n`input-type-annotations`  \nSpecifies whether type annotations are stripped from the element so the same results are produced whether the source documents have been validated against a schema or not.\n\n`use-when`  \nDetermines whether the element and all the nodes that have it as ancestor are excluded from the stylesheet.\n\n`xpath-default-namespace`  \nSpecifies the namespace that will be used if the element name is unprefixed or an unprefixed type name within an XPath expression.\n\n## Type\n\nRequired outermost element of stylesheet.\n\n## Specifications\n\n| Specification                                                                       |\n|-------------------------------------------------------------------------------------|\n| [XSLT 3.0 \\# stylesheet-element](https://www.w3.org/TR/xslt-30/#stylesheet-element) |\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/stylesheet](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/stylesheet)"
- name: xsl:template
  id: xslt/element/template
  summary: The <xsl:template> element defines an output producing template
  description: "# \\<xsl:template\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:template>` element defines an output producing template. This element must have either the match attribute or the name attribute set.\n\n## Syntax\n\n``` xml\n<xsl:template\n  match=PATTERN\n  name=NAME\n  mode=NAME\n  priority=NUMBER>\n  <xsl:param> [optional]\n  TEMPLATE\n</xsl:template>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\n`match`  \nSpecifies a pattern that determines the elements for which this template should be used. It is a required attribute if there is no `name` attribute.\n\n`name`  \nSpecifies a name for this template, by which it can be invoked through the `<xsl:call-template>` element.\n\n`mode`  \nSpecifies a particular mode for this template, which can be matched by an attribute of the `<xsl:apply-templates>` element. This is useful for processing the same information in multiple ways.\n\n`priority`  \nSpecifies a numeric priority for this template. This can be any number other than `Infinity`. The processor uses this number when more than one template matches the same node.\n\n## Type\n\nTop-level, must be the child of `<xsl:stylesheet>` or `<xsl:transform>`.\n\n## Defined\n\nXSLT, section 5.3.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/template](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/template)"
- name: xsl:text
  id: xslt/element/text
  summary: The <xsl:text> element writes literal text to the output tree
  description: "# \\<xsl:text\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:text>` element writes literal text to the output tree. It may contain `#PCDATA`, literal text, and entity references.\n\n## Syntax\n\n``` xml\n<xsl:text disable-output-escaping=\"yes\" | \"no\">\n  TEXT\n</xsl:text>\n```\n\n## Required Attributes\n\nNone.\n\n## Optional Attributes\n\n`disable-output-escaping` (Netscape does not serialize the result of transformation - the \"output\" below - so this attribute is essentially irrelevant in context. To output html-entities, use numerical values instead, eg `&#160;` for `&nbsp;`)  \nSpecifies whether special characters are escaped when written to the output. The available values are \"`yes`\" or \"`no`\". If \"`yes`\" is set, for example, the character `>` is output as `>`, not as `&gt;`.\n\n## Type\n\nInstruction, appears within a template.\n\n## Defined\n\nXSLT, section 7.2\n\n## Gecko support\n\nSupported as noted.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/text](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/text)"
- name: xsl:transform
  id: xslt/element/transform
  summary: The <xsl:transform> element is exactly equivalent to the <xsl:stylesheet> element
  description: "# \\<xsl:transform\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:transform>` element is exactly equivalent to the [`<xsl:stylesheet>`](stylesheet) element.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/transform](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/transform)"
- name: xsl:value-of
  id: xslt/element/value-of
  summary: The <xsl:value-of> element evaluates an XPath expression, converts it to a string, and writes that string to the result tree
  description: "# \\<xsl:value-of\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:value-of>` element evaluates an XPath expression, converts it to a string, and writes that string to the result tree.\n\n## Syntax\n\n``` xml\n<xsl:value-of select=EXPRESSION disable-output-escaping=\"yes\" | \"no\"  />\n```\n\n## Required Attributes\n\n`select`  \nSpecifies the XPath expression to be evaluated and written to the output tree.\n\n## Optional Attributes\n\n`disable-output-escaping` (Netscape does not serialize the result of transformation - the \"output\" below - so this attribute is essentially irrelevant in context. To output html-entities, use numerical values instead, eg `&#160` for `&nbsp`)  \nSpecifies whether special characters are escaped when written to the output. The available values are \"`yes`\" or \"`no`\". If \"`yes`\" is set, for example, the character \\> is output as `>`, not as \"`&gt`\".\n\n## Type\n\nInstruction, appears with a template.\n\n## Defined\n\nXSLT, section 7.6.1.\n\n## Gecko support\n\nSupported except as above.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/value-of](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/value-of)"
- name: xsl:variable
  id: xslt/element/variable
  summary: The <xsl:variable> element declares a global or local variable in a stylesheet and gives it a value
  description: "# \\<xsl:variable\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:variable>` element declares a global or local variable in a stylesheet and gives it a value. Because XSLT permits no side-effects, once the value of the variable has been established, it remains the same until the variable goes out of scope\n\n## Syntax\n\n``` xml\n<xsl:variable name=NAME select=EXPRESSION >\n  TEMPLATE\n</xsl:variable>\n```\n\n## Required Attributes\n\n`name`  \nGives the variable a name.\n\n## Optional Attributes\n\n`select`  \nDefines the value of the variable through an XPath expression. If the element contains a template, this attribute is ignored.\n\n## Type\n\nTop-level or instruction. If it occurs as a top-level element, the variable is global in scope, and can be accessed throughout the document. If it occurs within a template, the variable is local in scope, accessible only within the template in which it appears.\n\n## Defined\n\nXSLT, section 11.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/variable](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/variable)"
- name: xsl:when
  id: xslt/element/when
  summary: The <xsl:when> element always appears within an <xsl:choose> element, acting like a case statement
  description: "# \\<xsl:when\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:when>` element always appears within an `<xsl:choose>` element, acting like a case statement.\n\n## Syntax\n\n``` xml\n<xsl:when test=EXPRESSION>\n  TEMPLATE\n</xsl:when>\n```\n\n## Required Attributes\n\n`test`  \nSpecifies a boolean expression to be evaluated. If true, the contents of the element are processed; if false, they are ignored.\n\n## Optional Attributes\n\nNone.\n\n## Type\n\nSubinstruction, always appears within an `<xsl:choose>` element.\n\n## Defined\n\nXSLT, section 9.2.\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/when](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/when)"
- name: xsl:with-param
  id: xslt/element/with-param
  summary: The <xsl:with-param> element sets the value of a parameter to be passed into a template
  description: "# \\<xsl:with-param\\>\n\n**[XSLT/XPath Reference](../transforming_xml_with_xslt/the_netscape_xslt_xpath_reference)**: [XSLT elements](../element), [EXSLT functions](https://developer.mozilla.org/en-US/docs/Web/EXSLT), [XPath functions](../../xpath/functions), [XPath axes](../../xpath/axes)\n\nThe `<xsl:with-param>` element sets the value of a parameter to be passed into a template.\n\n## Syntax\n\n``` xml\n<xsl:with-param name=NAME select=EXPRESSION>\n  TEMPLATE\n</xsl:with-param>\n```\n\n## Required Attributes\n\n`name`  \nGives this parameter a name.\n\n## Optional Attributes\n\n`select`  \nDefines the value of the parameter through an XPath expression. If the element contains a template, this attribute is ignored.\n\n## Type\n\nSubinstruction, always appears within an `<xsl:apply-templates>` or an `<xsl:call-template>` element.\n\n## Defined\n\nXSLT 11.6\n\n## Gecko support\n\nSupported.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/with-param](https://developer.mozilla.org/en-US/docs/Web/XSLT/Element/with-param)"
- name: XSLT JS interface in Gecko
  id: xslt/xslt_js_interface_in_gecko
  summary: © 2005–2022 MDN contributors
  description: "# The XSLT/JavaScript Interface in Gecko\n\n1.  [Introduction](xslt_js_interface_in_gecko/introduction)\n2.  [JavaScript/XSLT Bindings](xslt_js_interface_in_gecko/javascript_xslt_bindings)\n3.  [Basic Example](xslt_js_interface_in_gecko/basic_example)\n4.  [Setting Parameters](xslt_js_interface_in_gecko/setting_parameters)\n5.  [Advanced Example](xslt_js_interface_in_gecko/advanced_example)\n6.  [Interface List](xslt_js_interface_in_gecko/interface_list)\n7.  [Resources](xslt_js_interface_in_gecko/resources)\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko](https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko)"
- name: XSLT JS interface in Gecko.Advanced Example
  id: xslt/xslt_js_interface_in_gecko/advanced_example
  summary: This advanced example sorts several divs based on their content
  description: "# Advanced Example\n\n## Advanced example\n\nThis advanced example sorts several divs based on their content. The example allows sorting the content multiple times, alternating between ascending and descending order. The JavaScript loads the .xsl file only on the first sort and sets the `xslloaded` variable to true once it has finished loading the file. Using the `XSLTProcessor.getParameter()` method, the code can figure whether to sort in ascending or descending order. It defaults to ascending if the parameter is empty (the first time the sorting happens, as there is no value for it in the XSLT file). The sorting value is set using `XSLTProcessor.setParameter()`.\n\nThe XSLT file has a parameter called `myOrder` that JavaScript sets to change the sorting method. The `xsl:sort` element's order attribute can access the value of the parameter using `$myOrder`. However, the value needs to be an XPATH expression and not a string, so `{$myOrder}` is used. Using {} evaluates the content as an XPath expression.\n\nOnce the transformation is complete, the result is appended to the document, as shown in this example.\n\n**Figure 7: Sorting based on div content: view example**\n\nXHTML Fragment:\n\n``` html\n<div id=\"example\">\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n  <div>4</div>\n  <div>5</div>\n  <div>6</div>\n  <div>7</div>\n  <div>8</div>\n  <div>9</div>\n  <div>10</div>\n</div>\n```\n\nJS Fragment:\n\n``` js\nlet xslRef;\nlet xslloaded = false;\nconst xsltProcessor = new XSLTProcessor();\nlet myDOM;\n\nlet xmlRef = document.implementation.createDocument(\"\", \"\", null);\n\nfunction sort() {\n  if (!xslloaded) {\n    const p = new XMLHttpRequest();\n    p.open(\"GET\", \"example2.xsl\", false);\n    p.send(null);\n\n    xslRef = p.responseXML;\n    xsltProcessor.importStylesheet(xslRef);\n    xslloaded = true;\n  }\n\n  // Create a new XML document in memory\n  xmlRef = document.implementation.createDocument(\"\", \"\", null);\n\n  // We want to move a part of the DOM from an HTML document to an XML document.\n  // importNode is used to clone the nodes we want to process via XSLT - true makes it do a deep clone\n  const myNode = document.getElementById(\"example\");\n  const clonedNode = xmlRef.importNode(myNode, true);\n\n  // After cloning, we append\n  xmlRef.appendChild(clonedNode);\n\n  // Set the sorting parameter in the XSL file\n  const sortVal = xsltProcessor.getParameter(null, \"myOrder\");\n\n  if (sortVal === \"\" || sortVal === \"descending\") {\n    xsltProcessor.setParameter(null, \"myOrder\", \"ascending\");\n  } else {\n    xsltProcessor.setParameter(null, \"myOrder\", \"descending\");\n  }\n\n  // Initiate the transformation\n  const fragment = xsltProcessor.transformToFragment(xmlRef, document);\n\n  // Clear the contents\n  document.getElementById(\"example\").textContent = \"\";\n\n  myDOM = fragment;\n\n  // Add the new content from the transformation\n  document.getElementById(\"example\").appendChild(fragment)\n}\n```\n\nXSL Stylesheet:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet version=\"1.0\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:html=\"http://www.w3.org/1999/xhtml\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n  <xsl:output method=\"html\" indent=\"yes\" />\n\n  <xsl:param name=\"myOrder\" />\n\n  <xsl:template match=\"/\">\n\n    <xsl:apply-templates select=\"/div//div\">\n      <xsl:sort select=\".\" data-type=\"number\" order=\"{$myOrder}\" />\n    </xsl:apply-templates>\n  </xsl:template>\n\n  <xsl:template match=\"div\">\n    <xsl:copy-of select=\".\" />\n  </xsl:template>\n</xsl:stylesheet>\n```\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Advanced_Example](https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Advanced_Example)"
- name: XSLT JS interface in Gecko.Basic Example
  id: xslt/xslt_js_interface_in_gecko/basic_example
  summary: The basic example will load an XML file and apply a XSL transformation on it
  description: "# Basic Example\n\n## Basic Example\n\nThe basic example will load an XML file and apply a XSL transformation on it. These are the same files used in the [Generating HTML](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/Generating_HTML) example in the [XSLT in Netscape Gecko](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) article. The XML file describes an article and the XSL file formats the information for display.\n\n**Figure 4 : XML file**\n\n``` xml\n<?xml version=\"1.0\"?>\n<myNS:Article xmlns:myNS=\"http://devedge.netscape.com/2002/de\">\n  <myNS:Title>My Article</myNS:Title>\n  <myNS:Authors>\n    <myNS:Author company=\"Foopy Corp.\">Mr. Foo</myNS:Author>\n    <myNS:Author>Mr. Bar</myNS:Author>\n  </myNS:Authors>\n  <myNS:Body>\n    The <b>rain</b> in <u>Spain</u> stays mainly in the plains.\n  </myNS:Body>\n</myNS:Article>\n```\n\n**Figure 5 : XSLT Stylesheet**\n\n``` xml\n<?xml version=\"1.0\"?>\n<xsl:stylesheet version=\"1.0\"\n                   xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n                   xmlns:myNS=\"http://devedge.netscape.com/2002/de\">\n\n  <xsl:output method=\"html\" />\n\n  <xsl:template match=\"/\">\n    <html>\n\n      <head>\n\n        <title>\n          <xsl:value-of select=\"/myNS:Article/myNS:Title\"/>\n        </title>\n\n        <style type=\"text/css\">\n          .myBox {margin:10px 155px 0 50px; border: 1px dotted #639ACE; padding:0 5px 0 5px;}\n        </style>\n\n      </head>\n\n      <body>\n        <p class=\"myBox\">\n          <span class=\"title\">\n            <xsl:value-of select=\"/myNS:Article/myNS:Title\"/>\n          </span> <br />\n\n          Authors:   <br />\n            <xsl:apply-templates select=\"/myNS:Article/myNS:Authors/myNS:Author\"/>\n          </p>\n\n        <p class=\"myBox\">\n          <xsl:apply-templates select=\"//myNS:Body\"/>\n        </p>\n\n      </body>\n\n    </html>\n  </xsl:template>\n\n  <xsl:template match=\"myNS:Author\">\n     --   <xsl:value-of select=\".\" />\n\n    <xsl:if test=\"@company\">\n     ::   <b>  <xsl:value-of select=\"@company\" />  </b>\n    </xsl:if>\n\n    <br />\n  </xsl:template>\n\n  <xsl:template match=\"myNS:Body\">\n    <xsl:copy>\n      <xsl:apply-templates select=\"@*|node()\"/>\n    </xsl:copy>\n  </xsl:template>\n\n  <xsl:template match=\"@*|node()\">\n      <xsl:copy>\n        <xsl:apply-templates select=\"@*|node()\"/>\n      </xsl:copy>\n  </xsl:template>\n</xsl:stylesheet>\n```\n\nThe example loads using synchronous [`XMLHTTPRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) both the .xsl (`xslStylesheet`) and the .xml (`xmlDoc`) files into memory. The .xsl file is then imported (`xsltProcessor.importStylesheet(xslStylesheet)`) and the transformation run (`xsltProcessor.transformToFragment(xmlDoc, document)`). This allows fetching of data after the page has been loaded, without initiating a fresh page load.\n\n**Figure 6 : Example**\n\n``` js\nlet xslStylesheet;\nconst xsltProcessor = new XSLTProcessor();\nlet myDOM;\n\nlet xmlDoc;\n\nfunction Init() {\n\n  // Load the xslt file, example1.xsl\n  let myXMLHTTPRequest = new XMLHttpRequest();\n  myXMLHTTPRequest.open(\"GET\", \"example1.xsl\", false);\n  myXMLHTTPRequest.send(null);\n\n  xslStylesheet = myXMLHTTPRequest.responseXML;\n  xsltProcessor.importStylesheet(xslStylesheet);\n\n  // Load the XML file, example1.xml\n  myXMLHTTPRequest = new XMLHttpRequest();\n  myXMLHTTPRequest.open(\"GET\", \"example1.xml\", false);\n  myXMLHTTPRequest.send(null);\n\n  xmlDoc = myXMLHTTPRequest.responseXML;\n\n  const fragment = xsltProcessor.transformToFragment(xmlDoc, document);\n  myDOM = fragment;\n  document.getElementById(\"example\").textContent = \"\";\n  document.getElementById(\"example\").appendChild(fragment);\n}\n```\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Basic_Example](https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Basic_Example)"
- name: XSLT JS interface in Gecko.Interface List
  id: xslt/xslt_js_interface_in_gecko/interface_list
  summary: See XSLTProcessor in the Web API documentation section
  description: "# Interface List\n\n## Interface List\n\nSee [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) in the Web API documentation section.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Interface_List](https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Interface_List)"
- name: XSLT JS interface in Gecko.Introduction
  id: xslt/xslt_js_interface_in_gecko/introduction
  summary: With modern browsers supporting XSLT, developers can now use JavaScript to access the power that XSLT provides
  description: "# Introduction\n\nWith modern browsers supporting [XSLT](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor), developers can now use JavaScript to access the power that XSLT provides. JavaScript can enable a web application to load XML data, process it via XSLT into a presentable form and then add it into an existing document. Since the XML data loaded only contains the raw information without any presentation data, it can load quickly even on dialup.\n\nXSLT allows the author to directly manipulate the structure of a document. For example, it permits the rearranging and sorting of elements; it also provides more fine-grained control of the resulting document's structure.\n\nAs of [Mozilla 1.2](https://www.mozilla.org/en-US/firefox/), Gecko enables JavaScript to create XSLT processors. This article covers XSLT/JavaScript bindings in Gecko. They are not available in Netscape 7.0x however are available in Netscape 7.1.\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Introduction](https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Introduction)"
- name: XSLT JS interface in Gecko.JavaScript XSLT Bindings
  id: xslt/xslt_js_interface_in_gecko/javascript_xslt_bindings
  summary: JavaScript can run XSLT transformations through the XSLTProcessor object
  description: "# JavaScript/XSLT Bindings\n\n## JavaScript/XSLT Bindings\n\nJavaScript can run XSLT transformations through the [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) object. Once instantiated, an [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) has an `XSLTProcessor.importStylesheet()` method that takes as an argument the XSLT stylesheet to be used in the transformation. The stylesheet has to be passed in as an XML document, which means that the .xsl file has to be loaded by the page before calling `XSLTProcessor.importStylesheet()`. This can be done via [`XMLHttpRequest`](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) or [`XMLDocument.load()`](https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument/load).\n\n**Figure 1 : Instantiating an [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor)**\n\n``` js\n  const xsltProcessor = new XSLTProcessor();\n\n  // Load the xsl file using synchronous (third param is set to false) XMLHttpRequest\n  const myXMLHTTPRequest = new XMLHttpRequest();\n  myXMLHTTPRequest.open(\"GET\", \"example.xsl\", false);\n  myXMLHTTPRequest.send(null);\n\n  const xslRef = myXMLHTTPRequest.responseXML;\n\n  // Finally import the .xsl\n  xsltProcessor.importStylesheet(xslRef);\n```\n\nFor the actual transformation, [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) requires an XML document, which is used in conjunction with the imported XSL file to produce the final result. The XML document can be a separate XML file loaded as shown in figure 1, or it can be part of the existing page. To process part of a page's DOM, it is necessary to first create an XML document in memory. Assuming that the DOM to be processed is contained by an element with the id `example`, that DOM can be \"cloned\" using the in-memory XML document's [`Document.importNode()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode) method. [`Document.importNode()`](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode) allows transferring a DOM fragment between documents, in this case from an HTML document to an XML document. The first parameter references the DOM node to clone. By making the second parameter \"true\", it will clone all descendants as well (a deep clone). The cloned DOM can then be easily inserted into the XML document using [`Node.appendChild()`](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild), as shown in figure 2.\n\n**Figure 2 : Creating an XML document based on part of a document's DOM**\n\n``` js\n  // Create a new XML document in memory\n  const xmlRef = document.implementation.createDocument(\"\", \"\", null);\n\n  // We want to move a part of the DOM from an HTML document to an XML document.\n  // importNode is used to clone the nodes we want to process via XSLT - true makes it do a deep clone\n  const myNode = document.getElementById(\"example\");\n  const clonedNode = xmlRef.importNode(myNode, true);\n\n  // Add the cloned DOM into the XML document\n  xmlRef.appendChild(clonedNode);\n```\n\nOnce the stylesheet has been imported, [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) has to perform two methods for the actual transformation, namely `XSLTProcessor.transformToDocument()` and `XSLTProcessor.transformToFragment()`. `XSLTProcessor.transformToDocument()` returns a full XML document while `XSLTProcessor.transformToFragment()` returns a document fragment that can be easily added to an existing document. Both take in the XML document as the first parameter that will be transformed. `XSLTProcessor.transformToFragment()` requires a second parameter, namely the document object that will own the generated fragment. If the generated fragment will be inserted into the current HTML document, passing in document is enough.\n\n**Figure 2.1 : Creating an XML document From a String 'XML Soup'**\n\nWhile you can use IE `loadXML` method to load a string containing XML you have to perform some tweaking and tuning to do the same in Mozilla. You must use the DomParser.no to create any document, as this is handled by the DomParser.\n\n``` js\nconst parser = new DOMParser();\nconst doc = parser.parseFromString(aStr, \"text/xml\");\n```\n\n**Figure 3 : Performing the transformation**\n\n``` js\n  const fragment = xsltProcessor.transformToFragment(xmlRef, document);\n```\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/JavaScript_XSLT_Bindings](https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/JavaScript_XSLT_Bindings)"
- name: XSLT JS interface in Gecko.Resources
  id: xslt/xslt_js_interface_in_gecko/resources
  summary: © 2005–2022 MDN contributors
  description: "# Resources\n\n## Resources\n\n- [Using the Mozilla JavaScript interface to XSL Transformations](../using_the_mozilla_javascript_interface_to_xsl_transformations)\n- [MDN's XSLT Page](../../index), which includes a frequently encountered issues section.\n- [MSDN: XSLT Concepts](https://docs.microsoft.com/previous-versions/windows/desktop/ms762773(v=vs.85))\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Resources](https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Resources)"
- name: XSLT JS interface in Gecko.Setting Parameters
  id: xslt/xslt_js_interface_in_gecko/setting_parameters
  summary: While running transformations using precoded .xsl and .xml files is quite useful, configuring the .xsl file from JavaScript may be even more useful
  description: "# Setting Parameters\n\n## Setting Parameters\n\nWhile running transformations using precoded .xsl and .xml files is quite useful, configuring the .xsl file from JavaScript may be even more useful. For example, JavaScript and XSLT could be used to sort XML data and then display it. The sorting would have to alternate between ascending and descending sorting.\n\nXSLT provides the `xsl:param` element, which is a child of the `xsl:stylesheet` element. [`XSLTProcessor`](https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor) provides three JavaScript methods to interact with these parameters: `XSLTProcessor.setParameter()`, `XSLTProcessor.getParameter()` and `XSLTProcessor.removeParameter()`. They all take as the first argument the namespace URI of the `xsl:param` (Usually the param will fall in the default namespace, so passing in `null` will suffice.) The local name of the `xsl:param` is the second argument. setParameter requires a third argument - namely the value to which the parameter will be set.\n\n**Figure 7 : Parameters**\n\n``` js\n/* XSLT:\n\n<xsl:param name=\"myOrder\" />\n\n*/\n\n// JavaScript:\n\nconst sortVal = xsltProcessor.getParameter(null, \"myOrder\");\n\nif (sortVal === \"\" || sortVal === \"descending\") {\n  xsltProcessor.setParameter(null, \"myOrder\", \"ascending\");\n} else {\n  xsltProcessor.setParameter(null, \"myOrder\", \"descending\");\n}\n```\n\n© 2005–2022 MDN contributors.  \nLicensed under the Creative Commons Attribution-ShareAlike License v2.5 or later.  \n[https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Setting_Parameters](https://developer.mozilla.org/en-US/docs/Web/XSLT/XSLT_JS_interface_in_Gecko/Setting_Parameters)"
