---
name: pytest
text_format: rst
generator: src:python
generator_command: src:python use "pytest"
language: python
version: 8.1.1
summary: 'pytest: simple powerful testing with Python'
description: |-
  [![pytest](https://github.com/pytest-dev/pytest/raw/main/doc/en/img/pytest_logo_curves.svg)](https://docs.pytest.org/en/stable/)

  ------------------------------------------------------------------------

  [![image](https://img.shields.io/pypi/v/pytest.svg)](https://pypi.org/project/pytest/)

  [![image](https://img.shields.io/conda/vn/conda-forge/pytest.svg)](https://anaconda.org/conda-forge/pytest)

  [![image](https://img.shields.io/pypi/pyversions/pytest.svg)](https://pypi.org/project/pytest/)

  [![Code coverage Status](https://codecov.io/gh/pytest-dev/pytest/branch/main/graph/badge.svg)](https://codecov.io/gh/pytest-dev/pytest)

  [![image](https://github.com/pytest-dev/pytest/actions/workflows/test.yml/badge.svg)](https://github.com/pytest-dev/pytest/actions?query=workflow%3Atest)

  [![pre-commit.ci status](https://results.pre-commit.ci/badge/github/pytest-dev/pytest/main.svg)](https://results.pre-commit.ci/latest/github/pytest-dev/pytest/main)

  [![image](https://www.codetriage.com/pytest-dev/pytest/badges/users.svg)](https://www.codetriage.com/pytest-dev/pytest)

  [![Documentation Status](https://readthedocs.org/projects/pytest/badge/?version=latest)](https://pytest.readthedocs.io/en/latest/?badge=latest)

  [![Discord](https://img.shields.io/badge/Discord-pytest--dev-blue)](https://discord.com/invite/pytest-dev)

  [![Libera chat](https://img.shields.io/badge/Libera%20chat-%23pytest-orange)](https://web.libera.chat/#pytest)

  The `pytest` framework makes it easy to write small tests, yet scales to
  support complex functional testing for applications and libraries.

  An example of a simple test:

  ``` python
  # content of test_sample.py
  def inc(x):
      return x + 1


  def test_answer():
      assert inc(3) == 5
  ```

  To execute it:

      $ pytest
      ============================= test session starts =============================
      collected 1 items

      test_sample.py F

      ================================== FAILURES ===================================
      _________________________________ test_answer _________________________________

          def test_answer():
      >       assert inc(3) == 5
      E       assert 4 == 5
      E        +  where 4 = inc(3)

      test_sample.py:5: AssertionError
      ========================== 1 failed in 0.04 seconds ===========================

  Due to `pytest`'s detailed assertion introspection, only plain `assert`
  statements are used. See
  [getting-started](https://docs.pytest.org/en/stable/getting-started.html#our-first-test-run)
  for more examples.

  # Features

  - Detailed info on failing [assert
    statements](https://docs.pytest.org/en/stable/how-to/assert.html) (no
    need to remember `self.assert*` names)
  - [Auto-discovery](https://docs.pytest.org/en/stable/explanation/goodpractices.html#python-test-discovery)
    of test modules and functions
  - [Modular
    fixtures](https://docs.pytest.org/en/stable/explanation/fixtures.html)
    for managing small or parametrized long-lived test resources
  - Can run
    [unittest](https://docs.pytest.org/en/stable/how-to/unittest.html) (or
    trial) test suites out of the box
  - Python 3.8+ or PyPy3
  - Rich plugin architecture, with over 1300+ [external
    plugins](https://docs.pytest.org/en/latest/reference/plugin_list.html)
    and thriving community

  # Documentation

  For full documentation, including installation, tutorials and PDF
  documents, please see <https://docs.pytest.org/en/stable/>.

  # Bugs/Requests

  Please use the [GitHub issue
  tracker](https://github.com/pytest-dev/pytest/issues) to submit bugs or
  request features.

  # Changelog

  Consult the
  [Changelog](https://docs.pytest.org/en/stable/changelog.html) page for
  fixes and enhancements of each version.

  # Support pytest

  [Open Collective](https://opencollective.com) is an online funding
  platform for open and transparent communities. It provides tools to
  raise money and share your finances in full transparency.

  It is the platform of choice for individuals and companies that want to
  make one-time or monthly donations directly to the project.

  See more details in the [pytest
  collective](https://opencollective.com/pytest).

  # pytest for enterprise

  Available as part of the Tidelift Subscription.

  The maintainers of pytest and thousands of other packages are working
  with Tidelift to deliver commercial support and maintenance for the open
  source dependencies you use to build your applications. Save time,
  reduce risk, and improve code health, while paying the maintainers of
  the exact dependencies you use.

  [Learn
  more.](https://tidelift.com/subscription/pkg/pypi-pytest?utm_source=pypi-pytest&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)

  ## Security

  pytest has never been associated with a security vulnerability, but in
  any case, to report a security vulnerability please use the [Tidelift
  security contact](https://tidelift.com/security). Tidelift will
  coordinate the fix and disclosure.

  # License

  Copyright Holger Krekel and others, 2004.

  Distributed under the terms of the
  [MIT](https://github.com/pytest-dev/pytest/blob/main/LICENSE) license,
  pytest is free and open source software.
homepage: null
license: MIT

---
- name: pytest
  kind: module
  ns: null
  description: 'pytest: unit and functional testing with Python.'
  summary: 'pytest: unit and functional testing with Python'
  signatures: null
  inherits_from: null
- name: approx
  kind: function
  ns: pytest
  description: |-
    Assert that two numbers (or two ordered sequences of numbers) are equal to each other
    within some tolerance.

    Due to the :doc:`python:tutorial/floatingpoint`, numbers that we
    would intuitively expect to be equal are not always so::

        >>> 0.1 + 0.2 == 0.3
        False

    This problem is commonly encountered when writing tests, e.g. when making
    sure that floating-point values are what you expect them to be.  One way to
    deal with this problem is to assert that two floating-point numbers are
    equal to within some appropriate tolerance::

        >>> abs((0.1 + 0.2) - 0.3) < 1e-6
        True

    However, comparisons like this are tedious to write and difficult to
    understand.  Furthermore, absolute comparisons like the one above are
    usually discouraged because there's no tolerance that works well for all
    situations.  ``1e-6`` is good for numbers around ``1``, but too small for
    very big numbers and too big for very small ones.  It's better to express
    the tolerance as a fraction of the expected value, but relative comparisons
    like that are even more difficult to write correctly and concisely.

    The ``approx`` class performs floating-point comparisons using a syntax
    that's as intuitive as possible::

        >>> from pytest import approx
        >>> 0.1 + 0.2 == approx(0.3)
        True

    The same syntax also works for ordered sequences of numbers::

        >>> (0.1 + 0.2, 0.2 + 0.4) == approx((0.3, 0.6))
        True

    ``numpy`` arrays::

        >>> import numpy as np                                                          # doctest: +SKIP
        >>> np.array([0.1, 0.2]) + np.array([0.2, 0.4]) == approx(np.array([0.3, 0.6])) # doctest: +SKIP
        True

    And for a ``numpy`` array against a scalar::

        >>> import numpy as np                                         # doctest: +SKIP
        >>> np.array([0.1, 0.2]) + np.array([0.2, 0.1]) == approx(0.3) # doctest: +SKIP
        True

    Only ordered sequences are supported, because ``approx`` needs
    to infer the relative position of the sequences without ambiguity. This means
    ``sets`` and other unordered sequences are not supported.

    Finally, dictionary *values* can also be compared::

        >>> {'a': 0.1 + 0.2, 'b': 0.2 + 0.4} == approx({'a': 0.3, 'b': 0.6})
        True

    The comparison will be true if both mappings have the same keys and their
    respective values match the expected tolerances.

    **Tolerances**

    By default, ``approx`` considers numbers within a relative tolerance of
    ``1e-6`` (i.e. one part in a million) of its expected value to be equal.
    This treatment would lead to surprising results if the expected value was
    ``0.0``, because nothing but ``0.0`` itself is relatively close to ``0.0``.
    To handle this case less surprisingly, ``approx`` also considers numbers
    within an absolute tolerance of ``1e-12`` of its expected value to be
    equal.  Infinity and NaN are special cases.  Infinity is only considered
    equal to itself, regardless of the relative tolerance.  NaN is not
    considered equal to anything by default, but you can make it be equal to
    itself by setting the ``nan_ok`` argument to True.  (This is meant to
    facilitate comparing arrays that use NaN to mean "no data".)

    Both the relative and absolute tolerances can be changed by passing
    arguments to the ``approx`` constructor::

        >>> 1.0001 == approx(1)
        False
        >>> 1.0001 == approx(1, rel=1e-3)
        True
        >>> 1.0001 == approx(1, abs=1e-3)
        True

    If you specify ``abs`` but not ``rel``, the comparison will not consider
    the relative tolerance at all.  In other words, two numbers that are within
    the default relative tolerance of ``1e-6`` will still be considered unequal
    if they exceed the specified absolute tolerance.  If you specify both
    ``abs`` and ``rel``, the numbers will be considered equal if either
    tolerance is met::

        >>> 1 + 1e-8 == approx(1)
        True
        >>> 1 + 1e-8 == approx(1, abs=1e-12)
        False
        >>> 1 + 1e-8 == approx(1, rel=1e-6, abs=1e-12)
        True

    You can also use ``approx`` to compare nonnumeric types, or dicts and
    sequences containing nonnumeric types, in which case it falls back to
    strict equality. This can be useful for comparing dicts and sequences that
    can contain optional values::

        >>> {"required": 1.0000005, "optional": None} == approx({"required": 1, "optional": None})
        True
        >>> [None, 1.0000005] == approx([None,1])
        True
        >>> ["foo", 1.0000005] == approx([None,1])
        False

    If you're thinking about using ``approx``, then you might want to know how
    it compares to other good ways of comparing floating-point numbers.  All of
    these algorithms are based on relative and absolute tolerances and should
    agree for the most part, but they do have meaningful differences:

    - ``math.isclose(a, b, rel_tol=1e-9, abs_tol=0.0)``:  True if the relative
      tolerance is met w.r.t. either ``a`` or ``b`` or if the absolute
      tolerance is met.  Because the relative tolerance is calculated w.r.t.
      both ``a`` and ``b``, this test is symmetric (i.e.  neither ``a`` nor
      ``b`` is a "reference value").  You have to specify an absolute tolerance
      if you want to compare to ``0.0`` because there is no tolerance by
      default.  More information: :py:func:`math.isclose`.

    - ``numpy.isclose(a, b, rtol=1e-5, atol=1e-8)``: True if the difference
      between ``a`` and ``b`` is less that the sum of the relative tolerance
      w.r.t. ``b`` and the absolute tolerance.  Because the relative tolerance
      is only calculated w.r.t. ``b``, this test is asymmetric and you can
      think of ``b`` as the reference value.  Support for comparing sequences
      is provided by :py:func:`numpy.allclose`.  More information:
      :std:doc:`numpy:reference/generated/numpy.isclose`.

    - ``unittest.TestCase.assertAlmostEqual(a, b)``: True if ``a`` and ``b``
      are within an absolute tolerance of ``1e-7``.  No relative tolerance is
      considered , so this function is not appropriate for very large or very
      small numbers.  Also, it's only available in subclasses of ``unittest.TestCase``
      and it's ugly because it doesn't follow PEP8.  More information:
      :py:meth:`unittest.TestCase.assertAlmostEqual`.

    - ``a == pytest.approx(b, rel=1e-6, abs=1e-12)``: True if the relative
      tolerance is met w.r.t. ``b`` or if the absolute tolerance is met.
      Because the relative tolerance is only calculated w.r.t. ``b``, this test
      is asymmetric and you can think of ``b`` as the reference value.  In the
      special case that you explicitly specify an absolute tolerance but not a
      relative tolerance, only the absolute tolerance is considered.

    .. note::

        ``approx`` can handle numpy arrays, but we recommend the
        specialised test helpers in :std:doc:`numpy:reference/routines.testing`
        if you need support for comparisons, NaNs, or ULP-based tolerances.

        To match strings using regex, you can use
        `Matches <https://github.com/asottile/re-assert#re_assertmatchespattern-str-args-kwargs>`_
        from the
        `re_assert package <https://github.com/asottile/re-assert>`_.

    .. warning::

       .. versionchanged:: 3.2

       In order to avoid inconsistent behavior, :py:exc:`TypeError` is
       raised for ``>``, ``>=``, ``<`` and ``<=`` comparisons.
       The example below illustrates the problem::

           assert approx(0.1) > 0.1 + 1e-10  # calls approx(0.1).__gt__(0.1 + 1e-10)
           assert 0.1 + 1e-10 > approx(0.1)  # calls approx(0.1).__lt__(0.1 + 1e-10)

       In the second example one expects ``approx(0.1).__le__(0.1 + 1e-10)``
       to be called. But instead, ``approx(0.1).__lt__(0.1 + 1e-10)`` is used to
       comparison. This is because the call hierarchy of rich comparisons
       follows a fixed behavior. More information: :py:meth:`object.__ge__`

    .. versionchanged:: 3.7.1
       ``approx`` raises ``TypeError`` when it encounters a dict value or
       sequence element of nonnumeric type.

    .. versionchanged:: 6.1.0
       ``approx`` falls back to strict equality for nonnumeric types instead
       of raising ``TypeError``.
  summary: Assert that two numbers (or two ordered sequences of numbers) are equal to each other
  signatures:
  - - kind: positional
      name: expected
      default: null
      rest: false
    - kind: positional
      name: rel
      default: None
      rest: false
    - kind: positional
      name: abs
      default: None
      rest: false
    - kind: positional
      name: nan_ok
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cache
  kind: class
  ns: pytest
  description: Instance of the `cache` fixture.
  summary: Instance of the `cache` fixture
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cachedir
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: Cache
      kind: return
  inherits_from: null
- name: Cache.cache_dir_from_config
  kind: method
  ns: pytest
  description: |-
    Get the path to the cache directory for a Config.

    :meta private:
  summary: Get the path to the cache directory for a Config
  signatures:
  - - kind: positional
      name: config
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Cache.clear_cache
  kind: function
  ns: pytest
  description: |-
    Clear the sub-directories used to hold cached directories and values.

    :meta private:
  summary: Clear the sub-directories used to hold cached directories and values
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: cachedir
      default: null
      rest: false
    - kind: positional
      name: _ispytest
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cache.for_config
  kind: function
  ns: pytest
  description: |-
    Create the Cache instance for a Config.

    :meta private:
  summary: Create the Cache instance for a Config
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Cache.get
  kind: method
  ns: pytest
  description: |-
    Return the cached value for the given key.

    If no value was yet cached or the value cannot be read, the specified
    default is returned.

    :param key:
        Must be a ``/`` separated value. Usually the first
        name is the name of your plugin or your application.
    :param default:
        The value to return in case of a cache-miss or invalid cache value.
  summary: Return the cached value for the given key
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cache.mkdir
  kind: method
  ns: pytest
  description: |-
    Return a directory path object with the given name.

    If the directory does not yet exist, it will be created. You can use
    it to manage files to e.g. store/retrieve database dumps across test
    sessions.

    .. versionadded:: 7.0

    :param name:
        Must be a string not containing a ``/`` separator.
        Make sure the name contains your plugin or application
        identifiers to prevent clashes with other cache users.
  summary: Return a directory path object with the given name
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cache.set
  kind: method
  ns: pytest
  description: |-
    Save value for the given key.

    :param key:
        Must be a ``/`` separated value. Usually the first
        name is the name of your plugin or your application.
    :param value:
        Must be of any combination of basic python types,
        including nested types like lists of dictionaries.
  summary: Save value for the given key
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cache.warn
  kind: method
  ns: pytest
  description: |-
    Issue a cache warning.

    :meta private:
  summary: Issue a cache warning
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fmt
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: CallInfo
  kind: class
  ns: pytest
  description: Result/Exception info of a function invocation.
  summary: Result/Exception info of a function invocation
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: result
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - kind: positional
      name: start
      default: null
      rest: false
    - kind: positional
      name: stop
      default: null
      rest: false
    - kind: positional
      name: duration
      default: null
      rest: false
    - kind: positional
      name: when
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: CallInfo
      kind: return
  inherits_from:
  - <class 'typing.Generic'>
- name: CallInfo.from_call
  kind: function
  ns: pytest
  description: |-
    Call func, wrapping the result in a CallInfo.

    :param func:
        The function to call. Called without arguments.
    :param when:
        The phase in which the function is called.
    :param reraise:
        Exception or exceptions that shall propagate if raised by the
        function, instead of being wrapped in the CallInfo.
  summary: Call func, wrapping the result in a CallInfo
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - kind: positional
      name: when
      default: null
      rest: false
    - kind: positional
      name: reraise
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CallInfo.result
  kind: property
  ns: pytest
  description: |-
    The return value of the call, if it didn't raise.

    Can only be accessed if excinfo is None.
  summary: The return value of the call, if it didn't raise
  signatures: null
  inherits_from: null
- name: CaptureFixture
  kind: class
  ns: pytest
  description: |-
    Object returned by the :fixture:`capsys`, :fixture:`capsysbinary`,
    :fixture:`capfd` and :fixture:`capfdbinary` fixtures.
  summary: Object returned by the :fixture:`capsys`, :fixture:`capsysbinary`,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: captureclass
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: CaptureFixture
      kind: return
  inherits_from:
  - <class 'typing.Generic'>
- name: CaptureFixture.close
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CaptureFixture.disabled
  kind: method
  ns: pytest
  description: Temporarily disable capturing while inside the ``with`` block.
  summary: Temporarily disable capturing while inside the ``with`` block
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: CaptureFixture.readouterr
  kind: method
  ns: pytest
  description: |-
    Read and return the captured output so far, resetting the internal
    buffer.

    :returns:
        The captured content as a namedtuple with ``out`` and ``err``
        string attributes.
  summary: Read and return the captured output so far, resetting the internal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class
  kind: class
  ns: pytest
  description: Collector for test methods (and nested classes) in a Python class.
  summary: Collector for test methods (and nested classes) in a Python class
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Class
      kind: return
  inherits_from:
  - <class '_pytest.python.PyCollector'>
  - <class '_pytest.python.PyobjMixin'>
  - <class '_pytest.nodes.Collector'>
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: Class.CollectError
  kind: class
  ns: pytest
  description: An error during collection, contains a custom message.
  summary: An error during collection, contains a custom message
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Class.CollectError.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Class.CollectError.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Class.CollectError.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Class.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.classnamefilter
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.cls
  kind: property
  ns: pytest
  description: Python class object this node was collected from (can be None).
  summary: Python class object this node was collected from (can be None)
  signatures: null
  inherits_from: null
- name: Class.collect
  kind: method
  ns: pytest
  description: Collect children (items and collectors) for this collector.
  summary: Collect children (items and collectors) for this collector
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Class.from_parent
  kind: function
  ns: pytest
  description: The public constructor.
  summary: The public constructor
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - name: name
      default: null
      rest: false
      kind: kw-only
    - name: obj
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.funcnamefilter
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.getmodpath
  kind: method
  ns: pytest
  description: Return Python path relative to the containing module.
  summary: Return Python path relative to the containing module
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: stopatmodule
      default: 'True'
      rest: false
    - kind: positional
      name: includemodule
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: Class.instance
  kind: property
  ns: pytest
  description: |-
    Python instance object the function is bound to.

    Returns None if not a test method, e.g. for a standalone test function,
    a staticmethod, a class or a module.
  summary: Python instance object the function is bound to
  signatures: null
  inherits_from: null
- name: Class.isnosetest
  kind: method
  ns: pytest
  description: |-
    Look for the __test__ attribute, which is applied by the
    @nose.tools.istest decorator.
  summary: Look for the __test__ attribute, which is applied by the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.istestclass
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.istestfunction
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.module
  kind: property
  ns: pytest
  description: Python module object this node was collected from (can be None).
  summary: Python module object this node was collected from (can be None)
  signatures: null
  inherits_from: null
- name: Class.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Class.newinstance
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: Class.obj
  kind: property
  ns: pytest
  description: Underlying Python object.
  summary: Underlying Python object
  signatures: null
  inherits_from: null
- name: Class.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Class.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Class.reportinfo
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection failure.

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Class.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Class.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: cmdline
  kind: class
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - type: cmdline
      kind: return
  inherits_from: null
- name: cmdline.main
  kind: method
  ns: pytest
  description: |-
    Perform an in-process test run.

    :param args:
        List of command line arguments. If `None` or not given, defaults to reading
        arguments directly from the process command line (:data:`sys.argv`).
    :param plugins: List of plugin objects to be auto-registered during initialization.

    :returns: An exit code.
  summary: Perform an in-process test run
  signatures:
  - - kind: positional
      name: args
      default: None
      rest: false
    - kind: positional
      name: plugins
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector
  kind: class
  ns: pytest
  description: |-
    Base class of all collectors.

    Collector create children through `collect()` and thus iteratively build
    the collection tree.
  summary: Base class of all collectors
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Collector
      kind: return
  inherits_from:
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: Collector.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.collect
  kind: method
  ns: pytest
  description: Collect children (items and collectors) for this collector.
  summary: Collect children (items and collectors) for this collector
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Collector.from_parent
  kind: function
  ns: pytest
  description: |-
    Public constructor for Nodes.

    This indirection got introduced in order to enable removing
    the fragile logic from the node constructors.

    Subclasses can use ``super().from_parent(...)`` when overriding the
    construction.

    :param parent: The parent node of this Node.
  summary: Public constructor for Nodes
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: Collector.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Collector.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: Collector.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Collector.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Collector.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection failure.

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Collector.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Collector.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CollectReport
  kind: class
  ns: pytest
  description: |-
    Collection report object.

    Reports can contain arbitrary extra attributes.
  summary: Collection report object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: nodeid
      default: null
      rest: false
    - kind: positional
      name: outcome
      default: null
      rest: false
    - kind: positional
      name: longrepr
      default: null
      rest: false
    - kind: positional
      name: result
      default: null
      rest: false
    - kind: positional
      name: sections
      default: ()
      rest: false
    - type: CollectReport
      kind: return
  inherits_from:
  - <class '_pytest.reports.BaseReport'>
- name: CollectReport.caplog
  kind: property
  ns: pytest
  description: |-
    Return captured log lines, if log capturing is enabled.

    .. versionadded:: 3.5
  summary: Return captured log lines, if log capturing is enabled
  signatures: null
  inherits_from: null
- name: CollectReport.capstderr
  kind: property
  ns: pytest
  description: |-
    Return captured text from stderr, if capturing is enabled.

    .. versionadded:: 3.0
  summary: Return captured text from stderr, if capturing is enabled
  signatures: null
  inherits_from: null
- name: CollectReport.capstdout
  kind: property
  ns: pytest
  description: |-
    Return captured text from stdout, if capturing is enabled.

    .. versionadded:: 3.0
  summary: Return captured text from stdout, if capturing is enabled
  signatures: null
  inherits_from: null
- name: CollectReport.count_towards_summary
  kind: property
  ns: pytest
  description: |-
    **Experimental** Whether this report should be counted towards the
    totals shown at the end of the test session: "1 passed, 1 failure, etc".

    .. note::

        This function is considered **experimental**, so beware that it is subject to changes
        even in patch releases.
  summary: '**Experimental** Whether this report should be counted towards the'
  signatures: null
  inherits_from: null
- name: CollectReport.failed
  kind: property
  ns: pytest
  description: Whether the outcome is failed.
  summary: Whether the outcome is failed
  signatures: null
  inherits_from: null
- name: CollectReport.fspath
  kind: property
  ns: pytest
  description: The path portion of the reported node, as a string.
  summary: The path portion of the reported node, as a string
  signatures: null
  inherits_from: null
- name: CollectReport.get_sections
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CollectReport.head_line
  kind: property
  ns: pytest
  description: |-
    **Experimental** The head line shown with longrepr output for this
    report, more commonly during traceback representation during
    failures::

        ________ Test.foo ________


    In the example above, the head_line is "Test.foo".

    .. note::

        This function is considered **experimental**, so beware that it is subject to changes
        even in patch releases.
  summary: '**Experimental** The head line shown with longrepr output for this'
  signatures: null
  inherits_from: null
- name: CollectReport.location
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CollectReport.longreprtext
  kind: property
  ns: pytest
  description: |-
    Read-only property that returns the full string representation of
    ``longrepr``.

    .. versionadded:: 3.0
  summary: Read-only property that returns the full string representation of
  signatures: null
  inherits_from: null
- name: CollectReport.passed
  kind: property
  ns: pytest
  description: Whether the outcome is passed.
  summary: Whether the outcome is passed
  signatures: null
  inherits_from: null
- name: CollectReport.skipped
  kind: property
  ns: pytest
  description: Whether the outcome is skipped.
  summary: Whether the outcome is skipped
  signatures: null
  inherits_from: null
- name: CollectReport.toterminal
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: out
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CollectReport.when
  kind: property
  ns: pytest
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Config
  kind: class
  ns: pytest
  description: |-
    Access to configuration values, pluginmanager and plugin hooks.

    :param PytestPluginManager pluginmanager:
        A pytest PluginManager.

    :param InvocationParams invocation_params:
        Object containing parameters regarding the :func:`pytest.main`
        invocation.
  summary: Access to configuration values, pluginmanager and plugin hooks
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pluginmanager
      default: null
      rest: false
    - name: invocation_params
      default: None
      rest: false
      kind: kw-only
    - type: Config
      kind: return
  inherits_from: null
- name: Config.ArgsSource
  kind: class
  ns: pytest
  description: |-
    Indicates the source of the test arguments.

    .. versionadded:: 7.2
  summary: Indicates the source of the test arguments
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: ArgsSource
      kind: return
  inherits_from:
  - <enum 'Enum'>
- name: Config.ArgsSource.ARGS
  kind: property
  ns: pytest
  description: |-
    Indicates the source of the test arguments.

    .. versionadded:: 7.2
  summary: Indicates the source of the test arguments
  signatures: null
  inherits_from: null
- name: Config.ArgsSource.INVOCATION_DIR
  kind: property
  ns: pytest
  description: |-
    Indicates the source of the test arguments.

    .. versionadded:: 7.2
  summary: Indicates the source of the test arguments
  signatures: null
  inherits_from: null
- name: Config.ArgsSource.TESTPATHS
  kind: property
  ns: pytest
  description: |-
    Indicates the source of the test arguments.

    .. versionadded:: 7.2
  summary: Indicates the source of the test arguments
  signatures: null
  inherits_from: null
- name: Config.ArgsSource.name
  kind: property
  ns: pytest
  description: The name of the Enum member.
  summary: The name of the Enum member
  signatures: null
  inherits_from: null
- name: Config.ArgsSource.value
  kind: property
  ns: pytest
  description: The value of the Enum member.
  summary: The value of the Enum member
  signatures: null
  inherits_from: null
- name: Config.InvocationParams
  kind: class
  ns: pytest
  description: |-
    Holds parameters passed during :func:`pytest.main`.

    The object attributes are read-only.

    .. versionadded:: 5.1

    .. note::

        Note that the environment variable ``PYTEST_ADDOPTS`` and the ``addopts``
        ini option are handled by pytest, not being included in the ``args`` attribute.

        Plugins accessing ``InvocationParams`` must be aware of that.
  summary: Holds parameters passed during :func:`pytest
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: args
      default: null
      rest: false
      kind: kw-only
    - name: plugins
      default: null
      rest: false
      kind: kw-only
    - name: dir
      default: null
      rest: false
      kind: kw-only
    - type: InvocationParams
      kind: return
  inherits_from: null
- name: Config.VERBOSITY_ASSERTIONS
  kind: property
  ns: pytest
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Config.VERBOSITY_TEST_CASES
  kind: property
  ns: pytest
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Config.add_cleanup
  kind: method
  ns: pytest
  description: |-
    Add a function to be called when the config object gets out of
    use (usually coinciding with pytest_unconfigure).
  summary: Add a function to be called when the config object gets out of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.addinivalue_line
  kind: method
  ns: pytest
  description: |-
    Add a line to an ini-file option. The option must have been
    declared but might not yet be set in which case the line becomes
    the first line in its value.
  summary: Add a line to an ini-file option
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: line
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.cwd_relative_nodeid
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: nodeid
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.fromdictargs
  kind: function
  ns: pytest
  description: Constructor usable for subprocesses.
  summary: Constructor usable for subprocesses
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: option_dict
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.get_terminal_writer
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.get_verbosity
  kind: method
  ns: pytest
  description: |-
    Retrieve the verbosity level for a fine-grained verbosity type.

    :param verbosity_type: Verbosity type to get level for. If a level is
        configured for the given type, that value will be returned. If the
        given type is not a known verbosity type, the global verbosity
        level will be returned. If the given type is None (default), the
        global verbosity level will be returned.

    To configure a level for a fine-grained verbosity type, the
    configuration file should have a setting for the configuration name
    and a numeric value for the verbosity level. A special value of "auto"
    can be used to explicitly use the global verbosity level.

    Example:
    .. code-block:: ini

        # content of pytest.ini
        [pytest]
        verbosity_assertions = 2

    .. code-block:: console

        pytest -v

    .. code-block:: python

        print(config.get_verbosity())  # 1
        print(config.get_verbosity(Config.VERBOSITY_ASSERTIONS))  # 2
  summary: Retrieve the verbosity level for a fine-grained verbosity type
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: verbosity_type
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.getini
  kind: method
  ns: pytest
  description: |-
    Return configuration value from an :ref:`ini file <configfiles>`.

    If a configuration value is not defined in an
    :ref:`ini file <configfiles>`, then the ``default`` value provided while
    registering the configuration through
    :func:`parser.addini <pytest.Parser.addini>` will be returned.
    Please note that you can even provide ``None`` as a valid
    default value.

    If ``default`` is not provided while registering using
    :func:`parser.addini <pytest.Parser.addini>`, then a default value
    based on the ``type`` parameter passed to
    :func:`parser.addini <pytest.Parser.addini>` will be returned.
    The default values based on ``type`` are:
    ``paths``, ``pathlist``, ``args`` and ``linelist`` : empty list ``[]``
    ``bool`` : ``False``
    ``string`` : empty string ``""``

    If neither the ``default`` nor the ``type`` parameter is passed
    while registering the configuration through
    :func:`parser.addini <pytest.Parser.addini>`, then the configuration
    is treated as a string and a default empty string '' is returned.

    If the specified name hasn't been registered through a prior
    :func:`parser.addini <pytest.Parser.addini>` call (usually from a
    plugin), a ValueError is raised.
  summary: Return configuration value from an :ref:`ini file <configfiles>`
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.getoption
  kind: method
  ns: pytest
  description: |-
    Return command line option value.

    :param name: Name of the option.  You may also specify
        the literal ``--OPT`` option instead of the "dest" option name.
    :param default: Default value if no option of that name exists.
    :param skip: If True, raise pytest.skip if option does not exists
        or has a None value.
  summary: Return command line option value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: <NOTSET>
      rest: false
    - kind: positional
      name: skip
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.getvalue
  kind: method
  ns: pytest
  description: Deprecated, use getoption() instead.
  summary: Deprecated, use getoption() instead
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.getvalueorskip
  kind: method
  ns: pytest
  description: Deprecated, use getoption(skip=True) instead.
  summary: Deprecated, use getoption(skip=True) instead
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.inipath
  kind: property
  ns: pytest
  description: |-
    The path to the :ref:`configfile <configfiles>`.

    :type: Optional[pathlib.Path]

    .. versionadded:: 6.1
  summary: The path to the :ref:`configfile <configfiles>`
  signatures: null
  inherits_from: null
- name: Config.issue_config_time_warning
  kind: method
  ns: pytest
  description: |-
    Issue and handle a warning during the "configure" stage.

    During ``pytest_configure`` we can't capture warnings using the ``catch_warnings_for_item``
    function because it is not possible to have hook wrappers around ``pytest_configure``.

    This function is mainly intended for plugins that need to issue warnings during
    ``pytest_configure`` (or similar stages).

    :param warning: The warning instance.
    :param stacklevel: stacklevel forwarded to warnings.warn.
  summary: Issue and handle a warning during the "configure" stage
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - kind: positional
      name: stacklevel
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.notify_exception
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - kind: positional
      name: option
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.parse
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - kind: positional
      name: addopts
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.pytest_cmdline_parse
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pluginmanager
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.pytest_collection
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.pytest_load_initial_conftests
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: early_config
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.rootpath
  kind: property
  ns: pytest
  description: |-
    The path to the :ref:`rootdir <rootdir>`.

    :type: pathlib.Path

    .. versionadded:: 6.1
  summary: The path to the :ref:`rootdir <rootdir>`
  signatures: null
  inherits_from: null
- name: console_main
  kind: function
  ns: pytest
  description: |-
    The CLI entry point of pytest.

    This function is not meant for programmable use; use `main()` instead.
  summary: The CLI entry point of pytest
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: deprecated_call
  kind: function
  ns: pytest
  description: |-
    Assert that code produces a ``DeprecationWarning`` or ``PendingDeprecationWarning`` or ``FutureWarning``.

    This function can be used as a context manager::

        >>> import warnings
        >>> def api_call_v2():
        ...     warnings.warn('use v3 of this api', DeprecationWarning)
        ...     return 200

        >>> import pytest
        >>> with pytest.deprecated_call():
        ...    assert api_call_v2() == 200

    It can also be used by passing a function and ``*args`` and ``**kwargs``,
    in which case it will ensure calling ``func(*args, **kwargs)`` produces one of
    the warnings types above. The return value is the return value of the function.

    In the context manager form you may use the keyword argument ``match`` to assert
    that the warning matches a text or regex.

    The context manager produces a list of :class:`warnings.WarningMessage` objects,
    one for each warning raised.
  summary: Assert that code produces a ``DeprecationWarning`` or ``PendingDeprecationWarning`` or ``FutureWarning``
  signatures:
  - - kind: positional
      name: func
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir
  kind: class
  ns: pytest
  description: |-
    Collector of files in a file system directory.

    .. versionadded:: 8.0

    .. note::

        Python directories with an `__init__.py` file are instead collected by
        :class:`~pytest.Package` by default. Both are :class:`~pytest.Directory`
        collectors.
  summary: Collector of files in a file system directory
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Dir
      kind: return
  inherits_from:
  - <class '_pytest.nodes.Directory'>
  - <class '_pytest.nodes.FSCollector'>
  - <class '_pytest.nodes.Collector'>
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: Dir.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.collect
  kind: method
  ns: pytest
  description: Collect children (items and collectors) for this collector.
  summary: Collect children (items and collectors) for this collector
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dir.from_parent
  kind: function
  ns: pytest
  description: |-
    The public constructor.

    :param parent: The parent collector of this Dir.
    :param path: The directory's path.
  summary: The public constructor
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - name: path
      default: null
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: Dir.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dir.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: Dir.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dir.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dir.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection failure.

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dir.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dir.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory
  kind: class
  ns: pytest
  description: |-
    Base class for collecting files from a directory.

    A basic directory collector does the following: goes over the files and
    sub-directories in the directory and creates collectors for them by calling
    the hooks :hook:`pytest_collect_directory` and :hook:`pytest_collect_file`,
    after checking that they are not ignored using
    :hook:`pytest_ignore_collect`.

    The default directory collectors are :class:`~pytest.Dir` and
    :class:`~pytest.Package`.

    .. versionadded:: 8.0

    :ref:`custom directory collectors`.
  summary: Base class for collecting files from a directory
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Directory
      kind: return
  inherits_from:
  - <class '_pytest.nodes.FSCollector'>
  - <class '_pytest.nodes.Collector'>
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: Directory.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.collect
  kind: method
  ns: pytest
  description: Collect children (items and collectors) for this collector.
  summary: Collect children (items and collectors) for this collector
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Directory.from_parent
  kind: function
  ns: pytest
  description: The public constructor.
  summary: The public constructor
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - name: fspath
      default: None
      rest: false
      kind: kw-only
    - name: path
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: Directory.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Directory.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: Directory.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Directory.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Directory.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection failure.

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Directory.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Directory.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem
  kind: class
  ns: pytest
  description: |-
    Base class of all test invocation items.

    Note that for a single function there might be multiple test invocation items.
  summary: Base class of all test invocation items
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: DoctestItem
      kind: return
  inherits_from:
  - <class '_pytest.nodes.Item'>
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: DoctestItem.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.add_report_section
  kind: method
  ns: pytest
  description: |-
    Add a new report section, similar to what's done internally to add
    stdout and stderr captured output::

        item.add_report_section("call", "stdout", "report section contents")

    :param str when:
        One of the possible capture states, ``"setup"``, ``"call"``, ``"teardown"``.
    :param str key:
        Name of the section, can be customized at will. Pytest uses ``"stdout"`` and
        ``"stderr"`` internally.
    :param str content:
        The full contents as a string.
  summary: Add a new report section, similar to what's done internally to add
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: when
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DoctestItem.from_parent
  kind: function
  ns: pytest
  description: The public named constructor.
  summary: The public named constructor
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - name: name
      default: null
      rest: false
      kind: kw-only
    - name: runner
      default: null
      rest: false
      kind: kw-only
    - name: dtest
      default: null
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: DoctestItem.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.location
  kind: property
  ns: pytest
  description: |-
    Returns a tuple of ``(relfspath, lineno, testname)`` for this item
    where ``relfspath`` is file path relative to ``config.rootpath``
    and lineno is a 0-based line number.
  summary: Returns a tuple of ``(relfspath, lineno, testname)`` for this item
  signatures: null
  inherits_from: null
- name: DoctestItem.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DoctestItem.nextitem
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DoctestItem.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: DoctestItem.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DoctestItem.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DoctestItem.reportinfo
  kind: method
  ns: pytest
  description: |-
    Get location information for this item for test reports.

    Returns a tuple with three elements:

    - The path of the test (default ``self.path``)
    - The 0-based line number of the test (default ``None``)
    - A name of the test to be shown (default ``""``)

    .. seealso:: :ref:`non-python tests`
  summary: Get location information for this item for test reports
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection or test failure.

    .. seealso:: :ref:`non-python tests`

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection or test failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.runtest
  kind: method
  ns: pytest
  description: |-
    Run the test case for this item.

    Must be implemented by subclasses.

    .. seealso:: :ref:`non-python tests`
  summary: Run the test case for this item
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DoctestItem.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoctestItem.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: exit
  kind: function
  ns: pytest
  description: |-
    Exit testing process.

    :param reason:
        The message to show as the reason for exiting pytest.  reason has a default value
        only because `msg` is deprecated.

    :param returncode:
        Return code to be used when exiting pytest. None means the same as ``0`` (no error), same as :func:`sys.exit`.
  summary: Exit testing process
  signatures:
  - - kind: positional
      name: reason
      default: null
      rest: false
    - kind: positional
      name: returncode
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo
  kind: class
  ns: pytest
  description: Wraps sys.exc_info() objects and offers help for navigating the traceback.
  summary: Wraps sys
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - kind: positional
      name: striptext
      default: null
      rest: false
    - kind: positional
      name: traceback
      default: None
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: ExceptionInfo
      kind: return
  inherits_from:
  - <class 'typing.Generic'>
- name: ExceptionInfo.errisinstance
  kind: method
  ns: pytest
  description: |-
    Return True if the exception is an instance of exc.

    Consider using ``isinstance(excinfo.value, exc)`` instead.
  summary: Return True if the exception is an instance of exc
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exc
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.exconly
  kind: method
  ns: pytest
  description: |-
    Return the exception as a string.

    When 'tryshort' resolves to True, and the exception is an
    AssertionError, only the actual exception part of the exception
    representation is returned (so 'AssertionError: ' is removed from
    the beginning).
  summary: Return the exception as a string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tryshort
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.fill_unfilled
  kind: method
  ns: pytest
  description: Fill an unfilled ExceptionInfo created with ``for_later()``.
  summary: Fill an unfilled ExceptionInfo created with ``for_later()``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exc_info
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.for_later
  kind: function
  ns: pytest
  description: Return an unfilled ExceptionInfo.
  summary: Return an unfilled ExceptionInfo
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.from_current
  kind: function
  ns: pytest
  description: |-
    Return an ExceptionInfo matching the current traceback.

    .. warning::

        Experimental API

    :param exprinfo:
        A text string helping to determine if we should strip
        ``AssertionError`` from the output. Defaults to the exception
        message/``__str__()``.
  summary: Return an ExceptionInfo matching the current traceback
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: exprinfo
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.from_exc_info
  kind: function
  ns: pytest
  description: Like :func:`from_exception`, but using old-style exc_info tuple.
  summary: Like :func:`from_exception`, but using old-style exc_info tuple
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: exc_info
      default: null
      rest: false
    - kind: positional
      name: exprinfo
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.from_exception
  kind: function
  ns: pytest
  description: |-
    Return an ExceptionInfo for an existing exception.

    The exception must have a non-``None`` ``__traceback__`` attribute,
    otherwise this function fails with an assertion error. This means that
    the exception must have been raised, or added a traceback with the
    :py:meth:`~BaseException.with_traceback()` method.

    :param exprinfo:
        A text string helping to determine if we should strip
        ``AssertionError`` from the output. Defaults to the exception
        message/``__str__()``.

    .. versionadded:: 7.4
  summary: Return an ExceptionInfo for an existing exception
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: exprinfo
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.getrepr
  kind: method
  ns: pytest
  description: |-
    Return str()able representation of this exception info.

    :param bool showlocals:
        Show locals per traceback entry.
        Ignored if ``style=="native"``.

    :param str style:
        long|short|line|no|native|value traceback style.

    :param bool abspath:
        If paths should be changed to absolute or left unchanged.

    :param tbfilter:
        A filter for traceback entries.

        * If false, don't hide any entries.
        * If true, hide internal entries and entries that contain a local
          variable ``__tracebackhide__ = True``.
        * If a callable, delegates the filtering to the callable.

        Ignored if ``style`` is ``"native"``.

    :param bool funcargs:
        Show fixtures ("funcargs" for legacy purposes) per traceback entry.

    :param bool truncate_locals:
        With ``showlocals==True``, make sure locals can be safely represented as strings.

    :param bool chain:
        If chained exceptions in Python 3 should be shown.

    .. versionchanged:: 3.9

        Added the ``chain`` parameter.
  summary: Return str()able representation of this exception info
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: showlocals
      default: 'False'
      rest: false
    - kind: positional
      name: style
      default: long
      rest: false
    - kind: positional
      name: abspath
      default: 'False'
      rest: false
    - kind: positional
      name: tbfilter
      default: 'True'
      rest: false
    - kind: positional
      name: funcargs
      default: 'False'
      rest: false
    - kind: positional
      name: truncate_locals
      default: 'True'
      rest: false
    - kind: positional
      name: chain
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.group_contains
  kind: method
  ns: pytest
  description: |-
    Check whether a captured exception group contains a matching exception.

    :param Type[BaseException] | Tuple[Type[BaseException]] expected_exception:
        The expected exception type, or a tuple if one of multiple possible
        exception types are expected.

    :param str | Pattern[str] | None match:
        If specified, a string containing a regular expression,
        or a regular expression object, that is tested against the string
        representation of the exception and its `PEP-678 <https://peps.python.org/pep-0678/>` `__notes__`
        using :func:`re.search`.

        To match a literal string that may contain :ref:`special characters
        <re-syntax>`, the pattern can first be escaped with :func:`re.escape`.

    :param Optional[int] depth:
        If `None`, will search for a matching exception at any nesting depth.
        If >= 1, will only match an exception if it's at the specified depth (depth = 1 being
        the exceptions contained within the topmost exception group).
  summary: Check whether a captured exception group contains a matching exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - name: match
      default: None
      rest: false
      kind: kw-only
    - name: depth
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.match
  kind: method
  ns: pytest
  description: |-
    Check whether the regular expression `regexp` matches the string
    representation of the exception using :func:`python:re.search`.

    If it matches `True` is returned, otherwise an `AssertionError` is raised.
  summary: Check whether the regular expression `regexp` matches the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: regexp
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionInfo.tb
  kind: property
  ns: pytest
  description: The exception raw traceback.
  summary: The exception raw traceback
  signatures: null
  inherits_from: null
- name: ExceptionInfo.traceback
  kind: property
  ns: pytest
  description: The traceback.
  summary: The traceback
  signatures: null
  inherits_from: null
- name: ExceptionInfo.type
  kind: property
  ns: pytest
  description: The exception class.
  summary: The exception class
  signatures: null
  inherits_from: null
- name: ExceptionInfo.typename
  kind: property
  ns: pytest
  description: The type name of the exception.
  summary: The type name of the exception
  signatures: null
  inherits_from: null
- name: ExceptionInfo.value
  kind: property
  ns: pytest
  description: The exception value.
  summary: The exception value
  signatures: null
  inherits_from: null
- name: ExitCode
  kind: class
  ns: pytest
  description: |-
    Encodes the valid exit codes by pytest.

    Currently users and plugins may supply other exit codes as well.

    .. versionadded:: 5.0
  summary: Encodes the valid exit codes by pytest
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: ExitCode
      kind: return
  inherits_from:
  - <enum 'IntEnum'>
  - <class 'int'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: ExitCode.INTERNAL_ERROR
  kind: property
  ns: pytest
  description: |-
    Encodes the valid exit codes by pytest.

    Currently users and plugins may supply other exit codes as well.

    .. versionadded:: 5.0
  summary: Encodes the valid exit codes by pytest
  signatures: null
  inherits_from: null
- name: ExitCode.INTERRUPTED
  kind: property
  ns: pytest
  description: |-
    Encodes the valid exit codes by pytest.

    Currently users and plugins may supply other exit codes as well.

    .. versionadded:: 5.0
  summary: Encodes the valid exit codes by pytest
  signatures: null
  inherits_from: null
- name: ExitCode.NO_TESTS_COLLECTED
  kind: property
  ns: pytest
  description: |-
    Encodes the valid exit codes by pytest.

    Currently users and plugins may supply other exit codes as well.

    .. versionadded:: 5.0
  summary: Encodes the valid exit codes by pytest
  signatures: null
  inherits_from: null
- name: ExitCode.OK
  kind: property
  ns: pytest
  description: |-
    Encodes the valid exit codes by pytest.

    Currently users and plugins may supply other exit codes as well.

    .. versionadded:: 5.0
  summary: Encodes the valid exit codes by pytest
  signatures: null
  inherits_from: null
- name: ExitCode.TESTS_FAILED
  kind: property
  ns: pytest
  description: |-
    Encodes the valid exit codes by pytest.

    Currently users and plugins may supply other exit codes as well.

    .. versionadded:: 5.0
  summary: Encodes the valid exit codes by pytest
  signatures: null
  inherits_from: null
- name: ExitCode.USAGE_ERROR
  kind: property
  ns: pytest
  description: |-
    Encodes the valid exit codes by pytest.

    Currently users and plugins may supply other exit codes as well.

    .. versionadded:: 5.0
  summary: Encodes the valid exit codes by pytest
  signatures: null
  inherits_from: null
- name: ExitCode.as_integer_ratio
  kind: callable
  ns: pytest
  description: |-
    Return integer ratio.

    Return a pair of integers, whose ratio is exactly equal to the original int
    and with a positive denominator.

    >>> (10).as_integer_ratio()
    (10, 1)
    >>> (-10).as_integer_ratio()
    (-10, 1)
    >>> (0).as_integer_ratio()
    (0, 1)
  summary: Return integer ratio
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExitCode.bit_count
  kind: callable
  ns: pytest
  description: |-
    Number of ones in the binary representation of the absolute value of self.

    Also known as the population count.

    >>> bin(13)
    '0b1101'
    >>> (13).bit_count()
    3
  summary: Number of ones in the binary representation of the absolute value of self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExitCode.bit_length
  kind: callable
  ns: pytest
  description: |-
    Number of bits necessary to represent self in binary.

    >>> bin(37)
    '0b100101'
    >>> (37).bit_length()
    6
  summary: Number of bits necessary to represent self in binary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExitCode.conjugate
  kind: callable
  ns: pytest
  description: Returns self, the complex conjugate of any int.
  summary: Returns self, the complex conjugate of any int
  signatures: null
  inherits_from: null
- name: ExitCode.denominator
  kind: property
  ns: pytest
  description: the denominator of a rational number in lowest terms
  summary: the denominator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: ExitCode.imag
  kind: property
  ns: pytest
  description: the imaginary part of a complex number
  summary: the imaginary part of a complex number
  signatures: null
  inherits_from: null
- name: ExitCode.numerator
  kind: property
  ns: pytest
  description: the numerator of a rational number in lowest terms
  summary: the numerator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: ExitCode.real
  kind: property
  ns: pytest
  description: the real part of a complex number
  summary: the real part of a complex number
  signatures: null
  inherits_from: null
- name: ExitCode.to_bytes
  kind: callable
  ns: pytest
  description: |-
    Return an array of bytes representing an integer.

    length
      Length of bytes object to use.  An OverflowError is raised if the
      integer is not representable with the given number of bytes.  Default
      is length 1.
    byteorder
      The byte order used to represent the integer.  If byteorder is 'big',
      the most significant byte is at the beginning of the byte array.  If
      byteorder is 'little', the most significant byte is at the end of the
      byte array.  To request the native byte order of the host system, use
      `sys.byteorder' as the byte order value.  Default is to use 'big'.
    signed
      Determines whether two's complement is used to represent the integer.
      If signed is False and a negative integer is given, an OverflowError
      is raised.
  summary: Return an array of bytes representing an integer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: length
      default: '1'
      rest: false
    - kind: positional
      name: byteorder
      default: big
      rest: false
    - name: signed
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: fail
  kind: function
  ns: pytest
  description: |-
    Explicitly fail an executing test with the given message.

    :param reason:
        The message to show the user as reason for the failure.

    :param pytrace:
        If False, msg represents the full failure information and no
        python traceback will be reported.
  summary: Explicitly fail an executing test with the given message
  signatures:
  - - kind: positional
      name: reason
      default: null
      rest: false
    - kind: positional
      name: pytrace
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File
  kind: class
  ns: pytest
  description: |-
    Base class for collecting tests from a file.

    :ref:`non-python tests`.
  summary: Base class for collecting tests from a file
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: File
      kind: return
  inherits_from:
  - <class '_pytest.nodes.FSCollector'>
  - <class '_pytest.nodes.Collector'>
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: File.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.collect
  kind: method
  ns: pytest
  description: Collect children (items and collectors) for this collector.
  summary: Collect children (items and collectors) for this collector
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: File.from_parent
  kind: function
  ns: pytest
  description: The public constructor.
  summary: The public constructor
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - name: fspath
      default: None
      rest: false
      kind: kw-only
    - name: path
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: File.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: File.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: File.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: File.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: File.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: File.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection failure.

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: File.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: fixture
  kind: function
  ns: pytest
  description: |-
    Decorator to mark a fixture factory function.

    This decorator can be used, with or without parameters, to define a
    fixture function.

    The name of the fixture function can later be referenced to cause its
    invocation ahead of running tests: test modules or classes can use the
    ``pytest.mark.usefixtures(fixturename)`` marker.

    Test functions can directly use fixture names as input arguments in which
    case the fixture instance returned from the fixture function will be
    injected.

    Fixtures can provide their values to test functions using ``return`` or
    ``yield`` statements. When using ``yield`` the code block after the
    ``yield`` statement is executed as teardown code regardless of the test
    outcome, and must yield exactly once.

    :param scope:
        The scope for which this fixture is shared; one of ``"function"``
        (default), ``"class"``, ``"module"``, ``"package"`` or ``"session"``.

        This parameter may also be a callable which receives ``(fixture_name, config)``
        as parameters, and must return a ``str`` with one of the values mentioned above.

        See :ref:`dynamic scope` in the docs for more information.

    :param params:
        An optional list of parameters which will cause multiple invocations
        of the fixture function and all of the tests using it. The current
        parameter is available in ``request.param``.

    :param autouse:
        If True, the fixture func is activated for all tests that can see it.
        If False (the default), an explicit reference is needed to activate
        the fixture.

    :param ids:
        Sequence of ids each corresponding to the params so that they are
        part of the test id. If no ids are provided they will be generated
        automatically from the params.

    :param name:
        The name of the fixture. This defaults to the name of the decorated
        function. If a fixture is used in the same module in which it is
        defined, the function name of the fixture will be shadowed by the
        function arg that requests the fixture; one way to resolve this is to
        name the decorated function ``fixture_<fixturename>`` and then use
        ``@pytest.fixture(name='<fixturename>')``.
  summary: Decorator to mark a fixture factory function
  signatures:
  - - kind: positional
      name: fixture_function
      default: None
      rest: false
    - name: scope
      default: function
      rest: false
      kind: kw-only
    - name: params
      default: None
      rest: false
      kind: kw-only
    - name: autouse
      default: 'False'
      rest: false
      kind: kw-only
    - name: ids
      default: None
      rest: false
      kind: kw-only
    - name: name
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureDef
  kind: class
  ns: pytest
  description: |-
    A container for a fixture definition.

    Note: At this time, only explicitly documented fields and methods are
    considered public stable API.
  summary: A container for a fixture definition
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - kind: positional
      name: baseid
      default: null
      rest: false
    - kind: positional
      name: argname
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - kind: positional
      name: scope
      default: null
      rest: false
    - kind: positional
      name: params
      default: null
      rest: false
    - kind: positional
      name: unittest
      default: 'False'
      rest: false
    - kind: positional
      name: ids
      default: None
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: FixtureDef
      kind: return
  inherits_from:
  - <class 'typing.Generic'>
- name: FixtureDef.addfinalizer
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: finalizer
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureDef.cache_key
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureDef.execute
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureDef.finish
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureDef.scope
  kind: property
  ns: pytest
  description: Scope string, one of "function", "class", "module", "package", "session".
  summary: Scope string, one of "function", "class", "module", "package", "session"
  signatures: null
  inherits_from: null
- name: FixtureLookupError
  kind: class
  ns: pytest
  description: Could not return a requested fixture (missing or invalid).
  summary: Could not return a requested fixture (missing or invalid)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: argname
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: FixtureLookupError
      kind: return
  inherits_from:
  - <class 'LookupError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FixtureLookupError.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FixtureLookupError.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FixtureLookupError.formatrepr
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureLookupError.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: FixtureRequest
  kind: class
  ns: pytest
  description: |-
    The type of the ``request`` fixture.

    A request object gives access to the requesting test context and has a
    ``param`` attribute in case the fixture is parametrized.
  summary: The type of the ``request`` fixture
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pyfuncitem
      default: null
      rest: false
    - kind: positional
      name: fixturename
      default: null
      rest: false
    - kind: positional
      name: arg2fixturedefs
      default: null
      rest: false
    - kind: positional
      name: fixture_defs
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: FixtureRequest
      kind: return
  inherits_from:
  - <class 'abc.ABC'>
- name: FixtureRequest.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Add finalizer/teardown function to be called without arguments after
    the last test within the requesting test context finished execution.
  summary: Add finalizer/teardown function to be called without arguments after
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: finalizer
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureRequest.applymarker
  kind: method
  ns: pytest
  description: |-
    Apply a marker to a single test function invocation.

    This method is useful if you don't want to have a keyword/marker
    on all function invocations.

    :param marker:
        An object created by a call to ``pytest.mark.NAME(...)``.
  summary: Apply a marker to a single test function invocation
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureRequest.cls
  kind: property
  ns: pytest
  description: Class (can be None) where the test function was collected.
  summary: Class (can be None) where the test function was collected
  signatures: null
  inherits_from: null
- name: FixtureRequest.config
  kind: property
  ns: pytest
  description: The pytest config object associated with this request.
  summary: The pytest config object associated with this request
  signatures: null
  inherits_from: null
- name: FixtureRequest.fixturenames
  kind: property
  ns: pytest
  description: Names of all active fixtures in this request.
  summary: Names of all active fixtures in this request
  signatures: null
  inherits_from: null
- name: FixtureRequest.function
  kind: property
  ns: pytest
  description: Test function object if the request has a per-function scope.
  summary: Test function object if the request has a per-function scope
  signatures: null
  inherits_from: null
- name: FixtureRequest.getfixturevalue
  kind: method
  ns: pytest
  description: |-
    Dynamically run a named fixture function.

    Declaring fixtures via function argument is recommended where possible.
    But if you can only decide whether to use another fixture at test
    setup time, you may use this function to retrieve it inside a fixture
    or test function body.

    This method can be used during the test setup phase or the test run
    phase, but during the test teardown phase a fixture's value may not
    be available.

    :param argname:
        The fixture name.
    :raises pytest.FixtureLookupError:
        If the given fixture could not be found.
  summary: Dynamically run a named fixture function
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: argname
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureRequest.instance
  kind: property
  ns: pytest
  description: Instance (can be None) on which test function was collected.
  summary: Instance (can be None) on which test function was collected
  signatures: null
  inherits_from: null
- name: FixtureRequest.keywords
  kind: property
  ns: pytest
  description: Keywords/markers dictionary for the underlying node.
  summary: Keywords/markers dictionary for the underlying node
  signatures: null
  inherits_from: null
- name: FixtureRequest.module
  kind: property
  ns: pytest
  description: Python module object where the test function was collected.
  summary: Python module object where the test function was collected
  signatures: null
  inherits_from: null
- name: FixtureRequest.node
  kind: property
  ns: pytest
  description: Underlying collection node (depends on current request scope).
  summary: Underlying collection node (depends on current request scope)
  signatures: null
  inherits_from: null
- name: FixtureRequest.path
  kind: property
  ns: pytest
  description: Path where the test function was collected.
  summary: Path where the test function was collected
  signatures: null
  inherits_from: null
- name: FixtureRequest.raiseerror
  kind: method
  ns: pytest
  description: |-
    Raise a FixtureLookupError exception.

    :param msg:
        An optional custom error message.
  summary: Raise a FixtureLookupError exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: msg
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FixtureRequest.scope
  kind: property
  ns: pytest
  description: Scope string, one of "function", "class", "module", "package", "session".
  summary: Scope string, one of "function", "class", "module", "package", "session"
  signatures: null
  inherits_from: null
- name: FixtureRequest.session
  kind: property
  ns: pytest
  description: Pytest session object.
  summary: Pytest session object
  signatures: null
  inherits_from: null
- name: freeze_includes
  kind: function
  ns: pytest
  description: |-
    Return a list of module names used by pytest that should be
    included by cx_freeze.
  summary: Return a list of module names used by pytest that should be
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Function
  kind: class
  ns: pytest
  description: |-
    Item responsible for setting up and executing a Python test function.

    :param name:
        The full function name, including any decorations like those
        added by parametrization (``my_func[my_param]``).
    :param parent:
        The parent Node.
    :param config:
        The pytest Config object.
    :param callspec:
        If given, this function has been parametrized and the callspec contains
        meta information about the parametrization.
    :param callobj:
        If given, the object which will be called when the Function is invoked,
        otherwise the callobj will be obtained from ``parent`` using ``originalname``.
    :param keywords:
        Keywords bound to the function object for "-k" matching.
    :param session:
        The pytest Session object.
    :param fixtureinfo:
        Fixture information already resolved at this fixture node..
    :param originalname:
        The attribute name to use for accessing the underlying function object.
        Defaults to ``name``. Set this if name is different from the original name,
        for example when it contains decorations like those added by parametrization
        (``my_func[my_param]``).
  summary: Item responsible for setting up and executing a Python test function
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Function
      kind: return
  inherits_from:
  - <class '_pytest.python.PyobjMixin'>
  - <class '_pytest.nodes.Item'>
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: Function.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.add_report_section
  kind: method
  ns: pytest
  description: |-
    Add a new report section, similar to what's done internally to add
    stdout and stderr captured output::

        item.add_report_section("call", "stdout", "report section contents")

    :param str when:
        One of the possible capture states, ``"setup"``, ``"call"``, ``"teardown"``.
    :param str key:
        Name of the section, can be customized at will. Pytest uses ``"stdout"`` and
        ``"stderr"`` internally.
    :param str content:
        The full contents as a string.
  summary: Add a new report section, similar to what's done internally to add
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: when
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.cls
  kind: property
  ns: pytest
  description: Python class object this node was collected from (can be None).
  summary: Python class object this node was collected from (can be None)
  signatures: null
  inherits_from: null
- name: Function.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Function.from_parent
  kind: function
  ns: pytest
  description: The public constructor.
  summary: The public constructor
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.function
  kind: property
  ns: pytest
  description: Underlying python 'function' object.
  summary: Underlying python 'function' object
  signatures: null
  inherits_from: null
- name: Function.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.getmodpath
  kind: method
  ns: pytest
  description: Return Python path relative to the containing module.
  summary: Return Python path relative to the containing module
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: stopatmodule
      default: 'True'
      rest: false
    - kind: positional
      name: includemodule
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: Function.instance
  kind: property
  ns: pytest
  description: |-
    Python instance object the function is bound to.

    Returns None if not a test method, e.g. for a standalone test function,
    a staticmethod, a class or a module.
  summary: Python instance object the function is bound to
  signatures: null
  inherits_from: null
- name: Function.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.location
  kind: property
  ns: pytest
  description: |-
    Returns a tuple of ``(relfspath, lineno, testname)`` for this item
    where ``relfspath`` is file path relative to ``config.rootpath``
    and lineno is a 0-based line number.
  summary: Returns a tuple of ``(relfspath, lineno, testname)`` for this item
  signatures: null
  inherits_from: null
- name: Function.module
  kind: property
  ns: pytest
  description: Python module object this node was collected from (can be None).
  summary: Python module object this node was collected from (can be None)
  signatures: null
  inherits_from: null
- name: Function.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Function.nextitem
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Function.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: Function.obj
  kind: property
  ns: pytest
  description: Underlying Python object.
  summary: Underlying Python object
  signatures: null
  inherits_from: null
- name: Function.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Function.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Function.reportinfo
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection or test failure.

    .. seealso:: :ref:`non-python tests`

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection or test failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.runtest
  kind: method
  ns: pytest
  description: Execute the underlying test function.
  summary: Execute the underlying test function
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Function.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Function.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: hookimpl
  kind: callable
  ns: pytest
  description: |-
    Decorator for marking functions as hook implementations.

    Instantiate it with a ``project_name`` to get a decorator.
    Calling :meth:`PluginManager.register` later will discover all marked
    functions if the :class:`PluginManager` uses the same project name.
  summary: Decorator for marking functions as hook implementations
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: function
      default: None
      rest: false
    - kind: positional
      name: hookwrapper
      default: 'False'
      rest: false
    - kind: positional
      name: optionalhook
      default: 'False'
      rest: false
    - kind: positional
      name: tryfirst
      default: 'False'
      rest: false
    - kind: positional
      name: trylast
      default: 'False'
      rest: false
    - kind: positional
      name: specname
      default: None
      rest: false
    - kind: positional
      name: wrapper
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder
  kind: class
  ns: pytest
  description: |-
    Record all hooks called in a plugin manager.

    Hook recorders are created by :class:`Pytester`.

    This wraps all the hook calls in the plugin manager, recording each call
    before propagating the normal calls.
  summary: Record all hooks called in a plugin manager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pluginmanager
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: HookRecorder
      kind: return
  inherits_from: null
- name: HookRecorder.assert_contains
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: entries
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.assertoutcome
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: passed
      default: '0'
      rest: false
    - kind: positional
      name: skipped
      default: '0'
      rest: false
    - kind: positional
      name: failed
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.clear
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.countoutcomes
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.finish_recording
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.getcall
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.getcalls
  kind: method
  ns: pytest
  description: Get all recorded calls to hooks with the given names (or name).
  summary: Get all recorded calls to hooks with the given names (or name)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: names
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.getfailedcollections
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.getfailures
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: names
      default: ('pytest_collectreport', 'pytest_runtest_logreport')
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.getreports
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: names
      default: ('pytest_collectreport', 'pytest_runtest_logreport')
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.listoutcomes
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.matchreport
  kind: method
  ns: pytest
  description: Return a testreport whose dotted import path matches.
  summary: Return a testreport whose dotted import path matches
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: inamepart
      default: null
      rest: false
    - kind: positional
      name: names
      default: ('pytest_runtest_logreport', 'pytest_collectreport')
      rest: false
    - kind: positional
      name: when
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HookRecorder.popcall
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: hookspec
  kind: callable
  ns: pytest
  description: |-
    Decorator for marking functions as hook specifications.

    Instantiate it with a project_name to get a decorator.
    Calling :meth:`PluginManager.add_hookspecs` later will discover all marked
    functions if the :class:`PluginManager` uses the same project name.
  summary: Decorator for marking functions as hook specifications
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: function
      default: None
      rest: false
    - kind: positional
      name: firstresult
      default: 'False'
      rest: false
    - kind: positional
      name: historic
      default: 'False'
      rest: false
    - kind: positional
      name: warn_on_impl
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: importorskip
  kind: function
  ns: pytest
  description: |-
    Import and return the requested module ``modname``, or skip the
    current test if the module cannot be imported.

    :param modname:
        The name of the module to import.
    :param minversion:
        If given, the imported module's ``__version__`` attribute must be at
        least this minimal version, otherwise the test is still skipped.
    :param reason:
        If given, this reason is shown as the message when the module cannot
        be imported.

    :returns:
        The imported module. This should be assigned to its canonical name.

    Example::

        docutils = pytest.importorskip("docutils")
  summary: Import and return the requested module ``modname``, or skip the
  signatures:
  - - kind: positional
      name: modname
      default: null
      rest: false
    - kind: positional
      name: minversion
      default: None
      rest: false
    - kind: positional
      name: reason
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item
  kind: class
  ns: pytest
  description: |-
    Base class of all test invocation items.

    Note that for a single function there might be multiple test invocation items.
  summary: Base class of all test invocation items
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Item
      kind: return
  inherits_from:
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: Item.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.add_report_section
  kind: method
  ns: pytest
  description: |-
    Add a new report section, similar to what's done internally to add
    stdout and stderr captured output::

        item.add_report_section("call", "stdout", "report section contents")

    :param str when:
        One of the possible capture states, ``"setup"``, ``"call"``, ``"teardown"``.
    :param str key:
        Name of the section, can be customized at will. Pytest uses ``"stdout"`` and
        ``"stderr"`` internally.
    :param str content:
        The full contents as a string.
  summary: Add a new report section, similar to what's done internally to add
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: when
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Item.from_parent
  kind: function
  ns: pytest
  description: |-
    Public constructor for Nodes.

    This indirection got introduced in order to enable removing
    the fragile logic from the node constructors.

    Subclasses can use ``super().from_parent(...)`` when overriding the
    construction.

    :param parent: The parent node of this Node.
  summary: Public constructor for Nodes
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: Item.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.location
  kind: property
  ns: pytest
  description: |-
    Returns a tuple of ``(relfspath, lineno, testname)`` for this item
    where ``relfspath`` is file path relative to ``config.rootpath``
    and lineno is a 0-based line number.
  summary: Returns a tuple of ``(relfspath, lineno, testname)`` for this item
  signatures: null
  inherits_from: null
- name: Item.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Item.nextitem
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Item.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: Item.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Item.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Item.reportinfo
  kind: method
  ns: pytest
  description: |-
    Get location information for this item for test reports.

    Returns a tuple with three elements:

    - The path of the test (default ``self.path``)
    - The 0-based line number of the test (default ``None``)
    - A name of the test to be shown (default ``""``)

    .. seealso:: :ref:`non-python tests`
  summary: Get location information for this item for test reports
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection or test failure.

    .. seealso:: :ref:`non-python tests`

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection or test failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - kind: positional
      name: style
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.runtest
  kind: method
  ns: pytest
  description: |-
    Run the test case for this item.

    Must be implemented by subclasses.

    .. seealso:: :ref:`non-python tests`
  summary: Run the test case for this item
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Item.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Item.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LineMatcher
  kind: class
  ns: pytest
  description: |-
    Flexible matching of text.

    This is a convenience class to test large texts like the output of
    commands.

    The constructor takes a list of lines without their trailing newlines, i.e.
    ``text.splitlines()``.
  summary: Flexible matching of text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: LineMatcher
      kind: return
  inherits_from: null
- name: LineMatcher.fnmatch_lines
  kind: method
  ns: pytest
  description: |-
    Check lines exist in the output (using :func:`python:fnmatch.fnmatch`).

    The argument is a list of lines which have to match and can use glob
    wildcards.  If they do not match a pytest.fail() is called.  The
    matches and non-matches are also shown as part of the error message.

    :param lines2: String patterns to match.
    :param consecutive: Match lines consecutively?
  summary: Check lines exist in the output (using :func:`python:fnmatch
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines2
      default: null
      rest: false
    - name: consecutive
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: LineMatcher.fnmatch_lines_random
  kind: method
  ns: pytest
  description: Check lines exist in the output in any order (using :func:`python:fnmatch.fnmatch`).
  summary: Check lines exist in the output in any order (using :func:`python:fnmatch
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines2
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LineMatcher.get_lines_after
  kind: method
  ns: pytest
  description: |-
    Return all lines following the given line in the text.

    The given line can contain glob wildcards.
  summary: Return all lines following the given line in the text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fnline
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LineMatcher.no_fnmatch_line
  kind: method
  ns: pytest
  description: |-
    Ensure captured lines do not match the given pattern, using ``fnmatch.fnmatch``.

    :param str pat: The pattern to match lines.
  summary: Ensure captured lines do not match the given pattern, using ``fnmatch
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pat
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LineMatcher.no_re_match_line
  kind: method
  ns: pytest
  description: |-
    Ensure captured lines do not match the given pattern, using ``re.match``.

    :param str pat: The regular expression to match lines.
  summary: Ensure captured lines do not match the given pattern, using ``re
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pat
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LineMatcher.re_match_lines
  kind: method
  ns: pytest
  description: |-
    Check lines exist in the output (using :func:`python:re.match`).

    The argument is a list of lines which have to match using ``re.match``.
    If they do not match a pytest.fail() is called.

    The matches and non-matches are also shown as part of the error message.

    :param lines2: string patterns to match.
    :param consecutive: match lines consecutively?
  summary: Check lines exist in the output (using :func:`python:re
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines2
      default: null
      rest: false
    - name: consecutive
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: LineMatcher.re_match_lines_random
  kind: method
  ns: pytest
  description: Check lines exist in the output in any order (using :func:`python:re.match`).
  summary: Check lines exist in the output in any order (using :func:`python:re
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines2
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LineMatcher.str
  kind: method
  ns: pytest
  description: Return the entire original text.
  summary: Return the entire original text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LogCaptureFixture
  kind: class
  ns: pytest
  description: Provides access and control of log capturing.
  summary: Provides access and control of log capturing
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: item
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: LogCaptureFixture
      kind: return
  inherits_from: null
- name: LogCaptureFixture.at_level
  kind: method
  ns: pytest
  description: |-
    Context manager that sets the level for capturing of logs. After
    the end of the 'with' statement the level is restored to its original
    value.

    Will enable the requested logging level if it was disabled via :func:`logging.disable`.

    :param level: The level.
    :param logger: The logger to update. If not given, the root logger.
  summary: Context manager that sets the level for capturing of logs
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LogCaptureFixture.clear
  kind: method
  ns: pytest
  description: Reset the list of log records and the captured log text.
  summary: Reset the list of log records and the captured log text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LogCaptureFixture.filtering
  kind: method
  ns: pytest
  description: |-
    Context manager that temporarily adds the given filter to the caplog's
    :meth:`handler` for the 'with' statement block, and removes that filter at the
    end of the block.

    :param filter_: A custom :class:`logging.Filter` object.

    .. versionadded:: 7.5
  summary: Context manager that temporarily adds the given filter to the caplog's
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LogCaptureFixture.get_records
  kind: method
  ns: pytest
  description: |-
    Get the logging records for one of the possible test phases.

    :param when:
        Which test phase to obtain the records from.
        Valid values are: "setup", "call" and "teardown".

    :returns: The list of captured records at the given stage.

    .. versionadded:: 3.4
  summary: Get the logging records for one of the possible test phases
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: when
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LogCaptureFixture.handler
  kind: property
  ns: pytest
  description: Get the logging handler used by the fixture.
  summary: Get the logging handler used by the fixture
  signatures: null
  inherits_from: null
- name: LogCaptureFixture.messages
  kind: property
  ns: pytest
  description: |-
    A list of format-interpolated log messages.

    Unlike 'records', which contains the format string and parameters for
    interpolation, log messages in this list are all interpolated.

    Unlike 'text', which contains the output from the handler, log
    messages in this list are unadorned with levels, timestamps, etc,
    making exact comparisons more reliable.

    Note that traceback or stack info (from :func:`logging.exception` or
    the `exc_info` or `stack_info` arguments to the logging functions) is
    not included, as this is added by the formatter in the handler.

    .. versionadded:: 3.7
  summary: A list of format-interpolated log messages
  signatures: null
  inherits_from: null
- name: LogCaptureFixture.record_tuples
  kind: property
  ns: pytest
  description: |-
    A list of a stripped down version of log records intended
    for use in assertion comparison.

    The format of the tuple is:

        (logger_name, log_level, message)
  summary: A list of a stripped down version of log records intended
  signatures: null
  inherits_from: null
- name: LogCaptureFixture.records
  kind: property
  ns: pytest
  description: The list of log records.
  summary: The list of log records
  signatures: null
  inherits_from: null
- name: LogCaptureFixture.set_level
  kind: method
  ns: pytest
  description: |-
    Set the threshold level of a logger for the duration of a test.

    Logging messages which are less severe than this level will not be captured.

    .. versionchanged:: 3.4
        The levels of the loggers changed by this function will be
        restored to their initial values at the end of the test.

    Will enable the requested logging level if it was disabled via :func:`logging.disable`.

    :param level: The level.
    :param logger: The logger to update. If not given, the root logger.
  summary: Set the threshold level of a logger for the duration of a test
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: level
      default: null
      rest: false
    - kind: positional
      name: logger
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LogCaptureFixture.text
  kind: property
  ns: pytest
  description: The formatted log text.
  summary: The formatted log text
  signatures: null
  inherits_from: null
- name: main
  kind: function
  ns: pytest
  description: |-
    Perform an in-process test run.

    :param args:
        List of command line arguments. If `None` or not given, defaults to reading
        arguments directly from the process command line (:data:`sys.argv`).
    :param plugins: List of plugin objects to be auto-registered during initialization.

    :returns: An exit code.
  summary: Perform an in-process test run
  signatures:
  - - kind: positional
      name: args
      default: None
      rest: false
    - kind: positional
      name: plugins
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: mark
  kind: const
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Mark
  kind: class
  ns: pytest
  description: A pytest mark.
  summary: A pytest mark
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - kind: positional
      name: kwargs
      default: null
      rest: false
    - kind: positional
      name: param_ids_from
      default: None
      rest: false
    - kind: positional
      name: param_ids_generated
      default: None
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: Mark
      kind: return
  inherits_from: null
- name: Mark.combined_with
  kind: method
  ns: pytest
  description: |-
    Return a new Mark which is a combination of this
    Mark and another Mark.

    Combines by appending args and merging kwargs.

    :param Mark other: The mark to combine with.
    :rtype: Mark
  summary: Return a new Mark which is a combination of this
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: other
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MarkDecorator
  kind: class
  ns: pytest
  description: |-
    A decorator for applying a mark on test functions and classes.

    ``MarkDecorators`` are created with ``pytest.mark``::

        mark1 = pytest.mark.NAME  # Simple MarkDecorator
        mark2 = pytest.mark.NAME(name1=value)  # Parametrized MarkDecorator

    and can then be applied as decorators to test functions::

        @mark2
        def test_function():
            pass

    When a ``MarkDecorator`` is called, it does the following:

    1. If called with a single class as its only positional argument and no
       additional keyword arguments, it attaches the mark to the class so it
       gets applied automatically to all test cases found in that class.

    2. If called with a single function as its only positional argument and
       no additional keyword arguments, it attaches the mark to the function,
       containing all the arguments already stored internally in the
       ``MarkDecorator``.

    3. When called in any other case, it returns a new ``MarkDecorator``
       instance with the original ``MarkDecorator``'s content updated with
       the arguments passed to this call.

    Note: The rules above prevent a ``MarkDecorator`` from storing only a
    single function or class reference as its positional argument with no
    additional keyword or positional arguments. You can work around this by
    using `with_args()`.
  summary: A decorator for applying a mark on test functions and classes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mark
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: MarkDecorator
      kind: return
  inherits_from: null
- name: MarkDecorator.args
  kind: property
  ns: pytest
  description: Alias for mark.args.
  summary: Alias for mark
  signatures: null
  inherits_from: null
- name: MarkDecorator.kwargs
  kind: property
  ns: pytest
  description: Alias for mark.kwargs.
  summary: Alias for mark
  signatures: null
  inherits_from: null
- name: MarkDecorator.markname
  kind: property
  ns: pytest
  description: ':meta private:'
  summary: ':meta private:'
  signatures: null
  inherits_from: null
- name: MarkDecorator.name
  kind: property
  ns: pytest
  description: Alias for mark.name.
  summary: Alias for mark
  signatures: null
  inherits_from: null
- name: MarkDecorator.with_args
  kind: method
  ns: pytest
  description: |-
    Return a MarkDecorator with extra arguments added.

    Unlike calling the MarkDecorator, with_args() can be used even
    if the sole argument is a callable/class.
  summary: Return a MarkDecorator with extra arguments added
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MarkGenerator
  kind: class
  ns: pytest
  description: |-
    Factory for :class:`MarkDecorator` objects - exposed as
    a ``pytest.mark`` singleton instance.

    Example::

         import pytest


         @pytest.mark.slowtest
         def test_function():
             pass

    applies a 'slowtest' :class:`Mark` on ``test_function``.
  summary: Factory for :class:`MarkDecorator` objects - exposed as
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: MarkGenerator
      kind: return
  inherits_from: null
- name: Metafunc
  kind: class
  ns: pytest
  description: |-
    Objects passed to the :hook:`pytest_generate_tests` hook.

    They help to inspect a test function and to generate tests according to
    test configuration or values specified in the class or module where a
    test function is defined.
  summary: Objects passed to the :hook:`pytest_generate_tests` hook
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: definition
      default: null
      rest: false
    - kind: positional
      name: fixtureinfo
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - kind: positional
      name: cls
      default: None
      rest: false
    - kind: positional
      name: module
      default: None
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: Metafunc
      kind: return
  inherits_from: null
- name: Metafunc.parametrize
  kind: method
  ns: pytest
  description: |-
    Add new invocations to the underlying test function using the list
    of argvalues for the given argnames. Parametrization is performed
    during the collection phase. If you need to setup expensive resources
    see about setting indirect to do it rather than at test setup time.

    Can be called multiple times per test function (but only on different
    argument names), in which case each call parametrizes all previous
    parametrizations, e.g.

    ::

        unparametrized:         t
        parametrize ["x", "y"]: t[x], t[y]
        parametrize [1, 2]:     t[x-1], t[x-2], t[y-1], t[y-2]

    :param argnames:
        A comma-separated string denoting one or more argument names, or
        a list/tuple of argument strings.

    :param argvalues:
        The list of argvalues determines how often a test is invoked with
        different argument values.

        If only one argname was specified argvalues is a list of values.
        If N argnames were specified, argvalues must be a list of
        N-tuples, where each tuple-element specifies a value for its
        respective argname.

    :param indirect:
        A list of arguments' names (subset of argnames) or a boolean.
        If True the list contains all names from the argnames. Each
        argvalue corresponding to an argname in this list will
        be passed as request.param to its respective argname fixture
        function so that it can perform more expensive setups during the
        setup phase of a test rather than at collection time.

    :param ids:
        Sequence of (or generator for) ids for ``argvalues``,
        or a callable to return part of the id for each argvalue.

        With sequences (and generators like ``itertools.count()``) the
        returned ids should be of type ``string``, ``int``, ``float``,
        ``bool``, or ``None``.
        They are mapped to the corresponding index in ``argvalues``.
        ``None`` means to use the auto-generated id.

        If it is a callable it will be called for each entry in
        ``argvalues``, and the return value is used as part of the
        auto-generated id for the whole set (where parts are joined with
        dashes ("-")).
        This is useful to provide more specific ids for certain items, e.g.
        dates.  Returning ``None`` will use an auto-generated id.

        If no ids are provided they will be generated automatically from
        the argvalues.

    :param scope:
        If specified it denotes the scope of the parameters.
        The scope is used for grouping tests by parameter instances.
        It will also override any fixture-function defined scope, allowing
        to set a dynamic scope using test context or configuration.
  summary: Add new invocations to the underlying test function using the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: argnames
      default: null
      rest: false
    - kind: positional
      name: argvalues
      default: null
      rest: false
    - kind: positional
      name: indirect
      default: 'False'
      rest: false
    - kind: positional
      name: ids
      default: None
      rest: false
    - kind: positional
      name: scope
      default: None
      rest: false
    - name: _param_mark
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Module
  kind: class
  ns: pytest
  description: Collector for test classes and functions in a Python module.
  summary: Collector for test classes and functions in a Python module
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Module
      kind: return
  inherits_from:
  - <class '_pytest.nodes.File'>
  - <class '_pytest.nodes.FSCollector'>
  - <class '_pytest.python.PyCollector'>
  - <class '_pytest.python.PyobjMixin'>
  - <class '_pytest.nodes.Collector'>
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: Module.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.classnamefilter
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.cls
  kind: property
  ns: pytest
  description: Python class object this node was collected from (can be None).
  summary: Python class object this node was collected from (can be None)
  signatures: null
  inherits_from: null
- name: Module.collect
  kind: method
  ns: pytest
  description: Collect children (items and collectors) for this collector.
  summary: Collect children (items and collectors) for this collector
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Module.from_parent
  kind: function
  ns: pytest
  description: The public constructor.
  summary: The public constructor
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - name: fspath
      default: None
      rest: false
      kind: kw-only
    - name: path
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.funcnamefilter
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.getmodpath
  kind: method
  ns: pytest
  description: Return Python path relative to the containing module.
  summary: Return Python path relative to the containing module
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: stopatmodule
      default: 'True'
      rest: false
    - kind: positional
      name: includemodule
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: Module.instance
  kind: property
  ns: pytest
  description: |-
    Python instance object the function is bound to.

    Returns None if not a test method, e.g. for a standalone test function,
    a staticmethod, a class or a module.
  summary: Python instance object the function is bound to
  signatures: null
  inherits_from: null
- name: Module.isnosetest
  kind: method
  ns: pytest
  description: |-
    Look for the __test__ attribute, which is applied by the
    @nose.tools.istest decorator.
  summary: Look for the __test__ attribute, which is applied by the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.istestclass
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.istestfunction
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.module
  kind: property
  ns: pytest
  description: Python module object this node was collected from (can be None).
  summary: Python module object this node was collected from (can be None)
  signatures: null
  inherits_from: null
- name: Module.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Module.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: Module.obj
  kind: property
  ns: pytest
  description: Underlying Python object.
  summary: Underlying Python object
  signatures: null
  inherits_from: null
- name: Module.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Module.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Module.reportinfo
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection failure.

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Module.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Module.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch
  kind: class
  ns: pytest
  description: |-
    Helper to conveniently monkeypatch attributes/items/environment
    variables/syspath.

    Returned by the :fixture:`monkeypatch` fixture.

    .. versionchanged:: 6.2
        Can now also be used directly as `pytest.MonkeyPatch()`, for when
        the fixture is not available. In this case, use
        :meth:`with MonkeyPatch.context() as mp: <context>` or remember to call
        :meth:`undo` explicitly.
  summary: Helper to conveniently monkeypatch attributes/items/environment
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: MonkeyPatch
      kind: return
  inherits_from: null
- name: MonkeyPatch.chdir
  kind: method
  ns: pytest
  description: |-
    Change the current working directory to the specified path.

    :param path:
        The path to change into.
  summary: Change the current working directory to the specified path
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch.context
  kind: function
  ns: pytest
  description: |-
    Context manager that returns a new :class:`MonkeyPatch` object
    which undoes any patching done inside the ``with`` block upon exit.

    Example:
    .. code-block:: python

        import functools


        def test_partial(monkeypatch):
            with monkeypatch.context() as m:
                m.setattr(functools, "partial", 3)

    Useful in situations where it is desired to undo some patches before the test ends,
    such as mocking ``stdlib`` functions that might break pytest itself if mocked (for examples
    of this see :issue:`3290`).
  summary: Context manager that returns a new :class:`MonkeyPatch` object
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch.delattr
  kind: method
  ns: pytest
  description: |-
    Delete attribute ``name`` from ``target``.

    If no ``name`` is specified and ``target`` is a string
    it will be interpreted as a dotted import path with the
    last part being the attribute name.

    Raises AttributeError it the attribute does not exist, unless
    ``raising`` is set to False.
  summary: Delete attribute ``name`` from ``target``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - kind: positional
      name: name
      default: <notset>
      rest: false
    - kind: positional
      name: raising
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch.delenv
  kind: method
  ns: pytest
  description: |-
    Delete ``name`` from the environment.

    Raises ``KeyError`` if it does not exist, unless ``raising`` is set to
    False.
  summary: Delete ``name`` from the environment
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: raising
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch.delitem
  kind: method
  ns: pytest
  description: |-
    Delete ``name`` from dict.

    Raises ``KeyError`` if it doesn't exist, unless ``raising`` is set to
    False.
  summary: Delete ``name`` from dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: dic
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: raising
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch.setattr
  kind: method
  ns: pytest
  description: |-
    Set attribute value on target, memorizing the old value.

    For example:

    .. code-block:: python

        import os

        monkeypatch.setattr(os, "getcwd", lambda: "/")

    The code above replaces the :func:`os.getcwd` function by a ``lambda`` which
    always returns ``"/"``.

    For convenience, you can specify a string as ``target`` which
    will be interpreted as a dotted import path, with the last part
    being the attribute name:

    .. code-block:: python

        monkeypatch.setattr("os.getcwd", lambda: "/")

    Raises :class:`AttributeError` if the attribute does not exist, unless
    ``raising`` is set to False.

    **Where to patch**

    ``monkeypatch.setattr`` works by (temporarily) changing the object that a name points to with another one.
    There can be many names pointing to any individual object, so for patching to work you must ensure
    that you patch the name used by the system under test.

    See the section :ref:`Where to patch <python:where-to-patch>` in the :mod:`unittest.mock`
    docs for a complete explanation, which is meant for :func:`unittest.mock.patch` but
    applies to ``monkeypatch.setattr`` as well.
  summary: Set attribute value on target, memorizing the old value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: value
      default: <notset>
      rest: false
    - kind: positional
      name: raising
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch.setenv
  kind: method
  ns: pytest
  description: |-
    Set environment variable ``name`` to ``value``.

    If ``prepend`` is a character, read the current environment variable
    value and prepend the ``value`` adjoined with the ``prepend``
    character.
  summary: Set environment variable ``name`` to ``value``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: prepend
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch.setitem
  kind: method
  ns: pytest
  description: Set dictionary entry ``name`` to value.
  summary: Set dictionary entry ``name`` to value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: dic
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch.syspath_prepend
  kind: method
  ns: pytest
  description: Prepend ``path`` to ``sys.path`` list of import locations.
  summary: Prepend ``path`` to ``sys
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonkeyPatch.undo
  kind: method
  ns: pytest
  description: |-
    Undo previous changes.

    This call consumes the undo stack. Calling it a second time has no
    effect unless you do more monkeypatching after the undo call.

    There is generally no need to call `undo()`, since it is
    called automatically during tear-down.

    .. note::
        The same `monkeypatch` fixture is used across a
        single test function invocation. If `monkeypatch` is used both by
        the test function itself and one of the test fixtures,
        calling `undo()` will undo all of the changes made in
        both functions.

        Prefer to use :meth:`context() <pytest.MonkeyPatch.context>` instead.
  summary: Undo previous changes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: OptionGroup
  kind: class
  ns: pytest
  description: A group of options shown in its own section.
  summary: A group of options shown in its own section
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: description
      default: null
      rest: false
    - kind: positional
      name: parser
      default: None
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: OptionGroup
      kind: return
  inherits_from: null
- name: OptionGroup.addoption
  kind: method
  ns: pytest
  description: |-
    Add an option to this group.

    If a shortened version of a long option is specified, it will
    be suppressed in the help. ``addoption('--twowords', '--two-words')``
    results in help showing ``--two-words`` only, but ``--twowords`` gets
    accepted **and** the automatic destination is in ``args.twowords``.

    :param opts:
        Option names, can be short or long options.
    :param attrs:
        Same attributes as the argparse library's :meth:`add_argument()
        <argparse.ArgumentParser.add_argument>` function accepts.
  summary: Add an option to this group
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package
  kind: class
  ns: pytest
  description: |-
    Collector for files and directories in a Python packages -- directories
    with an `__init__.py` file.

    .. note::

        Directories without an `__init__.py` file are instead collected by
        :class:`~pytest.Dir` by default. Both are :class:`~pytest.Directory`
        collectors.

    .. versionchanged:: 8.0

        Now inherits from :class:`~pytest.Directory`.
  summary: Collector for files and directories in a Python packages -- directories
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Package
      kind: return
  inherits_from:
  - <class '_pytest.nodes.Directory'>
  - <class '_pytest.nodes.FSCollector'>
  - <class '_pytest.nodes.Collector'>
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: Package.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.collect
  kind: method
  ns: pytest
  description: Collect children (items and collectors) for this collector.
  summary: Collect children (items and collectors) for this collector
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Package.from_parent
  kind: function
  ns: pytest
  description: The public constructor.
  summary: The public constructor
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - name: fspath
      default: None
      rest: false
      kind: kw-only
    - name: path
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: Package.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Package.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: Package.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Package.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Package.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection failure.

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Package.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Package.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: param
  kind: function
  ns: pytest
  description: |-
    Specify a parameter in `pytest.mark.parametrize`_ calls or
    :ref:`parametrized fixtures <fixture-parametrize-marks>`.

    .. code-block:: python

        @pytest.mark.parametrize(
            "test_input,expected",
            [
                ("3+5", 8),
                pytest.param("6*9", 42, marks=pytest.mark.xfail),
            ],
        )
        def test_eval(test_input, expected):
            assert eval(test_input) == expected

    :param values: Variable args of the values of the parameter set, in order.
    :param marks: A single mark or a list of marks to be applied to this parameter set.
    :param id: The id to attribute to this parameter set.
  summary: Specify a parameter in `pytest
  signatures:
  - - name: marks
      default: ()
      rest: false
      kind: kw-only
    - name: id
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Parser
  kind: class
  ns: pytest
  description: |-
    Parser for command line arguments and ini-file values.

    :ivar extra_info: Dict of generic param -> value to display in case
        there's an error processing the command line arguments.
  summary: Parser for command line arguments and ini-file values
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: usage
      default: None
      rest: false
    - kind: positional
      name: processopt
      default: None
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: Parser
      kind: return
  inherits_from: null
- name: Parser.addini
  kind: method
  ns: pytest
  description: |-
    Register an ini-file option.

    :param name:
        Name of the ini-variable.
    :param type:
        Type of the variable. Can be:

            * ``string``: a string
            * ``bool``: a boolean
            * ``args``: a list of strings, separated as in a shell
            * ``linelist``: a list of strings, separated by line breaks
            * ``paths``: a list of :class:`pathlib.Path`, separated as in a shell
            * ``pathlist``: a list of ``py.path``, separated as in a shell

        For ``paths`` and ``pathlist`` types, they are considered relative to the ini-file.
        In case the execution is happening without an ini-file defined,
        they will be considered relative to the current working directory (for example with ``--override-ini``).

        .. versionadded:: 7.0
            The ``paths`` variable type.

        .. versionadded:: 8.1
            Use the current working directory to resolve ``paths`` and ``pathlist`` in the absence of an ini-file.

        Defaults to ``string`` if ``None`` or not passed.
    :param default:
        Default value if no ini-file option exists but is queried.

    The value of ini-variables can be retrieved via a call to
    :py:func:`config.getini(name) <pytest.Config.getini>`.
  summary: Register an ini-file option
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: help
      default: null
      rest: false
    - kind: positional
      name: type
      default: None
      rest: false
    - kind: positional
      name: default
      default: <notset>
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Parser.addoption
  kind: method
  ns: pytest
  description: |-
    Register a command line option.

    :param opts:
        Option names, can be short or long options.
    :param attrs:
        Same attributes as the argparse library's :meth:`add_argument()
        <argparse.ArgumentParser.add_argument>` function accepts.

    After command line parsing, options are available on the pytest config
    object via ``config.option.NAME`` where ``NAME`` is usually set
    by passing a ``dest`` attribute, for example
    ``addoption("--long", dest="NAME", ...)``.
  summary: Register a command line option
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Parser.getgroup
  kind: method
  ns: pytest
  description: |-
    Get (or create) a named option Group.

    :param name: Name of the option group.
    :param description: Long description for --help output.
    :param after: Name of another group, used for ordering --help output.
    :returns: The option group.

    The returned group object has an ``addoption`` method with the same
    signature as :func:`parser.addoption <pytest.Parser.addoption>` but
    will be shown in the respective group in the output of
    ``pytest --help``.
  summary: Get (or create) a named option Group
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: description
      default: null
      rest: false
    - kind: positional
      name: after
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Parser.parse
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - kind: positional
      name: namespace
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Parser.parse_known_and_unknown_args
  kind: method
  ns: pytest
  description: |-
    Parse the known arguments at this point, and also return the
    remaining unknown arguments.

    :returns:
        A tuple containing an argparse namespace object for the known
        arguments, and a list of the unknown arguments.
  summary: Parse the known arguments at this point, and also return the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - kind: positional
      name: namespace
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Parser.parse_known_args
  kind: method
  ns: pytest
  description: |-
    Parse the known arguments at this point.

    :returns: An argparse namespace object.
  summary: Parse the known arguments at this point
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - kind: positional
      name: namespace
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Parser.parse_setoption
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - kind: positional
      name: option
      default: null
      rest: false
    - kind: positional
      name: namespace
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Parser.processoption
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: option
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Parser.prog
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestAssertRewriteWarning
  kind: class
  ns: pytest
  description: Warning emitted by the pytest assert rewrite module.
  summary: Warning emitted by the pytest assert rewrite module
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestAssertRewriteWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestAssertRewriteWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestAssertRewriteWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestCacheWarning
  kind: class
  ns: pytest
  description: Warning emitted by the cache plugin in various situations.
  summary: Warning emitted by the cache plugin in various situations
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestCacheWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestCacheWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestCacheWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestCollectionWarning
  kind: class
  ns: pytest
  description: Warning emitted when pytest is not able to collect a file or symbol in a module.
  summary: Warning emitted when pytest is not able to collect a file or symbol in a module
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestCollectionWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestCollectionWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestCollectionWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestConfigWarning
  kind: class
  ns: pytest
  description: Warning emitted for configuration issues.
  summary: Warning emitted for configuration issues
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestConfigWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestConfigWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestConfigWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestDeprecationWarning
  kind: class
  ns: pytest
  description: Warning class for features that will be removed in a future version.
  summary: Warning class for features that will be removed in a future version
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'DeprecationWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestDeprecationWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestDeprecationWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestDeprecationWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestExperimentalApiWarning
  kind: class
  ns: pytest
  description: |-
    Warning category used to denote experiments in pytest.

    Use sparingly as the API might change or even be removed completely in a
    future version.
  summary: Warning category used to denote experiments in pytest
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'FutureWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestExperimentalApiWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestExperimentalApiWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestExperimentalApiWarning.simple
  kind: function
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: apiname
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestExperimentalApiWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestRemovedIn9Warning
  kind: class
  ns: pytest
  description: Warning class for features that will be removed in pytest 9.
  summary: Warning class for features that will be removed in pytest 9
  signatures: null
  inherits_from:
  - <class 'pytest.PytestDeprecationWarning'>
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'DeprecationWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestRemovedIn9Warning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestRemovedIn9Warning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestRemovedIn9Warning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestReturnNotNoneWarning
  kind: class
  ns: pytest
  description: Warning emitted when a test function is returning value other than None.
  summary: Warning emitted when a test function is returning value other than None
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestReturnNotNoneWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestReturnNotNoneWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestReturnNotNoneWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Pytester
  kind: class
  ns: pytest
  description: |-
    Facilities to write tests/configuration files, execute pytest in isolation, and match
    against expected output, perfect for black-box testing of pytest plugins.

    It attempts to isolate the test run from external factors as much as possible, modifying
    the current working directory to :attr:`path` and environment variables during initialization.
  summary: Facilities to write tests/configuration files, execute pytest in isolation, and match
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: tmp_path_factory
      default: null
      rest: false
    - kind: positional
      name: monkeypatch
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: Pytester
      kind: return
  inherits_from: null
- name: Pytester.CLOSE_STDIN
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Pytester.TimeoutExpired
  kind: class
  ns: pytest
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Pytester.TimeoutExpired.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Pytester.TimeoutExpired.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Pytester.TimeoutExpired.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Pytester.chdir
  kind: method
  ns: pytest
  description: |-
    Cd into the temporary directory.

    This is done automatically upon instantiation.
  summary: Cd into the temporary directory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.collect_by_name
  kind: method
  ns: pytest
  description: |-
    Return the collection node for name from the module collection.

    Searches a module collection node for a collection node matching the
    given name.

    :param modcol: A module collection node; see :py:meth:`getmodulecol`.
    :param name: The name of the node to return.
  summary: Return the collection node for name from the module collection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: modcol
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.copy_example
  kind: method
  ns: pytest
  description: |-
    Copy file from project's directory into the testdir.

    :param name:
        The name of the file to copy.
    :return:
        Path to the copied directory (inside ``self.path``).
  summary: Copy file from project's directory into the testdir
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.genitems
  kind: method
  ns: pytest
  description: |-
    Generate all test items from a collection node.

    This recurses into the collection node and returns a list of all the
    test items contained within.

    :param colitems:
        The collection nodes.
    :returns:
        The collected items.
  summary: Generate all test items from a collection node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: colitems
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.getinicfg
  kind: method
  ns: pytest
  description: Return the pytest section from the tox.ini config file.
  summary: Return the pytest section from the tox
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.getitem
  kind: method
  ns: pytest
  description: |-
    Return the test item for a test function.

    Writes the source to a python file and runs pytest's collection on
    the resulting module, returning the test item for the requested
    function name.

    :param source:
        The module source.
    :param funcname:
        The name of the test function for which to return a test item.
    :returns:
        The test item.
  summary: Return the test item for a test function
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - kind: positional
      name: funcname
      default: test_func
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.getitems
  kind: method
  ns: pytest
  description: |-
    Return all test items collected from the module.

    Writes the source to a Python file and runs pytest's collection on
    the resulting module, returning all test items contained within.
  summary: Return all test items collected from the module
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.getmodulecol
  kind: method
  ns: pytest
  description: |-
    Return the module collection node for ``source``.

    Writes ``source`` to a file using :py:meth:`makepyfile` and then
    runs the pytest collection on it, returning the collection node for the
    test module.

    :param source:
        The source code of the module to collect.

    :param configargs:
        Any extra arguments to pass to :py:meth:`parseconfigure`.

    :param withinit:
        Whether to also write an ``__init__.py`` file to the same
        directory to ensure it is a package.
  summary: Return the module collection node for ``source``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - kind: positional
      name: configargs
      default: ()
      rest: false
    - name: withinit
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.getnode
  kind: method
  ns: pytest
  description: |-
    Get the collection node of a file.

    :param config:
       A pytest config.
       See :py:meth:`parseconfig` and :py:meth:`parseconfigure` for creating it.
    :param arg:
        Path to the file.
    :returns:
        The node.
  summary: Get the collection node of a file
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - kind: positional
      name: arg
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.getpathnode
  kind: method
  ns: pytest
  description: |-
    Return the collection node of a file.

    This is like :py:meth:`getnode` but uses :py:meth:`parseconfigure` to
    create the (configured) pytest Config instance.

    :param path:
        Path to the file.
    :returns:
        The node.
  summary: Return the collection node of a file
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.inline_genitems
  kind: method
  ns: pytest
  description: |-
    Run ``pytest.main(['--collect-only'])`` in-process.

    Runs the :py:func:`pytest.main` function to run all of pytest inside
    the test process itself like :py:meth:`inline_run`, but returns a
    tuple of the collected items and a :py:class:`HookRecorder` instance.
  summary: Run ``pytest
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.inline_run
  kind: method
  ns: pytest
  description: |-
    Run ``pytest.main()`` in-process, returning a HookRecorder.

    Runs the :py:func:`pytest.main` function to run all of pytest inside
    the test process itself.  This means it can return a
    :py:class:`HookRecorder` instance which gives more detailed results
    from that run than can be done by matching stdout/stderr from
    :py:meth:`runpytest`.

    :param args:
        Command line arguments to pass to :py:func:`pytest.main`.
    :param plugins:
        Extra plugin instances the ``pytest.main()`` instance should use.
    :param no_reraise_ctrlc:
        Typically we reraise keyboard interrupts from the child run. If
        True, the KeyboardInterrupt exception is captured.
  summary: Run ``pytest
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: plugins
      default: ()
      rest: false
      kind: kw-only
    - name: no_reraise_ctrlc
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.inline_runsource
  kind: method
  ns: pytest
  description: |-
    Run a test module in process using ``pytest.main()``.

    This run writes "source" into a temporary file and runs
    ``pytest.main()`` on it, returning a :py:class:`HookRecorder` instance
    for the result.

    :param source: The source code of the test module.
    :param cmdlineargs: Any extra command line arguments to use.
  summary: Run a test module in process using ``pytest
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.make_hook_recorder
  kind: method
  ns: pytest
  description: Create a new :class:`HookRecorder` for a :class:`PytestPluginManager`.
  summary: Create a new :class:`HookRecorder` for a :class:`PytestPluginManager`
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pluginmanager
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.makeconftest
  kind: method
  ns: pytest
  description: |-
    Write a conftest.py file.

    :param source: The contents.
    :returns: The conftest.py file.
  summary: Write a conftest
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.makefile
  kind: method
  ns: pytest
  description: |-
    Create new text file(s) in the test directory.

    :param ext:
        The extension the file(s) should use, including the dot, e.g. `.py`.
    :param args:
        All args are treated as strings and joined using newlines.
        The result is written as contents to the file.  The name of the
        file is based on the test function requesting this fixture.
    :param kwargs:
        Each keyword is the name of a file, while the value of it will
        be written as contents of the file.
    :returns:
        The first created file.

    Examples:
    .. code-block:: python

        pytester.makefile(".txt", "line1", "line2")

        pytester.makefile(".ini", pytest="[pytest]\naddopts=-rs\n")

    To create binary files, use :meth:`pathlib.Path.write_bytes` directly:

    .. code-block:: python

        filename = pytester.path.joinpath("foo.bin")
        filename.write_bytes(b"...")
  summary: Create new text file(s) in the test directory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: ext
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.makeini
  kind: method
  ns: pytest
  description: |-
    Write a tox.ini file.

    :param source: The contents.
    :returns: The tox.ini file.
  summary: Write a tox
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.makepyfile
  kind: method
  ns: pytest
  description: |-
    Shortcut for .makefile() with a .py extension.

    Defaults to the test name with a '.py' extension, e.g test_foobar.py, overwriting
    existing files.

    Examples:
    .. code-block:: python

        def test_something(pytester):
            # Initial file is created test_something.py.
            pytester.makepyfile("foobar")
            # To create multiple files, pass kwargs accordingly.
            pytester.makepyfile(custom="foobar")
            # At this point, both 'test_something.py' & 'custom.py' exist in the test directory.
  summary: 'Shortcut for '
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.makepyprojecttoml
  kind: method
  ns: pytest
  description: |-
    Write a pyproject.toml file.

    :param source: The contents.
    :returns: The pyproject.ini file.

    .. versionadded:: 6.0
  summary: Write a pyproject
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.maketxtfile
  kind: method
  ns: pytest
  description: |-
    Shortcut for .makefile() with a .txt extension.

    Defaults to the test name with a '.txt' extension, e.g test_foobar.txt, overwriting
    existing files.

    Examples:
    .. code-block:: python

        def test_something(pytester):
            # Initial file is created test_something.txt.
            pytester.maketxtfile("foobar")
            # To create multiple files, pass kwargs accordingly.
            pytester.maketxtfile(custom="foobar")
            # At this point, both 'test_something.txt' & 'custom.txt' exist in the test directory.
  summary: 'Shortcut for '
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.mkdir
  kind: method
  ns: pytest
  description: |-
    Create a new (sub)directory.

    :param name:
        The name of the directory, relative to the pytester path.
    :returns:
        The created directory.
  summary: Create a new (sub)directory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.mkpydir
  kind: method
  ns: pytest
  description: |-
    Create a new python package.

    This creates a (sub)directory with an empty ``__init__.py`` file so it
    gets recognised as a Python package.
  summary: Create a new python package
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.parseconfig
  kind: method
  ns: pytest
  description: |-
    Return a new pytest :class:`pytest.Config` instance from given
    commandline args.

    This invokes the pytest bootstrapping code in _pytest.config to create a
    new :py:class:`pytest.PytestPluginManager` and call the
    :hook:`pytest_cmdline_parse` hook to create a new :class:`pytest.Config`
    instance.

    If :attr:`plugins` has been populated they should be plugin modules
    to be registered with the plugin manager.
  summary: Return a new pytest :class:`pytest
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.parseconfigure
  kind: method
  ns: pytest
  description: |-
    Return a new pytest configured Config instance.

    Returns a new :py:class:`pytest.Config` instance like
    :py:meth:`parseconfig`, but also calls the :hook:`pytest_configure`
    hook.
  summary: Return a new pytest configured Config instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.path
  kind: property
  ns: pytest
  description: Temporary directory path used to create files/run tests from, etc.
  summary: Temporary directory path used to create files/run tests from, etc
  signatures: null
  inherits_from: null
- name: Pytester.popen
  kind: method
  ns: pytest
  description: |-
    Invoke :py:class:`subprocess.Popen`.

    Calls :py:class:`subprocess.Popen` making sure the current working
    directory is in ``PYTHONPATH``.

    You probably want to use :py:meth:`run` instead.
  summary: Invoke :py:class:`subprocess
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cmdargs
      default: null
      rest: false
    - kind: positional
      name: stdout
      default: '-1'
      rest: false
    - kind: positional
      name: stderr
      default: '-1'
      rest: false
    - kind: positional
      name: stdin
      default: NotSetType.token
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.run
  kind: method
  ns: pytest
  description: |-
    Run a command with arguments.

    Run a process using :py:class:`subprocess.Popen` saving the stdout and
    stderr.

    :param cmdargs:
        The sequence of arguments to pass to :py:class:`subprocess.Popen`,
        with path-like objects being converted to :py:class:`str`
        automatically.
    :param timeout:
        The period in seconds after which to timeout and raise
        :py:class:`Pytester.TimeoutExpired`.
    :param stdin:
        Optional standard input.

        - If it is ``CLOSE_STDIN`` (Default), then this method calls
          :py:class:`subprocess.Popen` with ``stdin=subprocess.PIPE``, and
          the standard input is closed immediately after the new command is
          started.

        - If it is of type :py:class:`bytes`, these bytes are sent to the
          standard input of the command.

        - Otherwise, it is passed through to :py:class:`subprocess.Popen`.
          For further information in this case, consult the document of the
          ``stdin`` parameter in :py:class:`subprocess.Popen`.
    :returns:
        The result.
  summary: Run a command with arguments
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: timeout
      default: None
      rest: false
      kind: kw-only
    - name: stdin
      default: NotSetType.token
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.runitem
  kind: method
  ns: pytest
  description: |-
    Run the "test_func" Item.

    The calling test instance (class containing the test method) must
    provide a ``.getrunner()`` method which should return a runner which
    can run the test protocol for a single item, e.g.
    ``_pytest.runner.runtestprotocol``.
  summary: Run the "test_func" Item
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.runpytest
  kind: method
  ns: pytest
  description: |-
    Run pytest inline or in a subprocess, depending on the command line
    option "--runpytest" and return a :py:class:`~pytest.RunResult`.
  summary: Run pytest inline or in a subprocess, depending on the command line
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.runpytest_inprocess
  kind: method
  ns: pytest
  description: |-
    Return result of running pytest in-process, providing a similar
    interface to what self.runpytest() provides.
  summary: Return result of running pytest in-process, providing a similar
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.runpytest_subprocess
  kind: method
  ns: pytest
  description: |-
    Run pytest as a subprocess with given arguments.

    Any plugins added to the :py:attr:`plugins` list will be added using the
    ``-p`` command line option.  Additionally ``--basetemp`` is used to put
    any temporary files and directories in a numbered directory prefixed
    with "runpytest-" to not conflict with the normal numbered pytest
    location for temporary files and directories.

    :param args:
        The sequence of arguments to pass to the pytest subprocess.
    :param timeout:
        The period in seconds after which to timeout and raise
        :py:class:`Pytester.TimeoutExpired`.
    :returns:
        The result.
  summary: Run pytest as a subprocess with given arguments
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: timeout
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.runpython
  kind: method
  ns: pytest
  description: Run a python script using sys.executable as interpreter.
  summary: Run a python script using sys
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: script
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.runpython_c
  kind: method
  ns: pytest
  description: Run ``python -c "command"``.
  summary: Run ``python -c "command"``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: command
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.spawn
  kind: method
  ns: pytest
  description: |-
    Run a command using pexpect.

    The pexpect child is returned.
  summary: Run a command using pexpect
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cmd
      default: null
      rest: false
    - kind: positional
      name: expect_timeout
      default: '10.0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.spawn_pytest
  kind: method
  ns: pytest
  description: |-
    Run pytest using pexpect.

    This makes sure to use the right pytest and sets up the temporary
    directory locations.

    The pexpect child is returned.
  summary: Run pytest using pexpect
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: string
      default: null
      rest: false
    - kind: positional
      name: expect_timeout
      default: '10.0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pytester.syspathinsert
  kind: method
  ns: pytest
  description: |-
    Prepend a directory to sys.path, defaults to :attr:`path`.

    This is undone automatically when this object dies at the end of each
    test.

    :param path:
        The path.
  summary: Prepend a directory to sys
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager
  kind: class
  ns: pytest
  description: |-
    A :py:class:`pluggy.PluginManager <pluggy.PluginManager>` with
    additional pytest-specific functionality:

    * Loading plugins from the command line, ``PYTEST_PLUGINS`` env variable and
      ``pytest_plugins`` global variables found in plugins being loaded.
    * ``conftest.py`` loading during start-up.
  summary: A :py:class:`pluggy
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: PytestPluginManager
      kind: return
  inherits_from:
  - <class 'pluggy._manager.PluginManager'>
- name: PytestPluginManager.add_hookcall_monitoring
  kind: method
  ns: pytest
  description: |-
    Add before/after tracing functions for all hooks.

    Returns an undo function which, when called, removes the added tracers.

    ``before(hook_name, hook_impls, kwargs)`` will be called ahead
    of all hook calls and receive a hookcaller instance, a list
    of HookImpl instances and the keyword arguments for the hook call.

    ``after(outcome, hook_name, hook_impls, kwargs)`` receives the
    same arguments as ``before`` but also a :class:`~pluggy.Result` object
    which represents the result of the overall hook call.
  summary: Add before/after tracing functions for all hooks
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: before
      default: null
      rest: false
    - kind: positional
      name: after
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.add_hookspecs
  kind: method
  ns: pytest
  description: |-
    Add new hook specifications defined in the given ``module_or_class``.

    Functions are recognized as hook specifications if they have been
    decorated with a matching :class:`HookspecMarker`.
  summary: Add new hook specifications defined in the given ``module_or_class``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: module_or_class
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.check_pending
  kind: method
  ns: pytest
  description: |-
    Verify that all hooks which have not been verified against a
    hook specification are optional, otherwise raise
    :exc:`PluginValidationError`.
  summary: Verify that all hooks which have not been verified against a
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.consider_conftest
  kind: method
  ns: pytest
  description: ':meta private:'
  summary: ':meta private:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: conftestmodule
      default: null
      rest: false
    - kind: positional
      name: registration_name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.consider_env
  kind: method
  ns: pytest
  description: ':meta private:'
  summary: ':meta private:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.consider_module
  kind: method
  ns: pytest
  description: ':meta private:'
  summary: ':meta private:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mod
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.consider_pluginarg
  kind: method
  ns: pytest
  description: ':meta private:'
  summary: ':meta private:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: arg
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.consider_preparse
  kind: method
  ns: pytest
  description: ':meta private:'
  summary: ':meta private:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - name: exclude_only
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.enable_tracing
  kind: method
  ns: pytest
  description: |-
    Enable tracing of hook calls.

    Returns an undo function which, when called, removes the added tracing.
  summary: Enable tracing of hook calls
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.get_canonical_name
  kind: method
  ns: pytest
  description: |-
    Return a canonical name for a plugin object.

    Note that a plugin may be registered under a different name
    specified by the caller of :meth:`register(plugin, name) <register>`.
    To obtain the name of a registered plugin use :meth:`get_name(plugin)
    <get_name>` instead.
  summary: Return a canonical name for a plugin object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: plugin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.get_hookcallers
  kind: method
  ns: pytest
  description: |-
    Get all hook callers for the specified plugin.

    :returns:
        The hook callers, or ``None`` if ``plugin`` is not registered in
        this plugin manager.
  summary: Get all hook callers for the specified plugin
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: plugin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.get_name
  kind: method
  ns: pytest
  description: |-
    Return the name the plugin is registered under, or ``None`` if
    is isn't.
  summary: Return the name the plugin is registered under, or ``None`` if
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: plugin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.get_plugin
  kind: method
  ns: pytest
  description: Return the plugin registered under the given name, if any.
  summary: Return the plugin registered under the given name, if any
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.get_plugins
  kind: method
  ns: pytest
  description: Return a set of all registered plugin objects.
  summary: Return a set of all registered plugin objects
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.getplugin
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.has_plugin
  kind: method
  ns: pytest
  description: Return whether a plugin with the given name is registered.
  summary: Return whether a plugin with the given name is registered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.hasplugin
  kind: method
  ns: pytest
  description: Return whether a plugin with the given name is registered.
  summary: Return whether a plugin with the given name is registered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.import_plugin
  kind: method
  ns: pytest
  description: |-
    Import a plugin with ``modname``.

    If ``consider_entry_points`` is True, entry point names are also
    considered to find a plugin.
  summary: Import a plugin with ``modname``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: modname
      default: null
      rest: false
    - kind: positional
      name: consider_entry_points
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.is_blocked
  kind: method
  ns: pytest
  description: Return whether the given plugin name is blocked.
  summary: Return whether the given plugin name is blocked
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.is_registered
  kind: method
  ns: pytest
  description: Return whether the plugin is already registered.
  summary: Return whether the plugin is already registered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: plugin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.list_name_plugin
  kind: method
  ns: pytest
  description: Return a list of (name, plugin) pairs for all registered plugins.
  summary: Return a list of (name, plugin) pairs for all registered plugins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.list_plugin_distinfo
  kind: method
  ns: pytest
  description: |-
    Return a list of (plugin, distinfo) pairs for all
    setuptools-registered plugins.
  summary: Return a list of (plugin, distinfo) pairs for all
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.load_setuptools_entrypoints
  kind: method
  ns: pytest
  description: |-
    Load modules from querying the specified setuptools ``group``.

    :param group:
        Entry point group to load plugins.
    :param name:
        If given, loads only plugins with the given ``name``.

    :return:
        The number of plugins loaded by this call.
  summary: Load modules from querying the specified setuptools ``group``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: group
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.parse_hookimpl_opts
  kind: method
  ns: pytest
  description: ':meta private:'
  summary: ':meta private:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: plugin
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.parse_hookspec_opts
  kind: method
  ns: pytest
  description: ':meta private:'
  summary: ':meta private:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: module_or_class
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.pytest_configure
  kind: method
  ns: pytest
  description: ':meta private:'
  summary: ':meta private:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.register
  kind: method
  ns: pytest
  description: |-
    Register a plugin and return its name.

    :param name:
        The name under which to register the plugin. If not specified, a
        name is generated using :func:`get_canonical_name`.

    :returns:
        The plugin name. If the name is blocked from registering, returns
        ``None``.

    If the plugin is already registered, raises a :exc:`ValueError`.
  summary: Register a plugin and return its name
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: plugin
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.set_blocked
  kind: method
  ns: pytest
  description: Block registrations of the given name, unregister if already registered.
  summary: Block registrations of the given name, unregister if already registered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.subset_hook_caller
  kind: method
  ns: pytest
  description: |-
    Return a proxy :class:`~pluggy.HookCaller` instance for the named
    method which manages calls to all registered plugins except the ones
    from remove_plugins.
  summary: Return a proxy :class:`~pluggy
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: remove_plugins
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.unblock
  kind: method
  ns: pytest
  description: |-
    Unblocks a name.

    Returns whether the name was actually blocked.
  summary: Unblocks a name
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestPluginManager.unregister
  kind: method
  ns: pytest
  description: |-
    Unregister a plugin and all of its hook implementations.

    The plugin can be specified either by the plugin object or the plugin
    name. If both are specified, they must agree.

    Returns the unregistered plugin, or ``None`` if not found.
  summary: Unregister a plugin and all of its hook implementations
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: plugin
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PytestUnhandledCoroutineWarning
  kind: class
  ns: pytest
  description: |-
    Warning emitted for an unhandled coroutine.

    A coroutine was encountered when collecting test functions, but was not
    handled by any async-aware plugin.
    Coroutine test functions are not natively supported.
  summary: Warning emitted for an unhandled coroutine
  signatures: null
  inherits_from:
  - <class 'pytest.PytestReturnNotNoneWarning'>
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestUnhandledCoroutineWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestUnhandledCoroutineWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestUnhandledCoroutineWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestUnhandledThreadExceptionWarning
  kind: class
  ns: pytest
  description: |-
    An unhandled exception occurred in a :class:`~threading.Thread`.

    Such exceptions don't propagate normally.
  summary: An unhandled exception occurred in a :class:`~threading
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestUnhandledThreadExceptionWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestUnhandledThreadExceptionWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestUnhandledThreadExceptionWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestUnknownMarkWarning
  kind: class
  ns: pytest
  description: |-
    Warning emitted on use of unknown markers.

    See :ref:`mark` for details.
  summary: Warning emitted on use of unknown markers
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestUnknownMarkWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestUnknownMarkWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestUnknownMarkWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestUnraisableExceptionWarning
  kind: class
  ns: pytest
  description: |-
    An unraisable exception was reported.

    Unraisable exceptions are exceptions raised in :meth:`__del__ <object.__del__>`
    implementations and similar situations when the exception cannot be raised
    as normal.
  summary: An unraisable exception was reported
  signatures: null
  inherits_from:
  - <class 'pytest.PytestWarning'>
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestUnraisableExceptionWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestUnraisableExceptionWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestUnraisableExceptionWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestWarning
  kind: class
  ns: pytest
  description: Base class for all warnings emitted by pytest.
  summary: Base class for all warnings emitted by pytest
  signatures: null
  inherits_from:
  - <class 'UserWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PytestWarning.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PytestWarning.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PytestWarning.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: raises
  kind: function
  ns: pytest
  description: |-
    Assert that a code block/function call raises an exception type, or one of its subclasses.

    :param expected_exception:
        The expected exception type, or a tuple if one of multiple possible
        exception types are expected. Note that subclasses of the passed exceptions
        will also match.

    :kwparam str | re.Pattern[str] | None match:
        If specified, a string containing a regular expression,
        or a regular expression object, that is tested against the string
        representation of the exception and its :pep:`678` `__notes__`
        using :func:`re.search`.

        To match a literal string that may contain :ref:`special characters
        <re-syntax>`, the pattern can first be escaped with :func:`re.escape`.

        (This is only used when ``pytest.raises`` is used as a context manager,
        and passed through to the function otherwise.
        When using ``pytest.raises`` as a function, you can use:
        ``pytest.raises(Exc, func, match="passed on").match("my pattern")``.)

    Use ``pytest.raises`` as a context manager, which will capture the exception of the given
    type, or any of its subclasses::

        >>> import pytest
        >>> with pytest.raises(ZeroDivisionError):
        ...    1/0

    If the code block does not raise the expected exception (:class:`ZeroDivisionError` in the example
    above), or no exception at all, the check will fail instead.

    You can also use the keyword argument ``match`` to assert that the
    exception matches a text or regex::

        >>> with pytest.raises(ValueError, match='must be 0 or None'):
        ...     raise ValueError("value must be 0 or None")

        >>> with pytest.raises(ValueError, match=r'must be \d+$'):
        ...     raise ValueError("value must be 42")

    The ``match`` argument searches the formatted exception string, which includes any
    `PEP-678 <https://peps.python.org/pep-0678/>`__ ``__notes__``:

        >>> with pytest.raises(ValueError, match=r"had a note added"):  # doctest: +SKIP
        ...     e = ValueError("value must be 42")
        ...     e.add_note("had a note added")
        ...     raise e

    The context manager produces an :class:`ExceptionInfo` object which can be used to inspect the
    details of the captured exception::

        >>> with pytest.raises(ValueError) as exc_info:
        ...     raise ValueError("value must be 42")
        >>> assert exc_info.type is ValueError
        >>> assert exc_info.value.args[0] == "value must be 42"

    .. warning::

       Given that ``pytest.raises`` matches subclasses, be wary of using it to match :class:`Exception` like this::

           with pytest.raises(Exception):  # Careful, this will catch ANY exception raised.
               some_function()

       Because :class:`Exception` is the base class of almost all exceptions, it is easy for this to hide
       real bugs, where the user wrote this expecting a specific exception, but some other exception is being
       raised due to a bug introduced during a refactoring.

       Avoid using ``pytest.raises`` to catch :class:`Exception` unless certain that you really want to catch
       **any** exception raised.

    .. note::

       When using ``pytest.raises`` as a context manager, it's worthwhile to
       note that normal context manager rules apply and that the exception
       raised *must* be the final line in the scope of the context manager.
       Lines of code after that, within the scope of the context manager will
       not be executed. For example::

           >>> value = 15
           >>> with pytest.raises(ValueError) as exc_info:
           ...     if value > 10:
           ...         raise ValueError("value must be <= 10")
           ...     assert exc_info.type is ValueError  # This will not execute.

       Instead, the following approach must be taken (note the difference in
       scope)::

           >>> with pytest.raises(ValueError) as exc_info:
           ...     if value > 10:
           ...         raise ValueError("value must be <= 10")
           ...
           >>> assert exc_info.type is ValueError

    **Using with** ``pytest.mark.parametrize``

    When using :ref:`pytest.mark.parametrize ref`
    it is possible to parametrize tests such that
    some runs raise an exception and others do not.

    See :ref:`parametrizing_conditional_raising` for an example.

    .. seealso::

        :ref:`assertraises` for more examples and detailed discussion.

    **Legacy form**

    It is possible to specify a callable by passing a to-be-called lambda::

        >>> raises(ZeroDivisionError, lambda: 1/0)
        <ExceptionInfo ...>

    or you can specify an arbitrary callable with arguments::

        >>> def f(x): return 1/x
        ...
        >>> raises(ZeroDivisionError, f, 0)
        <ExceptionInfo ...>
        >>> raises(ZeroDivisionError, f, x=0)
        <ExceptionInfo ...>

    The form above is fully supported but discouraged for new code because the
    context manager form is regarded as more readable and less error-prone.

    .. note::
        Similar to caught exception objects in Python, explicitly clearing
        local references to returned ``ExceptionInfo`` objects can
        help the Python interpreter speed up its garbage collection.

        Clearing those references breaks a reference cycle
        (``ExceptionInfo`` --> caught exception --> frame stack raising
        the exception --> current frame stack --> local variables -->
        ``ExceptionInfo``) which makes Python keep all objects referenced
        from that cycle (including all local variables in the current
        frame) alive until the next cyclic garbage collection run.
        More detailed information can be found in the official Python
        documentation for :ref:`the try statement <python:try>`.
  summary: Assert that a code block/function call raises an exception type, or one of its subclasses
  signatures:
  - - kind: positional
      name: expected_exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RecordedHookCall
  kind: class
  ns: pytest
  description: |-
    A recorded call to a hook.

    The arguments to the hook call are set as attributes.
    For example:

    .. code-block:: python

        calls = hook_recorder.getcalls("pytest_runtest_setup")
        # Suppose pytest_runtest_setup was called once with `item=an_item`.
        assert calls[0].item is an_item
  summary: A recorded call to a hook
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: kwargs
      default: null
      rest: false
    - type: RecordedHookCall
      kind: return
  inherits_from: null
- name: register_assert_rewrite
  kind: function
  ns: pytest
  description: |-
    Register one or more module names to be rewritten on import.

    This function will make sure that this module or all modules inside
    the package will get their assert statements rewritten.
    Thus you should make sure to call this before the module is
    actually imported, usually in your __init__.py if you are a plugin
    using a package.

    :param names: The module names to register.
  summary: Register one or more module names to be rewritten on import
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: RunResult
  kind: class
  ns: pytest
  description: The result of running a command from :class:`~pytest.Pytester`.
  summary: The result of running a command from :class:`~pytest
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: ret
      default: null
      rest: false
    - kind: positional
      name: outlines
      default: null
      rest: false
    - kind: positional
      name: errlines
      default: null
      rest: false
    - kind: positional
      name: duration
      default: null
      rest: false
    - type: RunResult
      kind: return
  inherits_from: null
- name: RunResult.assert_outcomes
  kind: method
  ns: pytest
  description: |-
    Assert that the specified outcomes appear with the respective
    numbers (0 means it didn't occur) in the text output from a test run.

    ``warnings`` and ``deselected`` are only checked if not None.
  summary: Assert that the specified outcomes appear with the respective
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: passed
      default: '0'
      rest: false
    - kind: positional
      name: skipped
      default: '0'
      rest: false
    - kind: positional
      name: failed
      default: '0'
      rest: false
    - kind: positional
      name: errors
      default: '0'
      rest: false
    - kind: positional
      name: xpassed
      default: '0'
      rest: false
    - kind: positional
      name: xfailed
      default: '0'
      rest: false
    - kind: positional
      name: warnings
      default: None
      rest: false
    - kind: positional
      name: deselected
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RunResult.parse_summary_nouns
  kind: function
  ns: pytest
  description: |-
    Extract the nouns from a pytest terminal summary line.

    It always returns the plural noun for consistency::

        ======= 1 failed, 1 passed, 1 warning, 1 error in 0.13s ====

    Will return ``{"failed": 1, "passed": 1, "warnings": 1, "errors": 1}``.
  summary: Extract the nouns from a pytest terminal summary line
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RunResult.parseoutcomes
  kind: method
  ns: pytest
  description: |-
    Return a dictionary of outcome noun -> count from parsing the terminal
    output that the test process produced.

    The returned nouns will always be in plural form::

        ======= 1 failed, 1 passed, 1 warning, 1 error in 0.13s ====

    Will return ``{"failed": 1, "passed": 1, "warnings": 1, "errors": 1}``.
  summary: Return a dictionary of outcome noun -> count from parsing the terminal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session
  kind: class
  ns: pytest
  description: |-
    The root of the collection tree.

    ``Session`` collects the initial paths given as arguments to pytest.
  summary: The root of the collection tree
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Session
      kind: return
  inherits_from:
  - <class '_pytest.nodes.Collector'>
  - <class '_pytest.nodes.Node'>
  - <class 'abc.ABC'>
- name: Session.Failed
  kind: class
  ns: pytest
  description: Signals a stop as failed test run.
  summary: Signals a stop as failed test run
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Session.Failed.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Session.Failed.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Session.Failed.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Session.Interrupted
  kind: class
  ns: pytest
  description: Signals that the test run was interrupted.
  summary: Signals that the test run was interrupted
  signatures: null
  inherits_from:
  - <class 'KeyboardInterrupt'>
  - <class 'BaseException'>
- name: Session.Interrupted.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Session.Interrupted.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Session.Interrupted.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Session.add_marker
  kind: method
  ns: pytest
  description: |-
    Dynamically add a marker object to the node.

    :param marker:
        The marker.
    :param append:
        Whether to append the marker, or prepend it.
  summary: Dynamically add a marker object to the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: marker
      default: null
      rest: false
    - kind: positional
      name: append
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.addfinalizer
  kind: method
  ns: pytest
  description: |-
    Register a function to be called without arguments when this node is
    finalized.

    This method can only be called when this node is active
    in a setup chain, for example during self.setup().
  summary: Register a function to be called without arguments when this node is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fin
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.collect
  kind: method
  ns: pytest
  description: Collect children (items and collectors) for this collector.
  summary: Collect children (items and collectors) for this collector
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.config
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Session.from_config
  kind: function
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.from_parent
  kind: function
  ns: pytest
  description: |-
    Public constructor for Nodes.

    This indirection got introduced in order to enable removing
    the fragile logic from the node constructors.

    Subclasses can use ``super().from_parent(...)`` when overriding the
    construction.

    :param parent: The parent node of this Node.
  summary: Public constructor for Nodes
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parent
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.genitems
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: node
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.get_closest_marker
  kind: method
  ns: pytest
  description: |-
    Return the first marker matching the name, from closest (for
    example function) to farther level (for example module level).

    :param default: Fallback return value if no marker was found.
    :param name: Name to filter by.
  summary: Return the first marker matching the name, from closest (for
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.gethookproxy
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fspath
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.getparent
  kind: method
  ns: pytest
  description: |-
    Get the closest parent node (including self) which is an instance of
    the given class.

    :param cls: The node class to search for.
    :returns: The node, if found.
  summary: Get the closest parent node (including self) which is an instance of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.ihook
  kind: property
  ns: pytest
  description: fspath-sensitive hook proxy used to call pytest hooks.
  summary: fspath-sensitive hook proxy used to call pytest hooks
  signatures: null
  inherits_from: null
- name: Session.isinitpath
  kind: method
  ns: pytest
  description: |-
    Is path an initial path?

    An initial path is a path explicitly given to pytest on the command
    line.

    :param with_parents:
        If set, also return True if the path is a parent of an initial path.

    .. versionchanged:: 8.0
        Added the ``with_parents`` parameter.
  summary: Is path an initial path?
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - name: with_parents
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.iter_markers
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of the markers of the node.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.iter_markers_with_node
  kind: method
  ns: pytest
  description: |-
    Iterate over all markers of the node.

    :param name: If given, filter the results by the name attribute.
    :returns: An iterator of (node, mark) tuples.
  summary: Iterate over all markers of the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.iter_parents
  kind: method
  ns: pytest
  description: |-
    Iterate over all parent collectors starting from and including self
    up to the root of the collection tree.

    .. versionadded:: 8.1
  summary: Iterate over all parent collectors starting from and including self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.listchain
  kind: method
  ns: pytest
  description: |-
    Return a list of all parent collectors starting from the root of the
    collection tree down to and including self.
  summary: Return a list of all parent collectors starting from the root of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.listextrakeywords
  kind: method
  ns: pytest
  description: Return a set of all extra keywords in self and any parents.
  summary: Return a set of all extra keywords in self and any parents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.listnames
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.name
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Session.nodeid
  kind: property
  ns: pytest
  description: A ::-separated string denoting its collection tree address.
  summary: A ::-separated string denoting its collection tree address
  signatures: null
  inherits_from: null
- name: Session.parent
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Session.path
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Session.perform_collect
  kind: method
  ns: pytest
  description: |-
    Perform the collection phase for this session.

    This is called by the default :hook:`pytest_collection` hook
    implementation; see the documentation of this hook for more details.
    For testing purposes, it may also be called directly on a fresh
    ``Session``.

    This function normally recursively expands any collectors collected
    from the session to their items, and only items are returned. For
    testing purposes, this may be suppressed by passing ``genitems=False``,
    in which case the return value contains these collectors unexpanded,
    and ``session.items`` is empty.
  summary: Perform the collection phase for this session
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: args
      default: None
      rest: false
    - kind: positional
      name: genitems
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.pytest_collectreport
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: report
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.pytest_collectstart
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.pytest_runtest_logreport
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: report
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.repr_failure
  kind: method
  ns: pytest
  description: |-
    Return a representation of a collection failure.

    :param excinfo: Exception information for the failure.
  summary: Return a representation of a collection failure
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: excinfo
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.session
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Session.setup
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.shouldfail
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Session.shouldstop
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Session.startpath
  kind: property
  ns: pytest
  description: |-
    The path from which pytest was invoked.

    .. versionadded:: 7.0.0
  summary: The path from which pytest was invoked
  signatures: null
  inherits_from: null
- name: Session.teardown
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Session.warn
  kind: method
  ns: pytest
  description: |-
    Issue a warning for this Node.

    Warnings will be displayed after the test session, unless explicitly suppressed.

    :param Warning warning:
        The warning instance to issue.

    :raises ValueError: If ``warning`` instance is not a subclass of Warning.

    Example usage:

    .. code-block:: python

        node.warn(PytestWarning("some message"))
        node.warn(UserWarning("some message"))

    .. versionchanged:: 6.2
        Any subclass of :class:`Warning` is now accepted, rather than only
        :class:`PytestWarning <pytest.PytestWarning>` subclasses.
  summary: Issue a warning for this Node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: set_trace
  kind: method
  ns: pytest
  description: Invoke debugging via ``Pdb.set_trace``, dropping any IO capturing.
  summary: Invoke debugging via ``Pdb
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: skip
  kind: function
  ns: pytest
  description: |-
    Skip an executing test with the given message.

    This function should be called only during testing (setup, call or teardown) or
    during collection by using the ``allow_module_level`` flag.  This function can
    be called in doctests as well.

    :param reason:
        The message to show the user as reason for the skip.

    :param allow_module_level:
        Allows this function to be called at module level.
        Raising the skip exception at module level will stop
        the execution of the module and prevent the collection of all tests in the module,
        even those defined before the `skip` call.

        Defaults to False.

    .. note::
        It is better to use the :ref:`pytest.mark.skipif ref` marker when
        possible to declare a test to be skipped under certain conditions
        like mismatching platforms or dependencies.
        Similarly, use the ``# doctest: +SKIP`` directive (see :py:data:`doctest.SKIP`)
        to skip a doctest statically.
  summary: Skip an executing test with the given message
  signatures:
  - - kind: positional
      name: reason
      default: null
      rest: false
    - name: allow_module_level
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Stash
  kind: class
  ns: pytest
  description: |-
    ``Stash`` is a type-safe heterogeneous mutable mapping that
    allows keys and value types to be defined separately from
    where it (the ``Stash``) is created.

    Usually you will be given an object which has a ``Stash``, for example
    :class:`~pytest.Config` or a :class:`~_pytest.nodes.Node`:

    .. code-block:: python

        stash: Stash = some_object.stash

    If a module or plugin wants to store data in this ``Stash``, it creates
    :class:`StashKey`\s for its keys (at the module level):

    .. code-block:: python

        # At the top-level of the module
        some_str_key = StashKey[str]()
        some_bool_key = StashKey[bool]()

    To store information:

    .. code-block:: python

        # Value type must match the key.
        stash[some_str_key] = "value"
        stash[some_bool_key] = True

    To retrieve the information:

    .. code-block:: python

        # The static type of some_str is str.
        some_str = stash[some_str_key]
        # The static type of some_bool is bool.
        some_bool = stash[some_bool_key]
  summary: '``Stash`` is a type-safe heterogeneous mutable mapping that'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: Stash
      kind: return
  inherits_from: null
- name: Stash.get
  kind: method
  ns: pytest
  description: |-
    Get the value for key, or return default if the key wasn't set
    before.
  summary: Get the value for key, or return default if the key wasn't set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Stash.setdefault
  kind: method
  ns: pytest
  description: |-
    Return the value of key if already set, otherwise set the value
    of key to default and return default.
  summary: Return the value of key if already set, otherwise set the value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StashKey
  kind: class
  ns: pytest
  description: |-
    ``StashKey`` is an object used as a key to a :class:`Stash`.

    A ``StashKey`` is associated with the type ``T`` of the value of the key.

    A ``StashKey`` is unique and cannot conflict with another key.
  summary: '``StashKey`` is an object used as a key to a :class:`Stash`'
  signatures:
  - - type: StashKey
      kind: return
  inherits_from:
  - <class 'typing.Generic'>
- name: version_tuple
  kind: const
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TempdirFactory
  kind: class
  ns: pytest
  description: |-
    Backward compatibility wrapper that implements ``py.path.local``
    for :class:`TempPathFactory`.

    .. note::
        These days, it is preferred to use ``tmp_path_factory``.

        :ref:`About the tmpdir and tmpdir_factory fixtures<tmpdir and tmpdir_factory>`.
  summary: Backward compatibility wrapper that implements ``py
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tmppath_factory
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: TempdirFactory
      kind: return
  inherits_from: null
- name: TempdirFactory.getbasetemp
  kind: method
  ns: pytest
  description: Same as :meth:`TempPathFactory.getbasetemp`, but returns a ``py.path.local`` object.
  summary: Same as :meth:`TempPathFactory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TempdirFactory.mktemp
  kind: method
  ns: pytest
  description: Same as :meth:`TempPathFactory.mktemp`, but returns a ``py.path.local`` object.
  summary: Same as :meth:`TempPathFactory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: basename
      default: null
      rest: false
    - kind: positional
      name: numbered
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TempPathFactory
  kind: class
  ns: pytest
  description: |-
    Factory for temporary directories under the common base temp directory.

    The base directory can be configured using the ``--basetemp`` option.
  summary: Factory for temporary directories under the common base temp directory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: given_basetemp
      default: null
      rest: false
    - kind: positional
      name: retention_count
      default: null
      rest: false
    - kind: positional
      name: retention_policy
      default: null
      rest: false
    - kind: positional
      name: trace
      default: null
      rest: false
    - kind: positional
      name: basetemp
      default: None
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: TempPathFactory
      kind: return
  inherits_from: null
- name: TempPathFactory.from_config
  kind: function
  ns: pytest
  description: |-
    Create a factory according to pytest configuration.

    :meta private:
  summary: Create a factory according to pytest configuration
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: TempPathFactory.getbasetemp
  kind: method
  ns: pytest
  description: |-
    Return the base temporary directory, creating it if needed.

    :returns:
        The base temporary directory.
  summary: Return the base temporary directory, creating it if needed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TempPathFactory.mktemp
  kind: method
  ns: pytest
  description: |-
    Create a new temporary directory managed by the factory.

    :param basename:
        Directory base name, must be a relative path.

    :param numbered:
        If ``True``, ensure the directory is unique by adding a numbered
        suffix greater than any existing one: ``basename="foo-"`` and ``numbered=True``
        means that this function will create directories named ``"foo-0"``,
        ``"foo-1"``, ``"foo-2"`` and so on.

    :returns:
        The path to the new directory.
  summary: Create a new temporary directory managed by the factory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: basename
      default: null
      rest: false
    - kind: positional
      name: numbered
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir
  kind: class
  ns: pytest
  description: |-
    Similar to :class:`Pytester`, but this class works with legacy legacy_path objects instead.

    All methods just forward to an internal :class:`Pytester` instance, converting results
    to `legacy_path` objects as necessary.
  summary: Similar to :class:`Pytester`, but this class works with legacy legacy_path objects instead
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pytester
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: Testdir
      kind: return
  inherits_from: null
- name: Testdir.CLOSE_STDIN
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Testdir.chdir
  kind: method
  ns: pytest
  description: See :meth:`Pytester.chdir`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.collect_by_name
  kind: method
  ns: pytest
  description: See :meth:`Pytester.collect_by_name`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: modcol
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.copy_example
  kind: method
  ns: pytest
  description: See :meth:`Pytester.copy_example`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.finalize
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.genitems
  kind: method
  ns: pytest
  description: See :meth:`Pytester.genitems`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: colitems
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.getinicfg
  kind: method
  ns: pytest
  description: See :meth:`Pytester.getinicfg`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.getitem
  kind: method
  ns: pytest
  description: See :meth:`Pytester.getitem`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - kind: positional
      name: funcname
      default: test_func
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.getitems
  kind: method
  ns: pytest
  description: See :meth:`Pytester.getitems`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.getmodulecol
  kind: method
  ns: pytest
  description: See :meth:`Pytester.getmodulecol`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - kind: positional
      name: configargs
      default: ()
      rest: false
    - kind: positional
      name: withinit
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.getnode
  kind: method
  ns: pytest
  description: See :meth:`Pytester.getnode`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - kind: positional
      name: arg
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.getpathnode
  kind: method
  ns: pytest
  description: See :meth:`Pytester.getpathnode`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.inline_genitems
  kind: method
  ns: pytest
  description: See :meth:`Pytester.inline_genitems`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.inline_run
  kind: method
  ns: pytest
  description: See :meth:`Pytester.inline_run`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: plugins
      default: ()
      rest: false
      kind: kw-only
    - name: no_reraise_ctrlc
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.inline_runsource
  kind: method
  ns: pytest
  description: See :meth:`Pytester.inline_runsource`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.make_hook_recorder
  kind: method
  ns: pytest
  description: See :meth:`Pytester.make_hook_recorder`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pluginmanager
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.makeconftest
  kind: method
  ns: pytest
  description: See :meth:`Pytester.makeconftest`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.makefile
  kind: method
  ns: pytest
  description: See :meth:`Pytester.makefile`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: ext
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.makeini
  kind: method
  ns: pytest
  description: See :meth:`Pytester.makeini`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.makepyfile
  kind: method
  ns: pytest
  description: See :meth:`Pytester.makepyfile`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.makepyprojecttoml
  kind: method
  ns: pytest
  description: See :meth:`Pytester.makepyprojecttoml`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.maketxtfile
  kind: method
  ns: pytest
  description: See :meth:`Pytester.maketxtfile`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.mkdir
  kind: method
  ns: pytest
  description: See :meth:`Pytester.mkdir`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.mkpydir
  kind: method
  ns: pytest
  description: See :meth:`Pytester.mkpydir`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.monkeypatch
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Testdir.parseconfig
  kind: method
  ns: pytest
  description: See :meth:`Pytester.parseconfig`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.parseconfigure
  kind: method
  ns: pytest
  description: See :meth:`Pytester.parseconfigure`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.plugins
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Testdir.popen
  kind: method
  ns: pytest
  description: See :meth:`Pytester.popen`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cmdargs
      default: null
      rest: false
    - kind: positional
      name: stdout
      default: '-1'
      rest: false
    - kind: positional
      name: stderr
      default: '-1'
      rest: false
    - kind: positional
      name: stdin
      default: NotSetType.token
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.request
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Testdir.run
  kind: method
  ns: pytest
  description: See :meth:`Pytester.run`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: timeout
      default: None
      rest: false
      kind: kw-only
    - name: stdin
      default: NotSetType.token
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.runitem
  kind: method
  ns: pytest
  description: See :meth:`Pytester.runitem`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.runpytest
  kind: method
  ns: pytest
  description: See :meth:`Pytester.runpytest`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.runpytest_inprocess
  kind: method
  ns: pytest
  description: See :meth:`Pytester.runpytest_inprocess`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.runpytest_subprocess
  kind: method
  ns: pytest
  description: See :meth:`Pytester.runpytest_subprocess`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: timeout
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.runpython
  kind: method
  ns: pytest
  description: See :meth:`Pytester.runpython`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: script
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.runpython_c
  kind: method
  ns: pytest
  description: See :meth:`Pytester.runpython_c`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: command
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.spawn
  kind: method
  ns: pytest
  description: See :meth:`Pytester.spawn`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cmd
      default: null
      rest: false
    - kind: positional
      name: expect_timeout
      default: '10.0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.spawn_pytest
  kind: method
  ns: pytest
  description: See :meth:`Pytester.spawn_pytest`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: string
      default: null
      rest: false
    - kind: positional
      name: expect_timeout
      default: '10.0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.syspathinsert
  kind: method
  ns: pytest
  description: See :meth:`Pytester.syspathinsert`.
  summary: See :meth:`Pytester
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Testdir.test_tmproot
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Testdir.tmpdir
  kind: property
  ns: pytest
  description: Temporary directory where tests are executed.
  summary: Temporary directory where tests are executed
  signatures: null
  inherits_from: null
- name: TestReport
  kind: class
  ns: pytest
  description: |-
    Basic test report object (also used for setup and teardown calls if
    they fail).

    Reports can contain arbitrary extra attributes.
  summary: Basic test report object (also used for setup and teardown calls if
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: nodeid
      default: null
      rest: false
    - kind: positional
      name: location
      default: null
      rest: false
    - kind: positional
      name: keywords
      default: null
      rest: false
    - kind: positional
      name: outcome
      default: null
      rest: false
    - kind: positional
      name: longrepr
      default: null
      rest: false
    - kind: positional
      name: when
      default: null
      rest: false
    - kind: positional
      name: sections
      default: ()
      rest: false
    - kind: positional
      name: duration
      default: '0'
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '0'
      rest: false
    - kind: positional
      name: user_properties
      default: None
      rest: false
    - type: TestReport
      kind: return
  inherits_from:
  - <class '_pytest.reports.BaseReport'>
- name: TestReport.caplog
  kind: property
  ns: pytest
  description: |-
    Return captured log lines, if log capturing is enabled.

    .. versionadded:: 3.5
  summary: Return captured log lines, if log capturing is enabled
  signatures: null
  inherits_from: null
- name: TestReport.capstderr
  kind: property
  ns: pytest
  description: |-
    Return captured text from stderr, if capturing is enabled.

    .. versionadded:: 3.0
  summary: Return captured text from stderr, if capturing is enabled
  signatures: null
  inherits_from: null
- name: TestReport.capstdout
  kind: property
  ns: pytest
  description: |-
    Return captured text from stdout, if capturing is enabled.

    .. versionadded:: 3.0
  summary: Return captured text from stdout, if capturing is enabled
  signatures: null
  inherits_from: null
- name: TestReport.count_towards_summary
  kind: property
  ns: pytest
  description: |-
    **Experimental** Whether this report should be counted towards the
    totals shown at the end of the test session: "1 passed, 1 failure, etc".

    .. note::

        This function is considered **experimental**, so beware that it is subject to changes
        even in patch releases.
  summary: '**Experimental** Whether this report should be counted towards the'
  signatures: null
  inherits_from: null
- name: TestReport.failed
  kind: property
  ns: pytest
  description: Whether the outcome is failed.
  summary: Whether the outcome is failed
  signatures: null
  inherits_from: null
- name: TestReport.from_item_and_call
  kind: function
  ns: pytest
  description: |-
    Create and fill a TestReport with standard item and call info.

    :param item: The item.
    :param call: The call info.
  summary: Create and fill a TestReport with standard item and call info
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: item
      default: null
      rest: false
    - kind: positional
      name: call
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestReport.fspath
  kind: property
  ns: pytest
  description: The path portion of the reported node, as a string.
  summary: The path portion of the reported node, as a string
  signatures: null
  inherits_from: null
- name: TestReport.get_sections
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestReport.head_line
  kind: property
  ns: pytest
  description: |-
    **Experimental** The head line shown with longrepr output for this
    report, more commonly during traceback representation during
    failures::

        ________ Test.foo ________


    In the example above, the head_line is "Test.foo".

    .. note::

        This function is considered **experimental**, so beware that it is subject to changes
        even in patch releases.
  summary: '**Experimental** The head line shown with longrepr output for this'
  signatures: null
  inherits_from: null
- name: TestReport.longreprtext
  kind: property
  ns: pytest
  description: |-
    Read-only property that returns the full string representation of
    ``longrepr``.

    .. versionadded:: 3.0
  summary: Read-only property that returns the full string representation of
  signatures: null
  inherits_from: null
- name: TestReport.passed
  kind: property
  ns: pytest
  description: Whether the outcome is passed.
  summary: Whether the outcome is passed
  signatures: null
  inherits_from: null
- name: TestReport.skipped
  kind: property
  ns: pytest
  description: Whether the outcome is skipped.
  summary: Whether the outcome is skipped
  signatures: null
  inherits_from: null
- name: TestReport.toterminal
  kind: method
  ns: pytest
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: out
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestShortLogReport
  kind: class
  ns: pytest
  description: |-
    Used to store the test status result category, shortletter and verbose word.
    For example ``"rerun", "R", ("RERUN", {"yellow": True})``.

    :ivar category:
        The class of result, for example ``“passed”``, ``“skipped”``, ``“error”``, or the empty string.

    :ivar letter:
        The short letter shown as testing progresses, for example ``"."``, ``"s"``, ``"E"``, or the empty string.

    :ivar word:
        Verbose word is shown as testing progresses in verbose mode, for example ``"PASSED"``, ``"SKIPPED"``,
        ``"ERROR"``, or the empty string.
  summary: Used to store the test status result category, shortletter and verbose word
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: category
      default: null
      rest: false
    - kind: positional
      name: letter
      default: null
      rest: false
    - kind: positional
      name: word
      default: null
      rest: false
    - type: TestShortLogReport
      kind: return
  inherits_from:
  - <class 'tuple'>
- name: TestShortLogReport.category
  kind: property
  ns: pytest
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: TestShortLogReport.count
  kind: callable
  ns: pytest
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestShortLogReport.index
  kind: callable
  ns: pytest
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestShortLogReport.letter
  kind: property
  ns: pytest
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: TestShortLogReport.word
  kind: property
  ns: pytest
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: UsageError
  kind: class
  ns: pytest
  description: Error in pytest usage or invocation.
  summary: Error in pytest usage or invocation
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: UsageError.add_note
  kind: callable
  ns: pytest
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: UsageError.args
  kind: property
  ns: pytest
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UsageError.with_traceback
  kind: callable
  ns: pytest
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: WarningsRecorder
  kind: class
  ns: pytest
  description: |-
    A context manager to record raised warnings.

    Each recorded warning is an instance of :class:`warnings.WarningMessage`.

    Adapted from `warnings.catch_warnings`.

    .. note::
        ``DeprecationWarning`` and ``PendingDeprecationWarning`` are treated
        differently; see :ref:`ensuring_function_triggers`.
  summary: A context manager to record raised warnings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: _ispytest
      default: 'False'
      rest: false
      kind: kw-only
    - type: WarningsRecorder
      kind: return
  inherits_from:
  - <class 'warnings.catch_warnings'>
- name: WarningsRecorder.clear
  kind: method
  ns: pytest
  description: Clear the list of recorded warnings.
  summary: Clear the list of recorded warnings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WarningsRecorder.list
  kind: property
  ns: pytest
  description: The list of recorded warnings.
  summary: The list of recorded warnings
  signatures: null
  inherits_from: null
- name: WarningsRecorder.pop
  kind: method
  ns: pytest
  description: |-
    Pop the first recorded warning which is an instance of ``cls``,
    but not an instance of a child class of any other match.
    Raises ``AssertionError`` if there is no match.
  summary: Pop the first recorded warning which is an instance of ``cls``,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: <class 'Warning'>
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: warns
  kind: function
  ns: pytest
  description: |-
    Assert that code raises a particular class of warning.

    Specifically, the parameter ``expected_warning`` can be a warning class or tuple
    of warning classes, and the code inside the ``with`` block must issue at least one
    warning of that class or classes.

    This helper produces a list of :class:`warnings.WarningMessage` objects, one for
    each warning emitted (regardless of whether it is an ``expected_warning`` or not).
    Since pytest 8.0, unmatched warnings are also re-emitted when the context closes.

    This function can be used as a context manager::

        >>> import pytest
        >>> with pytest.warns(RuntimeWarning):
        ...    warnings.warn("my warning", RuntimeWarning)

    In the context manager form you may use the keyword argument ``match`` to assert
    that the warning matches a text or regex::

        >>> with pytest.warns(UserWarning, match='must be 0 or None'):
        ...     warnings.warn("value must be 0 or None", UserWarning)

        >>> with pytest.warns(UserWarning, match=r'must be \d+$'):
        ...     warnings.warn("value must be 42", UserWarning)

        >>> with pytest.warns(UserWarning):  # catch re-emitted warning
        ...     with pytest.warns(UserWarning, match=r'must be \d+$'):
        ...         warnings.warn("this is not here", UserWarning)
        Traceback (most recent call last):
          ...
        Failed: DID NOT WARN. No warnings of type ...UserWarning... were emitted...

    **Using with** ``pytest.mark.parametrize``

    When using :ref:`pytest.mark.parametrize ref` it is possible to parametrize tests
    such that some runs raise a warning and others do not.

    This could be achieved in the same way as with exceptions, see
    :ref:`parametrizing_conditional_raising` for an example.
  summary: Assert that code raises a particular class of warning
  signatures:
  - - kind: positional
      name: expected_warning
      default: <class 'Warning'>
      rest: false
    - name: match
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: xfail
  kind: function
  ns: pytest
  description: |-
    Imperatively xfail an executing test or setup function with the given reason.

    This function should be called only during testing (setup, call or teardown).

    No other code is executed after using ``xfail()`` (it is implemented
    internally by raising an exception).

    :param reason:
        The message to show the user as reason for the xfail.

    .. note::
        It is better to use the :ref:`pytest.mark.xfail ref` marker when
        possible to declare a test to be xfailed under certain conditions
        like known bugs or missing features.
  summary: Imperatively xfail an executing test or setup function with the given reason
  signatures:
  - - kind: positional
      name: reason
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: yield_fixture
  kind: function
  ns: pytest
  description: |-
    (Return a) decorator to mark a yield-fixture factory function.

    .. deprecated:: 3.0
        Use :py:func:`pytest.fixture` directly instead.
  summary: (Return a) decorator to mark a yield-fixture factory function
  signatures:
  - - kind: positional
      name: fixture_function
      default: None
      rest: false
    - name: scope
      default: function
      rest: false
      kind: kw-only
    - name: params
      default: None
      rest: false
      kind: kw-only
    - name: autouse
      default: 'False'
      rest: false
      kind: kw-only
    - name: ids
      default: None
      rest: false
      kind: kw-only
    - name: name
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
