---
name: sanic
text_format: rst
generator: src:python
generator_command: src:python use "sanic"
language: python
version: 23.12.0
summary: A web server and web framework that's written to go fast. Build fast. Run fast.
description: |
  .. image:: https://raw.githubusercontent.com/sanic-org/sanic-assets/master/png/sanic-framework-logo-400x97.png
      :alt: Sanic | Build fast. Run fast.

  Sanic | Build fast. Run fast.
  =============================

  .. start-badges

  .. list-table::
      :widths: 15 85
      :stub-columns: 1

      * - Build
        - | |Tests|
      * - Docs
        - | |UserGuide| |Documentation|
      * - Package
        - | |PyPI| |PyPI version| |Wheel| |Supported implementations| |Code style ruff|
      * - Support
        - | |Forums| |Discord| |Awesome|
      * - Stats
        - | |Monthly Downloads| |Weekly Downloads| |Conda downloads|

  .. |UserGuide| image:: https://img.shields.io/badge/user%20guide-sanic-ff0068
     :target: https://sanic.dev/
  .. |Forums| image:: https://img.shields.io/badge/forums-community-ff0068.svg
     :target: https://community.sanicframework.org/
  .. |Discord| image:: https://img.shields.io/discord/812221182594121728?logo=discord&label=Discord&color=5865F2
     :target: https://discord.gg/FARQzAEMAA
  .. |Tests| image:: https://github.com/sanic-org/sanic/actions/workflows/tests.yml/badge.svg?branch=main
     :target: https://github.com/sanic-org/sanic/actions/workflows/tests.yml
  .. |Documentation| image:: https://readthedocs.org/projects/sanic/badge/?version=latest
     :target: http://sanic.readthedocs.io/en/latest/?badge=latest
  .. |PyPI| image:: https://img.shields.io/pypi/v/sanic.svg
     :target: https://pypi.python.org/pypi/sanic/
  .. |PyPI version| image:: https://img.shields.io/pypi/pyversions/sanic.svg
     :target: https://pypi.python.org/pypi/sanic/
  .. |Code style ruff| image:: https://img.shields.io/badge/code%20style-ruff-000000.svg
      :target: https://docs.astral.sh/ruff/
  .. |Wheel| image:: https://img.shields.io/pypi/wheel/sanic.svg
      :alt: PyPI Wheel
      :target: https://pypi.python.org/pypi/sanic
  .. |Supported implementations| image:: https://img.shields.io/pypi/implementation/sanic.svg
      :alt: Supported implementations
      :target: https://pypi.python.org/pypi/sanic
  .. |Awesome| image:: https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg
      :alt: Awesome Sanic List
      :target: https://github.com/mekicha/awesome-sanic
  .. |Monthly Downloads| image:: https://img.shields.io/pypi/dm/sanic.svg
      :alt: Downloads
      :target: https://pepy.tech/project/sanic
  .. |Weekly Downloads| image:: https://img.shields.io/pypi/dw/sanic.svg
      :alt: Downloads
      :target: https://pepy.tech/project/sanic
  .. |Conda downloads| image:: https://img.shields.io/conda/dn/conda-forge/sanic.svg
      :alt: Downloads
      :target: https://anaconda.org/conda-forge/sanic

  .. end-badges

  Sanic is a **Python 3.8+** web server and web framework that's written to go fast. It allows the usage of the ``async/await`` syntax added in Python 3.5, which makes your code non-blocking and speedy.

  Sanic is also ASGI compliant, so you can deploy it with an `alternative ASGI webserver <https://sanicframework.org/en/guide/deployment/running.html#asgi>`_.

  `Source code on GitHub <https://github.com/sanic-org/sanic/>`_ | `Help and discussion board <https://community.sanicframework.org/>`_ | `User Guide <https://sanicframework.org>`_ | `Chat on Discord <https://discord.gg/FARQzAEMAA>`_

  The project is maintained by the community, for the community. **Contributions are welcome!**

  The goal of the project is to provide a simple way to get up and running a highly performant HTTP server that is easy to build, to expand, and ultimately to scale.

  Sponsor
  -------

  Check out `open collective <https://opencollective.com/sanic-org>`_ to learn more about helping to fund Sanic.


  Installation
  ------------

  ``pip3 install sanic``

      Sanic makes use of ``uvloop`` and ``ujson`` to help with performance. If you do not want to use those packages, simply add an environmental variable ``SANIC_NO_UVLOOP=true`` or ``SANIC_NO_UJSON=true`` at install time.

      .. code:: shell

         $ export SANIC_NO_UVLOOP=true
         $ export SANIC_NO_UJSON=true
         $ pip3 install --no-binary :all: sanic


  .. note::

    If you are running on a clean install of Fedora 28 or above, please make sure you have the ``redhat-rpm-config`` package installed in case if you want to
    use ``sanic`` with ``ujson`` dependency.


  Hello World Example
  -------------------

  .. code:: python

      from sanic import Sanic
      from sanic.response import json

      app = Sanic("my-hello-world-app")

      @app.route('/')
      async def test(request):
          return json({'hello': 'world'})

      if __name__ == '__main__':
          app.run()

  Sanic can now be easily run using ``sanic hello.app``.

  .. code::

      [2018-12-30 11:37:41 +0200] [13564] [INFO] Goin' Fast @ http://127.0.0.1:8000
      [2018-12-30 11:37:41 +0200] [13564] [INFO] Starting worker [13564]

  And, we can verify it is working: ``curl localhost:8000 -i``

  .. code::

      HTTP/1.1 200 OK
      Connection: keep-alive
      Keep-Alive: 5
      Content-Length: 17
      Content-Type: application/json

      {"hello":"world"}

  **Now, let's go build something fast!**

  Minimum Python version is 3.8. If you need Python 3.7 support, please use v22.12LTS.

  Documentation
  -------------

  User Guide, Changelog, and API Documentation can be found at `sanic.dev <https://sanic.dev>`__.


  Questions and Discussion
  ------------------------

  `Ask a question or join the conversation <https://community.sanicframework.org/>`__.

  Contribution
  ------------

  We are always happy to have new contributions. We have `marked issues good for anyone looking to get started <https://github.com/sanic-org/sanic/issues?q=is%3Aopen+is%3Aissue+label%3Abeginner>`_, and welcome `questions on the forums <https://community.sanicframework.org/>`_. Please take a look at our `Contribution guidelines <https://github.com/sanic-org/sanic/blob/master/CONTRIBUTING.rst>`_.
homepage: http://github.com/sanic-org/sanic/
license: MIT

---
- name: sanic
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic
  kind: class
  ns: sanic
  description: |-
    The main application instance

    You will create an instance of this class and use it to register
    routes, listeners, middleware, blueprints, error handlers, etc.

    By convention, it is often called `app`. It must be named using
    the `name` parameter and is roughly constrained to the same
    restrictions as a Python module name, however, it can contain
    hyphens (`-`).

    ```python
    # will cause an error because it contains spaces
    Sanic("This is not legal")
    ```

    ```python
    # this is legal
    Sanic("Hyphens-are-legal_or_also_underscores")
    ```

    Args:
        name (str): The name of the application. Must be a valid
            Python module name (including hyphens).
        config (Optional[config_type]): The configuration to use for
            the application. Defaults to `None`.
        ctx (Optional[ctx_type]): The context to use for the
            application. Defaults to `None`.
        router (Optional[Router]): The router to use for the
            application. Defaults to `None`.
        signal_router (Optional[SignalRouter]): The signal router to
            use for the application. Defaults to `None`.
        error_handler (Optional[ErrorHandler]): The error handler to
            use for the application. Defaults to `None`.
        env_prefix (Optional[str]): The prefix to use for environment
            variables. Defaults to `SANIC_`.
        request_class (Optional[Type[Request]]): The request class to
            use for the application. Defaults to `Request`.
        strict_slashes (bool): Whether to enforce strict slashes.
            Defaults to `False`.
        log_config (Optional[Dict[str, Any]]): The logging configuration
            to use for the application. Defaults to `None`.
        configure_logging (bool): Whether to configure logging.
            Defaults to `True`.
        dumps (Optional[Callable[..., AnyStr]]): The function to use
            for serializing JSON. Defaults to `None`.
        loads (Optional[Callable[..., Any]]): The function to use
            for deserializing JSON. Defaults to `None`.
        inspector (bool): Whether to enable the inspector. Defaults
            to `False`.
        inspector_class (Optional[Type[Inspector]]): The inspector
            class to use for the application. Defaults to `None`.
        certloader_class (Optional[Type[CertLoader]]): The certloader
            class to use for the application. Defaults to `None`.
  summary: The main application instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: config
      default: None
      rest: false
    - kind: positional
      name: ctx
      default: None
      rest: false
    - kind: positional
      name: router
      default: None
      rest: false
    - kind: positional
      name: signal_router
      default: None
      rest: false
    - kind: positional
      name: error_handler
      default: None
      rest: false
    - kind: positional
      name: env_prefix
      default: SANIC_
      rest: false
    - kind: positional
      name: request_class
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: 'False'
      rest: false
    - kind: positional
      name: log_config
      default: None
      rest: false
    - kind: positional
      name: configure_logging
      default: 'True'
      rest: false
    - kind: positional
      name: dumps
      default: None
      rest: false
    - kind: positional
      name: loads
      default: None
      rest: false
    - kind: positional
      name: inspector
      default: 'False'
      rest: false
    - kind: positional
      name: inspector_class
      default: None
      rest: false
    - kind: positional
      name: certloader_class
      default: None
      rest: false
    - type: Sanic
      kind: return
  inherits_from:
  - <class 'typing.Generic'>
  - <class 'sanic.mixins.static.StaticHandleMixin'>
  - <class 'sanic.base.root.BaseSanic'>
  - <class 'sanic.mixins.routes.RouteMixin'>
  - <class 'sanic.mixins.static.StaticMixin'>
  - <class 'sanic.mixins.base.BaseMixin'>
  - <class 'sanic.mixins.middleware.MiddlewareMixin'>
  - <class 'sanic.mixins.listeners.ListenerMixin'>
  - <class 'sanic.mixins.exceptions.ExceptionMixin'>
  - <class 'sanic.mixins.signals.SignalMixin'>
  - <class 'sanic.mixins.startup.StartupMixin'>
- name: Sanic.START_METHOD_SET
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Sanic.ack
  kind: method
  ns: sanic
  description: |-
    Shorthand to send an ack message to the Server Manager.

    In general, this should usually not need to be called manually.
    It is used to tell the Manager that a process is operational and
    ready to begin operation.
  summary: Shorthand to send an ack message to the Server Manager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.add_route
  kind: method
  ns: sanic
  description: |-
    A helper method to register class-based view or functions as a handler to the application url routes.

    Args:
        handler (RouteHandler): Function or class-based view used as a route handler.
        uri (str): Path of the URL.
        methods (Iterable[str]): List or tuple of methods allowed; these are overridden if using an HTTPMethodView.
        host (Optional[Union[str, List[str]]]): Hostname or hostnames to match for this route.
        strict_slashes (Optional[bool]): If set, a route's slashes will be strict. E.g. `/foo` will not match `/foo/`.
        version (Optional[Union[int, str, float]]): Version of the API for this route.
        name (Optional[str]): User-defined route name for `url_for`.
        stream (bool): Boolean specifying if the handler is a stream handler.
        version_prefix (str): URL path that should be before the version value; default: ``/v``.
        error_format (Optional[str]): Custom error format string.
        unquote (bool): Boolean specifying if the handler requires unquoting.
        ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*` prefix will be appended to the route context (``route.ctx``). See below for examples.

    Returns:
        RouteHandler: The route handler.

    Examples:
        ```python
        from sanic import Sanic, text

        app = Sanic("test")

        async def handler(request):
            return text("OK")

        app.add_route(handler, "/test", methods=["GET", "POST"])
        ```

        You can use `ctx_kwargs` to add custom context to the route. This
        can often be useful when wanting to add metadata to a route that
        can be used by other parts of the application (like middleware).

        ```python
        from sanic import Sanic, text

        app = Sanic("test")

        async def handler(request):
            return text("OK")

        async def custom_middleware(request):
            if request.route.ctx.monitor:
                do_some_monitoring()

        app.add_route(handler, "/test", methods=["GET", "POST"], ctx_monitor=True)
        app.register_middleware(custom_middleware)
  summary: A helper method to register class-based view or functions as a handler to the application url routes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: frozenset({'GET'})
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.add_signal
  kind: method
  ns: sanic
  description: |-
    Registers a signal handler for a specific event.

    Args:
        handler (Optional[Callable[..., Any]]): The function to be called
            when the event occurs. Defaults to a noop if not provided.
        event (str): The name of the event to listen for.
        condition (Optional[Dict[str, Any]]): Optional condition to filter
            the event triggering. Defaults to `None`.
        exclusive (bool): Whether or not the handler is exclusive. When
            `True`, the signal can only be dispatched when the
            `condition` has been met. *This is inapplicable to blueprint
            signals, which are **ALWAYS** non-exclusive.* Defaults
            to `True`.

    Returns:
        Callable[..., Any]: The handler that was registered.
  summary: Registers a signal handler for a specific event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: condition
      default: None
      rest: false
    - kind: positional
      name: exclusive
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.add_task
  kind: method
  ns: sanic
  description: |-
    Schedule a task to run later, after the loop has started.

    While this is somewhat similar to `asyncio.create_task`, it can be
    used before the loop has started (in which case it will run after the
    loop has started in the `before_server_start` listener).

    Naming tasks is a good practice as it allows you to cancel them later,
    and allows Sanic to manage them when the server is stopped, if needed.

    [See user guide re: background tasks](/en/guide/basics/tasks#background-tasks)

    Args:
        task (Union[Future[Any], Coroutine[Any, Any, Any], Awaitable[Any]]):
            The future, coroutine, or awaitable to schedule.
        name (Optional[str], optional): The name of the task, if needed for
            later reference. Defaults to `None`.
        register (bool, optional): Whether to register the task. Defaults
            to `True`.

    Returns:
        Optional[Task[Any]]: The task that was scheduled, if applicable.
  summary: Schedule a task to run later, after the loop has started
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: task
      default: null
      rest: false
    - name: name
      default: None
      rest: false
      kind: kw-only
    - name: register
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.add_websocket_route
  kind: method
  ns: sanic
  description: |-
    A helper method to register a function as a websocket route.

    Args:
        handler (Callable): A callable function or instance of a class
            that can handle the websocket request.
        uri (str): URL path that will be mapped to the websocket handler.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN details.
        strict_slashes (Optional[bool]): If the API endpoint needs to
            terminate with a `"/"` or not.
        subprotocols (Optional[List[str]]): Subprotocols to be used with
            websocket handshake.
        version (Optional[Union[int, str, float]]): Versioning information.
        name (Optional[str]): A unique name assigned to the URL.
        version_prefix (str): URL path before the version value.
            Defaults to `"/v"`.
        error_format (Optional[str]): Format for error handling.
        **ctx_kwargs (Any): Keyword arguments beginning with `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        Callable: Object passed as the handler.
  summary: A helper method to register a function as a websocket route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.after_reload_trigger
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the after_reload_trigger event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This event is fired after the reload process
    triggers the reload. A change event has been detected and the reload
    process has been triggered.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_reload_trigger
        async def on_after_reload_trigger(app: Sanic, changed: set[str]):
            print("After reload trigger, changed files: ", changed)
        ```
  summary: Decorator for registering a listener for the after_reload_trigger event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.after_server_start
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the after_server_start event.

    This event is fired on all worker processes. You should typically
    use this event to run background tasks, or perform other actions that
    are not directly related to handling requests. In theory, it is
    possible that some requests may be handled before this event is fired,
    so you should not use this event to initialize resources that are
    required for handling requests.

    A common use case for this event is to start a background task that
    periodically performs some action, such as clearing a cache or
    performing a health check.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_server_start
        async def on_after_server_start(app: Sanic):
            print("After server start")
        ```
  summary: Decorator for registering a listener for the after_server_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.after_server_stop
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the after_server_stop event.

    This event is fired on all worker processes. This event is fired
    after the server has stopped shutting down, and all requests have
    been handled. You should typically use this event to clean up
    resources that were initialized in the before_server_start event.

    A common use case for this event is to close a database connection
    pool, or to close a cache client.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_server_stop
        async def on_after_server_stop(app: Sanic):
            print("After server stop")
        ```
  summary: Decorator for registering a listener for the after_server_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.all_exceptions
  kind: method
  ns: sanic
  description: |-
    Enables the process of creating a global exception handler as a convenience.

    This following two examples are equivalent:

    ```python
    @app.exception(Exception)
    async def handler(request: Request, exception: Exception) -> HTTPResponse:
        return text(f"Exception raised: {exception}")
    ```

    ```python
    @app.all_exceptions
    async def handler(request: Request, exception: Exception) -> HTTPResponse:
        return text(f"Exception raised: {exception}")
    ```

    Args:
        handler (Callable[..., Any]): A coroutine function to handle exceptions.

    Returns:
        Callable[..., Any]: A decorated method to handle global exceptions for
            any route registered under this blueprint.
  summary: Enables the process of creating a global exception handler as a convenience
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.amend
  kind: method
  ns: sanic
  description: |-
    Context manager to allow changes to the app after it has started.

    Typically, once an application has started and is running, you cannot
    make certain changes, like adding routes, middleware, or signals. This
    context manager allows you to make those changes, and then finalizes
    the app again when the context manager exits.

    Yields:
        None

    Example:
        ```python
        with app.amend():
            app.add_route(handler, '/new_route')
        ```
  summary: Context manager to allow changes to the app after it has started
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.asgi
  kind: property
  ns: sanic
  description: Whether the app is running in ASGI mode.
  summary: Whether the app is running in ASGI mode
  signatures: null
  inherits_from: null
- name: Sanic.asgi_client
  kind: property
  ns: sanic
  description: |-
    A testing client that uses ASGI to reach into the application to execute handlers.

    This property is available if the `sanic-testing` package is installed.

    See [Test Clients](/en/plugins/sanic-testing/clients#asgi-async-client-sanicasgitestclient) for details.

    Returns:
        SanicASGITestClient: A testing client from the `sanic-testing` package.
  summary: A testing client that uses ASGI to reach into the application to execute handlers
  signatures: null
  inherits_from: null
- name: Sanic.auto_reload
  kind: property
  ns: sanic
  description: Whether the app is running in auto-reload mode.
  summary: Whether the app is running in auto-reload mode
  signatures: null
  inherits_from: null
- name: Sanic.before_reload_trigger
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the before_reload_trigger event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This event is fired before the reload process
    triggers the reload. A change event has been detected and the reload
    process is about to be triggered.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_reload_trigger
        async def on_before_reload_trigger(app: Sanic):
            print("Before reload trigger")
        ```
  summary: Decorator for registering a listener for the before_reload_trigger event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.before_server_start
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the before_server_start event.

    This event is fired on all worker processes. You should typically
    use this event to initialize resources that are global in nature, or
    will be shared across requests and various parts of the application.

    A common use case for this event is to initialize a database connection
    pool, or to initialize a cache client.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_server_start
        async def on_before_server_start(app: Sanic):
            print("Before server start")
        ```
  summary: Decorator for registering a listener for the before_server_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.before_server_stop
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the before_server_stop event.

    This event is fired on all worker processes. This event is fired
    before the server starts shutting down. You should not use this event
    to perform any actions that are required for handling requests, as
    some requests may continue to be handled after this event is fired.

    A common use case for this event is to stop a background task that
    was started in the after_server_start event.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_server_stop
        async def on_before_server_stop(app: Sanic):
            print("Before server stop")
        ```
  summary: Decorator for registering a listener for the before_server_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.blueprint
  kind: method
  ns: sanic
  description: |-
    Register a blueprint on the application.

    See [Blueprints](/en/guide/best-practices/blueprints) for more information.

    Args:
        blueprint (Union[Blueprint, Iterable[Blueprint], BlueprintGroup]): Blueprint object or (list, tuple) thereof.
        url_prefix (Optional[str]): Prefix for all URLs bound to the blueprint. Defaults to `None`.
        version (Optional[Union[int, float, str]]): Version prefix for URLs. Defaults to `None`.
        strict_slashes (Optional[bool]): Enforce the trailing slashes. Defaults to `None`.
        version_prefix (Optional[str]): Prefix for version. Defaults to `None`.
        name_prefix (Optional[str]): Prefix for the blueprint name. Defaults to `None`.

    Example:
        ```python
        app = Sanic("TestApp")
        bp = Blueprint('TestBP')

        @bp.route('/route')
        def handler(request):
            return text('Hello, Blueprint!')

        app.blueprint(bp, url_prefix='/blueprint')
        ```
  summary: Register a blueprint on the application
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: blueprint
      default: null
      rest: false
    - name: url_prefix
      default: None
      rest: false
      kind: kw-only
    - name: version
      default: None
      rest: false
      kind: kw-only
    - name: strict_slashes
      default: None
      rest: false
      kind: kw-only
    - name: version_prefix
      default: None
      rest: false
      kind: kw-only
    - name: name_prefix
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.blueprints
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.cancel_task
  kind: method
  ns: sanic
  description: |-
    Cancel a named task.

    This method is used to cancel a task by its name. Optionally, you can
    provide a message that describes why the task was canceled, and control
    whether an exception should be raised if the task is not found.

    Args:
        name (str): The name of the task to be canceled.
        msg (Optional[str]): Optional message describing why the task was canceled. Defaults to None.
        raise_exception (bool): If True, an exception will be raised if the task is not found. Defaults to True.

    Example:
        ```python
        async def my_task():
            try:
                await asyncio.sleep(10)
            except asyncio.CancelledError as e:
                current_task = asyncio.current_task()
                print(f"Task {current_task.get_name()} was cancelled. {e}")
                # Task sleepy_task was cancelled. No more sleeping!


        @app.before_server_start
        async def before_start(app):
            app.add_task(my_task, name="sleepy_task")
            await asyncio.sleep(1)
            await app.cancel_task("sleepy_task", msg="No more sleeping!")
        ```
  summary: Cancel a named task
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - name: raise_exception
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.catch_exception
  kind: method
  ns: sanic
  description: |-
    Register an exception handler for logging or processing.

    This method allows the registration of a custom exception handler to
    catch and process exceptions that occur in the application. Unlike a
    typical exception handler that might modify the response to the client,
    this is intended to capture exceptions for logging or other internal
    processing, such as sending them to an error reporting utility.

    Args:
        handler (Callable): A coroutine function that takes the application
            instance and the exception as arguments. It will be called when
            an exception occurs within the application's lifecycle.

    Example:
        ```python
        app = Sanic("TestApp")

        @app.catch_exception
        async def report_exception(app: Sanic, exception: Exception):
            logging.error(f"An exception occurred: {exception}")

            # Send to an error reporting service
            await error_service.report(exception)

        # Any unhandled exceptions within the application will now be
        # logged and reported to the error service.
        ```
  summary: Register an exception handler for logging or processing
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.certloader_class
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.config
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.configure_logging
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.create_server
  kind: method
  ns: sanic
  description: |-
    Low level API for creating a Sanic Server instance.

    This method will create a Sanic Server instance, but will not start
    it. This is useful for integrating Sanic into other systems. But, you
    should take caution when using it as it is a low level API and does
    not perform any of the lifecycle events.

    .. note::
        This does not support multiprocessing and is not the preferred
        way to run a Sanic application. Proceed with caution.

    You will need to start the server yourself as shown in the example
    below. You are responsible for the lifecycle of the server, including
    app startup using `await app.startup()`. No events will be triggered
    for you, so you will need to trigger them yourself if wanted.

    Args:
        host (Optional[str]): Address to host on.
        port (Optional[int]): Port to host on.
        debug (bool): Enables debug output (slows server).
        ssl (Union[None, SSLContext, dict, str, list, tuple]): SSLContext,
            or location of certificate and key for SSL encryption
            of worker(s).
        sock (Optional[socket]): Socket for the server to accept
            connections from.
        protocol (Optional[Type[Protocol]]): Subclass of
            `asyncio.Protocol` class.
        backlog (int): Number of unaccepted connections that the system
            will allow before refusing new connections.
        access_log (Optional[bool]): Enables writing access logs
            (slows server).
        return_asyncio_server (bool): _DEPRECATED_
        asyncio_server_kwargs (Optional[Dict[str, Any]]): Key-value
            arguments for asyncio/uvloop `create_server` method.
        noisy_exceptions (Optional[bool]): Log exceptions that are normally
            considered to be quiet/silent.

    Returns:
        Optional[AsyncioServer]: AsyncioServer if `return_asyncio_server`
            is `True` else `None`.

    Examples:
        ```python
        import asyncio
        import uvloop
        from sanic import Sanic, response


        app = Sanic("Example")


        @app.route("/")
        async def test(request):
            return response.json({"answer": "42"})


        async def main():
            server = await app.create_server()
            await server.startup()
            await server.serve_forever()


        if __name__ == "__main__":
            asyncio.set_event_loop(uvloop.new_event_loop())
            asyncio.run(main())
        ```
  summary: Low level API for creating a Sanic Server instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: port
      default: None
      rest: false
    - name: debug
      default: 'False'
      rest: false
      kind: kw-only
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: protocol
      default: None
      rest: false
      kind: kw-only
    - name: backlog
      default: '100'
      rest: false
      kind: kw-only
    - name: access_log
      default: None
      rest: false
      kind: kw-only
    - name: unix
      default: None
      rest: false
      kind: kw-only
    - name: return_asyncio_server
      default: 'True'
      rest: false
      kind: kw-only
    - name: asyncio_server_kwargs
      default: None
      rest: false
      kind: kw-only
    - name: noisy_exceptions
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.ctx
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.debug
  kind: property
  ns: sanic
  description: Whether the app is running in debug mode.
  summary: Whether the app is running in debug mode
  signatures: null
  inherits_from: null
- name: Sanic.delete
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **DELETE** HTTP method.

    Args:
        uri (str): URL to be tagged to the DELETE method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for the
            service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a */*.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the Route.
        ignore_body (bool): Whether or not to ignore the body in the
            request. Defaults to `False`.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **DELETE** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.dispatch
  kind: method
  ns: sanic
  description: |-
    Dispatches an event to the signal router.

    Args:
        event (str): Name of the event to dispatch.
        condition (Optional[Dict[str, str]]): Condition for the
            event dispatch.
        context (Optional[Dict[str, Any]]): Context for the event dispatch.
        fail_not_found (bool): Whether to fail if the event is not found.
            Default is `True`.
        inline (bool): If `True`, returns the result directly. If `False`,
            returns a `Task`. Default is `False`.
        reverse (bool): Whether to reverse the dispatch order.
            Default is `False`.

    Returns:
        Coroutine[Any, Any, Awaitable[Union[Task, Any]]]: An awaitable
            that returns the result directly if `inline=True`, or a `Task`
            if `inline=False`.

    Examples:
        ```python
        @app.signal("user.registration.created")
        async def send_registration_email(**context):
            await send_email(context["email"], template="registration")

        @app.post("/register")
        async def handle_registration(request):
            await do_registration(request)
            await request.app.dispatch(
                "user.registration.created",
                context={"email": request.json.email}
            })
        ```
  summary: Dispatches an event to the signal router
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - name: condition
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: fail_not_found
      default: 'True'
      rest: false
      kind: kw-only
    - name: inline
      default: 'False'
      rest: false
      kind: kw-only
    - name: reverse
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.dispatch_delayed_tasks
  kind: method
  ns: sanic
  description: |-
    Signal handler for dispatching delayed tasks.

    This is used to dispatch tasks that were added before the loop was
    started, and will be called after the loop has started. It is
    not typically used directly.

    Args:
        app (Sanic): The Sanic application instance.
        loop (AbstractEventLoop): The event loop in which the tasks are
            being run.

    Returns:
        None
  summary: Signal handler for dispatching delayed tasks
  signatures:
  - - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: loop
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.enable_websocket
  kind: method
  ns: sanic
  description: |-
    Enable or disable the support for websocket.

    Websocket is enabled automatically if websocket routes are
    added to the application. This typically will not need to be
    called manually.

    Args:
        enable (bool, optional): If set to `True`, enables websocket
            support. If set to `False`, disables websocket support.
            Defaults to `True`.

    Returns:
        None
  summary: Enable or disable the support for websocket
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: enable
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.error_handler
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.event
  kind: method
  ns: sanic
  description: |-
    Wait for a specific event to be triggered.

    This method waits for a named event to be triggered and can be used
    in conjunction with the signal system to wait for specific signals.
    If the event is not found and auto-registration of events is enabled,
    the event will be registered and then waited on. If the event is not
    found and auto-registration is not enabled, a `NotFound` exception
    is raised.

    Auto-registration can be handled by setting the `EVENT_AUTOREGISTER`
    config value to `True`.

    ```python
    app.config.EVENT_AUTOREGISTER = True
    ```

    Args:
        event (str): The name of the event to wait for.
        timeout (Optional[Union[int, float]]): An optional timeout value
            in seconds. If provided, the wait will be terminated if the
            timeout is reached. Defaults to `None`, meaning no timeout.
        condition: If provided, method will only return when the signal
            is dispatched with the given condition.
        exclusive: When true (default), the signal can only be dispatched
            when the condition has been met. When ``False``, the signal can
            be dispatched either with or without it.

    Raises:
        NotFound: If the event is not found and auto-registration of
            events is not enabled.

    Returns:
        The context dict of the dispatched signal.

    Examples:
        ```python
        async def wait_for_event(app):
            while True:
                print("> waiting")
                await app.event("foo.bar.baz")
                print("> event found")

        @app.after_server_start
        async def after_server_start(app, loop):
            app.add_task(wait_for_event(app))
        ```
  summary: Wait for a specific event to be triggered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - name: condition
      default: None
      rest: false
      kind: kw-only
    - name: exclusive
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.exception
  kind: method
  ns: sanic
  description: |-
    Decorator used to register an exception handler for the current application or blueprint instance.

    This method allows you to define a handler for specific exceptions that
    may be raised within the routes of this blueprint. You can specify one
    or more exception types to catch, and the handler will be applied to
    those exceptions.

    When used on a Blueprint, the handler will only be applied to routes
    registered under that blueprint. That means they only apply to
    requests that have been matched, and the exception is raised within
    the handler function (or middleware) for that route.

    A general exception like `NotFound` should only be registered on the
    application instance, not on a blueprint.

    See [Exceptions](/en/guide/best-practices/exceptions.html) for more information.

    Args:
        exceptions (Union[Type[Exception], List[Type[Exception]]]): List of
            Python exceptions to be caught by the handler.
        apply (bool, optional): Whether the exception handler should be
            applied. Defaults to True.

    Returns:
        Callable: A decorated method to handle global exceptions for any route
            registered under this blueprint.

    Example:
        ```python
        from sanic import Blueprint, text

        bp = Blueprint('my_blueprint')

        @bp.exception(Exception)
        def handle_exception(request, exception):
            return text("Oops, something went wrong!", status=500)
        ```

        ```python
        from sanic import Sanic, NotFound, text

        app = Sanic('MyApp')

        @app.exception(NotFound)
        def ignore_404s(request, exception):
            return text(f"Yep, I totally found the page: {request.url}")
  summary: Decorator used to register an exception handler for the current application or blueprint instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: apply
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.ext
  kind: property
  ns: sanic
  description: |-
    Convenience property for accessing Sanic Extensions.

    This property is available if the `sanic-ext` package is installed.

    See [Sanic Extensions](/en/plugins/sanic-ext/getting-started)
        for details.

    Returns:
        Extend: The Sanic Extensions instance.

    Examples:
        A typical use case might be for registering a dependency injection.
        ```python
        app.ext.dependency(SomeObject())
        ```
  summary: Convenience property for accessing Sanic Extensions
  signatures: null
  inherits_from: null
- name: Sanic.extend
  kind: method
  ns: sanic
  description: |-
    Extend Sanic with additional functionality using Sanic Extensions.

    This method enables you to add one or more Sanic Extensions to the
    current Sanic instance. It allows for more control over the Extend
    object, such as enabling or disabling built-in extensions or providing
    custom configuration.

    See [Sanic Extensions](/en/plugins/sanic-ext/getting-started)
        for details.

    Args:
        extensions (Optional[List[Type[Extension]]], optional): A list of
            extensions to add. Defaults to `None`, meaning only built-in
            extensions are added.
        built_in_extensions (bool, optional): Whether to enable built-in
            extensions. Defaults to `True`.
        config (Optional[Union[Config, Dict[str, Any]]], optional):
            Optional custom configuration for the extensions. Defaults
            to `None`.
        **kwargs: Additional keyword arguments that might be needed by
            specific extensions.

    Returns:
        Extend: The Sanic Extensions instance.

    Raises:
        RuntimeError: If an attempt is made to extend Sanic after Sanic
            Extensions has already been set up.

    Examples:
        A typical use case might be to add a custom extension along with
            built-in ones.
        ```python
        app.extend(
            extensions=[MyCustomExtension],
            built_in_extensions=True
        )
        ```
  summary: Extend Sanic with additional functionality using Sanic Extensions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: extensions
      default: None
      rest: false
      kind: kw-only
    - name: built_in_extensions
      default: 'True'
      rest: false
      kind: kw-only
    - name: config
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.finalize
  kind: method
  ns: sanic
  description: |-
    Finalize the routing configuration for the Sanic application.

    This method completes the routing setup by calling the router's
    finalize method, and it also finalizes any middleware that has been
    added to the application. If the application is not in test mode,
    any finalization errors will be raised.

    Finalization consists of identifying defined routes and optimizing
    Sanic's performance to meet the application's specific needs. If
    you are manually adding routes, after Sanic has started, you will
    typically want to use the  `amend` context manager rather than
    calling this method directly.

    .. note::
        This method is usually called internally during the server setup
        process and does not typically need to be invoked manually.

    Raises:
        FinalizationError: If there is an error during the finalization
            process, and the application is not in test mode.

    Example:
        ```python
        app.finalize()
        ```
  summary: Finalize the routing configuration for the Sanic application
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.finalize_middleware
  kind: method
  ns: sanic
  description: |-
    Finalize the middleware configuration for the Sanic application.

    This method completes the middleware setup for the application.
    Middleware in Sanic is used to process requests globally before they
    reach individual routes or after routes have been processed.

    Finalization consists of identifying defined routes and optimizing
    Sanic's performance to meet the application's specific needs. If
    you are manually adding routes, after Sanic has started, you will
    typically want to use the `amend` context manager rather than
    calling this method directly.

    .. note::
        This method is usually called internally during the server setup
        process and does not typically need to be invoked manually.

    Example:
        ```python
        app.finalize_middleware()
        ```
  summary: Finalize the middleware configuration for the Sanic application
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.get
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **GET** HTTP method.

    Args:
        uri (str): URL to be tagged to GET method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_* prefix` will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **GET** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.get_address
  kind: method
  ns: sanic
  description: |-
    Retrieve the host address and port, with default values based on the given parameters.

    Args:
        host (Optional[str]): Host IP or FQDN for the service to use. Defaults to `"127.0.0.1"`.
        port (Optional[int]): Port number. Defaults to `8443` if version is 3 or `auto_tls=True`, else `8000`
        version (HTTPVersion, optional): HTTP Version. Defaults to `HTTP.VERSION_1` (HTTP/1.1).
        auto_tls (bool, optional): Automatic TLS flag. Defaults to `False`.

    Returns:
        Tuple[str, int]: Tuple containing the host and port
  summary: Retrieve the host address and port, with default values based on the given parameters
  signatures:
  - - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: port
      default: null
      rest: false
    - kind: positional
      name: version
      default: '1'
      rest: false
    - kind: positional
      name: auto_tls
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.get_app
  kind: function
  ns: sanic
  description: |-
    Retrieve an instantiated Sanic instance by name.

    This method is best used when needing to get access to an already
    defined application instance in another part of an app.

    .. warning::
        Be careful when using this method in the global scope as it is
        possible that the import path running will cause it to error if
        the imported global scope runs before the application instance
        is created.

        It is typically best used in a function or method that is called
        after the application instance has been created.

        ```python
        def setup_routes():
            app = Sanic.get_app()
            app.add_route(handler_1, '/route1')
            app.add_route(handler_2, '/route2')
        ```

    Args:
        name (Optional[str], optional): Name of the application instance
            to retrieve. When not specified, it will return the only
            application instance if there is only one. If not specified
            and there are multiple application instances, it will raise
            an exception. Defaults to `None`.
        force_create (bool, optional): If `True` and the named app does
            not exist, a new instance will be created. Defaults to `False`.

    Returns:
        Sanic: The requested Sanic app instance.

    Raises:
        SanicException: If there are multiple or no Sanic apps found, or
            if the specified name is not found.


    Example:
        ```python
        app1 = Sanic("app1")
        app2 = Sanic.get_app("app1")  # app2 is the same instance as app1
        ```
  summary: Retrieve an instantiated Sanic instance by name
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - name: force_create
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.get_motd_data
  kind: method
  ns: sanic
  description: |-
    Retrieves the message of the day (MOTD) data.

    Args:
        server_settings (Optional[Dict[str, Any]], optional): Settings for
            the server. Defaults to `None`.

    Returns:
        Tuple[Dict[str, Any], Dict[str, Any]]: A tuple containing two
            dictionaries with the relevant MOTD data.
  summary: Retrieves the message of the day (MOTD) data
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: server_settings
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.get_server_location
  kind: method
  ns: sanic
  description: |-
    Using the server settings, retrieve the server location.

    Args:
        server_settings (Optional[Dict[str, Any]], optional): Settings for
            the server. Defaults to `None`.

    Returns:
        str: The server location.
  summary: Using the server settings, retrieve the server location
  signatures:
  - - kind: positional
      name: server_settings
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.get_task
  kind: method
  ns: sanic
  description: |-
    Get a named task.

    This method is used to get a task by its name. Optionally, you can
    control whether an exception should be raised if the task is not found.

    Args:
        name (str): The name of the task to be retrieved.
        raise_exception (bool): If `True`, an exception will be raised if
            the task is not found. Defaults to `True`.

    Returns:
        Optional[Task]: The task, if found.
  summary: Get a named task
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - name: raise_exception
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.go_fast
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.handle_exception
  kind: method
  ns: sanic
  description: |-
    A handler that catches specific exceptions and outputs a response.

    .. note::
        This method is typically used internally, and you should not need
        to call it directly.

    Args:
        request (Request): The current request object.
        exception (BaseException): The exception that was raised.
        run_middleware (bool): Whether to run middleware. Defaults
            to `True`.

    Raises:
        ServerError: response 500.
  summary: A handler that catches specific exceptions and outputs a response
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: run_middleware
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.handle_request
  kind: method
  ns: sanic
  description: |-
    Handles a request by dispatching it to the appropriate handler.

    .. note::
        This method is typically used internally, and you should not need
        to call it directly.

    Args:
        request (Request): The current request object.

    Raises:
        ServerError: response 500.
  summary: Handles a request by dispatching it to the appropriate handler
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.head
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **HEAD** HTTP method.

    Args:
        uri (str): URL to be tagged to HEAD method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **HEAD** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.inspector
  kind: property
  ns: sanic
  description: |-
    An instance of Inspector for accessing the application's state.

    This can only be accessed from a worker process, and only if the
    inspector has been enabled.

    See [Inspector](/en/guide/deployment/inspector) for details.

    Returns:
        Inspector: An instance of Inspector.
  summary: An instance of Inspector for accessing the application's state
  signatures: null
  inherits_from: null
- name: Sanic.inspector_class
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.listener
  kind: method
  ns: sanic
  description: |-
    Create a listener for a specific event in the application's lifecycle.

    See [Listeners](/en/guide/basics/listeners) for more details.

    .. note::
        Overloaded signatures allow for different ways of calling this method, depending on the types of the arguments.

        Usually, it is prederred to use one of the convenience methods such as `before_server_start` or `after_server_stop` instead of calling this method directly.

        ```python
        @app.before_server_start
        async def prefered_method(_):
            ...

        @app.listener("before_server_start")
        async def not_prefered_method(_):
            ...

    Args:
        listener_or_event (Union[ListenerType[Sanic], str]): A listener function or an event name.
        event_or_none (Optional[str]): The event name to listen for if `listener_or_event` is a function. Defaults to `None`.
        apply (bool): Whether to apply the listener immediately. Defaults to `True`.
        priority (int): The priority of the listener. Defaults to `0`.

    Returns:
        Union[ListenerType[Sanic], Callable[[ListenerType[Sanic]], ListenerType[Sanic]]]: The listener or a callable that takes a listener.

    Example:
        The following code snippet shows how you can use this method as a decorator:

        ```python
        @bp.listener("before_server_start")
        async def before_server_start(app, loop):
            ...
        ```
  summary: Create a listener for a specific event in the application's lifecycle
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener_or_event
      default: null
      rest: false
    - kind: positional
      name: event_or_none
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.listeners
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.loop
  kind: property
  ns: sanic
  description: |-
    Synonymous with asyncio.get_event_loop().

    .. note::
        Only supported when using the `app.run` method.

    Returns:
        AbstractEventLoop: The event loop for the application.

    Raises:
        SanicException: If the application is not running.
  summary: Synonymous with asyncio
  signatures: null
  inherits_from: null
- name: Sanic.m
  kind: property
  ns: sanic
  description: |-
    Interface for interacting with the worker processes

    This is a shortcut for `app.multiplexer`. It is available only in a
    worker process using the Sanic server. It allows you to interact with
    the worker processes, such as sending messages and commands.

    See [Access to the multiplexer](/en/guide/deployment/manager#access-to-the-multiplexer) for more information.

    Returns:
        WorkerMultiplexer: The worker multiplexer instance

    Examples:
        ```python
        app.m.restart()    # restarts the worker
        app.m.terminate()  # terminates the worker
        app.m.scale(4)     # scales the number of workers to 4
    ```
  summary: Interface for interacting with the worker processes
  signatures: null
  inherits_from: null
- name: Sanic.main_process_ready
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the main_process_ready event.

    This event is fired only on the main process and **NOT** on any
    worker processes. It is fired after the main process has started and
    the Worker Manager has been initialized (ie, you will have access to
    `app.manager` instance). The typical use case for this event is to
    add a managed process to the Worker Manager.

    See [Running custom processes](/en/guide/deployment/manager.html#running-custom-processes) and [Listeners](/en/guide/basics/listeners.html) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_ready
        async def on_main_process_ready(app: Sanic):
            print("Main process ready")
        ```
  summary: Decorator for registering a listener for the main_process_ready event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.main_process_start
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the main_process_start event.

    This event is fired only on the main process and **NOT** on any
    worker processes. You should typically use this event to initialize
    resources that are shared across workers, or to initialize resources
    that are not safe to be initialized in a worker process.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_start
        async def on_main_process_start(app: Sanic):
            print("Main process started")
        ```
  summary: Decorator for registering a listener for the main_process_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.main_process_stop
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the main_process_stop event.

    This event is fired only on the main process and **NOT** on any
    worker processes. You should typically use this event to clean up
    resources that were initialized in the main_process_start event.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_stop
        async def on_main_process_stop(app: Sanic):
            print("Main process stopped")
        ```
  summary: Decorator for registering a listener for the main_process_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.make_coffee
  kind: method
  ns: sanic
  description: |-
    Try for yourself! `sanic server:app --coffee`

     ```
     ▄████████▄
    ██       ██▀▀▄
    ███████████  █
    ███████████▄▄▀
     ▀███████▀

     ```
  summary: Try for yourself! `sanic server:app --coffee`
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.manager
  kind: property
  ns: sanic
  description: |-
    Property to access the WorkerManager instance.

    This property provides access to the WorkerManager object controlling
    the worker processes. It can only be accessed from the main process.

    .. note::
        Make sure to only access this property from the main process,
        as attempting to do so from a worker process will result
        in an exception.

    See [WorkerManager](/en/guide/deployment/manager) for details.

    Returns:
        WorkerManager: The manager responsible for managing
            worker processes.

    Raises:
        SanicException: If an attempt is made to access the manager
            from a worker process or if the manager is not initialized.

    Example:
        ```python
        app.manager.manage(...)
        ```
  summary: Property to access the WorkerManager instance
  signatures: null
  inherits_from: null
- name: Sanic.middleware
  kind: method
  ns: sanic
  description: |-
    Decorator for registering middleware.

    Decorate and register middleware to be called before a request is
    handled or after a response is created. Can either be called as
    *@app.middleware* or *@app.middleware('request')*. Although, it is
    recommended to use *@app.on_request* or *@app.on_response* instead
    for clarity and convenience.

    See [Middleware](/guide/basics/middleware) for more information.

    Args:
        middleware_or_request (Union[Callable, str]): Middleware function
            or the keyword 'request' or 'response'.
        attach_to (str, optional): When to apply the middleware;
            either 'request' (before the request is handled) or 'response'
            (after the response is created). Defaults to `'request'`.
        apply (bool, optional): Whether the middleware should be applied.
            Defaults to `True`.
        priority (int, optional): The priority level of the middleware.
            Lower numbers are executed first. Defaults to `0`.

    Returns:
        Union[Callable, Callable[[Callable], Callable]]: The decorated
            middleware function or a partial function depending on how
            the method was called.

    Example:
        ```python
        @app.middleware('request')
        async def custom_middleware(request):
            ...
        ```
  summary: Decorator for registering middleware
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware_or_request
      default: null
      rest: false
    - kind: positional
      name: attach_to
      default: request
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.motd
  kind: method
  ns: sanic
  description: |-
    Outputs the message of the day (MOTD).

    It generally can only be called once per process, and is usually
    called by the `run` method in the main process.

    Args:
        server_settings (Optional[Dict[str, Any]], optional): Settings for
            the server. Defaults to `None`.

    Returns:
        None
  summary: Outputs the message of the day (MOTD)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: server_settings
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.multiplexer
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.name
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.named_request_middleware
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.named_response_middleware
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.on_request
  kind: method
  ns: sanic
  description: |-
    Register a middleware to be called before a request is handled.

    This is the same as *@app.middleware('request')*.

    Args:
        middleware (Callable, optional): A callable that takes in a
            request. Defaults to `None`.

    Returns:
        Callable: The decorated middleware function or a partial function
            depending on how the method was called.

    Examples:
        ```python
        @app.on_request
        async def custom_middleware(request):
            request.ctx.custom = 'value'
        ```
  summary: Register a middleware to be called before a request is handled
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.on_response
  kind: method
  ns: sanic
  description: |-
    Register a middleware to be called after a response is created.

    This is the same as *@app.middleware('response')*.

    Args:
        middleware (Callable, optional): A callable that takes in a
            request and response. Defaults to `None`.

    Returns:
        Callable: The decorated middleware function or a partial function
            depending on how the method was called.

    Examples:
        ```python
        @app.on_response
        async def custom_middleware(request, response):
            response.headers['X-Server'] = 'Sanic'
        ```
  summary: Register a middleware to be called after a response is created
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.options
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **OPTIONS** HTTP method.

    Args:
        uri (str): URL to be tagged to OPTIONS method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **OPTIONS** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.patch
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **PATCH** HTTP method.

    Args:
        uri (str): URL to be tagged to PATCH method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Set to `True` if full request streaming is needed,
            `False` otherwise. Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **PATCH** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.post
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **POST** HTTP method.

    Args:
        uri (str): URL to be tagged to POST method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Whether or not to stream the request body.
            Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **POST** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.prepare
  kind: method
  ns: sanic
  description: |-
    Prepares one or more Sanic applications to be served simultaneously.

    This low-level API is typically used when you need to run multiple Sanic applications at the same time. Once prepared, `Sanic.serve()` should be called in the `if __name__ == "__main__"` block.

    .. note::
        "Preparing" and "serving" with this function is equivalent to using `app.run` for a single instance. This should only be used when running multiple applications at the same time.

    Args:
        host (Optional[str], optional): Hostname to listen on. Defaults to `None`.
        port (Optional[int], optional): Port to listen on. Defaults to `None`.
        dev (bool, optional): Development mode. Defaults to `False`.
        debug (bool, optional): Debug mode. Defaults to `False`.
        auto_reload (Optional[bool], optional): Auto reload feature. Defaults to `None`.
        version (HTTPVersion, optional): HTTP version to use. Defaults to `HTTP.VERSION_1`.
        ssl (Union[None, SSLContext, dict, str, list, tuple], optional): SSL configuration. Defaults to `None`.
        sock (Optional[socket], optional): Socket to bind to. Defaults to `None`.
        workers (int, optional): Number of worker processes. Defaults to `1`.
        protocol (Optional[Type[Protocol]], optional): Custom protocol class. Defaults to `None`.
        backlog (int, optional): Maximum number of pending connections. Defaults to `100`.
        register_sys_signals (bool, optional): Register system signals. Defaults to `True`.
        access_log (Optional[bool], optional): Access log. Defaults to `None`.
        unix (Optional[str], optional): Unix socket. Defaults to `None`.
        loop (Optional[AbstractEventLoop], optional): Event loop. Defaults to `None`.
        reload_dir (Optional[Union[List[str], str]], optional): Reload directory. Defaults to `None`.
        noisy_exceptions (Optional[bool], optional): Display exceptions. Defaults to `None`.
        motd (bool, optional): Display message of the day. Defaults to `True`.
        fast (bool, optional): Fast mode. Defaults to `False`.
        verbosity (int, optional): Verbosity level. Defaults to `0`.
        motd_display (Optional[Dict[str, str]], optional): Custom MOTD display. Defaults to `None`.
        coffee (bool, optional): Coffee mode. Defaults to `False`.
        auto_tls (bool, optional): Auto TLS. Defaults to `False`.
        single_process (bool, optional): Single process mode. Defaults to `False`.

    Raises:
        RuntimeError: Raised when attempting to serve HTTP/3 as a secondary server.
        RuntimeError: Raised when attempting to use both `fast` and `workers`.
        RuntimeError: Raised when attempting to use `single_process` with `fast`, `workers`, or `auto_reload`.
        TypeError: Raised when attempting to use `loop` with `create_server`.
        ValueError: Raised when `PROXIES_COUNT` is negative.

    Examples:
        ```python
        if __name__ == "__main__":
            app.prepare()
            app.serve()
        ```
  summary: Prepares one or more Sanic applications to be served simultaneously
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: port
      default: None
      rest: false
    - name: dev
      default: 'False'
      rest: false
      kind: kw-only
    - name: debug
      default: 'False'
      rest: false
      kind: kw-only
    - name: auto_reload
      default: None
      rest: false
      kind: kw-only
    - name: version
      default: '1'
      rest: false
      kind: kw-only
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: workers
      default: '1'
      rest: false
      kind: kw-only
    - name: protocol
      default: None
      rest: false
      kind: kw-only
    - name: backlog
      default: '100'
      rest: false
      kind: kw-only
    - name: register_sys_signals
      default: 'True'
      rest: false
      kind: kw-only
    - name: access_log
      default: None
      rest: false
      kind: kw-only
    - name: unix
      default: None
      rest: false
      kind: kw-only
    - name: loop
      default: None
      rest: false
      kind: kw-only
    - name: reload_dir
      default: None
      rest: false
      kind: kw-only
    - name: noisy_exceptions
      default: None
      rest: false
      kind: kw-only
    - name: motd
      default: 'True'
      rest: false
      kind: kw-only
    - name: fast
      default: 'False'
      rest: false
      kind: kw-only
    - name: verbosity
      default: '0'
      rest: false
      kind: kw-only
    - name: motd_display
      default: None
      rest: false
      kind: kw-only
    - name: coffee
      default: 'False'
      rest: false
      kind: kw-only
    - name: auto_tls
      default: 'False'
      rest: false
      kind: kw-only
    - name: single_process
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.purge_tasks
  kind: method
  ns: sanic
  description: |-
    Purges completed and cancelled tasks from the task registry.

    This method iterates through the task registry, identifying any tasks
    that are either done or cancelled, and then removes those tasks,
    leaving only the pending tasks in the registry.
  summary: Purges completed and cancelled tasks from the task registry
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.put
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **PUT** HTTP method.

    Args:
        uri (str): URL to be tagged to PUT method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Whether or not to stream the request body.
            Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **PUT** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.refresh
  kind: method
  ns: sanic
  description: |-
    Refresh the application instance. **This is used internally by Sanic**.

    .. warning::
        This method is intended for internal use only and should not be
        called directly.

    Args:
        passthru (Optional[Dict[str, Any]], optional): Optional dictionary
            of attributes to pass through to the new instance. Defaults to
            `None`.

    Returns:
        Sanic: The refreshed application instance.
  summary: Refresh the application instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: passthru
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.register_app
  kind: function
  ns: sanic
  description: |-
    Register a Sanic instance with the class registry.

    This method adds a Sanic application instance to the class registry,
    which is used for tracking all instances of the application. It is
    usually used internally, but can be used to register an application
    that may have otherwise been created outside of the class registry.

    Args:
        app (Sanic): The Sanic instance to be registered.

    Raises:
        SanicException: If the app is not an instance of Sanic or if the
            name of the app is already in use (unless in test mode).

    Examples:
        ```python
        Sanic.register_app(my_app)
        ```
  summary: Register a Sanic instance with the class registry
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.register_listener
  kind: method
  ns: sanic
  description: |-
    Register the listener for a given event.

    Args:
        listener (Callable): The listener to register.
        event (str): The event to listen for.

    Returns:
        Callable: The listener that was registered.
  summary: Register the listener for a given event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.register_middleware
  kind: method
  ns: sanic
  description: |-
    Register a middleware to be called before a request is handled.

    Args:
        middleware (Callable): A callable that takes in a request.
        attach_to (str): Whether to attach to request or response.
            Defaults to `'request'`.
        priority (int): The priority level of the middleware.
            Lower numbers are executed first. Defaults to `0`.

    Returns:
        Union[Callable, Callable[[Callable], Callable]]: The decorated
            middleware function or a partial function depending on how
            the method was called.
  summary: Register a middleware to be called before a request is handled
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: null
      rest: false
    - kind: positional
      name: attach_to
      default: request
      rest: false
    - name: priority
      default: <Default>
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.register_named_middleware
  kind: method
  ns: sanic
  description: |-
    Used to register named middleqare (middleware typically on blueprints)

    Args:
        middleware (Callable): A callable that takes in a request.
        route_names (Iterable[str]): The route names to attach the
            middleware to.
        attach_to (str): Whether to attach to request or response.
            Defaults to `'request'`.
        priority (int): The priority level of the middleware.
            Lower numbers are executed first. Defaults to `0`.

    Returns:
        Union[Callable, Callable[[Callable], Callable]]: The decorated
            middleware function or a partial function depending on how
            the method was called.
  summary: Used to register named middleqare (middleware typically on blueprints)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: null
      rest: false
    - kind: positional
      name: route_names
      default: null
      rest: false
    - kind: positional
      name: attach_to
      default: request
      rest: false
    - name: priority
      default: <Default>
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.reload_dirs
  kind: property
  ns: sanic
  description: |-
    The directories that are monitored for auto-reload.

    Returns:
        Set[str]: The set of directories that are monitored for
            auto-reload.
  summary: The directories that are monitored for auto-reload
  signatures: null
  inherits_from: null
- name: Sanic.reload_process_start
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the reload_process_start event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This is similar to the main_process_start event,
    except that it is fired only when the reload process is started.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.reload_process_start
        async def on_reload_process_start(app: Sanic):
            print("Reload process started")
        ```
  summary: Decorator for registering a listener for the reload_process_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.reload_process_stop
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the reload_process_stop event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This is similar to the main_process_stop event,
    except that it is fired only when the reload process is stopped.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.reload_process_stop
        async def on_reload_process_stop(app: Sanic):
            print("Reload process stopped")
        ```
  summary: Decorator for registering a listener for the reload_process_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.report_exception
  kind: method
  ns: sanic
  description: |-
    Register a handler to report exceptions.

    A convenience method to register a handler for the signal that
    is emitted when an exception occurs. It is typically used to
    report exceptions to an external service.

    It is equivalent to:

    ```python
    @app.signal(Event.SERVER_EXCEPTION_REPORT)
    async def report(exception):
        await do_something_with_error(exception)
    ```

    Args:
        handler (Callable[[Sanic, Exception], Coroutine[Any, Any, None]]):
            The handler to register.

    Returns:
        Callable[[Sanic, Exception], Coroutine[Any, Any, None]]: The
            handler that was registered.
  summary: Register a handler to report exceptions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.request_class
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.request_middleware
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.response_middleware
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.route
  kind: method
  ns: sanic
  description: |-
    Decorate a function to be registered as a route.

    Args:
        uri (str): Path of the URL.
        methods (Optional[Iterable[str]]): List or tuple of
            methods allowed.
        host (Optional[Union[str, List[str]]]): The host, if required.
        strict_slashes (Optional[bool]): Whether to apply strict slashes
            to the route.
        stream (bool): Whether to allow the request to stream its body.
        version (Optional[Union[int, str, float]]): Route specific
            versioning.
        name (Optional[str]): User-defined route name for url_for.
        ignore_body (bool): Whether the handler should ignore request
            body (e.g. `GET` requests).
        apply (bool): Apply middleware to the route.
        subprotocols (Optional[List[str]]): List of subprotocols.
        websocket (bool): Enable WebSocket support.
        unquote (bool): Unquote special characters in the URL path.
        static (bool): Enable static route.
        version_prefix (str): URL path that should be before the version
             value; default: `"/v"`.
        error_format (Optional[str]): Error format for the route.
        ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        RouteWrapper: Tuple of routes, decorated function.

    Examples:
        Using the method to define a GET endpoint:

        ```python
        @app.route("/hello")
        async def hello(request: Request):
            return text("Hello, World!")
        ```

        Adding context kwargs to the route:

        ```python
        @app.route("/greet", ctx_name="World")
        async def greet(request: Request):
            name = request.route.ctx.name
            return text(f"Hello, {name}!")
        ```
  summary: Decorate a function to be registered as a route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: None
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'False'
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: websocket
      default: 'False'
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - kind: positional
      name: static
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.router
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.run
  kind: method
  ns: sanic
  description: |-
    Run the HTTP Server and listen until keyboard interrupt or term signal. On termination, drain connections before closing.

    .. note::
        When you need control over running the Sanic instance, this is the method to use.
        However, in most cases the preferred method is to use the CLI command:

        ```sh
        sanic server:app`
        ```

    If you are using this method to run Sanic, make sure you do the following:

    1. Use `if __name__ == "__main__"` to guard the code.
    2. Do **NOT** define the app instance inside the `if` block.

    See [Dynamic Applications](/en/guide/deployment/app-loader) for more information about the second point.

    Args:
        host (Optional[str]): Address to host on.
        port (Optional[int]): Port to host on.
        dev (bool): Run the server in development mode.
        debug (bool): Enables debug output (slows server).
        auto_reload (Optional[bool]): Reload app whenever its source code is changed.
            Enabled by default in debug mode.
        version (HTTPVersion): HTTP Version.
        ssl (Union[None, SSLContext, dict, str, list, tuple]): SSLContext, or location of certificate and key
            for SSL encryption of worker(s).
        sock (Optional[socket]): Socket for the server to accept connections from.
        workers (int): Number of processes received before it is respected.
        protocol (Optional[Type[Protocol]]): Subclass of asyncio Protocol class.
        backlog (int): A number of unaccepted connections that the system will allow
            before refusing new connections.
        register_sys_signals (bool): Register SIG* events.
        access_log (Optional[bool]): Enables writing access logs (slows server).
        unix (Optional[str]): Unix socket to listen on instead of TCP port.
        loop (Optional[AbstractEventLoop]): AsyncIO event loop.
        reload_dir (Optional[Union[List[str], str]]): Directory to watch for code changes, if auto_reload is True.
        noisy_exceptions (Optional[bool]): Log exceptions that are normally considered to be quiet/silent.
        motd (bool): Display Message of the Day.
        fast (bool): Enable fast mode.
        verbosity (int): Verbosity level.
        motd_display (Optional[Dict[str, str]]): Customize Message of the Day display.
        auto_tls (bool): Enable automatic TLS certificate handling.
        single_process (bool): Enable single process mode.

    Returns:
        None

    Raises:
        RuntimeError: Raised when attempting to serve HTTP/3 as a secondary server.
        RuntimeError: Raised when attempting to use both `fast` and `workers`.
        RuntimeError: Raised when attempting to use `single_process` with `fast`, `workers`, or `auto_reload`.
        TypeError: Raised when attempting to use `loop` with `create_server`.
        ValueError: Raised when `PROXIES_COUNT` is negative.

    Examples:
        ```python
        from sanic import Sanic, Request, json

        app = Sanic("TestApp")


        @app.get("/")
        async def handler(request: Request):
            return json({"foo": "bar"})


        if __name__ == "__main__":
            app.run(port=9999, dev=True)
        ```
  summary: Run the HTTP Server and listen until keyboard interrupt or term signal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: port
      default: None
      rest: false
    - name: dev
      default: 'False'
      rest: false
      kind: kw-only
    - name: debug
      default: 'False'
      rest: false
      kind: kw-only
    - name: auto_reload
      default: None
      rest: false
      kind: kw-only
    - name: version
      default: '1'
      rest: false
      kind: kw-only
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: workers
      default: '1'
      rest: false
      kind: kw-only
    - name: protocol
      default: None
      rest: false
      kind: kw-only
    - name: backlog
      default: '100'
      rest: false
      kind: kw-only
    - name: register_sys_signals
      default: 'True'
      rest: false
      kind: kw-only
    - name: access_log
      default: None
      rest: false
      kind: kw-only
    - name: unix
      default: None
      rest: false
      kind: kw-only
    - name: loop
      default: None
      rest: false
      kind: kw-only
    - name: reload_dir
      default: None
      rest: false
      kind: kw-only
    - name: noisy_exceptions
      default: None
      rest: false
      kind: kw-only
    - name: motd
      default: 'True'
      rest: false
      kind: kw-only
    - name: fast
      default: 'False'
      rest: false
      kind: kw-only
    - name: verbosity
      default: '0'
      rest: false
      kind: kw-only
    - name: motd_display
      default: None
      rest: false
      kind: kw-only
    - name: auto_tls
      default: 'False'
      rest: false
      kind: kw-only
    - name: single_process
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.run_delayed_task
  kind: method
  ns: sanic
  description: |-
    Executes a delayed task within the context of a given app and loop.

    This method prepares a given task by invoking the app's private
    `_prep_task` method and then awaits the execution of the prepared task.

    Args:
        app (Any): The application instance on which the task will
            be executed.
        loop (AbstractEventLoop): The event loop where the task will
            be scheduled.
        task (Task[Any]): The task function that will be prepared
            and executed.

    Returns:
        None
  summary: Executes a delayed task within the context of a given app and loop
  signatures:
  - - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: loop
      default: null
      rest: false
    - kind: positional
      name: task
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.serve
  kind: function
  ns: sanic
  description: |-
    Serve one or more Sanic applications.

    This is the main entry point for running Sanic applications. It
    should be called in the `if __name__ == "__main__"` block.

    Args:
        primary (Optional[Sanic], optional): The primary Sanic application
            to serve. Defaults to `None`.
        app_loader (Optional[AppLoader], optional): An AppLoader instance
            to use for loading applications. Defaults to `None`.
        factory (Optional[Callable[[], Sanic]], optional): A factory
            function to use for loading applications. Defaults to `None`.

    Raises:
        RuntimeError: Raised when no applications are found.
        RuntimeError: Raised when no server information is found for the
            primary application.
        RuntimeError: Raised when attempting to use `loop` with
            `create_server`.
        RuntimeError: Raised when attempting to use `single_process` with
            `fast`, `workers`, or `auto_reload`.
        RuntimeError: Raised when attempting to serve HTTP/3 as a
            secondary server.
        RuntimeError: Raised when attempting to use both `fast` and
            `workers`.
        TypeError: Raised when attempting to use `loop` with
            `create_server`.
        ValueError: Raised when `PROXIES_COUNT` is negative.

    Examples:
        ```python
        if __name__ == "__main__":
            app.prepare()
            Sanic.serve()
        ```
  summary: Serve one or more Sanic applications
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: primary
      default: None
      rest: false
    - name: app_loader
      default: None
      rest: false
      kind: kw-only
    - name: factory
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.serve_location
  kind: property
  ns: sanic
  description: |-
    Retrieve the server location.

    Returns:
        str: The server location.
  summary: Retrieve the server location
  signatures: null
  inherits_from: null
- name: Sanic.serve_single
  kind: function
  ns: sanic
  description: |-
    Serve a single process of a Sanic application.

    Similar to `serve`, but only serves a single process. When used,
    certain features are disabled, such as `fast`, `workers`,
    `multiplexer`, `auto_reload`, and the Inspector. It is almost
    never needed to use this method directly. Instead, you should
    use the CLI:

    ```sh
    sanic app.sanic:app --single-process
    ```

    Or, if you need to do it programmatically, you should use the
    `single_process` argument of `run`:

    ```python
    app.run(single_process=True)
    ```

    Args:
        primary (Optional[Sanic], optional): The primary Sanic application
            to serve. Defaults to `None`.

    Raises:
        RuntimeError: Raised when no applications are found.
        RuntimeError: Raised when no server information is found for the
            primary application.
        RuntimeError: Raised when attempting to serve HTTP/3 as a
            secondary server.
        RuntimeError: Raised when attempting to use both `fast` and
            `workers`.
        ValueError: Raised when `PROXIES_COUNT` is negative.
  summary: Serve a single process of a Sanic application
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: primary
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.set_serving
  kind: method
  ns: sanic
  description: |-
    Set the serving state of the application.

    This method is used to set the serving state of the application.
    It is used internally by Sanic and should not typically be called
    manually.

    Args:
        serving (bool): Whether the application is serving.
  summary: Set the serving state of the application
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: serving
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.setup_loop
  kind: method
  ns: sanic
  description: |-
    Set up the event loop.

    An internal method that sets up the event loop to uvloop if
    possible, or a Windows selector loop if on Windows.

    Returns:
        None
  summary: Set up the event loop
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.shared_ctx
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.should_auto_reload
  kind: function
  ns: sanic
  description: |-
    Check if any applications have auto-reload enabled.

    Returns:
        bool: `True` if any applications have auto-reload enabled, else
            `False`.
  summary: Check if any applications have auto-reload enabled
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.shutdown_tasks
  kind: method
  ns: sanic
  description: |-
    Cancel all tasks except the server task.

    This method is used to cancel all tasks except the server task. It
    iterates through the task registry, cancelling all tasks except the
    server task, and then waits for the tasks to complete. Optionally, you
    can provide a timeout and an increment to control how long the method
    will wait for the tasks to complete.

    Args:
        timeout (Optional[float]): The amount of time to wait for the tasks
            to complete. Defaults to `None`.
        increment (float): The amount of time to wait between checks for
            whether the tasks have completed. Defaults to `0.1`.
  summary: Cancel all tasks except the server task
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - kind: positional
      name: increment
      default: '0.1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.signal
  kind: method
  ns: sanic
  description: |-
    For creating a signal handler, used similar to a route handler:

    .. code-block:: python

        @app.signal("foo.bar.<thing>")
        async def signal_handler(thing, **kwargs):
            print(f"[signal_handler] {thing=}", kwargs)

    :param event: Representation of the event in ``one.two.three`` form
    :type event: str
    :param apply: For lazy evaluation, defaults to ``True``
    :type apply: bool, optional
    :param condition: For use with the ``condition`` argument in dispatch
        filtering, defaults to ``None``
    :param exclusive: When ``True``, the signal can only be dispatched
        when the condition has been met. When ``False``, the signal can
        be dispatched either with or without it. *THIS IS INAPPLICABLE TO
        BLUEPRINT SIGNALS. THEY ARE ALWAYS NON-EXCLUSIVE*, defaults
        to ``True``
    :type condition: Dict[str, Any], optional
  summary: 'For creating a signal handler, used similar to a route handler:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - name: apply
      default: 'True'
      rest: false
      kind: kw-only
    - name: condition
      default: None
      rest: false
      kind: kw-only
    - name: exclusive
      default: 'True'
      rest: false
      kind: kw-only
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.signal_router
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.signalize
  kind: method
  ns: sanic
  description: |-
    Finalize the signal handling configuration for the Sanic application.

    This method completes the signal handling setup by calling the signal
    router's finalize method. If the application is not in test mode,
    any finalization errors will be raised.

    Finalization consists of identifying defined signaliz and optimizing
    Sanic's performance to meet the application's specific needs. If
    you are manually adding signals, after Sanic has started, you will
    typically want to use the  `amend` context manager rather than
    calling this method directly.

    .. note::
        This method is usually called internally during the server setup
        process and does not typically need to be invoked manually.

    Args:
        allow_fail_builtin (bool, optional): If set to `True`, will allow
            built-in signals to fail during the finalization process.
            Defaults to `True`.

    Raises:
        FinalizationError: If there is an error during the signal
            finalization process, and the application is not in test mode.

    Example:
        ```python
        app.signalize(allow_fail_builtin=False)
        ```
  summary: Finalize the signal handling configuration for the Sanic application
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: allow_fail_builtin
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.sock
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.start_method
  kind: property
  ns: sanic
  description: |-
    It is used to replace `None` or `object()` as a sentinel
    that represents a default value. Sometimes we want to set
    a value to `None` so we cannot use `None` to represent the
    default value, and `object()` is hard to be typed.
  summary: It is used to replace `None` or `object()` as a sentinel
  signatures: null
  inherits_from: null
- name: Sanic.state
  kind: property
  ns: sanic
  description: |-
    The application state.

    Returns:
        ApplicationState: The current state of the application.
  summary: The application state
  signatures: null
  inherits_from: null
- name: Sanic.static
  kind: method
  ns: sanic
  description: |-
    Register a root to serve files from. The input can either be a file or a directory.

    This method provides an easy and simple way to set up the route necessary to serve static files.

    Args:
        uri (str): URL path to be used for serving static content.
        file_or_directory (Union[PathLike, str]): Path to the static file
            or directory with static files.
        pattern (str, optional): Regex pattern identifying the valid
            static files. Defaults to `r"/?.+"`.
        use_modified_since (bool, optional): If true, send file modified
            time, and return not modified if the browser's matches the
            server's. Defaults to `True`.
        use_content_range (bool, optional): If true, process header for
            range requests and sends  the file part that is requested.
            Defaults to `False`.
        stream_large_files (Union[bool, int], optional): If `True`, use
            the `StreamingHTTPResponse.file_stream` handler rather than
            the `HTTPResponse.file handler` to send the file. If this
            is an integer, it represents the threshold size to switch
            to `StreamingHTTPResponse.file_stream`. Defaults to `False`,
            which means that the response will not be streamed.
        name (str, optional): User-defined name used for url_for.
            Defaults to `"static"`.
        host (Optional[str], optional): Host IP or FQDN for the
            service to use.
        strict_slashes (Optional[bool], optional): Instruct Sanic to
            check if the request URLs need to terminate with a slash.
        content_type (Optional[str], optional): User-defined content type
            for header.
        apply (bool, optional): If true, will register the route
            immediately. Defaults to `True`.
        resource_type (Optional[str], optional): Explicitly declare a
            resource to be a `"file"` or a `"dir"`.
        index (Optional[Union[str, Sequence[str]]], optional): When
            exposing against a directory, index is  the name that will
            be served as the default file. When multiple file names are
            passed, then they will be tried in order.
        directory_view (bool, optional): Whether to fallback to showing
            the directory viewer when exposing a directory. Defaults
            to `False`.
        directory_handler (Optional[DirectoryHandler], optional): An
            instance of DirectoryHandler that can be used for explicitly
            controlling and subclassing the behavior of the default
            directory handler.

    Returns:
        List[sanic.router.Route]: Routes registered on the router.

    Examples:
        Serving a single file:
        ```python
        app.static('/foo', 'path/to/static/file.txt')
        ```

        Serving all files from a directory:
        ```python
        app.static('/static', 'path/to/static/directory')
        ```

        Serving large files with a specific threshold:
        ```python
        app.static('/static', 'path/to/large/files', stream_large_files=1000000)
        ```
  summary: Register a root to serve files from
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: file_or_directory
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: /?.+
      rest: false
    - kind: positional
      name: use_modified_since
      default: 'True'
      rest: false
    - kind: positional
      name: use_content_range
      default: 'False'
      rest: false
    - kind: positional
      name: stream_large_files
      default: 'False'
      rest: false
    - kind: positional
      name: name
      default: static
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: resource_type
      default: None
      rest: false
    - kind: positional
      name: index
      default: None
      rest: false
    - kind: positional
      name: directory_view
      default: 'False'
      rest: false
    - kind: positional
      name: directory_handler
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.stop
  kind: method
  ns: sanic
  description: |-
    This kills the Sanic server, cleaning up after itself.

    Args:
        terminate (bool): Force kill all requests immediately without
            allowing them to finish processing.
        unregister (bool): Unregister the app from the global registry.

    Returns:
        None
  summary: This kills the Sanic server, cleaning up after itself
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: terminate
      default: 'True'
      rest: false
    - kind: positional
      name: unregister
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.strict_slashes
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.tasks
  kind: property
  ns: sanic
  description: |-
    The tasks that are currently registered with the application.

    Returns:
        Iterable[Task[Any]]: The tasks that are currently registered with
            the application.
  summary: The tasks that are currently registered with the application
  signatures: null
  inherits_from: null
- name: Sanic.test_client
  kind: property
  ns: sanic
  description: |-
    A testing client that uses httpx and a live running server to reach into the application to execute handlers.

    This property is available if the `sanic-testing` package is installed.

    See [Test Clients](/en/plugins/sanic-testing/clients#wsgi-client-sanictestclient) for details.

    Returns:
        SanicTestClient: A testing client from the `sanic-testing` package.
  summary: A testing client that uses httpx and a live running server to reach into the application to execute handlers
  signatures: null
  inherits_from: null
- name: Sanic.test_mode
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Sanic.unregister_app
  kind: function
  ns: sanic
  description: |-
    Unregister a Sanic instance from the class registry.

    This method removes a previously registered Sanic application instance
    from the class registry. This can be useful for cleanup purposes,
    especially in testing or when an app instance is no longer needed. But,
    it is typically used internally and should not be needed in most cases.

    Args:
        app (Sanic): The Sanic instance to be unregistered.

    Raises:
        SanicException: If the app is not an instance of Sanic.

    Examples:
        ```python
        Sanic.unregister_app(my_app)
        ```
  summary: Unregister a Sanic instance from the class registry
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.update_config
  kind: method
  ns: sanic
  description: |-
    Update the application configuration.

    This method is used to update the application configuration. It can
    accept a configuration object, a dictionary, or a path to a file that
    contains a configuration object or dictionary.

    See [Configuration](/en/guide/deployment/configuration) for details.

    Args:
        config (Union[bytes, str, dict, Any]): The configuration object,
            dictionary, or path to a configuration file.
  summary: Update the application configuration
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.url_for
  kind: method
  ns: sanic
  description: |-
    Build a URL based on a view name and the values provided.

    This method constructs URLs for a given view name, taking into account
    various special keyword arguments that can be used to modify the resulting
    URL. It can handle internal routing as well as external URLs with different
    schemes.

    There are several special keyword arguments that can be used to modify
    the URL that is built. They each begin with an underscore. They are:

    - `_anchor`
    - `_external`
    - `_host`
    - `_server`
    - `_scheme`

    Args:
        view_name (str): String referencing the view name.
        _anchor (str): Adds an "#anchor" to the end.
        _scheme (str): Should be either "http" or "https", default is "http".
        _external (bool): Whether to return the path or a full URL with scheme and host.
        _host (str): Used when one or more hosts are defined for a route to tell Sanic which to use.
        _server (str): If not using "_host", this will be used for defining the hostname of the URL.
        **kwargs: Keys and values that are used to build request parameters and
                query string arguments.

    Raises:
        URLBuildError: If there are issues with constructing the URL.

    Returns:
        str: The built URL.

    Examples:
        Building a URL for a specific view with parameters:
        ```python
        url_for('view_name', param1='value1', param2='value2')
        # /view-name?param1=value1&param2=value2
        ```

        Creating an external URL with a specific scheme and anchor:
        ```python
        url_for('view_name', _scheme='https', _external=True, _anchor='section1')
        # https://example.com/view-name#section1
        ```

        Creating a URL with a specific host:
        ```python
        url_for('view_name', _host='subdomain.example.com')
        # http://subdomain.example.com/view-name
  summary: Build a URL based on a view name and the values provided
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: view_name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.websocket
  kind: method
  ns: sanic
  description: |-
    Decorate a function to be registered as a websocket route.

    Args:
        uri (str): Path of the URL.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN details.
        strict_slashes (Optional[bool]): If the API endpoint needs to
            terminate with a `"/"` or not.
        subprotocols (Optional[List[str]]): Optional list of str with
            supported subprotocols.
        version (Optional[Union[int, str, float]]): WebSocket
            protocol version.
        name (Optional[str]): A unique name assigned to the URL so that
            it can be used with url_for.
        apply (bool): If set to False, it doesn't apply the route to the
            app. Default is `True`.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with
            a `ctx_* prefix` will be appended to the route
            context (`route.ctx`).

    Returns:
        tuple: Tuple of routes, decorated function.
  summary: Decorate a function to be registered as a websocket route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic.websocket_enabled
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sanic.websocket_tasks
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Config
  kind: class
  ns: sanic
  description: |-
    Configuration object for Sanic.

    You can use this object to both: (1) configure how Sanic will operate, and
    (2) manage your application's custom configuration values.
  summary: Configuration object for Sanic
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: defaults
      default: None
      rest: false
    - kind: positional
      name: env_prefix
      default: SANIC_
      rest: false
    - kind: positional
      name: keep_alive
      default: None
      rest: false
    - name: converters
      default: None
      rest: false
      kind: kw-only
    - type: Config
      kind: return
  inherits_from:
  - <class 'dict'>
- name: Config.FALLBACK_ERROR_FORMAT
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Config.clear
  kind: callable
  ns: sanic
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: Config.copy
  kind: callable
  ns: sanic
  description: D.copy() -> a shallow copy of D
  summary: D
  signatures: null
  inherits_from: null
- name: Config.get
  kind: callable
  ns: sanic
  description: Return the value for key if key is in the dictionary, else default.
  summary: Return the value for key if key is in the dictionary, else default
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.items
  kind: callable
  ns: sanic
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures: null
  inherits_from: null
- name: Config.keys
  kind: callable
  ns: sanic
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: Config.load
  kind: method
  ns: sanic
  description: |-
    Update app.config.

    .. note::

        Only upper case settings are considered

    See [Configuration](/en/guide/deployment/configuration) for more details.

    Args:
        config (Union[bytes, str, dict, Any]): Path to py file holding
            settings, dict holding settings, or any object holding
            settings.

    Examples:
        You can upload app config by providing path to py file
        holding settings.

        ```python
        # /some/py/file
        A = 1
        B = 2
        ```

        ```python
        config.update_config("${some}/py/file")
        ```

        Yes you can put environment variable here, but they must be provided
        in format: ``${some_env_var}``, and mark that ``$some_env_var`` is
        treated as plain string.

        You can upload app config by providing dict holding settings.

        ```python
        d = {"A": 1, "B": 2}
        config.update_config(d)
        ```

        You can upload app config by providing any object holding settings,
        but in such case config.__dict__ will be used as dict holding settings.

        ```python
        class C:
            A = 1
            B = 2

        config.update_config(C)
        ```
  summary: Update app
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.load_environment_vars
  kind: method
  ns: sanic
  description: |-
    Load environment variables into the config.

    Looks for prefixed environment variables and applies them to the
    configuration if present. This is called automatically when Sanic
    starts up to load environment variables into config. Environment
    variables should start with the defined prefix and should only
    contain uppercase letters.

    It will automatically hydrate the following types:

    - ``int``
    - ``float``
    - ``bool``

    Anything else will be imported as a ``str``. If you would like to add
    additional types to this list, you can use
    :meth:`sanic.config.Config.register_type`. Just make sure that they
    are registered before you instantiate your application.

    You likely won't need to call this method directly.

    See [Configuration](/en/guide/deployment/configuration) for more details.

    Args:
        prefix (str): The prefix to use when looking for environment
            variables. Defaults to `SANIC_`.


    Examples:
        ```python
        # Environment variables
        # SANIC_SERVER_NAME=example.com
        # SANIC_SERVER_PORT=9999
        # SANIC_SERVER_AUTORELOAD=true

        # Python
        app.config.load_environment_vars()
        ```
  summary: Load environment variables into the config
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: SANIC_
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.pop
  kind: callable
  ns: sanic
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures: null
  inherits_from: null
- name: Config.popitem
  kind: callable
  ns: sanic
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.register_type
  kind: method
  ns: sanic
  description: |-
    Register a custom type converter.

    Allows for adding custom function to cast from a string value to any
    other type. The function should raise ValueError if it is not the
    correct type.

    Args:
        converter (Callable[[str], Any]): A function that takes a string
            and returns a value of any type.

    Examples:
        ```python
        def my_converter(value: str) -> Any:
            # Do something to convert the value
            return value

        config.register_type(my_converter)
        ```
  summary: Register a custom type converter
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: converter
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.setdefault
  kind: callable
  ns: sanic
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.update
  kind: method
  ns: sanic
  description: |-
    Update the config with new values.

    This method will update the config with the values from the provided
    `other` objects, and then update the config with the provided
    `kwargs`. The `other` objects can be any object that can be converted
    to a dictionary, such as a `dict`, `Config` object, or `str` path to a
    Python file. The `kwargs` must be a dictionary of key-value pairs.

    .. note::
        Only upper case settings are considered

    Args:
        *other: Any number of objects that can be converted to a
            dictionary.
        **kwargs: Any number of key-value pairs.

    Raises:
        AttributeError: If a key is not in the config.

    Examples:
        ```python
        config.update(
            {"A": 1, "B": 2},
            {"C": 3, "D": 4},
            E=5,
            F=6,
        )
        ```
  summary: Update the config with new values
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.update_config
  kind: method
  ns: sanic
  description: |-
    Update app.config.

    .. note::

        Only upper case settings are considered

    See [Configuration](/en/guide/deployment/configuration) for more details.

    Args:
        config (Union[bytes, str, dict, Any]): Path to py file holding
            settings, dict holding settings, or any object holding
            settings.

    Examples:
        You can upload app config by providing path to py file
        holding settings.

        ```python
        # /some/py/file
        A = 1
        B = 2
        ```

        ```python
        config.update_config("${some}/py/file")
        ```

        Yes you can put environment variable here, but they must be provided
        in format: ``${some_env_var}``, and mark that ``$some_env_var`` is
        treated as plain string.

        You can upload app config by providing dict holding settings.

        ```python
        d = {"A": 1, "B": 2}
        config.update_config(d)
        ```

        You can upload app config by providing any object holding settings,
        but in such case config.__dict__ will be used as dict holding settings.

        ```python
        class C:
            A = 1
            B = 2

        config.update_config(C)
        ```
  summary: Update app
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Config.values
  kind: callable
  ns: sanic
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures: null
  inherits_from: null
- name: Blueprint
  kind: class
  ns: sanic
  description: |-
    A logical collection of URLs that consist of a similar logical domain.

    A Blueprint object is the main tool for grouping functionality and similar endpoints. It allows the developer to
    organize routes, exception handlers, middleware, and other web functionalities into separate, modular groups.

    See [Blueprints](/en/guide/best-practices/blueprints) for more information.

    Args:
        name (str): The name of the blueprint.
        url_prefix (Optional[str]): The URL prefix for all routes defined on this blueprint.
        host (Optional[Union[List[str], str]]): Host or list of hosts that this blueprint should respond to.
        version (Optional[Union[int, str, float]]): Version number of the API implemented by this blueprint.
        strict_slashes (Optional[bool]): Whether or not the URL should end with a slash.
        version_prefix (str): Prefix for the version. Default is "/v".
  summary: A logical collection of URLs that consist of a similar logical domain
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: url_prefix
      default: None
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - type: Blueprint
      kind: return
  inherits_from:
  - <class 'sanic.base.root.BaseSanic'>
  - <class 'sanic.mixins.routes.RouteMixin'>
  - <class 'sanic.mixins.static.StaticMixin'>
  - <class 'sanic.mixins.base.BaseMixin'>
  - <class 'sanic.mixins.middleware.MiddlewareMixin'>
  - <class 'sanic.mixins.listeners.ListenerMixin'>
  - <class 'sanic.mixins.exceptions.ExceptionMixin'>
  - <class 'sanic.mixins.signals.SignalMixin'>
- name: Blueprint.add_route
  kind: method
  ns: sanic
  description: |-
    A helper method to register class-based view or functions as a handler to the application url routes.

    Args:
        handler (RouteHandler): Function or class-based view used as a route handler.
        uri (str): Path of the URL.
        methods (Iterable[str]): List or tuple of methods allowed; these are overridden if using an HTTPMethodView.
        host (Optional[Union[str, List[str]]]): Hostname or hostnames to match for this route.
        strict_slashes (Optional[bool]): If set, a route's slashes will be strict. E.g. `/foo` will not match `/foo/`.
        version (Optional[Union[int, str, float]]): Version of the API for this route.
        name (Optional[str]): User-defined route name for `url_for`.
        stream (bool): Boolean specifying if the handler is a stream handler.
        version_prefix (str): URL path that should be before the version value; default: ``/v``.
        error_format (Optional[str]): Custom error format string.
        unquote (bool): Boolean specifying if the handler requires unquoting.
        ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*` prefix will be appended to the route context (``route.ctx``). See below for examples.

    Returns:
        RouteHandler: The route handler.

    Examples:
        ```python
        from sanic import Sanic, text

        app = Sanic("test")

        async def handler(request):
            return text("OK")

        app.add_route(handler, "/test", methods=["GET", "POST"])
        ```

        You can use `ctx_kwargs` to add custom context to the route. This
        can often be useful when wanting to add metadata to a route that
        can be used by other parts of the application (like middleware).

        ```python
        from sanic import Sanic, text

        app = Sanic("test")

        async def handler(request):
            return text("OK")

        async def custom_middleware(request):
            if request.route.ctx.monitor:
                do_some_monitoring()

        app.add_route(handler, "/test", methods=["GET", "POST"], ctx_monitor=True)
        app.register_middleware(custom_middleware)
  summary: A helper method to register class-based view or functions as a handler to the application url routes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: frozenset({'GET'})
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.add_signal
  kind: method
  ns: sanic
  description: |-
    Registers a signal handler for a specific event.

    Args:
        handler (Optional[Callable[..., Any]]): The function to be called
            when the event occurs. Defaults to a noop if not provided.
        event (str): The name of the event to listen for.
        condition (Optional[Dict[str, Any]]): Optional condition to filter
            the event triggering. Defaults to `None`.
        exclusive (bool): Whether or not the handler is exclusive. When
            `True`, the signal can only be dispatched when the
            `condition` has been met. *This is inapplicable to blueprint
            signals, which are **ALWAYS** non-exclusive.* Defaults
            to `True`.

    Returns:
        Callable[..., Any]: The handler that was registered.
  summary: Registers a signal handler for a specific event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: condition
      default: None
      rest: false
    - kind: positional
      name: exclusive
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.add_websocket_route
  kind: method
  ns: sanic
  description: |-
    A helper method to register a function as a websocket route.

    Args:
        handler (Callable): A callable function or instance of a class
            that can handle the websocket request.
        uri (str): URL path that will be mapped to the websocket handler.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN details.
        strict_slashes (Optional[bool]): If the API endpoint needs to
            terminate with a `"/"` or not.
        subprotocols (Optional[List[str]]): Subprotocols to be used with
            websocket handshake.
        version (Optional[Union[int, str, float]]): Versioning information.
        name (Optional[str]): A unique name assigned to the URL.
        version_prefix (str): URL path before the version value.
            Defaults to `"/v"`.
        error_format (Optional[str]): Format for error handling.
        **ctx_kwargs (Any): Keyword arguments beginning with `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        Callable: Object passed as the handler.
  summary: A helper method to register a function as a websocket route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.after_reload_trigger
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the after_reload_trigger event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This event is fired after the reload process
    triggers the reload. A change event has been detected and the reload
    process has been triggered.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_reload_trigger
        async def on_after_reload_trigger(app: Sanic, changed: set[str]):
            print("After reload trigger, changed files: ", changed)
        ```
  summary: Decorator for registering a listener for the after_reload_trigger event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.after_server_start
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the after_server_start event.

    This event is fired on all worker processes. You should typically
    use this event to run background tasks, or perform other actions that
    are not directly related to handling requests. In theory, it is
    possible that some requests may be handled before this event is fired,
    so you should not use this event to initialize resources that are
    required for handling requests.

    A common use case for this event is to start a background task that
    periodically performs some action, such as clearing a cache or
    performing a health check.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_server_start
        async def on_after_server_start(app: Sanic):
            print("After server start")
        ```
  summary: Decorator for registering a listener for the after_server_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.after_server_stop
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the after_server_stop event.

    This event is fired on all worker processes. This event is fired
    after the server has stopped shutting down, and all requests have
    been handled. You should typically use this event to clean up
    resources that were initialized in the before_server_start event.

    A common use case for this event is to close a database connection
    pool, or to close a cache client.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_server_stop
        async def on_after_server_stop(app: Sanic):
            print("After server stop")
        ```
  summary: Decorator for registering a listener for the after_server_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.all_exceptions
  kind: method
  ns: sanic
  description: |-
    Enables the process of creating a global exception handler as a convenience.

    This following two examples are equivalent:

    ```python
    @app.exception(Exception)
    async def handler(request: Request, exception: Exception) -> HTTPResponse:
        return text(f"Exception raised: {exception}")
    ```

    ```python
    @app.all_exceptions
    async def handler(request: Request, exception: Exception) -> HTTPResponse:
        return text(f"Exception raised: {exception}")
    ```

    Args:
        handler (Callable[..., Any]): A coroutine function to handle exceptions.

    Returns:
        Callable[..., Any]: A decorated method to handle global exceptions for
            any route registered under this blueprint.
  summary: Enables the process of creating a global exception handler as a convenience
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.apps
  kind: property
  ns: sanic
  description: |-
    Get the set of apps that this blueprint is registered to.

    Returns:
        Set[Sanic]: Set of apps that this blueprint is registered to.

    Raises:
        SanicException: If the blueprint has not yet been registered to
            an app.
  summary: Get the set of apps that this blueprint is registered to
  signatures: null
  inherits_from: null
- name: Blueprint.before_reload_trigger
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the before_reload_trigger event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This event is fired before the reload process
    triggers the reload. A change event has been detected and the reload
    process is about to be triggered.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_reload_trigger
        async def on_before_reload_trigger(app: Sanic):
            print("Before reload trigger")
        ```
  summary: Decorator for registering a listener for the before_reload_trigger event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.before_server_start
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the before_server_start event.

    This event is fired on all worker processes. You should typically
    use this event to initialize resources that are global in nature, or
    will be shared across requests and various parts of the application.

    A common use case for this event is to initialize a database connection
    pool, or to initialize a cache client.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_server_start
        async def on_before_server_start(app: Sanic):
            print("Before server start")
        ```
  summary: Decorator for registering a listener for the before_server_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.before_server_stop
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the before_server_stop event.

    This event is fired on all worker processes. This event is fired
    before the server starts shutting down. You should not use this event
    to perform any actions that are required for handling requests, as
    some requests may continue to be handled after this event is fired.

    A common use case for this event is to stop a background task that
    was started in the after_server_start event.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_server_stop
        async def on_before_server_stop(app: Sanic):
            print("Before server stop")
        ```
  summary: Decorator for registering a listener for the before_server_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.catch_exception
  kind: method
  ns: sanic
  description: |-
    Register an exception handler for logging or processing.

    This method allows the registration of a custom exception handler to
    catch and process exceptions that occur in the application. Unlike a
    typical exception handler that might modify the response to the client,
    this is intended to capture exceptions for logging or other internal
    processing, such as sending them to an error reporting utility.

    Args:
        handler (Callable): A coroutine function that takes the application
            instance and the exception as arguments. It will be called when
            an exception occurs within the application's lifecycle.

    Example:
        ```python
        app = Sanic("TestApp")

        @app.catch_exception
        async def report_exception(app: Sanic, exception: Exception):
            logging.error(f"An exception occurred: {exception}")

            # Send to an error reporting service
            await error_service.report(exception)

        # Any unhandled exceptions within the application will now be
        # logged and reported to the error service.
        ```
  summary: Register an exception handler for logging or processing
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.copied_from
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.copy
  kind: method
  ns: sanic
  description: |-
    Copy a blueprint instance with some optional parameters to override the values of attributes in the old instance.

    Args:
        name (str): Unique name of the blueprint.
        url_prefix (Optional[Union[str, Default]]): URL to be prefixed before all route URLs.
        version (Optional[Union[int, str, float, Default]]): Blueprint version.
        version_prefix (Union[str, Default]): The prefix of the version number shown in the URL.
        allow_route_overwrite (Union[bool, Default]): Whether to allow route overwrite or not.
        strict_slashes (Optional[Union[bool, Default]]): Enforce the API URLs are requested with a trailing "/*".
        with_registration (bool): Whether to register the new blueprint instance with Sanic apps that were registered with the old instance or not. Default is `True`.
        with_ctx (bool): Whether the ``ctx`` will be copied or not. Default is `False`.

    Returns:
        Blueprint: A new Blueprint instance with the specified attributes.
  summary: Copy a blueprint instance with some optional parameters to override the values of attributes in the old instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: url_prefix
      default: <Default>
      rest: false
    - kind: positional
      name: version
      default: <Default>
      rest: false
    - kind: positional
      name: version_prefix
      default: <Default>
      rest: false
    - kind: positional
      name: allow_route_overwrite
      default: <Default>
      rest: false
    - kind: positional
      name: strict_slashes
      default: <Default>
      rest: false
    - kind: positional
      name: with_registration
      default: 'True'
      rest: false
    - kind: positional
      name: with_ctx
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.ctx
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.delete
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **DELETE** HTTP method.

    Args:
        uri (str): URL to be tagged to the DELETE method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for the
            service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a */*.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the Route.
        ignore_body (bool): Whether or not to ignore the body in the
            request. Defaults to `False`.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **DELETE** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.dispatch
  kind: method
  ns: sanic
  description: |-
    Dispatch a signal event

    Args:
        *args: Arguments to be passed to the signal event.
        **kwargs: Keyword arguments to be passed to the signal event.
  summary: Dispatch a signal event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.event
  kind: method
  ns: sanic
  description: |-
    Wait for a signal event to be dispatched.

    Args:
        event (str): Name of the signal event.
        timeout (Optional[Union[int, float]]): Timeout for the event to be
            dispatched.
        condition: If provided, method will only return when the signal
            is dispatched with the given condition.

    Returns:
        Awaitable: Awaitable for the event to be dispatched.
  summary: Wait for a signal event to be dispatched
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - name: condition
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.exception
  kind: method
  ns: sanic
  description: |-
    Decorator used to register an exception handler for the current application or blueprint instance.

    This method allows you to define a handler for specific exceptions that
    may be raised within the routes of this blueprint. You can specify one
    or more exception types to catch, and the handler will be applied to
    those exceptions.

    When used on a Blueprint, the handler will only be applied to routes
    registered under that blueprint. That means they only apply to
    requests that have been matched, and the exception is raised within
    the handler function (or middleware) for that route.

    A general exception like `NotFound` should only be registered on the
    application instance, not on a blueprint.

    See [Exceptions](/en/guide/best-practices/exceptions.html) for more information.

    Args:
        exceptions (Union[Type[Exception], List[Type[Exception]]]): List of
            Python exceptions to be caught by the handler.
        apply (bool, optional): Whether the exception handler should be
            applied. Defaults to True.

    Returns:
        Callable: A decorated method to handle global exceptions for any route
            registered under this blueprint.

    Example:
        ```python
        from sanic import Blueprint, text

        bp = Blueprint('my_blueprint')

        @bp.exception(Exception)
        def handle_exception(request, exception):
            return text("Oops, something went wrong!", status=500)
        ```

        ```python
        from sanic import Sanic, NotFound, text

        app = Sanic('MyApp')

        @app.exception(NotFound)
        def ignore_404s(request, exception):
            return text(f"Yep, I totally found the page: {request.url}")
  summary: Decorator used to register an exception handler for the current application or blueprint instance
  signatures:
  - - kind: positional
      name: bp
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.exceptions
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.finalize_middleware
  kind: method
  ns: sanic
  description: |-
    Finalize the middleware configuration for the Sanic application.

    This method completes the middleware setup for the application.
    Middleware in Sanic is used to process requests globally before they
    reach individual routes or after routes have been processed.

    Finalization consists of identifying defined routes and optimizing
    Sanic's performance to meet the application's specific needs. If
    you are manually adding routes, after Sanic has started, you will
    typically want to use the `amend` context manager rather than
    calling this method directly.

    .. note::
        This method is usually called internally during the server setup
        process and does not typically need to be invoked manually.

    Example:
        ```python
        app.finalize_middleware()
        ```
  summary: Finalize the middleware configuration for the Sanic application
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.get
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **GET** HTTP method.

    Args:
        uri (str): URL to be tagged to GET method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_* prefix` will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **GET** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.group
  kind: method
  ns: sanic
  description: |-
    Group multiple blueprints (or other blueprint groups) together.

    Gropuping blueprings is a method for modularizing and organizing
    your application's code. This can be a powerful tool for creating
    reusable components, logically structuring your application code,
    and easily maintaining route definitions in bulk.

    This is the preferred way to group multiple blueprints together.

    Args:
        blueprints (Union[Blueprint, BlueprintGroup]): Blueprints to be
            registered as a group.
        url_prefix (Optional[str]): URL route to be prepended to all
            sub-prefixes. Default is `None`.
        version (Optional[Union[int, str, float]]): API Version to be
            used for Blueprint group. Default is `None`.
        strict_slashes (Optional[bool]): Indicate strict slash
            termination behavior for URL. Default is `None`.
        version_prefix (str): Prefix to be used for the version in the
            URL. Default is "/v".
        name_prefix (Optional[str]): Prefix to be used for the name of
            the blueprints in the group. Default is an empty string.

    Returns:
        BlueprintGroup: A group of blueprints.

    Example:
        The resulting group will have the URL prefixes
        `'/v2/bp1'` and `'/v2/bp2'` for bp1 and bp2, respectively.
        ```python
        bp1 = Blueprint('bp1', url_prefix='/bp1')
        bp2 = Blueprint('bp2', url_prefix='/bp2')
        group = group(bp1, bp2, version=2)
        ```
  summary: Group multiple blueprints (or other blueprint groups) together
  signatures:
  - - name: url_prefix
      default: None
      rest: false
      kind: kw-only
    - name: version
      default: None
      rest: false
      kind: kw-only
    - name: strict_slashes
      default: None
      rest: false
      kind: kw-only
    - name: version_prefix
      default: /v
      rest: false
      kind: kw-only
    - name: name_prefix
      default: null
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.head
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **HEAD** HTTP method.

    Args:
        uri (str): URL to be tagged to HEAD method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **HEAD** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.host
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.listener
  kind: method
  ns: sanic
  description: |-
    Create a listener for a specific event in the application's lifecycle.

    See [Listeners](/en/guide/basics/listeners) for more details.

    .. note::
        Overloaded signatures allow for different ways of calling this method, depending on the types of the arguments.

        Usually, it is prederred to use one of the convenience methods such as `before_server_start` or `after_server_stop` instead of calling this method directly.

        ```python
        @app.before_server_start
        async def prefered_method(_):
            ...

        @app.listener("before_server_start")
        async def not_prefered_method(_):
            ...

    Args:
        listener_or_event (Union[ListenerType[Sanic], str]): A listener function or an event name.
        event_or_none (Optional[str]): The event name to listen for if `listener_or_event` is a function. Defaults to `None`.
        apply (bool): Whether to apply the listener immediately. Defaults to `True`.
        priority (int): The priority of the listener. Defaults to `0`.

    Returns:
        Union[ListenerType[Sanic], Callable[[ListenerType[Sanic]], ListenerType[Sanic]]]: The listener or a callable that takes a listener.

    Example:
        The following code snippet shows how you can use this method as a decorator:

        ```python
        @bp.listener("before_server_start")
        async def before_server_start(app, loop):
            ...
        ```
  summary: Create a listener for a specific event in the application's lifecycle
  signatures:
  - - kind: positional
      name: bp
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.listeners
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.main_process_ready
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the main_process_ready event.

    This event is fired only on the main process and **NOT** on any
    worker processes. It is fired after the main process has started and
    the Worker Manager has been initialized (ie, you will have access to
    `app.manager` instance). The typical use case for this event is to
    add a managed process to the Worker Manager.

    See [Running custom processes](/en/guide/deployment/manager.html#running-custom-processes) and [Listeners](/en/guide/basics/listeners.html) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_ready
        async def on_main_process_ready(app: Sanic):
            print("Main process ready")
        ```
  summary: Decorator for registering a listener for the main_process_ready event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.main_process_start
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the main_process_start event.

    This event is fired only on the main process and **NOT** on any
    worker processes. You should typically use this event to initialize
    resources that are shared across workers, or to initialize resources
    that are not safe to be initialized in a worker process.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_start
        async def on_main_process_start(app: Sanic):
            print("Main process started")
        ```
  summary: Decorator for registering a listener for the main_process_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.main_process_stop
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the main_process_stop event.

    This event is fired only on the main process and **NOT** on any
    worker processes. You should typically use this event to clean up
    resources that were initialized in the main_process_start event.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_stop
        async def on_main_process_stop(app: Sanic):
            print("Main process stopped")
        ```
  summary: Decorator for registering a listener for the main_process_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.middleware
  kind: method
  ns: sanic
  description: |-
    Decorator for registering middleware.

    Decorate and register middleware to be called before a request is
    handled or after a response is created. Can either be called as
    *@app.middleware* or *@app.middleware('request')*. Although, it is
    recommended to use *@app.on_request* or *@app.on_response* instead
    for clarity and convenience.

    See [Middleware](/guide/basics/middleware) for more information.

    Args:
        middleware_or_request (Union[Callable, str]): Middleware function
            or the keyword 'request' or 'response'.
        attach_to (str, optional): When to apply the middleware;
            either 'request' (before the request is handled) or 'response'
            (after the response is created). Defaults to `'request'`.
        apply (bool, optional): Whether the middleware should be applied.
            Defaults to `True`.
        priority (int, optional): The priority level of the middleware.
            Lower numbers are executed first. Defaults to `0`.

    Returns:
        Union[Callable, Callable[[Callable], Callable]]: The decorated
            middleware function or a partial function depending on how
            the method was called.

    Example:
        ```python
        @app.middleware('request')
        async def custom_middleware(request):
            ...
        ```
  summary: Decorator for registering middleware
  signatures:
  - - kind: positional
      name: bp
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.middlewares
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.name
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.on_request
  kind: method
  ns: sanic
  description: |-
    Register a middleware to be called before a request is handled.

    This is the same as *@app.middleware('request')*.

    Args:
        middleware (Callable, optional): A callable that takes in a
            request. Defaults to `None`.

    Returns:
        Callable: The decorated middleware function or a partial function
            depending on how the method was called.

    Examples:
        ```python
        @app.on_request
        async def custom_middleware(request):
            request.ctx.custom = 'value'
        ```
  summary: Register a middleware to be called before a request is handled
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.on_response
  kind: method
  ns: sanic
  description: |-
    Register a middleware to be called after a response is created.

    This is the same as *@app.middleware('response')*.

    Args:
        middleware (Callable, optional): A callable that takes in a
            request and response. Defaults to `None`.

    Returns:
        Callable: The decorated middleware function or a partial function
            depending on how the method was called.

    Examples:
        ```python
        @app.on_response
        async def custom_middleware(request, response):
            response.headers['X-Server'] = 'Sanic'
        ```
  summary: Register a middleware to be called after a response is created
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.options
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **OPTIONS** HTTP method.

    Args:
        uri (str): URL to be tagged to OPTIONS method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **OPTIONS** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.patch
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **PATCH** HTTP method.

    Args:
        uri (str): URL to be tagged to PATCH method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Set to `True` if full request streaming is needed,
            `False` otherwise. Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **PATCH** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.post
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **POST** HTTP method.

    Args:
        uri (str): URL to be tagged to POST method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Whether or not to stream the request body.
            Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **POST** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.put
  kind: method
  ns: sanic
  description: |-
    Decorate a function handler to create a route definition using the **PUT** HTTP method.

    Args:
        uri (str): URL to be tagged to PUT method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Whether or not to stream the request body.
            Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **PUT** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.register
  kind: method
  ns: sanic
  description: |-
    Register the blueprint to the sanic app.

    Args:
        app (Sanic): Sanic app to register the blueprint to.
        options (dict): Options to be passed to the blueprint.
  summary: Register the blueprint to the sanic app
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: options
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.register_futures
  kind: method
  ns: sanic
  description: |-
    Register futures to the apps.

    Args:
        apps (Set[Sanic]): Set of apps to register the futures to.
        bp (Blueprint): Blueprint that the futures belong to.
        futures (Sequence[Tuple[Any, ...]]): Sequence of futures to be
            registered.
  summary: Register futures to the apps
  signatures:
  - - kind: positional
      name: apps
      default: null
      rest: false
    - kind: positional
      name: bp
      default: null
      rest: false
    - kind: positional
      name: futures
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.registered
  kind: property
  ns: sanic
  description: |-
    Check if the blueprint has been registered to an app.

    Returns:
        bool: `True` if the blueprint has been registered to an app,
            `False` otherwise.
  summary: Check if the blueprint has been registered to an app
  signatures: null
  inherits_from: null
- name: Blueprint.reload_process_start
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the reload_process_start event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This is similar to the main_process_start event,
    except that it is fired only when the reload process is started.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.reload_process_start
        async def on_reload_process_start(app: Sanic):
            print("Reload process started")
        ```
  summary: Decorator for registering a listener for the reload_process_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.reload_process_stop
  kind: method
  ns: sanic
  description: |-
    Decorator for registering a listener for the reload_process_stop event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This is similar to the main_process_stop event,
    except that it is fired only when the reload process is stopped.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.reload_process_stop
        async def on_reload_process_stop(app: Sanic):
            print("Reload process stopped")
        ```
  summary: Decorator for registering a listener for the reload_process_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.reset
  kind: method
  ns: sanic
  description: Reset the blueprint to its initial state.
  summary: Reset the blueprint to its initial state
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.route
  kind: method
  ns: sanic
  description: |-
    Decorate a function to be registered as a route.

    Args:
        uri (str): Path of the URL.
        methods (Optional[Iterable[str]]): List or tuple of
            methods allowed.
        host (Optional[Union[str, List[str]]]): The host, if required.
        strict_slashes (Optional[bool]): Whether to apply strict slashes
            to the route.
        stream (bool): Whether to allow the request to stream its body.
        version (Optional[Union[int, str, float]]): Route specific
            versioning.
        name (Optional[str]): User-defined route name for url_for.
        ignore_body (bool): Whether the handler should ignore request
            body (e.g. `GET` requests).
        apply (bool): Apply middleware to the route.
        subprotocols (Optional[List[str]]): List of subprotocols.
        websocket (bool): Enable WebSocket support.
        unquote (bool): Unquote special characters in the URL path.
        static (bool): Enable static route.
        version_prefix (str): URL path that should be before the version
             value; default: `"/v"`.
        error_format (Optional[str]): Error format for the route.
        ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        RouteWrapper: Tuple of routes, decorated function.

    Examples:
        Using the method to define a GET endpoint:

        ```python
        @app.route("/hello")
        async def hello(request: Request):
            return text("Hello, World!")
        ```

        Adding context kwargs to the route:

        ```python
        @app.route("/greet", ctx_name="World")
        async def greet(request: Request):
            name = request.route.ctx.name
            return text(f"Hello, {name}!")
        ```
  summary: Decorate a function to be registered as a route
  signatures:
  - - kind: positional
      name: bp
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.routes
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.signal
  kind: method
  ns: sanic
  description: |-
    For creating a signal handler, used similar to a route handler:

    .. code-block:: python

        @app.signal("foo.bar.<thing>")
        async def signal_handler(thing, **kwargs):
            print(f"[signal_handler] {thing=}", kwargs)

    :param event: Representation of the event in ``one.two.three`` form
    :type event: str
    :param apply: For lazy evaluation, defaults to ``True``
    :type apply: bool, optional
    :param condition: For use with the ``condition`` argument in dispatch
        filtering, defaults to ``None``
    :param exclusive: When ``True``, the signal can only be dispatched
        when the condition has been met. When ``False``, the signal can
        be dispatched either with or without it. *THIS IS INAPPLICABLE TO
        BLUEPRINT SIGNALS. THEY ARE ALWAYS NON-EXCLUSIVE*, defaults
        to ``True``
    :type condition: Dict[str, Any], optional
  summary: 'For creating a signal handler, used similar to a route handler:'
  signatures:
  - - kind: positional
      name: bp
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.static
  kind: method
  ns: sanic
  description: |-
    Register a root to serve files from. The input can either be a file or a directory.

    This method provides an easy and simple way to set up the route necessary to serve static files.

    Args:
        uri (str): URL path to be used for serving static content.
        file_or_directory (Union[PathLike, str]): Path to the static file
            or directory with static files.
        pattern (str, optional): Regex pattern identifying the valid
            static files. Defaults to `r"/?.+"`.
        use_modified_since (bool, optional): If true, send file modified
            time, and return not modified if the browser's matches the
            server's. Defaults to `True`.
        use_content_range (bool, optional): If true, process header for
            range requests and sends  the file part that is requested.
            Defaults to `False`.
        stream_large_files (Union[bool, int], optional): If `True`, use
            the `StreamingHTTPResponse.file_stream` handler rather than
            the `HTTPResponse.file handler` to send the file. If this
            is an integer, it represents the threshold size to switch
            to `StreamingHTTPResponse.file_stream`. Defaults to `False`,
            which means that the response will not be streamed.
        name (str, optional): User-defined name used for url_for.
            Defaults to `"static"`.
        host (Optional[str], optional): Host IP or FQDN for the
            service to use.
        strict_slashes (Optional[bool], optional): Instruct Sanic to
            check if the request URLs need to terminate with a slash.
        content_type (Optional[str], optional): User-defined content type
            for header.
        apply (bool, optional): If true, will register the route
            immediately. Defaults to `True`.
        resource_type (Optional[str], optional): Explicitly declare a
            resource to be a `"file"` or a `"dir"`.
        index (Optional[Union[str, Sequence[str]]], optional): When
            exposing against a directory, index is  the name that will
            be served as the default file. When multiple file names are
            passed, then they will be tried in order.
        directory_view (bool, optional): Whether to fallback to showing
            the directory viewer when exposing a directory. Defaults
            to `False`.
        directory_handler (Optional[DirectoryHandler], optional): An
            instance of DirectoryHandler that can be used for explicitly
            controlling and subclassing the behavior of the default
            directory handler.

    Returns:
        List[sanic.router.Route]: Routes registered on the router.

    Examples:
        Serving a single file:
        ```python
        app.static('/foo', 'path/to/static/file.txt')
        ```

        Serving all files from a directory:
        ```python
        app.static('/static', 'path/to/static/directory')
        ```

        Serving large files with a specific threshold:
        ```python
        app.static('/static', 'path/to/large/files', stream_large_files=1000000)
        ```
  summary: Register a root to serve files from
  signatures:
  - - kind: positional
      name: bp
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.statics
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.strict_slashes
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.url_prefix
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.version
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.version_prefix
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Blueprint.websocket
  kind: method
  ns: sanic
  description: |-
    Decorate a function to be registered as a websocket route.

    Args:
        uri (str): Path of the URL.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN details.
        strict_slashes (Optional[bool]): If the API endpoint needs to
            terminate with a `"/"` or not.
        subprotocols (Optional[List[str]]): Optional list of str with
            supported subprotocols.
        version (Optional[Union[int, str, float]]): WebSocket
            protocol version.
        name (Optional[str]): A unique name assigned to the URL so that
            it can be used with url_for.
        apply (bool): If set to False, it doesn't apply the route to the
            app. Default is `True`.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with
            a `ctx_* prefix` will be appended to the route
            context (`route.ctx`).

    Returns:
        tuple: Tuple of routes, decorated function.
  summary: Decorate a function to be registered as a websocket route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Blueprint.websocket_routes
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPMethod
  kind: class
  ns: sanic
  description: HTTP methods that are commonly used.
  summary: HTTP methods that are commonly used
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: HTTPMethod
      kind: return
  inherits_from:
  - <enum 'UpperStrEnum'>
  - <enum 'StrEnum'>
  - <class 'str'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: HTTPMethod.DELETE
  kind: property
  ns: sanic
  description: HTTP methods that are commonly used.
  summary: HTTP methods that are commonly used
  signatures: null
  inherits_from: null
- name: HTTPMethod.GET
  kind: property
  ns: sanic
  description: HTTP methods that are commonly used.
  summary: HTTP methods that are commonly used
  signatures: null
  inherits_from: null
- name: HTTPMethod.HEAD
  kind: property
  ns: sanic
  description: HTTP methods that are commonly used.
  summary: HTTP methods that are commonly used
  signatures: null
  inherits_from: null
- name: HTTPMethod.OPTIONS
  kind: property
  ns: sanic
  description: HTTP methods that are commonly used.
  summary: HTTP methods that are commonly used
  signatures: null
  inherits_from: null
- name: HTTPMethod.PATCH
  kind: property
  ns: sanic
  description: HTTP methods that are commonly used.
  summary: HTTP methods that are commonly used
  signatures: null
  inherits_from: null
- name: HTTPMethod.POST
  kind: property
  ns: sanic
  description: HTTP methods that are commonly used.
  summary: HTTP methods that are commonly used
  signatures: null
  inherits_from: null
- name: HTTPMethod.PUT
  kind: property
  ns: sanic
  description: HTTP methods that are commonly used.
  summary: HTTP methods that are commonly used
  signatures: null
  inherits_from: null
- name: HTTPMethod.capitalize
  kind: callable
  ns: sanic
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.casefold
  kind: callable
  ns: sanic
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.center
  kind: callable
  ns: sanic
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.count
  kind: callable
  ns: sanic
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: HTTPMethod.encode
  kind: callable
  ns: sanic
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.endswith
  kind: callable
  ns: sanic
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: HTTPMethod.expandtabs
  kind: callable
  ns: sanic
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.find
  kind: callable
  ns: sanic
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: HTTPMethod.format
  kind: callable
  ns: sanic
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: HTTPMethod.format_map
  kind: callable
  ns: sanic
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: HTTPMethod.index
  kind: callable
  ns: sanic
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: HTTPMethod.isalnum
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.isalpha
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.isascii
  kind: callable
  ns: sanic
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.isdecimal
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.isdigit
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.isidentifier
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.islower
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.isnumeric
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.isprintable
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.isspace
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.istitle
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.isupper
  kind: callable
  ns: sanic
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.join
  kind: callable
  ns: sanic
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.ljust
  kind: callable
  ns: sanic
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.lower
  kind: callable
  ns: sanic
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.lstrip
  kind: callable
  ns: sanic
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.partition
  kind: callable
  ns: sanic
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.removeprefix
  kind: callable
  ns: sanic
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.removesuffix
  kind: callable
  ns: sanic
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.replace
  kind: callable
  ns: sanic
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.rfind
  kind: callable
  ns: sanic
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: HTTPMethod.rindex
  kind: callable
  ns: sanic
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: HTTPMethod.rjust
  kind: callable
  ns: sanic
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.rpartition
  kind: callable
  ns: sanic
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.rsplit
  kind: callable
  ns: sanic
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.rstrip
  kind: callable
  ns: sanic
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.split
  kind: callable
  ns: sanic
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.splitlines
  kind: callable
  ns: sanic
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.startswith
  kind: callable
  ns: sanic
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: HTTPMethod.strip
  kind: callable
  ns: sanic
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.swapcase
  kind: callable
  ns: sanic
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.title
  kind: callable
  ns: sanic
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.translate
  kind: callable
  ns: sanic
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.upper
  kind: callable
  ns: sanic
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethod.zfill
  kind: callable
  ns: sanic
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPResponse
  kind: class
  ns: sanic
  description: |-
    HTTP response to be sent back to the client.

    Args:
        body (Optional[Any], optional): The body content to be returned. Defaults to `None`.
        status (int, optional): HTTP response number. Defaults to `200`.
        headers (Optional[Union[Header, Dict[str, str]]], optional): Headers to be returned. Defaults to `None`.
        content_type (Optional[str], optional): Content type to be returned (as a header). Defaults to `None`.
  summary: HTTP response to be sent back to the client
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: body
      default: None
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: None
      rest: false
    - type: HTTPResponse
      kind: return
  inherits_from:
  - <class 'sanic.response.types.BaseHTTPResponse'>
- name: HTTPResponse.add_cookie
  kind: method
  ns: sanic
  description: |-
    Add a cookie to the CookieJar

    See [Cookies](/en/guide/basics/cookies.html)

    Args:
        key (str): The key to be added
        value (str): The value to be added
        path (str, optional): Path of the cookie. Defaults to `"/"`.
        domain (Optional[str], optional): Domain of the cookie. Defaults to `None`.
        secure (bool, optional): Whether the cookie is secure. Defaults to `True`.
        max_age (Optional[int], optional): Max age of the cookie. Defaults to `None`.
        expires (Optional[datetime], optional): Expiry date of the cookie. Defaults to `None`.
        httponly (bool, optional): Whether the cookie is http only. Defaults to `False`.
        samesite (Optional[SameSite], optional): SameSite policy of the cookie. Defaults to `"Lax"`.
        partitioned (bool, optional): Whether the cookie is partitioned. Defaults to `False`.
        comment (Optional[str], optional): Comment of the cookie. Defaults to `None`.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key. This requires that path="/", domain=None, and secure=True. Defaults to `False`.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key. This requires that secure=True. Defaults to `False`.

    Returns:
        Cookie: The cookie that was added
  summary: Add a cookie to the CookieJar
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - name: path
      default: /
      rest: false
      kind: kw-only
    - name: domain
      default: None
      rest: false
      kind: kw-only
    - name: secure
      default: 'True'
      rest: false
      kind: kw-only
    - name: max_age
      default: None
      rest: false
      kind: kw-only
    - name: expires
      default: None
      rest: false
      kind: kw-only
    - name: httponly
      default: 'False'
      rest: false
      kind: kw-only
    - name: samesite
      default: Lax
      rest: false
      kind: kw-only
    - name: partitioned
      default: 'False'
      rest: false
      kind: kw-only
    - name: comment
      default: None
      rest: false
      kind: kw-only
    - name: host_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - name: secure_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPResponse.asgi
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPResponse.body
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPResponse.content_type
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPResponse.cookies
  kind: property
  ns: sanic
  description: |-
    The response cookies.

    See [Cookies](/en/guide/basics/cookies.html)

    Returns:
        CookieJar: The response cookies
  summary: The response cookies
  signatures: null
  inherits_from: null
- name: HTTPResponse.delete_cookie
  kind: method
  ns: sanic
  description: |-
    Delete a cookie

    This will effectively set it as Max-Age: 0, which a browser should
    interpret it to mean: "delete the cookie".

    Since it is a browser/client implementation, your results may vary
    depending upon which client is being used.

    See [Cookies](/en/guide/basics/cookies.html)

    Args:
        key (str): The key to be deleted
        path (str, optional): Path of the cookie. Defaults to `"/"`.
        domain (Optional[str], optional): Domain of the cookie. Defaults to `None`.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key. This requires that path="/", domain=None, and secure=True. Defaults to `False`.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key. This requires that secure=True. Defaults to `False`.
  summary: Delete a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - name: path
      default: /
      rest: false
      kind: kw-only
    - name: domain
      default: None
      rest: false
      kind: kw-only
    - name: host_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - name: secure_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPResponse.eof
  kind: method
  ns: sanic
  description: Send a EOF (End of File) message to the client.
  summary: Send a EOF (End of File) message to the client
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPResponse.headers
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPResponse.processed_headers
  kind: property
  ns: sanic
  description: |-
    Obtain a list of header tuples encoded in bytes for sending.

    Add and remove headers based on status and content_type.

    Returns:
        Iterator[Tuple[bytes, bytes]]: A list of header tuples encoded in bytes for sending
  summary: Obtain a list of header tuples encoded in bytes for sending
  signatures: null
  inherits_from: null
- name: HTTPResponse.send
  kind: method
  ns: sanic
  description: |-
    Send any pending response headers and the given data as body.

    Args:
        data (Optional[AnyStr], optional): str or bytes to be written. Defaults to `None`.
        end_stream (Optional[bool], optional): whether to close the stream after this block. Defaults to `None`.
  summary: Send any pending response headers and the given data as body
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: end_stream
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPResponse.status
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPResponse.stream
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request
  kind: class
  ns: sanic
  description: |-
    State of HTTP request.

    Args:
        url_bytes (bytes): Raw URL bytes.
        headers (Header): Request headers.
        version (str): HTTP version.
        method (str): HTTP method.
        transport (TransportProtocol): Transport protocol.
        app (Sanic): Sanic instance.
        head (bytes, optional): Request head. Defaults to `b""`.
        stream_id (int, optional): HTTP/3 stream ID. Defaults to `0`.
  summary: State of HTTP request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: url_bytes
      default: null
      rest: false
    - kind: positional
      name: headers
      default: null
      rest: false
    - kind: positional
      name: version
      default: null
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - kind: positional
      name: transport
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: head
      default: b''
      rest: false
    - kind: positional
      name: stream_id
      default: '0'
      rest: false
    - type: Request
      kind: return
  inherits_from:
  - <class 'typing.Generic'>
- name: Request.accept
  kind: property
  ns: sanic
  description: |-
    Accepted response content types.

    A convenience handler for easier RFC-compliant matching of MIME types,
    parsed as a list that can match wildcards and includes */* by default.

    Returns:
        AcceptList: Accepted response content types
  summary: Accepted response content types
  signatures: null
  inherits_from: null
- name: Request.app
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.args
  kind: property
  ns: sanic
  description: |-
    Parse `query_string` using `urllib.parse.parse_qs`.

    This methods is used by the `args` property, but it also
    can be used directly if you need to change default parameters.

    Args:
        keep_blank_values (bool): Flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A `True` value indicates that blanks should be retained as
            blank strings. The default `False` value indicates that
            blank values are to be ignored and treated as if they were
            not included.
        strict_parsing (bool): Flag indicating what to do with parsing
            errors. If `False` (the default), errors are silently ignored.
            If `True`, errors raise a `ValueError` exception.
        encoding (str): Specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the
            `bytes.decode()` method.
        errors (str): Specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the
            `bytes.decode()` method.

    Returns:
        RequestParameters: A dictionary containing the parsed arguments.
  summary: Parse `query_string` using `urllib
  signatures: null
  inherits_from: null
- name: Request.body
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.client_ip
  kind: property
  ns: sanic
  description: |-
    Client IP address.
    1. proxied remote address `self.forwarded['for']`
    2. local peer address `self.ip`

    New in Sanic 23.6. Prefer this over `remote_addr` for determining the
    client address regardless of whether the service runs behind a proxy
    or not (proxy deployment needs separate configuration).

    Returns:
        str: IPv4, bracketed IPv6, UNIX socket name or arbitrary string
  summary: Client IP address
  signatures: null
  inherits_from: null
- name: Request.conn_info
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.content_type
  kind: property
  ns: sanic
  description: |-
    Content-Type header form the request

    Returns:
        str: Content-Type header form the request
  summary: Content-Type header form the request
  signatures: null
  inherits_from: null
- name: Request.cookies
  kind: property
  ns: sanic
  description: |-
    Incoming cookies on the request

    Returns:
        RequestParameters: Incoming cookies on the request
  summary: Incoming cookies on the request
  signatures: null
  inherits_from: null
- name: Request.credentials
  kind: property
  ns: sanic
  description: |-
    Attempt to return the auth header value.

    Covers NoAuth, Basic Auth, Bearer Token, Api Token authentication
    schemas.

    Returns:
        Optional[Credentials]: A Credentials object with token, or username
            and password related to the request
  summary: Attempt to return the auth header value
  signatures: null
  inherits_from: null
- name: Request.ctx
  kind: property
  ns: sanic
  description: |-
    The current request context.

    This is a context object for the current request. It is created
    by `Request.make_context` and is a great place to store data
    that you want to be accessible during the request lifecycle.

    Returns:
        ctx_type: The current request context.
  summary: The current request context
  signatures: null
  inherits_from: null
- name: Request.endpoint
  kind: property
  ns: sanic
  description: |-
    Alias of `sanic.request.Request.name`

    Returns:
        Optional[str]: The route name
  summary: Alias of `sanic
  signatures: null
  inherits_from: null
- name: Request.files
  kind: property
  ns: sanic
  description: |-
    The request body parsed as uploaded files

    Returns:
        Optional[RequestParameters]: The request body parsed as uploaded files
  summary: The request body parsed as uploaded files
  signatures: null
  inherits_from: null
- name: Request.form
  kind: property
  ns: sanic
  description: |-
    The request body parsed as form data

    Returns:
        Optional[RequestParameters]: The request body parsed as form data
  summary: The request body parsed as form data
  signatures: null
  inherits_from: null
- name: Request.forwarded
  kind: property
  ns: sanic
  description: |-
    Active proxy information obtained from request headers, as specified in Sanic configuration.

    Field names by, for, proto, host, port and path are normalized.
    - for and by IPv6 addresses are bracketed
    - port (int) is only set by port headers, not from host.
    - path is url-unencoded

    Additional values may be available from new style Forwarded headers.

    Returns:
        Options: proxy information from request headers
  summary: Active proxy information obtained from request headers, as specified in Sanic configuration
  signatures: null
  inherits_from: null
- name: Request.generate_id
  kind: function
  ns: sanic
  description: |-
    Generate a unique ID for the request.

    This method is called to generate a unique ID for each request.
    By default, it returns a `uuid.UUID` instance.

    Returns:
        Union[uuid.UUID, str, int]: A unique ID for the request.
  summary: Generate a unique ID for the request
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Request.get_args
  kind: method
  ns: sanic
  description: |-
    Parse `query_string` using `urllib.parse.parse_qs`.

    This methods is used by the `args` property, but it also
    can be used directly if you need to change default parameters.

    Args:
        keep_blank_values (bool): Flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A `True` value indicates that blanks should be retained as
            blank strings. The default `False` value indicates that
            blank values are to be ignored and treated as if they were
            not included.
        strict_parsing (bool): Flag indicating what to do with parsing
            errors. If `False` (the default), errors are silently ignored.
            If `True`, errors raise a `ValueError` exception.
        encoding (str): Specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the
            `bytes.decode()` method.
        errors (str): Specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the
            `bytes.decode()` method.

    Returns:
        RequestParameters: A dictionary containing the parsed arguments.
  summary: Parse `query_string` using `urllib
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keep_blank_values
      default: 'False'
      rest: false
    - kind: positional
      name: strict_parsing
      default: 'False'
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: replace
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.get_cookies
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.get_current
  kind: function
  ns: sanic
  description: |-
    Retrieve the current request object

    This implements [Context Variables](https://docs.python.org/3/library/contextvars.html)
    to allow for accessing the current request from anywhere.

    A typical usecase is when you want to access the current request
    from a function that is not a handler, such as a logging function:

    ```python
    import logging

    class LoggingFormater(logging.Formatter):
        def format(self, record):
            request = Request.get_current()
            record.url = request.url
            record.ip = request.ip
            return super().format(record)
    ```

    Returns:
        Request: The current request object

    Raises:
        sanic.exceptions.ServerError: If it is outside of a request
            lifecycle.
  summary: Retrieve the current request object
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.get_form
  kind: method
  ns: sanic
  description: |-
    Method to extract and parse the form data from a request.

    Args:
        keep_blank_values (bool): Whether to discard blank values from the form data.

    Returns:
        Optional[RequestParameters]: The parsed form data.
  summary: Method to extract and parse the form data from a request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keep_blank_values
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.get_query_args
  kind: method
  ns: sanic
  description: |-
    Parse `query_string` using `urllib.parse.parse_qsl`.

    This methods is used by `query_args` propertyn but can be used
    directly if you need to change default parameters.

    Args:
        keep_blank_values (bool): Flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A `True` value indicates that blanks should be retained as
            blank strings. The default `False` value indicates that
            blank values are to be ignored and treated as if they were
            not included.
        strict_parsing (bool): Flag indicating what to do with
            parsing errors. If `False` (the default), errors are
            silently ignored. If `True`, errors raise a
            `ValueError` exception.
        encoding (str): Specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the
            `bytes.decode()` method.
        errors (str): Specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the
            `bytes.decode()` method.

    Returns:
        list: A list of tuples containing the parsed arguments.
  summary: Parse `query_string` using `urllib
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keep_blank_values
      default: 'False'
      rest: false
    - kind: positional
      name: strict_parsing
      default: 'False'
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: replace
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.head
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.headers
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.host
  kind: property
  ns: sanic
  description: |-
    The currently effective server 'host' (hostname or hostname:port).

    1. `config.SERVER_NAME` overrides any client headers
    2. proxied host of original request
    3. request host header
    hostname and port may be separated by
    `sanic.headers.parse_host(request.host)`.

    Returns:
        str: the first matching host found, or empty string
  summary: The currently effective server 'host' (hostname or hostname:port)
  signatures: null
  inherits_from: null
- name: Request.id
  kind: property
  ns: sanic
  description: |-
    A request ID passed from the client, or generated from the backend.

    By default, this will look in a request header defined at:
    `self.app.config.REQUEST_ID_HEADER`. It defaults to
    `X-Request-ID`. Sanic will try to cast the ID into a `UUID` or an
    `int`.

    If there is not a UUID from the client, then Sanic will try
    to generate an ID by calling `Request.generate_id()`. The default
    behavior is to generate a `UUID`. You can customize this behavior
    by subclassing `Request` and overwriting that method.

    ```python
    from sanic import Request, Sanic
    from itertools import count

    class IntRequest(Request):
        counter = count()

        def generate_id(self):
            return next(self.counter)

    app = Sanic("MyApp", request_class=IntRequest)
    ```

    Returns:
        Optional[Union[uuid.UUID, str, int]]: A request ID passed from the
            client, or generated from the backend.
  summary: A request ID passed from the client, or generated from the backend
  signatures: null
  inherits_from: null
- name: Request.ip
  kind: property
  ns: sanic
  description: |-
    Peer ip of the socket

    Returns:
        str: Peer ip of the socket
  summary: Peer ip of the socket
  signatures: null
  inherits_from: null
- name: Request.is_cacheable
  kind: property
  ns: sanic
  description: |-
    Whether the HTTP method is cacheable.

    See https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.3

    Returns:
        bool: Whether the HTTP method is cacheable.
  summary: Whether the HTTP method is cacheable
  signatures: null
  inherits_from: null
- name: Request.is_idempotent
  kind: property
  ns: sanic
  description: |-
    Whether the HTTP method is iempotent.

    See https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.2

    Returns:
        bool: Whether the HTTP method is iempotent.
  summary: Whether the HTTP method is iempotent
  signatures: null
  inherits_from: null
- name: Request.is_safe
  kind: property
  ns: sanic
  description: |-
    Whether the HTTP method is safe.

    See https://datatracker.ietf.org/doc/html/rfc7231#section-4.2.1

    Returns:
        bool: Whether the HTTP method is safe.
  summary: Whether the HTTP method is safe
  signatures: null
  inherits_from: null
- name: Request.json
  kind: property
  ns: sanic
  description: |-
    The request body parsed as JSON

    Returns:
        Any: The request body parsed as JSON
  summary: The request body parsed as JSON
  signatures: null
  inherits_from: null
- name: Request.load_json
  kind: method
  ns: sanic
  description: |-
    Load the request body as JSON

    Args:
        loads (Callable, optional): A custom JSON loader. Defaults to None.

    Raises:
        BadRequest: If the request body cannot be parsed as JSON

    Returns:
        Any: The request body parsed as JSON
  summary: Load the request body as JSON
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: loads
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.make_context
  kind: method
  ns: sanic
  description: |-
    Create a new context object.

    This method is called when a new request context is pushed. It is
    a great candidate for overriding in a subclass if you want to
    control the type of context object that is created.

    By default, it returns a `types.SimpleNamespace` instance.

    Returns:
        ctx_type: A new context object.
  summary: Create a new context object
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Request.match_info
  kind: property
  ns: sanic
  description: |-
    Matched path parameters after resolving route

    Returns:
        Dict[str, Any]: Matched path parameters after resolving route
  summary: Matched path parameters after resolving route
  signatures: null
  inherits_from: null
- name: Request.method
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.name
  kind: property
  ns: sanic
  description: |-
    The route name

    In the following pattern:

    ```
    <AppName>.[<BlueprintName>.]<HandlerName>
    ```

    Returns:
        Optional[str]: The route name
  summary: The route name
  signatures: null
  inherits_from: null
- name: Request.network_paths
  kind: property
  ns: sanic
  description: |-
    Access the network paths if available

    Returns:
        Optional[List[Any]]: Access the network paths if available
  summary: Access the network paths if available
  signatures: null
  inherits_from: null
- name: Request.parsed_accept
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.parsed_args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.parsed_cookies
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.parsed_credentials
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.parsed_files
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.parsed_form
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.parsed_forwarded
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.parsed_json
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.parsed_not_grouped_args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.parsed_token
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.path
  kind: property
  ns: sanic
  description: |-
    Path of the local HTTP request

    Returns:
        str: Path of the local HTTP request
  summary: Path of the local HTTP request
  signatures: null
  inherits_from: null
- name: Request.port
  kind: property
  ns: sanic
  description: |-
    Peer port of the socket

    Returns:
        int: Peer port of the socket
  summary: Peer port of the socket
  signatures: null
  inherits_from: null
- name: Request.protocol
  kind: property
  ns: sanic
  description: |-
    The HTTP protocol instance

    Returns:
        Protocol: The HTTP protocol instance
  summary: The HTTP protocol instance
  signatures: null
  inherits_from: null
- name: Request.query_args
  kind: property
  ns: sanic
  description: |-
    Parse `query_string` using `urllib.parse.parse_qsl`.

    This methods is used by `query_args` propertyn but can be used
    directly if you need to change default parameters.

    Args:
        keep_blank_values (bool): Flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A `True` value indicates that blanks should be retained as
            blank strings. The default `False` value indicates that
            blank values are to be ignored and treated as if they were
            not included.
        strict_parsing (bool): Flag indicating what to do with
            parsing errors. If `False` (the default), errors are
            silently ignored. If `True`, errors raise a
            `ValueError` exception.
        encoding (str): Specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the
            `bytes.decode()` method.
        errors (str): Specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the
            `bytes.decode()` method.

    Returns:
        list: A list of tuples containing the parsed arguments.
  summary: Parse `query_string` using `urllib
  signatures: null
  inherits_from: null
- name: Request.query_string
  kind: property
  ns: sanic
  description: |-
    Representation of the requested query

    Returns:
        str: Representation of the requested query
  summary: Representation of the requested query
  signatures: null
  inherits_from: null
- name: Request.raw_headers
  kind: property
  ns: sanic
  description: |-
    The unparsed HTTP headers

    Returns:
        bytes: The unparsed HTTP headers
  summary: The unparsed HTTP headers
  signatures: null
  inherits_from: null
- name: Request.raw_url
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.receive_body
  kind: method
  ns: sanic
  description: |-
    Receive request.body, if not already received.

    Streaming handlers may call this to receive the full body. Sanic calls
    this function before running any handlers of non-streaming routes.

    Custom request classes can override this for custom handling of both
    streaming and non-streaming routes.
  summary: Receive request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.remote_addr
  kind: property
  ns: sanic
  description: |-
    Client IP address, if available from proxy.

    Returns:
        str: IPv4, bracketed IPv6, UNIX socket name or arbitrary string
  summary: Client IP address, if available from proxy
  signatures: null
  inherits_from: null
- name: Request.request_line
  kind: property
  ns: sanic
  description: |-
    The first line of a HTTP request

    Returns:
        bytes: The first line of a HTTP request
  summary: The first line of a HTTP request
  signatures: null
  inherits_from: null
- name: Request.reset_response
  kind: method
  ns: sanic
  description: |-
    Reset the response object.

    This clears much of the state of the object. It should
    generally not be called directly, but is called automatically as
    part of the request lifecycle.

    Raises:
        sanic.exceptions.ServerError: If the response has already been
            sent.
  summary: Reset the response object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.respond
  kind: method
  ns: sanic
  description: |-
    Respond to the request without returning.

    This method can only be called once, as you can only respond once.
    If no ``response`` argument is passed, one will be created from the
    ``status``, ``headers`` and ``content_type`` arguments.

    **The first typical usecase** is if you wish to respond to the
    request without returning from the handler:

    ```python
    @app.get("/")
    async def handler(request: Request):
        data = ...  # Process something

        json_response = json({"data": data})
        await request.respond(json_response)

    @app.on_response
    async def add_header(_, response: HTTPResponse):
        # Middlewares still get executed as expected
        response.headers["one"] = "two"
    ```

    **The second possible usecase** is for when you want to directly
    respond to the request:

    ```python
    response = await request.respond(content_type="text/csv")
    await response.send("foo,")
    await response.send("bar")

    # You can control the completion of the response by calling
    # the 'eof()' method:
    await response.eof()
    ```

    Args:
        response (ResponseType): Response instance to send.
        status (int): Status code to return in the response.
        headers (Optional[Dict[str, str]]): Headers to return in the response, defaults to None.
        content_type (Optional[str]): Content-Type header of the response, defaults to None.

    Returns:
        FinalResponseType: Final response being sent (may be different from the
            "response" parameter because of middlewares), which can be
            used to manually send data.
  summary: Respond to the request without returning
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: None
      rest: false
    - name: status
      default: '200'
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - name: content_type
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.responded
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.route
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.scheme
  kind: property
  ns: sanic
  description: |-
    Determine request scheme.

    1. `config.SERVER_NAME` if in full URL format
    2. proxied proto/scheme
    3. local connection protocol

    Returns:
        str: http|https|ws|wss or arbitrary value given by the headers.
  summary: Determine request scheme
  signatures: null
  inherits_from: null
- name: Request.scope
  kind: property
  ns: sanic
  description: |-
    The ASGI scope of the request.

    Returns:
        ASGIScope: The ASGI scope of the request.

    Raises:
        NotImplementedError: If the app isn't an ASGI app.
  summary: The ASGI scope of the request
  signatures: null
  inherits_from: null
- name: Request.server_name
  kind: property
  ns: sanic
  description: |-
    hostname the client connected to, by `request.host`

    Returns:
        str: hostname the client connected to, by `request.host`
  summary: hostname the client connected to, by `request
  signatures: null
  inherits_from: null
- name: Request.server_path
  kind: property
  ns: sanic
  description: |-
    Full path of current URL; uses proxied or local path

    Returns:
        str: Full path of current URL; uses proxied or local path
  summary: Full path of current URL; uses proxied or local path
  signatures: null
  inherits_from: null
- name: Request.server_port
  kind: property
  ns: sanic
  description: |-
    The port the client connected to, by forwarded `port` or `request.host`.

    Default port is returned as 80 and 443 based on `request.scheme`.

    Returns:
        int: The port the client connected to, by forwarded `port` or `request.host`.
  summary: The port the client connected to, by forwarded `port` or `request
  signatures: null
  inherits_from: null
- name: Request.socket
  kind: property
  ns: sanic
  description: |-
    Information about the connected socket if available

    Returns:
        Tuple[Optional[str], Optional[int]]: Information about the
            connected socket if available, in the form of a tuple of
            (ip, port)
  summary: Information about the connected socket if available
  signatures: null
  inherits_from: null
- name: Request.stream
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.stream_id
  kind: property
  ns: sanic
  description: |-
    Access the HTTP/3 stream ID.

    Raises:
        sanic.exceptions.ServerError: If the request is not HTTP/3.

    Returns:
        int: The HTTP/3 stream ID.
  summary: Access the HTTP/3 stream ID
  signatures: null
  inherits_from: null
- name: Request.token
  kind: property
  ns: sanic
  description: |-
    Attempt to return the auth header token.

    Returns:
        Optional[str]: The auth header token
  summary: Attempt to return the auth header token
  signatures: null
  inherits_from: null
- name: Request.transport
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Request.uri_template
  kind: property
  ns: sanic
  description: |-
    The defined URI template

    Returns:
        Optional[str]: The defined URI template
  summary: The defined URI template
  signatures: null
  inherits_from: null
- name: Request.url
  kind: property
  ns: sanic
  description: |-
    The URL

    Returns:
        str: The URL
  summary: The URL
  signatures: null
  inherits_from: null
- name: Request.url_for
  kind: method
  ns: sanic
  description: |-
    Retrieve a URL for a given view name.

    Same as `sanic.Sanic.url_for`, but automatically determine `scheme`
    and `netloc` base on the request. Since this method is aiming
    to generate correct schema & netloc, `_external` is implied.

    Args:
        view_name (str): The view name to generate URL for.
        **kwargs: Arbitrary keyword arguments to build URL query string.

    Returns:
        str: The generated URL.
  summary: Retrieve a URL for a given view name
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: view_name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request.version
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Websocket
  kind: class
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: ws_proto
      default: null
      rest: false
    - kind: positional
      name: max_queue
      default: None
      rest: false
    - kind: positional
      name: ping_interval
      default: '20'
      rest: false
    - kind: positional
      name: ping_timeout
      default: '20'
      rest: false
    - kind: positional
      name: close_timeout
      default: '10'
      rest: false
    - kind: positional
      name: loop
      default: None
      rest: false
    - type: WebsocketImplProtocol
      kind: return
  inherits_from: null
- name: Websocket.abort_pings
  kind: method
  ns: sanic
  description: |-
    Raise ConnectionClosed in pending keepalive pings.
    They'll never receive a pong once the connection is closed.
  summary: Raise ConnectionClosed in pending keepalive pings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.async_data_received
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data_to_send
      default: null
      rest: false
    - kind: positional
      name: events_to_process
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.async_eof_received
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data_to_send
      default: null
      rest: false
    - kind: positional
      name: events_to_process
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.auto_close_connection
  kind: method
  ns: sanic
  description: |-
    Close the WebSocket Connection
    When the opening handshake succeeds, :meth:`connection_open` starts
    this coroutine in a task. It waits for the data transfer phase to
    complete then it closes the TCP connection cleanly.
    When the opening handshake fails, :meth:`fail_connection` does the
    same. There's no data transfer phase in that case.
  summary: Close the WebSocket Connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.close
  kind: method
  ns: sanic
  description: |-
    Perform the closing handshake.
    This is a websocket-protocol level close.
    :meth:`close` waits for the other end to complete the handshake and
    for the TCP connection to terminate.
    :meth:`close` is idempotent: it doesn't do anything once the
    connection is closed.
    :param code: WebSocket close code
    :param reason: WebSocket close reason
  summary: Perform the closing handshake
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: code
      default: '1000'
      rest: false
    - kind: positional
      name: reason
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.connection_lost
  kind: method
  ns: sanic
  description: The WebSocket Connection is Closed.
  summary: The WebSocket Connection is Closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exc
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.connection_made
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: io_proto
      default: null
      rest: false
    - kind: positional
      name: loop
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.data_received
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.end_connection
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: code
      default: '1000'
      rest: false
    - kind: positional
      name: reason
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.eof_received
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.fail_connection
  kind: method
  ns: sanic
  description: |-
    Fail the WebSocket Connection
    This requires:
    1. Stopping all processing of incoming data, which means cancelling
       pausing the underlying io protocol. The close code will be 1006
       unless a close frame was received earlier.
    2. Sending a close frame with an appropriate code if the opening
       handshake succeeded and the other side is likely to process it.
    3. Closing the connection. :meth:`auto_close_connection` takes care
       of this.
    (The specification describes these steps in the opposite order.)
  summary: Fail the WebSocket Connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: code
      default: '1006'
      rest: false
    - kind: positional
      name: reason
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.keepalive_ping
  kind: method
  ns: sanic
  description: |-
    Send a Ping frame and wait for a Pong frame at regular intervals.
    This coroutine exits when the connection terminates and one of the
    following happens:
    - :meth:`ping` raises :exc:`ConnectionClosed`, or
    - :meth:`auto_close_connection` cancels :attr:`keepalive_ping_task`.
  summary: Send a Ping frame and wait for a Pong frame at regular intervals
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.pause_frames
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.ping
  kind: method
  ns: sanic
  description: |-
    Send a ping.
    Return an :class:`~asyncio.Future` that will be resolved when the
    corresponding pong is received. You can ignore it if you don't intend
    to wait.
    A ping may serve as a keepalive or as a check that the remote endpoint
    received all messages up to this point::
        await pong_event = ws.ping()
        await pong_event # only if you want to wait for the pong
    By default, the ping contains four random bytes. This payload may be
    overridden with the optional ``data`` argument which must be a string
    (which will be encoded to UTF-8) or a bytes-like object.
  summary: Send a ping
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.pong
  kind: method
  ns: sanic
  description: |-
    Send a pong.
    An unsolicited pong may serve as a unidirectional heartbeat.
    The payload may be set with the optional ``data`` argument which must
    be a string (which will be encoded to UTF-8) or a bytes-like object.
  summary: Send a pong
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: b''
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.process_events
  kind: method
  ns: sanic
  description: Process a list of incoming events.
  summary: Process a list of incoming events
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: events
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.process_pong
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: frame
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.recv
  kind: method
  ns: sanic
  description: |-
    Receive the next message.
    Return a :class:`str` for a text frame and :class:`bytes` for a binary
    frame.
    When the end of the message stream is reached, :meth:`recv` raises
    :exc:`~websockets.exceptions.ConnectionClosed`. Specifically, it
    raises :exc:`~websockets.exceptions.ConnectionClosedOK` after a normal
    connection closure and
    :exc:`~websockets.exceptions.ConnectionClosedError` after a protocol
    error or a network failure.
    If ``timeout`` is ``None``, block until a message is received. Else,
    if no message is received within ``timeout`` seconds, return ``None``.
    Set ``timeout`` to ``0`` to check if a message was already received.
    :raises ~websockets.exceptions.ConnectionClosed: when the
        connection is closed
    :raises asyncio.CancelledError: if the websocket closes while waiting
    :raises ServerError: if two tasks call :meth:`recv` or
        :meth:`recv_streaming` concurrently
  summary: Receive the next message
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.recv_burst
  kind: method
  ns: sanic
  description: |-
    Receive the messages which have arrived since last checking.
    Return a :class:`list` containing :class:`str` for a text frame
    and :class:`bytes` for a binary frame.
    When the end of the message stream is reached, :meth:`recv_burst`
    raises :exc:`~websockets.exceptions.ConnectionClosed`. Specifically,
    it raises :exc:`~websockets.exceptions.ConnectionClosedOK` after a
    normal connection closure and
    :exc:`~websockets.exceptions.ConnectionClosedError` after a protocol
    error or a network failure.
    :raises ~websockets.exceptions.ConnectionClosed: when the
        connection is closed
    :raises ServerError: if two tasks call :meth:`recv_burst` or
        :meth:`recv_streaming` concurrently
  summary: Receive the messages which have arrived since last checking
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: max_recv
      default: '256'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.recv_streaming
  kind: method
  ns: sanic
  description: |-
    Receive the next message frame by frame.
    Return an iterator of :class:`str` for a text frame and :class:`bytes`
    for a binary frame. The iterator should be exhausted, or else the
    connection will become unusable.
    With the exception of the return value, :meth:`recv_streaming` behaves
    like :meth:`recv`.
  summary: Receive the next message frame by frame
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.resume_frames
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.send
  kind: method
  ns: sanic
  description: |-
    Send a message.
    A string (:class:`str`) is sent as a `Text frame`_. A bytestring or
    bytes-like object (:class:`bytes`, :class:`bytearray`, or
    :class:`memoryview`) is sent as a `Binary frame`_.
    .. _Text frame: https://tools.ietf.org/html/rfc6455#section-5.6
    .. _Binary frame: https://tools.ietf.org/html/rfc6455#section-5.6
    :meth:`send` also accepts an iterable of strings, bytestrings, or
    bytes-like objects. In that case the message is fragmented. Each item
    is treated as a message fragment and sent in its own frame. All items
    must be of the same type, or else :meth:`send` will raise a
    :exc:`TypeError` and the connection will be closed.
    :meth:`send` rejects dict-like objects because this is often an error.
    If you wish to send the keys of a dict-like object as fragments, call
    its :meth:`~dict.keys` method and pass the result to :meth:`send`.
    :raises TypeError: for unsupported inputs
  summary: Send a message
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.send_data
  kind: method
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data_to_send
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Websocket.subprotocol
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Websocket.wait_for_connection_lost
  kind: method
  ns: sanic
  description: |-
    Wait until the TCP connection is closed or ``timeout`` elapses.
    If timeout is None, wait forever.
    Recommend you should pass in self.close_timeout as timeout

    Return ``True`` if the connection is closed and ``False`` otherwise.
  summary: Wait until the TCP connection is closed or ``timeout`` elapses
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DefaultSanic
  kind: const
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DefaultRequest
  kind: callable
  ns: sanic
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BadRequest
  kind: class
  ns: sanic
  description: |-
    400 Bad Request

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 400 Bad Request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: BadRequest
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BadRequest.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadRequest.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BadRequest.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: BadRequest.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BadRequest.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: BadRequest.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: BadRequest.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ExpectationFailed
  kind: class
  ns: sanic
  description: |-
    417 Expectation Failed

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 417 Expectation Failed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: ExpectationFailed
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ExpectationFailed.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ExpectationFailed.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ExpectationFailed.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: ExpectationFailed.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ExpectationFailed.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ExpectationFailed.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ExpectationFailed.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: FileNotFound
  kind: class
  ns: sanic
  description: |-
    404 Not Found

    A specific form of :class:`.NotFound` that is specifically when looking
    for a file on the file system at a known path.

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Not Found' will be sent. Defaults to `None`.
        path (Optional[PathLike], optional): The path, if any, to the file that could not
            be found. Defaults to `None`.
        relative_url (Optional[str], optional): A relative URL of the file. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 404 Not Found
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - kind: positional
      name: relative_url
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: FileNotFound
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.NotFound'>
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FileNotFound.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FileNotFound.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FileNotFound.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: FileNotFound.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: FileNotFound.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FileNotFound.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: FileNotFound.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Forbidden
  kind: class
  ns: sanic
  description: |-
    403 Forbidden

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 403 Forbidden
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: Forbidden
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Forbidden.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Forbidden.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Forbidden.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: Forbidden.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Forbidden.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Forbidden.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Forbidden.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: HeaderNotFound
  kind: class
  ns: sanic
  description: |-
    400 Bad Request

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 400 Bad Request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: HeaderNotFound
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.BadRequest'>
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: HeaderNotFound.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: HeaderNotFound.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HeaderNotFound.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: HeaderNotFound.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: HeaderNotFound.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HeaderNotFound.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HeaderNotFound.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InternalServerError
  kind: class
  ns: sanic
  description: |-
    500 Internal Server Error

    A general server-side error has occurred. If no other HTTP exception is
    appropriate, then this should be used

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 500 Internal Server Error
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: ServerError
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InternalServerError.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InternalServerError.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InternalServerError.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: InternalServerError.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: InternalServerError.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: InternalServerError.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: InternalServerError.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidHeader
  kind: class
  ns: sanic
  description: |-
    400 Bad Request

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 400 Bad Request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: InvalidHeader
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.BadRequest'>
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InvalidHeader.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidHeader.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InvalidHeader.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: InvalidHeader.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: InvalidHeader.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: InvalidHeader.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: InvalidHeader.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: MethodNotAllowed
  kind: class
  ns: sanic
  description: |-
    405 Method Not Allowed

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Method Not Allowed' will be sent. Defaults to `None`.
        method (Optional[str], optional): The HTTP method that was used. Defaults to an empty string.
        allowed_methods (Optional[Sequence[str]], optional): The HTTP methods that can be used instead of the
            one that was attempted.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 405 Method Not Allowed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - kind: positional
      name: allowed_methods
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: MethodNotAllowed
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: MethodNotAllowed.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: MethodNotAllowed.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MethodNotAllowed.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: MethodNotAllowed.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: MethodNotAllowed.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: MethodNotAllowed.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: MethodNotAllowed.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: NotFound
  kind: class
  ns: sanic
  description: |-
    A base class for other exceptions and should not be called directly.

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`,
            then the appropriate HTTP response status message will be used instead. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed from the logs.
            Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: A base class for other exceptions and should not be called directly
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: NotFound
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NotFound.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NotFound.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NotFound.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: NotFound.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: NotFound.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: NotFound.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: NotFound.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: RangeNotSatisfiable
  kind: class
  ns: sanic
  description: |-
    416 Range Not Satisfiable

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Range Not Satisfiable' will be sent. Defaults to `None`.
        content_range (Optional[ContentRange], optional): An object meeting the :class:`.ContentRange` protocol
            that has a `total` property. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 416 Range Not Satisfiable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - kind: positional
      name: content_range
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: RangeNotSatisfiable
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: RangeNotSatisfiable.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RangeNotSatisfiable.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RangeNotSatisfiable.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: RangeNotSatisfiable.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: RangeNotSatisfiable.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: RangeNotSatisfiable.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RangeNotSatisfiable.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SanicException
  kind: class
  ns: sanic
  description: |-
    Generic exception that will generate an HTTP response when raised in the context of a request lifecycle.

    Usually, it is best practice to use one of the more specific exceptions
    than this generic one. Even when trying to raise a 500, it is generally
    preferable to use `ServerError`.

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`,
            then the appropriate HTTP response status message will be used instead. Defaults to `None`.
        status_code (Optional[int], optional): The HTTP response code to send, if applicable. If `None`,
            then it will be 500. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed from the logs.
            Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.

    Examples:
        ```python
        raise SanicException(
            "Something went wrong",
            status_code=999,
            context={
                "info": "Some additional details to send to the client",
            },
            headers={
                "X-Foo": "bar"
            }
        )
        ```
  summary: Generic exception that will generate an HTTP response when raised in the context of a request lifecycle
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - kind: positional
      name: status_code
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: SanicException
      kind: return
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SanicException.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SanicException.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicException.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: SanicException.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: SanicException.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: SanicException.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: SanicException.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ServiceUnavailable
  kind: class
  ns: sanic
  description: |-
    503 Service Unavailable

    The server is currently unavailable (because it is overloaded or
    down for maintenance). Generally, this is a temporary state.

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 503 Service Unavailable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: ServiceUnavailable
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ServiceUnavailable.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ServiceUnavailable.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ServiceUnavailable.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: ServiceUnavailable.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ServiceUnavailable.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ServiceUnavailable.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ServiceUnavailable.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Unauthorized
  kind: class
  ns: sanic
  description: |-
    **Status**: 401 Unauthorized

    When present, additional keyword arguments may be used to complete
    the WWW-Authentication header.

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        scheme (Optional[str], optional): Name of the authentication scheme to be used. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
        **challenges (Dict[str, Any]): Additional keyword arguments that will be used to complete the
            WWW-Authentication header. Defaults to `None`.

    Examples:
        With a Basic auth-scheme, realm MUST be present:
        ```python
        raise Unauthorized(
            "Auth required.",
            scheme="Basic",
            realm="Restricted Area"
        )
        ```

        With a Digest auth-scheme, things are a bit more complicated:
        ```python
        raise Unauthorized(
            "Auth required.",
            scheme="Digest",
            realm="Restricted Area",
            qop="auth, auth-int",
            algorithm="MD5",
            nonce="abcdef",
            opaque="zyxwvu"
        )
        ```

        With a Bearer auth-scheme, realm is optional so you can write:
        ```python
        raise Unauthorized("Auth required.", scheme="Bearer")
        ```

        or, if you want to specify the realm:
        ```python
        raise Unauthorized(
            "Auth required.",
            scheme="Bearer",
            realm="Restricted Area"
        )
        ```
  summary: '**Status**: 401 Unauthorized'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - kind: positional
      name: scheme
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: Unauthorized
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Unauthorized.add_note
  kind: callable
  ns: sanic
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Unauthorized.args
  kind: property
  ns: sanic
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Unauthorized.headers
  kind: property
  ns: sanic
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: Unauthorized.message
  kind: property
  ns: sanic
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Unauthorized.quiet
  kind: property
  ns: sanic
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Unauthorized.status_code
  kind: property
  ns: sanic
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Unauthorized.with_traceback
  kind: callable
  ns: sanic
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: empty
  kind: function
  ns: sanic
  description: |-
    Returns an empty response to the client.

    Args:
        status (int, optional): HTTP response code. Defaults to `204`.
        headers ([type], optional): Custom HTTP headers. Defaults to `None`.

    Returns:
        HTTPResponse: An empty response to the client.
  summary: Returns an empty response to the client
  signatures:
  - - kind: positional
      name: status
      default: '204'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: file
  kind: function
  ns: sanic
  description: |-
    Return a response object with file data.

    Args:
        location (Union[str, PurePath]): Location of file on system.
        status (int, optional): HTTP response code. Won't enforce the passed in status if only a part of the content will be sent (206) or file is being validated (304). Defaults to 200.
        request_headers (Optional[Header], optional): The request headers.
        validate_when_requested (bool, optional): If `True`, will validate the file when requested. Defaults to True.
        mime_type (Optional[str], optional): Specific mime_type.
        headers (Optional[Dict[str, str]], optional): Custom Headers.
        filename (Optional[str], optional): Override filename.
        last_modified (Optional[Union[datetime, float, int, Default]], optional): The last modified date and time of the file.
        max_age (Optional[Union[float, int]], optional): Max age for cache control.
        no_store (Optional[bool], optional): Any cache should not store this response. Defaults to None.
        _range (Optional[Range], optional):

    Returns:
        HTTPResponse: The response object with the file data.
  summary: Return a response object with file data
  signatures:
  - - kind: positional
      name: location
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: request_headers
      default: None
      rest: false
    - kind: positional
      name: validate_when_requested
      default: 'True'
      rest: false
    - kind: positional
      name: mime_type
      default: None
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: filename
      default: None
      rest: false
    - kind: positional
      name: last_modified
      default: <Default>
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: no_store
      default: None
      rest: false
    - kind: positional
      name: _range
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: html
  kind: function
  ns: sanic
  description: |-
    Returns response object with body in html format.

    Body should be a `str` or `bytes` like object, or an object with `__html__` or `_repr_html_`.

    Args:
        body (Union[str, bytes, HTMLProtocol]): Response data.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.

    Returns:
        HTTPResponse: A response object with body in html format.
  summary: Returns response object with body in html format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: json
  kind: function
  ns: sanic
  description: |-
    Returns response object with body in json format.

    Args:
        body (Any): Response data to be serialized.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.
        content_type (str, optional): The content type (string) of the response. Defaults to `"application/json"`.
        dumps (Callable[..., str], optional): A custom json dumps function. Defaults to `None`.
        **kwargs (Any): Remaining arguments that are passed to the json encoder.

    Returns:
        JSONResponse: A response object with body in json format.
  summary: Returns response object with body in json format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: application/json
      rest: false
    - kind: positional
      name: dumps
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: raw
  kind: function
  ns: sanic
  description: |-
    Returns response object without encoding the body.

    Args:
        body (Optional[AnyStr]): Response data.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.
        content_type (str, optional): The content type (string) of the response. Defaults to `"application/octet-stream"`.

    Returns:
        HTTPResponse: A response object without encoding the body.
  summary: Returns response object without encoding the body
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: redirect
  kind: function
  ns: sanic
  description: |-
    Cause a HTTP redirect (302 by default) by setting a Location header.

    Args:
        to (str): path or fully qualified URL to redirect to
        headers (Optional[Dict[str, str]], optional): optional dict of headers to include in the new request. Defaults to None.
        status (int, optional): status code (int) of the new request, defaults to 302. Defaults to 302.
        content_type (str, optional): the content type (string) of the response. Defaults to "text/html; charset=utf-8".

    Returns:
        HTTPResponse: A response object with the redirect.
  summary: Cause a HTTP redirect (302 by default) by setting a Location header
  signatures:
  - - kind: positional
      name: to
      default: null
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: status
      default: '302'
      rest: false
    - kind: positional
      name: content_type
      default: text/html; charset=utf-8
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: text
  kind: function
  ns: sanic
  description: |-
    Returns response object with body in text format.

    Args:
        body (str): Response data.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.
        content_type (str, optional): The content type (string) of the response. Defaults to `"text/plain; charset=utf-8"`.

    Returns:
        HTTPResponse: A response object with body in text format.

    Raises:
        TypeError: If the body is not a string.
  summary: Returns response object with body in text format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: text/plain; charset=utf-8
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.app
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ASGIApp
  kind: class
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - type: ASGIApp
      kind: return
  inherits_from: null
- name: ASGIApp.create
  kind: function
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: sanic_app
      default: null
      rest: false
    - kind: positional
      name: scope
      default: null
      rest: false
    - kind: positional
      name: receive
      default: null
      rest: false
    - kind: positional
      name: send
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ASGIApp.read
  kind: method
  ns: sanic.app
  description: Read and stream the body in chunks from an incoming ASGI message.
  summary: Read and stream the body in chunks from an incoming ASGI message
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ASGIApp.respond
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ASGIApp.send
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: end_stream
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop
  kind: class
  ns: sanic.app
  description: Abstract event loop.
  summary: Abstract event loop
  signatures:
  - - type: AbstractEventLoop
      kind: return
  inherits_from: null
- name: AbstractEventLoop.add_reader
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fd
      default: null
      rest: false
    - kind: positional
      name: callback
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.add_signal_handler
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sig
      default: null
      rest: false
    - kind: positional
      name: callback
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.add_writer
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fd
      default: null
      rest: false
    - kind: positional
      name: callback
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.call_at
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: when
      default: null
      rest: false
    - kind: positional
      name: callback
      default: null
      rest: false
    - name: context
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.call_exception_handler
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.call_later
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: delay
      default: null
      rest: false
    - kind: positional
      name: callback
      default: null
      rest: false
    - name: context
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.call_soon
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: callback
      default: null
      rest: false
    - name: context
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.call_soon_threadsafe
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: callback
      default: null
      rest: false
    - name: context
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.close
  kind: method
  ns: sanic.app
  description: |-
    Close the loop.

    The loop should not be running.

    This is idempotent and irreversible.

    No other methods should be called after this one.
  summary: Close the loop
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.connect_accepted_socket
  kind: method
  ns: sanic.app
  description: |-
    Handle an accepted connection.

    This is used by servers that accept connections outside of
    asyncio, but use asyncio to handle connections.

    This method is a coroutine.  When completed, the coroutine
    returns a (transport, protocol) pair.
  summary: Handle an accepted connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: ssl_handshake_timeout
      default: None
      rest: false
      kind: kw-only
    - name: ssl_shutdown_timeout
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.connect_read_pipe
  kind: method
  ns: sanic.app
  description: |-
    Register read pipe in event loop. Set the pipe to non-blocking mode.

    protocol_factory should instantiate object with Protocol interface.
    pipe is a file-like object.
    Return pair (transport, protocol), where transport supports the
    ReadTransport interface.
  summary: Register read pipe in event loop
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - kind: positional
      name: pipe
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.connect_write_pipe
  kind: method
  ns: sanic.app
  description: |-
    Register write pipe in event loop.

    protocol_factory should instantiate object with BaseProtocol interface.
    Pipe is file-like object already switched to nonblocking.
    Return pair (transport, protocol), where transport support
    WriteTransport interface.
  summary: Register write pipe in event loop
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - kind: positional
      name: pipe
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.create_connection
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: port
      default: None
      rest: false
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: family
      default: '0'
      rest: false
      kind: kw-only
    - name: proto
      default: '0'
      rest: false
      kind: kw-only
    - name: flags
      default: '0'
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: local_addr
      default: None
      rest: false
      kind: kw-only
    - name: server_hostname
      default: None
      rest: false
      kind: kw-only
    - name: ssl_handshake_timeout
      default: None
      rest: false
      kind: kw-only
    - name: ssl_shutdown_timeout
      default: None
      rest: false
      kind: kw-only
    - name: happy_eyeballs_delay
      default: None
      rest: false
      kind: kw-only
    - name: interleave
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.create_datagram_endpoint
  kind: method
  ns: sanic.app
  description: |-
    A coroutine which creates a datagram endpoint.

    This method will try to establish the endpoint in the background.
    When successful, the coroutine returns a (transport, protocol) pair.

    protocol_factory must be a callable returning a protocol instance.

    socket family AF_INET, socket.AF_INET6 or socket.AF_UNIX depending on
    host (or family if specified), socket type SOCK_DGRAM.

    reuse_address tells the kernel to reuse a local socket in
    TIME_WAIT state, without waiting for its natural timeout to
    expire. If not specified it will automatically be set to True on
    UNIX.

    reuse_port tells the kernel to allow this endpoint to be bound to
    the same port as other existing endpoints are bound to, so long as
    they all set this flag when being created. This option is not
    supported on Windows and some UNIX's. If the
    :py:data:`~socket.SO_REUSEPORT` constant is not defined then this
    capability is unsupported.

    allow_broadcast tells the kernel to allow this endpoint to send
    messages to the broadcast address.

    sock can optionally be specified in order to use a preexisting
    socket object.
  summary: A coroutine which creates a datagram endpoint
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - kind: positional
      name: local_addr
      default: None
      rest: false
    - kind: positional
      name: remote_addr
      default: None
      rest: false
    - name: family
      default: '0'
      rest: false
      kind: kw-only
    - name: proto
      default: '0'
      rest: false
      kind: kw-only
    - name: flags
      default: '0'
      rest: false
      kind: kw-only
    - name: reuse_address
      default: None
      rest: false
      kind: kw-only
    - name: reuse_port
      default: None
      rest: false
      kind: kw-only
    - name: allow_broadcast
      default: None
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.create_future
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.create_server
  kind: method
  ns: sanic.app
  description: |-
    A coroutine which creates a TCP server bound to host and port.

    The return value is a Server object which can be used to stop
    the service.

    If host is an empty string or None all interfaces are assumed
    and a list of multiple sockets will be returned (most likely
    one for IPv4 and another one for IPv6). The host parameter can also be
    a sequence (e.g. list) of hosts to bind to.

    family can be set to either AF_INET or AF_INET6 to force the
    socket to use IPv4 or IPv6. If not set it will be determined
    from host (defaults to AF_UNSPEC).

    flags is a bitmask for getaddrinfo().

    sock can optionally be specified in order to use a preexisting
    socket object.

    backlog is the maximum number of queued connections passed to
    listen() (defaults to 100).

    ssl can be set to an SSLContext to enable SSL over the
    accepted connections.

    reuse_address tells the kernel to reuse a local socket in
    TIME_WAIT state, without waiting for its natural timeout to
    expire. If not specified will automatically be set to True on
    UNIX.

    reuse_port tells the kernel to allow this endpoint to be bound to
    the same port as other existing endpoints are bound to, so long as
    they all set this flag when being created. This option is not
    supported on Windows.

    ssl_handshake_timeout is the time in seconds that an SSL server
    will wait for completion of the SSL handshake before aborting the
    connection. Default is 60s.

    ssl_shutdown_timeout is the time in seconds that an SSL server
    will wait for completion of the SSL shutdown procedure
    before aborting the connection. Default is 30s.

    start_serving set to True (default) causes the created server
    to start accepting connections immediately.  When set to False,
    the user should await Server.start_serving() or Server.serve_forever()
    to make the server to start accepting connections.
  summary: A coroutine which creates a TCP server bound to host and port
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: port
      default: None
      rest: false
    - name: family
      default: '0'
      rest: false
      kind: kw-only
    - name: flags
      default: '1'
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: backlog
      default: '100'
      rest: false
      kind: kw-only
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: reuse_address
      default: None
      rest: false
      kind: kw-only
    - name: reuse_port
      default: None
      rest: false
      kind: kw-only
    - name: ssl_handshake_timeout
      default: None
      rest: false
      kind: kw-only
    - name: ssl_shutdown_timeout
      default: None
      rest: false
      kind: kw-only
    - name: start_serving
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.create_task
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: coro
      default: null
      rest: false
    - name: name
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.create_unix_connection
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: server_hostname
      default: None
      rest: false
      kind: kw-only
    - name: ssl_handshake_timeout
      default: None
      rest: false
      kind: kw-only
    - name: ssl_shutdown_timeout
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.create_unix_server
  kind: method
  ns: sanic.app
  description: |-
    A coroutine which creates a UNIX Domain Socket server.

    The return value is a Server object, which can be used to stop
    the service.

    path is a str, representing a file system path to bind the
    server socket to.

    sock can optionally be specified in order to use a preexisting
    socket object.

    backlog is the maximum number of queued connections passed to
    listen() (defaults to 100).

    ssl can be set to an SSLContext to enable SSL over the
    accepted connections.

    ssl_handshake_timeout is the time in seconds that an SSL server
    will wait for the SSL handshake to complete (defaults to 60s).

    ssl_shutdown_timeout is the time in seconds that an SSL server
    will wait for the SSL shutdown to finish (defaults to 30s).

    start_serving set to True (default) causes the created server
    to start accepting connections immediately.  When set to False,
    the user should await Server.start_serving() or Server.serve_forever()
    to make the server to start accepting connections.
  summary: A coroutine which creates a UNIX Domain Socket server
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: backlog
      default: '100'
      rest: false
      kind: kw-only
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: ssl_handshake_timeout
      default: None
      rest: false
      kind: kw-only
    - name: ssl_shutdown_timeout
      default: None
      rest: false
      kind: kw-only
    - name: start_serving
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.default_exception_handler
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.get_debug
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.get_exception_handler
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.get_task_factory
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.getaddrinfo
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: port
      default: null
      rest: false
    - name: family
      default: '0'
      rest: false
      kind: kw-only
    - name: type
      default: '0'
      rest: false
      kind: kw-only
    - name: proto
      default: '0'
      rest: false
      kind: kw-only
    - name: flags
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.getnameinfo
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sockaddr
      default: null
      rest: false
    - kind: positional
      name: flags
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.is_closed
  kind: method
  ns: sanic.app
  description: Returns True if the event loop was closed.
  summary: Returns True if the event loop was closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.is_running
  kind: method
  ns: sanic.app
  description: Return whether the event loop is currently running.
  summary: Return whether the event loop is currently running
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.remove_reader
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fd
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.remove_signal_handler
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sig
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.remove_writer
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fd
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.run_forever
  kind: method
  ns: sanic.app
  description: Run the event loop until stop() is called.
  summary: Run the event loop until stop() is called
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.run_in_executor
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: executor
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.run_until_complete
  kind: method
  ns: sanic.app
  description: |-
    Run the event loop until a Future is done.

    Return the Future's result, or raise its exception.
  summary: Run the event loop until a Future is done
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: future
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sendfile
  kind: method
  ns: sanic.app
  description: |-
    Send a file through a transport.

    Return an amount of sent bytes.
  summary: Send a file through a transport
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: transport
      default: null
      rest: false
    - kind: positional
      name: file
      default: null
      rest: false
    - kind: positional
      name: offset
      default: '0'
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - name: fallback
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.set_debug
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: enabled
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.set_default_executor
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: executor
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.set_exception_handler
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.set_task_factory
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: factory
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.shutdown_asyncgens
  kind: method
  ns: sanic.app
  description: Shutdown all active asynchronous generators.
  summary: Shutdown all active asynchronous generators
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.shutdown_default_executor
  kind: method
  ns: sanic.app
  description: Schedule the shutdown of the default executor.
  summary: Schedule the shutdown of the default executor
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sock_accept
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sock_connect
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: address
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sock_recv
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: nbytes
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sock_recv_into
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: buf
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sock_recvfrom
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: bufsize
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sock_recvfrom_into
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: buf
      default: null
      rest: false
    - kind: positional
      name: nbytes
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sock_sendall
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sock_sendfile
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: file
      default: null
      rest: false
    - kind: positional
      name: offset
      default: '0'
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - name: fallback
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.sock_sendto
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: address
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.start_tls
  kind: method
  ns: sanic.app
  description: |-
    Upgrade a transport to TLS.

    Return a new transport that *protocol* should start using
    immediately.
  summary: Upgrade a transport to TLS
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: transport
      default: null
      rest: false
    - kind: positional
      name: protocol
      default: null
      rest: false
    - kind: positional
      name: sslcontext
      default: null
      rest: false
    - name: server_side
      default: 'False'
      rest: false
      kind: kw-only
    - name: server_hostname
      default: None
      rest: false
      kind: kw-only
    - name: ssl_handshake_timeout
      default: None
      rest: false
      kind: kw-only
    - name: ssl_shutdown_timeout
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.stop
  kind: method
  ns: sanic.app
  description: |-
    Stop the event loop as soon as reasonable.

    Exactly how soon that is may depend on the implementation, but
    no more I/O callbacks should be scheduled.
  summary: Stop the event loop as soon as reasonable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.subprocess_exec
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - name: stdin
      default: '-1'
      rest: false
      kind: kw-only
    - name: stdout
      default: '-1'
      rest: false
      kind: kw-only
    - name: stderr
      default: '-1'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.subprocess_shell
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol_factory
      default: null
      rest: false
    - kind: positional
      name: cmd
      default: null
      rest: false
    - name: stdin
      default: '-1'
      rest: false
      kind: kw-only
    - name: stdout
      default: '-1'
      rest: false
      kind: kw-only
    - name: stderr
      default: '-1'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AbstractEventLoop.time
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Any
  kind: class
  ns: sanic.app
  description: |-
    Special type indicating an unconstrained type.

    - Any is compatible with every type.
    - Any assumed to have all methods.
    - All values assumed to be instances of Any.

    Note that all the above statements are true from the point of view of
    static type checkers. At runtime, Any should not be used with instance
    checks.
  summary: Special type indicating an unconstrained type
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Any
      kind: return
  inherits_from: null
- name: AnyStr
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ApplicationState
  kind: class
  ns: sanic.app
  description: |-
    Application state.

    This class is used to store the state of the application. It is
    instantiated by the application and is available as `app.state`.
  summary: Application state
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: asgi
      default: 'False'
      rest: false
    - kind: positional
      name: coffee
      default: 'False'
      rest: false
    - kind: positional
      name: fast
      default: 'False'
      rest: false
    - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: port
      default: '0'
      rest: false
    - kind: positional
      name: ssl
      default: None
      rest: false
    - kind: positional
      name: sock
      default: None
      rest: false
    - kind: positional
      name: unix
      default: None
      rest: false
    - kind: positional
      name: mode
      default: production
      rest: false
    - kind: positional
      name: reload_dirs
      default: <factory>
      rest: false
    - kind: positional
      name: auto_reload
      default: 'False'
      rest: false
    - kind: positional
      name: server
      default: sanic
      rest: false
    - kind: positional
      name: is_running
      default: 'False'
      rest: false
    - kind: positional
      name: is_started
      default: 'False'
      rest: false
    - kind: positional
      name: is_stopping
      default: 'False'
      rest: false
    - kind: positional
      name: verbosity
      default: '0'
      rest: false
    - kind: positional
      name: workers
      default: '0'
      rest: false
    - kind: positional
      name: primary
      default: 'True'
      rest: false
    - kind: positional
      name: server_info
      default: <factory>
      rest: false
    - kind: positional
      name: _init
      default: 'False'
      rest: false
    - type: ApplicationState
      kind: return
  inherits_from: null
- name: ApplicationState.asgi
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ApplicationState.auto_reload
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ApplicationState.coffee
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ApplicationState.fast
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ApplicationState.host
  kind: property
  ns: sanic.app
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ApplicationState.is_debug
  kind: property
  ns: sanic.app
  description: |-
    Check if the application is in debug mode.

    Returns:
        bool: `True` if the application is in debug mode, `False`
            otherwise.
  summary: Check if the application is in debug mode
  signatures: null
  inherits_from: null
- name: ApplicationState.is_running
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ApplicationState.is_started
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ApplicationState.is_stopping
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ApplicationState.mode
  kind: property
  ns: sanic.app
  description: Server modes.
  summary: Server modes
  signatures: null
  inherits_from: null
- name: ApplicationState.port
  kind: property
  ns: sanic.app
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ApplicationState.primary
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ApplicationState.server
  kind: property
  ns: sanic.app
  description: Server types.
  summary: Server types
  signatures: null
  inherits_from: null
- name: ApplicationState.set_mode
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ApplicationState.set_verbosity
  kind: method
  ns: sanic.app
  description: |-
    Set the verbosity level.

    Args:
        value (int): Verbosity level.
  summary: Set the verbosity level
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ApplicationState.sock
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ApplicationState.ssl
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ApplicationState.stage
  kind: property
  ns: sanic.app
  description: |-
    Get the server stage.

    Returns:
        ServerStage: Server stage.
  summary: Get the server stage
  signatures: null
  inherits_from: null
- name: ApplicationState.unix
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ApplicationState.verbosity
  kind: property
  ns: sanic.app
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ApplicationState.workers
  kind: property
  ns: sanic.app
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Awaitable
  kind: callable
  ns: sanic.app
  description: A generic version of collections.abc.Awaitable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseHTTPResponse
  kind: class
  ns: sanic.app
  description: The base class for all HTTP Responses
  summary: The base class for all HTTP Responses
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: BaseHTTPResponse
      kind: return
  inherits_from: null
- name: BaseHTTPResponse.add_cookie
  kind: method
  ns: sanic.app
  description: |-
    Add a cookie to the CookieJar

    See [Cookies](/en/guide/basics/cookies.html)

    Args:
        key (str): The key to be added
        value (str): The value to be added
        path (str, optional): Path of the cookie. Defaults to `"/"`.
        domain (Optional[str], optional): Domain of the cookie. Defaults to `None`.
        secure (bool, optional): Whether the cookie is secure. Defaults to `True`.
        max_age (Optional[int], optional): Max age of the cookie. Defaults to `None`.
        expires (Optional[datetime], optional): Expiry date of the cookie. Defaults to `None`.
        httponly (bool, optional): Whether the cookie is http only. Defaults to `False`.
        samesite (Optional[SameSite], optional): SameSite policy of the cookie. Defaults to `"Lax"`.
        partitioned (bool, optional): Whether the cookie is partitioned. Defaults to `False`.
        comment (Optional[str], optional): Comment of the cookie. Defaults to `None`.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key. This requires that path="/", domain=None, and secure=True. Defaults to `False`.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key. This requires that secure=True. Defaults to `False`.

    Returns:
        Cookie: The cookie that was added
  summary: Add a cookie to the CookieJar
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - name: path
      default: /
      rest: false
      kind: kw-only
    - name: domain
      default: None
      rest: false
      kind: kw-only
    - name: secure
      default: 'True'
      rest: false
      kind: kw-only
    - name: max_age
      default: None
      rest: false
      kind: kw-only
    - name: expires
      default: None
      rest: false
      kind: kw-only
    - name: httponly
      default: 'False'
      rest: false
      kind: kw-only
    - name: samesite
      default: Lax
      rest: false
      kind: kw-only
    - name: partitioned
      default: 'False'
      rest: false
      kind: kw-only
    - name: comment
      default: None
      rest: false
      kind: kw-only
    - name: host_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - name: secure_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseHTTPResponse.asgi
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.body
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.content_type
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.cookies
  kind: property
  ns: sanic.app
  description: |-
    The response cookies.

    See [Cookies](/en/guide/basics/cookies.html)

    Returns:
        CookieJar: The response cookies
  summary: The response cookies
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.delete_cookie
  kind: method
  ns: sanic.app
  description: |-
    Delete a cookie

    This will effectively set it as Max-Age: 0, which a browser should
    interpret it to mean: "delete the cookie".

    Since it is a browser/client implementation, your results may vary
    depending upon which client is being used.

    See [Cookies](/en/guide/basics/cookies.html)

    Args:
        key (str): The key to be deleted
        path (str, optional): Path of the cookie. Defaults to `"/"`.
        domain (Optional[str], optional): Domain of the cookie. Defaults to `None`.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key. This requires that path="/", domain=None, and secure=True. Defaults to `False`.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key. This requires that secure=True. Defaults to `False`.
  summary: Delete a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - name: path
      default: /
      rest: false
      kind: kw-only
    - name: domain
      default: None
      rest: false
      kind: kw-only
    - name: host_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - name: secure_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseHTTPResponse.headers
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.processed_headers
  kind: property
  ns: sanic.app
  description: |-
    Obtain a list of header tuples encoded in bytes for sending.

    Add and remove headers based on status and content_type.

    Returns:
        Iterator[Tuple[bytes, bytes]]: A list of header tuples encoded in bytes for sending
  summary: Obtain a list of header tuples encoded in bytes for sending
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.send
  kind: method
  ns: sanic.app
  description: |-
    Send any pending response headers and the given data as body.

    Args:
        data (Optional[AnyStr], optional): str or bytes to be written. Defaults to `None`.
        end_stream (Optional[bool], optional): whether to close the stream after this block. Defaults to `None`.
  summary: Send any pending response headers and the given data as body
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: end_stream
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseHTTPResponse.status
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.stream
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseSanic
  kind: class
  ns: sanic.app
  description: Base class for some other mixins.
  summary: Base class for some other mixins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: BaseSanic
      kind: return
  inherits_from:
  - <class 'sanic.mixins.routes.RouteMixin'>
  - <class 'sanic.mixins.static.StaticMixin'>
  - <class 'sanic.mixins.base.BaseMixin'>
  - <class 'sanic.mixins.middleware.MiddlewareMixin'>
  - <class 'sanic.mixins.listeners.ListenerMixin'>
  - <class 'sanic.mixins.exceptions.ExceptionMixin'>
  - <class 'sanic.mixins.signals.SignalMixin'>
- name: BaseSanic.add_route
  kind: method
  ns: sanic.app
  description: |-
    A helper method to register class-based view or functions as a handler to the application url routes.

    Args:
        handler (RouteHandler): Function or class-based view used as a route handler.
        uri (str): Path of the URL.
        methods (Iterable[str]): List or tuple of methods allowed; these are overridden if using an HTTPMethodView.
        host (Optional[Union[str, List[str]]]): Hostname or hostnames to match for this route.
        strict_slashes (Optional[bool]): If set, a route's slashes will be strict. E.g. `/foo` will not match `/foo/`.
        version (Optional[Union[int, str, float]]): Version of the API for this route.
        name (Optional[str]): User-defined route name for `url_for`.
        stream (bool): Boolean specifying if the handler is a stream handler.
        version_prefix (str): URL path that should be before the version value; default: ``/v``.
        error_format (Optional[str]): Custom error format string.
        unquote (bool): Boolean specifying if the handler requires unquoting.
        ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*` prefix will be appended to the route context (``route.ctx``). See below for examples.

    Returns:
        RouteHandler: The route handler.

    Examples:
        ```python
        from sanic import Sanic, text

        app = Sanic("test")

        async def handler(request):
            return text("OK")

        app.add_route(handler, "/test", methods=["GET", "POST"])
        ```

        You can use `ctx_kwargs` to add custom context to the route. This
        can often be useful when wanting to add metadata to a route that
        can be used by other parts of the application (like middleware).

        ```python
        from sanic import Sanic, text

        app = Sanic("test")

        async def handler(request):
            return text("OK")

        async def custom_middleware(request):
            if request.route.ctx.monitor:
                do_some_monitoring()

        app.add_route(handler, "/test", methods=["GET", "POST"], ctx_monitor=True)
        app.register_middleware(custom_middleware)
  summary: A helper method to register class-based view or functions as a handler to the application url routes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: frozenset({'GET'})
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.add_signal
  kind: method
  ns: sanic.app
  description: |-
    Registers a signal handler for a specific event.

    Args:
        handler (Optional[Callable[..., Any]]): The function to be called
            when the event occurs. Defaults to a noop if not provided.
        event (str): The name of the event to listen for.
        condition (Optional[Dict[str, Any]]): Optional condition to filter
            the event triggering. Defaults to `None`.
        exclusive (bool): Whether or not the handler is exclusive. When
            `True`, the signal can only be dispatched when the
            `condition` has been met. *This is inapplicable to blueprint
            signals, which are **ALWAYS** non-exclusive.* Defaults
            to `True`.

    Returns:
        Callable[..., Any]: The handler that was registered.
  summary: Registers a signal handler for a specific event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: condition
      default: None
      rest: false
    - kind: positional
      name: exclusive
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.add_websocket_route
  kind: method
  ns: sanic.app
  description: |-
    A helper method to register a function as a websocket route.

    Args:
        handler (Callable): A callable function or instance of a class
            that can handle the websocket request.
        uri (str): URL path that will be mapped to the websocket handler.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN details.
        strict_slashes (Optional[bool]): If the API endpoint needs to
            terminate with a `"/"` or not.
        subprotocols (Optional[List[str]]): Subprotocols to be used with
            websocket handshake.
        version (Optional[Union[int, str, float]]): Versioning information.
        name (Optional[str]): A unique name assigned to the URL.
        version_prefix (str): URL path before the version value.
            Defaults to `"/v"`.
        error_format (Optional[str]): Format for error handling.
        **ctx_kwargs (Any): Keyword arguments beginning with `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        Callable: Object passed as the handler.
  summary: A helper method to register a function as a websocket route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.after_reload_trigger
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the after_reload_trigger event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This event is fired after the reload process
    triggers the reload. A change event has been detected and the reload
    process has been triggered.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_reload_trigger
        async def on_after_reload_trigger(app: Sanic, changed: set[str]):
            print("After reload trigger, changed files: ", changed)
        ```
  summary: Decorator for registering a listener for the after_reload_trigger event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.after_server_start
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the after_server_start event.

    This event is fired on all worker processes. You should typically
    use this event to run background tasks, or perform other actions that
    are not directly related to handling requests. In theory, it is
    possible that some requests may be handled before this event is fired,
    so you should not use this event to initialize resources that are
    required for handling requests.

    A common use case for this event is to start a background task that
    periodically performs some action, such as clearing a cache or
    performing a health check.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_server_start
        async def on_after_server_start(app: Sanic):
            print("After server start")
        ```
  summary: Decorator for registering a listener for the after_server_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.after_server_stop
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the after_server_stop event.

    This event is fired on all worker processes. This event is fired
    after the server has stopped shutting down, and all requests have
    been handled. You should typically use this event to clean up
    resources that were initialized in the before_server_start event.

    A common use case for this event is to close a database connection
    pool, or to close a cache client.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_server_stop
        async def on_after_server_stop(app: Sanic):
            print("After server stop")
        ```
  summary: Decorator for registering a listener for the after_server_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.all_exceptions
  kind: method
  ns: sanic.app
  description: |-
    Enables the process of creating a global exception handler as a convenience.

    This following two examples are equivalent:

    ```python
    @app.exception(Exception)
    async def handler(request: Request, exception: Exception) -> HTTPResponse:
        return text(f"Exception raised: {exception}")
    ```

    ```python
    @app.all_exceptions
    async def handler(request: Request, exception: Exception) -> HTTPResponse:
        return text(f"Exception raised: {exception}")
    ```

    Args:
        handler (Callable[..., Any]): A coroutine function to handle exceptions.

    Returns:
        Callable[..., Any]: A decorated method to handle global exceptions for
            any route registered under this blueprint.
  summary: Enables the process of creating a global exception handler as a convenience
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.before_reload_trigger
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the before_reload_trigger event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This event is fired before the reload process
    triggers the reload. A change event has been detected and the reload
    process is about to be triggered.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_reload_trigger
        async def on_before_reload_trigger(app: Sanic):
            print("Before reload trigger")
        ```
  summary: Decorator for registering a listener for the before_reload_trigger event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.before_server_start
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the before_server_start event.

    This event is fired on all worker processes. You should typically
    use this event to initialize resources that are global in nature, or
    will be shared across requests and various parts of the application.

    A common use case for this event is to initialize a database connection
    pool, or to initialize a cache client.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_server_start
        async def on_before_server_start(app: Sanic):
            print("Before server start")
        ```
  summary: Decorator for registering a listener for the before_server_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.before_server_stop
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the before_server_stop event.

    This event is fired on all worker processes. This event is fired
    before the server starts shutting down. You should not use this event
    to perform any actions that are required for handling requests, as
    some requests may continue to be handled after this event is fired.

    A common use case for this event is to stop a background task that
    was started in the after_server_start event.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_server_stop
        async def on_before_server_stop(app: Sanic):
            print("Before server stop")
        ```
  summary: Decorator for registering a listener for the before_server_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.catch_exception
  kind: method
  ns: sanic.app
  description: |-
    Register an exception handler for logging or processing.

    This method allows the registration of a custom exception handler to
    catch and process exceptions that occur in the application. Unlike a
    typical exception handler that might modify the response to the client,
    this is intended to capture exceptions for logging or other internal
    processing, such as sending them to an error reporting utility.

    Args:
        handler (Callable): A coroutine function that takes the application
            instance and the exception as arguments. It will be called when
            an exception occurs within the application's lifecycle.

    Example:
        ```python
        app = Sanic("TestApp")

        @app.catch_exception
        async def report_exception(app: Sanic, exception: Exception):
            logging.error(f"An exception occurred: {exception}")

            # Send to an error reporting service
            await error_service.report(exception)

        # Any unhandled exceptions within the application will now be
        # logged and reported to the error service.
        ```
  summary: Register an exception handler for logging or processing
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.delete
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function handler to create a route definition using the **DELETE** HTTP method.

    Args:
        uri (str): URL to be tagged to the DELETE method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for the
            service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a */*.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the Route.
        ignore_body (bool): Whether or not to ignore the body in the
            request. Defaults to `False`.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **DELETE** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.event
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.exception
  kind: method
  ns: sanic.app
  description: |-
    Decorator used to register an exception handler for the current application or blueprint instance.

    This method allows you to define a handler for specific exceptions that
    may be raised within the routes of this blueprint. You can specify one
    or more exception types to catch, and the handler will be applied to
    those exceptions.

    When used on a Blueprint, the handler will only be applied to routes
    registered under that blueprint. That means they only apply to
    requests that have been matched, and the exception is raised within
    the handler function (or middleware) for that route.

    A general exception like `NotFound` should only be registered on the
    application instance, not on a blueprint.

    See [Exceptions](/en/guide/best-practices/exceptions.html) for more information.

    Args:
        exceptions (Union[Type[Exception], List[Type[Exception]]]): List of
            Python exceptions to be caught by the handler.
        apply (bool, optional): Whether the exception handler should be
            applied. Defaults to True.

    Returns:
        Callable: A decorated method to handle global exceptions for any route
            registered under this blueprint.

    Example:
        ```python
        from sanic import Blueprint, text

        bp = Blueprint('my_blueprint')

        @bp.exception(Exception)
        def handle_exception(request, exception):
            return text("Oops, something went wrong!", status=500)
        ```

        ```python
        from sanic import Sanic, NotFound, text

        app = Sanic('MyApp')

        @app.exception(NotFound)
        def ignore_404s(request, exception):
            return text(f"Yep, I totally found the page: {request.url}")
  summary: Decorator used to register an exception handler for the current application or blueprint instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: apply
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.finalize_middleware
  kind: method
  ns: sanic.app
  description: |-
    Finalize the middleware configuration for the Sanic application.

    This method completes the middleware setup for the application.
    Middleware in Sanic is used to process requests globally before they
    reach individual routes or after routes have been processed.

    Finalization consists of identifying defined routes and optimizing
    Sanic's performance to meet the application's specific needs. If
    you are manually adding routes, after Sanic has started, you will
    typically want to use the `amend` context manager rather than
    calling this method directly.

    .. note::
        This method is usually called internally during the server setup
        process and does not typically need to be invoked manually.

    Example:
        ```python
        app.finalize_middleware()
        ```
  summary: Finalize the middleware configuration for the Sanic application
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.get
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function handler to create a route definition using the **GET** HTTP method.

    Args:
        uri (str): URL to be tagged to GET method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_* prefix` will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **GET** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.head
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function handler to create a route definition using the **HEAD** HTTP method.

    Args:
        uri (str): URL to be tagged to HEAD method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **HEAD** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.listener
  kind: method
  ns: sanic.app
  description: |-
    Create a listener for a specific event in the application's lifecycle.

    See [Listeners](/en/guide/basics/listeners) for more details.

    .. note::
        Overloaded signatures allow for different ways of calling this method, depending on the types of the arguments.

        Usually, it is prederred to use one of the convenience methods such as `before_server_start` or `after_server_stop` instead of calling this method directly.

        ```python
        @app.before_server_start
        async def prefered_method(_):
            ...

        @app.listener("before_server_start")
        async def not_prefered_method(_):
            ...

    Args:
        listener_or_event (Union[ListenerType[Sanic], str]): A listener function or an event name.
        event_or_none (Optional[str]): The event name to listen for if `listener_or_event` is a function. Defaults to `None`.
        apply (bool): Whether to apply the listener immediately. Defaults to `True`.
        priority (int): The priority of the listener. Defaults to `0`.

    Returns:
        Union[ListenerType[Sanic], Callable[[ListenerType[Sanic]], ListenerType[Sanic]]]: The listener or a callable that takes a listener.

    Example:
        The following code snippet shows how you can use this method as a decorator:

        ```python
        @bp.listener("before_server_start")
        async def before_server_start(app, loop):
            ...
        ```
  summary: Create a listener for a specific event in the application's lifecycle
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener_or_event
      default: null
      rest: false
    - kind: positional
      name: event_or_none
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.main_process_ready
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the main_process_ready event.

    This event is fired only on the main process and **NOT** on any
    worker processes. It is fired after the main process has started and
    the Worker Manager has been initialized (ie, you will have access to
    `app.manager` instance). The typical use case for this event is to
    add a managed process to the Worker Manager.

    See [Running custom processes](/en/guide/deployment/manager.html#running-custom-processes) and [Listeners](/en/guide/basics/listeners.html) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_ready
        async def on_main_process_ready(app: Sanic):
            print("Main process ready")
        ```
  summary: Decorator for registering a listener for the main_process_ready event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.main_process_start
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the main_process_start event.

    This event is fired only on the main process and **NOT** on any
    worker processes. You should typically use this event to initialize
    resources that are shared across workers, or to initialize resources
    that are not safe to be initialized in a worker process.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_start
        async def on_main_process_start(app: Sanic):
            print("Main process started")
        ```
  summary: Decorator for registering a listener for the main_process_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.main_process_stop
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the main_process_stop event.

    This event is fired only on the main process and **NOT** on any
    worker processes. You should typically use this event to clean up
    resources that were initialized in the main_process_start event.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_stop
        async def on_main_process_stop(app: Sanic):
            print("Main process stopped")
        ```
  summary: Decorator for registering a listener for the main_process_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.middleware
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering middleware.

    Decorate and register middleware to be called before a request is
    handled or after a response is created. Can either be called as
    *@app.middleware* or *@app.middleware('request')*. Although, it is
    recommended to use *@app.on_request* or *@app.on_response* instead
    for clarity and convenience.

    See [Middleware](/guide/basics/middleware) for more information.

    Args:
        middleware_or_request (Union[Callable, str]): Middleware function
            or the keyword 'request' or 'response'.
        attach_to (str, optional): When to apply the middleware;
            either 'request' (before the request is handled) or 'response'
            (after the response is created). Defaults to `'request'`.
        apply (bool, optional): Whether the middleware should be applied.
            Defaults to `True`.
        priority (int, optional): The priority level of the middleware.
            Lower numbers are executed first. Defaults to `0`.

    Returns:
        Union[Callable, Callable[[Callable], Callable]]: The decorated
            middleware function or a partial function depending on how
            the method was called.

    Example:
        ```python
        @app.middleware('request')
        async def custom_middleware(request):
            ...
        ```
  summary: Decorator for registering middleware
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware_or_request
      default: null
      rest: false
    - kind: positional
      name: attach_to
      default: request
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.name
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseSanic.on_request
  kind: method
  ns: sanic.app
  description: |-
    Register a middleware to be called before a request is handled.

    This is the same as *@app.middleware('request')*.

    Args:
        middleware (Callable, optional): A callable that takes in a
            request. Defaults to `None`.

    Returns:
        Callable: The decorated middleware function or a partial function
            depending on how the method was called.

    Examples:
        ```python
        @app.on_request
        async def custom_middleware(request):
            request.ctx.custom = 'value'
        ```
  summary: Register a middleware to be called before a request is handled
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.on_response
  kind: method
  ns: sanic.app
  description: |-
    Register a middleware to be called after a response is created.

    This is the same as *@app.middleware('response')*.

    Args:
        middleware (Callable, optional): A callable that takes in a
            request and response. Defaults to `None`.

    Returns:
        Callable: The decorated middleware function or a partial function
            depending on how the method was called.

    Examples:
        ```python
        @app.on_response
        async def custom_middleware(request, response):
            response.headers['X-Server'] = 'Sanic'
        ```
  summary: Register a middleware to be called after a response is created
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.options
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function handler to create a route definition using the **OPTIONS** HTTP method.

    Args:
        uri (str): URL to be tagged to OPTIONS method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **OPTIONS** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.patch
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function handler to create a route definition using the **PATCH** HTTP method.

    Args:
        uri (str): URL to be tagged to PATCH method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Set to `True` if full request streaming is needed,
            `False` otherwise. Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **PATCH** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.post
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function handler to create a route definition using the **POST** HTTP method.

    Args:
        uri (str): URL to be tagged to POST method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Whether or not to stream the request body.
            Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **POST** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.put
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function handler to create a route definition using the **PUT** HTTP method.

    Args:
        uri (str): URL to be tagged to PUT method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Whether or not to stream the request body.
            Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **PUT** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.reload_process_start
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the reload_process_start event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This is similar to the main_process_start event,
    except that it is fired only when the reload process is started.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.reload_process_start
        async def on_reload_process_start(app: Sanic):
            print("Reload process started")
        ```
  summary: Decorator for registering a listener for the reload_process_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.reload_process_stop
  kind: method
  ns: sanic.app
  description: |-
    Decorator for registering a listener for the reload_process_stop event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This is similar to the main_process_stop event,
    except that it is fired only when the reload process is stopped.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.reload_process_stop
        async def on_reload_process_stop(app: Sanic):
            print("Reload process stopped")
        ```
  summary: Decorator for registering a listener for the reload_process_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.route
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function to be registered as a route.

    Args:
        uri (str): Path of the URL.
        methods (Optional[Iterable[str]]): List or tuple of
            methods allowed.
        host (Optional[Union[str, List[str]]]): The host, if required.
        strict_slashes (Optional[bool]): Whether to apply strict slashes
            to the route.
        stream (bool): Whether to allow the request to stream its body.
        version (Optional[Union[int, str, float]]): Route specific
            versioning.
        name (Optional[str]): User-defined route name for url_for.
        ignore_body (bool): Whether the handler should ignore request
            body (e.g. `GET` requests).
        apply (bool): Apply middleware to the route.
        subprotocols (Optional[List[str]]): List of subprotocols.
        websocket (bool): Enable WebSocket support.
        unquote (bool): Unquote special characters in the URL path.
        static (bool): Enable static route.
        version_prefix (str): URL path that should be before the version
             value; default: `"/v"`.
        error_format (Optional[str]): Error format for the route.
        ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        RouteWrapper: Tuple of routes, decorated function.

    Examples:
        Using the method to define a GET endpoint:

        ```python
        @app.route("/hello")
        async def hello(request: Request):
            return text("Hello, World!")
        ```

        Adding context kwargs to the route:

        ```python
        @app.route("/greet", ctx_name="World")
        async def greet(request: Request):
            name = request.route.ctx.name
            return text(f"Hello, {name}!")
        ```
  summary: Decorate a function to be registered as a route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: None
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'False'
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: websocket
      default: 'False'
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - kind: positional
      name: static
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.signal
  kind: method
  ns: sanic.app
  description: |-
    For creating a signal handler, used similar to a route handler:

    .. code-block:: python

        @app.signal("foo.bar.<thing>")
        async def signal_handler(thing, **kwargs):
            print(f"[signal_handler] {thing=}", kwargs)

    :param event: Representation of the event in ``one.two.three`` form
    :type event: str
    :param apply: For lazy evaluation, defaults to ``True``
    :type apply: bool, optional
    :param condition: For use with the ``condition`` argument in dispatch
        filtering, defaults to ``None``
    :param exclusive: When ``True``, the signal can only be dispatched
        when the condition has been met. When ``False``, the signal can
        be dispatched either with or without it. *THIS IS INAPPLICABLE TO
        BLUEPRINT SIGNALS. THEY ARE ALWAYS NON-EXCLUSIVE*, defaults
        to ``True``
    :type condition: Dict[str, Any], optional
  summary: 'For creating a signal handler, used similar to a route handler:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - name: apply
      default: 'True'
      rest: false
      kind: kw-only
    - name: condition
      default: None
      rest: false
      kind: kw-only
    - name: exclusive
      default: 'True'
      rest: false
      kind: kw-only
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.static
  kind: method
  ns: sanic.app
  description: |-
    Register a root to serve files from. The input can either be a file or a directory.

    This method provides an easy and simple way to set up the route necessary to serve static files.

    Args:
        uri (str): URL path to be used for serving static content.
        file_or_directory (Union[PathLike, str]): Path to the static file
            or directory with static files.
        pattern (str, optional): Regex pattern identifying the valid
            static files. Defaults to `r"/?.+"`.
        use_modified_since (bool, optional): If true, send file modified
            time, and return not modified if the browser's matches the
            server's. Defaults to `True`.
        use_content_range (bool, optional): If true, process header for
            range requests and sends  the file part that is requested.
            Defaults to `False`.
        stream_large_files (Union[bool, int], optional): If `True`, use
            the `StreamingHTTPResponse.file_stream` handler rather than
            the `HTTPResponse.file handler` to send the file. If this
            is an integer, it represents the threshold size to switch
            to `StreamingHTTPResponse.file_stream`. Defaults to `False`,
            which means that the response will not be streamed.
        name (str, optional): User-defined name used for url_for.
            Defaults to `"static"`.
        host (Optional[str], optional): Host IP or FQDN for the
            service to use.
        strict_slashes (Optional[bool], optional): Instruct Sanic to
            check if the request URLs need to terminate with a slash.
        content_type (Optional[str], optional): User-defined content type
            for header.
        apply (bool, optional): If true, will register the route
            immediately. Defaults to `True`.
        resource_type (Optional[str], optional): Explicitly declare a
            resource to be a `"file"` or a `"dir"`.
        index (Optional[Union[str, Sequence[str]]], optional): When
            exposing against a directory, index is  the name that will
            be served as the default file. When multiple file names are
            passed, then they will be tried in order.
        directory_view (bool, optional): Whether to fallback to showing
            the directory viewer when exposing a directory. Defaults
            to `False`.
        directory_handler (Optional[DirectoryHandler], optional): An
            instance of DirectoryHandler that can be used for explicitly
            controlling and subclassing the behavior of the default
            directory handler.

    Returns:
        List[sanic.router.Route]: Routes registered on the router.

    Examples:
        Serving a single file:
        ```python
        app.static('/foo', 'path/to/static/file.txt')
        ```

        Serving all files from a directory:
        ```python
        app.static('/static', 'path/to/static/directory')
        ```

        Serving large files with a specific threshold:
        ```python
        app.static('/static', 'path/to/large/files', stream_large_files=1000000)
        ```
  summary: Register a root to serve files from
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: file_or_directory
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: /?.+
      rest: false
    - kind: positional
      name: use_modified_since
      default: 'True'
      rest: false
    - kind: positional
      name: use_content_range
      default: 'False'
      rest: false
    - kind: positional
      name: stream_large_files
      default: 'False'
      rest: false
    - kind: positional
      name: name
      default: static
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: resource_type
      default: None
      rest: false
    - kind: positional
      name: index
      default: None
      rest: false
    - kind: positional
      name: directory_view
      default: 'False'
      rest: false
    - kind: positional
      name: directory_handler
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseSanic.websocket
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function to be registered as a websocket route.

    Args:
        uri (str): Path of the URL.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN details.
        strict_slashes (Optional[bool]): If the API endpoint needs to
            terminate with a `"/"` or not.
        subprotocols (Optional[List[str]]): Optional list of str with
            supported subprotocols.
        version (Optional[Union[int, str, float]]): WebSocket
            protocol version.
        name (Optional[str]): A unique name assigned to the URL so that
            it can be used with url_for.
        apply (bool): If set to False, it doesn't apply the route to the
            app. Default is `True`.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with
            a `ctx_* prefix` will be appended to the route
            context (`route.ctx`).

    Returns:
        tuple: Tuple of routes, decorated function.
  summary: Decorate a function to be registered as a websocket route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup
  kind: class
  ns: sanic.app
  description: |-
    This class provides a mechanism to implement a Blueprint Group.

    The `BlueprintGroup` class allows grouping blueprints under a common
    URL prefix, version, and other shared attributes. It integrates with
    Sanic's Blueprint system, offering a custom iterator to treat an
    object of this class as a list/tuple.

    Although possible to instantiate a group directly, it is recommended
    to use the `Blueprint.group` method to create a group of blueprints.

    Args:
        url_prefix (Optional[str]): URL to be prefixed before all the
            Blueprint Prefixes. Default is `None`.
        version (Optional[Union[int, str, float]]): API Version for the
            blueprint group, inherited by each Blueprint. Default is `None`.
        strict_slashes (Optional[bool]): URL Strict slash behavior
            indicator. Default is `None`.
        version_prefix (str): Prefix for the version in the URL.
            Default is `"/v"`.
        name_prefix (Optional[str]): Prefix for the name of the blueprints
            in the group. Default is an empty string.

    Examples:
        ```python
        bp1 = Blueprint("bp1", url_prefix="/bp1")
        bp2 = Blueprint("bp2", url_prefix="/bp2")

        bp3 = Blueprint("bp3", url_prefix="/bp4")
        bp4 = Blueprint("bp3", url_prefix="/bp4")


        group1 = Blueprint.group(bp1, bp2)
        group2 = Blueprint.group(bp3, bp4, version_prefix="/api/v", version="1")


        @bp1.on_request
        async def bp1_only_middleware(request):
            print("applied on Blueprint : bp1 Only")


        @bp1.route("/")
        async def bp1_route(request):
            return text("bp1")


        @bp2.route("/<param>")
        async def bp2_route(request, param):
            return text(param)


        @bp3.route("/")
        async def bp3_route(request):
            return text("bp3")


        @bp4.route("/<param>")
        async def bp4_route(request, param):
            return text(param)


        @group1.on_request
        async def group_middleware(request):
            print("common middleware applied for both bp1 and bp2")


        # Register Blueprint group under the app
        app.blueprint(group1)
        app.blueprint(group2)
        ```
  summary: This class provides a mechanism to implement a Blueprint Group
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: url_prefix
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: name_prefix
      default: null
      rest: false
    - type: BlueprintGroup
      kind: return
  inherits_from:
  - <class 'collections.abc.MutableSequence'>
  - <class 'collections.abc.Sequence'>
  - <class 'collections.abc.Reversible'>
  - <class 'collections.abc.Collection'>
  - <class 'collections.abc.Sized'>
  - <class 'collections.abc.Iterable'>
  - <class 'collections.abc.Container'>
- name: BlueprintGroup.append
  kind: method
  ns: sanic.app
  description: |-
    Add a new Blueprint object to the group.

    The Abstract class `MutableSequence` leverages this append method to
    perform the `BlueprintGroup.append` operation.

    Args:
        value (Blueprint): New `Blueprint` object.

    Returns:
        None
  summary: Add a new Blueprint object to the group
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.blueprints
  kind: property
  ns: sanic.app
  description: |-
    A list of all the available blueprints under this group.

    Returns:
        List[Blueprint]: List of all the available blueprints under
            this group.
  summary: A list of all the available blueprints under this group
  signatures: null
  inherits_from: null
- name: BlueprintGroup.clear
  kind: method
  ns: sanic.app
  description: S.clear() -> None -- remove all items from S
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.count
  kind: method
  ns: sanic.app
  description: S.count(value) -> integer -- return number of occurrences of value
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.exception
  kind: method
  ns: sanic.app
  description: |-
    Decorate a function to handle exceptions for all blueprints in the group.

    In case of nested Blueprint Groups, the same handler is applied
    across each of the Blueprints recursively.

    Args:
        *exceptions (Exception): Exceptions to handle
        **kwargs (dict): Optional Keyword arg to use with Middleware

    Returns:
        Partial function to apply the middleware

    Examples:
        ```python
        bp1 = Blueprint("bp1", url_prefix="/bp1")
        bp2 = Blueprint("bp2", url_prefix="/bp2")
        group1 = Blueprint.group(bp1, bp2)

        @group1.exception(Exception)
        def handler(request, exception):
            return text("Exception caught")
        ```
  summary: Decorate a function to handle exceptions for all blueprints in the group
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.extend
  kind: method
  ns: sanic.app
  description: S.extend(iterable) -- extend sequence by appending elements from the iterable
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: values
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.index
  kind: method
  ns: sanic.app
  description: |-
    S.index(value, [start, [stop]]) -> integer -- return first index of value.
    Raises ValueError if the value is not present.

    Supporting start and stop arguments is optional, but
    recommended.
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.insert
  kind: method
  ns: sanic.app
  description: |-
    Insert a new Blueprint object to the group at the specified index.

    The Abstract class `MutableSequence` leverages this insert method to
    perform the `BlueprintGroup.append` operation.

    Args:
        index (int): Index to use for removing a new Blueprint item
        item (Blueprint): New `Blueprint` object.

    Returns:
        None
  summary: Insert a new Blueprint object to the group at the specified index
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: null
      rest: false
    - kind: positional
      name: item
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.middleware
  kind: method
  ns: sanic.app
  description: |-
    A decorator that can be used to implement a Middleware for all blueprints in the group.

    In case of nested Blueprint Groups, the same middleware is applied
    across each of the Blueprints recursively.

    Args:
        *args (Optional): Optional positional Parameters to be use middleware
        **kwargs (Optional): Optional Keyword arg to use with Middleware

    Returns:
        Partial function to apply the middleware
  summary: A decorator that can be used to implement a Middleware for all blueprints in the group
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.name_prefix
  kind: property
  ns: sanic.app
  description: |-
    Name prefix for the Blueprint Group.

    This is mainly needed when blueprints are copied in order to
    avoid name conflicts.

    Returns:
        Optional[str]: Name prefix for the Blueprint Group.
  summary: Name prefix for the Blueprint Group
  signatures: null
  inherits_from: null
- name: BlueprintGroup.on_request
  kind: method
  ns: sanic.app
  description: |-
    Convenience method to register a request middleware for all blueprints in the group.

    Args:
        middleware (Optional): Optional positional Parameters to be use middleware

    Returns:
        Partial function to apply the middleware
  summary: Convenience method to register a request middleware for all blueprints in the group
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.on_response
  kind: method
  ns: sanic.app
  description: |-
    Convenience method to register a response middleware for all blueprints in the group.

    Args:
        middleware (Optional): Optional positional Parameters to be use middleware

    Returns:
        Partial function to apply the middleware
  summary: Convenience method to register a response middleware for all blueprints in the group
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.pop
  kind: method
  ns: sanic.app
  description: |-
    S.pop([index]) -> item -- remove and return item at index (default last).
    Raise IndexError if list is empty or index is out of range.
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.remove
  kind: method
  ns: sanic.app
  description: |-
    S.remove(value) -- remove first occurrence of value.
    Raise ValueError if the value is not present.
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.reverse
  kind: method
  ns: sanic.app
  description: S.reverse() -- reverse *IN PLACE*
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BlueprintGroup.strict_slashes
  kind: property
  ns: sanic.app
  description: |-
    Whether to enforce strict slashes for the Blueprint Group.

    Returns:
        Optional[bool]: Whether to enforce strict slashes for the
  summary: Whether to enforce strict slashes for the Blueprint Group
  signatures: null
  inherits_from: null
- name: BlueprintGroup.url_prefix
  kind: property
  ns: sanic.app
  description: |-
    The URL prefix for the Blueprint Group.

    Returns:
        Optional[Union[int, str, float]]: URL prefix for the Blueprint
            Group.
  summary: The URL prefix for the Blueprint Group
  signatures: null
  inherits_from: null
- name: BlueprintGroup.version
  kind: property
  ns: sanic.app
  description: |-
    API Version for the Blueprint Group, if any.

    Returns:
        Optional[Union[str, int, float]]: API Version for the Blueprint
  summary: API Version for the Blueprint Group, if any
  signatures: null
  inherits_from: null
- name: BlueprintGroup.version_prefix
  kind: property
  ns: sanic.app
  description: |-
    Version prefix for the Blueprint Group.

    Returns:
        str: Version prefix for the Blueprint Group.
  summary: Version prefix for the Blueprint Group
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.app
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CancelledError
  kind: class
  ns: sanic.app
  description: The Future or Task was cancelled.
  summary: The Future or Task was cancelled
  signatures: null
  inherits_from:
  - <class 'BaseException'>
- name: CancelledError.add_note
  kind: callable
  ns: sanic.app
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: CancelledError.args
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CancelledError.with_traceback
  kind: callable
  ns: sanic.app
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: CertLoader
  kind: class
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: ssl_data
      default: null
      rest: false
    - type: CertLoader
      kind: return
  inherits_from: null
- name: CertLoader.load
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ClassVar
  kind: callable
  ns: sanic.app
  description: |-
    Special type construct to mark class variables.

    An annotation wrapped in ClassVar indicates that a given
    attribute is intended to be used as a class variable and
    should not be set on instances of that class.

    Usage::

        class Starship:
            stats: ClassVar[dict[str, int]] = {} # class variable
            damage: int = 10                     # instance variable

    ClassVar accepts only types and cannot be further subscribed.

    Note that ClassVar is not a class itself, and should not
    be used with isinstance() or issubclass().
  summary: Special type construct to mark class variables
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConnectionClosed
  kind: class
  ns: sanic.app
  description: |-
    Raised when trying to interact with a closed connection.

    Attributes:
        rcvd (Optional[Close]): if a close frame was received, its code and
            reason are available in ``rcvd.code`` and ``rcvd.reason``.
        sent (Optional[Close]): if a close frame was sent, its code and reason
            are available in ``sent.code`` and ``sent.reason``.
        rcvd_then_sent (Optional[bool]): if close frames were received and
            sent, this attribute tells in which order this happened, from the
            perspective of this side of the connection.
  summary: Raised when trying to interact with a closed connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: rcvd
      default: null
      rest: false
    - kind: positional
      name: sent
      default: null
      rest: false
    - kind: positional
      name: rcvd_then_sent
      default: None
      rest: false
    - type: ConnectionClosed
      kind: return
  inherits_from:
  - <class 'websockets.exceptions.WebSocketException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ConnectionClosed.add_note
  kind: callable
  ns: sanic.app
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ConnectionClosed.args
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnectionClosed.code
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnectionClosed.reason
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnectionClosed.with_traceback
  kind: callable
  ns: sanic.app
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Coroutine
  kind: callable
  ns: sanic.app
  description: A generic version of collections.abc.Coroutine.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Default
  kind: class
  ns: sanic.app
  description: |-
    It is used to replace `None` or `object()` as a sentinel
    that represents a default value. Sometimes we want to set
    a value to `None` so we cannot use `None` to represent the
    default value, and `object()` is hard to be typed.
  summary: It is used to replace `None` or `object()` as a sentinel
  signatures:
  - - type: Default
      kind: return
  inherits_from: null
- name: Deque
  kind: callable
  ns: sanic.app
  description: A generic version of collections.deque.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.app
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Enum
  kind: class
  ns: sanic.app
  description: |-
    Create a collection of name/value pairs.

    Example enumeration:

    >>> class Color(Enum):
    ...     RED = 1
    ...     BLUE = 2
    ...     GREEN = 3

    Access them by:

    - attribute access::

    >>> Color.RED
    <Color.RED: 1>

    - value lookup:

    >>> Color(1)
    <Color.RED: 1>

    - name lookup:

    >>> Color['RED']
    <Color.RED: 1>

    Enumerations can be iterated over, and know how many members they have:

    >>> len(Color)
    3

    >>> list(Color)
    [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

    Methods can be added to enumerations, and members can have their own
    attributes -- see the documentation for details.
  summary: Create a collection of name/value pairs
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Enum
      kind: return
  inherits_from: null
- name: ErrorHandler
  kind: class
  ns: sanic.app
  description: |-
    Process and handle all uncaught exceptions.

    This error handling framework is built into the core that can be extended
    by the developers to perform a wide range of tasks from recording the error
    stats to reporting them to an external service that can be used for
    realtime alerting system.

    Args:
        base (BaseRenderer): The renderer to use for the error pages.
  summary: Process and handle all uncaught exceptions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: base
      default: <class 'sanic.errorpages.TextRenderer'>
      rest: false
    - type: ErrorHandler
      kind: return
  inherits_from: null
- name: ErrorHandler.add
  kind: method
  ns: sanic.app
  description: |-
    Add a new exception handler to an already existing handler object.

    Args:
        exception (sanic.exceptions.SanicException or Exception): Type
            of exception that needs to be handled.
        handler (function): Reference to the function that will
            handle the exception.

    Returns:
        None
  summary: Add a new exception handler to an already existing handler object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: route_names
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ErrorHandler.default
  kind: method
  ns: sanic.app
  description: |-
    Provide a default behavior for the objects of ErrorHandler.

    If a developer chooses to extend the ErrorHandler, they can
    provide a custom implementation for this method to behave in a way
    they see fit.

    Args:
        request (sanic.request.Request): Incoming request.
        exception (sanic.exceptions.SanicException or Exception): Exception object.

    Returns:
        HTTPResponse: The response object.

    Examples:
        ```python
        class CustomErrorHandler(ErrorHandler):
            def default(self, request: Request, exception: Exception) -> HTTPResponse:
                # Custom logic for handling the exception and creating a response
                custom_response = my_custom_logic(request, exception)
                return custom_response

        app = Sanic("MyApp", error_handler=CustomErrorHandler())
        ```
  summary: Provide a default behavior for the objects of ErrorHandler
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ErrorHandler.log
  kind: method
  ns: sanic.app
  description: |-
    Logs information about an incoming request and the associated exception.

    Args:
        request (Request): The incoming request to be logged.
        exception (Exception): The exception that occurred during the handling of the request.

    Returns:
        None
  summary: Logs information about an incoming request and the associated exception
  signatures:
  - - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ErrorHandler.lookup
  kind: method
  ns: sanic.app
  description: |-
    Lookup the existing instance of `ErrorHandler` and fetch the registered handler for a specific type of exception.

    This method leverages a dict lookup to speedup the retrieval process.

    Args:
        exception (sanic.exceptions.SanicException or Exception): Type
            of exception.

    Returns:
        Registered function if found, ``None`` otherwise.
  summary: Lookup the existing instance of `ErrorHandler` and fetch the registered handler for a specific type of exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: route_name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ErrorHandler.response
  kind: method
  ns: sanic.app
  description: |-
    Fetch and executes an exception handler and returns a response object.

    Args:
        request (sanic.request.Request): Instance of the request.
        exception (sanic.exceptions.SanicException or Exception): Exception to handle.

    Returns:
        Wrap the return value obtained from the `default` function or the registered handler for that type of exception.
  summary: Fetch and executes an exception handler and returns a response object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Event
  kind: class
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Event
      kind: return
  inherits_from:
  - <enum 'Enum'>
- name: Event.HTTP_HANDLER_AFTER
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_HANDLER_BEFORE
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_LIFECYCLE_BEGIN
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_LIFECYCLE_COMPLETE
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_LIFECYCLE_EXCEPTION
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_LIFECYCLE_HANDLE
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_LIFECYCLE_READ_BODY
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_LIFECYCLE_READ_HEAD
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_LIFECYCLE_REQUEST
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_LIFECYCLE_RESPONSE
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_LIFECYCLE_SEND
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_MIDDLEWARE_AFTER
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_MIDDLEWARE_BEFORE
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_ROUTING_AFTER
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.HTTP_ROUTING_BEFORE
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.SERVER_EXCEPTION_REPORT
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.SERVER_INIT_AFTER
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.SERVER_INIT_BEFORE
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.SERVER_SHUTDOWN_AFTER
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.SERVER_SHUTDOWN_BEFORE
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.WEBSOCKET_HANDLER_AFTER
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.WEBSOCKET_HANDLER_BEFORE
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.WEBSOCKET_HANDLER_EXCEPTION
  kind: property
  ns: sanic.app
  description: Event names for the SignalRouter
  summary: Event names for the SignalRouter
  signatures: null
  inherits_from: null
- name: Event.name
  kind: property
  ns: sanic.app
  description: The name of the Enum member.
  summary: The name of the Enum member
  signatures: null
  inherits_from: null
- name: Event.value
  kind: property
  ns: sanic.app
  description: The value of the Enum member.
  summary: The value of the Enum member
  signatures: null
  inherits_from: null
- name: FinalizationError
  kind: class
  ns: sanic.app
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'sanic_routing.exceptions.BaseException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FinalizationError.add_note
  kind: callable
  ns: sanic.app
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FinalizationError.args
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FinalizationError.with_traceback
  kind: callable
  ns: sanic.app
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Future
  kind: class
  ns: sanic.app
  description: |-
    This class is *almost* compatible with concurrent.futures.Future.

    Differences:

    - result() and exception() do not take a timeout argument and
      raise an exception when the future isn't done yet.

    - Callbacks registered with add_done_callback() are always called
      via the event loop's call_soon_threadsafe().

    - This class is not compatible with the wait() and as_completed()
      methods in the concurrent.futures package.
  summary: This class is *almost* compatible with concurrent
  signatures:
  - - name: loop
      default: None
      rest: false
      kind: kw-only
    - type: Future
      kind: return
  inherits_from: null
- name: Future.add_done_callback
  kind: callable
  ns: sanic.app
  description: |-
    Add a callback to be run when the future becomes done.

    The callback is called with a single argument - the future object. If
    the future is already done when this is called, the callback is
    scheduled with call_soon.
  summary: Add a callback to be run when the future becomes done
  signatures: null
  inherits_from: null
- name: Future.cancel
  kind: callable
  ns: sanic.app
  description: |-
    Cancel the future and schedule callbacks.

    If the future is already done or cancelled, return False.  Otherwise,
    change the future's state to cancelled, schedule the callbacks and
    return True.
  summary: Cancel the future and schedule callbacks
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Future.cancelled
  kind: callable
  ns: sanic.app
  description: Return True if the future was cancelled.
  summary: Return True if the future was cancelled
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Future.done
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the future is done.

    Done means either that a result / exception are available, or that the
    future was cancelled.
  summary: Return True if the future is done
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Future.exception
  kind: callable
  ns: sanic.app
  description: |-
    Return the exception that was set on this future.

    The exception (or None if no exception was set) is returned only if
    the future is done.  If the future has been cancelled, raises
    CancelledError.  If the future isn't done yet, raises
    InvalidStateError.
  summary: Return the exception that was set on this future
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Future.get_loop
  kind: callable
  ns: sanic.app
  description: Return the event loop the Future is bound to.
  summary: Return the event loop the Future is bound to
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Future.remove_done_callback
  kind: callable
  ns: sanic.app
  description: |-
    Remove all instances of a callback from the "call when done" list.

    Returns the number of callbacks removed.
  summary: Remove all instances of a callback from the "call when done" list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fn
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Future.result
  kind: callable
  ns: sanic.app
  description: |-
    Return the result this future represents.

    If the future has been cancelled, raises CancelledError.  If the
    future's result isn't yet available, raises InvalidStateError.  If
    the future is done and has an exception set, this exception is raised.
  summary: Return the result this future represents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Future.set_exception
  kind: callable
  ns: sanic.app
  description: |-
    Mark the future done and set an exception.

    If the future is already done when this method is called, raises
    InvalidStateError.
  summary: Mark the future done and set an exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Future.set_result
  kind: callable
  ns: sanic.app
  description: |-
    Mark the future done and set its result.

    If the future is already done when this method is called, raises
    InvalidStateError.
  summary: Mark the future done and set its result
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: result
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureException
  kind: class
  ns: sanic.app
  description: FutureException(handler, exceptions)
  summary: FutureException(handler, exceptions)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: exceptions
      default: null
      rest: false
    - type: FutureException
      kind: return
  inherits_from:
  - <class 'tuple'>
- name: FutureException.count
  kind: callable
  ns: sanic.app
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureException.exceptions
  kind: property
  ns: sanic.app
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: FutureException.handler
  kind: property
  ns: sanic.app
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: FutureException.index
  kind: callable
  ns: sanic.app
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureListener
  kind: class
  ns: sanic.app
  description: FutureListener(listener, event, priority)
  summary: FutureListener(listener, event, priority)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: priority
      default: null
      rest: false
    - type: FutureListener
      kind: return
  inherits_from:
  - <class 'tuple'>
- name: FutureListener.count
  kind: callable
  ns: sanic.app
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureListener.event
  kind: property
  ns: sanic.app
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: FutureListener.index
  kind: callable
  ns: sanic.app
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureListener.listener
  kind: property
  ns: sanic.app
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: FutureListener.priority
  kind: property
  ns: sanic.app
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: FutureMiddleware
  kind: class
  ns: sanic.app
  description: FutureMiddleware(middleware, attach_to)
  summary: FutureMiddleware(middleware, attach_to)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: null
      rest: false
    - kind: positional
      name: attach_to
      default: null
      rest: false
    - type: FutureMiddleware
      kind: return
  inherits_from:
  - <class 'tuple'>
- name: FutureMiddleware.attach_to
  kind: property
  ns: sanic.app
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: FutureMiddleware.count
  kind: callable
  ns: sanic.app
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureMiddleware.index
  kind: callable
  ns: sanic.app
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureMiddleware.middleware
  kind: property
  ns: sanic.app
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: FutureRegistry
  kind: class
  ns: sanic.app
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from:
  - <class 'set'>
- name: FutureRegistry.add
  kind: callable
  ns: sanic.app
  description: |-
    Add an element to a set.

    This has no effect if the element is already present.
  summary: Add an element to a set
  signatures: null
  inherits_from: null
- name: FutureRegistry.clear
  kind: callable
  ns: sanic.app
  description: Remove all elements from this set.
  summary: Remove all elements from this set
  signatures: null
  inherits_from: null
- name: FutureRegistry.copy
  kind: callable
  ns: sanic.app
  description: Return a shallow copy of a set.
  summary: Return a shallow copy of a set
  signatures: null
  inherits_from: null
- name: FutureRegistry.difference
  kind: callable
  ns: sanic.app
  description: |-
    Return the difference of two or more sets as a new set.

    (i.e. all elements that are in this set but not the others.)
  summary: Return the difference of two or more sets as a new set
  signatures: null
  inherits_from: null
- name: FutureRegistry.difference_update
  kind: callable
  ns: sanic.app
  description: Remove all elements of another set from this set.
  summary: Remove all elements of another set from this set
  signatures: null
  inherits_from: null
- name: FutureRegistry.discard
  kind: callable
  ns: sanic.app
  description: |-
    Remove an element from a set if it is a member.

    Unlike set.remove(), the discard() method does not raise
    an exception when an element is missing from the set.
  summary: Remove an element from a set if it is a member
  signatures: null
  inherits_from: null
- name: FutureRegistry.intersection
  kind: callable
  ns: sanic.app
  description: |-
    Return the intersection of two sets as a new set.

    (i.e. all elements that are in both sets.)
  summary: Return the intersection of two sets as a new set
  signatures: null
  inherits_from: null
- name: FutureRegistry.intersection_update
  kind: callable
  ns: sanic.app
  description: Update a set with the intersection of itself and another.
  summary: Update a set with the intersection of itself and another
  signatures: null
  inherits_from: null
- name: FutureRegistry.isdisjoint
  kind: callable
  ns: sanic.app
  description: Return True if two sets have a null intersection.
  summary: Return True if two sets have a null intersection
  signatures: null
  inherits_from: null
- name: FutureRegistry.issubset
  kind: callable
  ns: sanic.app
  description: Test whether every element in the set is in other.
  summary: Test whether every element in the set is in other
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: other
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureRegistry.issuperset
  kind: callable
  ns: sanic.app
  description: Test whether every element in other is in the set.
  summary: Test whether every element in other is in the set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: other
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureRegistry.pop
  kind: callable
  ns: sanic.app
  description: |-
    Remove and return an arbitrary set element.
    Raises KeyError if the set is empty.
  summary: Remove and return an arbitrary set element
  signatures: null
  inherits_from: null
- name: FutureRegistry.remove
  kind: callable
  ns: sanic.app
  description: |-
    Remove an element from a set; it must be a member.

    If the element is not a member, raise a KeyError.
  summary: Remove an element from a set; it must be a member
  signatures: null
  inherits_from: null
- name: FutureRegistry.symmetric_difference
  kind: callable
  ns: sanic.app
  description: |-
    Return the symmetric difference of two sets as a new set.

    (i.e. all elements that are in exactly one of the sets.)
  summary: Return the symmetric difference of two sets as a new set
  signatures: null
  inherits_from: null
- name: FutureRegistry.symmetric_difference_update
  kind: callable
  ns: sanic.app
  description: Update a set with the symmetric difference of itself and another.
  summary: Update a set with the symmetric difference of itself and another
  signatures: null
  inherits_from: null
- name: FutureRegistry.union
  kind: callable
  ns: sanic.app
  description: |-
    Return the union of sets as a new set.

    (i.e. all elements that are in either set.)
  summary: Return the union of sets as a new set
  signatures: null
  inherits_from: null
- name: FutureRegistry.update
  kind: callable
  ns: sanic.app
  description: Update a set with the union of itself and others.
  summary: Update a set with the union of itself and others
  signatures: null
  inherits_from: null
- name: FutureRoute
  kind: class
  ns: sanic.app
  description: FutureRoute(handler, uri, methods, host, strict_slashes, stream, version, name, ignore_body, websocket, subprotocols, unquote, static, version_prefix, error_format, route_context)
  summary: FutureRoute(handler, uri, methods, host, strict_slashes, stream, version, name, ignore_body, websocket, subprotocols, unquote, static, version_prefix, error_format, route_context)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: null
      rest: false
    - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: strict_slashes
      default: null
      rest: false
    - kind: positional
      name: stream
      default: null
      rest: false
    - kind: positional
      name: version
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: ignore_body
      default: null
      rest: false
    - kind: positional
      name: websocket
      default: null
      rest: false
    - kind: positional
      name: subprotocols
      default: null
      rest: false
    - kind: positional
      name: unquote
      default: null
      rest: false
    - kind: positional
      name: static
      default: null
      rest: false
    - kind: positional
      name: version_prefix
      default: null
      rest: false
    - kind: positional
      name: error_format
      default: null
      rest: false
    - kind: positional
      name: route_context
      default: null
      rest: false
    - type: FutureRoute
      kind: return
  inherits_from:
  - <class 'tuple'>
- name: FutureRoute.count
  kind: callable
  ns: sanic.app
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureRoute.error_format
  kind: property
  ns: sanic.app
  description: Alias for field number 14
  summary: Alias for field number 14
  signatures: null
  inherits_from: null
- name: FutureRoute.handler
  kind: property
  ns: sanic.app
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: FutureRoute.host
  kind: property
  ns: sanic.app
  description: Alias for field number 3
  summary: Alias for field number 3
  signatures: null
  inherits_from: null
- name: FutureRoute.ignore_body
  kind: property
  ns: sanic.app
  description: Alias for field number 8
  summary: Alias for field number 8
  signatures: null
  inherits_from: null
- name: FutureRoute.index
  kind: callable
  ns: sanic.app
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureRoute.methods
  kind: property
  ns: sanic.app
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: FutureRoute.name
  kind: property
  ns: sanic.app
  description: Alias for field number 7
  summary: Alias for field number 7
  signatures: null
  inherits_from: null
- name: FutureRoute.route_context
  kind: property
  ns: sanic.app
  description: Alias for field number 15
  summary: Alias for field number 15
  signatures: null
  inherits_from: null
- name: FutureRoute.static
  kind: property
  ns: sanic.app
  description: Alias for field number 12
  summary: Alias for field number 12
  signatures: null
  inherits_from: null
- name: FutureRoute.stream
  kind: property
  ns: sanic.app
  description: Alias for field number 5
  summary: Alias for field number 5
  signatures: null
  inherits_from: null
- name: FutureRoute.strict_slashes
  kind: property
  ns: sanic.app
  description: Alias for field number 4
  summary: Alias for field number 4
  signatures: null
  inherits_from: null
- name: FutureRoute.subprotocols
  kind: property
  ns: sanic.app
  description: Alias for field number 10
  summary: Alias for field number 10
  signatures: null
  inherits_from: null
- name: FutureRoute.unquote
  kind: property
  ns: sanic.app
  description: Alias for field number 11
  summary: Alias for field number 11
  signatures: null
  inherits_from: null
- name: FutureRoute.uri
  kind: property
  ns: sanic.app
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: FutureRoute.version
  kind: property
  ns: sanic.app
  description: Alias for field number 6
  summary: Alias for field number 6
  signatures: null
  inherits_from: null
- name: FutureRoute.version_prefix
  kind: property
  ns: sanic.app
  description: Alias for field number 13
  summary: Alias for field number 13
  signatures: null
  inherits_from: null
- name: FutureRoute.websocket
  kind: property
  ns: sanic.app
  description: Alias for field number 9
  summary: Alias for field number 9
  signatures: null
  inherits_from: null
- name: FutureSignal
  kind: class
  ns: sanic.app
  description: FutureSignal(handler, event, condition, exclusive, priority)
  summary: FutureSignal(handler, event, condition, exclusive, priority)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: condition
      default: null
      rest: false
    - kind: positional
      name: exclusive
      default: null
      rest: false
    - kind: positional
      name: priority
      default: null
      rest: false
    - type: FutureSignal
      kind: return
  inherits_from:
  - <class 'tuple'>
- name: FutureSignal.condition
  kind: property
  ns: sanic.app
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: FutureSignal.count
  kind: callable
  ns: sanic.app
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureSignal.event
  kind: property
  ns: sanic.app
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: FutureSignal.exclusive
  kind: property
  ns: sanic.app
  description: Alias for field number 3
  summary: Alias for field number 3
  signatures: null
  inherits_from: null
- name: FutureSignal.handler
  kind: property
  ns: sanic.app
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: FutureSignal.index
  kind: callable
  ns: sanic.app
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureSignal.priority
  kind: property
  ns: sanic.app
  description: Alias for field number 4
  summary: Alias for field number 4
  signatures: null
  inherits_from: null
- name: Generic
  kind: class
  ns: sanic.app
  description: |-
    Abstract base class for generic types.

    A generic type is typically declared by inheriting from
    this class parameterized with one or more type variables.
    For example, a generic mapping type might be defined as::

      class Mapping(Generic[KT, VT]):
          def __getitem__(self, key: KT) -> VT:
              ...
          # Etc.

    This class can then be used as follows::

      def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:
          try:
              return mapping[key]
          except KeyError:
              return default
  summary: Abstract base class for generic types
  signatures:
  - - type: Generic
      kind: return
  inherits_from: null
- name: Inspector
  kind: class
  ns: sanic.app
  description: |-
    Inspector for Sanic workers.

    This class is used to create an inspector for Sanic workers. It is
    instantiated by the worker class and is used to create a Sanic app
    that can be used to inspect and control the workers and the server.

    It is not intended to be used directly by the user.

    See [Inspector](/en/guide/deployment/inspector) for more information.

    Args:
        publisher (Connection): The connection to the worker.
        app_info (Dict[str, Any]): Information about the app.
        worker_state (Mapping[str, Any]): The state of the worker.
        host (str): The host to bind the inspector to.
        port (int): The port to bind the inspector to.
        api_key (str): The API key to use for authentication.
        tls_key (Union[Path, str, Default]): The path to the TLS key file.
        tls_cert (Union[Path, str, Default]): The path to the TLS cert file.
  summary: Inspector for Sanic workers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: publisher
      default: null
      rest: false
    - kind: positional
      name: app_info
      default: null
      rest: false
    - kind: positional
      name: worker_state
      default: null
      rest: false
    - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: port
      default: null
      rest: false
    - kind: positional
      name: api_key
      default: null
      rest: false
    - kind: positional
      name: tls_key
      default: null
      rest: false
    - kind: positional
      name: tls_cert
      default: null
      rest: false
    - type: Inspector
      kind: return
  inherits_from: null
- name: Inspector.reload
  kind: method
  ns: sanic.app
  description: |-
    Reload the workers

    Args:
        zero_downtime (bool, optional): Whether to use zero downtime
            reload. Defaults to `False`.
  summary: Reload the workers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: zero_downtime
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Inspector.scale
  kind: method
  ns: sanic.app
  description: |-
    Scale the number of workers

    Args:
        replicas (Union[str, int]): The number of workers to scale to.

    Returns:
        str: A log message.
  summary: Scale the number of workers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: replicas
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Inspector.shutdown
  kind: method
  ns: sanic.app
  description: Shutdown the workers
  summary: Shutdown the workers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Iterable
  kind: callable
  ns: sanic.app
  description: A generic version of collections.abc.Iterable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Iterator
  kind: callable
  ns: sanic.app
  description: A generic version of collections.abc.Iterator.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LOGGING_CONFIG_DEFAULTS
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Lifespan
  kind: class
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sanic_app
      default: null
      rest: false
    - kind: positional
      name: scope
      default: null
      rest: false
    - kind: positional
      name: receive
      default: null
      rest: false
    - kind: positional
      name: send
      default: null
      rest: false
    - type: Lifespan
      kind: return
  inherits_from: null
- name: Lifespan.shutdown
  kind: method
  ns: sanic.app
  description: |-
    Gather the listeners to fire on server stop.
    Because we are using a third-party server and not Sanic server, we do
    not have access to fire anything AFTER the server stops.
    Therefore, we fire before_server_stop and after_server_stop
    in sequence since the ASGI lifespan protocol only supports a single
    shutdown event.
  summary: Gather the listeners to fire on server stop
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Lifespan.startup
  kind: method
  ns: sanic.app
  description: |-
    Gather the listeners to fire on server start.
    Because we are using a third-party server and not Sanic server, we do
    not have access to fire anything BEFORE the server starts.
    Therefore, we fire before_server_start and after_server_start
    in sequence since the ASGI lifespan protocol only supports a single
    startup event.
  summary: Gather the listeners to fire on server start
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.app
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent
  kind: class
  ns: sanic.app
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: ListenerEvent
      kind: return
  inherits_from:
  - <class 'str'>
  - <enum 'Enum'>
- name: ListenerEvent.AFTER_RELOAD_TRIGGER
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.AFTER_SERVER_START
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.AFTER_SERVER_STOP
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.BEFORE_RELOAD_TRIGGER
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.BEFORE_SERVER_START
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.BEFORE_SERVER_STOP
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.MAIN_PROCESS_READY
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.MAIN_PROCESS_START
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.MAIN_PROCESS_STOP
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.RELOAD_PROCESS_START
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.RELOAD_PROCESS_STOP
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ListenerEvent.capitalize
  kind: callable
  ns: sanic.app
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.casefold
  kind: callable
  ns: sanic.app
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.center
  kind: callable
  ns: sanic.app
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.count
  kind: callable
  ns: sanic.app
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: ListenerEvent.encode
  kind: callable
  ns: sanic.app
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.endswith
  kind: callable
  ns: sanic.app
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: ListenerEvent.expandtabs
  kind: callable
  ns: sanic.app
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.find
  kind: callable
  ns: sanic.app
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: ListenerEvent.format
  kind: callable
  ns: sanic.app
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: ListenerEvent.format_map
  kind: callable
  ns: sanic.app
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: ListenerEvent.index
  kind: callable
  ns: sanic.app
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: ListenerEvent.isalnum
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.isalpha
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.isascii
  kind: callable
  ns: sanic.app
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.isdecimal
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.isdigit
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.isidentifier
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.islower
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.isnumeric
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.isprintable
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.isspace
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.istitle
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.isupper
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.join
  kind: callable
  ns: sanic.app
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.ljust
  kind: callable
  ns: sanic.app
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.lower
  kind: callable
  ns: sanic.app
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.lstrip
  kind: callable
  ns: sanic.app
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.name
  kind: property
  ns: sanic.app
  description: The name of the Enum member.
  summary: The name of the Enum member
  signatures: null
  inherits_from: null
- name: ListenerEvent.partition
  kind: callable
  ns: sanic.app
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.removeprefix
  kind: callable
  ns: sanic.app
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.removesuffix
  kind: callable
  ns: sanic.app
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.replace
  kind: callable
  ns: sanic.app
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.rfind
  kind: callable
  ns: sanic.app
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: ListenerEvent.rindex
  kind: callable
  ns: sanic.app
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: ListenerEvent.rjust
  kind: callable
  ns: sanic.app
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.rpartition
  kind: callable
  ns: sanic.app
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.rsplit
  kind: callable
  ns: sanic.app
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.rstrip
  kind: callable
  ns: sanic.app
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.split
  kind: callable
  ns: sanic.app
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.splitlines
  kind: callable
  ns: sanic.app
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.startswith
  kind: callable
  ns: sanic.app
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: ListenerEvent.strip
  kind: callable
  ns: sanic.app
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.swapcase
  kind: callable
  ns: sanic.app
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.title
  kind: callable
  ns: sanic.app
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.translate
  kind: callable
  ns: sanic.app
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.upper
  kind: callable
  ns: sanic.app
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerEvent.value
  kind: property
  ns: sanic.app
  description: The value of the Enum member.
  summary: The value of the Enum member
  signatures: null
  inherits_from: null
- name: ListenerEvent.zfill
  kind: callable
  ns: sanic.app
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerType
  kind: callable
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Literal
  kind: callable
  ns: sanic.app
  description: |-
    Special typing form to define literal types (a.k.a. value types).

    This form can be used to indicate to type checkers that the corresponding
    variable or function parameter has a value equivalent to the provided
    literal (or one of several literals)::

        def validate_simple(data: Any) -> Literal[True]:  # always returns True
            ...

        MODE = Literal['r', 'rb', 'w', 'wb']
        def open_helper(file: str, mode: MODE) -> str:
            ...

        open_helper('/some/path', 'r')  # Passes type check
        open_helper('/other/path', 'typo')  # Error in type checker

    Literal[...] cannot be subclassed. At runtime, an arbitrary value
    is allowed as type argument to Literal[...], but type checkers may
    impose restrictions.
  summary: Special typing form to define literal types (a
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Middleware
  kind: class
  ns: sanic.app
  description: |-
    Middleware object that is used to encapsulate middleware functions.

    This should generally not be instantiated directly, but rather through
    the `sanic.Sanic.middleware` decorator and its variants.

    Args:
        func (MiddlewareType): The middleware function to be called.
        location (MiddlewareLocation): The location of the middleware.
        priority (int): The priority of the middleware.
  summary: Middleware object that is used to encapsulate middleware functions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - kind: positional
      name: location
      default: null
      rest: false
    - kind: positional
      name: priority
      default: '0'
      rest: false
    - type: Middleware
      kind: return
  inherits_from: null
- name: Middleware.convert
  kind: function
  ns: sanic.app
  description: |-
    Convert middleware collections to a deque of Middleware objects.

    Args:
        *middleware_collections (Sequence[Union[Middleware, MiddlewareType]]):
            The middleware collections to convert.
        location (MiddlewareLocation): The location of the middleware.

    Returns:
        Deque[Middleware]: The converted middleware.
  summary: Convert middleware collections to a deque of Middleware objects
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - name: location
      default: null
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Middleware.definition
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Middleware.func
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Middleware.location
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Middleware.order
  kind: property
  ns: sanic.app
  description: |-
    Return a tuple of the priority and definition order.

    This is used to sort the middleware.

    Returns:
        tuple[int, int]: The priority and definition order.
  summary: Return a tuple of the priority and definition order
  signatures: null
  inherits_from: null
- name: Middleware.priority
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Middleware.reset_count
  kind: function
  ns: sanic.app
  description: |-
    Reset the counter for the middleware definition order.

    This is used for testing.

    Returns:
        None
  summary: Reset the counter for the middleware definition order
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareLocation
  kind: class
  ns: sanic.app
  description: Enum where members are also (and must be) ints
  summary: Enum where members are also (and must be) ints
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: MiddlewareLocation
      kind: return
  inherits_from:
  - <enum 'IntEnum'>
  - <class 'int'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: MiddlewareLocation.REQUEST
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MiddlewareLocation.RESPONSE
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MiddlewareLocation.as_integer_ratio
  kind: callable
  ns: sanic.app
  description: |-
    Return integer ratio.

    Return a pair of integers, whose ratio is exactly equal to the original int
    and with a positive denominator.

    >>> (10).as_integer_ratio()
    (10, 1)
    >>> (-10).as_integer_ratio()
    (-10, 1)
    >>> (0).as_integer_ratio()
    (0, 1)
  summary: Return integer ratio
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareLocation.bit_count
  kind: callable
  ns: sanic.app
  description: |-
    Number of ones in the binary representation of the absolute value of self.

    Also known as the population count.

    >>> bin(13)
    '0b1101'
    >>> (13).bit_count()
    3
  summary: Number of ones in the binary representation of the absolute value of self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareLocation.bit_length
  kind: callable
  ns: sanic.app
  description: |-
    Number of bits necessary to represent self in binary.

    >>> bin(37)
    '0b100101'
    >>> (37).bit_length()
    6
  summary: Number of bits necessary to represent self in binary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareLocation.conjugate
  kind: callable
  ns: sanic.app
  description: Returns self, the complex conjugate of any int.
  summary: Returns self, the complex conjugate of any int
  signatures: null
  inherits_from: null
- name: MiddlewareLocation.denominator
  kind: property
  ns: sanic.app
  description: the denominator of a rational number in lowest terms
  summary: the denominator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: MiddlewareLocation.imag
  kind: property
  ns: sanic.app
  description: the imaginary part of a complex number
  summary: the imaginary part of a complex number
  signatures: null
  inherits_from: null
- name: MiddlewareLocation.numerator
  kind: property
  ns: sanic.app
  description: the numerator of a rational number in lowest terms
  summary: the numerator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: MiddlewareLocation.real
  kind: property
  ns: sanic.app
  description: the real part of a complex number
  summary: the real part of a complex number
  signatures: null
  inherits_from: null
- name: MiddlewareLocation.to_bytes
  kind: callable
  ns: sanic.app
  description: |-
    Return an array of bytes representing an integer.

    length
      Length of bytes object to use.  An OverflowError is raised if the
      integer is not representable with the given number of bytes.  Default
      is length 1.
    byteorder
      The byte order used to represent the integer.  If byteorder is 'big',
      the most significant byte is at the beginning of the byte array.  If
      byteorder is 'little', the most significant byte is at the end of the
      byte array.  To request the native byte order of the host system, use
      `sys.byteorder' as the byte order value.  Default is to use 'big'.
    signed
      Determines whether two's complement is used to represent the integer.
      If signed is False and a negative integer is given, an OverflowError
      is raised.
  summary: Return an array of bytes representing an integer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: length
      default: '1'
      rest: false
    - kind: positional
      name: byteorder
      default: big
      rest: false
    - name: signed
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareType
  kind: callable
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NotFound
  kind: class
  ns: sanic.app
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: Not Found
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - type: NotFound
      kind: return
  inherits_from:
  - <class 'sanic_routing.exceptions.BaseException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NotFound.add_note
  kind: callable
  ns: sanic.app
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NotFound.args
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NotFound.with_traceback
  kind: callable
  ns: sanic.app
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: OS_IS_WINDOWS
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.app
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path
  kind: class
  ns: sanic.app
  description: |-
    PurePath subclass that can make system calls.

    Path represents a filesystem path but unlike PurePath, also offers
    methods to do system calls on path objects. Depending on your system,
    instantiating a Path will return either a PosixPath or a WindowsPath
    object. You can also instantiate a PosixPath or WindowsPath directly,
    but cannot instantiate a WindowsPath on a POSIX system or vice versa.
  summary: PurePath subclass that can make system calls
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: Path
      kind: return
  inherits_from:
  - <class 'pathlib.PurePath'>
- name: Path.absolute
  kind: method
  ns: sanic.app
  description: |-
    Return an absolute version of this path by prepending the current
    working directory. No normalization or symlink resolution is performed.

    Use resolve() to get the canonical path to a file.
  summary: Return an absolute version of this path by prepending the current
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.anchor
  kind: property
  ns: sanic.app
  description: The concatenation of the drive and root, or ''.
  summary: The concatenation of the drive and root, or ''
  signatures: null
  inherits_from: null
- name: Path.as_posix
  kind: method
  ns: sanic.app
  description: |-
    Return the string representation of the path with forward (/)
    slashes.
  summary: Return the string representation of the path with forward (/)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.as_uri
  kind: method
  ns: sanic.app
  description: Return the path as a 'file' URI.
  summary: Return the path as a 'file' URI
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.chmod
  kind: method
  ns: sanic.app
  description: Change the permissions of the path, like os.chmod().
  summary: Change the permissions of the path, like os
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mode
      default: null
      rest: false
    - name: follow_symlinks
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.cwd
  kind: function
  ns: sanic.app
  description: |-
    Return a new path pointing to the current working directory
    (as returned by os.getcwd()).
  summary: Return a new path pointing to the current working directory
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.drive
  kind: property
  ns: sanic.app
  description: The drive prefix (letter or UNC path), if any.
  summary: The drive prefix (letter or UNC path), if any
  signatures: null
  inherits_from: null
- name: Path.exists
  kind: method
  ns: sanic.app
  description: Whether this path exists.
  summary: Whether this path exists
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.expanduser
  kind: method
  ns: sanic.app
  description: |-
    Return a new path with expanded ~ and ~user constructs
    (as returned by os.path.expanduser)
  summary: Return a new path with expanded ~ and ~user constructs
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.glob
  kind: method
  ns: sanic.app
  description: |-
    Iterate over this subtree and yield all existing files (of any
    kind, including directories) matching the given relative pattern.
  summary: Iterate over this subtree and yield all existing files (of any
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.group
  kind: method
  ns: sanic.app
  description: Return the group name of the file gid.
  summary: Return the group name of the file gid
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.hardlink_to
  kind: method
  ns: sanic.app
  description: |-
    Make this path a hard link pointing to the same file as *target*.

    Note the order of arguments (self, target) is the reverse of os.link's.
  summary: Make this path a hard link pointing to the same file as *target*
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.home
  kind: function
  ns: sanic.app
  description: |-
    Return a new path pointing to the user's home directory (as
    returned by os.path.expanduser('~')).
  summary: Return a new path pointing to the user's home directory (as
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_absolute
  kind: method
  ns: sanic.app
  description: |-
    True if the path is absolute (has both a root and, if applicable,
    a drive).
  summary: True if the path is absolute (has both a root and, if applicable,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_block_device
  kind: method
  ns: sanic.app
  description: Whether this path is a block device.
  summary: Whether this path is a block device
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_char_device
  kind: method
  ns: sanic.app
  description: Whether this path is a character device.
  summary: Whether this path is a character device
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_dir
  kind: method
  ns: sanic.app
  description: Whether this path is a directory.
  summary: Whether this path is a directory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_fifo
  kind: method
  ns: sanic.app
  description: Whether this path is a FIFO.
  summary: Whether this path is a FIFO
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_file
  kind: method
  ns: sanic.app
  description: |-
    Whether this path is a regular file (also True for symlinks pointing
    to regular files).
  summary: Whether this path is a regular file (also True for symlinks pointing
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_mount
  kind: method
  ns: sanic.app
  description: Check if this path is a POSIX mount point
  summary: Check if this path is a POSIX mount point
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_relative_to
  kind: method
  ns: sanic.app
  description: "Return True if the path is relative to another path or False.\n        "
  summary: Return True if the path is relative to another path or False
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_reserved
  kind: method
  ns: sanic.app
  description: |-
    Return True if the path contains one of the special names reserved
    by the system, if any.
  summary: Return True if the path contains one of the special names reserved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_socket
  kind: method
  ns: sanic.app
  description: Whether this path is a socket.
  summary: Whether this path is a socket
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.is_symlink
  kind: method
  ns: sanic.app
  description: Whether this path is a symbolic link.
  summary: Whether this path is a symbolic link
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.iterdir
  kind: method
  ns: sanic.app
  description: |-
    Iterate over the files in this directory.  Does not yield any
    result for the special paths '.' and '..'.
  summary: Iterate over the files in this directory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.joinpath
  kind: method
  ns: sanic.app
  description: |-
    Combine this path with one or several arguments, and return a
    new path representing either a subpath (if all arguments are relative
    paths) or a totally different path (if one of the arguments is
    anchored).
  summary: Combine this path with one or several arguments, and return a
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.lchmod
  kind: method
  ns: sanic.app
  description: |-
    Like chmod(), except if the path points to a symlink, the symlink's
    permissions are changed, rather than its target's.
  summary: Like chmod(), except if the path points to a symlink, the symlink's
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mode
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.link_to
  kind: method
  ns: sanic.app
  description: |-
    Make the target path a hard link pointing to this path.

    Note this function does not make this path a hard link to *target*,
    despite the implication of the function and argument names. The order
    of arguments (target, link) is the reverse of Path.symlink_to, but
    matches that of os.link.

    Deprecated since Python 3.10 and scheduled for removal in Python 3.12.
    Use `hardlink_to()` instead.
  summary: Make the target path a hard link pointing to this path
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.lstat
  kind: method
  ns: sanic.app
  description: |-
    Like stat(), except if the path points to a symlink, the symlink's
    status information is returned, rather than its target's.
  summary: Like stat(), except if the path points to a symlink, the symlink's
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.match
  kind: method
  ns: sanic.app
  description: Return True if this path matches the given pattern.
  summary: Return True if this path matches the given pattern
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path_pattern
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.mkdir
  kind: method
  ns: sanic.app
  description: Create a new directory at this given path.
  summary: Create a new directory at this given path
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mode
      default: '511'
      rest: false
    - kind: positional
      name: parents
      default: 'False'
      rest: false
    - kind: positional
      name: exist_ok
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.name
  kind: property
  ns: sanic.app
  description: The final path component, if any.
  summary: The final path component, if any
  signatures: null
  inherits_from: null
- name: Path.open
  kind: method
  ns: sanic.app
  description: |-
    Open the file pointed by this path and return a file object, as
    the built-in open() function does.
  summary: Open the file pointed by this path and return a file object, as
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mode
      default: r
      rest: false
    - kind: positional
      name: buffering
      default: '-1'
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - kind: positional
      name: errors
      default: None
      rest: false
    - kind: positional
      name: newline
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.owner
  kind: method
  ns: sanic.app
  description: Return the login name of the file owner.
  summary: Return the login name of the file owner
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.parent
  kind: property
  ns: sanic.app
  description: The logical parent of the path.
  summary: The logical parent of the path
  signatures: null
  inherits_from: null
- name: Path.parents
  kind: property
  ns: sanic.app
  description: A sequence of this path's logical parents.
  summary: A sequence of this path's logical parents
  signatures: null
  inherits_from: null
- name: Path.parts
  kind: property
  ns: sanic.app
  description: |-
    An object providing sequence-like access to the
    components in the filesystem path.
  summary: An object providing sequence-like access to the
  signatures: null
  inherits_from: null
- name: Path.read_bytes
  kind: method
  ns: sanic.app
  description: Open the file in bytes mode, read it, and close the file.
  summary: Open the file in bytes mode, read it, and close the file
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.read_text
  kind: method
  ns: sanic.app
  description: Open the file in text mode, read it, and close the file.
  summary: Open the file in text mode, read it, and close the file
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - kind: positional
      name: errors
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.readlink
  kind: method
  ns: sanic.app
  description: Return the path to which the symbolic link points.
  summary: Return the path to which the symbolic link points
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.relative_to
  kind: method
  ns: sanic.app
  description: |-
    Return the relative path to another path identified by the passed
    arguments.  If the operation is not possible (because this is not
    a subpath of the other path), raise ValueError.
  summary: Return the relative path to another path identified by the passed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.rename
  kind: method
  ns: sanic.app
  description: |-
    Rename this path to the target path.

    The target path may be absolute or relative. Relative paths are
    interpreted relative to the current working directory, *not* the
    directory of the Path object.

    Returns the new Path instance pointing to the target path.
  summary: Rename this path to the target path
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.replace
  kind: method
  ns: sanic.app
  description: |-
    Rename this path to the target path, overwriting if that path exists.

    The target path may be absolute or relative. Relative paths are
    interpreted relative to the current working directory, *not* the
    directory of the Path object.

    Returns the new Path instance pointing to the target path.
  summary: Rename this path to the target path, overwriting if that path exists
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.resolve
  kind: method
  ns: sanic.app
  description: |-
    Make the path absolute, resolving all symlinks on the way and also
    normalizing it.
  summary: Make the path absolute, resolving all symlinks on the way and also
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: strict
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.rglob
  kind: method
  ns: sanic.app
  description: |-
    Recursively yield all existing files (of any kind, including
    directories) matching the given relative pattern, anywhere in
    this subtree.
  summary: Recursively yield all existing files (of any kind, including
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.rmdir
  kind: method
  ns: sanic.app
  description: Remove this directory.  The directory must be empty.
  summary: Remove this directory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.root
  kind: property
  ns: sanic.app
  description: The root of the path, if any.
  summary: The root of the path, if any
  signatures: null
  inherits_from: null
- name: Path.samefile
  kind: method
  ns: sanic.app
  description: |-
    Return whether other_path is the same or not as this file
    (as returned by os.path.samefile()).
  summary: Return whether other_path is the same or not as this file
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: other_path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.stat
  kind: method
  ns: sanic.app
  description: |-
    Return the result of the stat() system call on this path, like
    os.stat() does.
  summary: Return the result of the stat() system call on this path, like
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: follow_symlinks
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.stem
  kind: property
  ns: sanic.app
  description: The final path component, minus its last suffix.
  summary: The final path component, minus its last suffix
  signatures: null
  inherits_from: null
- name: Path.suffix
  kind: property
  ns: sanic.app
  description: |-
    The final component's last suffix, if any.

    This includes the leading period. For example: '.txt'
  summary: The final component's last suffix, if any
  signatures: null
  inherits_from: null
- name: Path.suffixes
  kind: property
  ns: sanic.app
  description: |-
    A list of the final component's suffixes, if any.

    These include the leading periods. For example: ['.tar', '.gz']
  summary: A list of the final component's suffixes, if any
  signatures: null
  inherits_from: null
- name: Path.symlink_to
  kind: method
  ns: sanic.app
  description: |-
    Make this path a symlink pointing to the target path.
    Note the order of arguments (link, target) is the reverse of os.symlink.
  summary: Make this path a symlink pointing to the target path
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - kind: positional
      name: target_is_directory
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.touch
  kind: method
  ns: sanic.app
  description: Create this file with the given access mode, if it doesn't exist.
  summary: Create this file with the given access mode, if it doesn't exist
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mode
      default: '438'
      rest: false
    - kind: positional
      name: exist_ok
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.unlink
  kind: method
  ns: sanic.app
  description: |-
    Remove this file or link.
    If the path is a directory, use rmdir() instead.
  summary: Remove this file or link
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: missing_ok
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.with_name
  kind: method
  ns: sanic.app
  description: Return a new path with the file name changed.
  summary: Return a new path with the file name changed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.with_stem
  kind: method
  ns: sanic.app
  description: Return a new path with the stem changed.
  summary: Return a new path with the stem changed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: stem
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.with_suffix
  kind: method
  ns: sanic.app
  description: |-
    Return a new path with the file suffix changed.  If the path
    has no suffix, add given suffix.  If the given suffix is an empty
    string, remove the suffix from the path.
  summary: Return a new path with the file suffix changed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.write_bytes
  kind: method
  ns: sanic.app
  description: Open the file in bytes mode, write to it, and close the file.
  summary: Open the file in bytes mode, write to it, and close the file
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Path.write_text
  kind: method
  ns: sanic.app
  description: Open the file in text mode, write to it, and close the file.
  summary: Open the file in text mode, write to it, and close the file
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - kind: positional
      name: errors
      default: None
      rest: false
    - kind: positional
      name: newline
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ResponseStream
  kind: class
  ns: sanic.app
  description: |-
    A compat layer to bridge the gap after the deprecation of StreamingHTTPResponse.

    It will be removed when:
    - file_stream is moved to new style streaming
    - file and file_stream are combined into a single API
  summary: A compat layer to bridge the gap after the deprecation of StreamingHTTPResponse
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: streaming_fn
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: None
      rest: false
    - type: ResponseStream
      kind: return
  inherits_from: null
- name: ResponseStream.body
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseStream.content_type
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseStream.cookies
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseStream.eof
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ResponseStream.headers
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseStream.processed_headers
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseStream.request
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseStream.response
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseStream.status
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseStream.stream
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ResponseStream.streaming_fn
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseStream.write
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Route
  kind: class
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: router
      default: null
      rest: false
    - kind: positional
      name: raw_path
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: methods
      default: null
      rest: false
    - kind: positional
      name: requirements
      default: None
      rest: false
    - kind: positional
      name: strict
      default: 'False'
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - kind: positional
      name: static
      default: 'False'
      rest: false
    - kind: positional
      name: regex
      default: 'False'
      rest: false
    - kind: positional
      name: overloaded
      default: 'False'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: Route
      kind: return
  inherits_from: null
- name: Route.add_parameter
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: idx
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: raw_path
      default: null
      rest: false
    - kind: positional
      name: label
      default: null
      rest: false
    - kind: positional
      name: cast
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: None
      rest: false
    - kind: positional
      name: param_info_class
      default: <class 'sanic_routing.patterns.ParamInfo'>
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Route.ctx
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.defined_params
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.extra
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.finalize
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Route.handler
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.labels
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.methods
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.name
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.overloaded
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.params
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.parse_parameter_string
  kind: method
  ns: sanic.app
  description: |-
    Parse a parameter string into its constituent name, type, and
    pattern

    For example:

    ```text
    parse_parameter_string('<param_one:[A-z]>')` -> ('param_one', '[A-z]', <class 'str'>, '[A-z]')
    ```

    :param parameter_string: String to parse
    :return: tuple containing
        (parameter_name, parameter_type, parameter_pattern)
  summary: Parse a parameter string into its constituent name, type, and
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: parameter_string
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Route.parts
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.path
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.pattern
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.priority
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.raw_path
  kind: property
  ns: sanic.app
  description: The raw path from the route definition
  summary: The raw path from the route definition
  signatures: null
  inherits_from: null
- name: Route.regex
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.requirements
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.reset
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Route.router
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.segments
  kind: property
  ns: sanic.app
  description: |-
    Same as :py:attr:`~sanic_routing.route.Route.parts` except
    generalized so that any dynamic parts do not
    include param keys since they have no impact on routing.
  summary: Same as :py:attr:`~sanic_routing
  signatures: null
  inherits_from: null
- name: Route.static
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.strict
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.unquote
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Route.uri
  kind: property
  ns: sanic.app
  description: |-
    Since :py:attr:`~sanic_routing.route.Route.path` does NOT
    include a preceding '/', this adds it back.
  summary: Since :py:attr:`~sanic_routing
  signatures: null
  inherits_from: null
- name: Router
  kind: class
  ns: sanic.app
  description: The router implementation responsible for routing a `Request` object to the appropriate handler.
  summary: The router implementation responsible for routing a `Request` object to the appropriate handler
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: delimiter
      default: /
      rest: false
    - kind: positional
      name: exception
      default: <class 'sanic_routing.exceptions.NotFound'>
      rest: false
    - kind: positional
      name: method_handler_exception
      default: <class 'sanic_routing.exceptions.NoMethod'>
      rest: false
    - kind: positional
      name: route_class
      default: <class 'sanic_routing.route.Route'>
      rest: false
    - kind: positional
      name: group_class
      default: <class 'sanic_routing.group.RouteGroup'>
      rest: false
    - kind: positional
      name: stacking
      default: 'False'
      rest: false
    - kind: positional
      name: cascade_not_found
      default: 'False'
      rest: false
    - type: Router
      kind: return
  inherits_from:
  - <class 'sanic_routing.router.BaseRouter'>
  - <class 'abc.ABC'>
- name: Router.ALLOWED_METHODS
  kind: property
  ns: sanic.app
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Router.DEFAULT_METHOD
  kind: property
  ns: sanic.app
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Router.add
  kind: method
  ns: sanic.app
  description: |-
    Add a handler to the router

    Args:
        uri (str): The path of the route.
        methods (Iterable[str]): The types of HTTP methods that should be attached,
            example: ["GET", "POST", "OPTIONS"].
        handler (RouteHandler): The sync or async function to be executed.
        host (Optional[str], optional): Host that the route should be on. Defaults to None.
        strict_slashes (bool, optional): Whether to apply strict slashes. Defaults to False.
        stream (bool, optional): Whether to stream the response. Defaults to False.
        ignore_body (bool, optional): Whether the incoming request body should be read.
            Defaults to False.
        version (Union[str, float, int], optional): A version modifier for the uri. Defaults to None.
        name (Optional[str], optional): An identifying name of the route. Defaults to None.

    Returns:
        Route: The route object.
  summary: Add a handler to the router
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: 'False'
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: ignore_body
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - kind: positional
      name: static
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: overwrite
      default: 'False'
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Router.finalize
  kind: method
  ns: sanic.app
  description: |-
    Finalize the router.

    Raises:
        SanicException: if a route contains a parameter name that starts with "__" and is not in ALLOWED_LABELS
  summary: Finalize the router
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Router.find_route
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Router.find_route_by_view_name
  kind: callable
  ns: sanic.app
  description: |-
    Find a route in the router based on the specified view name.

    Args:
        view_name (str): the name of the view to search for
        name (Optional[str], optional): the name of the route. Defaults to `None`.

    Returns:
        Optional[Route]: the route object
  summary: Find a route in the router based on the specified view name
  signatures: null
  inherits_from: null
- name: Router.get
  kind: callable
  ns: sanic.app
  description: |-
    Retrieve a `Route` object containing the details about how to handle a response for a given request

    :param request: the incoming request object
    :type request: Request
    :return: details needed for handling the request and returning the
        correct response
    :rtype: Tuple[ Route, RouteHandler, Dict[str, Any]]

    Args:
        path (str): the path of the route
        method (str): the HTTP method of the route
        host (Optional[str]): the host of the route

    Raises:
        NotFound: if the route is not found
        MethodNotAllowed: if the method is not allowed for the route

    Returns:
        Tuple[Route, RouteHandler, Dict[str, Any]]: the route, handler, and match info
  summary: Retrieve a `Route` object containing the details about how to handle a response for a given request
  signatures: null
  inherits_from: null
- name: Router.groups
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Router.matchers
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Router.register_pattern
  kind: method
  ns: sanic.app
  description: |-
    Add a custom parameter type to the router. The cast should raise a
    ValueError if it is an incorrect type. The order of registration is
    important if it is possible that a single value could pass multiple
    pattern types. Therefore, patterns are tried in the REVERSE order of
    registration. All custom patterns will be evaluated before any built-in
    patterns.

    :param label: The parts that is used to signify the type: example

    :type label: str
    :param cast: The callable that casts the value to the desired type, or
        fails trying
    :type cast: t.Callable[[str], t.Any]
    :param pattern: A regular expression that could also match the path
        segment
    :type pattern: Union[t.Pattern, str]
  summary: Add a custom parameter type to the router
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: label
      default: null
      rest: false
    - kind: positional
      name: cast
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: null
      rest: false
    - kind: positional
      name: param_info_class
      default: <class 'sanic_routing.patterns.ParamInfo'>
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Router.reset
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Router.resolve
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - name: method
      default: None
      rest: false
      kind: kw-only
    - name: orig
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Router.routes
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Router.routes_all
  kind: property
  ns: sanic.app
  description: |-
    Return all routes in the router.

    Returns:
        Dict[Tuple[str, ...], Route]: a dictionary of routes
  summary: Return all routes in the router
  signatures: null
  inherits_from: null
- name: Router.routes_dynamic
  kind: property
  ns: sanic.app
  description: |-
    Return all dynamic routes in the router.

    _Dynamic routes are routes that contain path parameters._

    Returns:
        Dict[Tuple[str, ...], Route]: a dictionary of routes
  summary: Return all dynamic routes in the router
  signatures: null
  inherits_from: null
- name: Router.routes_regex
  kind: property
  ns: sanic.app
  description: |-
    Return all regex routes in the router.

    _Regex routes are routes that contain path parameters with regex
    expressions, or otherwise need regex to resolve._

    Returns:
        Dict[Tuple[str, ...], Route]: a dictionary of routes
  summary: Return all regex routes in the router
  signatures: null
  inherits_from: null
- name: Router.routes_static
  kind: property
  ns: sanic.app
  description: |-
    Return all static routes in the router.

    _In this context "static" routes do not refer to the `app.static()`
    method. Instead, they refer to routes that do not contain
    any path parameters._

    Returns:
        Dict[Tuple[str, ...], Route]: a dictionary of routes
  summary: Return all static routes in the router
  signatures: null
  inherits_from: null
- name: SANIC_PREFIX
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicVar
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ServerStage
  kind: class
  ns: sanic.app
  description: Server stages.
  summary: Server stages
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: ServerStage
      kind: return
  inherits_from:
  - <enum 'IntEnum'>
  - <class 'int'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: ServerStage.PARTIAL
  kind: property
  ns: sanic.app
  description: Server stages.
  summary: Server stages
  signatures: null
  inherits_from: null
- name: ServerStage.SERVING
  kind: property
  ns: sanic.app
  description: Server stages.
  summary: Server stages
  signatures: null
  inherits_from: null
- name: ServerStage.STOPPED
  kind: property
  ns: sanic.app
  description: Server stages.
  summary: Server stages
  signatures: null
  inherits_from: null
- name: ServerStage.as_integer_ratio
  kind: callable
  ns: sanic.app
  description: |-
    Return integer ratio.

    Return a pair of integers, whose ratio is exactly equal to the original int
    and with a positive denominator.

    >>> (10).as_integer_ratio()
    (10, 1)
    >>> (-10).as_integer_ratio()
    (-10, 1)
    >>> (0).as_integer_ratio()
    (0, 1)
  summary: Return integer ratio
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ServerStage.bit_count
  kind: callable
  ns: sanic.app
  description: |-
    Number of ones in the binary representation of the absolute value of self.

    Also known as the population count.

    >>> bin(13)
    '0b1101'
    >>> (13).bit_count()
    3
  summary: Number of ones in the binary representation of the absolute value of self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ServerStage.bit_length
  kind: callable
  ns: sanic.app
  description: |-
    Number of bits necessary to represent self in binary.

    >>> bin(37)
    '0b100101'
    >>> (37).bit_length()
    6
  summary: Number of bits necessary to represent self in binary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ServerStage.conjugate
  kind: callable
  ns: sanic.app
  description: Returns self, the complex conjugate of any int.
  summary: Returns self, the complex conjugate of any int
  signatures: null
  inherits_from: null
- name: ServerStage.denominator
  kind: property
  ns: sanic.app
  description: the denominator of a rational number in lowest terms
  summary: the denominator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: ServerStage.imag
  kind: property
  ns: sanic.app
  description: the imaginary part of a complex number
  summary: the imaginary part of a complex number
  signatures: null
  inherits_from: null
- name: ServerStage.numerator
  kind: property
  ns: sanic.app
  description: the numerator of a rational number in lowest terms
  summary: the numerator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: ServerStage.real
  kind: property
  ns: sanic.app
  description: the real part of a complex number
  summary: the real part of a complex number
  signatures: null
  inherits_from: null
- name: ServerStage.to_bytes
  kind: callable
  ns: sanic.app
  description: |-
    Return an array of bytes representing an integer.

    length
      Length of bytes object to use.  An OverflowError is raised if the
      integer is not representable with the given number of bytes.  Default
      is length 1.
    byteorder
      The byte order used to represent the integer.  If byteorder is 'big',
      the most significant byte is at the beginning of the byte array.  If
      byteorder is 'little', the most significant byte is at the end of the
      byte array.  To request the native byte order of the host system, use
      `sys.byteorder' as the byte order value.  Default is to use 'big'.
    signed
      Determines whether two's complement is used to represent the integer.
      If signed is False and a negative integer is given, an OverflowError
      is raised.
  summary: Return an array of bytes representing an integer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: length
      default: '1'
      rest: false
    - kind: positional
      name: byteorder
      default: big
      rest: false
    - name: signed
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.app
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SharedContext
  kind: class
  ns: sanic.app
  description: |-
    A simple attribute-based namespace.

    SimpleNamespace(**kwargs)
  summary: A simple attribute-based namespace
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: SharedContext
      kind: return
  inherits_from:
  - <class 'types.SimpleNamespace'>
- name: SharedContext.SAFE
  kind: property
  ns: sanic.app
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: SharedContext.is_locked
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SharedContext.lock
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signal
  kind: class
  ns: sanic.app
  description: A `Route` that is used to dispatch signals to handlers
  summary: A `Route` that is used to dispatch signals to handlers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: router
      default: null
      rest: false
    - kind: positional
      name: raw_path
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: methods
      default: null
      rest: false
    - kind: positional
      name: requirements
      default: None
      rest: false
    - kind: positional
      name: strict
      default: 'False'
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - kind: positional
      name: static
      default: 'False'
      rest: false
    - kind: positional
      name: regex
      default: 'False'
      rest: false
    - kind: positional
      name: overloaded
      default: 'False'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: Signal
      kind: return
  inherits_from:
  - <class 'sanic_routing.route.Route'>
- name: Signal.add_parameter
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: idx
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: raw_path
      default: null
      rest: false
    - kind: positional
      name: label
      default: null
      rest: false
    - kind: positional
      name: cast
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: None
      rest: false
    - kind: positional
      name: param_info_class
      default: <class 'sanic_routing.patterns.ParamInfo'>
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signal.ctx
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.defined_params
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.extra
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.finalize
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signal.handler
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.labels
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.methods
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.name
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.overloaded
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.params
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.parse_parameter_string
  kind: method
  ns: sanic.app
  description: |-
    Parse a parameter string into its constituent name, type, and
    pattern

    For example:

    ```text
    parse_parameter_string('<param_one:[A-z]>')` -> ('param_one', '[A-z]', <class 'str'>, '[A-z]')
    ```

    :param parameter_string: String to parse
    :return: tuple containing
        (parameter_name, parameter_type, parameter_pattern)
  summary: Parse a parameter string into its constituent name, type, and
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: parameter_string
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signal.parts
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.path
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.pattern
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.priority
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.raw_path
  kind: property
  ns: sanic.app
  description: The raw path from the route definition
  summary: The raw path from the route definition
  signatures: null
  inherits_from: null
- name: Signal.regex
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.requirements
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.reset
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signal.router
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.segments
  kind: property
  ns: sanic.app
  description: |-
    Same as :py:attr:`~sanic_routing.route.Route.parts` except
    generalized so that any dynamic parts do not
    include param keys since they have no impact on routing.
  summary: Same as :py:attr:`~sanic_routing
  signatures: null
  inherits_from: null
- name: Signal.static
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.strict
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.unquote
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signal.uri
  kind: property
  ns: sanic.app
  description: |-
    Since :py:attr:`~sanic_routing.route.Route.path` does NOT
    include a preceding '/', this adds it back.
  summary: Since :py:attr:`~sanic_routing
  signatures: null
  inherits_from: null
- name: SignalRouter
  kind: class
  ns: sanic.app
  description: A `BaseRouter` that is used to dispatch signals to handlers
  summary: A `BaseRouter` that is used to dispatch signals to handlers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: SignalRouter
      kind: return
  inherits_from:
  - <class 'sanic_routing.router.BaseRouter'>
  - <class 'abc.ABC'>
- name: SignalRouter.ALLOWED_METHODS
  kind: property
  ns: sanic.app
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: SignalRouter.DEFAULT_METHOD
  kind: property
  ns: sanic.app
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: SignalRouter.add
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: condition
      default: None
      rest: false
    - kind: positional
      name: exclusive
      default: 'True'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalRouter.dispatch
  kind: method
  ns: sanic.app
  description: |-
    Dispatch a signal to all handlers that match the event

    Args:
        event (str): The event to dispatch
        context (Optional[Dict[str, Any]], optional): A dictionary of context to pass to the handlers. Defaults to `None`.
        condition (Optional[Dict[str, str]], optional): A dictionary of conditions to match against the handlers. Defaults to `None`.
        fail_not_found (bool, optional): Whether to raise an exception if no handlers are found. Defaults to `True`.
        inline (bool, optional): Whether to run the handlers inline. An inline run means it will return the value of the signal handler. When `False` (which is the default) the signal handler will run in a background task. Defaults to `False`.
        reverse (bool, optional): Whether to run the handlers in reverse order. Defaults to `False`.

    Returns:
        Union[asyncio.Task, Any]: If `inline` is `True` then the return value of the signal handler will be returned. If `inline` is `False` then an `asyncio.Task` will be returned.

    Raises:
        RuntimeError: If the signal is dispatched outside of an event loop
  summary: Dispatch a signal to all handlers that match the event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: condition
      default: None
      rest: false
      kind: kw-only
    - name: fail_not_found
      default: 'True'
      rest: false
      kind: kw-only
    - name: inline
      default: 'False'
      rest: false
      kind: kw-only
    - name: reverse
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalRouter.finalize
  kind: method
  ns: sanic.app
  description: |-
    Finalize the router and compile the routes

    Args:
        do_compile (bool, optional): Whether to compile the routes. Defaults to `True`.
        do_optimize (bool, optional): Whether to optimize the routes. Defaults to `False`.

    Returns:
        SignalRouter: The router

    Raises:
        RuntimeError: If the router is finalized outside of an event loop
  summary: Finalize the router and compile the routes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: do_compile
      default: 'True'
      rest: false
    - kind: positional
      name: do_optimize
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalRouter.find_route
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalRouter.format_event
  kind: method
  ns: sanic.app
  description: |-
    Ensure event strings in proper format

    Args:
        event (str): event string

    Returns:
        str: formatted event string
  summary: Ensure event strings in proper format
  signatures:
  - - kind: positional
      name: event
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalRouter.get
  kind: method
  ns: sanic.app
  description: |-
    Get the handlers for a signal

    Args:
        event (str): The event to get the handlers for
        condition (Optional[Dict[str, str]], optional): A dictionary of conditions to match against the handlers. Defaults to `None`.

    Returns:
        Tuple[SignalGroup, List[SignalHandler], Dict[str, Any]]: A tuple of the `SignalGroup` that matched, a list of the handlers that matched, and a dictionary of the params that matched

    Raises:
        NotFound: If no handlers are found
  summary: Get the handlers for a signal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: condition
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalRouter.get_waiter
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: condition
      default: None
      rest: false
    - kind: positional
      name: exclusive
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalRouter.groups
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalRouter.matchers
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalRouter.register_pattern
  kind: method
  ns: sanic.app
  description: |-
    Add a custom parameter type to the router. The cast should raise a
    ValueError if it is an incorrect type. The order of registration is
    important if it is possible that a single value could pass multiple
    pattern types. Therefore, patterns are tried in the REVERSE order of
    registration. All custom patterns will be evaluated before any built-in
    patterns.

    :param label: The parts that is used to signify the type: example

    :type label: str
    :param cast: The callable that casts the value to the desired type, or
        fails trying
    :type cast: t.Callable[[str], t.Any]
    :param pattern: A regular expression that could also match the path
        segment
    :type pattern: Union[t.Pattern, str]
  summary: Add a custom parameter type to the router
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: label
      default: null
      rest: false
    - kind: positional
      name: cast
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: null
      rest: false
    - kind: positional
      name: param_info_class
      default: <class 'sanic_routing.patterns.ParamInfo'>
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalRouter.reset
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalRouter.resolve
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - name: method
      default: None
      rest: false
      kind: kw-only
    - name: orig
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalRouter.routes
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SimpleNamespace
  kind: class
  ns: sanic.app
  description: |-
    A simple attribute-based namespace.

    SimpleNamespace(**kwargs)
  summary: A simple attribute-based namespace
  signatures: null
  inherits_from: null
- name: Stage
  kind: class
  ns: sanic.app
  description: |-
    Enum for representing the stage of the request/response cycle

    | ``IDLE``  Waiting for request
    | ``REQUEST``  Request headers being received
    | ``HANDLER``  Headers done, handler running
    | ``RESPONSE``  Response headers sent, body in progress
    | ``FAILED``  Unrecoverable state (error while sending response)
    |
  summary: Enum for representing the stage of the request/response cycle
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Stage
      kind: return
  inherits_from:
  - <enum 'Enum'>
- name: Stage.FAILED
  kind: property
  ns: sanic.app
  description: |-
    Enum for representing the stage of the request/response cycle

    | ``IDLE``  Waiting for request
    | ``REQUEST``  Request headers being received
    | ``HANDLER``  Headers done, handler running
    | ``RESPONSE``  Response headers sent, body in progress
    | ``FAILED``  Unrecoverable state (error while sending response)
    |
  summary: Enum for representing the stage of the request/response cycle
  signatures: null
  inherits_from: null
- name: Stage.HANDLER
  kind: property
  ns: sanic.app
  description: |-
    Enum for representing the stage of the request/response cycle

    | ``IDLE``  Waiting for request
    | ``REQUEST``  Request headers being received
    | ``HANDLER``  Headers done, handler running
    | ``RESPONSE``  Response headers sent, body in progress
    | ``FAILED``  Unrecoverable state (error while sending response)
    |
  summary: Enum for representing the stage of the request/response cycle
  signatures: null
  inherits_from: null
- name: Stage.IDLE
  kind: property
  ns: sanic.app
  description: |-
    Enum for representing the stage of the request/response cycle

    | ``IDLE``  Waiting for request
    | ``REQUEST``  Request headers being received
    | ``HANDLER``  Headers done, handler running
    | ``RESPONSE``  Response headers sent, body in progress
    | ``FAILED``  Unrecoverable state (error while sending response)
    |
  summary: Enum for representing the stage of the request/response cycle
  signatures: null
  inherits_from: null
- name: Stage.REQUEST
  kind: property
  ns: sanic.app
  description: |-
    Enum for representing the stage of the request/response cycle

    | ``IDLE``  Waiting for request
    | ``REQUEST``  Request headers being received
    | ``HANDLER``  Headers done, handler running
    | ``RESPONSE``  Response headers sent, body in progress
    | ``FAILED``  Unrecoverable state (error while sending response)
    |
  summary: Enum for representing the stage of the request/response cycle
  signatures: null
  inherits_from: null
- name: Stage.RESPONSE
  kind: property
  ns: sanic.app
  description: |-
    Enum for representing the stage of the request/response cycle

    | ``IDLE``  Waiting for request
    | ``REQUEST``  Request headers being received
    | ``HANDLER``  Headers done, handler running
    | ``RESPONSE``  Response headers sent, body in progress
    | ``FAILED``  Unrecoverable state (error while sending response)
    |
  summary: Enum for representing the stage of the request/response cycle
  signatures: null
  inherits_from: null
- name: Stage.name
  kind: property
  ns: sanic.app
  description: The name of the Enum member.
  summary: The name of the Enum member
  signatures: null
  inherits_from: null
- name: Stage.value
  kind: property
  ns: sanic.app
  description: The value of the Enum member.
  summary: The value of the Enum member
  signatures: null
  inherits_from: null
- name: StartupMixin
  kind: class
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - type: StartupMixin
      kind: return
  inherits_from: null
- name: StartupMixin.START_METHOD_SET
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: StartupMixin.create_server
  kind: method
  ns: sanic.app
  description: |-
    Low level API for creating a Sanic Server instance.

    This method will create a Sanic Server instance, but will not start
    it. This is useful for integrating Sanic into other systems. But, you
    should take caution when using it as it is a low level API and does
    not perform any of the lifecycle events.

    .. note::
        This does not support multiprocessing and is not the preferred
        way to run a Sanic application. Proceed with caution.

    You will need to start the server yourself as shown in the example
    below. You are responsible for the lifecycle of the server, including
    app startup using `await app.startup()`. No events will be triggered
    for you, so you will need to trigger them yourself if wanted.

    Args:
        host (Optional[str]): Address to host on.
        port (Optional[int]): Port to host on.
        debug (bool): Enables debug output (slows server).
        ssl (Union[None, SSLContext, dict, str, list, tuple]): SSLContext,
            or location of certificate and key for SSL encryption
            of worker(s).
        sock (Optional[socket]): Socket for the server to accept
            connections from.
        protocol (Optional[Type[Protocol]]): Subclass of
            `asyncio.Protocol` class.
        backlog (int): Number of unaccepted connections that the system
            will allow before refusing new connections.
        access_log (Optional[bool]): Enables writing access logs
            (slows server).
        return_asyncio_server (bool): _DEPRECATED_
        asyncio_server_kwargs (Optional[Dict[str, Any]]): Key-value
            arguments for asyncio/uvloop `create_server` method.
        noisy_exceptions (Optional[bool]): Log exceptions that are normally
            considered to be quiet/silent.

    Returns:
        Optional[AsyncioServer]: AsyncioServer if `return_asyncio_server`
            is `True` else `None`.

    Examples:
        ```python
        import asyncio
        import uvloop
        from sanic import Sanic, response


        app = Sanic("Example")


        @app.route("/")
        async def test(request):
            return response.json({"answer": "42"})


        async def main():
            server = await app.create_server()
            await server.startup()
            await server.serve_forever()


        if __name__ == "__main__":
            asyncio.set_event_loop(uvloop.new_event_loop())
            asyncio.run(main())
        ```
  summary: Low level API for creating a Sanic Server instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: port
      default: None
      rest: false
    - name: debug
      default: 'False'
      rest: false
      kind: kw-only
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: protocol
      default: None
      rest: false
      kind: kw-only
    - name: backlog
      default: '100'
      rest: false
      kind: kw-only
    - name: access_log
      default: None
      rest: false
      kind: kw-only
    - name: unix
      default: None
      rest: false
      kind: kw-only
    - name: return_asyncio_server
      default: 'True'
      rest: false
      kind: kw-only
    - name: asyncio_server_kwargs
      default: None
      rest: false
      kind: kw-only
    - name: noisy_exceptions
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.get_address
  kind: method
  ns: sanic.app
  description: |-
    Retrieve the host address and port, with default values based on the given parameters.

    Args:
        host (Optional[str]): Host IP or FQDN for the service to use. Defaults to `"127.0.0.1"`.
        port (Optional[int]): Port number. Defaults to `8443` if version is 3 or `auto_tls=True`, else `8000`
        version (HTTPVersion, optional): HTTP Version. Defaults to `HTTP.VERSION_1` (HTTP/1.1).
        auto_tls (bool, optional): Automatic TLS flag. Defaults to `False`.

    Returns:
        Tuple[str, int]: Tuple containing the host and port
  summary: Retrieve the host address and port, with default values based on the given parameters
  signatures:
  - - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: port
      default: null
      rest: false
    - kind: positional
      name: version
      default: '1'
      rest: false
    - kind: positional
      name: auto_tls
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.get_motd_data
  kind: method
  ns: sanic.app
  description: |-
    Retrieves the message of the day (MOTD) data.

    Args:
        server_settings (Optional[Dict[str, Any]], optional): Settings for
            the server. Defaults to `None`.

    Returns:
        Tuple[Dict[str, Any], Dict[str, Any]]: A tuple containing two
            dictionaries with the relevant MOTD data.
  summary: Retrieves the message of the day (MOTD) data
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: server_settings
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.get_server_location
  kind: method
  ns: sanic.app
  description: |-
    Using the server settings, retrieve the server location.

    Args:
        server_settings (Optional[Dict[str, Any]], optional): Settings for
            the server. Defaults to `None`.

    Returns:
        str: The server location.
  summary: Using the server settings, retrieve the server location
  signatures:
  - - kind: positional
      name: server_settings
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.m
  kind: property
  ns: sanic.app
  description: |-
    Interface for interacting with the worker processes

    This is a shortcut for `app.multiplexer`. It is available only in a
    worker process using the Sanic server. It allows you to interact with
    the worker processes, such as sending messages and commands.

    See [Access to the multiplexer](/en/guide/deployment/manager#access-to-the-multiplexer) for more information.

    Returns:
        WorkerMultiplexer: The worker multiplexer instance

    Examples:
        ```python
        app.m.restart()    # restarts the worker
        app.m.terminate()  # terminates the worker
        app.m.scale(4)     # scales the number of workers to 4
    ```
  summary: Interface for interacting with the worker processes
  signatures: null
  inherits_from: null
- name: StartupMixin.make_coffee
  kind: method
  ns: sanic.app
  description: |-
    Try for yourself! `sanic server:app --coffee`

     ```
     ▄████████▄
    ██       ██▀▀▄
    ███████████  █
    ███████████▄▄▀
     ▀███████▀

     ```
  summary: Try for yourself! `sanic server:app --coffee`
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.motd
  kind: method
  ns: sanic.app
  description: |-
    Outputs the message of the day (MOTD).

    It generally can only be called once per process, and is usually
    called by the `run` method in the main process.

    Args:
        server_settings (Optional[Dict[str, Any]], optional): Settings for
            the server. Defaults to `None`.

    Returns:
        None
  summary: Outputs the message of the day (MOTD)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: server_settings
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.prepare
  kind: method
  ns: sanic.app
  description: |-
    Prepares one or more Sanic applications to be served simultaneously.

    This low-level API is typically used when you need to run multiple Sanic applications at the same time. Once prepared, `Sanic.serve()` should be called in the `if __name__ == "__main__"` block.

    .. note::
        "Preparing" and "serving" with this function is equivalent to using `app.run` for a single instance. This should only be used when running multiple applications at the same time.

    Args:
        host (Optional[str], optional): Hostname to listen on. Defaults to `None`.
        port (Optional[int], optional): Port to listen on. Defaults to `None`.
        dev (bool, optional): Development mode. Defaults to `False`.
        debug (bool, optional): Debug mode. Defaults to `False`.
        auto_reload (Optional[bool], optional): Auto reload feature. Defaults to `None`.
        version (HTTPVersion, optional): HTTP version to use. Defaults to `HTTP.VERSION_1`.
        ssl (Union[None, SSLContext, dict, str, list, tuple], optional): SSL configuration. Defaults to `None`.
        sock (Optional[socket], optional): Socket to bind to. Defaults to `None`.
        workers (int, optional): Number of worker processes. Defaults to `1`.
        protocol (Optional[Type[Protocol]], optional): Custom protocol class. Defaults to `None`.
        backlog (int, optional): Maximum number of pending connections. Defaults to `100`.
        register_sys_signals (bool, optional): Register system signals. Defaults to `True`.
        access_log (Optional[bool], optional): Access log. Defaults to `None`.
        unix (Optional[str], optional): Unix socket. Defaults to `None`.
        loop (Optional[AbstractEventLoop], optional): Event loop. Defaults to `None`.
        reload_dir (Optional[Union[List[str], str]], optional): Reload directory. Defaults to `None`.
        noisy_exceptions (Optional[bool], optional): Display exceptions. Defaults to `None`.
        motd (bool, optional): Display message of the day. Defaults to `True`.
        fast (bool, optional): Fast mode. Defaults to `False`.
        verbosity (int, optional): Verbosity level. Defaults to `0`.
        motd_display (Optional[Dict[str, str]], optional): Custom MOTD display. Defaults to `None`.
        coffee (bool, optional): Coffee mode. Defaults to `False`.
        auto_tls (bool, optional): Auto TLS. Defaults to `False`.
        single_process (bool, optional): Single process mode. Defaults to `False`.

    Raises:
        RuntimeError: Raised when attempting to serve HTTP/3 as a secondary server.
        RuntimeError: Raised when attempting to use both `fast` and `workers`.
        RuntimeError: Raised when attempting to use `single_process` with `fast`, `workers`, or `auto_reload`.
        TypeError: Raised when attempting to use `loop` with `create_server`.
        ValueError: Raised when `PROXIES_COUNT` is negative.

    Examples:
        ```python
        if __name__ == "__main__":
            app.prepare()
            app.serve()
        ```
  summary: Prepares one or more Sanic applications to be served simultaneously
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: port
      default: None
      rest: false
    - name: dev
      default: 'False'
      rest: false
      kind: kw-only
    - name: debug
      default: 'False'
      rest: false
      kind: kw-only
    - name: auto_reload
      default: None
      rest: false
      kind: kw-only
    - name: version
      default: '1'
      rest: false
      kind: kw-only
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: workers
      default: '1'
      rest: false
      kind: kw-only
    - name: protocol
      default: None
      rest: false
      kind: kw-only
    - name: backlog
      default: '100'
      rest: false
      kind: kw-only
    - name: register_sys_signals
      default: 'True'
      rest: false
      kind: kw-only
    - name: access_log
      default: None
      rest: false
      kind: kw-only
    - name: unix
      default: None
      rest: false
      kind: kw-only
    - name: loop
      default: None
      rest: false
      kind: kw-only
    - name: reload_dir
      default: None
      rest: false
      kind: kw-only
    - name: noisy_exceptions
      default: None
      rest: false
      kind: kw-only
    - name: motd
      default: 'True'
      rest: false
      kind: kw-only
    - name: fast
      default: 'False'
      rest: false
      kind: kw-only
    - name: verbosity
      default: '0'
      rest: false
      kind: kw-only
    - name: motd_display
      default: None
      rest: false
      kind: kw-only
    - name: coffee
      default: 'False'
      rest: false
      kind: kw-only
    - name: auto_tls
      default: 'False'
      rest: false
      kind: kw-only
    - name: single_process
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.run
  kind: method
  ns: sanic.app
  description: |-
    Run the HTTP Server and listen until keyboard interrupt or term signal. On termination, drain connections before closing.

    .. note::
        When you need control over running the Sanic instance, this is the method to use.
        However, in most cases the preferred method is to use the CLI command:

        ```sh
        sanic server:app`
        ```

    If you are using this method to run Sanic, make sure you do the following:

    1. Use `if __name__ == "__main__"` to guard the code.
    2. Do **NOT** define the app instance inside the `if` block.

    See [Dynamic Applications](/en/guide/deployment/app-loader) for more information about the second point.

    Args:
        host (Optional[str]): Address to host on.
        port (Optional[int]): Port to host on.
        dev (bool): Run the server in development mode.
        debug (bool): Enables debug output (slows server).
        auto_reload (Optional[bool]): Reload app whenever its source code is changed.
            Enabled by default in debug mode.
        version (HTTPVersion): HTTP Version.
        ssl (Union[None, SSLContext, dict, str, list, tuple]): SSLContext, or location of certificate and key
            for SSL encryption of worker(s).
        sock (Optional[socket]): Socket for the server to accept connections from.
        workers (int): Number of processes received before it is respected.
        protocol (Optional[Type[Protocol]]): Subclass of asyncio Protocol class.
        backlog (int): A number of unaccepted connections that the system will allow
            before refusing new connections.
        register_sys_signals (bool): Register SIG* events.
        access_log (Optional[bool]): Enables writing access logs (slows server).
        unix (Optional[str]): Unix socket to listen on instead of TCP port.
        loop (Optional[AbstractEventLoop]): AsyncIO event loop.
        reload_dir (Optional[Union[List[str], str]]): Directory to watch for code changes, if auto_reload is True.
        noisy_exceptions (Optional[bool]): Log exceptions that are normally considered to be quiet/silent.
        motd (bool): Display Message of the Day.
        fast (bool): Enable fast mode.
        verbosity (int): Verbosity level.
        motd_display (Optional[Dict[str, str]]): Customize Message of the Day display.
        auto_tls (bool): Enable automatic TLS certificate handling.
        single_process (bool): Enable single process mode.

    Returns:
        None

    Raises:
        RuntimeError: Raised when attempting to serve HTTP/3 as a secondary server.
        RuntimeError: Raised when attempting to use both `fast` and `workers`.
        RuntimeError: Raised when attempting to use `single_process` with `fast`, `workers`, or `auto_reload`.
        TypeError: Raised when attempting to use `loop` with `create_server`.
        ValueError: Raised when `PROXIES_COUNT` is negative.

    Examples:
        ```python
        from sanic import Sanic, Request, json

        app = Sanic("TestApp")


        @app.get("/")
        async def handler(request: Request):
            return json({"foo": "bar"})


        if __name__ == "__main__":
            app.run(port=9999, dev=True)
        ```
  summary: Run the HTTP Server and listen until keyboard interrupt or term signal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: port
      default: None
      rest: false
    - name: dev
      default: 'False'
      rest: false
      kind: kw-only
    - name: debug
      default: 'False'
      rest: false
      kind: kw-only
    - name: auto_reload
      default: None
      rest: false
      kind: kw-only
    - name: version
      default: '1'
      rest: false
      kind: kw-only
    - name: ssl
      default: None
      rest: false
      kind: kw-only
    - name: sock
      default: None
      rest: false
      kind: kw-only
    - name: workers
      default: '1'
      rest: false
      kind: kw-only
    - name: protocol
      default: None
      rest: false
      kind: kw-only
    - name: backlog
      default: '100'
      rest: false
      kind: kw-only
    - name: register_sys_signals
      default: 'True'
      rest: false
      kind: kw-only
    - name: access_log
      default: None
      rest: false
      kind: kw-only
    - name: unix
      default: None
      rest: false
      kind: kw-only
    - name: loop
      default: None
      rest: false
      kind: kw-only
    - name: reload_dir
      default: None
      rest: false
      kind: kw-only
    - name: noisy_exceptions
      default: None
      rest: false
      kind: kw-only
    - name: motd
      default: 'True'
      rest: false
      kind: kw-only
    - name: fast
      default: 'False'
      rest: false
      kind: kw-only
    - name: verbosity
      default: '0'
      rest: false
      kind: kw-only
    - name: motd_display
      default: None
      rest: false
      kind: kw-only
    - name: auto_tls
      default: 'False'
      rest: false
      kind: kw-only
    - name: single_process
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.serve
  kind: function
  ns: sanic.app
  description: |-
    Serve one or more Sanic applications.

    This is the main entry point for running Sanic applications. It
    should be called in the `if __name__ == "__main__"` block.

    Args:
        primary (Optional[Sanic], optional): The primary Sanic application
            to serve. Defaults to `None`.
        app_loader (Optional[AppLoader], optional): An AppLoader instance
            to use for loading applications. Defaults to `None`.
        factory (Optional[Callable[[], Sanic]], optional): A factory
            function to use for loading applications. Defaults to `None`.

    Raises:
        RuntimeError: Raised when no applications are found.
        RuntimeError: Raised when no server information is found for the
            primary application.
        RuntimeError: Raised when attempting to use `loop` with
            `create_server`.
        RuntimeError: Raised when attempting to use `single_process` with
            `fast`, `workers`, or `auto_reload`.
        RuntimeError: Raised when attempting to serve HTTP/3 as a
            secondary server.
        RuntimeError: Raised when attempting to use both `fast` and
            `workers`.
        TypeError: Raised when attempting to use `loop` with
            `create_server`.
        ValueError: Raised when `PROXIES_COUNT` is negative.

    Examples:
        ```python
        if __name__ == "__main__":
            app.prepare()
            Sanic.serve()
        ```
  summary: Serve one or more Sanic applications
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: primary
      default: None
      rest: false
    - name: app_loader
      default: None
      rest: false
      kind: kw-only
    - name: factory
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.serve_location
  kind: property
  ns: sanic.app
  description: |-
    Retrieve the server location.

    Returns:
        str: The server location.
  summary: Retrieve the server location
  signatures: null
  inherits_from: null
- name: StartupMixin.serve_single
  kind: function
  ns: sanic.app
  description: |-
    Serve a single process of a Sanic application.

    Similar to `serve`, but only serves a single process. When used,
    certain features are disabled, such as `fast`, `workers`,
    `multiplexer`, `auto_reload`, and the Inspector. It is almost
    never needed to use this method directly. Instead, you should
    use the CLI:

    ```sh
    sanic app.sanic:app --single-process
    ```

    Or, if you need to do it programmatically, you should use the
    `single_process` argument of `run`:

    ```python
    app.run(single_process=True)
    ```

    Args:
        primary (Optional[Sanic], optional): The primary Sanic application
            to serve. Defaults to `None`.

    Raises:
        RuntimeError: Raised when no applications are found.
        RuntimeError: Raised when no server information is found for the
            primary application.
        RuntimeError: Raised when attempting to serve HTTP/3 as a
            secondary server.
        RuntimeError: Raised when attempting to use both `fast` and
            `workers`.
        ValueError: Raised when `PROXIES_COUNT` is negative.
  summary: Serve a single process of a Sanic application
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: primary
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.setup_loop
  kind: method
  ns: sanic.app
  description: |-
    Set up the event loop.

    An internal method that sets up the event loop to uvloop if
    possible, or a Windows selector loop if on Windows.

    Returns:
        None
  summary: Set up the event loop
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.should_auto_reload
  kind: function
  ns: sanic.app
  description: |-
    Check if any applications have auto-reload enabled.

    Returns:
        bool: `True` if any applications have auto-reload enabled, else
            `False`.
  summary: Check if any applications have auto-reload enabled
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StartupMixin.start_method
  kind: property
  ns: sanic.app
  description: |-
    It is used to replace `None` or `object()` as a sentinel
    that represents a default value. Sometimes we want to set
    a value to `None` so we cannot use `None` to represent the
    default value, and `object()` is hard to be typed.
  summary: It is used to replace `None` or `object()` as a sentinel
  signatures: null
  inherits_from: null
- name: StartupMixin.stop
  kind: method
  ns: sanic.app
  description: |-
    This kills the Sanic server, cleaning up after itself.

    Args:
        terminate (bool): Force kill all requests immediately without
            allowing them to finish processing.
        unregister (bool): Unregister the app from the global registry.

    Returns:
        None
  summary: This kills the Sanic server, cleaning up after itself
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: terminate
      default: 'True'
      rest: false
    - kind: positional
      name: unregister
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StaticHandleMixin
  kind: class
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - type: StaticHandleMixin
      kind: return
  inherits_from: null
- name: TYPE_CHECKING
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Task
  kind: class
  ns: sanic.app
  description: A coroutine wrapped in a Future.
  summary: A coroutine wrapped in a Future
  signatures:
  - - kind: positional
      name: coro
      default: null
      rest: false
    - name: loop
      default: None
      rest: false
      kind: kw-only
    - name: name
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - type: Task
      kind: return
  inherits_from:
  - <class '_asyncio.Future'>
- name: Task.add_done_callback
  kind: callable
  ns: sanic.app
  description: |-
    Add a callback to be run when the future becomes done.

    The callback is called with a single argument - the future object. If
    the future is already done when this is called, the callback is
    scheduled with call_soon.
  summary: Add a callback to be run when the future becomes done
  signatures: null
  inherits_from: null
- name: Task.cancel
  kind: callable
  ns: sanic.app
  description: |-
    Request that this task cancel itself.

    This arranges for a CancelledError to be thrown into the
    wrapped coroutine on the next cycle through the event loop.
    The coroutine then has a chance to clean up or even deny
    the request using try/except/finally.

    Unlike Future.cancel, this does not guarantee that the
    task will be cancelled: the exception might be caught and
    acted upon, delaying cancellation of the task or preventing
    cancellation completely.  The task may also return a value or
    raise a different exception.

    Immediately after this method is called, Task.cancelled() will
    not return True (unless the task was already cancelled).  A
    task will be marked as cancelled when the wrapped coroutine
    terminates with a CancelledError exception (even if cancel()
    was not called).

    This also increases the task's count of cancellation requests.
  summary: Request that this task cancel itself
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.cancelled
  kind: callable
  ns: sanic.app
  description: Return True if the future was cancelled.
  summary: Return True if the future was cancelled
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.cancelling
  kind: callable
  ns: sanic.app
  description: |-
    Return the count of the task's cancellation requests.

    This count is incremented when .cancel() is called
    and may be decremented using .uncancel().
  summary: Return the count of the task's cancellation requests
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.done
  kind: callable
  ns: sanic.app
  description: |-
    Return True if the future is done.

    Done means either that a result / exception are available, or that the
    future was cancelled.
  summary: Return True if the future is done
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.exception
  kind: callable
  ns: sanic.app
  description: |-
    Return the exception that was set on this future.

    The exception (or None if no exception was set) is returned only if
    the future is done.  If the future has been cancelled, raises
    CancelledError.  If the future isn't done yet, raises
    InvalidStateError.
  summary: Return the exception that was set on this future
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.get_coro
  kind: callable
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.get_loop
  kind: callable
  ns: sanic.app
  description: Return the event loop the Future is bound to.
  summary: Return the event loop the Future is bound to
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.get_name
  kind: callable
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.get_stack
  kind: callable
  ns: sanic.app
  description: |-
    Return the list of stack frames for this task's coroutine.

    If the coroutine is not done, this returns the stack where it is
    suspended.  If the coroutine has completed successfully or was
    cancelled, this returns an empty list.  If the coroutine was
    terminated by an exception, this returns the list of traceback
    frames.

    The frames are always ordered from oldest to newest.

    The optional limit gives the maximum number of frames to
    return; by default all available frames are returned.  Its
    meaning differs depending on whether a stack or a traceback is
    returned: the newest frames of a stack are returned, but the
    oldest frames of a traceback are returned.  (This matches the
    behavior of the traceback module.)

    For reasons beyond our control, only one stack frame is
    returned for a suspended coroutine.
  summary: Return the list of stack frames for this task's coroutine
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: limit
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.print_stack
  kind: callable
  ns: sanic.app
  description: |-
    Print the stack or traceback for this task's coroutine.

    This produces output similar to that of the traceback module,
    for the frames retrieved by get_stack().  The limit argument
    is passed to get_stack().  The file argument is an I/O stream
    to which the output is written; by default output is written
    to sys.stderr.
  summary: Print the stack or traceback for this task's coroutine
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: limit
      default: None
      rest: false
      kind: kw-only
    - name: file
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.remove_done_callback
  kind: callable
  ns: sanic.app
  description: |-
    Remove all instances of a callback from the "call when done" list.

    Returns the number of callbacks removed.
  summary: Remove all instances of a callback from the "call when done" list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fn
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.result
  kind: callable
  ns: sanic.app
  description: |-
    Return the result this future represents.

    If the future has been cancelled, raises CancelledError.  If the
    future's result isn't yet available, raises InvalidStateError.  If
    the future is done and has an exception set, this exception is raised.
  summary: Return the result this future represents
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.set_exception
  kind: callable
  ns: sanic.app
  description: |-
    Mark the future done and set an exception.

    If the future is already done when this method is called, raises
    InvalidStateError.
  summary: Mark the future done and set an exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.set_name
  kind: callable
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.set_result
  kind: callable
  ns: sanic.app
  description: |-
    Mark the future done and set its result.

    If the future is already done when this method is called, raises
    InvalidStateError.
  summary: Mark the future done and set its result
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: result
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Task.uncancel
  kind: callable
  ns: sanic.app
  description: |-
    Decrement the task's count of cancellation requests.

    This should be used by tasks that catch CancelledError
    and wish to continue indefinitely until they are cancelled again.

    Returns the remaining number of cancellation requests.
  summary: Decrement the task's count of cancellation requests
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TouchUp
  kind: class
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - type: TouchUp
      kind: return
  inherits_from: null
- name: TouchUp.register
  kind: function
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - kind: positional
      name: method_name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TouchUp.run
  kind: function
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TouchUpMeta
  kind: class
  ns: sanic.app
  description: |-
    type(object) -> the object's type
    type(name, bases, dict, **kwds) -> a new type
  summary: type(object) -> the object's type
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: bases
      default: null
      rest: false
    - kind: positional
      name: attrs
      default: null
      rest: false
    - type: TouchUpMeta
      kind: return
  inherits_from:
  - <class 'sanic.base.meta.SanicMeta'>
  - <class 'type'>
- name: TouchUpMeta.mro
  kind: callable
  ns: sanic.app
  description: Return a type's method resolution order.
  summary: Return a type's method resolution order
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Tuple
  kind: callable
  ns: sanic.app
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Type
  kind: callable
  ns: sanic.app
  description: |-
    Deprecated alias to builtins.type.

    builtins.type or typing.Type can be used to annotate class objects.
    For example, suppose we have the following classes::

        class User: ...  # Abstract base for User classes
        class BasicUser(User): ...
        class ProUser(User): ...
        class TeamUser(User): ...

    And a function that takes a class argument that's a subclass of
    User and returns an instance of the corresponding class::

        U = TypeVar('U', bound=User)
        def new_user(user_class: Type[U]) -> U:
            user = user_class()
            # (Here we could write the user object to a database)
            return user

        joe = new_user(BasicUser)

    At this point the type checker knows that joe has type BasicUser.
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TypeVar
  kind: class
  ns: sanic.app
  description: |-
    Type variable.

    Usage::

      T = TypeVar('T')  # Can be anything
      A = TypeVar('A', str, bytes)  # Must be str or bytes

    Type variables exist primarily for the benefit of static type
    checkers.  They serve as the parameters for generic types as well
    as for generic function definitions.  See class Generic for more
    information on generic types.  Generic functions work as follows:

      def repeat(x: T, n: int) -> List[T]:
          '''Return a list containing n references to x.'''
          return [x]*n

      def longest(x: A, y: A) -> A:
          '''Return the longest of two strings.'''
          return x if len(x) >= len(y) else y

    The latter example's signature is essentially the overloading
    of (str, str) -> str and (bytes, bytes) -> bytes.  Also note
    that if the arguments are instances of some subclass of str,
    the return type is still plain str.

    At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.

    Type variables defined with covariant=True or contravariant=True
    can be used to declare covariant or contravariant generic types.
    See PEP 484 for more details. By default generic types are invariant
    in all type variables.

    Type variables can be introspected. e.g.:

      T.__name__ == 'T'
      T.__constraints__ == ()
      T.__covariant__ == False
      T.__contravariant__ = False
      A.__constraints__ == (str, bytes)

    Note that only type variables defined in global scope can be pickled.
  summary: Type variable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - name: bound
      default: None
      rest: false
      kind: kw-only
    - name: covariant
      default: 'False'
      rest: false
      kind: kw-only
    - name: contravariant
      default: 'False'
      rest: false
      kind: kw-only
    - type: TypeVar
      kind: return
  inherits_from:
  - <class 'typing._Final'>
  - <class 'typing._Immutable'>
  - <class 'typing._BoundVarianceMixin'>
  - <class 'typing._PickleUsingNameMixin'>
- name: URLBuildError
  kind: class
  ns: sanic.app
  description: |-
    500 Internal Server Error

    An exception used by Sanic internals when unable to build a URL.

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 500 Internal Server Error
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: URLBuildError
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: URLBuildError.add_note
  kind: callable
  ns: sanic.app
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: URLBuildError.args
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: URLBuildError.headers
  kind: property
  ns: sanic.app
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: URLBuildError.message
  kind: property
  ns: sanic.app
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: URLBuildError.quiet
  kind: property
  ns: sanic.app
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: URLBuildError.status_code
  kind: property
  ns: sanic.app
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: URLBuildError.with_traceback
  kind: callable
  ns: sanic.app
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.app
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager
  kind: class
  ns: sanic.app
  description: |-
    Manage all of the processes.

    This class is used to manage all of the processes. It is instantiated
    by Sanic when in multiprocess mode (which is OOTB default) and is used
    to start, stop, and restart the worker processes.

    You can access it to interact with it **ONLY** when on the main process.

    Therefore, you should really only access it from within the
    `main_process_ready` event listener.

    ```python
    from sanic import Sanic

    app = Sanic("MyApp")

    @app.main_process_ready
    async def ready(app: Sanic, _):
        app.manager.manage("MyProcess", my_process, {"foo": "bar"})
    ```

    See [Worker Manager](/en/guide/deployment/manager) for more information.
  summary: Manage all of the processes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: number
      default: null
      rest: false
    - kind: positional
      name: serve
      default: null
      rest: false
    - kind: positional
      name: server_settings
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - kind: positional
      name: monitor_pubsub
      default: null
      rest: false
    - kind: positional
      name: worker_state
      default: null
      rest: false
    - type: WorkerManager
      kind: return
  inherits_from: null
- name: WorkerManager.MAIN_IDENT
  kind: property
  ns: sanic.app
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: WorkerManager.THRESHOLD
  kind: property
  ns: sanic.app
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WorkerManager.all_workers
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WorkerManager.cleanup
  kind: method
  ns: sanic.app
  description: Cleanup the worker processes.
  summary: Cleanup the worker processes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.create_server
  kind: method
  ns: sanic.app
  description: |-
    Create a new server process.

    Returns:
        Worker: The Worker instance
  summary: Create a new server process
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.durable_processes
  kind: property
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WorkerManager.join
  kind: method
  ns: sanic.app
  description: Join the worker processes.
  summary: Join the worker processes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.kill
  kind: method
  ns: sanic.app
  description: Kill all of the processes.
  summary: Kill all of the processes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.manage
  kind: method
  ns: sanic.app
  description: |-
    Instruct Sanic to manage a custom process.

    Args:
        ident (str): A name for the worker process
        func (Callable[..., Any]): The function to call in the background process
        kwargs (Dict[str, Any]): Arguments to pass to the function
        transient (bool, optional): Whether to mark the process as transient. If `True`
            then the Worker Manager will restart the process along
            with any global restart (ex: auto-reload), defaults to `False`
        restartable (Optional[bool], optional): Whether to mark the process as restartable. If
            `True` then the Worker Manager will be able to restart the process
            if prompted. If `transient=True`, this property will be implied
            to be `True`, defaults to `None`
        tracked (bool, optional): Whether to track the process after completion,
            defaults to `True`
        auto_start (bool, optional): Whether to start the process immediately, defaults to `True`
        workers (int, optional): The number of worker processes to run. Defaults to `1`.


    Returns:
        Worker: The Worker instance
  summary: Instruct Sanic to manage a custom process
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: ident
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - kind: positional
      name: kwargs
      default: null
      rest: false
    - kind: positional
      name: transient
      default: 'False'
      rest: false
    - kind: positional
      name: restartable
      default: None
      rest: false
    - kind: positional
      name: tracked
      default: 'True'
      rest: false
    - kind: positional
      name: auto_start
      default: 'True'
      rest: false
    - kind: positional
      name: workers
      default: '1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.monitor
  kind: method
  ns: sanic.app
  description: |-
    Monitor the worker processes.

    First, wait for all of the workers to acknowledge that they are ready.
    Then, wait for messages from the workers. If a message is received
    then it is processed and the state of the worker is updated.

    Also used to restart, shutdown, and scale the workers.

    Raises:
        ServerKilled: Raised when a worker fails to come online.
  summary: Monitor the worker processes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.pid
  kind: property
  ns: sanic.app
  description: Get the process ID of the main process.
  summary: Get the process ID of the main process
  signatures: null
  inherits_from: null
- name: WorkerManager.processes
  kind: property
  ns: sanic.app
  description: Get all of the processes.
  summary: Get all of the processes
  signatures: null
  inherits_from: null
- name: WorkerManager.remove_worker
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: worker
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.restart
  kind: method
  ns: sanic.app
  description: |-
    Restart the worker processes.

    Args:
        process_names (Optional[List[str]], optional): The names of the processes to restart.
            If `None` then all processes will be restarted. Defaults to `None`.
        restart_order (RestartOrder, optional): The order in which to restart the processes.
            Defaults to `RestartOrder.SHUTDOWN_FIRST`.
  summary: Restart the worker processes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: process_names
      default: None
      rest: false
    - kind: positional
      name: restart_order
      default: SHUTDOWN_FIRST
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.run
  kind: method
  ns: sanic.app
  description: Run the worker manager.
  summary: Run the worker manager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.scale
  kind: method
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: num_worker
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.shutdown
  kind: method
  ns: sanic.app
  description: Shutdown the worker manager.
  summary: Shutdown the worker manager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.shutdown_server
  kind: method
  ns: sanic.app
  description: |-
    Shutdown a server process.

    Args:
        ident (Optional[str], optional): The name of the server process to shutdown.
            If `None` then a random server will be chosen. Defaults to `None`.
  summary: Shutdown a server process
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: ident
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.shutdown_signal
  kind: method
  ns: sanic.app
  description: Handle the shutdown signal.
  summary: Handle the shutdown signal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: signal
      default: null
      rest: false
    - kind: positional
      name: frame
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.start
  kind: method
  ns: sanic.app
  description: Start the worker processes.
  summary: Start the worker processes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.terminate
  kind: method
  ns: sanic.app
  description: Terminate the worker processes.
  summary: Terminate the worker processes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.transient_processes
  kind: property
  ns: sanic.app
  description: Get all of the transient processes.
  summary: Get all of the transient processes
  signatures: null
  inherits_from: null
- name: WorkerManager.wait_for_ack
  kind: method
  ns: sanic.app
  description: Wait for all of the workers to acknowledge that they are ready.
  summary: Wait for all of the workers to acknowledge that they are ready
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerManager.workers
  kind: property
  ns: sanic.app
  description: Get all of the workers.
  summary: Get all of the workers
  signatures: null
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: cast
  kind: function
  ns: sanic.app
  description: |-
    Cast a value to a type.

    This returns the value unchanged.  To the type checker this
    signals that the return value has the designated type, but at
    runtime we intentionally don't check anything (we want this
    to be as fast as possible).
  summary: Cast a value to a type
  signatures:
  - - kind: positional
      name: typ
      default: null
      rest: false
    - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: config_type
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: contextmanager
  kind: function
  ns: sanic.app
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ctx_type
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: defaultdict
  kind: class
  ns: sanic.app
  description: |-
    defaultdict(default_factory=None, /, [...]) --> dict with default factory

    The default factory is called without arguments to produce
    a new value when a key is not present, in __getitem__ only.
    A defaultdict compares equal to a dict with the same items.
    All remaining arguments are treated the same as if they were
    passed to the dict constructor, including keyword arguments.
  summary: defaultdict(default_factory=None, /, [
  signatures: null
  inherits_from:
  - <class 'dict'>
- name: defaultdict.clear
  kind: callable
  ns: sanic.app
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: defaultdict.copy
  kind: callable
  ns: sanic.app
  description: D.copy() -> a shallow copy of D.
  summary: D
  signatures: null
  inherits_from: null
- name: defaultdict.default_factory
  kind: property
  ns: sanic.app
  description: Factory for default value called by __missing__().
  summary: Factory for default value called by __missing__()
  signatures: null
  inherits_from: null
- name: defaultdict.get
  kind: callable
  ns: sanic.app
  description: Return the value for key if key is in the dictionary, else default.
  summary: Return the value for key if key is in the dictionary, else default
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: defaultdict.items
  kind: callable
  ns: sanic.app
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures: null
  inherits_from: null
- name: defaultdict.keys
  kind: callable
  ns: sanic.app
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: defaultdict.pop
  kind: callable
  ns: sanic.app
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures: null
  inherits_from: null
- name: defaultdict.popitem
  kind: callable
  ns: sanic.app
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: defaultdict.setdefault
  kind: callable
  ns: sanic.app
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: defaultdict.update
  kind: callable
  ns: sanic.app
  description: |-
    D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]
  summary: D
  signatures: null
  inherits_from: null
- name: defaultdict.values
  kind: callable
  ns: sanic.app
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures: null
  inherits_from: null
- name: deque
  kind: class
  ns: sanic.app
  description: |-
    deque([iterable[, maxlen]]) --> deque object

    A list-like sequence optimized for data accesses near its endpoints.
  summary: deque([iterable[, maxlen]]) --> deque object
  signatures: null
  inherits_from: null
- name: deque.append
  kind: callable
  ns: sanic.app
  description: Add an element to the right side of the deque.
  summary: Add an element to the right side of the deque
  signatures: null
  inherits_from: null
- name: deque.appendleft
  kind: callable
  ns: sanic.app
  description: Add an element to the left side of the deque.
  summary: Add an element to the left side of the deque
  signatures: null
  inherits_from: null
- name: deque.clear
  kind: callable
  ns: sanic.app
  description: Remove all elements from the deque.
  summary: Remove all elements from the deque
  signatures: null
  inherits_from: null
- name: deque.copy
  kind: callable
  ns: sanic.app
  description: Return a shallow copy of a deque.
  summary: Return a shallow copy of a deque
  signatures: null
  inherits_from: null
- name: deque.count
  kind: callable
  ns: sanic.app
  description: D.count(value) -- return number of occurrences of value
  summary: D
  signatures: null
  inherits_from: null
- name: deque.extend
  kind: callable
  ns: sanic.app
  description: Extend the right side of the deque with elements from the iterable
  summary: Extend the right side of the deque with elements from the iterable
  signatures: null
  inherits_from: null
- name: deque.extendleft
  kind: callable
  ns: sanic.app
  description: Extend the left side of the deque with elements from the iterable
  summary: Extend the left side of the deque with elements from the iterable
  signatures: null
  inherits_from: null
- name: deque.index
  kind: callable
  ns: sanic.app
  description: |-
    D.index(value, [start, [stop]]) -- return first index of value.
    Raises ValueError if the value is not present.
  summary: D
  signatures: null
  inherits_from: null
- name: deque.insert
  kind: callable
  ns: sanic.app
  description: D.insert(index, object) -- insert object before index
  summary: D
  signatures: null
  inherits_from: null
- name: deque.maxlen
  kind: property
  ns: sanic.app
  description: maximum size of a deque or None if unbounded
  summary: maximum size of a deque or None if unbounded
  signatures: null
  inherits_from: null
- name: deque.pop
  kind: callable
  ns: sanic.app
  description: Remove and return the rightmost element.
  summary: Remove and return the rightmost element
  signatures: null
  inherits_from: null
- name: deque.popleft
  kind: callable
  ns: sanic.app
  description: Remove and return the leftmost element.
  summary: Remove and return the leftmost element
  signatures: null
  inherits_from: null
- name: deque.remove
  kind: callable
  ns: sanic.app
  description: D.remove(value) -- remove first occurrence of value.
  summary: D
  signatures: null
  inherits_from: null
- name: deque.reverse
  kind: callable
  ns: sanic.app
  description: D.reverse() -- reverse *IN PLACE*
  summary: D
  signatures: null
  inherits_from: null
- name: deque.rotate
  kind: callable
  ns: sanic.app
  description: Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.
  summary: Rotate the deque n steps to the right (default n=1)
  signatures: null
  inherits_from: null
- name: enable_windows_color_support
  kind: function
  ns: sanic.app
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: ensure_future
  kind: function
  ns: sanic.app
  description: |-
    Wrap a coroutine or an awaitable in a future.

    If the argument is a Future, it is returned directly.
  summary: Wrap a coroutine or an awaitable in a future
  signatures:
  - - kind: positional
      name: coro_or_future
      default: null
      rest: false
    - name: loop
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: environ
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: format_exc
  kind: function
  ns: sanic.app
  description: Like print_exc() but return a string.
  summary: Like print_exc() but return a string
  signatures:
  - - kind: positional
      name: limit
      default: None
      rest: false
    - kind: positional
      name: chain
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: isawaitable
  kind: function
  ns: sanic.app
  description: Return true if object can be passed to an ``await`` expression.
  summary: Return true if object can be passed to an ``await`` expression
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.app
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: overload
  kind: function
  ns: sanic.app
  description: |-
    Decorator for overloaded functions/methods.

    In a stub file, place two or more stub definitions for the same
    function in a row, each decorated with @overload.

    For example::

        @overload
        def utf8(value: None) -> None: ...
        @overload
        def utf8(value: bytes) -> bytes: ...
        @overload
        def utf8(value: str) -> bytes: ...

    In a non-stub file (i.e. a regular .py file), do the same but
    follow it with an implementation.  The implementation should *not*
    be decorated with @overload::

        @overload
        def utf8(value: None) -> None: ...
        @overload
        def utf8(value: bytes) -> bytes: ...
        @overload
        def utf8(value: str) -> bytes: ...
        def utf8(value):
            ...  # implementation goes here

    The overloads for a function can be retrieved at runtime using the
    get_overloads() function.
  summary: Decorator for overloaded functions/methods
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: partial
  kind: class
  ns: sanic.app
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures: null
  inherits_from: null
- name: partial.args
  kind: property
  ns: sanic.app
  description: tuple of arguments to future partial calls
  summary: tuple of arguments to future partial calls
  signatures: null
  inherits_from: null
- name: partial.func
  kind: property
  ns: sanic.app
  description: function object to use in future partial calls
  summary: function object to use in future partial calls
  signatures: null
  inherits_from: null
- name: partial.keywords
  kind: property
  ns: sanic.app
  description: dictionary of keyword arguments to future partial calls
  summary: dictionary of keyword arguments to future partial calls
  signatures: null
  inherits_from: null
- name: setup_ext
  kind: function
  ns: sanic.app
  description: |-
    Setup Sanic Extensions.

    Requires Sanic Extensions to be installed.

    Args:
        app (Sanic): Sanic application.
        fail (bool, optional): Raise an error if Sanic Extensions is not
            installed. Defaults to `False`.
        **kwargs: Keyword arguments to pass to `sanic_ext.Extend`.

    Returns:
        sanic_ext.Extend: Sanic Extensions instance.
  summary: Setup Sanic Extensions
  signatures:
  - - kind: positional
      name: app
      default: null
      rest: false
    - name: fail
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: socket
  kind: class
  ns: sanic.app
  description: A subclass of _socket.socket adding the makefile() method.
  summary: A subclass of _socket
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: family
      default: '-1'
      rest: false
    - kind: positional
      name: type
      default: '-1'
      rest: false
    - kind: positional
      name: proto
      default: '-1'
      rest: false
    - kind: positional
      name: fileno
      default: None
      rest: false
    - type: socket
      kind: return
  inherits_from:
  - <class '_socket.socket'>
- name: socket.accept
  kind: method
  ns: sanic.app
  description: |-
    accept() -> (socket object, address info)

    Wait for an incoming connection.  Return a new socket
    representing the connection, and the address of the client.
    For IP sockets, the address info is a pair (hostaddr, port).
  summary: accept() -> (socket object, address info)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: socket.bind
  kind: callable
  ns: sanic.app
  description: |-
    bind(address)

    Bind the socket to a local address.  For IP sockets, the address is a
    pair (host, port); the host must refer to the local host. For raw packet
    sockets the address is a tuple (ifname, proto [,pkttype [,hatype [,addr]]])
  summary: bind(address)
  signatures: null
  inherits_from: null
- name: socket.close
  kind: method
  ns: sanic.app
  description: |-
    close()

    Close the socket.  It cannot be used after this call.
  summary: close()
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: socket.connect
  kind: callable
  ns: sanic.app
  description: |-
    connect(address)

    Connect the socket to a remote address.  For IP sockets, the address
    is a pair (host, port).
  summary: connect(address)
  signatures: null
  inherits_from: null
- name: socket.connect_ex
  kind: callable
  ns: sanic.app
  description: |-
    connect_ex(address) -> errno

    This is like connect(address), but returns an error code (the errno value)
    instead of raising an exception when an error occurs.
  summary: connect_ex(address) -> errno
  signatures: null
  inherits_from: null
- name: socket.detach
  kind: method
  ns: sanic.app
  description: |-
    detach() -> file descriptor

    Close the socket object without closing the underlying file descriptor.
    The object cannot be used after this call, but the file descriptor
    can be reused for other purposes.  The file descriptor is returned.
  summary: detach() -> file descriptor
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: socket.dup
  kind: method
  ns: sanic.app
  description: |-
    dup() -> socket object

    Duplicate the socket. Return a new socket object connected to the same
    system resource. The new socket is non-inheritable.
  summary: dup() -> socket object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: socket.family
  kind: property
  ns: sanic.app
  description: "Read-only access to the address family for this socket.\n        "
  summary: Read-only access to the address family for this socket
  signatures: null
  inherits_from: null
- name: socket.fileno
  kind: callable
  ns: sanic.app
  description: |-
    fileno() -> integer

    Return the integer file descriptor of the socket.
  summary: fileno() -> integer
  signatures: null
  inherits_from: null
- name: socket.get_inheritable
  kind: method
  ns: sanic.app
  description: Get the inheritable flag of the socket
  summary: Get the inheritable flag of the socket
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: socket.getblocking
  kind: callable
  ns: sanic.app
  description: |-
    getblocking()

    Returns True if socket is in blocking mode, or False if it
    is in non-blocking mode.
  summary: getblocking()
  signatures: null
  inherits_from: null
- name: socket.getpeername
  kind: callable
  ns: sanic.app
  description: |-
    getpeername() -> address info

    Return the address of the remote endpoint.  For IP sockets, the address
    info is a pair (hostaddr, port).
  summary: getpeername() -> address info
  signatures: null
  inherits_from: null
- name: socket.getsockname
  kind: callable
  ns: sanic.app
  description: |-
    getsockname() -> address info

    Return the address of the local endpoint. The format depends on the
    address family. For IPv4 sockets, the address info is a pair
    (hostaddr, port). For IPv6 sockets, the address info is a 4-tuple
    (hostaddr, port, flowinfo, scope_id).
  summary: getsockname() -> address info
  signatures: null
  inherits_from: null
- name: socket.getsockopt
  kind: callable
  ns: sanic.app
  description: |-
    getsockopt(level, option[, buffersize]) -> value

    Get a socket option.  See the Unix manual for level and option.
    If a nonzero buffersize argument is given, the return value is a
    string of that length; otherwise it is an integer.
  summary: getsockopt(level, option[, buffersize]) -> value
  signatures: null
  inherits_from: null
- name: socket.gettimeout
  kind: callable
  ns: sanic.app
  description: |-
    gettimeout() -> timeout

    Returns the timeout in seconds (float) associated with socket
    operations. A timeout of None indicates that timeouts on socket
    operations are disabled.
  summary: gettimeout() -> timeout
  signatures: null
  inherits_from: null
- name: socket.listen
  kind: callable
  ns: sanic.app
  description: |-
    listen([backlog])

    Enable a server to accept connections.  If backlog is specified, it must be
    at least 0 (if it is lower, it is set to 0); it specifies the number of
    unaccepted connections that the system will allow before refusing new
    connections. If not specified, a default reasonable value is chosen.
  summary: listen([backlog])
  signatures: null
  inherits_from: null
- name: socket.makefile
  kind: method
  ns: sanic.app
  description: |-
    makefile(...) -> an I/O stream connected to the socket

    The arguments are as for io.open() after the filename, except the only
    supported mode values are 'r' (default), 'w' and 'b'.
  summary: makefile(
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mode
      default: r
      rest: false
    - kind: positional
      name: buffering
      default: None
      rest: false
    - name: encoding
      default: None
      rest: false
      kind: kw-only
    - name: errors
      default: None
      rest: false
      kind: kw-only
    - name: newline
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: socket.proto
  kind: property
  ns: sanic.app
  description: the socket protocol
  summary: the socket protocol
  signatures: null
  inherits_from: null
- name: socket.recv
  kind: callable
  ns: sanic.app
  description: |-
    recv(buffersize[, flags]) -> data

    Receive up to buffersize bytes from the socket.  For the optional flags
    argument, see the Unix manual.  When no data is available, block until
    at least one byte is available or until the remote end is closed.  When
    the remote end is closed and all data is read, return the empty string.
  summary: recv(buffersize[, flags]) -> data
  signatures: null
  inherits_from: null
- name: socket.recv_into
  kind: callable
  ns: sanic.app
  description: |-
    recv_into(buffer, [nbytes[, flags]]) -> nbytes_read

    A version of recv() that stores its data into a buffer rather than creating
    a new string.  Receive up to buffersize bytes from the socket.  If buffersize
    is not specified (or 0), receive up to the size available in the given buffer.

    See recv() for documentation about the flags.
  summary: recv_into(buffer, [nbytes[, flags]]) -> nbytes_read
  signatures: null
  inherits_from: null
- name: socket.recvfrom
  kind: callable
  ns: sanic.app
  description: |-
    recvfrom(buffersize[, flags]) -> (data, address info)

    Like recv(buffersize, flags) but also return the sender's address info.
  summary: recvfrom(buffersize[, flags]) -> (data, address info)
  signatures: null
  inherits_from: null
- name: socket.recvfrom_into
  kind: callable
  ns: sanic.app
  description: |-
    recvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)

    Like recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.
  summary: recvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)
  signatures: null
  inherits_from: null
- name: socket.recvmsg
  kind: callable
  ns: sanic.app
  description: |-
    recvmsg(bufsize[, ancbufsize[, flags]]) -> (data, ancdata, msg_flags, address)

    Receive normal data (up to bufsize bytes) and ancillary data from the
    socket.  The ancbufsize argument sets the size in bytes of the
    internal buffer used to receive the ancillary data; it defaults to 0,
    meaning that no ancillary data will be received.  Appropriate buffer
    sizes for ancillary data can be calculated using CMSG_SPACE() or
    CMSG_LEN(), and items which do not fit into the buffer might be
    truncated or discarded.  The flags argument defaults to 0 and has the
    same meaning as for recv().

    The return value is a 4-tuple: (data, ancdata, msg_flags, address).
    The data item is a bytes object holding the non-ancillary data
    received.  The ancdata item is a list of zero or more tuples
    (cmsg_level, cmsg_type, cmsg_data) representing the ancillary data
    (control messages) received: cmsg_level and cmsg_type are integers
    specifying the protocol level and protocol-specific type respectively,
    and cmsg_data is a bytes object holding the associated data.  The
    msg_flags item is the bitwise OR of various flags indicating
    conditions on the received message; see your system documentation for
    details.  If the receiving socket is unconnected, address is the
    address of the sending socket, if available; otherwise, its value is
    unspecified.

    If recvmsg() raises an exception after the system call returns, it
    will first attempt to close any file descriptors received via the
    SCM_RIGHTS mechanism.
  summary: recvmsg(bufsize[, ancbufsize[, flags]]) -> (data, ancdata, msg_flags, address)
  signatures: null
  inherits_from: null
- name: socket.recvmsg_into
  kind: callable
  ns: sanic.app
  description: |-
    recvmsg_into(buffers[, ancbufsize[, flags]]) -> (nbytes, ancdata, msg_flags, address)

    Receive normal data and ancillary data from the socket, scattering the
    non-ancillary data into a series of buffers.  The buffers argument
    must be an iterable of objects that export writable buffers
    (e.g. bytearray objects); these will be filled with successive chunks
    of the non-ancillary data until it has all been written or there are
    no more buffers.  The ancbufsize argument sets the size in bytes of
    the internal buffer used to receive the ancillary data; it defaults to
    0, meaning that no ancillary data will be received.  Appropriate
    buffer sizes for ancillary data can be calculated using CMSG_SPACE()
    or CMSG_LEN(), and items which do not fit into the buffer might be
    truncated or discarded.  The flags argument defaults to 0 and has the
    same meaning as for recv().

    The return value is a 4-tuple: (nbytes, ancdata, msg_flags, address).
    The nbytes item is the total number of bytes of non-ancillary data
    written into the buffers.  The ancdata item is a list of zero or more
    tuples (cmsg_level, cmsg_type, cmsg_data) representing the ancillary
    data (control messages) received: cmsg_level and cmsg_type are
    integers specifying the protocol level and protocol-specific type
    respectively, and cmsg_data is a bytes object holding the associated
    data.  The msg_flags item is the bitwise OR of various flags
    indicating conditions on the received message; see your system
    documentation for details.  If the receiving socket is unconnected,
    address is the address of the sending socket, if available; otherwise,
    its value is unspecified.

    If recvmsg_into() raises an exception after the system call returns,
    it will first attempt to close any file descriptors received via the
    SCM_RIGHTS mechanism.
  summary: recvmsg_into(buffers[, ancbufsize[, flags]]) -> (nbytes, ancdata, msg_flags, address)
  signatures: null
  inherits_from: null
- name: socket.send
  kind: callable
  ns: sanic.app
  description: |-
    send(data[, flags]) -> count

    Send a data string to the socket.  For the optional flags
    argument, see the Unix manual.  Return the number of bytes
    sent; this may be less than len(data) if the network is busy.
  summary: send(data[, flags]) -> count
  signatures: null
  inherits_from: null
- name: socket.sendall
  kind: callable
  ns: sanic.app
  description: |-
    sendall(data[, flags])

    Send a data string to the socket.  For the optional flags
    argument, see the Unix manual.  This calls send() repeatedly
    until all data is sent.  If an error occurs, it's impossible
    to tell how much data has been sent.
  summary: sendall(data[, flags])
  signatures: null
  inherits_from: null
- name: socket.sendfile
  kind: method
  ns: sanic.app
  description: |-
    sendfile(file[, offset[, count]]) -> sent

    Send a file until EOF is reached by using high-performance
    os.sendfile() and return the total number of bytes which
    were sent.
    *file* must be a regular file object opened in binary mode.
    If os.sendfile() is not available (e.g. Windows) or file is
    not a regular file socket.send() will be used instead.
    *offset* tells from where to start reading the file.
    If specified, *count* is the total number of bytes to transmit
    as opposed to sending the file until EOF is reached.
    File position is updated on return or also in case of error in
    which case file.tell() can be used to figure out the number of
    bytes which were sent.
    The socket must be of SOCK_STREAM type.
    Non-blocking sockets are not supported.
  summary: sendfile(file[, offset[, count]]) -> sent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: file
      default: null
      rest: false
    - kind: positional
      name: offset
      default: '0'
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: socket.sendmsg
  kind: callable
  ns: sanic.app
  description: |-
    sendmsg(buffers[, ancdata[, flags[, address]]]) -> count

    Send normal and ancillary data to the socket, gathering the
    non-ancillary data from a series of buffers and concatenating it into
    a single message.  The buffers argument specifies the non-ancillary
    data as an iterable of bytes-like objects (e.g. bytes objects).
    The ancdata argument specifies the ancillary data (control messages)
    as an iterable of zero or more tuples (cmsg_level, cmsg_type,
    cmsg_data), where cmsg_level and cmsg_type are integers specifying the
    protocol level and protocol-specific type respectively, and cmsg_data
    is a bytes-like object holding the associated data.  The flags
    argument defaults to 0 and has the same meaning as for send().  If
    address is supplied and not None, it sets a destination address for
    the message.  The return value is the number of bytes of non-ancillary
    data sent.
  summary: sendmsg(buffers[, ancdata[, flags[, address]]]) -> count
  signatures: null
  inherits_from: null
- name: socket.sendmsg_afalg
  kind: callable
  ns: sanic.app
  description: |-
    sendmsg_afalg([msg], *, op[, iv[, assoclen[, flags=MSG_MORE]]])

    Set operation mode, IV and length of associated data for an AF_ALG
    operation socket.
  summary: sendmsg_afalg([msg], *, op[, iv[, assoclen[, flags=MSG_MORE]]])
  signatures: null
  inherits_from: null
- name: socket.sendto
  kind: callable
  ns: sanic.app
  description: |-
    sendto(data[, flags], address) -> count

    Like send(data, flags) but allows specifying the destination address.
    For IP sockets, the address is a pair (hostaddr, port).
  summary: sendto(data[, flags], address) -> count
  signatures: null
  inherits_from: null
- name: socket.set_inheritable
  kind: method
  ns: sanic.app
  description: Set the inheritable flag of the socket
  summary: Set the inheritable flag of the socket
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: inheritable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: socket.setblocking
  kind: callable
  ns: sanic.app
  description: |-
    setblocking(flag)

    Set the socket to blocking (flag is true) or non-blocking (false).
    setblocking(True) is equivalent to settimeout(None);
    setblocking(False) is equivalent to settimeout(0.0).
  summary: setblocking(flag)
  signatures: null
  inherits_from: null
- name: socket.setsockopt
  kind: callable
  ns: sanic.app
  description: |-
    setsockopt(level, option, value: int)
    setsockopt(level, option, value: buffer)
    setsockopt(level, option, None, optlen: int)

    Set a socket option.  See the Unix manual for level and option.
    The value argument can either be an integer, a string buffer, or
    None, optlen.
  summary: 'setsockopt(level, option, value: int)'
  signatures: null
  inherits_from: null
- name: socket.settimeout
  kind: callable
  ns: sanic.app
  description: |-
    settimeout(timeout)

    Set a timeout on socket operations.  'timeout' can be a float,
    giving in seconds, or None.  Setting a timeout of None disables
    the timeout feature and is equivalent to setblocking(1).
    Setting a timeout of zero is the same as setblocking(0).
  summary: settimeout(timeout)
  signatures: null
  inherits_from: null
- name: socket.shutdown
  kind: callable
  ns: sanic.app
  description: |-
    shutdown(flag)

    Shut down the reading side of the socket (flag == SHUT_RD), the writing side
    of the socket (flag == SHUT_WR), or both ends (flag == SHUT_RDWR).
  summary: shutdown(flag)
  signatures: null
  inherits_from: null
- name: socket.timeout
  kind: property
  ns: sanic.app
  description: the socket timeout
  summary: the socket timeout
  signatures: null
  inherits_from: null
- name: socket.type
  kind: property
  ns: sanic.app
  description: "Read-only access to the socket type.\n        "
  summary: Read-only access to the socket type
  signatures: null
  inherits_from: null
- name: suppress
  kind: class
  ns: sanic.app
  description: |-
    Context manager to suppress specified exceptions

    After the exception is suppressed, execution proceeds with the next
    statement following the with statement.

         with suppress(FileNotFoundError):
             os.remove(somefile)
         # Execution still resumes here if the file was already removed
  summary: Context manager to suppress specified exceptions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: suppress
      kind: return
  inherits_from:
  - <class 'contextlib.AbstractContextManager'>
  - <class 'abc.ABC'>
- name: urlencode
  kind: function
  ns: sanic.app
  description: |-
    Encode a dict or sequence of two-element tuples into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.

    The components of a query arg may each be either a string or a bytes type.

    The safe, encoding, and errors parameters are passed down to the function
    specified by quote_via (encoding and errors only if a component is a str).
  summary: Encode a dict or sequence of two-element tuples into a URL query string
  signatures:
  - - kind: positional
      name: query
      default: null
      rest: false
    - kind: positional
      name: doseq
      default: 'False'
      rest: false
    - kind: positional
      name: safe
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - kind: positional
      name: errors
      default: None
      rest: false
    - kind: positional
      name: quote_via
      default: <function quote_plus at 0x7f13fdcd99e0>
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: urlunparse
  kind: function
  ns: sanic.app
  description: |-
    Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent).
  summary: Put a parsed URL back together again
  signatures:
  - - kind: positional
      name: components
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: wait_for
  kind: function
  ns: sanic.app
  description: |-
    Wait for the single Future or coroutine to complete, with timeout.

    Coroutine will be wrapped in Task.

    Returns result of the Future or coroutine.  When a timeout occurs,
    it cancels the task and raises TimeoutError.  To avoid the task
    cancellation, wrap it in shield().

    If the wait is cancelled, the task is also cancelled.

    This function is a coroutine.
  summary: Wait for the single Future or coroutine to complete, with timeout
  signatures:
  - - kind: positional
      name: fut
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: wraps
  kind: function
  ns: sanic.app
  description: |-
    Decorator factory to apply update_wrapper() to a wrapper function

    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
  summary: Decorator factory to apply update_wrapper() to a wrapper function
  signatures:
  - - kind: positional
      name: wrapped
      default: null
      rest: false
    - kind: positional
      name: assigned
      default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
      rest: false
    - kind: positional
      name: updated
      default: ('__dict__',)
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.application
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: constants
  kind: module
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: IntEnum
  kind: class
  ns: sanic.application
  description: Enum where members are also (and must be) ints
  summary: Enum where members are also (and must be) ints
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: IntEnum
      kind: return
  inherits_from:
  - <class 'int'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: IntEnum.as_integer_ratio
  kind: callable
  ns: sanic.application
  description: |-
    Return integer ratio.

    Return a pair of integers, whose ratio is exactly equal to the original int
    and with a positive denominator.

    >>> (10).as_integer_ratio()
    (10, 1)
    >>> (-10).as_integer_ratio()
    (-10, 1)
    >>> (0).as_integer_ratio()
    (0, 1)
  summary: Return integer ratio
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: IntEnum.bit_count
  kind: callable
  ns: sanic.application
  description: |-
    Number of ones in the binary representation of the absolute value of self.

    Also known as the population count.

    >>> bin(13)
    '0b1101'
    >>> (13).bit_count()
    3
  summary: Number of ones in the binary representation of the absolute value of self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: IntEnum.bit_length
  kind: callable
  ns: sanic.application
  description: |-
    Number of bits necessary to represent self in binary.

    >>> bin(37)
    '0b100101'
    >>> (37).bit_length()
    6
  summary: Number of bits necessary to represent self in binary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: IntEnum.conjugate
  kind: callable
  ns: sanic.application
  description: Returns self, the complex conjugate of any int.
  summary: Returns self, the complex conjugate of any int
  signatures: null
  inherits_from: null
- name: IntEnum.denominator
  kind: property
  ns: sanic.application
  description: the denominator of a rational number in lowest terms
  summary: the denominator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: IntEnum.imag
  kind: property
  ns: sanic.application
  description: the imaginary part of a complex number
  summary: the imaginary part of a complex number
  signatures: null
  inherits_from: null
- name: IntEnum.numerator
  kind: property
  ns: sanic.application
  description: the numerator of a rational number in lowest terms
  summary: the numerator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: IntEnum.real
  kind: property
  ns: sanic.application
  description: the real part of a complex number
  summary: the real part of a complex number
  signatures: null
  inherits_from: null
- name: IntEnum.to_bytes
  kind: callable
  ns: sanic.application
  description: |-
    Return an array of bytes representing an integer.

    length
      Length of bytes object to use.  An OverflowError is raised if the
      integer is not representable with the given number of bytes.  Default
      is length 1.
    byteorder
      The byte order used to represent the integer.  If byteorder is 'big',
      the most significant byte is at the beginning of the byte array.  If
      byteorder is 'little', the most significant byte is at the end of the
      byte array.  To request the native byte order of the host system, use
      `sys.byteorder' as the byte order value.  Default is to use 'big'.
    signed
      Determines whether two's complement is used to represent the integer.
      If signed is False and a negative integer is given, an OverflowError
      is raised.
  summary: Return an array of bytes representing an integer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: length
      default: '1'
      rest: false
    - kind: positional
      name: byteorder
      default: big
      rest: false
    - name: signed
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode
  kind: class
  ns: sanic.application
  description: Server modes.
  summary: Server modes
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Mode
      kind: return
  inherits_from:
  - <enum 'StrEnum'>
  - <class 'str'>
  - <enum 'Enum'>
- name: Mode.DEBUG
  kind: property
  ns: sanic.application
  description: Server modes.
  summary: Server modes
  signatures: null
  inherits_from: null
- name: Mode.PRODUCTION
  kind: property
  ns: sanic.application
  description: Server modes.
  summary: Server modes
  signatures: null
  inherits_from: null
- name: Mode.capitalize
  kind: callable
  ns: sanic.application
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.casefold
  kind: callable
  ns: sanic.application
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.center
  kind: callable
  ns: sanic.application
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.count
  kind: callable
  ns: sanic.application
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: Mode.encode
  kind: callable
  ns: sanic.application
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.endswith
  kind: callable
  ns: sanic.application
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: Mode.expandtabs
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.find
  kind: callable
  ns: sanic.application
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: Mode.format
  kind: callable
  ns: sanic.application
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: Mode.format_map
  kind: callable
  ns: sanic.application
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: Mode.index
  kind: callable
  ns: sanic.application
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: Mode.isalnum
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.isalpha
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.isascii
  kind: callable
  ns: sanic.application
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.isdecimal
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.isdigit
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.isidentifier
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.islower
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.isnumeric
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.isprintable
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.isspace
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.istitle
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.isupper
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.join
  kind: callable
  ns: sanic.application
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.ljust
  kind: callable
  ns: sanic.application
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.lower
  kind: callable
  ns: sanic.application
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.lstrip
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.partition
  kind: callable
  ns: sanic.application
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.removeprefix
  kind: callable
  ns: sanic.application
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.removesuffix
  kind: callable
  ns: sanic.application
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.replace
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.rfind
  kind: callable
  ns: sanic.application
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: Mode.rindex
  kind: callable
  ns: sanic.application
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: Mode.rjust
  kind: callable
  ns: sanic.application
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.rpartition
  kind: callable
  ns: sanic.application
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.rsplit
  kind: callable
  ns: sanic.application
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.rstrip
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.split
  kind: callable
  ns: sanic.application
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.splitlines
  kind: callable
  ns: sanic.application
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.startswith
  kind: callable
  ns: sanic.application
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: Mode.strip
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.swapcase
  kind: callable
  ns: sanic.application
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.title
  kind: callable
  ns: sanic.application
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.translate
  kind: callable
  ns: sanic.application
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.upper
  kind: callable
  ns: sanic.application
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mode.zfill
  kind: callable
  ns: sanic.application
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server
  kind: class
  ns: sanic.application
  description: Server types.
  summary: Server types
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Server
      kind: return
  inherits_from:
  - <enum 'StrEnum'>
  - <class 'str'>
  - <enum 'Enum'>
- name: Server.ASGI
  kind: property
  ns: sanic.application
  description: Server types.
  summary: Server types
  signatures: null
  inherits_from: null
- name: Server.SANIC
  kind: property
  ns: sanic.application
  description: Server types.
  summary: Server types
  signatures: null
  inherits_from: null
- name: Server.capitalize
  kind: callable
  ns: sanic.application
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.casefold
  kind: callable
  ns: sanic.application
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.center
  kind: callable
  ns: sanic.application
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.count
  kind: callable
  ns: sanic.application
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: Server.encode
  kind: callable
  ns: sanic.application
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.endswith
  kind: callable
  ns: sanic.application
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: Server.expandtabs
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.find
  kind: callable
  ns: sanic.application
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: Server.format
  kind: callable
  ns: sanic.application
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: Server.format_map
  kind: callable
  ns: sanic.application
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: Server.index
  kind: callable
  ns: sanic.application
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: Server.isalnum
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.isalpha
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.isascii
  kind: callable
  ns: sanic.application
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.isdecimal
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.isdigit
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.isidentifier
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.islower
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.isnumeric
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.isprintable
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.isspace
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.istitle
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.isupper
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.join
  kind: callable
  ns: sanic.application
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.ljust
  kind: callable
  ns: sanic.application
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.lower
  kind: callable
  ns: sanic.application
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.lstrip
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.partition
  kind: callable
  ns: sanic.application
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.removeprefix
  kind: callable
  ns: sanic.application
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.removesuffix
  kind: callable
  ns: sanic.application
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.replace
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.rfind
  kind: callable
  ns: sanic.application
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: Server.rindex
  kind: callable
  ns: sanic.application
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: Server.rjust
  kind: callable
  ns: sanic.application
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.rpartition
  kind: callable
  ns: sanic.application
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.rsplit
  kind: callable
  ns: sanic.application
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.rstrip
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.split
  kind: callable
  ns: sanic.application
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.splitlines
  kind: callable
  ns: sanic.application
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.startswith
  kind: callable
  ns: sanic.application
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: Server.strip
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.swapcase
  kind: callable
  ns: sanic.application
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.title
  kind: callable
  ns: sanic.application
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.translate
  kind: callable
  ns: sanic.application
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.upper
  kind: callable
  ns: sanic.application
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Server.zfill
  kind: callable
  ns: sanic.application
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum
  kind: class
  ns: sanic.application
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: StrEnum
      kind: return
  inherits_from:
  - <class 'str'>
  - <enum 'Enum'>
- name: StrEnum.capitalize
  kind: callable
  ns: sanic.application
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.casefold
  kind: callable
  ns: sanic.application
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.center
  kind: callable
  ns: sanic.application
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.count
  kind: callable
  ns: sanic.application
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.encode
  kind: callable
  ns: sanic.application
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.endswith
  kind: callable
  ns: sanic.application
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.expandtabs
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.find
  kind: callable
  ns: sanic.application
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.format
  kind: callable
  ns: sanic.application
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.format_map
  kind: callable
  ns: sanic.application
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.index
  kind: callable
  ns: sanic.application
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.isalnum
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isalpha
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isascii
  kind: callable
  ns: sanic.application
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isdecimal
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isdigit
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isidentifier
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.islower
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isnumeric
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isprintable
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isspace
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.istitle
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isupper
  kind: callable
  ns: sanic.application
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.join
  kind: callable
  ns: sanic.application
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.ljust
  kind: callable
  ns: sanic.application
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.lower
  kind: callable
  ns: sanic.application
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.lstrip
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.name
  kind: property
  ns: sanic.application
  description: The name of the Enum member.
  summary: The name of the Enum member
  signatures: null
  inherits_from: null
- name: StrEnum.partition
  kind: callable
  ns: sanic.application
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.removeprefix
  kind: callable
  ns: sanic.application
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.removesuffix
  kind: callable
  ns: sanic.application
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.replace
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.rfind
  kind: callable
  ns: sanic.application
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.rindex
  kind: callable
  ns: sanic.application
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.rjust
  kind: callable
  ns: sanic.application
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.rpartition
  kind: callable
  ns: sanic.application
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.rsplit
  kind: callable
  ns: sanic.application
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.rstrip
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.split
  kind: callable
  ns: sanic.application
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.splitlines
  kind: callable
  ns: sanic.application
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.startswith
  kind: callable
  ns: sanic.application
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.strip
  kind: callable
  ns: sanic.application
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.swapcase
  kind: callable
  ns: sanic.application
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.title
  kind: callable
  ns: sanic.application
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.translate
  kind: callable
  ns: sanic.application
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.upper
  kind: callable
  ns: sanic.application
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.value
  kind: property
  ns: sanic.application
  description: The value of the Enum member.
  summary: The value of the Enum member
  signatures: null
  inherits_from: null
- name: StrEnum.zfill
  kind: callable
  ns: sanic.application
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: auto
  kind: class
  ns: sanic.application
  description: Instances are replaced with an appropriate value in Enum class suites.
  summary: Instances are replaced with an appropriate value in Enum class suites
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: _auto_null
      rest: false
    - type: auto
      kind: return
  inherits_from: null
- name: ext
  kind: module
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TYPE_CHECKING
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: import_module
  kind: function
  ns: sanic.application
  description: |-
    Import a module.

    The 'package' argument is required when performing a relative import. It
    specifies the package to use as the anchor point from which to resolve the
    relative import to an absolute import.
  summary: Import a module
  signatures:
  - - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: package
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: setup_ext
  kind: function
  ns: sanic.application
  description: |-
    Setup Sanic Extensions.

    Requires Sanic Extensions to be installed.

    Args:
        app (Sanic): Sanic application.
        fail (bool, optional): Raise an error if Sanic Extensions is not
            installed. Defaults to `False`.
        **kwargs: Keyword arguments to pass to `sanic_ext.Extend`.

    Returns:
        sanic_ext.Extend: Sanic Extensions instance.
  summary: Setup Sanic Extensions
  signatures:
  - - kind: positional
      name: app
      default: null
      rest: false
    - name: fail
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: logo
  kind: module
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BASE_LOGO
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COFFEE_LOGO
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COLOR_LOGO
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FULL_COLOR_LOGO
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SVG_LOGO_SIMPLE
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ansi_pattern
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: environ
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_logo
  kind: function
  ns: sanic.application
  description: |-
    Get the Sanic logo.

    Will return the full color logo if the terminal supports it.

    Args:
        full (bool, optional): Use the full color logo. Defaults to `False`.
        coffee (bool, optional): Use the coffee logo. Defaults to `False`.

    Returns:
        str: Sanic logo.
  summary: Get the Sanic logo
  signatures:
  - - kind: positional
      name: full
      default: 'False'
      rest: false
    - kind: positional
      name: coffee
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: is_atty
  kind: function
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: motd
  kind: module
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ABC
  kind: class
  ns: sanic.application
  description: |-
    Helper class that provides a standard way to create an ABC using
    inheritance.
  summary: Helper class that provides a standard way to create an ABC using
  signatures:
  - - type: ABC
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.application
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MOTD
  kind: class
  ns: sanic.application
  description: Base class for the Message of the Day (MOTD) display.
  summary: Base class for the Message of the Day (MOTD) display
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logo
      default: null
      rest: false
    - kind: positional
      name: serve_location
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: extra
      default: null
      rest: false
    - type: MOTD
      kind: return
  inherits_from:
  - <class 'abc.ABC'>
- name: MOTD.display
  kind: method
  ns: sanic.application
  description: Display the MOTD.
  summary: Display the MOTD
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MOTD.output
  kind: function
  ns: sanic.application
  description: |-
    Output the MOTD.

    Args:
        logo (Optional[str]): Logo to display.
        serve_location (str): Location to serve.
        data (Dict[str, str]): Data to display.
        extra (Dict[str, str]): Extra data to display.
  summary: Output the MOTD
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: logo
      default: null
      rest: false
    - kind: positional
      name: serve_location
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: extra
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MOTDBasic
  kind: class
  ns: sanic.application
  description: |-
    A basic MOTD display.

    This is used when the terminal does not support ANSI escape codes.
  summary: A basic MOTD display
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logo
      default: null
      rest: false
    - kind: positional
      name: serve_location
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: extra
      default: null
      rest: false
    - type: MOTDBasic
      kind: return
  inherits_from:
  - <class 'sanic.application.motd.MOTD'>
  - <class 'abc.ABC'>
- name: MOTDBasic.display
  kind: method
  ns: sanic.application
  description: Display the MOTD.
  summary: Display the MOTD
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MOTDBasic.output
  kind: function
  ns: sanic.application
  description: |-
    Output the MOTD.

    Args:
        logo (Optional[str]): Logo to display.
        serve_location (str): Location to serve.
        data (Dict[str, str]): Data to display.
        extra (Dict[str, str]): Extra data to display.
  summary: Output the MOTD
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: logo
      default: null
      rest: false
    - kind: positional
      name: serve_location
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: extra
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MOTDTTY
  kind: class
  ns: sanic.application
  description: A MOTD display for terminals that support ANSI escape codes.
  summary: A MOTD display for terminals that support ANSI escape codes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: MOTDTTY
      kind: return
  inherits_from:
  - <class 'sanic.application.motd.MOTD'>
  - <class 'abc.ABC'>
- name: MOTDTTY.display
  kind: method
  ns: sanic.application
  description: |-
    Display the MOTD.

    Args:
        version (bool, optional): Display the version. Defaults to `True`.
        action (str, optional): Action to display. Defaults to
            `"Goin' Fast"`.
        out (Optional[Callable], optional): Output function. Defaults to
            `None`.
  summary: Display the MOTD
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: version
      default: 'True'
      rest: false
    - kind: positional
      name: action
      default: Goin' Fast
      rest: false
    - kind: positional
      name: out
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MOTDTTY.output
  kind: function
  ns: sanic.application
  description: |-
    Output the MOTD.

    Args:
        logo (Optional[str]): Logo to display.
        serve_location (str): Location to serve.
        data (Dict[str, str]): Data to display.
        extra (Dict[str, str]): Extra data to display.
  summary: Output the MOTD
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: logo
      default: null
      rest: false
    - kind: positional
      name: serve_location
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: extra
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MOTDTTY.set_variables
  kind: method
  ns: sanic.application
  description: Set the variables used for display.
  summary: Set the variables used for display
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.application
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: abstractmethod
  kind: function
  ns: sanic.application
  description: |-
    A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.  abstractmethod() may be used to declare
    abstract methods for properties and descriptors.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, arg1, arg2, argN):
                ...
  summary: A decorator indicating abstract methods
  signatures:
  - - kind: positional
      name: funcobj
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_terminal_size
  kind: function
  ns: sanic.application
  description: |-
    Get the size of the terminal window.

    For each of the two dimensions, the environment variable, COLUMNS
    and LINES respectively, is checked. If the variable is defined and
    the value is a positive integer, it is used.

    When COLUMNS or LINES is not defined, which is the common case,
    the terminal connected to sys.__stdout__ is queried
    by invoking os.get_terminal_size.

    If the terminal size cannot be successfully queried, either because
    the system doesn't support querying, or because we are not
    connected to a terminal, the value given in fallback parameter
    is used. Fallback defaults to (80, 24) which is the default
    size used by many terminal emulators.

    The value returned is a named tuple of type os.terminal_size.
  summary: Get the size of the terminal window
  signatures:
  - - kind: positional
      name: fallback
      default: (80, 24)
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: indent
  kind: function
  ns: sanic.application
  description: |-
    Adds 'prefix' to the beginning of selected lines in 'text'.

    If 'predicate' is provided, 'prefix' will only be added to the lines
    where 'predicate(line)' is True. If 'predicate' is not provided,
    it will default to adding 'prefix' to all non-empty lines that do not
    consist solely of whitespace characters.
  summary: Adds 'prefix' to the beginning of selected lines in 'text'
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - kind: positional
      name: predicate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: is_atty
  kind: function
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: wrap
  kind: function
  ns: sanic.application
  description: |-
    Wrap a single paragraph of text, returning a list of wrapped lines.

    Reformat the single paragraph in 'text' so it fits in lines of no
    more than 'width' columns, and return a list of wrapped lines.  By
    default, tabs in 'text' are expanded with string.expandtabs(), and
    all other whitespace characters (including newline) are converted to
    space.  See TextWrapper class for available keyword args to customize
    wrapping behaviour.
  summary: Wrap a single paragraph of text, returning a list of wrapped lines
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: width
      default: '70'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: spinner
  kind: module
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Queue
  kind: class
  ns: sanic.application
  description: |-
    Create a queue object with a given maximum size.

    If maxsize is <= 0, the queue size is infinite.
  summary: Create a queue object with a given maximum size
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: maxsize
      default: '0'
      rest: false
    - type: Queue
      kind: return
  inherits_from: null
- name: Queue.empty
  kind: method
  ns: sanic.application
  description: |-
    Return True if the queue is empty, False otherwise (not reliable!).

    This method is likely to be removed at some point.  Use qsize() == 0
    as a direct substitute, but be aware that either approach risks a race
    condition where a queue can grow before the result of empty() or
    qsize() can be used.

    To create code that needs to wait for all queued tasks to be
    completed, the preferred technique is to use the join() method.
  summary: Return True if the queue is empty, False otherwise (not reliable!)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Queue.full
  kind: method
  ns: sanic.application
  description: |-
    Return True if the queue is full, False otherwise (not reliable!).

    This method is likely to be removed at some point.  Use qsize() >= n
    as a direct substitute, but be aware that either approach risks a race
    condition where a queue can shrink before the result of full() or
    qsize() can be used.
  summary: Return True if the queue is full, False otherwise (not reliable!)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Queue.get
  kind: method
  ns: sanic.application
  description: |-
    Remove and return an item from the queue.

    If optional args 'block' is true and 'timeout' is None (the default),
    block if necessary until an item is available. If 'timeout' is
    a non-negative number, it blocks at most 'timeout' seconds and raises
    the Empty exception if no item was available within that time.
    Otherwise ('block' is false), return an item if one is immediately
    available, else raise the Empty exception ('timeout' is ignored
    in that case).
  summary: Remove and return an item from the queue
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: block
      default: 'True'
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Queue.get_nowait
  kind: method
  ns: sanic.application
  description: |-
    Remove and return an item from the queue without blocking.

    Only get an item if one is immediately available. Otherwise
    raise the Empty exception.
  summary: Remove and return an item from the queue without blocking
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Queue.join
  kind: method
  ns: sanic.application
  description: |-
    Blocks until all items in the Queue have been gotten and processed.

    The count of unfinished tasks goes up whenever an item is added to the
    queue. The count goes down whenever a consumer thread calls task_done()
    to indicate the item was retrieved and all work on it is complete.

    When the count of unfinished tasks drops to zero, join() unblocks.
  summary: Blocks until all items in the Queue have been gotten and processed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Queue.put
  kind: method
  ns: sanic.application
  description: |-
    Put an item into the queue.

    If optional args 'block' is true and 'timeout' is None (the default),
    block if necessary until a free slot is available. If 'timeout' is
    a non-negative number, it blocks at most 'timeout' seconds and raises
    the Full exception if no free slot was available within that time.
    Otherwise ('block' is false), put an item on the queue if a free slot
    is immediately available, else raise the Full exception ('timeout'
    is ignored in that case).
  summary: Put an item into the queue
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: item
      default: null
      rest: false
    - kind: positional
      name: block
      default: 'True'
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Queue.put_nowait
  kind: method
  ns: sanic.application
  description: |-
    Put an item into the queue without blocking.

    Only enqueue the item if a free slot is immediately available.
    Otherwise raise the Full exception.
  summary: Put an item into the queue without blocking
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: item
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Queue.qsize
  kind: method
  ns: sanic.application
  description: Return the approximate size of the queue (not reliable!).
  summary: Return the approximate size of the queue (not reliable!)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Queue.task_done
  kind: method
  ns: sanic.application
  description: |-
    Indicate that a formerly enqueued task is complete.

    Used by Queue consumer threads.  For each get() used to fetch a task,
    a subsequent call to task_done() tells the queue that the processing
    on the task is complete.

    If a join() is currently blocking, it will resume when all items
    have been processed (meaning that a task_done() call was received
    for every item that had been put() into the queue).

    Raises a ValueError if called more times than there were items
    placed in the queue.
  summary: Indicate that a formerly enqueued task is complete
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Spinner
  kind: class
  ns: sanic.application
  description: |-
    Spinner class to show a loading spinner in the terminal.

    Used internally by the `loading` context manager.
  summary: Spinner class to show a loading spinner in the terminal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: null
      rest: false
    - type: Spinner
      kind: return
  inherits_from: null
- name: Spinner.cursor
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Spinner.hide
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Spinner.run
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Spinner.show
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Spinner.start
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Spinner.stop
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Thread
  kind: class
  ns: sanic.application
  description: |-
    A class that represents a thread of control.

    This class can be safely subclassed in a limited fashion. There are two ways
    to specify the activity: by passing a callable object to the constructor, or
    by overriding the run() method in a subclass.
  summary: A class that represents a thread of control
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: group
      default: None
      rest: false
    - kind: positional
      name: target
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: args
      default: ()
      rest: false
    - kind: positional
      name: kwargs
      default: None
      rest: false
    - name: daemon
      default: None
      rest: false
      kind: kw-only
    - type: Thread
      kind: return
  inherits_from: null
- name: Thread.daemon
  kind: property
  ns: sanic.application
  description: |-
    A boolean value indicating whether this thread is a daemon thread.

    This must be set before start() is called, otherwise RuntimeError is
    raised. Its initial value is inherited from the creating thread; the
    main thread is not a daemon thread and therefore all threads created in
    the main thread default to daemon = False.

    The entire Python program exits when only daemon threads are left.
  summary: A boolean value indicating whether this thread is a daemon thread
  signatures: null
  inherits_from: null
- name: Thread.getName
  kind: method
  ns: sanic.application
  description: |-
    Return a string used for identification purposes only.

    This method is deprecated, use the name attribute instead.
  summary: Return a string used for identification purposes only
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Thread.ident
  kind: property
  ns: sanic.application
  description: |-
    Thread identifier of this thread or None if it has not been started.

    This is a nonzero integer. See the get_ident() function. Thread
    identifiers may be recycled when a thread exits and another thread is
    created. The identifier is available even after the thread has exited.
  summary: Thread identifier of this thread or None if it has not been started
  signatures: null
  inherits_from: null
- name: Thread.isDaemon
  kind: method
  ns: sanic.application
  description: |-
    Return whether this thread is a daemon.

    This method is deprecated, use the daemon attribute instead.
  summary: Return whether this thread is a daemon
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Thread.is_alive
  kind: method
  ns: sanic.application
  description: |-
    Return whether the thread is alive.

    This method returns True just before the run() method starts until just
    after the run() method terminates. See also the module function
    enumerate().
  summary: Return whether the thread is alive
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Thread.join
  kind: method
  ns: sanic.application
  description: |-
    Wait until the thread terminates.

    This blocks the calling thread until the thread whose join() method is
    called terminates -- either normally or through an unhandled exception
    or until the optional timeout occurs.

    When the timeout argument is present and not None, it should be a
    floating point number specifying a timeout for the operation in seconds
    (or fractions thereof). As join() always returns None, you must call
    is_alive() after join() to decide whether a timeout happened -- if the
    thread is still alive, the join() call timed out.

    When the timeout argument is not present or None, the operation will
    block until the thread terminates.

    A thread can be join()ed many times.

    join() raises a RuntimeError if an attempt is made to join the current
    thread as that would cause a deadlock. It is also an error to join() a
    thread before it has been started and attempts to do so raises the same
    exception.
  summary: Wait until the thread terminates
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Thread.name
  kind: property
  ns: sanic.application
  description: |-
    A string used for identification purposes only.

    It has no semantics. Multiple threads may be given the same name. The
    initial name is set by the constructor.
  summary: A string used for identification purposes only
  signatures: null
  inherits_from: null
- name: Thread.native_id
  kind: property
  ns: sanic.application
  description: |-
    Native integral thread ID of this thread, or None if it has not been started.

    This is a non-negative integer. See the get_native_id() function.
    This represents the Thread ID as reported by the kernel.
  summary: Native integral thread ID of this thread, or None if it has not been started
  signatures: null
  inherits_from: null
- name: Thread.run
  kind: method
  ns: sanic.application
  description: |-
    Method representing the thread's activity.

    You may override this method in a subclass. The standard run() method
    invokes the callable object passed to the object's constructor as the
    target argument, if any, with sequential and keyword arguments taken
    from the args and kwargs arguments, respectively.
  summary: Method representing the thread's activity
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Thread.setDaemon
  kind: method
  ns: sanic.application
  description: |-
    Set whether this thread is a daemon.

    This method is deprecated, use the .daemon property instead.
  summary: Set whether this thread is a daemon
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: daemonic
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Thread.setName
  kind: method
  ns: sanic.application
  description: |-
    Set the name string for this thread.

    This method is deprecated, use the name attribute instead.
  summary: Set the name string for this thread
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Thread.start
  kind: method
  ns: sanic.application
  description: |-
    Start the thread's activity.

    It must be called at most once per thread object. It arranges for the
    object's run() method to be invoked in a separate thread of control.

    This method will raise a RuntimeError if called more than once on the
    same thread object.
  summary: Start the thread's activity
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: contextmanager
  kind: function
  ns: sanic.application
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: loading
  kind: function
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: state
  kind: module
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ApplicationServerInfo
  kind: class
  ns: sanic.application
  description: Information about a server instance.
  summary: Information about a server instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: settings
      default: null
      rest: false
    - kind: positional
      name: stage
      default: '1'
      rest: false
    - kind: positional
      name: server
      default: None
      rest: false
    - type: ApplicationServerInfo
      kind: return
  inherits_from: null
- name: ApplicationServerInfo.server
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ApplicationServerInfo.stage
  kind: property
  ns: sanic.application
  description: Server stages.
  summary: Server stages
  signatures: null
  inherits_from: null
- name: AsyncioServer
  kind: class
  ns: sanic.application
  description: Wraps an asyncio server with functionality that might be useful to a user who needs to manage the server lifecycle manually.
  summary: Wraps an asyncio server with functionality that might be useful to a user who needs to manage the server lifecycle manually
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: loop
      default: null
      rest: false
    - kind: positional
      name: serve_coro
      default: null
      rest: false
    - kind: positional
      name: connections
      default: null
      rest: false
    - type: AsyncioServer
      kind: return
  inherits_from: null
- name: AsyncioServer.after_start
  kind: method
  ns: sanic.application
  description: Trigger "after_server_start" events
  summary: Trigger "after_server_start" events
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncioServer.after_stop
  kind: method
  ns: sanic.application
  description: Trigger "after_server_stop" events
  summary: Trigger "after_server_stop" events
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncioServer.app
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AsyncioServer.before_start
  kind: method
  ns: sanic.application
  description: Trigger "before_server_start" events
  summary: Trigger "before_server_start" events
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncioServer.before_stop
  kind: method
  ns: sanic.application
  description: Trigger "before_server_stop" events
  summary: Trigger "before_server_stop" events
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncioServer.close
  kind: method
  ns: sanic.application
  description: Close the server
  summary: Close the server
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncioServer.connections
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AsyncioServer.is_serving
  kind: method
  ns: sanic.application
  description: Returns True if the server is running, False otherwise
  summary: Returns True if the server is running, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncioServer.loop
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AsyncioServer.serve_coro
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AsyncioServer.serve_forever
  kind: method
  ns: sanic.application
  description: Serve requests until the server is stopped
  summary: Serve requests until the server is stopped
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncioServer.server
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AsyncioServer.start_serving
  kind: method
  ns: sanic.application
  description: Start serving requests
  summary: Start serving requests
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncioServer.startup
  kind: method
  ns: sanic.application
  description: Trigger "startup" operations on the app
  summary: Trigger "startup" operations on the app
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncioServer.wait_closed
  kind: method
  ns: sanic.application
  description: Wait until the server is closed
  summary: Wait until the server is closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.application
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.application
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.application
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext
  kind: class
  ns: sanic.application
  description: |-
    An SSLContext holds various SSL-related configuration options and
    data, such as certificates and possibly a private key.
  summary: An SSLContext holds various SSL-related configuration options and
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: protocol
      default: None
      rest: false
    - type: SSLContext
      kind: return
  inherits_from:
  - <class '_ssl._SSLContext'>
- name: SSLContext.cert_store_stats
  kind: callable
  ns: sanic.application
  description: |-
    Returns quantities of loaded X.509 certificates.

    X.509 certificates with a CA extension and certificate revocation lists
    inside the context's cert store.

    NOTE: Certificates in a capath directory aren't loaded unless they have
    been used at least once.
  summary: Returns quantities of loaded X
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.check_hostname
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.get_ca_certs
  kind: callable
  ns: sanic.application
  description: |-
    Returns a list of dicts with information of loaded CA certs.

    If the optional argument is True, returns a DER-encoded copy of the CA
    certificate.

    NOTE: Certificates in a capath directory aren't loaded unless they have
    been used at least once.
  summary: Returns a list of dicts with information of loaded CA certs
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: binary_form
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.get_ciphers
  kind: callable
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.hostname_checks_common_name
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.keylog_filename
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.load_cert_chain
  kind: callable
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: certfile
      default: null
      rest: false
    - kind: positional
      name: keyfile
      default: None
      rest: false
    - kind: positional
      name: password
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.load_default_certs
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: purpose
      default: Purpose.SERVER_AUTH
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.load_dh_params
  kind: callable
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.load_verify_locations
  kind: callable
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cafile
      default: None
      rest: false
    - kind: positional
      name: capath
      default: None
      rest: false
    - kind: positional
      name: cadata
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.maximum_version
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.minimum_version
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.num_tickets
  kind: property
  ns: sanic.application
  description: Control the number of TLSv1.3 session tickets
  summary: Control the number of TLSv1
  signatures: null
  inherits_from: null
- name: SSLContext.options
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.post_handshake_auth
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.protocol
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.security_level
  kind: property
  ns: sanic.application
  description: The current security level
  summary: The current security level
  signatures: null
  inherits_from: null
- name: SSLContext.session_stats
  kind: callable
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.set_alpn_protocols
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: alpn_protocols
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.set_ciphers
  kind: callable
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cipherlist
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.set_default_verify_paths
  kind: callable
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.set_ecdh_curve
  kind: callable
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.set_npn_protocols
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: npn_protocols
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.set_servername_callback
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: server_name_callback
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sni_callback
  kind: property
  ns: sanic.application
  description: |-
    Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension.

    If the argument is None then the callback is disabled. The method is called
    with the SSLSocket, the server name as a string, and the SSLContext object.
    See RFC 6066 for details of the SNI extension.
  summary: Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class
  kind: class
  ns: sanic.application
  description: |-
    This class implements an interface on top of a low-level SSL object as
    implemented by OpenSSL. This object captures the state of an SSL connection
    but does not provide any network IO itself. IO needs to be performed
    through separate "BIO" objects which are OpenSSL's IO abstraction layer.

    This class does not have a public constructor. Instances are returned by
    ``SSLContext.wrap_bio``. This class is typically used by framework authors
    that want to implement asynchronous IO for SSL through memory buffers.

    When compared to ``SSLSocket``, this object lacks the following features:

     * Any form of network IO, including methods such as ``recv`` and ``send``.
     * The ``do_handshake_on_connect`` and ``suppress_ragged_eofs`` machinery.
  summary: This class implements an interface on top of a low-level SSL object as
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: SSLObject
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.cipher
  kind: method
  ns: sanic.application
  description: |-
    Return the currently selected cipher as a 3-tuple ``(name,
    ssl_version, secret_bits)``.
  summary: Return the currently selected cipher as a 3-tuple ``(name,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.compression
  kind: method
  ns: sanic.application
  description: |-
    Return the current compression algorithm in use, or ``None`` if
    compression was not negotiated or not supported by one of the peers.
  summary: Return the current compression algorithm in use, or ``None`` if
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.context
  kind: property
  ns: sanic.application
  description: The SSLContext that is currently in use.
  summary: The SSLContext that is currently in use
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.do_handshake
  kind: method
  ns: sanic.application
  description: Start the SSL/TLS handshake.
  summary: Start the SSL/TLS handshake
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.get_channel_binding
  kind: method
  ns: sanic.application
  description: |-
    Get channel binding data for current connection.  Raise ValueError
    if the requested `cb_type` is not supported.  Return bytes of the data
    or None if the data is not available (e.g. before the handshake).
  summary: Get channel binding data for current connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cb_type
      default: tls-unique
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.getpeercert
  kind: method
  ns: sanic.application
  description: |-
    Returns a formatted version of the data in the certificate provided
    by the other end of the SSL channel.

    Return None if no certificate was provided, {} if a certificate was
    provided, but not validated.
  summary: Returns a formatted version of the data in the certificate provided
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: binary_form
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.pending
  kind: method
  ns: sanic.application
  description: Return the number of bytes that can be read immediately.
  summary: Return the number of bytes that can be read immediately
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.read
  kind: method
  ns: sanic.application
  description: |-
    Read up to 'len' bytes from the SSL object and return them.

    If 'buffer' is provided, read into this buffer and return the number of
    bytes read.
  summary: Read up to 'len' bytes from the SSL object and return them
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: len
      default: '1024'
      rest: false
    - kind: positional
      name: buffer
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.selected_alpn_protocol
  kind: method
  ns: sanic.application
  description: |-
    Return the currently selected ALPN protocol as a string, or ``None``
    if a next protocol was not negotiated or if ALPN is not supported by one
    of the peers.
  summary: Return the currently selected ALPN protocol as a string, or ``None``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.selected_npn_protocol
  kind: method
  ns: sanic.application
  description: |-
    Return the currently selected NPN protocol as a string, or ``None``
    if a next protocol was not negotiated or if NPN is not supported by one
    of the peers.
  summary: Return the currently selected NPN protocol as a string, or ``None``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.server_hostname
  kind: property
  ns: sanic.application
  description: |-
    The currently set server hostname (for SNI), or ``None`` if no
    server hostname is set.
  summary: The currently set server hostname (for SNI), or ``None`` if no
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.server_side
  kind: property
  ns: sanic.application
  description: Whether this is a server-side socket.
  summary: Whether this is a server-side socket
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.session
  kind: property
  ns: sanic.application
  description: The SSLSession for client socket.
  summary: The SSLSession for client socket
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.session_reused
  kind: property
  ns: sanic.application
  description: Was the client session reused during handshake
  summary: Was the client session reused during handshake
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.shared_ciphers
  kind: method
  ns: sanic.application
  description: |-
    Return a list of ciphers shared by the client during the handshake or
    None if this is not a valid server connection.
  summary: Return a list of ciphers shared by the client during the handshake or
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.unwrap
  kind: method
  ns: sanic.application
  description: Start the SSL shutdown handshake.
  summary: Start the SSL shutdown handshake
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.verify_client_post_handshake
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.version
  kind: method
  ns: sanic.application
  description: "Return a string identifying the protocol version used by the\ncurrent SSL channel. "
  summary: Return a string identifying the protocol version used by the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslobject_class.write
  kind: method
  ns: sanic.application
  description: |-
    Write 'data' to the SSL object and return the number of bytes
    written.

    The 'data' argument must support the buffer interface.
  summary: Write 'data' to the SSL object and return the number of bytes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class
  kind: class
  ns: sanic.application
  description: "This class implements a subtype of socket.socket that wraps\nthe underlying OS socket in an SSL context when necessary, and\nprovides read and write methods over that channel. "
  summary: This class implements a subtype of socket
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: SSLSocket
      kind: return
  inherits_from:
  - <class 'socket.socket'>
  - <class '_socket.socket'>
- name: SSLContext.sslsocket_class.accept
  kind: method
  ns: sanic.application
  description: |-
    Accepts a new connection from a remote client, and returns
    a tuple containing that new connection wrapped with a server-side
    SSL channel, and the address of the remote client.
  summary: Accepts a new connection from a remote client, and returns
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.bind
  kind: callable
  ns: sanic.application
  description: |-
    bind(address)

    Bind the socket to a local address.  For IP sockets, the address is a
    pair (host, port); the host must refer to the local host. For raw packet
    sockets the address is a tuple (ifname, proto [,pkttype [,hatype [,addr]]])
  summary: bind(address)
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.cipher
  kind: method
  ns: sanic.application
  description: |-
    Return the currently selected cipher as a 3-tuple ``(name,
    ssl_version, secret_bits)``.
  summary: Return the currently selected cipher as a 3-tuple ``(name,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.close
  kind: method
  ns: sanic.application
  description: |-
    close()

    Close the socket.  It cannot be used after this call.
  summary: close()
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.compression
  kind: method
  ns: sanic.application
  description: |-
    Return the current compression algorithm in use, or ``None`` if
    compression was not negotiated or not supported by one of the peers.
  summary: Return the current compression algorithm in use, or ``None`` if
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.connect
  kind: method
  ns: sanic.application
  description: |-
    Connects to remote ADDR, and then wraps the connection in
    an SSL channel.
  summary: Connects to remote ADDR, and then wraps the connection in
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: addr
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.connect_ex
  kind: method
  ns: sanic.application
  description: |-
    Connects to remote ADDR, and then wraps the connection in
    an SSL channel.
  summary: Connects to remote ADDR, and then wraps the connection in
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: addr
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.context
  kind: property
  ns: sanic.application
  description: The SSLContext that is currently in use.
  summary: The SSLContext that is currently in use
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.detach
  kind: method
  ns: sanic.application
  description: |-
    detach() -> file descriptor

    Close the socket object without closing the underlying file descriptor.
    The object cannot be used after this call, but the file descriptor
    can be reused for other purposes.  The file descriptor is returned.
  summary: detach() -> file descriptor
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.do_handshake
  kind: method
  ns: sanic.application
  description: Start the SSL/TLS handshake.
  summary: Start the SSL/TLS handshake
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: block
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.dup
  kind: method
  ns: sanic.application
  description: |-
    dup() -> socket object

    Duplicate the socket. Return a new socket object connected to the same
    system resource. The new socket is non-inheritable.
  summary: dup() -> socket object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.family
  kind: property
  ns: sanic.application
  description: "Read-only access to the address family for this socket.\n        "
  summary: Read-only access to the address family for this socket
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.fileno
  kind: callable
  ns: sanic.application
  description: |-
    fileno() -> integer

    Return the integer file descriptor of the socket.
  summary: fileno() -> integer
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.get_channel_binding
  kind: method
  ns: sanic.application
  description: |-
    Get channel binding data for current connection.  Raise ValueError
    if the requested `cb_type` is not supported.  Return bytes of the data
    or None if the data is not available (e.g. before the handshake).
  summary: Get channel binding data for current connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cb_type
      default: tls-unique
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.get_inheritable
  kind: method
  ns: sanic.application
  description: Get the inheritable flag of the socket
  summary: Get the inheritable flag of the socket
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.getblocking
  kind: callable
  ns: sanic.application
  description: |-
    getblocking()

    Returns True if socket is in blocking mode, or False if it
    is in non-blocking mode.
  summary: getblocking()
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.getpeercert
  kind: method
  ns: sanic.application
  description: |-
    Returns a formatted version of the data in the certificate provided
    by the other end of the SSL channel.

    Return None if no certificate was provided, {} if a certificate was
    provided, but not validated.
  summary: Returns a formatted version of the data in the certificate provided
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: binary_form
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.getpeername
  kind: callable
  ns: sanic.application
  description: |-
    getpeername() -> address info

    Return the address of the remote endpoint.  For IP sockets, the address
    info is a pair (hostaddr, port).
  summary: getpeername() -> address info
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.getsockname
  kind: callable
  ns: sanic.application
  description: |-
    getsockname() -> address info

    Return the address of the local endpoint. The format depends on the
    address family. For IPv4 sockets, the address info is a pair
    (hostaddr, port). For IPv6 sockets, the address info is a 4-tuple
    (hostaddr, port, flowinfo, scope_id).
  summary: getsockname() -> address info
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.getsockopt
  kind: callable
  ns: sanic.application
  description: |-
    getsockopt(level, option[, buffersize]) -> value

    Get a socket option.  See the Unix manual for level and option.
    If a nonzero buffersize argument is given, the return value is a
    string of that length; otherwise it is an integer.
  summary: getsockopt(level, option[, buffersize]) -> value
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.gettimeout
  kind: callable
  ns: sanic.application
  description: |-
    gettimeout() -> timeout

    Returns the timeout in seconds (float) associated with socket
    operations. A timeout of None indicates that timeouts on socket
    operations are disabled.
  summary: gettimeout() -> timeout
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.listen
  kind: callable
  ns: sanic.application
  description: |-
    listen([backlog])

    Enable a server to accept connections.  If backlog is specified, it must be
    at least 0 (if it is lower, it is set to 0); it specifies the number of
    unaccepted connections that the system will allow before refusing new
    connections. If not specified, a default reasonable value is chosen.
  summary: listen([backlog])
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.makefile
  kind: method
  ns: sanic.application
  description: |-
    makefile(...) -> an I/O stream connected to the socket

    The arguments are as for io.open() after the filename, except the only
    supported mode values are 'r' (default), 'w' and 'b'.
  summary: makefile(
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mode
      default: r
      rest: false
    - kind: positional
      name: buffering
      default: None
      rest: false
    - name: encoding
      default: None
      rest: false
      kind: kw-only
    - name: errors
      default: None
      rest: false
      kind: kw-only
    - name: newline
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.pending
  kind: method
  ns: sanic.application
  description: Return the number of bytes that can be read immediately.
  summary: Return the number of bytes that can be read immediately
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.proto
  kind: property
  ns: sanic.application
  description: the socket protocol
  summary: the socket protocol
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.read
  kind: method
  ns: sanic.application
  description: |-
    Read up to LEN bytes and return them.
    Return zero-length string on EOF.
  summary: Read up to LEN bytes and return them
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: len
      default: '1024'
      rest: false
    - kind: positional
      name: buffer
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.recv
  kind: method
  ns: sanic.application
  description: |-
    recv(buffersize[, flags]) -> data

    Receive up to buffersize bytes from the socket.  For the optional flags
    argument, see the Unix manual.  When no data is available, block until
    at least one byte is available or until the remote end is closed.  When
    the remote end is closed and all data is read, return the empty string.
  summary: recv(buffersize[, flags]) -> data
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buflen
      default: '1024'
      rest: false
    - kind: positional
      name: flags
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.recv_into
  kind: method
  ns: sanic.application
  description: |-
    recv_into(buffer, [nbytes[, flags]]) -> nbytes_read

    A version of recv() that stores its data into a buffer rather than creating
    a new string.  Receive up to buffersize bytes from the socket.  If buffersize
    is not specified (or 0), receive up to the size available in the given buffer.

    See recv() for documentation about the flags.
  summary: recv_into(buffer, [nbytes[, flags]]) -> nbytes_read
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buffer
      default: null
      rest: false
    - kind: positional
      name: nbytes
      default: None
      rest: false
    - kind: positional
      name: flags
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.recvfrom
  kind: method
  ns: sanic.application
  description: |-
    recvfrom(buffersize[, flags]) -> (data, address info)

    Like recv(buffersize, flags) but also return the sender's address info.
  summary: recvfrom(buffersize[, flags]) -> (data, address info)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buflen
      default: '1024'
      rest: false
    - kind: positional
      name: flags
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.recvfrom_into
  kind: method
  ns: sanic.application
  description: |-
    recvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)

    Like recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.
  summary: recvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buffer
      default: null
      rest: false
    - kind: positional
      name: nbytes
      default: None
      rest: false
    - kind: positional
      name: flags
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.recvmsg
  kind: method
  ns: sanic.application
  description: |-
    recvmsg(bufsize[, ancbufsize[, flags]]) -> (data, ancdata, msg_flags, address)

    Receive normal data (up to bufsize bytes) and ancillary data from the
    socket.  The ancbufsize argument sets the size in bytes of the
    internal buffer used to receive the ancillary data; it defaults to 0,
    meaning that no ancillary data will be received.  Appropriate buffer
    sizes for ancillary data can be calculated using CMSG_SPACE() or
    CMSG_LEN(), and items which do not fit into the buffer might be
    truncated or discarded.  The flags argument defaults to 0 and has the
    same meaning as for recv().

    The return value is a 4-tuple: (data, ancdata, msg_flags, address).
    The data item is a bytes object holding the non-ancillary data
    received.  The ancdata item is a list of zero or more tuples
    (cmsg_level, cmsg_type, cmsg_data) representing the ancillary data
    (control messages) received: cmsg_level and cmsg_type are integers
    specifying the protocol level and protocol-specific type respectively,
    and cmsg_data is a bytes object holding the associated data.  The
    msg_flags item is the bitwise OR of various flags indicating
    conditions on the received message; see your system documentation for
    details.  If the receiving socket is unconnected, address is the
    address of the sending socket, if available; otherwise, its value is
    unspecified.

    If recvmsg() raises an exception after the system call returns, it
    will first attempt to close any file descriptors received via the
    SCM_RIGHTS mechanism.
  summary: recvmsg(bufsize[, ancbufsize[, flags]]) -> (data, ancdata, msg_flags, address)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.recvmsg_into
  kind: method
  ns: sanic.application
  description: |-
    recvmsg_into(buffers[, ancbufsize[, flags]]) -> (nbytes, ancdata, msg_flags, address)

    Receive normal data and ancillary data from the socket, scattering the
    non-ancillary data into a series of buffers.  The buffers argument
    must be an iterable of objects that export writable buffers
    (e.g. bytearray objects); these will be filled with successive chunks
    of the non-ancillary data until it has all been written or there are
    no more buffers.  The ancbufsize argument sets the size in bytes of
    the internal buffer used to receive the ancillary data; it defaults to
    0, meaning that no ancillary data will be received.  Appropriate
    buffer sizes for ancillary data can be calculated using CMSG_SPACE()
    or CMSG_LEN(), and items which do not fit into the buffer might be
    truncated or discarded.  The flags argument defaults to 0 and has the
    same meaning as for recv().

    The return value is a 4-tuple: (nbytes, ancdata, msg_flags, address).
    The nbytes item is the total number of bytes of non-ancillary data
    written into the buffers.  The ancdata item is a list of zero or more
    tuples (cmsg_level, cmsg_type, cmsg_data) representing the ancillary
    data (control messages) received: cmsg_level and cmsg_type are
    integers specifying the protocol level and protocol-specific type
    respectively, and cmsg_data is a bytes object holding the associated
    data.  The msg_flags item is the bitwise OR of various flags
    indicating conditions on the received message; see your system
    documentation for details.  If the receiving socket is unconnected,
    address is the address of the sending socket, if available; otherwise,
    its value is unspecified.

    If recvmsg_into() raises an exception after the system call returns,
    it will first attempt to close any file descriptors received via the
    SCM_RIGHTS mechanism.
  summary: recvmsg_into(buffers[, ancbufsize[, flags]]) -> (nbytes, ancdata, msg_flags, address)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.selected_alpn_protocol
  kind: method
  ns: sanic.application
  description: |-
    Return the currently selected ALPN protocol as a string, or ``None``
    if a next protocol was not negotiated or if ALPN is not supported by one
    of the peers.
  summary: Return the currently selected ALPN protocol as a string, or ``None``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.selected_npn_protocol
  kind: method
  ns: sanic.application
  description: |-
    Return the currently selected NPN protocol as a string, or ``None``
    if a next protocol was not negotiated or if NPN is not supported by one
    of the peers.
  summary: Return the currently selected NPN protocol as a string, or ``None``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.send
  kind: method
  ns: sanic.application
  description: |-
    send(data[, flags]) -> count

    Send a data string to the socket.  For the optional flags
    argument, see the Unix manual.  Return the number of bytes
    sent; this may be less than len(data) if the network is busy.
  summary: send(data[, flags]) -> count
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: flags
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.sendall
  kind: method
  ns: sanic.application
  description: |-
    sendall(data[, flags])

    Send a data string to the socket.  For the optional flags
    argument, see the Unix manual.  This calls send() repeatedly
    until all data is sent.  If an error occurs, it's impossible
    to tell how much data has been sent.
  summary: sendall(data[, flags])
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: flags
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.sendfile
  kind: method
  ns: sanic.application
  description: |-
    Send a file, possibly by using os.sendfile() if this is a
    clear-text socket.  Return the total number of bytes sent.
  summary: Send a file, possibly by using os
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: file
      default: null
      rest: false
    - kind: positional
      name: offset
      default: '0'
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.sendmsg
  kind: method
  ns: sanic.application
  description: |-
    sendmsg(buffers[, ancdata[, flags[, address]]]) -> count

    Send normal and ancillary data to the socket, gathering the
    non-ancillary data from a series of buffers and concatenating it into
    a single message.  The buffers argument specifies the non-ancillary
    data as an iterable of bytes-like objects (e.g. bytes objects).
    The ancdata argument specifies the ancillary data (control messages)
    as an iterable of zero or more tuples (cmsg_level, cmsg_type,
    cmsg_data), where cmsg_level and cmsg_type are integers specifying the
    protocol level and protocol-specific type respectively, and cmsg_data
    is a bytes-like object holding the associated data.  The flags
    argument defaults to 0 and has the same meaning as for send().  If
    address is supplied and not None, it sets a destination address for
    the message.  The return value is the number of bytes of non-ancillary
    data sent.
  summary: sendmsg(buffers[, ancdata[, flags[, address]]]) -> count
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.sendmsg_afalg
  kind: callable
  ns: sanic.application
  description: |-
    sendmsg_afalg([msg], *, op[, iv[, assoclen[, flags=MSG_MORE]]])

    Set operation mode, IV and length of associated data for an AF_ALG
    operation socket.
  summary: sendmsg_afalg([msg], *, op[, iv[, assoclen[, flags=MSG_MORE]]])
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.sendto
  kind: method
  ns: sanic.application
  description: |-
    sendto(data[, flags], address) -> count

    Like send(data, flags) but allows specifying the destination address.
    For IP sockets, the address is a pair (hostaddr, port).
  summary: sendto(data[, flags], address) -> count
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: flags_or_addr
      default: null
      rest: false
    - kind: positional
      name: addr
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.session
  kind: property
  ns: sanic.application
  description: The SSLSession for client socket.
  summary: The SSLSession for client socket
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.session_reused
  kind: property
  ns: sanic.application
  description: Was the client session reused during handshake
  summary: Was the client session reused during handshake
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.set_inheritable
  kind: method
  ns: sanic.application
  description: Set the inheritable flag of the socket
  summary: Set the inheritable flag of the socket
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: inheritable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.setblocking
  kind: callable
  ns: sanic.application
  description: |-
    setblocking(flag)

    Set the socket to blocking (flag is true) or non-blocking (false).
    setblocking(True) is equivalent to settimeout(None);
    setblocking(False) is equivalent to settimeout(0.0).
  summary: setblocking(flag)
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.setsockopt
  kind: callable
  ns: sanic.application
  description: |-
    setsockopt(level, option, value: int)
    setsockopt(level, option, value: buffer)
    setsockopt(level, option, None, optlen: int)

    Set a socket option.  See the Unix manual for level and option.
    The value argument can either be an integer, a string buffer, or
    None, optlen.
  summary: 'setsockopt(level, option, value: int)'
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.settimeout
  kind: callable
  ns: sanic.application
  description: |-
    settimeout(timeout)

    Set a timeout on socket operations.  'timeout' can be a float,
    giving in seconds, or None.  Setting a timeout of None disables
    the timeout feature and is equivalent to setblocking(1).
    Setting a timeout of zero is the same as setblocking(0).
  summary: settimeout(timeout)
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.shared_ciphers
  kind: method
  ns: sanic.application
  description: |-
    Return a list of ciphers shared by the client during the handshake or
    None if this is not a valid server connection.
  summary: Return a list of ciphers shared by the client during the handshake or
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.shutdown
  kind: method
  ns: sanic.application
  description: |-
    shutdown(flag)

    Shut down the reading side of the socket (flag == SHUT_RD), the writing side
    of the socket (flag == SHUT_WR), or both ends (flag == SHUT_RDWR).
  summary: shutdown(flag)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: how
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.timeout
  kind: property
  ns: sanic.application
  description: the socket timeout
  summary: the socket timeout
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.type
  kind: property
  ns: sanic.application
  description: "Read-only access to the socket type.\n        "
  summary: Read-only access to the socket type
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.unwrap
  kind: method
  ns: sanic.application
  description: Start the SSL shutdown handshake.
  summary: Start the SSL shutdown handshake
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.verify_client_post_handshake
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.version
  kind: method
  ns: sanic.application
  description: "Return a string identifying the protocol version used by the\ncurrent SSL channel. "
  summary: Return a string identifying the protocol version used by the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.sslsocket_class.write
  kind: method
  ns: sanic.application
  description: |-
    Write DATA to the underlying SSL channel.  Returns
    number of bytes of DATA actually transmitted.
  summary: Write DATA to the underlying SSL channel
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.verify_flags
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.verify_mode
  kind: property
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.wrap_bio
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: incoming
      default: null
      rest: false
    - kind: positional
      name: outgoing
      default: null
      rest: false
    - kind: positional
      name: server_side
      default: 'False'
      rest: false
    - kind: positional
      name: server_hostname
      default: None
      rest: false
    - kind: positional
      name: session
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SSLContext.wrap_socket
  kind: method
  ns: sanic.application
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: server_side
      default: 'False'
      rest: false
    - kind: positional
      name: do_handshake_on_connect
      default: 'True'
      rest: false
    - kind: positional
      name: suppress_ragged_eofs
      default: 'True'
      rest: false
    - kind: positional
      name: server_hostname
      default: None
      rest: false
    - kind: positional
      name: session
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.application
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TYPE_CHECKING
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.application
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: VerbosityFilter
  kind: class
  ns: sanic.application
  description: |-
    Filter instances are used to perform arbitrary filtering of LogRecords.

    Loggers and Handlers can optionally use Filter instances to filter
    records as desired. The base filter class only allows events which are
    below a certain point in the logger hierarchy. For example, a filter
    initialized with "A.B" will allow events logged by loggers "A.B",
    "A.B.C", "A.B.C.D", "A.B.D" etc. but not "A.BB", "B.A.B" etc. If
    initialized with the empty string, all events are passed.
  summary: Filter instances are used to perform arbitrary filtering of LogRecords
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: VerbosityFilter
      kind: return
  inherits_from:
  - <class 'logging.Filter'>
- name: VerbosityFilter.filter
  kind: method
  ns: sanic.application
  description: |-
    Determine if the specified record is to be logged.

    Returns True if the record should be logged, or False otherwise.
    If deemed appropriate, the record may be modified in-place.
  summary: Determine if the specified record is to be logged
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: record
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: VerbosityFilter.verbosity
  kind: property
  ns: sanic.application
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: dataclass
  kind: function
  ns: sanic.application
  description: |-
    Add dunder methods based on the fields defined in the class.

    Examines PEP 526 __annotations__ to determine fields.

    If init is true, an __init__() method is added to the class. If repr
    is true, a __repr__() method is added. If order is true, rich
    comparison dunder methods are added. If unsafe_hash is true, a
    __hash__() method is added. If frozen is true, fields may not be
    assigned to after instance creation. If match_args is true, the
    __match_args__ tuple is added. If kw_only is true, then by default
    all fields are keyword-only. If slots is true, a new class with a
    __slots__ attribute is returned.
  summary: Add dunder methods based on the fields defined in the class
  signatures:
  - - kind: positional
      name: cls
      default: None
      rest: false
    - name: init
      default: 'True'
      rest: false
      kind: kw-only
    - name: repr
      default: 'True'
      rest: false
      kind: kw-only
    - name: eq
      default: 'True'
      rest: false
      kind: kw-only
    - name: order
      default: 'False'
      rest: false
      kind: kw-only
    - name: unsafe_hash
      default: 'False'
      rest: false
      kind: kw-only
    - name: frozen
      default: 'False'
      rest: false
      kind: kw-only
    - name: match_args
      default: 'True'
      rest: false
      kind: kw-only
    - name: kw_only
      default: 'False'
      rest: false
      kind: kw-only
    - name: slots
      default: 'False'
      rest: false
      kind: kw-only
    - name: weakref_slot
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: field
  kind: function
  ns: sanic.application
  description: |-
    Return an object to identify dataclass fields.

    default is the default value of the field.  default_factory is a
    0-argument function called to initialize a field's value.  If init
    is true, the field will be a parameter to the class's __init__()
    function.  If repr is true, the field will be included in the
    object's repr().  If hash is true, the field will be included in the
    object's hash().  If compare is true, the field will be used in
    comparison functions.  metadata, if specified, must be a mapping
    which is stored but not otherwise examined by dataclass.  If kw_only
    is true, the field will become a keyword-only parameter to
    __init__().

    It is an error to specify both default and default_factory.
  summary: Return an object to identify dataclass fields
  signatures:
  - - name: default
      default: <dataclasses._MISSING_TYPE object at 0x7f13fd297750>
      rest: false
      kind: kw-only
    - name: default_factory
      default: <dataclasses._MISSING_TYPE object at 0x7f13fd297750>
      rest: false
      kind: kw-only
    - name: init
      default: 'True'
      rest: false
      kind: kw-only
    - name: repr
      default: 'True'
      rest: false
      kind: kw-only
    - name: hash
      default: None
      rest: false
      kind: kw-only
    - name: compare
      default: 'True'
      rest: false
      kind: kw-only
    - name: metadata
      default: None
      rest: false
      kind: kw-only
    - name: kw_only
      default: <dataclasses._MISSING_TYPE object at 0x7f13fd297750>
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.application
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.asgi
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ASGIReceive
  kind: callable
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ASGIScope
  kind: callable
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ASGISend
  kind: callable
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConnInfo
  kind: class
  ns: sanic.asgi
  description: Local and remote addresses and SSL status info.
  summary: Local and remote addresses and SSL status info
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: transport
      default: null
      rest: false
    - kind: positional
      name: unix
      default: None
      rest: false
    - type: ConnInfo
      kind: return
  inherits_from: null
- name: ConnInfo.cert
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.client
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.client_ip
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.client_port
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.ctx
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.lost
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.network_paths
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.peername
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.server
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.server_name
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.server_port
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.sockname
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnInfo.ssl
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Header
  kind: class
  ns: sanic.asgi
  description: |-
    Container used for both request and response headers.
    It is a subclass of  [CIMultiDict](https://multidict.readthedocs.io/en/stable/multidict.html#cimultidictproxy)

    It allows for multiple values for a single key in keeping with the HTTP
    spec. Also, all keys are *case in-sensitive*.

    Please checkout [the MultiDict documentation](https://multidict.readthedocs.io/en/stable/multidict.html#multidict)
    for more details about how to use the object. In general, it should work
    very similar to a regular dictionary.
  summary: Container used for both request and response headers
  signatures: null
  inherits_from:
  - <class 'multidict._multidict.CIMultiDict'>
  - <class 'multidict._multidict.MultiDict'>
- name: Header.add
  kind: callable
  ns: sanic.asgi
  description: Add the key and value, not overwriting any previous value.
  summary: Add the key and value, not overwriting any previous value
  signatures: null
  inherits_from: null
- name: Header.clear
  kind: callable
  ns: sanic.asgi
  description: Remove all items from MultiDict
  summary: Remove all items from MultiDict
  signatures: null
  inherits_from: null
- name: Header.copy
  kind: callable
  ns: sanic.asgi
  description: Return a copy of itself.
  summary: Return a copy of itself
  signatures: null
  inherits_from: null
- name: Header.extend
  kind: callable
  ns: sanic.asgi
  description: |-
    Extend current MultiDict with more values.
    This method must be used instead of update.
  summary: Extend current MultiDict with more values
  signatures: null
  inherits_from: null
- name: Header.get
  kind: callable
  ns: sanic.asgi
  description: |-
    Get first value matching the key.

    The method is alias for .getone().
  summary: Get first value matching the key
  signatures: null
  inherits_from: null
- name: Header.get_all
  kind: method
  ns: sanic.asgi
  description: Convenience method mapped to ``getall()``.
  summary: Convenience method mapped to ``getall()``
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Header.getall
  kind: callable
  ns: sanic.asgi
  description: Return a list of all values matching the key.
  summary: Return a list of all values matching the key
  signatures: null
  inherits_from: null
- name: Header.getone
  kind: callable
  ns: sanic.asgi
  description: Get first value matching the key.
  summary: Get first value matching the key
  signatures: null
  inherits_from: null
- name: Header.items
  kind: callable
  ns: sanic.asgi
  description: Return a new view of the dictionary's items *(key, value) pairs).
  summary: Return a new view of the dictionary's items *(key, value) pairs)
  signatures: null
  inherits_from: null
- name: Header.keys
  kind: callable
  ns: sanic.asgi
  description: Return a new view of the dictionary's keys.
  summary: Return a new view of the dictionary's keys
  signatures: null
  inherits_from: null
- name: Header.pop
  kind: callable
  ns: sanic.asgi
  description: |-
    Remove the last occurrence of key and return the corresponding value.

    If key is not found, default is returned if given, otherwise KeyError is raised.
  summary: Remove the last occurrence of key and return the corresponding value
  signatures: null
  inherits_from: null
- name: Header.popall
  kind: callable
  ns: sanic.asgi
  description: |-
    Remove all occurrences of key and return the list of corresponding values.

    If key is not found, default is returned if given, otherwise KeyError is raised.
  summary: Remove all occurrences of key and return the list of corresponding values
  signatures: null
  inherits_from: null
- name: Header.popitem
  kind: callable
  ns: sanic.asgi
  description: Remove and return an arbitrary (key, value) pair.
  summary: Remove and return an arbitrary (key, value) pair
  signatures: null
  inherits_from: null
- name: Header.popone
  kind: callable
  ns: sanic.asgi
  description: |-
    Remove the last occurrence of key and return the corresponding value.

    If key is not found, default is returned if given, otherwise KeyError is raised.
  summary: Remove the last occurrence of key and return the corresponding value
  signatures: null
  inherits_from: null
- name: Header.setdefault
  kind: callable
  ns: sanic.asgi
  description: Return value for key, set value to default if key is not present.
  summary: Return value for key, set value to default if key is not present
  signatures: null
  inherits_from: null
- name: Header.update
  kind: callable
  ns: sanic.asgi
  description: Update the dictionary from *other*, overwriting existing keys.
  summary: Update the dictionary from *other*, overwriting existing keys
  signatures: null
  inherits_from: null
- name: Header.values
  kind: callable
  ns: sanic.asgi
  description: Return a new view of the dictionary's values.
  summary: Return a new view of the dictionary's values
  signatures: null
  inherits_from: null
- name: MockTransport
  kind: class
  ns: sanic.asgi
  description: Base class for transports.
  summary: Base class for transports
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: scope
      default: null
      rest: false
    - kind: positional
      name: receive
      default: null
      rest: false
    - kind: positional
      name: send
      default: null
      rest: false
    - type: MockTransport
      kind: return
  inherits_from:
  - <class 'sanic.models.protocol_types.TransportProtocol'>
  - <class 'asyncio.transports.BaseTransport'>
- name: MockTransport.add_task
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockTransport.close
  kind: method
  ns: sanic.asgi
  description: |-
    Close the transport.

    Buffered data will be flushed asynchronously.  No more data
    will be received.  After all buffered data is flushed, the
    protocol's connection_lost() method will (eventually) be
    called with None as its argument.
  summary: Close the transport
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockTransport.create_websocket_connection
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: send
      default: null
      rest: false
    - kind: positional
      name: receive
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockTransport.get_extra_info
  kind: method
  ns: sanic.asgi
  description: Get optional transport information.
  summary: Get optional transport information
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: info
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockTransport.get_protocol
  kind: method
  ns: sanic.asgi
  description: Return the current protocol.
  summary: Return the current protocol
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockTransport.get_websocket_connection
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockTransport.is_closing
  kind: method
  ns: sanic.asgi
  description: Return True if the transport is closing or closed.
  summary: Return True if the transport is closing or closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockTransport.receive
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockTransport.send
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockTransport.set_protocol
  kind: method
  ns: sanic.asgi
  description: Set a new protocol.
  summary: Set a new protocol
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.asgi
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TYPE_CHECKING
  kind: const
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketConnection
  kind: class
  ns: sanic.asgi
  description: |-
    This is for ASGI Connections.
    It provides an interface similar to WebsocketProtocol, but
    sends/receives over an ASGI connection.
  summary: This is for ASGI Connections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: send
      default: null
      rest: false
    - kind: positional
      name: receive
      default: null
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - type: WebSocketConnection
      kind: return
  inherits_from: null
- name: WebSocketConnection.accept
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketConnection.close
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: code
      default: '1000'
      rest: false
    - kind: positional
      name: reason
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketConnection.receive
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketConnection.recv
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketConnection.send
  kind: method
  ns: sanic.asgi
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketConnection.subprotocols
  kind: property
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.asgi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.base
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: meta
  kind: module
  ns: sanic.base
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicMeta
  kind: class
  ns: sanic.base
  description: |-
    type(object) -> the object's type
    type(name, bases, dict, **kwds) -> a new type
  summary: type(object) -> the object's type
  signatures: null
  inherits_from:
  - <class 'type'>
- name: SanicMeta.mro
  kind: callable
  ns: sanic.base
  description: Return a type's method resolution order.
  summary: Return a type's method resolution order
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: root
  kind: module
  ns: sanic.base
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ExceptionMixin
  kind: class
  ns: sanic.base
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: ExceptionMixin
      kind: return
  inherits_from: null
- name: ExceptionMixin.all_exceptions
  kind: method
  ns: sanic.base
  description: |-
    Enables the process of creating a global exception handler as a convenience.

    This following two examples are equivalent:

    ```python
    @app.exception(Exception)
    async def handler(request: Request, exception: Exception) -> HTTPResponse:
        return text(f"Exception raised: {exception}")
    ```

    ```python
    @app.all_exceptions
    async def handler(request: Request, exception: Exception) -> HTTPResponse:
        return text(f"Exception raised: {exception}")
    ```

    Args:
        handler (Callable[..., Any]): A coroutine function to handle exceptions.

    Returns:
        Callable[..., Any]: A decorated method to handle global exceptions for
            any route registered under this blueprint.
  summary: Enables the process of creating a global exception handler as a convenience
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ExceptionMixin.exception
  kind: method
  ns: sanic.base
  description: |-
    Decorator used to register an exception handler for the current application or blueprint instance.

    This method allows you to define a handler for specific exceptions that
    may be raised within the routes of this blueprint. You can specify one
    or more exception types to catch, and the handler will be applied to
    those exceptions.

    When used on a Blueprint, the handler will only be applied to routes
    registered under that blueprint. That means they only apply to
    requests that have been matched, and the exception is raised within
    the handler function (or middleware) for that route.

    A general exception like `NotFound` should only be registered on the
    application instance, not on a blueprint.

    See [Exceptions](/en/guide/best-practices/exceptions.html) for more information.

    Args:
        exceptions (Union[Type[Exception], List[Type[Exception]]]): List of
            Python exceptions to be caught by the handler.
        apply (bool, optional): Whether the exception handler should be
            applied. Defaults to True.

    Returns:
        Callable: A decorated method to handle global exceptions for any route
            registered under this blueprint.

    Example:
        ```python
        from sanic import Blueprint, text

        bp = Blueprint('my_blueprint')

        @bp.exception(Exception)
        def handle_exception(request, exception):
            return text("Oops, something went wrong!", status=500)
        ```

        ```python
        from sanic import Sanic, NotFound, text

        app = Sanic('MyApp')

        @app.exception(NotFound)
        def ignore_404s(request, exception):
            return text(f"Yep, I totally found the page: {request.url}")
  summary: Decorator used to register an exception handler for the current application or blueprint instance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: apply
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin
  kind: class
  ns: sanic.base
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: ListenerMixin
      kind: return
  inherits_from: null
- name: ListenerMixin.after_reload_trigger
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the after_reload_trigger event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This event is fired after the reload process
    triggers the reload. A change event has been detected and the reload
    process has been triggered.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_reload_trigger
        async def on_after_reload_trigger(app: Sanic, changed: set[str]):
            print("After reload trigger, changed files: ", changed)
        ```
  summary: Decorator for registering a listener for the after_reload_trigger event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.after_server_start
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the after_server_start event.

    This event is fired on all worker processes. You should typically
    use this event to run background tasks, or perform other actions that
    are not directly related to handling requests. In theory, it is
    possible that some requests may be handled before this event is fired,
    so you should not use this event to initialize resources that are
    required for handling requests.

    A common use case for this event is to start a background task that
    periodically performs some action, such as clearing a cache or
    performing a health check.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_server_start
        async def on_after_server_start(app: Sanic):
            print("After server start")
        ```
  summary: Decorator for registering a listener for the after_server_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.after_server_stop
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the after_server_stop event.

    This event is fired on all worker processes. This event is fired
    after the server has stopped shutting down, and all requests have
    been handled. You should typically use this event to clean up
    resources that were initialized in the before_server_start event.

    A common use case for this event is to close a database connection
    pool, or to close a cache client.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.after_server_stop
        async def on_after_server_stop(app: Sanic):
            print("After server stop")
        ```
  summary: Decorator for registering a listener for the after_server_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.before_reload_trigger
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the before_reload_trigger event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This event is fired before the reload process
    triggers the reload. A change event has been detected and the reload
    process is about to be triggered.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_reload_trigger
        async def on_before_reload_trigger(app: Sanic):
            print("Before reload trigger")
        ```
  summary: Decorator for registering a listener for the before_reload_trigger event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.before_server_start
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the before_server_start event.

    This event is fired on all worker processes. You should typically
    use this event to initialize resources that are global in nature, or
    will be shared across requests and various parts of the application.

    A common use case for this event is to initialize a database connection
    pool, or to initialize a cache client.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_server_start
        async def on_before_server_start(app: Sanic):
            print("Before server start")
        ```
  summary: Decorator for registering a listener for the before_server_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.before_server_stop
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the before_server_stop event.

    This event is fired on all worker processes. This event is fired
    before the server starts shutting down. You should not use this event
    to perform any actions that are required for handling requests, as
    some requests may continue to be handled after this event is fired.

    A common use case for this event is to stop a background task that
    was started in the after_server_start event.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.before_server_stop
        async def on_before_server_stop(app: Sanic):
            print("Before server stop")
        ```
  summary: Decorator for registering a listener for the before_server_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.listener
  kind: method
  ns: sanic.base
  description: |-
    Create a listener for a specific event in the application's lifecycle.

    See [Listeners](/en/guide/basics/listeners) for more details.

    .. note::
        Overloaded signatures allow for different ways of calling this method, depending on the types of the arguments.

        Usually, it is prederred to use one of the convenience methods such as `before_server_start` or `after_server_stop` instead of calling this method directly.

        ```python
        @app.before_server_start
        async def prefered_method(_):
            ...

        @app.listener("before_server_start")
        async def not_prefered_method(_):
            ...

    Args:
        listener_or_event (Union[ListenerType[Sanic], str]): A listener function or an event name.
        event_or_none (Optional[str]): The event name to listen for if `listener_or_event` is a function. Defaults to `None`.
        apply (bool): Whether to apply the listener immediately. Defaults to `True`.
        priority (int): The priority of the listener. Defaults to `0`.

    Returns:
        Union[ListenerType[Sanic], Callable[[ListenerType[Sanic]], ListenerType[Sanic]]]: The listener or a callable that takes a listener.

    Example:
        The following code snippet shows how you can use this method as a decorator:

        ```python
        @bp.listener("before_server_start")
        async def before_server_start(app, loop):
            ...
        ```
  summary: Create a listener for a specific event in the application's lifecycle
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener_or_event
      default: null
      rest: false
    - kind: positional
      name: event_or_none
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.main_process_ready
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the main_process_ready event.

    This event is fired only on the main process and **NOT** on any
    worker processes. It is fired after the main process has started and
    the Worker Manager has been initialized (ie, you will have access to
    `app.manager` instance). The typical use case for this event is to
    add a managed process to the Worker Manager.

    See [Running custom processes](/en/guide/deployment/manager.html#running-custom-processes) and [Listeners](/en/guide/basics/listeners.html) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_ready
        async def on_main_process_ready(app: Sanic):
            print("Main process ready")
        ```
  summary: Decorator for registering a listener for the main_process_ready event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.main_process_start
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the main_process_start event.

    This event is fired only on the main process and **NOT** on any
    worker processes. You should typically use this event to initialize
    resources that are shared across workers, or to initialize resources
    that are not safe to be initialized in a worker process.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_start
        async def on_main_process_start(app: Sanic):
            print("Main process started")
        ```
  summary: Decorator for registering a listener for the main_process_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.main_process_stop
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the main_process_stop event.

    This event is fired only on the main process and **NOT** on any
    worker processes. You should typically use this event to clean up
    resources that were initialized in the main_process_start event.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.main_process_stop
        async def on_main_process_stop(app: Sanic):
            print("Main process stopped")
        ```
  summary: Decorator for registering a listener for the main_process_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.reload_process_start
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the reload_process_start event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This is similar to the main_process_start event,
    except that it is fired only when the reload process is started.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.reload_process_start
        async def on_reload_process_start(app: Sanic):
            print("Reload process started")
        ```
  summary: Decorator for registering a listener for the reload_process_start event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerMixin.reload_process_stop
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering a listener for the reload_process_stop event.

    This event is fired only on the reload process and **NOT** on any
    worker processes. This is similar to the main_process_stop event,
    except that it is fired only when the reload process is stopped.

    See [Listeners](/en/guide/basics/listeners) for more details.

    Args:
        listener (ListenerType[Sanic]): The listener handler to attach.

    Examples:
        ```python
        @app.reload_process_stop
        async def on_reload_process_stop(app: Sanic):
            print("Reload process stopped")
        ```
  summary: Decorator for registering a listener for the reload_process_stop event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: listener
      default: null
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareMixin
  kind: class
  ns: sanic.base
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: MiddlewareMixin
      kind: return
  inherits_from: null
- name: MiddlewareMixin.finalize_middleware
  kind: method
  ns: sanic.base
  description: |-
    Finalize the middleware configuration for the Sanic application.

    This method completes the middleware setup for the application.
    Middleware in Sanic is used to process requests globally before they
    reach individual routes or after routes have been processed.

    Finalization consists of identifying defined routes and optimizing
    Sanic's performance to meet the application's specific needs. If
    you are manually adding routes, after Sanic has started, you will
    typically want to use the `amend` context manager rather than
    calling this method directly.

    .. note::
        This method is usually called internally during the server setup
        process and does not typically need to be invoked manually.

    Example:
        ```python
        app.finalize_middleware()
        ```
  summary: Finalize the middleware configuration for the Sanic application
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareMixin.middleware
  kind: method
  ns: sanic.base
  description: |-
    Decorator for registering middleware.

    Decorate and register middleware to be called before a request is
    handled or after a response is created. Can either be called as
    *@app.middleware* or *@app.middleware('request')*. Although, it is
    recommended to use *@app.on_request* or *@app.on_response* instead
    for clarity and convenience.

    See [Middleware](/guide/basics/middleware) for more information.

    Args:
        middleware_or_request (Union[Callable, str]): Middleware function
            or the keyword 'request' or 'response'.
        attach_to (str, optional): When to apply the middleware;
            either 'request' (before the request is handled) or 'response'
            (after the response is created). Defaults to `'request'`.
        apply (bool, optional): Whether the middleware should be applied.
            Defaults to `True`.
        priority (int, optional): The priority level of the middleware.
            Lower numbers are executed first. Defaults to `0`.

    Returns:
        Union[Callable, Callable[[Callable], Callable]]: The decorated
            middleware function or a partial function depending on how
            the method was called.

    Example:
        ```python
        @app.middleware('request')
        async def custom_middleware(request):
            ...
        ```
  summary: Decorator for registering middleware
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware_or_request
      default: null
      rest: false
    - kind: positional
      name: attach_to
      default: request
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareMixin.on_request
  kind: method
  ns: sanic.base
  description: |-
    Register a middleware to be called before a request is handled.

    This is the same as *@app.middleware('request')*.

    Args:
        middleware (Callable, optional): A callable that takes in a
            request. Defaults to `None`.

    Returns:
        Callable: The decorated middleware function or a partial function
            depending on how the method was called.

    Examples:
        ```python
        @app.on_request
        async def custom_middleware(request):
            request.ctx.custom = 'value'
        ```
  summary: Register a middleware to be called before a request is handled
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareMixin.on_response
  kind: method
  ns: sanic.base
  description: |-
    Register a middleware to be called after a response is created.

    This is the same as *@app.middleware('response')*.

    Args:
        middleware (Callable, optional): A callable that takes in a
            request and response. Defaults to `None`.

    Returns:
        Callable: The decorated middleware function or a partial function
            depending on how the method was called.

    Examples:
        ```python
        @app.on_response
        async def custom_middleware(request, response):
            response.headers['X-Server'] = 'Sanic'
        ```
  summary: Register a middleware to be called after a response is created
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: middleware
      default: None
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.base
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin
  kind: class
  ns: sanic.base
  description: Base class for some other mixins.
  summary: Base class for some other mixins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: RouteMixin
      kind: return
  inherits_from:
  - <class 'sanic.mixins.base.BaseMixin'>
- name: RouteMixin.add_route
  kind: method
  ns: sanic.base
  description: |-
    A helper method to register class-based view or functions as a handler to the application url routes.

    Args:
        handler (RouteHandler): Function or class-based view used as a route handler.
        uri (str): Path of the URL.
        methods (Iterable[str]): List or tuple of methods allowed; these are overridden if using an HTTPMethodView.
        host (Optional[Union[str, List[str]]]): Hostname or hostnames to match for this route.
        strict_slashes (Optional[bool]): If set, a route's slashes will be strict. E.g. `/foo` will not match `/foo/`.
        version (Optional[Union[int, str, float]]): Version of the API for this route.
        name (Optional[str]): User-defined route name for `url_for`.
        stream (bool): Boolean specifying if the handler is a stream handler.
        version_prefix (str): URL path that should be before the version value; default: ``/v``.
        error_format (Optional[str]): Custom error format string.
        unquote (bool): Boolean specifying if the handler requires unquoting.
        ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*` prefix will be appended to the route context (``route.ctx``). See below for examples.

    Returns:
        RouteHandler: The route handler.

    Examples:
        ```python
        from sanic import Sanic, text

        app = Sanic("test")

        async def handler(request):
            return text("OK")

        app.add_route(handler, "/test", methods=["GET", "POST"])
        ```

        You can use `ctx_kwargs` to add custom context to the route. This
        can often be useful when wanting to add metadata to a route that
        can be used by other parts of the application (like middleware).

        ```python
        from sanic import Sanic, text

        app = Sanic("test")

        async def handler(request):
            return text("OK")

        async def custom_middleware(request):
            if request.route.ctx.monitor:
                do_some_monitoring()

        app.add_route(handler, "/test", methods=["GET", "POST"], ctx_monitor=True)
        app.register_middleware(custom_middleware)
  summary: A helper method to register class-based view or functions as a handler to the application url routes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: frozenset({'GET'})
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.add_websocket_route
  kind: method
  ns: sanic.base
  description: |-
    A helper method to register a function as a websocket route.

    Args:
        handler (Callable): A callable function or instance of a class
            that can handle the websocket request.
        uri (str): URL path that will be mapped to the websocket handler.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN details.
        strict_slashes (Optional[bool]): If the API endpoint needs to
            terminate with a `"/"` or not.
        subprotocols (Optional[List[str]]): Subprotocols to be used with
            websocket handshake.
        version (Optional[Union[int, str, float]]): Versioning information.
        name (Optional[str]): A unique name assigned to the URL.
        version_prefix (str): URL path before the version value.
            Defaults to `"/v"`.
        error_format (Optional[str]): Format for error handling.
        **ctx_kwargs (Any): Keyword arguments beginning with `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        Callable: Object passed as the handler.
  summary: A helper method to register a function as a websocket route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.delete
  kind: method
  ns: sanic.base
  description: |-
    Decorate a function handler to create a route definition using the **DELETE** HTTP method.

    Args:
        uri (str): URL to be tagged to the DELETE method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for the
            service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a */*.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the Route.
        ignore_body (bool): Whether or not to ignore the body in the
            request. Defaults to `False`.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **DELETE** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.get
  kind: method
  ns: sanic.base
  description: |-
    Decorate a function handler to create a route definition using the **GET** HTTP method.

    Args:
        uri (str): URL to be tagged to GET method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_* prefix` will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **GET** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.head
  kind: method
  ns: sanic.base
  description: |-
    Decorate a function handler to create a route definition using the **HEAD** HTTP method.

    Args:
        uri (str): URL to be tagged to HEAD method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **HEAD** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.options
  kind: method
  ns: sanic.base
  description: |-
    Decorate a function handler to create a route definition using the **OPTIONS** HTTP method.

    Args:
        uri (str): URL to be tagged to OPTIONS method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        ignore_body (bool): Whether the handler should ignore request
            body. This means the body of the request, if sent, will not
            be consumed. In that instance, you will see a warning in
            the logs. Defaults to `True`, meaning do not consume the body.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **OPTIONS** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.patch
  kind: method
  ns: sanic.base
  description: |-
    Decorate a function handler to create a route definition using the **PATCH** HTTP method.

    Args:
        uri (str): URL to be tagged to PATCH method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Set to `True` if full request streaming is needed,
            `False` otherwise. Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **PATCH** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.post
  kind: method
  ns: sanic.base
  description: |-
    Decorate a function handler to create a route definition using the **POST** HTTP method.

    Args:
        uri (str): URL to be tagged to POST method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Whether or not to stream the request body.
            Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **POST** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.put
  kind: method
  ns: sanic.base
  description: |-
    Decorate a function handler to create a route definition using the **PUT** HTTP method.

    Args:
        uri (str): URL to be tagged to PUT method of HTTP.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN for
            the service to use.
        strict_slashes (Optional[bool]): Instruct Sanic to check if the
            request URLs need to terminate with a `/`.
        stream (bool): Whether or not to stream the request body.
            Defaults to `False`.
        version (Optional[Union[int, str, float]]): API Version.
        name (Optional[str]): Unique name that can be used to identify
            the route.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with a
            `ctx_*` prefix will be appended to the route
            context (`route.ctx`).

    Returns:
        RouteHandler: Object decorated with route method.
  summary: Decorate a function handler to create a route definition using the **PUT** HTTP method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.route
  kind: method
  ns: sanic.base
  description: |-
    Decorate a function to be registered as a route.

    Args:
        uri (str): Path of the URL.
        methods (Optional[Iterable[str]]): List or tuple of
            methods allowed.
        host (Optional[Union[str, List[str]]]): The host, if required.
        strict_slashes (Optional[bool]): Whether to apply strict slashes
            to the route.
        stream (bool): Whether to allow the request to stream its body.
        version (Optional[Union[int, str, float]]): Route specific
            versioning.
        name (Optional[str]): User-defined route name for url_for.
        ignore_body (bool): Whether the handler should ignore request
            body (e.g. `GET` requests).
        apply (bool): Apply middleware to the route.
        subprotocols (Optional[List[str]]): List of subprotocols.
        websocket (bool): Enable WebSocket support.
        unquote (bool): Unquote special characters in the URL path.
        static (bool): Enable static route.
        version_prefix (str): URL path that should be before the version
             value; default: `"/v"`.
        error_format (Optional[str]): Error format for the route.
        ctx_kwargs (Any): Keyword arguments that begin with a `ctx_*`
            prefix will be appended to the route context (`route.ctx`).

    Returns:
        RouteWrapper: Tuple of routes, decorated function.

    Examples:
        Using the method to define a GET endpoint:

        ```python
        @app.route("/hello")
        async def hello(request: Request):
            return text("Hello, World!")
        ```

        Adding context kwargs to the route:

        ```python
        @app.route("/greet", ctx_name="World")
        async def greet(request: Request):
            name = request.route.ctx.name
            return text(f"Hello, {name}!")
        ```
  summary: Decorate a function to be registered as a route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: None
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: ignore_body
      default: 'False'
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: websocket
      default: 'False'
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - kind: positional
      name: static
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteMixin.websocket
  kind: method
  ns: sanic.base
  description: |-
    Decorate a function to be registered as a websocket route.

    Args:
        uri (str): Path of the URL.
        host (Optional[Union[str, List[str]]]): Host IP or FQDN details.
        strict_slashes (Optional[bool]): If the API endpoint needs to
            terminate with a `"/"` or not.
        subprotocols (Optional[List[str]]): Optional list of str with
            supported subprotocols.
        version (Optional[Union[int, str, float]]): WebSocket
            protocol version.
        name (Optional[str]): A unique name assigned to the URL so that
            it can be used with url_for.
        apply (bool): If set to False, it doesn't apply the route to the
            app. Default is `True`.
        version_prefix (str): URL path that should be before the version
            value. Defaults to `"/v"`.
        error_format (Optional[str]): Custom error format string.
        **ctx_kwargs (Any): Keyword arguments that begin with
            a `ctx_* prefix` will be appended to the route
            context (`route.ctx`).

    Returns:
        tuple: Tuple of routes, decorated function.
  summary: Decorate a function to be registered as a websocket route
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - kind: positional
      name: error_format
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalMixin
  kind: class
  ns: sanic.base
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: SignalMixin
      kind: return
  inherits_from: null
- name: SignalMixin.add_signal
  kind: method
  ns: sanic.base
  description: |-
    Registers a signal handler for a specific event.

    Args:
        handler (Optional[Callable[..., Any]]): The function to be called
            when the event occurs. Defaults to a noop if not provided.
        event (str): The name of the event to listen for.
        condition (Optional[Dict[str, Any]]): Optional condition to filter
            the event triggering. Defaults to `None`.
        exclusive (bool): Whether or not the handler is exclusive. When
            `True`, the signal can only be dispatched when the
            `condition` has been met. *This is inapplicable to blueprint
            signals, which are **ALWAYS** non-exclusive.* Defaults
            to `True`.

    Returns:
        Callable[..., Any]: The handler that was registered.
  summary: Registers a signal handler for a specific event
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: condition
      default: None
      rest: false
    - kind: positional
      name: exclusive
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalMixin.catch_exception
  kind: method
  ns: sanic.base
  description: |-
    Register an exception handler for logging or processing.

    This method allows the registration of a custom exception handler to
    catch and process exceptions that occur in the application. Unlike a
    typical exception handler that might modify the response to the client,
    this is intended to capture exceptions for logging or other internal
    processing, such as sending them to an error reporting utility.

    Args:
        handler (Callable): A coroutine function that takes the application
            instance and the exception as arguments. It will be called when
            an exception occurs within the application's lifecycle.

    Example:
        ```python
        app = Sanic("TestApp")

        @app.catch_exception
        async def report_exception(app: Sanic, exception: Exception):
            logging.error(f"An exception occurred: {exception}")

            # Send to an error reporting service
            await error_service.report(exception)

        # Any unhandled exceptions within the application will now be
        # logged and reported to the error service.
        ```
  summary: Register an exception handler for logging or processing
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalMixin.event
  kind: method
  ns: sanic.base
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalMixin.signal
  kind: method
  ns: sanic.base
  description: |-
    For creating a signal handler, used similar to a route handler:

    .. code-block:: python

        @app.signal("foo.bar.<thing>")
        async def signal_handler(thing, **kwargs):
            print(f"[signal_handler] {thing=}", kwargs)

    :param event: Representation of the event in ``one.two.three`` form
    :type event: str
    :param apply: For lazy evaluation, defaults to ``True``
    :type apply: bool, optional
    :param condition: For use with the ``condition`` argument in dispatch
        filtering, defaults to ``None``
    :param exclusive: When ``True``, the signal can only be dispatched
        when the condition has been met. When ``False``, the signal can
        be dispatched either with or without it. *THIS IS INAPPLICABLE TO
        BLUEPRINT SIGNALS. THEY ARE ALWAYS NON-EXCLUSIVE*, defaults
        to ``True``
    :type condition: Dict[str, Any], optional
  summary: 'For creating a signal handler, used similar to a route handler:'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - name: apply
      default: 'True'
      rest: false
      kind: kw-only
    - name: condition
      default: None
      rest: false
      kind: kw-only
    - name: exclusive
      default: 'True'
      rest: false
      kind: kw-only
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: StaticMixin
  kind: class
  ns: sanic.base
  description: Base class for some other mixins.
  summary: Base class for some other mixins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: StaticMixin
      kind: return
  inherits_from:
  - <class 'sanic.mixins.base.BaseMixin'>
- name: StaticMixin.static
  kind: method
  ns: sanic.base
  description: |-
    Register a root to serve files from. The input can either be a file or a directory.

    This method provides an easy and simple way to set up the route necessary to serve static files.

    Args:
        uri (str): URL path to be used for serving static content.
        file_or_directory (Union[PathLike, str]): Path to the static file
            or directory with static files.
        pattern (str, optional): Regex pattern identifying the valid
            static files. Defaults to `r"/?.+"`.
        use_modified_since (bool, optional): If true, send file modified
            time, and return not modified if the browser's matches the
            server's. Defaults to `True`.
        use_content_range (bool, optional): If true, process header for
            range requests and sends  the file part that is requested.
            Defaults to `False`.
        stream_large_files (Union[bool, int], optional): If `True`, use
            the `StreamingHTTPResponse.file_stream` handler rather than
            the `HTTPResponse.file handler` to send the file. If this
            is an integer, it represents the threshold size to switch
            to `StreamingHTTPResponse.file_stream`. Defaults to `False`,
            which means that the response will not be streamed.
        name (str, optional): User-defined name used for url_for.
            Defaults to `"static"`.
        host (Optional[str], optional): Host IP or FQDN for the
            service to use.
        strict_slashes (Optional[bool], optional): Instruct Sanic to
            check if the request URLs need to terminate with a slash.
        content_type (Optional[str], optional): User-defined content type
            for header.
        apply (bool, optional): If true, will register the route
            immediately. Defaults to `True`.
        resource_type (Optional[str], optional): Explicitly declare a
            resource to be a `"file"` or a `"dir"`.
        index (Optional[Union[str, Sequence[str]]], optional): When
            exposing against a directory, index is  the name that will
            be served as the default file. When multiple file names are
            passed, then they will be tried in order.
        directory_view (bool, optional): Whether to fallback to showing
            the directory viewer when exposing a directory. Defaults
            to `False`.
        directory_handler (Optional[DirectoryHandler], optional): An
            instance of DirectoryHandler that can be used for explicitly
            controlling and subclassing the behavior of the default
            directory handler.

    Returns:
        List[sanic.router.Route]: Routes registered on the router.

    Examples:
        Serving a single file:
        ```python
        app.static('/foo', 'path/to/static/file.txt')
        ```

        Serving all files from a directory:
        ```python
        app.static('/static', 'path/to/static/directory')
        ```

        Serving large files with a specific threshold:
        ```python
        app.static('/static', 'path/to/large/files', stream_large_files=1000000)
        ```
  summary: Register a root to serve files from
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: file_or_directory
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: /?.+
      rest: false
    - kind: positional
      name: use_modified_since
      default: 'True'
      rest: false
    - kind: positional
      name: use_content_range
      default: 'False'
      rest: false
    - kind: positional
      name: stream_large_files
      default: 'False'
      rest: false
    - kind: positional
      name: name
      default: static
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: None
      rest: false
    - kind: positional
      name: apply
      default: 'True'
      rest: false
    - kind: positional
      name: resource_type
      default: None
      rest: false
    - kind: positional
      name: index
      default: None
      rest: false
    - kind: positional
      name: directory_view
      default: 'False'
      rest: false
    - kind: positional
      name: directory_handler
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: VALID_NAME
  kind: const
  ns: sanic.base
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.blueprint_group
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.blueprints
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.blueprints
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.blueprints
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureStatic
  kind: class
  ns: sanic.blueprints
  description: FutureStatic(uri, file_or_directory, pattern, use_modified_since, use_content_range, stream_large_files, name, host, strict_slashes, content_type, resource_type, directory_handler)
  summary: FutureStatic(uri, file_or_directory, pattern, use_modified_since, use_content_range, stream_large_files, name, host, strict_slashes, content_type, resource_type, directory_handler)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: file_or_directory
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: null
      rest: false
    - kind: positional
      name: use_modified_since
      default: null
      rest: false
    - kind: positional
      name: use_content_range
      default: null
      rest: false
    - kind: positional
      name: stream_large_files
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: strict_slashes
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: null
      rest: false
    - kind: positional
      name: resource_type
      default: null
      rest: false
    - kind: positional
      name: directory_handler
      default: null
      rest: false
    - type: FutureStatic
      kind: return
  inherits_from:
  - <class 'tuple'>
- name: FutureStatic.content_type
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 9
  summary: Alias for field number 9
  signatures: null
  inherits_from: null
- name: FutureStatic.count
  kind: callable
  ns: sanic.blueprints
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureStatic.directory_handler
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 11
  summary: Alias for field number 11
  signatures: null
  inherits_from: null
- name: FutureStatic.file_or_directory
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: FutureStatic.host
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 7
  summary: Alias for field number 7
  signatures: null
  inherits_from: null
- name: FutureStatic.index
  kind: callable
  ns: sanic.blueprints
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FutureStatic.name
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 6
  summary: Alias for field number 6
  signatures: null
  inherits_from: null
- name: FutureStatic.pattern
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: FutureStatic.resource_type
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 10
  summary: Alias for field number 10
  signatures: null
  inherits_from: null
- name: FutureStatic.stream_large_files
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 5
  summary: Alias for field number 5
  signatures: null
  inherits_from: null
- name: FutureStatic.strict_slashes
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 8
  summary: Alias for field number 8
  signatures: null
  inherits_from: null
- name: FutureStatic.uri
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: FutureStatic.use_content_range
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 4
  summary: Alias for field number 4
  signatures: null
  inherits_from: null
- name: FutureStatic.use_modified_since
  kind: property
  ns: sanic.blueprints
  description: Alias for field number 3
  summary: Alias for field number 3
  signatures: null
  inherits_from: null
- name: Iterable
  kind: callable
  ns: sanic.blueprints
  description: A generic version of collections.abc.Iterable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Iterator
  kind: callable
  ns: sanic.blueprints
  description: A generic version of collections.abc.Iterator.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.blueprints
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerType
  kind: callable
  ns: sanic.blueprints
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareType
  kind: callable
  ns: sanic.blueprints
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableSequence
  kind: class
  ns: sanic.blueprints
  description: |-
    All the operations on a read-write sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().
  summary: All the operations on a read-write sequence
  signatures:
  - - type: MutableSequence
      kind: return
  inherits_from:
  - <class 'collections.abc.Sequence'>
  - <class 'collections.abc.Reversible'>
  - <class 'collections.abc.Collection'>
  - <class 'collections.abc.Sized'>
  - <class 'collections.abc.Iterable'>
  - <class 'collections.abc.Container'>
- name: MutableSequence.append
  kind: method
  ns: sanic.blueprints
  description: S.append(value) -- append value to the end of the sequence
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableSequence.clear
  kind: method
  ns: sanic.blueprints
  description: S.clear() -> None -- remove all items from S
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableSequence.count
  kind: method
  ns: sanic.blueprints
  description: S.count(value) -> integer -- return number of occurrences of value
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableSequence.extend
  kind: method
  ns: sanic.blueprints
  description: S.extend(iterable) -- extend sequence by appending elements from the iterable
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: values
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableSequence.index
  kind: method
  ns: sanic.blueprints
  description: |-
    S.index(value, [start, [stop]]) -> integer -- return first index of value.
    Raises ValueError if the value is not present.

    Supporting start and stop arguments is optional, but
    recommended.
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableSequence.insert
  kind: method
  ns: sanic.blueprints
  description: S.insert(index, value) -- insert value before index
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableSequence.pop
  kind: method
  ns: sanic.blueprints
  description: |-
    S.pop([index]) -> item -- remove and return item at index (default last).
    Raise IndexError if list is empty or index is out of range.
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableSequence.remove
  kind: method
  ns: sanic.blueprints
  description: |-
    S.remove(value) -- remove first occurrence of value.
    Raise ValueError if the value is not present.
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableSequence.reverse
  kind: method
  ns: sanic.blueprints
  description: S.reverse() -- reverse *IN PLACE*
  summary: S
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.blueprints
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteHandler
  kind: callable
  ns: sanic.blueprints
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sequence
  kind: callable
  ns: sanic.blueprints
  description: A generic version of collections.abc.Sequence.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.blueprints
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TYPE_CHECKING
  kind: const
  ns: sanic.blueprints
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Tuple
  kind: callable
  ns: sanic.blueprints
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.blueprints
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.blueprints
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: bpg_base
  kind: callable
  ns: sanic.blueprints
  description: |-
    All the operations on a read-write sequence.

    Concrete subclasses must provide __new__ or __init__,
    __getitem__, __setitem__, __delitem__, __len__, and insert().
  summary: All the operations on a read-write sequence
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: chain
  kind: class
  ns: sanic.blueprints
  description: |-
    chain(*iterables) --> chain object

    Return a chain object whose .__next__() method returns elements from the
    first iterable until it is exhausted, then elements from the next
    iterable, until all of the iterables are exhausted.
  summary: chain(*iterables) --> chain object
  signatures: null
  inherits_from: null
- name: deepcopy
  kind: function
  ns: sanic.blueprints
  description: |-
    Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
  summary: Deep copy operation on arbitrary Python objects
  signatures:
  - - kind: positional
      name: x
      default: null
      rest: false
    - kind: positional
      name: memo
      default: None
      rest: false
    - kind: positional
      name: _nil
      default: '[]'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: isfunction
  kind: function
  ns: sanic.blueprints
  description: |-
    Return true if the object is a user-defined function.

    Function objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this function was defined
        __code__        code object containing compiled function bytecode
        __defaults__    tuple of any default values for arguments
        __globals__     global namespace in which this function was defined
        __annotations__ dict of parameter annotations
        __kwdefaults__  dict of keyword only parameters with defaults
  summary: Return true if the object is a user-defined function
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: lazy
  kind: function
  ns: sanic.blueprints
  description: |-
    Decorator to register a function to be called later.

    Args:
        func (Callable): Function to be called later.
        as_decorator (bool): Whether the function should be called
            immediately or not.
  summary: Decorator to register a function to be called later
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - kind: positional
      name: as_decorator
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: overload
  kind: function
  ns: sanic.blueprints
  description: |-
    Decorator for overloaded functions/methods.

    In a stub file, place two or more stub definitions for the same
    function in a row, each decorated with @overload.

    For example::

        @overload
        def utf8(value: None) -> None: ...
        @overload
        def utf8(value: bytes) -> bytes: ...
        @overload
        def utf8(value: str) -> bytes: ...

    In a non-stub file (i.e. a regular .py file), do the same but
    follow it with an implementation.  The implementation should *not*
    be decorated with @overload::

        @overload
        def utf8(value: None) -> None: ...
        @overload
        def utf8(value: bytes) -> bytes: ...
        @overload
        def utf8(value: str) -> bytes: ...
        def utf8(value):
            ...  # implementation goes here

    The overloads for a function can be retrieved at runtime using the
    get_overloads() function.
  summary: Decorator for overloaded functions/methods
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: wraps
  kind: function
  ns: sanic.blueprints
  description: |-
    Decorator factory to apply update_wrapper() to a wrapper function

    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
  summary: Decorator factory to apply update_wrapper() to a wrapper function
  signatures:
  - - kind: positional
      name: wrapped
      default: null
      rest: false
    - kind: positional
      name: assigned
      default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
      rest: false
    - kind: positional
      name: updated
      default: ('__dict__',)
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.cli
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.compat
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Awaitable
  kind: callable
  ns: sanic.compat
  description: A generic version of collections.abc.Awaitable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CIMultiDict
  kind: class
  ns: sanic.compat
  description: Dictionary with the support for duplicate case-insensitive keys.
  summary: Dictionary with the support for duplicate case-insensitive keys
  signatures: null
  inherits_from:
  - <class 'multidict._multidict.MultiDict'>
- name: CIMultiDict.add
  kind: callable
  ns: sanic.compat
  description: Add the key and value, not overwriting any previous value.
  summary: Add the key and value, not overwriting any previous value
  signatures: null
  inherits_from: null
- name: CIMultiDict.clear
  kind: callable
  ns: sanic.compat
  description: Remove all items from MultiDict
  summary: Remove all items from MultiDict
  signatures: null
  inherits_from: null
- name: CIMultiDict.copy
  kind: callable
  ns: sanic.compat
  description: Return a copy of itself.
  summary: Return a copy of itself
  signatures: null
  inherits_from: null
- name: CIMultiDict.extend
  kind: callable
  ns: sanic.compat
  description: |-
    Extend current MultiDict with more values.
    This method must be used instead of update.
  summary: Extend current MultiDict with more values
  signatures: null
  inherits_from: null
- name: CIMultiDict.get
  kind: callable
  ns: sanic.compat
  description: |-
    Get first value matching the key.

    The method is alias for .getone().
  summary: Get first value matching the key
  signatures: null
  inherits_from: null
- name: CIMultiDict.getall
  kind: callable
  ns: sanic.compat
  description: Return a list of all values matching the key.
  summary: Return a list of all values matching the key
  signatures: null
  inherits_from: null
- name: CIMultiDict.getone
  kind: callable
  ns: sanic.compat
  description: Get first value matching the key.
  summary: Get first value matching the key
  signatures: null
  inherits_from: null
- name: CIMultiDict.items
  kind: callable
  ns: sanic.compat
  description: Return a new view of the dictionary's items *(key, value) pairs).
  summary: Return a new view of the dictionary's items *(key, value) pairs)
  signatures: null
  inherits_from: null
- name: CIMultiDict.keys
  kind: callable
  ns: sanic.compat
  description: Return a new view of the dictionary's keys.
  summary: Return a new view of the dictionary's keys
  signatures: null
  inherits_from: null
- name: CIMultiDict.pop
  kind: callable
  ns: sanic.compat
  description: |-
    Remove the last occurrence of key and return the corresponding value.

    If key is not found, default is returned if given, otherwise KeyError is raised.
  summary: Remove the last occurrence of key and return the corresponding value
  signatures: null
  inherits_from: null
- name: CIMultiDict.popall
  kind: callable
  ns: sanic.compat
  description: |-
    Remove all occurrences of key and return the list of corresponding values.

    If key is not found, default is returned if given, otherwise KeyError is raised.
  summary: Remove all occurrences of key and return the list of corresponding values
  signatures: null
  inherits_from: null
- name: CIMultiDict.popitem
  kind: callable
  ns: sanic.compat
  description: Remove and return an arbitrary (key, value) pair.
  summary: Remove and return an arbitrary (key, value) pair
  signatures: null
  inherits_from: null
- name: CIMultiDict.popone
  kind: callable
  ns: sanic.compat
  description: |-
    Remove the last occurrence of key and return the corresponding value.

    If key is not found, default is returned if given, otherwise KeyError is raised.
  summary: Remove the last occurrence of key and return the corresponding value
  signatures: null
  inherits_from: null
- name: CIMultiDict.setdefault
  kind: callable
  ns: sanic.compat
  description: Return value for key, set value to default if key is not present.
  summary: Return value for key, set value to default if key is not present
  signatures: null
  inherits_from: null
- name: CIMultiDict.update
  kind: callable
  ns: sanic.compat
  description: Update the dictionary from *other*, overwriting existing keys.
  summary: Update the dictionary from *other*, overwriting existing keys
  signatures: null
  inherits_from: null
- name: CIMultiDict.values
  kind: callable
  ns: sanic.compat
  description: Return a new view of the dictionary's values.
  summary: Return a new view of the dictionary's values
  signatures: null
  inherits_from: null
- name: CancelledErrors
  kind: const
  ns: sanic.compat
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Literal
  kind: callable
  ns: sanic.compat
  description: |-
    Special typing form to define literal types (a.k.a. value types).

    This form can be used to indicate to type checkers that the corresponding
    variable or function parameter has a value equivalent to the provided
    literal (or one of several literals)::

        def validate_simple(data: Any) -> Literal[True]:  # always returns True
            ...

        MODE = Literal['r', 'rb', 'w', 'wb']
        def open_helper(file: str, mode: MODE) -> str:
            ...

        open_helper('/some/path', 'r')  # Passes type check
        open_helper('/other/path', 'typo')  # Error in type checker

    Literal[...] cannot be subclassed. At runtime, an arbitrary value
    is allowed as type argument to Literal[...], but type checkers may
    impose restrictions.
  summary: Special typing form to define literal types (a
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: OS_IS_WINDOWS
  kind: const
  ns: sanic.compat
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PYPY_IMPLEMENTATION
  kind: const
  ns: sanic.compat
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StartMethod
  kind: callable
  ns: sanic.compat
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum
  kind: class
  ns: sanic.compat
  description: Enum where members are also (and must be) strings
  summary: Enum where members are also (and must be) strings
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: StrEnum
      kind: return
  inherits_from:
  - <class 'str'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: StrEnum.capitalize
  kind: callable
  ns: sanic.compat
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.casefold
  kind: callable
  ns: sanic.compat
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.center
  kind: callable
  ns: sanic.compat
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.count
  kind: callable
  ns: sanic.compat
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.encode
  kind: callable
  ns: sanic.compat
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.endswith
  kind: callable
  ns: sanic.compat
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.expandtabs
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.find
  kind: callable
  ns: sanic.compat
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.format
  kind: callable
  ns: sanic.compat
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.format_map
  kind: callable
  ns: sanic.compat
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.index
  kind: callable
  ns: sanic.compat
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.isalnum
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isalpha
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isascii
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isdecimal
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isdigit
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isidentifier
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.islower
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isnumeric
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isprintable
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isspace
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.istitle
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.isupper
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.join
  kind: callable
  ns: sanic.compat
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.ljust
  kind: callable
  ns: sanic.compat
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.lower
  kind: callable
  ns: sanic.compat
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.lstrip
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.partition
  kind: callable
  ns: sanic.compat
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.removeprefix
  kind: callable
  ns: sanic.compat
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.removesuffix
  kind: callable
  ns: sanic.compat
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.replace
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.rfind
  kind: callable
  ns: sanic.compat
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.rindex
  kind: callable
  ns: sanic.compat
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.rjust
  kind: callable
  ns: sanic.compat
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.rpartition
  kind: callable
  ns: sanic.compat
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.rsplit
  kind: callable
  ns: sanic.compat
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.rstrip
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.split
  kind: callable
  ns: sanic.compat
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.splitlines
  kind: callable
  ns: sanic.compat
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.startswith
  kind: callable
  ns: sanic.compat
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: StrEnum.strip
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.swapcase
  kind: callable
  ns: sanic.compat
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.title
  kind: callable
  ns: sanic.compat
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.translate
  kind: callable
  ns: sanic.compat
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.upper
  kind: callable
  ns: sanic.compat
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StrEnum.zfill
  kind: callable
  ns: sanic.compat
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UVLOOP_INSTALLED
  kind: const
  ns: sanic.compat
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.compat
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum
  kind: class
  ns: sanic.compat
  description: Base class for string enums that are case insensitive.
  summary: Base class for string enums that are case insensitive
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: UpperStrEnum
      kind: return
  inherits_from:
  - <enum 'StrEnum'>
  - <class 'str'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: UpperStrEnum.capitalize
  kind: callable
  ns: sanic.compat
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.casefold
  kind: callable
  ns: sanic.compat
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.center
  kind: callable
  ns: sanic.compat
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.count
  kind: callable
  ns: sanic.compat
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: UpperStrEnum.encode
  kind: callable
  ns: sanic.compat
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.endswith
  kind: callable
  ns: sanic.compat
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: UpperStrEnum.expandtabs
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.find
  kind: callable
  ns: sanic.compat
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: UpperStrEnum.format
  kind: callable
  ns: sanic.compat
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: UpperStrEnum.format_map
  kind: callable
  ns: sanic.compat
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: UpperStrEnum.index
  kind: callable
  ns: sanic.compat
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: UpperStrEnum.isalnum
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.isalpha
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.isascii
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.isdecimal
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.isdigit
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.isidentifier
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.islower
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.isnumeric
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.isprintable
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.isspace
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.istitle
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.isupper
  kind: callable
  ns: sanic.compat
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.join
  kind: callable
  ns: sanic.compat
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.ljust
  kind: callable
  ns: sanic.compat
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.lower
  kind: callable
  ns: sanic.compat
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.lstrip
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.partition
  kind: callable
  ns: sanic.compat
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.removeprefix
  kind: callable
  ns: sanic.compat
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.removesuffix
  kind: callable
  ns: sanic.compat
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.replace
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.rfind
  kind: callable
  ns: sanic.compat
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: UpperStrEnum.rindex
  kind: callable
  ns: sanic.compat
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: UpperStrEnum.rjust
  kind: callable
  ns: sanic.compat
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.rpartition
  kind: callable
  ns: sanic.compat
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.rsplit
  kind: callable
  ns: sanic.compat
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.rstrip
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.split
  kind: callable
  ns: sanic.compat
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.splitlines
  kind: callable
  ns: sanic.compat
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.startswith
  kind: callable
  ns: sanic.compat
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: UpperStrEnum.strip
  kind: callable
  ns: sanic.compat
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.swapcase
  kind: callable
  ns: sanic.compat
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.title
  kind: callable
  ns: sanic.compat
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.translate
  kind: callable
  ns: sanic.compat
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.upper
  kind: callable
  ns: sanic.compat
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UpperStrEnum.zfill
  kind: callable
  ns: sanic.compat
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: aio_open
  kind: function
  ns: sanic.compat
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: file
      default: null
      rest: false
    - kind: positional
      name: mode
      default: r
      rest: false
    - kind: positional
      name: buffering
      default: '-1'
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - kind: positional
      name: errors
      default: None
      rest: false
    - kind: positional
      name: newline
      default: None
      rest: false
    - kind: positional
      name: closefd
      default: 'True'
      rest: false
    - kind: positional
      name: opener
      default: None
      rest: false
    - name: loop
      default: None
      rest: false
      kind: kw-only
    - name: executor
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: contextmanager
  kind: function
  ns: sanic.compat
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ctrlc_workaround_for_windows
  kind: function
  ns: sanic.compat
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: app
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: enable_windows_color_support
  kind: function
  ns: sanic.compat
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.compat
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: open_async
  kind: function
  ns: sanic.compat
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: file
      default: null
      rest: false
    - kind: positional
      name: mode
      default: r
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: pypy_os_module_patch
  kind: function
  ns: sanic.compat
  description: |-
    The PyPy os module is missing the 'readlink' function, which causes issues
    withaiofiles. This workaround replaces the missing 'readlink' function
    with 'os.path.realpath', which serves the same purpose.
  summary: The PyPy os module is missing the 'readlink' function, which causes issues
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: pypy_windows_set_console_cp_patch
  kind: function
  ns: sanic.compat
  description: |-
    A patch function for PyPy on Windows that sets the console code page to
    UTF-8 encodingto allow for proper handling of non-ASCII characters. This
    function uses ctypes to call the Windows API functions SetConsoleCP and
    SetConsoleOutputCP to set the code page.
  summary: A patch function for PyPy on Windows that sets the console code page to
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: stat_async
  kind: function
  ns: sanic.compat
  description: |-
    Perform a stat system call on the given path.

      path
        Path to be examined; can be string, bytes, a path-like object or
        open-file-descriptor int.
      dir_fd
        If not None, it should be a file descriptor open to a directory,
        and path should be a relative string; path will then be relative to
        that directory.
      follow_symlinks
        If False, and the last element of the path is a symbolic link,
        stat will examine the symbolic link itself instead of the file
        the link points to.

    dir_fd and follow_symlinks may not be implemented
      on your platform.  If they are unavailable, using them will raise a
      NotImplementedError.

    It's an error to use dir_fd or follow_symlinks when specifying path as
      an open file descriptor.
  summary: Perform a stat system call on the given path
  signatures:
  - - name: loop
      default: None
      rest: false
      kind: kw-only
    - name: executor
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: use_context
  kind: function
  ns: sanic.compat
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: use_trio
  kind: const
  ns: sanic.compat
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.config
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ABCMeta
  kind: class
  ns: sanic.config
  description: |-
    Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).
  summary: Metaclass for defining Abstract Base Classes (ABCs)
  signatures:
  - - kind: positional
      name: mcls
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: bases
      default: null
      rest: false
    - kind: positional
      name: namespace
      default: null
      rest: false
    - type: ABCMeta
      kind: return
  inherits_from:
  - <class 'type'>
- name: ABCMeta.mro
  kind: callable
  ns: sanic.config
  description: Return a type's method resolution order.
  summary: Return a type's method resolution order
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ABCMeta.register
  kind: method
  ns: sanic.config
  description: |-
    Register a virtual subclass of an ABC.

    Returns the subclass, to allow usage as a class decorator.
  summary: Register a virtual subclass of an ABC
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: subclass
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.config
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DEFAULT_CONFIG
  kind: const
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_FORMAT
  kind: const
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DescriptorMeta
  kind: class
  ns: sanic.config
  description: Metaclass for Config.
  summary: Metaclass for Config
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: DescriptorMeta
      kind: return
  inherits_from:
  - <class 'abc.ABCMeta'>
  - <class 'type'>
- name: DescriptorMeta.mro
  kind: callable
  ns: sanic.config
  description: Return a type's method resolution order.
  summary: Return a type's method resolution order
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DescriptorMeta.register
  kind: method
  ns: sanic.config
  description: |-
    Register a virtual subclass of an ABC.

    Returns the subclass, to allow usage as a class decorator.
  summary: Register a virtual subclass of an ABC
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: subclass
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.config
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FilterWarningType
  kind: callable
  ns: sanic.config
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http
  kind: class
  ns: sanic.config
  description: |-
    "Internal helper for managing the HTTP/1.1 request/response cycle.

    Raises:
        BadRequest: If the request body is malformed.
        Exception: If the request is malformed.
        ExpectationFailed: If the request is malformed.
        PayloadTooLarge: If the request body exceeds the size limit.
        RuntimeError: If the response status is invalid.
        ServerError: If the handler does not produce a response.
        ServerError: If the response is bigger than the content-length.
  summary: '"Internal helper for managing the HTTP/1'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol
      default: null
      rest: false
    - type: Http
      kind: return
  inherits_from:
  - <class 'sanic.http.stream.Stream'>
- name: Http.HEADER_CEILING
  kind: property
  ns: sanic.config
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Http.HEADER_MAX_SIZE
  kind: property
  ns: sanic.config
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Http.create_empty_request
  kind: method
  ns: sanic.config
  description: |-
    Create an empty request object for error handling use.

    Current error handling code needs a request object that won't exist
    if an error occurred during before a request was received. Create a
    bogus response for error handling use.
  summary: Create an empty request object for error handling use
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.dispatch
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.error_response
  kind: method
  ns: sanic.config
  description: Handle response when exception encountered
  summary: Handle response when exception encountered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.exception
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.expecting_continue
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.head_only
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.head_response_ignored
  kind: method
  ns: sanic.config
  description: 'HEAD response: body data silently ignored.'
  summary: 'HEAD response: body data silently ignored'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: end_stream
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.http1
  kind: method
  ns: sanic.config
  description: HTTP 1.1 connection handler
  summary: HTTP 1
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.http1_request_header
  kind: method
  ns: sanic.config
  description: Receive and parse request header into self.request.
  summary: Receive and parse request header into self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.http1_response_chunked
  kind: method
  ns: sanic.config
  description: Format a part of response body in chunked encoding.
  summary: Format a part of response body in chunked encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: end_stream
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.http1_response_header
  kind: method
  ns: sanic.config
  description: Format response header and send it.
  summary: Format response header and send it
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: end_stream
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.http1_response_normal
  kind: method
  ns: sanic.config
  description: Format / keep track of non-chunked response.
  summary: Format / keep track of non-chunked response
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: end_stream
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.init_for_request
  kind: method
  ns: sanic.config
  description: Init/reset all per-request variables.
  summary: Init/reset all per-request variables
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.keep_alive
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.log_response
  kind: method
  ns: sanic.config
  description: Helper method provided to enable the logging of responses in case if the `HttpProtocol.access_log` is enabled.
  summary: Helper method provided to enable the logging of responses in case if the `HttpProtocol
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.protocol
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.read
  kind: method
  ns: sanic.config
  description: Read some bytes of request body.
  summary: Read some bytes of request body
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.recv_buffer
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.request
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.request_body
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.request_bytes
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.request_bytes_left
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.request_max_size
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.respond
  kind: method
  ns: sanic.config
  description: |-
    Initiate new streaming response.

    Nothing is sent until the first send() call on the returned object, and
    calling this function multiple times will just alter the response to be
    given.
  summary: Initiate new streaming response
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.response
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.response_bytes_left
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.response_func
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.response_size
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.send
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.set_header_max_size
  kind: function
  ns: sanic.config
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http.stage
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.upgrade_websocket
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http.url
  kind: property
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Literal
  kind: callable
  ns: sanic.config
  description: |-
    Special typing form to define literal types (a.k.a. value types).

    This form can be used to indicate to type checkers that the corresponding
    variable or function parameter has a value equivalent to the provided
    literal (or one of several literals)::

        def validate_simple(data: Any) -> Literal[True]:  # always returns True
            ...

        MODE = Literal['r', 'rb', 'w', 'wb']
        def open_helper(file: str, mode: MODE) -> str:
            ...

        open_helper('/some/path', 'r')  # Passes type check
        open_helper('/other/path', 'typo')  # Error in type checker

    Literal[...] cannot be subclassed. At runtime, an arbitrary value
    is allowed as type argument to Literal[...], but type checkers may
    impose restrictions.
  summary: Special typing form to define literal types (a
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator
  kind: class
  ns: sanic.config
  description: Local certificate creator.
  summary: Local certificate creator
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: LocalCertCreator
      kind: return
  inherits_from:
  - <enum 'UpperStrEnum'>
  - <enum 'StrEnum'>
  - <class 'str'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: LocalCertCreator.AUTO
  kind: property
  ns: sanic.config
  description: Local certificate creator.
  summary: Local certificate creator
  signatures: null
  inherits_from: null
- name: LocalCertCreator.MKCERT
  kind: property
  ns: sanic.config
  description: Local certificate creator.
  summary: Local certificate creator
  signatures: null
  inherits_from: null
- name: LocalCertCreator.TRUSTME
  kind: property
  ns: sanic.config
  description: Local certificate creator.
  summary: Local certificate creator
  signatures: null
  inherits_from: null
- name: LocalCertCreator.capitalize
  kind: callable
  ns: sanic.config
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.casefold
  kind: callable
  ns: sanic.config
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.center
  kind: callable
  ns: sanic.config
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.count
  kind: callable
  ns: sanic.config
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: LocalCertCreator.encode
  kind: callable
  ns: sanic.config
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.endswith
  kind: callable
  ns: sanic.config
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: LocalCertCreator.expandtabs
  kind: callable
  ns: sanic.config
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.find
  kind: callable
  ns: sanic.config
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: LocalCertCreator.format
  kind: callable
  ns: sanic.config
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: LocalCertCreator.format_map
  kind: callable
  ns: sanic.config
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: LocalCertCreator.index
  kind: callable
  ns: sanic.config
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: LocalCertCreator.isalnum
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.isalpha
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.isascii
  kind: callable
  ns: sanic.config
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.isdecimal
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.isdigit
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.isidentifier
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.islower
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.isnumeric
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.isprintable
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.isspace
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.istitle
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.isupper
  kind: callable
  ns: sanic.config
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.join
  kind: callable
  ns: sanic.config
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.ljust
  kind: callable
  ns: sanic.config
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.lower
  kind: callable
  ns: sanic.config
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.lstrip
  kind: callable
  ns: sanic.config
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.partition
  kind: callable
  ns: sanic.config
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.removeprefix
  kind: callable
  ns: sanic.config
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.removesuffix
  kind: callable
  ns: sanic.config
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.replace
  kind: callable
  ns: sanic.config
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.rfind
  kind: callable
  ns: sanic.config
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: LocalCertCreator.rindex
  kind: callable
  ns: sanic.config
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: LocalCertCreator.rjust
  kind: callable
  ns: sanic.config
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.rpartition
  kind: callable
  ns: sanic.config
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.rsplit
  kind: callable
  ns: sanic.config
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.rstrip
  kind: callable
  ns: sanic.config
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.split
  kind: callable
  ns: sanic.config
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.splitlines
  kind: callable
  ns: sanic.config
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.startswith
  kind: callable
  ns: sanic.config
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: LocalCertCreator.strip
  kind: callable
  ns: sanic.config
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.swapcase
  kind: callable
  ns: sanic.config
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.title
  kind: callable
  ns: sanic.config
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.translate
  kind: callable
  ns: sanic.config
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.upper
  kind: callable
  ns: sanic.config
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalCertCreator.zfill
  kind: callable
  ns: sanic.config
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.config
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SANIC_PREFIX
  kind: const
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sequence
  kind: callable
  ns: sanic.config
  description: A generic version of collections.abc.Sequence.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.config
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: check_error_format
  kind: function
  ns: sanic.config
  description: Check that the format is known.
  summary: Check that the format is known
  signatures:
  - - kind: positional
      name: format
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: environ
  kind: const
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.config
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: filterwarnings
  kind: function
  ns: sanic.config
  description: |-
    Insert an entry into the list of warnings filters (at the front).

    'action' -- one of "error", "ignore", "always", "default", "module",
                or "once"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
  summary: Insert an entry into the list of warnings filters (at the front)
  signatures:
  - - kind: positional
      name: action
      default: null
      rest: false
    - kind: positional
      name: message
      default: null
      rest: false
    - kind: positional
      name: category
      default: <class 'Warning'>
      rest: false
    - kind: positional
      name: module
      default: null
      rest: false
    - kind: positional
      name: lineno
      default: '0'
      rest: false
    - kind: positional
      name: append
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: getmembers
  kind: function
  ns: sanic.config
  description: |-
    Return all members of an object as (name, value) pairs sorted by name.
    Optionally, only return members that satisfy a given predicate.
  summary: Return all members of an object as (name, value) pairs sorted by name
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - kind: positional
      name: predicate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: isclass
  kind: function
  ns: sanic.config
  description: |-
    Return true if the object is a class.

    Class objects provide these attributes:
        __doc__         documentation string
        __module__      name of module in which this class was defined
  summary: Return true if the object is a class
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: isdatadescriptor
  kind: function
  ns: sanic.config
  description: |-
    Return true if the object is a data descriptor.

    Data descriptors have a __set__ or a __delete__ attribute.  Examples are
    properties (defined in Python) and getsets and members (defined in C).
    Typically, data descriptors will also have __name__ and __doc__ attributes
    (properties, getsets, and members have both of these attributes), but this
    is not guaranteed.
  summary: Return true if the object is a data descriptor
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: load_module_from_file_location
  kind: function
  ns: sanic.config
  description: |-
    Returns loaded module provided as a file path.

    :param args:
        Corresponds to importlib.util.spec_from_file_location location
        parameters,but with this differences:
        - It has to be of a string or bytes type.
        - You can also use here environment variables
          in format ${some_env_var}.
          Mark that $some_env_var will not be resolved as environment variable.
    :encoding:
        If location parameter is of a bytes type, then use this encoding
        to decode it into string.
    :param args:
        Corresponds to the rest of importlib.util.spec_from_file_location
        parameters.
    :param kwargs:
        Corresponds to the rest of importlib.util.spec_from_file_location
        parameters.

    For example You can:

        some_module = load_module_from_file_location(
            "some_module_name",
            "/some/path/${some_env_var}"
        )
  summary: Returns loaded module provided as a file path
  signatures:
  - - kind: positional
      name: location
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf8
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: str_to_bool
  kind: function
  ns: sanic.config
  description: |-
    Takes string and tries to turn it into bool as human would do.

    If val is in case insensitive (
        "y", "yes", "yep", "yup", "t",
        "true", "on", "enable", "enabled", "1"
    ) returns True.
    If val is in case insensitive (
        "n", "no", "f", "false", "off", "disable", "disabled", "0"
    ) returns False.
    Else Raise ValueError.
  summary: Takes string and tries to turn it into bool as human would do
  signatures:
  - - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.constants
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CACHEABLE_HTTP_METHODS
  kind: const
  ns: sanic.constants
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_HTTP_CONTENT_TYPE
  kind: const
  ns: sanic.constants
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_LOCAL_TLS_CERT
  kind: const
  ns: sanic.constants
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_LOCAL_TLS_KEY
  kind: const
  ns: sanic.constants
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTP_METHODS
  kind: const
  ns: sanic.constants
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: IDEMPOTENT_HTTP_METHODS
  kind: const
  ns: sanic.constants
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SAFE_HTTP_METHODS
  kind: const
  ns: sanic.constants
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.cookies
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Cookie
  kind: class
  ns: sanic.cookies
  description: |-
    A representation of a HTTP cookie, providing an interface to manipulate cookie attributes intended for a response.

    This class is a simplified representation of a cookie, similar to the Morsel SimpleCookie in Python's standard library.
    It allows the manipulation of various cookie attributes including path, domain, security settings, and others.

    Several "smart defaults" are provided to make it easier to create cookies that are secure by default. These include:

    - Setting the `secure` flag to `True` by default
    - Setting the `samesite` flag to `Lax` by default

    Args:
        key (str): The key (name) of the cookie.
        value (str): The value of the cookie.
        path (str, optional): The path for the cookie. Defaults to "/".
        domain (Optional[str], optional): The domain for the cookie.
            Defaults to `None`.
        secure (bool, optional): Whether the cookie is secure.
            Defaults to `True`.
        max_age (Optional[int], optional): The maximum age of the cookie
            in seconds. Defaults to `None`.
        expires (Optional[datetime], optional): The expiration date of the
            cookie. Defaults to `None`.
        httponly (bool, optional): HttpOnly flag for the cookie.
            Defaults to `False`.
        samesite (Optional[SameSite], optional): The SameSite attribute for
            the cookie. Defaults to `"Lax"`.
        partitioned (bool, optional): Whether the cookie is partitioned.
            Defaults to `False`.
        comment (Optional[str], optional): A comment for the cookie.
            Defaults to `None`.
        host_prefix (bool, optional): Whether to use the host prefix.
            Defaults to `False`.
        secure_prefix (bool, optional): Whether to use the secure prefix.
            Defaults to `False`.
  summary: A representation of a HTTP cookie, providing an interface to manipulate cookie attributes intended for a response
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - name: path
      default: /
      rest: false
      kind: kw-only
    - name: domain
      default: None
      rest: false
      kind: kw-only
    - name: secure
      default: 'True'
      rest: false
      kind: kw-only
    - name: max_age
      default: None
      rest: false
      kind: kw-only
    - name: expires
      default: None
      rest: false
      kind: kw-only
    - name: httponly
      default: 'False'
      rest: false
      kind: kw-only
    - name: samesite
      default: Lax
      rest: false
      kind: kw-only
    - name: partitioned
      default: 'False'
      rest: false
      kind: kw-only
    - name: comment
      default: None
      rest: false
      kind: kw-only
    - name: host_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - name: secure_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - type: Cookie
      kind: return
  inherits_from:
  - <class 'dict'>
- name: Cookie.HOST_PREFIX
  kind: property
  ns: sanic.cookies
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Cookie.SECURE_PREFIX
  kind: property
  ns: sanic.cookies
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Cookie.clear
  kind: callable
  ns: sanic.cookies
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: Cookie.comment
  kind: property
  ns: sanic.cookies
  description: A comment for the cookie. Defaults to `None`.
  summary: A comment for the cookie
  signatures: null
  inherits_from: null
- name: Cookie.copy
  kind: callable
  ns: sanic.cookies
  description: D.copy() -> a shallow copy of D
  summary: D
  signatures: null
  inherits_from: null
- name: Cookie.domain
  kind: property
  ns: sanic.cookies
  description: The domain of the cookie. Defaults to `None`.
  summary: The domain of the cookie
  signatures: null
  inherits_from: null
- name: Cookie.encode
  kind: method
  ns: sanic.cookies
  description: |-
    Encode the cookie content in a specific type of encoding instructed by the developer.

    Leverages the `str.encode` method provided by Python.

    This method can be used to encode and embed ``utf-8`` content into
    the cookies.

    .. warning::
        Direct encoding of a Cookie object has been deprecated and will be removed in v24.3.

    Args:
        encoding (str): The encoding type to be used.

    Returns:
        bytes: The encoded cookie content.
  summary: Encode the cookie content in a specific type of encoding instructed by the developer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cookie.expires
  kind: property
  ns: sanic.cookies
  description: The expiration date of the cookie. Defaults to `None`.
  summary: The expiration date of the cookie
  signatures: null
  inherits_from: null
- name: Cookie.get
  kind: callable
  ns: sanic.cookies
  description: Return the value for key if key is in the dictionary, else default.
  summary: Return the value for key if key is in the dictionary, else default
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cookie.httponly
  kind: property
  ns: sanic.cookies
  description: Whether the cookie is HTTP only. Defaults to `False`.
  summary: Whether the cookie is HTTP only
  signatures: null
  inherits_from: null
- name: Cookie.items
  kind: callable
  ns: sanic.cookies
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures: null
  inherits_from: null
- name: Cookie.keys
  kind: callable
  ns: sanic.cookies
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: Cookie.make_key
  kind: function
  ns: sanic.cookies
  description: |-
    Create a cookie key with the appropriate prefix.

    Cookies can have one ow two prefixes. The first is `__Host-` which
    requires that the cookie be set with `path="/", domain=None, and
    secure=True`. The second is `__Secure-` which requires that
    `secure=True`.

    They cannot be combined.

    Args:
        key (str): The key (name) of the cookie.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key.
            This requires that path="/", domain=None, and secure=True.
            Defaults to `False`.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key.
            This requires that secure=True. Defaults to `False`.

    Raises:
        ServerError: If both host_prefix and secure_prefix are set.

    Returns:
        str: The key with the appropriate prefix.
  summary: Create a cookie key with the appropriate prefix
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: host_prefix
      default: 'False'
      rest: false
    - kind: positional
      name: secure_prefix
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cookie.max_age
  kind: property
  ns: sanic.cookies
  description: The maximum age of the cookie in seconds. Defaults to `None`.
  summary: The maximum age of the cookie in seconds
  signatures: null
  inherits_from: null
- name: Cookie.partitioned
  kind: property
  ns: sanic.cookies
  description: Whether the cookie is partitioned. Defaults to `False`.
  summary: Whether the cookie is partitioned
  signatures: null
  inherits_from: null
- name: Cookie.path
  kind: property
  ns: sanic.cookies
  description: The path of the cookie. Defaults to `"/"`.
  summary: The path of the cookie
  signatures: null
  inherits_from: null
- name: Cookie.pop
  kind: callable
  ns: sanic.cookies
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures: null
  inherits_from: null
- name: Cookie.popitem
  kind: callable
  ns: sanic.cookies
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cookie.samesite
  kind: property
  ns: sanic.cookies
  description: The SameSite attribute for the cookie. Defaults to `"Lax"`.
  summary: The SameSite attribute for the cookie
  signatures: null
  inherits_from: null
- name: Cookie.secure
  kind: property
  ns: sanic.cookies
  description: Whether the cookie is secure. Defaults to `True`.
  summary: Whether the cookie is secure
  signatures: null
  inherits_from: null
- name: Cookie.setdefault
  kind: callable
  ns: sanic.cookies
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Cookie.update
  kind: callable
  ns: sanic.cookies
  description: |-
    D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]
  summary: D
  signatures: null
  inherits_from: null
- name: Cookie.values
  kind: callable
  ns: sanic.cookies
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures: null
  inherits_from: null
- name: CookieJar
  kind: class
  ns: sanic.cookies
  description: |-
    A container to manipulate cookies.

    CookieJar dynamically writes headers as cookies are added and removed
    It gets around the limitation of one header per name by using the
    MultiHeader class to provide a unique key that encodes to Set-Cookie.

    Args:
        headers (Header): The headers object to write cookies to.
  summary: A container to manipulate cookies
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: headers
      default: null
      rest: false
    - type: CookieJar
      kind: return
  inherits_from:
  - <class 'dict'>
- name: CookieJar.HEADER_KEY
  kind: property
  ns: sanic.cookies
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: CookieJar.add_cookie
  kind: method
  ns: sanic.cookies
  description: |-
    Add a cookie to the CookieJar.

    Args:
        key (str): Key of the cookie.
        value (str): Value of the cookie.
        path (str, optional): Path of the cookie. Defaults to "/".
        domain (Optional[str], optional): Domain of the cookie. Defaults to None.
        secure (bool, optional): Whether to set it as a secure cookie. Defaults to True.
        max_age (Optional[int], optional): Max age of the cookie in seconds; if set to 0 a
            browser should delete it. Defaults to None.
        expires (Optional[datetime], optional): When the cookie expires; if set to None browsers
            should set it as a session cookie. Defaults to None.
        httponly (bool, optional): Whether to set it as HTTP only. Defaults to False.
        samesite (Optional[SameSite], optional): How to set the samesite property, should be
            strict, lax, or none (case insensitive). Defaults to "Lax".
        partitioned (bool, optional): Whether to set it as partitioned. Defaults to False.
        comment (Optional[str], optional): A cookie comment. Defaults to None.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key.
            This requires that path="/", domain=None, and secure=True. Defaults to False.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key.
            This requires that secure=True. Defaults to False.

    Returns:
        Cookie: The instance of the created cookie.

    Raises:
        ServerError: If host_prefix is set without secure=True.
        ServerError: If host_prefix is set without path="/" and domain=None.
        ServerError: If host_prefix is set with domain.
        ServerError: If secure_prefix is set without secure=True.
        ServerError: If partitioned is set without host_prefix=True.

    Examples:
        Basic usage
        ```python
        cookie = add_cookie('name', 'value')
        ```

        Adding a cookie with a custom path and domain
        ```python
        cookie = add_cookie('name', 'value', path='/custom', domain='example.com')
        ```

        Adding a secure, HTTP-only cookie with a comment
        ```python
        cookie = add_cookie('name', 'value', secure=True, httponly=True, comment='My Cookie')
        ```

        Adding a cookie with a max age of 60 seconds
        ```python
        cookie = add_cookie('name', 'value', max_age=60)
        ```
  summary: Add a cookie to the CookieJar
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - name: path
      default: /
      rest: false
      kind: kw-only
    - name: domain
      default: None
      rest: false
      kind: kw-only
    - name: secure
      default: 'True'
      rest: false
      kind: kw-only
    - name: max_age
      default: None
      rest: false
      kind: kw-only
    - name: expires
      default: None
      rest: false
      kind: kw-only
    - name: httponly
      default: 'False'
      rest: false
      kind: kw-only
    - name: samesite
      default: Lax
      rest: false
      kind: kw-only
    - name: partitioned
      default: 'False'
      rest: false
      kind: kw-only
    - name: comment
      default: None
      rest: false
      kind: kw-only
    - name: host_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - name: secure_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.clear
  kind: callable
  ns: sanic.cookies
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: CookieJar.cookie_headers
  kind: property
  ns: sanic.cookies
  description: Deprecated in v24.3
  summary: Deprecated in v24
  signatures: null
  inherits_from: null
- name: CookieJar.cookies
  kind: property
  ns: sanic.cookies
  description: |-
    A list of cookies in the CookieJar.

    Returns:
        List[Cookie]: A list of cookies in the CookieJar.
  summary: A list of cookies in the CookieJar
  signatures: null
  inherits_from: null
- name: CookieJar.copy
  kind: callable
  ns: sanic.cookies
  description: D.copy() -> a shallow copy of D
  summary: D
  signatures: null
  inherits_from: null
- name: CookieJar.delete_cookie
  kind: method
  ns: sanic.cookies
  description: |-
    Delete a cookie

    This will effectively set it as Max-Age: 0, which a browser should
    interpret it to mean: "delete the cookie".

    Since it is a browser/client implementation, your results may vary
    depending upon which client is being used.

    :param key: The key to be deleted
    :type key: str
    :param path: Path of the cookie, defaults to None
    :type path: Optional[str], optional
    :param domain: Domain of the cookie, defaults to None
    :type domain: Optional[str], optional
    :param host_prefix: Whether to add __Host- as a prefix to the key.
        This requires that path="/", domain=None, and secure=True,
        defaults to False
    :type host_prefix: bool
    :param secure_prefix: Whether to add __Secure- as a prefix to the key.
        This requires that secure=True, defaults to False
    :type secure_prefix: bool
  summary: Delete a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - name: path
      default: /
      rest: false
      kind: kw-only
    - name: domain
      default: None
      rest: false
      kind: kw-only
    - name: host_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - name: secure_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.get
  kind: method
  ns: sanic.cookies
  description: Deprecated in v24.3
  summary: Deprecated in v24
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.get_cookie
  kind: method
  ns: sanic.cookies
  description: |-
    Fetch a cookie from the CookieJar.

    Args:
        key (str): The key of the cookie to fetch.
        path (str, optional): The path of the cookie. Defaults to `"/"`.
        domain (Optional[str], optional): The domain of the cookie.
            Defaults to `None`.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key.
            This requires that path="/", domain=None, and secure=True.
            Defaults to `False`.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key.
            This requires that secure=True. Defaults to `False`.

    Returns:
        Optional[Cookie]: The cookie if it exists, otherwise `None`.
  summary: Fetch a cookie from the CookieJar
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: host_prefix
      default: 'False'
      rest: false
    - kind: positional
      name: secure_prefix
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.has_cookie
  kind: method
  ns: sanic.cookies
  description: |-
    Check if a cookie exists in the CookieJar.

    Args:
        key (str): The key of the cookie to check.
        path (str, optional): The path of the cookie. Defaults to `"/"`.
        domain (Optional[str], optional): The domain of the cookie.
            Defaults to `None`.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key.
            This requires that path="/", domain=None, and secure=True.
            Defaults to `False`.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key.
            This requires that secure=True. Defaults to `False`.

    Returns:
        bool: Whether the cookie exists.
  summary: Check if a cookie exists in the CookieJar
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: host_prefix
      default: 'False'
      rest: false
    - kind: positional
      name: secure_prefix
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.header_key
  kind: property
  ns: sanic.cookies
  description: Deprecated in v24.3
  summary: Deprecated in v24
  signatures: null
  inherits_from: null
- name: CookieJar.items
  kind: method
  ns: sanic.cookies
  description: Deprecated in v24.3
  summary: Deprecated in v24
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.keys
  kind: method
  ns: sanic.cookies
  description: Deprecated in v24.3
  summary: Deprecated in v24
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.pop
  kind: method
  ns: sanic.cookies
  description: Deprecated in v24.3
  summary: Deprecated in v24
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.popitem
  kind: callable
  ns: sanic.cookies
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.setdefault
  kind: callable
  ns: sanic.cookies
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CookieJar.update
  kind: callable
  ns: sanic.cookies
  description: |-
    D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]
  summary: D
  signatures: null
  inherits_from: null
- name: CookieJar.values
  kind: method
  ns: sanic.cookies
  description: Deprecated in v24.3
  summary: Deprecated in v24
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.errorpages
  kind: module
  ns: null
  description: |-
    Sanic `provides a pattern
    <https://sanicframework.org/guide/best-practices/exceptions.html#using-sanic-exceptions>`_
    for providing a response when an exception occurs. However, if you do no handle
    an exception, it will provide a fallback. There are three fallback types:

    - HTML - *default*
    - Text
    - JSON

    Setting ``app.config.FALLBACK_ERROR_FORMAT = "auto"`` will enable a switch that
    will attempt to provide an appropriate response format based upon the
    request type.
  summary: Sanic `provides a pattern
  signatures: null
  inherits_from: null
- name: BaseRenderer
  kind: class
  ns: sanic.errorpages
  description: |-
    Base class that all renderers must inherit from.

    This class defines the structure for rendering objects, handling the core functionality that specific renderers may extend.

    Attributes:
        request (Request): The incoming request object that needs rendering.
        exception (Exception): Any exception that occurred and needs to be rendered.
        debug (bool): Flag indicating whether to render with debugging information.

    Methods:
        dumps: A static method that must be overridden by subclasses to define the specific rendering.

    Args:
        request (Request): The incoming request object that needs rendering.
        exception (Exception): Any exception that occurred and needs to be rendered.
        debug (bool): Flag indicating whether to render with debugging information.
  summary: Base class that all renderers must inherit from
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: debug
      default: null
      rest: false
    - type: BaseRenderer
      kind: return
  inherits_from: null
- name: BaseRenderer.dumps
  kind: callable
  ns: sanic.errorpages
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures: null
  inherits_from: null
- name: BaseRenderer.full
  kind: method
  ns: sanic.errorpages
  description: |-
    Provide a formatted message that has all details and is mean to be used primarily for debugging and non-production environments.

    Returns:
        HTTPResponse: The response object.
  summary: Provide a formatted message that has all details and is mean to be used primarily for debugging and non-production environments
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseRenderer.headers
  kind: property
  ns: sanic.errorpages
  description: The headers to be used for the response.
  summary: The headers to be used for the response
  signatures: null
  inherits_from: null
- name: BaseRenderer.minimal
  kind: method
  ns: sanic.errorpages
  description: |-
    Provide a formatted message that is meant to not show any sensitive data or details.

    This is the default fallback for production environments.

    Returns:
        HTTPResponse: The response object.
  summary: Provide a formatted message that is meant to not show any sensitive data or details
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseRenderer.render
  kind: method
  ns: sanic.errorpages
  description: |-
    Outputs the exception as a response.

    Returns:
        HTTPResponse: The response object.
  summary: Outputs the exception as a response
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseRenderer.status
  kind: property
  ns: sanic.errorpages
  description: The status code to be used for the response.
  summary: The status code to be used for the response
  signatures: null
  inherits_from: null
- name: BaseRenderer.text
  kind: property
  ns: sanic.errorpages
  description: The text to be used for the response.
  summary: The text to be used for the response
  signatures: null
  inherits_from: null
- name: BaseRenderer.title
  kind: property
  ns: sanic.errorpages
  description: The title to be used for the response.
  summary: The title to be used for the response
  signatures: null
  inherits_from: null
- name: CONFIG_BY_MIME
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_FORMAT
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ErrorPage
  kind: class
  ns: sanic.errorpages
  description: Page for displaying an error.
  summary: Page for displaying an error
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: debug
      default: null
      rest: false
    - kind: positional
      name: title
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exc
      default: null
      rest: false
    - type: ErrorPage
      kind: return
  inherits_from:
  - <class 'sanic.pages.base.BasePage'>
  - <class 'abc.ABC'>
- name: ErrorPage.CSS
  kind: property
  ns: sanic.errorpages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ErrorPage.HEADING
  kind: property
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ErrorPage.STYLE
  kind: property
  ns: sanic.errorpages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ErrorPage.STYLE_APPEND
  kind: property
  ns: sanic.errorpages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ErrorPage.TITLE
  kind: property
  ns: sanic.errorpages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ErrorPage.render
  kind: method
  ns: sanic.errorpages
  description: |-
    Renders the page.

    Returns:
        str: The rendered page.
  summary: Renders the page
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ErrorPage.style
  kind: property
  ns: sanic.errorpages
  description: |-
    Returns the CSS for the page.

    Returns:
        str: The CSS for the page.
  summary: Returns the CSS for the page
  signatures: null
  inherits_from: null
- name: FALLBACK_STATUS
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FALLBACK_TEXT
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTMLRenderer
  kind: class
  ns: sanic.errorpages
  description: |-
    Render an exception as HTML.

    The default fallback type.
  summary: Render an exception as HTML
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: debug
      default: null
      rest: false
    - type: HTMLRenderer
      kind: return
  inherits_from:
  - <class 'sanic.errorpages.BaseRenderer'>
- name: HTMLRenderer.dumps
  kind: callable
  ns: sanic.errorpages
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures: null
  inherits_from: null
- name: HTMLRenderer.full
  kind: method
  ns: sanic.errorpages
  description: |-
    Provide a formatted message that has all details and is mean to be used primarily for debugging and non-production environments.

    Returns:
        HTTPResponse: The response object.
  summary: Provide a formatted message that has all details and is mean to be used primarily for debugging and non-production environments
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTMLRenderer.headers
  kind: property
  ns: sanic.errorpages
  description: The headers to be used for the response.
  summary: The headers to be used for the response
  signatures: null
  inherits_from: null
- name: HTMLRenderer.minimal
  kind: method
  ns: sanic.errorpages
  description: |-
    Provide a formatted message that is meant to not show any sensitive data or details.

    This is the default fallback for production environments.

    Returns:
        HTTPResponse: The response object.
  summary: Provide a formatted message that is meant to not show any sensitive data or details
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTMLRenderer.render
  kind: method
  ns: sanic.errorpages
  description: |-
    Outputs the exception as a response.

    Returns:
        HTTPResponse: The response object.
  summary: Outputs the exception as a response
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTMLRenderer.status
  kind: property
  ns: sanic.errorpages
  description: The status code to be used for the response.
  summary: The status code to be used for the response
  signatures: null
  inherits_from: null
- name: HTMLRenderer.text
  kind: property
  ns: sanic.errorpages
  description: The text to be used for the response.
  summary: The text to be used for the response
  signatures: null
  inherits_from: null
- name: HTMLRenderer.title
  kind: property
  ns: sanic.errorpages
  description: The title to be used for the response.
  summary: The title to be used for the response
  signatures: null
  inherits_from: null
- name: JSON
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JSONRenderer
  kind: class
  ns: sanic.errorpages
  description: Render an exception as JSON.
  summary: Render an exception as JSON
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: debug
      default: null
      rest: false
    - type: JSONRenderer
      kind: return
  inherits_from:
  - <class 'sanic.errorpages.BaseRenderer'>
- name: JSONRenderer.dumps
  kind: callable
  ns: sanic.errorpages
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures: null
  inherits_from: null
- name: JSONRenderer.full
  kind: method
  ns: sanic.errorpages
  description: |-
    Provide a formatted message that has all details and is mean to be used primarily for debugging and non-production environments.

    Returns:
        HTTPResponse: The response object.
  summary: Provide a formatted message that has all details and is mean to be used primarily for debugging and non-production environments
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONRenderer.headers
  kind: property
  ns: sanic.errorpages
  description: The headers to be used for the response.
  summary: The headers to be used for the response
  signatures: null
  inherits_from: null
- name: JSONRenderer.minimal
  kind: method
  ns: sanic.errorpages
  description: |-
    Provide a formatted message that is meant to not show any sensitive data or details.

    This is the default fallback for production environments.

    Returns:
        HTTPResponse: The response object.
  summary: Provide a formatted message that is meant to not show any sensitive data or details
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONRenderer.render
  kind: method
  ns: sanic.errorpages
  description: |-
    Outputs the exception as a response.

    Returns:
        HTTPResponse: The response object.
  summary: Outputs the exception as a response
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONRenderer.status
  kind: property
  ns: sanic.errorpages
  description: The status code to be used for the response.
  summary: The status code to be used for the response
  signatures: null
  inherits_from: null
- name: JSONRenderer.text
  kind: property
  ns: sanic.errorpages
  description: The text to be used for the response.
  summary: The text to be used for the response
  signatures: null
  inherits_from: null
- name: JSONRenderer.title
  kind: property
  ns: sanic.errorpages
  description: The title to be used for the response.
  summary: The title to be used for the response
  signatures: null
  inherits_from: null
- name: MIME_BY_CONFIG
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RENDERERS_BY_CONTENT_TYPE
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RESPONSE_MAPPING
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: STATUS_CODES
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TextRenderer
  kind: class
  ns: sanic.errorpages
  description: Render an exception as plain text.
  summary: Render an exception as plain text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: debug
      default: null
      rest: false
    - type: TextRenderer
      kind: return
  inherits_from:
  - <class 'sanic.errorpages.BaseRenderer'>
- name: TextRenderer.OUTPUT_TEXT
  kind: property
  ns: sanic.errorpages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: TextRenderer.SPACER
  kind: property
  ns: sanic.errorpages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: TextRenderer.dumps
  kind: callable
  ns: sanic.errorpages
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures: null
  inherits_from: null
- name: TextRenderer.full
  kind: method
  ns: sanic.errorpages
  description: |-
    Provide a formatted message that has all details and is mean to be used primarily for debugging and non-production environments.

    Returns:
        HTTPResponse: The response object.
  summary: Provide a formatted message that has all details and is mean to be used primarily for debugging and non-production environments
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextRenderer.headers
  kind: property
  ns: sanic.errorpages
  description: The headers to be used for the response.
  summary: The headers to be used for the response
  signatures: null
  inherits_from: null
- name: TextRenderer.minimal
  kind: method
  ns: sanic.errorpages
  description: |-
    Provide a formatted message that is meant to not show any sensitive data or details.

    This is the default fallback for production environments.

    Returns:
        HTTPResponse: The response object.
  summary: Provide a formatted message that is meant to not show any sensitive data or details
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextRenderer.render
  kind: method
  ns: sanic.errorpages
  description: |-
    Outputs the exception as a response.

    Returns:
        HTTPResponse: The response object.
  summary: Outputs the exception as a response
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextRenderer.status
  kind: property
  ns: sanic.errorpages
  description: The status code to be used for the response.
  summary: The status code to be used for the response
  signatures: null
  inherits_from: null
- name: TextRenderer.text
  kind: property
  ns: sanic.errorpages
  description: The text to be used for the response.
  summary: The text to be used for the response
  signatures: null
  inherits_from: null
- name: TextRenderer.title
  kind: property
  ns: sanic.errorpages
  description: The title to be used for the response.
  summary: The title to be used for the response
  signatures: null
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: check_error_format
  kind: function
  ns: sanic.errorpages
  description: Check that the format is known.
  summary: Check that the format is known
  signatures:
  - - kind: positional
      name: format
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: deprecation
  kind: function
  ns: sanic.errorpages
  description: |-
    Add a deprecation notice

    Example when a feature is being removed. In this case, version
    should be AT LEAST next version + 2

        deprecation("Helpful message", 99.9)

    Example when a feature is deprecated but not being removed:

        deprecation("Helpful message", 0)

    :param message: The message of the notice
    :type message: str
    :param version: The version when the feature will be removed. If it is
      not being removed, then set version=0.
    :type version: float
  summary: Add a deprecation notice
  signatures:
  - - kind: positional
      name: message
      default: null
      rest: false
    - kind: positional
      name: version
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: dumps
  kind: callable
  ns: sanic.errorpages
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures: null
  inherits_from: null
- name: escape
  kind: function
  ns: sanic.errorpages
  description: Minimal HTML escaping, not for attribute values (unlike html.escape).
  summary: Minimal HTML escaping, not for attribute values (unlike html
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: exception_response
  kind: function
  ns: sanic.errorpages
  description: Render a response for the default FALLBACK exception handler.
  summary: Render a response for the default FALLBACK exception handler
  signatures:
  - - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: debug
      default: null
      rest: false
    - kind: positional
      name: fallback
      default: null
      rest: false
    - kind: positional
      name: base
      default: null
      rest: false
    - kind: positional
      name: renderer
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: extract_tb
  kind: function
  ns: sanic.errorpages
  description: |-
    Return a StackSummary object representing a list of
    pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a FrameSummary object
    containing attributes filename, lineno, name, and line
    representing the information that is usually printed for a stack
    trace.  The line is a string with leading and trailing
    whitespace stripped; if the source is not available it is None.
  summary: Return a StackSummary object representing a list of
  signatures:
  - - kind: positional
      name: tb
      default: null
      rest: false
    - kind: positional
      name: limit
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: guess_mime
  kind: function
  ns: sanic.errorpages
  description: Guess the MIME type for the response based upon the request.
  summary: Guess the MIME type for the response based upon the request
  signatures:
  - - kind: positional
      name: req
      default: null
      rest: false
    - kind: positional
      name: fallback
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: html
  kind: function
  ns: sanic.errorpages
  description: |-
    Returns response object with body in html format.

    Body should be a `str` or `bytes` like object, or an object with `__html__` or `_repr_html_`.

    Args:
        body (Union[str, bytes, HTMLProtocol]): Response data.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.

    Returns:
        HTTPResponse: A response object with body in html format.
  summary: Returns response object with body in html format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: json
  kind: function
  ns: sanic.errorpages
  description: |-
    Returns response object with body in json format.

    Args:
        body (Any): Response data to be serialized.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.
        content_type (str, optional): The content type (string) of the response. Defaults to `"application/json"`.
        dumps (Callable[..., str], optional): A custom json dumps function. Defaults to `None`.
        **kwargs (Any): Remaining arguments that are passed to the json encoder.

    Returns:
        JSONResponse: A response object with body in json format.
  summary: Returns response object with body in json format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: application/json
      rest: false
    - kind: positional
      name: dumps
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.errorpages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: text
  kind: function
  ns: sanic.errorpages
  description: |-
    Returns response object with body in text format.

    Args:
        body (str): Response data.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.
        content_type (str, optional): The content type (string) of the response. Defaults to `"text/plain; charset=utf-8"`.

    Returns:
        HTTPResponse: A response object with body in text format.

    Raises:
        TypeError: If the body is not a string.
  summary: Returns response object with body in text format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: text/plain; charset=utf-8
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.exceptions
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.exceptions
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPException
  kind: class
  ns: sanic.exceptions
  description: A base class for other exceptions and should not be called directly.
  summary: A base class for other exceptions and should not be called directly
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: HTTPException
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: HTTPException.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: HTTPException.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPException.headers
  kind: property
  ns: sanic.exceptions
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: HTTPException.message
  kind: property
  ns: sanic.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: HTTPException.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HTTPException.status_code
  kind: property
  ns: sanic.exceptions
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HTTPException.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidRangeType
  kind: class
  ns: sanic.exceptions
  description: |-
    416 Range Not Satisfiable

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 416 Range Not Satisfiable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - kind: positional
      name: content_range
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: InvalidRangeType
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.RangeNotSatisfiable'>
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InvalidRangeType.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidRangeType.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InvalidRangeType.headers
  kind: property
  ns: sanic.exceptions
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: InvalidRangeType.message
  kind: property
  ns: sanic.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: InvalidRangeType.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: InvalidRangeType.status_code
  kind: property
  ns: sanic.exceptions
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: InvalidRangeType.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidSignal
  kind: class
  ns: sanic.exceptions
  description: Exception raised when an invalid signal is sent.
  summary: Exception raised when an invalid signal is sent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - kind: positional
      name: status_code
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: InvalidSignal
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InvalidSignal.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidSignal.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InvalidSignal.headers
  kind: property
  ns: sanic.exceptions
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: InvalidSignal.message
  kind: property
  ns: sanic.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: InvalidSignal.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: InvalidSignal.status_code
  kind: property
  ns: sanic.exceptions
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: InvalidSignal.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: LoadFileException
  kind: class
  ns: sanic.exceptions
  description: Exception raised when a file cannot be loaded.
  summary: Exception raised when a file cannot be loaded
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - kind: positional
      name: status_code
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: LoadFileException
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: LoadFileException.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: LoadFileException.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LoadFileException.headers
  kind: property
  ns: sanic.exceptions
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: LoadFileException.message
  kind: property
  ns: sanic.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: LoadFileException.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: LoadFileException.status_code
  kind: property
  ns: sanic.exceptions
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: LoadFileException.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.exceptions
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PathLike
  kind: class
  ns: sanic.exceptions
  description: Abstract base class for implementing the file system path protocol.
  summary: Abstract base class for implementing the file system path protocol
  signatures:
  - - type: PathLike
      kind: return
  inherits_from:
  - <class 'abc.ABC'>
- name: PayloadTooLarge
  kind: class
  ns: sanic.exceptions
  description: |-
    413 Payload Too Large

    This is an internal exception thrown by Sanic and should not be used
    directly.

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 413 Payload Too Large
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: PayloadTooLarge
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PayloadTooLarge.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PayloadTooLarge.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PayloadTooLarge.headers
  kind: property
  ns: sanic.exceptions
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: PayloadTooLarge.message
  kind: property
  ns: sanic.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: PayloadTooLarge.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: PayloadTooLarge.status_code
  kind: property
  ns: sanic.exceptions
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: PayloadTooLarge.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PyFileError
  kind: class
  ns: sanic.exceptions
  description: |-
    Generic exception that will generate an HTTP response when raised in the context of a request lifecycle.

    Usually, it is best practice to use one of the more specific exceptions
    than this generic one. Even when trying to raise a 500, it is generally
    preferable to use `ServerError`.

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`,
            then the appropriate HTTP response status message will be used instead. Defaults to `None`.
        status_code (Optional[int], optional): The HTTP response code to send, if applicable. If `None`,
            then it will be 500. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed from the logs.
            Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.

    Examples:
        ```python
        raise SanicException(
            "Something went wrong",
            status_code=999,
            context={
                "info": "Some additional details to send to the client",
            },
            headers={
                "X-Foo": "bar"
            }
        )
        ```
  summary: Generic exception that will generate an HTTP response when raised in the context of a request lifecycle
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: file
      default: null
      rest: false
    - kind: positional
      name: status_code
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: PyFileError
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PyFileError.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PyFileError.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PyFileError.headers
  kind: property
  ns: sanic.exceptions
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: PyFileError.message
  kind: property
  ns: sanic.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: PyFileError.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: PyFileError.status_code
  kind: property
  ns: sanic.exceptions
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: PyFileError.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Range
  kind: class
  ns: sanic.exceptions
  description: |-
    Base class for protocol classes.

    Protocol classes are defined as::

        class Proto(Protocol):
            def meth(self) -> int:
                ...

    Such classes are primarily used with static type checkers that recognize
    structural subtyping (static duck-typing).

    For example::

        class C:
            def meth(self) -> int:
                return 0

        def func(x: Proto) -> int:
            return x.meth()

        func(C())  # Passes static type check

    See PEP 544 for details. Protocol classes decorated with
    @typing.runtime_checkable act as simple-minded runtime protocols that check
    only the presence of given attributes, ignoring their type signatures.
    Protocol classes can be generic, they are defined as::

        class GenProto(Protocol[T]):
            def meth(self) -> T:
                ...
  summary: Base class for protocol classes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: Range
      kind: return
  inherits_from:
  - <class 'typing.Protocol'>
  - <class 'typing.Generic'>
- name: RequestCancelled
  kind: class
  ns: sanic.exceptions
  description: The Future or Task was cancelled.
  summary: The Future or Task was cancelled
  signatures: null
  inherits_from:
  - <class 'asyncio.exceptions.CancelledError'>
  - <class 'BaseException'>
- name: RequestCancelled.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestCancelled.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RequestCancelled.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: RequestCancelled.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestTimeout
  kind: class
  ns: sanic.exceptions
  description: |-
    408 Request Timeout

    The Web server (running the Web site) thinks that there has been too
    long an interval of time between 1) the establishment of an IP
    connection (socket) between the client and the server and
    2) the receipt of any data on that socket, so the server has dropped
    the connection. The socket connection has actually been lost - the Web
    server has 'timed out' on that particular socket connection.

    This is an internal exception thrown by Sanic and should not be used
    directly.

    Args:
        message (Optional[Union[str, bytes]], optional): The message to be sent to the client. If `None`
            then the HTTP status 'Bad Request' will be sent. Defaults to `None`.
        quiet (Optional[bool], optional): When `True`, the error traceback will be suppressed
            from the logs. Defaults to `None`.
        context (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will be
            sent to the client upon exception. Defaults to `None`.
        extra (Optional[Dict[str, Any]], optional): Additional mapping of key/value data that will NOT be
            sent to the client when in PRODUCTION mode. Defaults to `None`.
        headers (Optional[Dict[str, Any]], optional): Additional headers that should be sent with the HTTP
            response. Defaults to `None`.
  summary: 408 Request Timeout
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: RequestTimeout
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.HTTPException'>
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: RequestTimeout.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestTimeout.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RequestTimeout.headers
  kind: property
  ns: sanic.exceptions
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: RequestTimeout.message
  kind: property
  ns: sanic.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: RequestTimeout.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: RequestTimeout.status_code
  kind: property
  ns: sanic.exceptions
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RequestTimeout.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: STATUS_CODES
  kind: const
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sequence
  kind: callable
  ns: sanic.exceptions
  description: A generic version of collections.abc.Sequence.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ServerKilled
  kind: class
  ns: sanic.exceptions
  description: Exception Sanic server uses when killing a server process for something unexpected happening.
  summary: Exception Sanic server uses when killing a server process for something unexpected happening
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ServerKilled.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ServerKilled.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ServerKilled.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ServerKilled.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.exceptions
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebsocketClosed
  kind: class
  ns: sanic.exceptions
  description: Exception raised when a websocket is closed.
  summary: Exception raised when a websocket is closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: None
      rest: false
    - kind: positional
      name: status_code
      default: None
      rest: false
    - name: quiet
      default: None
      rest: false
      kind: kw-only
    - name: context
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: WebsocketClosed
      kind: return
  inherits_from:
  - <class 'sanic.exceptions.SanicException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: WebsocketClosed.add_note
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: WebsocketClosed.args
  kind: property
  ns: sanic.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebsocketClosed.headers
  kind: property
  ns: sanic.exceptions
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: WebsocketClosed.message
  kind: property
  ns: sanic.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: WebsocketClosed.quiet
  kind: property
  ns: sanic.exceptions
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: WebsocketClosed.status_code
  kind: property
  ns: sanic.exceptions
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WebsocketClosed.with_traceback
  kind: callable
  ns: sanic.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: sanic.handlers
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ContentRangeHandler
  kind: class
  ns: sanic.handlers
  description: |-
    Parse and process the incoming request headers to extract the content range information.

    Args:
        request (Request): The incoming request object.
        stats (os.stat_result): The stats of the file being served.
  summary: Parse and process the incoming request headers to extract the content range information
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: stats
      default: null
      rest: false
    - type: ContentRangeHandler
      kind: return
  inherits_from:
  - <class 'sanic.models.protocol_types.Range'>
  - <class 'typing.Protocol'>
  - <class 'typing.Generic'>
- name: ContentRangeHandler.end
  kind: property
  ns: sanic.handlers
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ContentRangeHandler.headers
  kind: property
  ns: sanic.handlers
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ContentRangeHandler.size
  kind: property
  ns: sanic.handlers
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ContentRangeHandler.start
  kind: property
  ns: sanic.handlers
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ContentRangeHandler.total
  kind: property
  ns: sanic.handlers
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DirectoryHandler
  kind: class
  ns: sanic.handlers
  description: |-
    Serve files from a directory.

    Args:
        uri (str): The URI to serve the files at.
        directory (Path): The directory to serve files from.
        directory_view (bool): Whether to show a directory listing or not.
        index (Optional[Union[str, Sequence[str]]]): The index file(s) to
            serve if the directory is requested. Defaults to None.
  summary: Serve files from a directory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: directory
      default: null
      rest: false
    - kind: positional
      name: directory_view
      default: 'False'
      rest: false
    - kind: positional
      name: index
      default: None
      rest: false
    - type: DirectoryHandler
      kind: return
  inherits_from: null
- name: DirectoryHandler.handle
  kind: method
  ns: sanic.handlers
  description: |-
    Handle the request.

    Args:
        request (Request): The incoming request object.
        path (str): The path to the file to serve.

    Raises:
        NotFound: If the file is not found.
        IsADirectoryError: If the path is a directory and directory_view is False.

    Returns:
        Response: The response object.
  summary: Handle the request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.headers
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AcceptList
  kind: class
  ns: sanic.headers
  description: |-
    A list of media types, as used in the Accept header.

    The Accept header entries are listed in order of preference, starting
    with the most preferred. This class is a list of `MediaType` objects,
    that encapsulate also the q value or any other parameters.

    Two separate methods are provided for searching the list:
    - 'match' for finding the most preferred match (wildcards supported)
    -  operator 'in' for checking explicit matches (wildcards as literals)

    Args:
        *args (MediaType): Any number of MediaType objects.
  summary: A list of media types, as used in the Accept header
  signatures:
  - - kind: positional
      name: iterable
      default: ()
      rest: false
    - type: AcceptList
      kind: return
  inherits_from:
  - <class 'list'>
- name: AcceptList.append
  kind: callable
  ns: sanic.headers
  description: Append object to the end of the list.
  summary: Append object to the end of the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.clear
  kind: callable
  ns: sanic.headers
  description: Remove all items from list.
  summary: Remove all items from list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.copy
  kind: callable
  ns: sanic.headers
  description: Return a shallow copy of the list.
  summary: Return a shallow copy of the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.count
  kind: callable
  ns: sanic.headers
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.extend
  kind: callable
  ns: sanic.headers
  description: Extend list by appending elements from the iterable.
  summary: Extend list by appending elements from the iterable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.index
  kind: callable
  ns: sanic.headers
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.insert
  kind: callable
  ns: sanic.headers
  description: Insert object before index.
  summary: Insert object before index
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: null
      rest: false
    - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.match
  kind: method
  ns: sanic.headers
  description: |-
    Find a media type accepted by the client.

    This method can be used to find which of the media types requested by
    the client is most preferred against the ones given as arguments.

    The ordering of preference is set by:
    1. The order set by RFC 7231, s. 5.3.2, giving a higher priority
        to q values and more specific type definitions,
    2. The order of the arguments (first is most preferred), and
    3. The first matching entry on the Accept header.

    Wildcards are matched both ways. A match is usually found, as the
    Accept headers typically include `*/*`, in particular if the header
    is missing, is not manually set, or if the client is a browser.

    Note: the returned object behaves as a string of the mime argument
    that matched, and is empty/falsy if no match was found. The matched
    header entry `MediaType` or `None` is available as the `m` attribute.

    Args:
        mimes (List[str]): Any MIME types to search for in order of preference.
        accept_wildcards (bool): Match Accept entries with wildcards in them.

    Returns:
        Match: A match object with the mime string and the MediaType object.
  summary: Find a media type accepted by the client
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: accept_wildcards
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.pop
  kind: callable
  ns: sanic.headers
  description: |-
    Remove and return item at index (default last).

    Raises IndexError if list is empty or index is out of range.
  summary: Remove and return item at index (default last)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.remove
  kind: callable
  ns: sanic.headers
  description: |-
    Remove first occurrence of value.

    Raises ValueError if the value is not present.
  summary: Remove first occurrence of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.reverse
  kind: callable
  ns: sanic.headers
  description: Reverse *IN PLACE*.
  summary: Reverse *IN PLACE*
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AcceptList.sort
  kind: callable
  ns: sanic.headers
  description: |-
    Sort the list in ascending order and return None.

    The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
    order of two equal elements is maintained).

    If a key function is given, apply it once to each list item and sort them,
    ascending or descending, according to their function values.

    The reverse flag can be set to sort in descending order.
  summary: Sort the list in ascending order and return None
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: key
      default: None
      rest: false
      kind: kw-only
    - name: reverse
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.headers
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HeaderBytesIterable
  kind: callable
  ns: sanic.headers
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HeaderIterable
  kind: callable
  ns: sanic.headers
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Iterable
  kind: callable
  ns: sanic.headers
  description: A generic version of collections.abc.Iterable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.headers
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Matched
  kind: class
  ns: sanic.headers
  description: |-
    A matching result of a MIME string against a header.

    This class is a representation of a matching result of a MIME string
    against a header. It encapsulates the MIME string, the header, and
    provides methods for matching against other MIME strings.

    Args:
        mime (str): The MIME string to match.
        header (MediaType): The header to match against, if any.
  summary: A matching result of a MIME string against a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mime
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: Matched
      kind: return
  inherits_from: null
- name: Matched.match
  kind: method
  ns: sanic.headers
  description: |-
    Match this MIME string against another MIME string.

    Check if this MIME string matches the given MIME string. Wildcards are supported both ways on both type and subtype.

    Args:
        other (str): A MIME string to match.

    Returns:
        Matched: Returns `self` if the MIME strings are compatible.
        None: Returns `None` if the MIME strings are not compatible.
  summary: Match this MIME string against another MIME string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: other
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Matched.parse
  kind: function
  ns: sanic.headers
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: raw
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MediaType
  kind: class
  ns: sanic.headers
  description: |-
    A media type, as used in the Accept header.

    This class is a representation of a media type, as used in the Accept
    header. It encapsulates the type, subtype and any parameters, and
    provides methods for matching against other media types.

    Two separate methods are provided for searching the list:
    - 'match' for finding the most preferred match (wildcards supported)
    -  operator 'in' for checking explicit matches (wildcards as literals)

    Args:
        type_ (str): The type of the media type.
        subtype (str): The subtype of the media type.
        **params (str): Any parameters for the media type.
  summary: A media type, as used in the Accept header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: type_
      default: null
      rest: false
    - kind: positional
      name: subtype
      default: null
      rest: false
    - type: MediaType
      kind: return
  inherits_from: null
- name: MediaType.has_wildcard
  kind: property
  ns: sanic.headers
  description: |-
    Return True if this media type has a wildcard in it.

    Returns:
        bool: True if this media type has a wildcard in it.
  summary: Return True if this media type has a wildcard in it
  signatures: null
  inherits_from: null
- name: MediaType.match
  kind: method
  ns: sanic.headers
  description: |-
    Match this media type against another media type.

    Check if this media type matches the given mime type/subtype.
    Wildcards are supported both ways on both type and subtype.
    If mime contains a semicolon, optionally followed by parameters,
    the parameters of the two media types must match exactly.

    .. note::
        Use the `==` operator instead to check for literal matches
        without expanding wildcards.


    Args:
        media_type (str): A type/subtype string to match.

    Returns:
        MediaType: Returns `self` if the media types are compatible.
        None: Returns `None` if the media types are not compatible.
  summary: Match this media type against another media type
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mime_with_params
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.headers
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Options
  kind: callable
  ns: sanic.headers
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: OptionsIterable
  kind: callable
  ns: sanic.headers
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: STATUS_CODES
  kind: const
  ns: sanic.headers
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.headers
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Tuple
  kind: callable
  ns: sanic.headers
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.headers
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.headers
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: format_http1_response
  kind: function
  ns: sanic.headers
  description: |-
    Format a HTTP/1.1 response header.

    Args:
        status (int): The HTTP status code.
        headers (HeaderBytesIterable): An iterable of header tuples.

    Returns:
        bytes: The formatted response header.
  summary: Format a HTTP/1
  signatures:
  - - kind: positional
      name: status
      default: null
      rest: false
    - kind: positional
      name: headers
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: fwd_normalize
  kind: function
  ns: sanic.headers
  description: |-
    Normalize and convert values extracted from forwarded headers.

    Args:
        fwd (OptionsIterable): An iterable of key-value pairs.

    Returns:
        Options: A dict of normalized key-value pairs.
  summary: Normalize and convert values extracted from forwarded headers
  signatures:
  - - kind: positional
      name: fwd
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: fwd_normalize_address
  kind: function
  ns: sanic.headers
  description: |-
    Normalize address fields of proxy headers.

    Args:
        addr (str): An address string.

    Returns:
        str: A normalized address string.
  summary: Normalize address fields of proxy headers
  signatures:
  - - kind: positional
      name: addr
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: parse_accept
  kind: function
  ns: sanic.headers
  description: |-
    Parse an Accept header and order the acceptable media types according to RFC 7231, s. 5.3.2

    https://datatracker.ietf.org/doc/html/rfc7231#section-5.3.2

    Args:
        accept (str): The Accept header value to parse.

    Returns:
        AcceptList: A list of MediaType objects, ordered by preference.

    Raises:
        InvalidHeader: If the header value is invalid.
  summary: Parse an Accept header and order the acceptable media types according to RFC 7231, s
  signatures:
  - - kind: positional
      name: accept
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: parse_content_header
  kind: function
  ns: sanic.headers
  description: "Parse content-type and content-disposition header values.\n\n    E.g. `form-data; name=upload; filename=\"file.txt\"` to\n    ('form-data', {'name': 'upload', 'filename': 'file.txt'})\n\n    Mostly identical to cgi.parse_header and werkzeug.parse_options_header\n    but runs faster and handles special characters better.\n\n    Unescapes %22 to `\"` and %0D%0A to `\n` in field values.\n\n    Args:\n        value (str): The header value to parse.\n\n    Returns:\n        Tuple[str, Options]: The header value and a dict of options.\n    "
  summary: Parse content-type and content-disposition header values
  signatures:
  - - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: parse_credentials
  kind: function
  ns: sanic.headers
  description: |-
    Parses any header with the aim to retrieve any credentials from it.

    Args:
        header (Optional[str]): The header to parse.
        prefixes (Optional[Union[List, Tuple, Set]], optional): The prefixes to look for. Defaults to None.

    Returns:
        Tuple[Optional[str], Optional[str]]: The prefix and the credentials.
  summary: Parses any header with the aim to retrieve any credentials from it
  signatures:
  - - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: prefixes
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: parse_forwarded
  kind: function
  ns: sanic.headers
  description: |-
    Parse RFC 7239 Forwarded headers.
    The value of `by` or `secret` must match `config.FORWARDED_SECRET`
    :return: dict with keys and values, or None if nothing matched
  summary: Parse RFC 7239 Forwarded headers
  signatures:
  - - kind: positional
      name: headers
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: parse_host
  kind: function
  ns: sanic.headers
  description: |-
    Split host:port into hostname and port.

    Args:
        host (str): A host string.

    Returns:
        Tuple[Optional[str], Optional[int]]: A tuple of hostname and port.
  summary: Split host:port into hostname and port
  signatures:
  - - kind: positional
      name: host
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: parse_xforwarded
  kind: function
  ns: sanic.headers
  description: Parse traditional proxy headers.
  summary: Parse traditional proxy headers
  signatures:
  - - kind: positional
      name: headers
      default: null
      rest: false
    - kind: positional
      name: config
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: unquote
  kind: function
  ns: sanic.headers
  description: |-
    Replace %xx escapes by their single-character equivalent. The optional
    encoding and errors parameters specify how to decode percent-encoded
    sequences into Unicode characters, as accepted by the bytes.decode()
    method.
    By default, percent-encoded sequences are decoded with UTF-8, and invalid
    sequences are replaced by a placeholder character.

    unquote('abc%20def') -> 'abc def'.
  summary: Replace %xx escapes by their single-character equivalent
  signatures:
  - - kind: positional
      name: string
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: replace
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.helpers
  kind: module
  ns: null
  description: Defines basics of HTTP standard.
  summary: Defines basics of HTTP standard
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.helpers
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: STATUS_CODES
  kind: const
  ns: sanic.helpers
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: has_message_body
  kind: function
  ns: sanic.helpers
  description: |-
    According to the following RFC message body and length SHOULD NOT
    be included in responses status 1XX, 204 and 304.
    https://tools.ietf.org/html/rfc2616#section-4.4
    https://tools.ietf.org/html/rfc2616#section-4.3
  summary: According to the following RFC message body and length SHOULD NOT
  signatures:
  - - kind: positional
      name: status
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: import_module
  kind: function
  ns: sanic.helpers
  description: |-
    Import a module.

    The 'package' argument is required when performing a relative import. It
    specifies the package to use as the anchor point from which to resolve the
    relative import to an absolute import.
  summary: Import a module
  signatures:
  - - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: package
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: import_string
  kind: function
  ns: sanic.helpers
  description: |-
    import a module or class by string path.

    :module_name: str with path of module or path to import and
    instantiate a class
    :returns: a module object or one instance from class if
    module_name is a valid path to class
  summary: import a module or class by string path
  signatures:
  - - kind: positional
      name: module_name
      default: null
      rest: false
    - kind: positional
      name: package
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: is_atty
  kind: function
  ns: sanic.helpers
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: is_entity_header
  kind: function
  ns: sanic.helpers
  description: Checks if the given header is an Entity Header
  summary: Checks if the given header is an Entity Header
  signatures:
  - - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: is_hop_by_hop_header
  kind: function
  ns: sanic.helpers
  description: Checks if the given header is a Hop By Hop header
  summary: Checks if the given header is a Hop By Hop header
  signatures:
  - - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ismodule
  kind: function
  ns: sanic.helpers
  description: |-
    Return true if the object is a module.

    Module objects provide these attributes:
        __cached__      pathname to byte compiled file
        __doc__         documentation string
        __file__        filename (missing for built-in modules)
  summary: Return true if the object is a module
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.http
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http3
  kind: class
  ns: sanic.http
  description: Internal helper for managing the HTTP/3 request/response cycle
  summary: Internal helper for managing the HTTP/3 request/response cycle
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol
      default: null
      rest: false
    - kind: positional
      name: transmit
      default: null
      rest: false
    - type: Http3
      kind: return
  inherits_from: null
- name: Http3.get_or_make_receiver
  kind: method
  ns: sanic.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http3.get_receiver_by_stream_id
  kind: method
  ns: sanic.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: stream_id
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http3.http_event_received
  kind: method
  ns: sanic.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.log
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Colors
  kind: class
  ns: sanic.log
  description: Enum where members are also (and must be) strings
  summary: Enum where members are also (and must be) strings
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Colors
      kind: return
  inherits_from:
  - <enum 'StrEnum'>
  - <class 'str'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: Colors.BLUE
  kind: property
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Colors.BOLD
  kind: property
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Colors.END
  kind: property
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Colors.GREEN
  kind: property
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Colors.PURPLE
  kind: property
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Colors.RED
  kind: property
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Colors.SANIC
  kind: property
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Colors.YELLOW
  kind: property
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Colors.capitalize
  kind: callable
  ns: sanic.log
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.casefold
  kind: callable
  ns: sanic.log
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.center
  kind: callable
  ns: sanic.log
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.count
  kind: callable
  ns: sanic.log
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: Colors.encode
  kind: callable
  ns: sanic.log
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.endswith
  kind: callable
  ns: sanic.log
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: Colors.expandtabs
  kind: callable
  ns: sanic.log
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.find
  kind: callable
  ns: sanic.log
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: Colors.format
  kind: callable
  ns: sanic.log
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: Colors.format_map
  kind: callable
  ns: sanic.log
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: Colors.index
  kind: callable
  ns: sanic.log
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: Colors.isalnum
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.isalpha
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.isascii
  kind: callable
  ns: sanic.log
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.isdecimal
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.isdigit
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.isidentifier
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.islower
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.isnumeric
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.isprintable
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.isspace
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.istitle
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.isupper
  kind: callable
  ns: sanic.log
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.join
  kind: callable
  ns: sanic.log
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.ljust
  kind: callable
  ns: sanic.log
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.lower
  kind: callable
  ns: sanic.log
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.lstrip
  kind: callable
  ns: sanic.log
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.partition
  kind: callable
  ns: sanic.log
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.removeprefix
  kind: callable
  ns: sanic.log
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.removesuffix
  kind: callable
  ns: sanic.log
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.replace
  kind: callable
  ns: sanic.log
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.rfind
  kind: callable
  ns: sanic.log
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: Colors.rindex
  kind: callable
  ns: sanic.log
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: Colors.rjust
  kind: callable
  ns: sanic.log
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.rpartition
  kind: callable
  ns: sanic.log
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.rsplit
  kind: callable
  ns: sanic.log
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.rstrip
  kind: callable
  ns: sanic.log
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.split
  kind: callable
  ns: sanic.log
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.splitlines
  kind: callable
  ns: sanic.log
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.startswith
  kind: callable
  ns: sanic.log
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: Colors.strip
  kind: callable
  ns: sanic.log
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.swapcase
  kind: callable
  ns: sanic.log
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.title
  kind: callable
  ns: sanic.log
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.translate
  kind: callable
  ns: sanic.log
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.upper
  kind: callable
  ns: sanic.log
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Colors.zfill
  kind: callable
  ns: sanic.log
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.log
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LOGGING_CONFIG_DEFAULTS
  kind: const
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TYPE_CHECKING
  kind: const
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: access_logger
  kind: const
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: deprecation
  kind: function
  ns: sanic.log
  description: |-
    Add a deprecation notice

    Example when a feature is being removed. In this case, version
    should be AT LEAST next version + 2

        deprecation("Helpful message", 99.9)

    Example when a feature is deprecated but not being removed:

        deprecation("Helpful message", 0)

    :param message: The message of the notice
    :type message: str
    :param version: The version when the feature will be removed. If it is
      not being removed, then set version=0.
    :type version: float
  summary: Add a deprecation notice
  signatures:
  - - kind: positional
      name: message
      default: null
      rest: false
    - kind: positional
      name: version
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: is_atty
  kind: function
  ns: sanic.log
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: server_logger
  kind: const
  ns: sanic.log
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.middleware
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Deque
  kind: callable
  ns: sanic.middleware
  description: A generic version of collections.deque.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareType
  kind: callable
  ns: sanic.middleware
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sequence
  kind: callable
  ns: sanic.middleware
  description: A generic version of collections.abc.Sequence.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.middleware
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.middleware
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: count
  kind: class
  ns: sanic.middleware
  description: |-
    Return a count object whose .__next__() method returns consecutive values.

    Equivalent to:
        def count(firstval=0, step=1):
            x = firstval
            while 1:
                yield x
                x += step
  summary: 'Return a count object whose '
  signatures:
  - - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: step
      default: '1'
      rest: false
    - type: count
      kind: return
  inherits_from: null
- name: sanic.mixins
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: base
  kind: module
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseMixin
  kind: class
  ns: sanic.mixins
  description: Base class for some other mixins.
  summary: Base class for some other mixins
  signatures:
  - - type: BaseMixin
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.mixins
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: exceptions
  kind: module
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.mixins
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.mixins
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Type
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to builtins.type.

    builtins.type or typing.Type can be used to annotate class objects.
    For example, suppose we have the following classes::

        class User: ...  # Abstract base for User classes
        class BasicUser(User): ...
        class ProUser(User): ...
        class TeamUser(User): ...

    And a function that takes a class argument that's a subclass of
    User and returns an instance of the corresponding class::

        U = TypeVar('U', bound=User)
        def new_user(user_class: Type[U]) -> U:
            user = user_class()
            # (Here we could write the user object to a database)
            return user

        joe = new_user(BasicUser)

    At this point the type checker knows that joe has type BasicUser.
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.mixins
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: listeners
  kind: module
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.mixins
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerType
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.mixins
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.mixins
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: cast
  kind: function
  ns: sanic.mixins
  description: |-
    Cast a value to a type.

    This returns the value unchanged.  To the type checker this
    signals that the return value has the designated type, but at
    runtime we intentionally don't check anything (we want this
    to be as fast as possible).
  summary: Cast a value to a type
  signatures:
  - - kind: positional
      name: typ
      default: null
      rest: false
    - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: overload
  kind: function
  ns: sanic.mixins
  description: |-
    Decorator for overloaded functions/methods.

    In a stub file, place two or more stub definitions for the same
    function in a row, each decorated with @overload.

    For example::

        @overload
        def utf8(value: None) -> None: ...
        @overload
        def utf8(value: bytes) -> bytes: ...
        @overload
        def utf8(value: str) -> bytes: ...

    In a non-stub file (i.e. a regular .py file), do the same but
    follow it with an implementation.  The implementation should *not*
    be decorated with @overload::

        @overload
        def utf8(value: None) -> None: ...
        @overload
        def utf8(value: bytes) -> bytes: ...
        @overload
        def utf8(value: str) -> bytes: ...
        def utf8(value):
            ...  # implementation goes here

    The overloads for a function can be retrieved at runtime using the
    get_overloads() function.
  summary: Decorator for overloaded functions/methods
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: middleware
  kind: module
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.mixins
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareType
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.mixins
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: attrgetter
  kind: class
  ns: sanic.mixins
  description: |-
    attrgetter(attr, ...) --> attrgetter object

    Return a callable object that fetches the given attribute(s) from its operand.
    After f = attrgetter('name'), the call f(r) returns r.name.
    After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
    After h = attrgetter('name.first', 'name.last'), the call h(r) returns
    (r.name.first, r.name.last).
  summary: 'attrgetter(attr, '
  signatures: null
  inherits_from: null
- name: overload
  kind: function
  ns: sanic.mixins
  description: |-
    Decorator for overloaded functions/methods.

    In a stub file, place two or more stub definitions for the same
    function in a row, each decorated with @overload.

    For example::

        @overload
        def utf8(value: None) -> None: ...
        @overload
        def utf8(value: bytes) -> bytes: ...
        @overload
        def utf8(value: str) -> bytes: ...

    In a non-stub file (i.e. a regular .py file), do the same but
    follow it with an implementation.  The implementation should *not*
    be decorated with @overload::

        @overload
        def utf8(value: None) -> None: ...
        @overload
        def utf8(value: bytes) -> bytes: ...
        @overload
        def utf8(value: str) -> bytes: ...
        def utf8(value):
            ...  # implementation goes here

    The overloads for a function can be retrieved at runtime using the
    get_overloads() function.
  summary: Decorator for overloaded functions/methods
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: routes
  kind: module
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.mixins
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTP_METHODS
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HashableDict
  kind: class
  ns: sanic.mixins
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from:
  - <class 'dict'>
- name: HashableDict.clear
  kind: callable
  ns: sanic.mixins
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: HashableDict.copy
  kind: callable
  ns: sanic.mixins
  description: D.copy() -> a shallow copy of D
  summary: D
  signatures: null
  inherits_from: null
- name: HashableDict.get
  kind: callable
  ns: sanic.mixins
  description: Return the value for key if key is in the dictionary, else default.
  summary: Return the value for key if key is in the dictionary, else default
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HashableDict.items
  kind: callable
  ns: sanic.mixins
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures: null
  inherits_from: null
- name: HashableDict.keys
  kind: callable
  ns: sanic.mixins
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: HashableDict.pop
  kind: callable
  ns: sanic.mixins
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures: null
  inherits_from: null
- name: HashableDict.popitem
  kind: callable
  ns: sanic.mixins
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HashableDict.setdefault
  kind: callable
  ns: sanic.mixins
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HashableDict.update
  kind: callable
  ns: sanic.mixins
  description: |-
    D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]
  summary: D
  signatures: null
  inherits_from: null
- name: HashableDict.values
  kind: callable
  ns: sanic.mixins
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures: null
  inherits_from: null
- name: Iterable
  kind: callable
  ns: sanic.mixins
  description: A generic version of collections.abc.Iterable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.mixins
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NodeVisitor
  kind: class
  ns: sanic.mixins
  description: |-
    A node visitor base class that walks the abstract syntax tree and calls a
    visitor function for every node found.  This function may return a value
    which is forwarded by the `visit` method.

    This class is meant to be subclassed, with the subclass adding visitor
    methods.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `visit` method.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.

    Don't use the `NodeVisitor` if you want to apply changes to nodes during
    traversing.  For this a special visitor exists (`NodeTransformer`) that
    allows modifications.
  summary: A node visitor base class that walks the abstract syntax tree and calls a
  signatures:
  - - type: NodeVisitor
      kind: return
  inherits_from: null
- name: NodeVisitor.generic_visit
  kind: method
  ns: sanic.mixins
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: node
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NodeVisitor.visit
  kind: method
  ns: sanic.mixins
  description: Visit a node.
  summary: Visit a node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: node
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NodeVisitor.visit_Constant
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: node
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.mixins
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RESPONSE_MAPPING
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Return
  kind: class
  ns: sanic.mixins
  description: Return(expr? value)
  summary: Return(expr? value)
  signatures: null
  inherits_from:
  - <class 'ast.stmt'>
  - <class 'ast.AST'>
- name: Return.end_col_offset
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Return.end_lineno
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Return.value
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RouteHandler
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteWrapper
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.mixins
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Tuple
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.mixins
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: cast
  kind: function
  ns: sanic.mixins
  description: |-
    Cast a value to a type.

    This returns the value unchanged.  To the type checker this
    signals that the return value has the designated type, but at
    runtime we intentionally don't check anything (we want this
    to be as fast as possible).
  summary: Cast a value to a type
  signatures:
  - - kind: positional
      name: typ
      default: null
      rest: false
    - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: dedent
  kind: function
  ns: sanic.mixins
  description: |-
    Remove any common leading whitespace from every line in `text`.

    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.

    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines "  hello" and "\thello" are
    considered to have no common leading whitespace.

    Entirely blank lines are normalized to a newline character.
  summary: Remove any common leading whitespace from every line in `text`
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: getsource
  kind: function
  ns: sanic.mixins
  description: |-
    Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    OSError is raised if the source code cannot be retrieved.
  summary: Return the text of the source code for an object
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: parse
  kind: function
  ns: sanic.mixins
  description: |-
    Parse the source into an AST node.
    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
    Pass type_comments=True to get back type comments where the syntax allows.
  summary: Parse the source into an AST node
  signatures:
  - - kind: positional
      name: source
      default: null
      rest: false
    - kind: positional
      name: filename
      default: <unknown>
      rest: false
    - kind: positional
      name: mode
      default: exec
      rest: false
    - name: type_comments
      default: 'False'
      rest: false
      kind: kw-only
    - name: feature_version
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: signature
  kind: function
  ns: sanic.mixins
  description: Get a signature object for the passed callable.
  summary: Get a signature object for the passed callable
  signatures:
  - - kind: positional
      name: obj
      default: null
      rest: false
    - name: follow_wrapped
      default: 'True'
      rest: false
      kind: kw-only
    - name: globals
      default: None
      rest: false
      kind: kw-only
    - name: locals
      default: None
      rest: false
      kind: kw-only
    - name: eval_str
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: signals
  kind: module
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Coroutine
  kind: callable
  ns: sanic.mixins
  description: A generic version of collections.abc.Coroutine.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.mixins
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.mixins
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.mixins
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalHandler
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.mixins
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: startup
  kind: module
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AppLoader
  kind: class
  ns: sanic.mixins
  description: |-
    A helper to load application instances.

    Generally used by the worker to load the application instance.

    See [Dynamic Applications](/en/guide/deployment/app-loader) for information on when you may need to use this.

    Args:
        module_input (str): The module to load the application from.
        as_factory (bool): Whether the application is a factory.
        as_simple (bool): Whether the application is a simple server.
        args (Any): Arguments to pass to the application factory.
        factory (Callable[[], SanicApp]): A callable that returns a Sanic application instance.
  summary: A helper to load application instances
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: module_input
      default: null
      rest: false
    - kind: positional
      name: as_factory
      default: 'False'
      rest: false
    - kind: positional
      name: as_simple
      default: 'False'
      rest: false
    - kind: positional
      name: args
      default: None
      rest: false
    - kind: positional
      name: factory
      default: None
      rest: false
    - type: AppLoader
      kind: return
  inherits_from: null
- name: AppLoader.load
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext
  kind: class
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - type: BaseContext
      kind: return
  inherits_from: null
- name: BaseContext.Array
  kind: method
  ns: sanic.mixins
  description: Returns a synchronized shared array
  summary: Returns a synchronized shared array
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: typecode_or_type
      default: null
      rest: false
    - kind: positional
      name: size_or_initializer
      default: null
      rest: false
    - name: lock
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.AuthenticationError
  kind: class
  ns: sanic.mixins
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'multiprocessing.context.ProcessError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BaseContext.AuthenticationError.add_note
  kind: callable
  ns: sanic.mixins
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseContext.AuthenticationError.args
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseContext.AuthenticationError.with_traceback
  kind: callable
  ns: sanic.mixins
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseContext.Barrier
  kind: method
  ns: sanic.mixins
  description: Returns a barrier object
  summary: Returns a barrier object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: parties
      default: null
      rest: false
    - kind: positional
      name: action
      default: None
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.BoundedSemaphore
  kind: method
  ns: sanic.mixins
  description: Returns a bounded semaphore object
  summary: Returns a bounded semaphore object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: '1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.BufferTooShort
  kind: class
  ns: sanic.mixins
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'multiprocessing.context.ProcessError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BaseContext.BufferTooShort.add_note
  kind: callable
  ns: sanic.mixins
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseContext.BufferTooShort.args
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseContext.BufferTooShort.with_traceback
  kind: callable
  ns: sanic.mixins
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseContext.Condition
  kind: method
  ns: sanic.mixins
  description: Returns a condition object
  summary: Returns a condition object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lock
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.Event
  kind: method
  ns: sanic.mixins
  description: Returns an event object
  summary: Returns an event object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.JoinableQueue
  kind: method
  ns: sanic.mixins
  description: Returns a queue object
  summary: Returns a queue object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: maxsize
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.Lock
  kind: method
  ns: sanic.mixins
  description: Returns a non-recursive lock object
  summary: Returns a non-recursive lock object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.Manager
  kind: method
  ns: sanic.mixins
  description: |-
    Returns a manager associated with a running server process

    The managers methods such as `Lock()`, `Condition()` and `Queue()`
    can be used to create shared objects.
  summary: Returns a manager associated with a running server process
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.Pipe
  kind: method
  ns: sanic.mixins
  description: Returns two connection object connected by a pipe
  summary: Returns two connection object connected by a pipe
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: duplex
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.Pool
  kind: method
  ns: sanic.mixins
  description: Returns a process pool object
  summary: Returns a process pool object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: processes
      default: None
      rest: false
    - kind: positional
      name: initializer
      default: None
      rest: false
    - kind: positional
      name: initargs
      default: ()
      rest: false
    - kind: positional
      name: maxtasksperchild
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.ProcessError
  kind: class
  ns: sanic.mixins
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BaseContext.ProcessError.add_note
  kind: callable
  ns: sanic.mixins
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseContext.ProcessError.args
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseContext.ProcessError.with_traceback
  kind: callable
  ns: sanic.mixins
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseContext.Queue
  kind: method
  ns: sanic.mixins
  description: Returns a queue object
  summary: Returns a queue object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: maxsize
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.RLock
  kind: method
  ns: sanic.mixins
  description: Returns a recursive lock object
  summary: Returns a recursive lock object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.RawArray
  kind: method
  ns: sanic.mixins
  description: Returns a shared array
  summary: Returns a shared array
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: typecode_or_type
      default: null
      rest: false
    - kind: positional
      name: size_or_initializer
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.RawValue
  kind: method
  ns: sanic.mixins
  description: Returns a shared object
  summary: Returns a shared object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: typecode_or_type
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.Semaphore
  kind: method
  ns: sanic.mixins
  description: Returns a semaphore object
  summary: Returns a semaphore object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: '1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.SimpleQueue
  kind: method
  ns: sanic.mixins
  description: Returns a queue object
  summary: Returns a queue object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.TimeoutError
  kind: class
  ns: sanic.mixins
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'multiprocessing.context.ProcessError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BaseContext.TimeoutError.add_note
  kind: callable
  ns: sanic.mixins
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseContext.TimeoutError.args
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseContext.TimeoutError.with_traceback
  kind: callable
  ns: sanic.mixins
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseContext.Value
  kind: method
  ns: sanic.mixins
  description: Returns a synchronized shared object
  summary: Returns a synchronized shared object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: typecode_or_type
      default: null
      rest: false
    - name: lock
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.active_children
  kind: method
  ns: sanic.mixins
  description: Return list of process objects corresponding to live child processes
  summary: Return list of process objects corresponding to live child processes
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.allow_connection_pickling
  kind: method
  ns: sanic.mixins
  description: |-
    Install support for sending connections and sockets
    between processes
  summary: Install support for sending connections and sockets
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.cpu_count
  kind: method
  ns: sanic.mixins
  description: Returns the number of CPUs in the system
  summary: Returns the number of CPUs in the system
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.current_process
  kind: method
  ns: sanic.mixins
  description: Return process object representing the current process
  summary: Return process object representing the current process
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.freeze_support
  kind: method
  ns: sanic.mixins
  description: |-
    Check whether this is a fake forked process in a frozen executable.
    If so then run code specified by commandline and exit.
  summary: Check whether this is a fake forked process in a frozen executable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.get_context
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.get_logger
  kind: method
  ns: sanic.mixins
  description: |-
    Return package logger -- if it does not already exist then
    it is created.
  summary: Return package logger -- if it does not already exist then
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.get_start_method
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: allow_none
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.log_to_stderr
  kind: method
  ns: sanic.mixins
  description: Turn on logging and add a handler which prints to stderr
  summary: Turn on logging and add a handler which prints to stderr
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: level
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.parent_process
  kind: method
  ns: sanic.mixins
  description: Return process object representing the parent process
  summary: Return process object representing the parent process
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.reducer
  kind: property
  ns: sanic.mixins
  description: |-
    Controls how objects will be reduced to a form that can be
    shared with other processes.
  summary: Controls how objects will be reduced to a form that can be
  signatures: null
  inherits_from: null
- name: BaseContext.set_executable
  kind: method
  ns: sanic.mixins
  description: |-
    Sets the path to a python.exe or pythonw.exe binary used to run
    child processes instead of sys.executable when using the 'spawn'
    start method.  Useful for people embedding Python.
  summary: Sets the path to a python
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: executable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.set_forkserver_preload
  kind: method
  ns: sanic.mixins
  description: |-
    Set list of module names to try to load in forkserver process.
    This is really just a hint.
  summary: Set list of module names to try to load in forkserver process
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: module_names
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseContext.set_start_method
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - kind: positional
      name: force
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ClassVar
  kind: callable
  ns: sanic.mixins
  description: |-
    Special type construct to mark class variables.

    An annotation wrapped in ClassVar indicates that a given
    attribute is intended to be used as a class variable and
    should not be set on instances of that class.

    Usage::

        class Starship:
            stats: ClassVar[dict[str, int]] = {} # class variable
            damage: int = 10                     # instance variable

    ClassVar accepts only types and cannot be further subscribed.

    Note that ClassVar is not a class itself, and should not
    be used with isinstance() or issubclass().
  summary: Special type construct to mark class variables
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.mixins
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTP
  kind: class
  ns: sanic.mixins
  description: Enum for representing HTTP versions
  summary: Enum for representing HTTP versions
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: HTTP
      kind: return
  inherits_from:
  - <enum 'IntEnum'>
  - <class 'int'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: HTTP.VERSION_1
  kind: property
  ns: sanic.mixins
  description: Enum for representing HTTP versions
  summary: Enum for representing HTTP versions
  signatures: null
  inherits_from: null
- name: HTTP.VERSION_3
  kind: property
  ns: sanic.mixins
  description: Enum for representing HTTP versions
  summary: Enum for representing HTTP versions
  signatures: null
  inherits_from: null
- name: HTTP.as_integer_ratio
  kind: callable
  ns: sanic.mixins
  description: |-
    Return integer ratio.

    Return a pair of integers, whose ratio is exactly equal to the original int
    and with a positive denominator.

    >>> (10).as_integer_ratio()
    (10, 1)
    >>> (-10).as_integer_ratio()
    (-10, 1)
    >>> (0).as_integer_ratio()
    (0, 1)
  summary: Return integer ratio
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTP.bit_count
  kind: callable
  ns: sanic.mixins
  description: |-
    Number of ones in the binary representation of the absolute value of self.

    Also known as the population count.

    >>> bin(13)
    '0b1101'
    >>> (13).bit_count()
    3
  summary: Number of ones in the binary representation of the absolute value of self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTP.bit_length
  kind: callable
  ns: sanic.mixins
  description: |-
    Number of bits necessary to represent self in binary.

    >>> bin(37)
    '0b100101'
    >>> (37).bit_length()
    6
  summary: Number of bits necessary to represent self in binary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTP.conjugate
  kind: callable
  ns: sanic.mixins
  description: Returns self, the complex conjugate of any int.
  summary: Returns self, the complex conjugate of any int
  signatures: null
  inherits_from: null
- name: HTTP.denominator
  kind: property
  ns: sanic.mixins
  description: the denominator of a rational number in lowest terms
  summary: the denominator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: HTTP.imag
  kind: property
  ns: sanic.mixins
  description: the imaginary part of a complex number
  summary: the imaginary part of a complex number
  signatures: null
  inherits_from: null
- name: HTTP.numerator
  kind: property
  ns: sanic.mixins
  description: the numerator of a rational number in lowest terms
  summary: the numerator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: HTTP.real
  kind: property
  ns: sanic.mixins
  description: the real part of a complex number
  summary: the real part of a complex number
  signatures: null
  inherits_from: null
- name: HTTP.to_bytes
  kind: callable
  ns: sanic.mixins
  description: |-
    Return an array of bytes representing an integer.

    length
      Length of bytes object to use.  An OverflowError is raised if the
      integer is not representable with the given number of bytes.  Default
      is length 1.
    byteorder
      The byte order used to represent the integer.  If byteorder is 'big',
      the most significant byte is at the beginning of the byte array.  If
      byteorder is 'little', the most significant byte is at the end of the
      byte array.  To request the native byte order of the host system, use
      `sys.byteorder' as the byte order value.  Default is to use 'big'.
    signed
      Determines whether two's complement is used to represent the integer.
      If signed is False and a negative integer is given, an OverflowError
      is raised.
  summary: Return an array of bytes representing an integer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: length
      default: '1'
      rest: false
    - kind: positional
      name: byteorder
      default: big
      rest: false
    - name: signed
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPVersion
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol
  kind: class
  ns: sanic.mixins
  description: |-
    This class provides implements the HTTP 1.1 protocol on top of our
    Sanic Server transport
  summary: This class provides implements the HTTP 1
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: loop
      default: null
      rest: false
      kind: kw-only
    - name: app
      default: null
      rest: false
      kind: kw-only
    - name: signal
      default: None
      rest: false
      kind: kw-only
    - name: connections
      default: None
      rest: false
      kind: kw-only
    - name: state
      default: None
      rest: false
      kind: kw-only
    - name: unix
      default: None
      rest: false
      kind: kw-only
    - type: HttpProtocol
      kind: return
  inherits_from:
  - <class 'sanic.server.protocols.http_protocol.HttpProtocolMixin'>
  - <class 'sanic.server.protocols.base_protocol.SanicProtocol'>
  - <class 'asyncio.protocols.Protocol'>
  - <class 'asyncio.protocols.BaseProtocol'>
- name: HttpProtocol.abort
  kind: method
  ns: sanic.mixins
  description: Force close the connection.
  summary: Force close the connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.access_log
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.app
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.check_timeouts
  kind: method
  ns: sanic.mixins
  description: Runs itself periodically to enforce any expired timeouts.
  summary: Runs itself periodically to enforce any expired timeouts
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.close
  kind: method
  ns: sanic.mixins
  description: Requires to prevent checking timeouts for closed connections
  summary: Requires to prevent checking timeouts for closed connections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.close_if_idle
  kind: method
  ns: sanic.mixins
  description: |-
    Close the connection if a request is not being sent or received

    :return: boolean - True if closed, false if staying open
  summary: Close the connection if a request is not being sent or received
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.conn_info
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.connection_lost
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the connection is lost or closed.

    The argument is an exception object or None (the latter
    meaning a regular EOF is received or the connection was
    aborted or closed).
  summary: Called when the connection is lost or closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exc
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.connection_made
  kind: method
  ns: sanic.mixins
  description: HTTP-protocol-specific new connection handler
  summary: HTTP-protocol-specific new connection handler
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: transport
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.connection_task
  kind: method
  ns: sanic.mixins
  description: |-
    Run a HTTP connection.

    Timeouts and some additional error handling occur here, while most of
    everything else happens in class Http or in code called from there.
  summary: Run a HTTP connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.connections
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.ctx
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.data_received
  kind: method
  ns: sanic.mixins
  description: |-
    Called when some data is received.

    The argument is a bytes object.
  summary: Called when some data is received
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.eof_received
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the other end calls write_eof() or equivalent.

    If this returns a false value (including None), the transport
    will close itself.  If it returns a true value, closing the
    transport is up to the protocol.
  summary: Called when the other end calls write_eof() or equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.error_handler
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.http
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.keep_alive_timeout
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.loop
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.pause_writing
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the transport's buffer goes over the high-water mark.

    Pause and resume calls are paired -- pause_writing() is called
    once when the buffer goes strictly over the high-water mark
    (even if subsequent writes increases the buffer size even
    more), and eventually resume_writing() is called once when the
    buffer size reaches the low-water mark.

    Note that if the buffer size equals the high-water mark,
    pause_writing() is not called -- it must go strictly over.
    Conversely, resume_writing() is called when the buffer size is
    equal or lower than the low-water mark.  These end conditions
    are important to ensure that things go as expected when either
    mark is zero.

    NOTE: This is the only Protocol callback that is not called
    through EventLoop.call_soon() -- if it were, it would have no
    effect when it's most needed (when the app keeps writing
    without yielding until pause_writing() is called).
  summary: Called when the transport's buffer goes over the high-water mark
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.receive_more
  kind: method
  ns: sanic.mixins
  description: Wait until more data is received into the Server protocol's buffer
  summary: Wait until more data is received into the Server protocol's buffer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.recv_buffer
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.request
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.request_class
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.request_handler
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.request_max_size
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.request_timeout
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.response_timeout
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.resume_writing
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the transport's buffer drains below the low-water mark.

    See pause_writing() for details.
  summary: Called when the transport's buffer drains below the low-water mark
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.send
  kind: method
  ns: sanic.mixins
  description: Writes HTTP data with backpressure control.
  summary: Writes HTTP data with backpressure control
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpProtocol.signal
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.state
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.transport
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.url
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpProtocol.version
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.mixins
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerType
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Literal
  kind: callable
  ns: sanic.mixins
  description: |-
    Special typing form to define literal types (a.k.a. value types).

    This form can be used to indicate to type checkers that the corresponding
    variable or function parameter has a value equivalent to the provided
    literal (or one of several literals)::

        def validate_simple(data: Any) -> Literal[True]:  # always returns True
            ...

        MODE = Literal['r', 'rb', 'w', 'wb']
        def open_helper(file: str, mode: MODE) -> str:
            ...

        open_helper('/some/path', 'r')  # Passes type check
        open_helper('/other/path', 'typo')  # Error in type checker

    Literal[...] cannot be subclassed. At runtime, an arbitrary value
    is allowed as type argument to Literal[...], but type checkers may
    impose restrictions.
  summary: Special typing form to define literal types (a
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Manager
  kind: method
  ns: sanic.mixins
  description: |-
    Returns a manager associated with a running server process

    The managers methods such as `Lock()`, `Condition()` and `Queue()`
    can be used to create shared objects.
  summary: Returns a manager associated with a running server process
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mapping
  kind: callable
  ns: sanic.mixins
  description: A generic version of collections.abc.Mapping.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: OS_IS_WINDOWS
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.mixins
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Pipe
  kind: method
  ns: sanic.mixins
  description: Returns two connection object connected by a pipe
  summary: Returns two connection object connected by a pipe
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: duplex
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Protocol
  kind: class
  ns: sanic.mixins
  description: |-
    Interface for stream protocol.

    The user should implement this interface.  They can inherit from
    this class but don't need to.  The implementations here do
    nothing (they don't raise exceptions).

    When the user wants to requests a transport, they pass a protocol
    factory to a utility function (e.g., EventLoop.create_connection()).

    When the connection is made successfully, connection_made() is
    called with a suitable transport object.  Then data_received()
    will be called 0 or more times with data (bytes) received from the
    transport; finally, connection_lost() will be called exactly once
    with either an exception object or None as an argument.

    State machine of calls:

      start -> CM [-> DR*] [-> ER?] -> CL -> end

    * CM: connection_made()
    * DR: data_received()
    * ER: eof_received()
    * CL: connection_lost()
  summary: Interface for stream protocol
  signatures:
  - - type: Protocol
      kind: return
  inherits_from:
  - <class 'asyncio.protocols.BaseProtocol'>
- name: Protocol.connection_lost
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the connection is lost or closed.

    The argument is an exception object or None (the latter
    meaning a regular EOF is received or the connection was
    aborted or closed).
  summary: Called when the connection is lost or closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exc
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Protocol.connection_made
  kind: method
  ns: sanic.mixins
  description: |-
    Called when a connection is made.

    The argument is the transport representing the pipe connection.
    To receive data, wait for data_received() calls.
    When the connection is closed, connection_lost() is called.
  summary: Called when a connection is made
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: transport
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Protocol.data_received
  kind: method
  ns: sanic.mixins
  description: |-
    Called when some data is received.

    The argument is a bytes object.
  summary: Called when some data is received
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Protocol.eof_received
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the other end calls write_eof() or equivalent.

    If this returns a false value (including None), the transport
    will close itself.  If it returns a true value, closing the
    transport is up to the protocol.
  summary: Called when the other end calls write_eof() or equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Protocol.pause_writing
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the transport's buffer goes over the high-water mark.

    Pause and resume calls are paired -- pause_writing() is called
    once when the buffer goes strictly over the high-water mark
    (even if subsequent writes increases the buffer size even
    more), and eventually resume_writing() is called once when the
    buffer size reaches the low-water mark.

    Note that if the buffer size equals the high-water mark,
    pause_writing() is not called -- it must go strictly over.
    Conversely, resume_writing() is called when the buffer size is
    equal or lower than the low-water mark.  These end conditions
    are important to ensure that things go as expected when either
    mark is zero.

    NOTE: This is the only Protocol callback that is not called
    through EventLoop.call_soon() -- if it were, it would have no
    effect when it's most needed (when the app keeps writing
    without yielding until pause_writing() is called).
  summary: Called when the transport's buffer goes over the high-water mark
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Protocol.resume_writing
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the transport's buffer drains below the low-water mark.

    See pause_writing() for details.
  summary: Called when the transport's buffer drains below the low-water mark
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Reloader
  kind: class
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: publisher
      default: null
      rest: false
    - kind: positional
      name: interval
      default: null
      rest: false
    - kind: positional
      name: reload_dirs
      default: null
      rest: false
    - kind: positional
      name: app_loader
      default: null
      rest: false
    - type: Reloader
      kind: return
  inherits_from: null
- name: Reloader.INTERVAL
  kind: property
  ns: sanic.mixins
  description: Convert a string or number to a floating point number, if possible.
  summary: Convert a string or number to a floating point number, if possible
  signatures: null
  inherits_from: null
- name: Reloader.check_file
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: filename
      default: null
      rest: false
    - kind: positional
      name: mtimes
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Reloader.files
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Reloader.python_files
  kind: method
  ns: sanic.mixins
  description: |-
    This iterates over all relevant Python files.

    It goes through all
    loaded files from modules, all files in folders of already loaded
    modules as well as all files reachable through a package.
  summary: This iterates over all relevant Python files
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Reloader.reload
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: reloaded_files
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Reloader.stop
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SANIC_PACKAGES
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SHUT_RDWR
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext
  kind: class
  ns: sanic.mixins
  description: |-
    An SSLContext holds various SSL-related configuration options and
    data, such as certificates and possibly a private key.
  summary: An SSLContext holds various SSL-related configuration options and
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: protocol
      default: None
      rest: false
    - type: SanicSSLContext
      kind: return
  inherits_from:
  - <class 'ssl.SSLContext'>
  - <class '_ssl._SSLContext'>
- name: SanicSSLContext.cert_store_stats
  kind: callable
  ns: sanic.mixins
  description: |-
    Returns quantities of loaded X.509 certificates.

    X.509 certificates with a CA extension and certificate revocation lists
    inside the context's cert store.

    NOTE: Certificates in a capath directory aren't loaded unless they have
    been used at least once.
  summary: Returns quantities of loaded X
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.check_hostname
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.create_from_ssl_context
  kind: function
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.get_ca_certs
  kind: callable
  ns: sanic.mixins
  description: |-
    Returns a list of dicts with information of loaded CA certs.

    If the optional argument is True, returns a DER-encoded copy of the CA
    certificate.

    NOTE: Certificates in a capath directory aren't loaded unless they have
    been used at least once.
  summary: Returns a list of dicts with information of loaded CA certs
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: binary_form
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.get_ciphers
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.hostname_checks_common_name
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.keylog_filename
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.load_cert_chain
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: certfile
      default: null
      rest: false
    - kind: positional
      name: keyfile
      default: None
      rest: false
    - kind: positional
      name: password
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.load_default_certs
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: purpose
      default: Purpose.SERVER_AUTH
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.load_dh_params
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.load_verify_locations
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cafile
      default: None
      rest: false
    - kind: positional
      name: capath
      default: None
      rest: false
    - kind: positional
      name: cadata
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.maximum_version
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.minimum_version
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.num_tickets
  kind: property
  ns: sanic.mixins
  description: Control the number of TLSv1.3 session tickets
  summary: Control the number of TLSv1
  signatures: null
  inherits_from: null
- name: SanicSSLContext.options
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.post_handshake_auth
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.protocol
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.security_level
  kind: property
  ns: sanic.mixins
  description: The current security level
  summary: The current security level
  signatures: null
  inherits_from: null
- name: SanicSSLContext.session_stats
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.set_alpn_protocols
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: alpn_protocols
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.set_ciphers
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cipherlist
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.set_default_verify_paths
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.set_ecdh_curve
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.set_npn_protocols
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: npn_protocols
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.set_servername_callback
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: server_name_callback
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.sni_callback
  kind: property
  ns: sanic.mixins
  description: |-
    Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension.

    If the argument is None then the callback is disabled. The method is called
    with the SSLSocket, the server name as a string, and the SSLContext object.
    See RFC 6066 for details of the SNI extension.
  summary: Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension
  signatures: null
  inherits_from: null
- name: SanicSSLContext.verify_flags
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.verify_mode
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SanicSSLContext.wrap_bio
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: incoming
      default: null
      rest: false
    - kind: positional
      name: outgoing
      default: null
      rest: false
    - kind: positional
      name: server_side
      default: 'False'
      rest: false
    - kind: positional
      name: server_hostname
      default: None
      rest: false
    - kind: positional
      name: session
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SanicSSLContext.wrap_socket
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sock
      default: null
      rest: false
    - kind: positional
      name: server_side
      default: 'False'
      rest: false
    - kind: positional
      name: do_handshake_on_connect
      default: 'True'
      rest: false
    - kind: positional
      name: suppress_ragged_eofs
      default: 'True'
      rest: false
    - kind: positional
      name: server_hostname
      default: None
      rest: false
    - kind: positional
      name: session
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ServerSignal
  kind: class
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - type: Signal
      kind: return
  inherits_from: null
- name: ServerSignal.stopped
  kind: property
  ns: sanic.mixins
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.mixins
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StartMethod
  kind: callable
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TYPE_CHECKING
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Tuple
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Type
  kind: callable
  ns: sanic.mixins
  description: |-
    Deprecated alias to builtins.type.

    builtins.type or typing.Type can be used to annotate class objects.
    For example, suppose we have the following classes::

        class User: ...  # Abstract base for User classes
        class BasicUser(User): ...
        class ProUser(User): ...
        class TeamUser(User): ...

    And a function that takes a class argument that's a subclass of
    User and returns an instance of the corresponding class::

        U = TypeVar('U', bound=User)
        def new_user(user_class: Type[U]) -> U:
            user = user_class()
            # (Here we could write the user object to a database)
            return user

        joe = new_user(BasicUser)

    At this point the type checker knows that joe has type BasicUser.
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.mixins
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol
  kind: class
  ns: sanic.mixins
  description: |-
    This class provides implements the HTTP 1.1 protocol on top of our
    Sanic Server transport
  summary: This class provides implements the HTTP 1
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: websocket_timeout
      default: '10.0'
      rest: false
      kind: kw-only
    - name: websocket_max_size
      default: None
      rest: false
      kind: kw-only
    - name: websocket_ping_interval
      default: '20.0'
      rest: false
      kind: kw-only
    - name: websocket_ping_timeout
      default: '20.0'
      rest: false
      kind: kw-only
    - type: WebSocketProtocol
      kind: return
  inherits_from:
  - <class 'sanic.server.protocols.http_protocol.HttpProtocol'>
  - <class 'sanic.server.protocols.http_protocol.HttpProtocolMixin'>
  - <class 'sanic.server.protocols.base_protocol.SanicProtocol'>
  - <class 'asyncio.protocols.Protocol'>
  - <class 'asyncio.protocols.BaseProtocol'>
- name: WebSocketProtocol.abort
  kind: method
  ns: sanic.mixins
  description: Force close the connection.
  summary: Force close the connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.access_log
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.app
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.check_timeouts
  kind: method
  ns: sanic.mixins
  description: Runs itself periodically to enforce any expired timeouts.
  summary: Runs itself periodically to enforce any expired timeouts
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.close
  kind: method
  ns: sanic.mixins
  description: Requires to prevent checking timeouts for closed connections
  summary: Requires to prevent checking timeouts for closed connections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.close_if_idle
  kind: method
  ns: sanic.mixins
  description: |-
    Close the connection if a request is not being sent or received

    :return: boolean - True if closed, false if staying open
  summary: Close the connection if a request is not being sent or received
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.conn_info
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.connection_lost
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the connection is lost or closed.

    The argument is an exception object or None (the latter
    meaning a regular EOF is received or the connection was
    aborted or closed).
  summary: Called when the connection is lost or closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exc
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.connection_made
  kind: method
  ns: sanic.mixins
  description: HTTP-protocol-specific new connection handler
  summary: HTTP-protocol-specific new connection handler
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: transport
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.connection_task
  kind: method
  ns: sanic.mixins
  description: |-
    Run a HTTP connection.

    Timeouts and some additional error handling occur here, while most of
    everything else happens in class Http or in code called from there.
  summary: Run a HTTP connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.connections
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.ctx
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.data_received
  kind: method
  ns: sanic.mixins
  description: |-
    Called when some data is received.

    The argument is a bytes object.
  summary: Called when some data is received
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.eof_received
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the other end calls write_eof() or equivalent.

    If this returns a false value (including None), the transport
    will close itself.  If it returns a true value, closing the
    transport is up to the protocol.
  summary: Called when the other end calls write_eof() or equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.error_handler
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.http
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.keep_alive_timeout
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.loop
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.pause_writing
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the transport's buffer goes over the high-water mark.

    Pause and resume calls are paired -- pause_writing() is called
    once when the buffer goes strictly over the high-water mark
    (even if subsequent writes increases the buffer size even
    more), and eventually resume_writing() is called once when the
    buffer size reaches the low-water mark.

    Note that if the buffer size equals the high-water mark,
    pause_writing() is not called -- it must go strictly over.
    Conversely, resume_writing() is called when the buffer size is
    equal or lower than the low-water mark.  These end conditions
    are important to ensure that things go as expected when either
    mark is zero.

    NOTE: This is the only Protocol callback that is not called
    through EventLoop.call_soon() -- if it were, it would have no
    effect when it's most needed (when the app keeps writing
    without yielding until pause_writing() is called).
  summary: Called when the transport's buffer goes over the high-water mark
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.receive_more
  kind: method
  ns: sanic.mixins
  description: Wait until more data is received into the Server protocol's buffer
  summary: Wait until more data is received into the Server protocol's buffer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.recv_buffer
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.request
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.request_class
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.request_handler
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.request_max_size
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.request_timeout
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.response_timeout
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.resume_writing
  kind: method
  ns: sanic.mixins
  description: |-
    Called when the transport's buffer drains below the low-water mark.

    See pause_writing() for details.
  summary: Called when the transport's buffer drains below the low-water mark
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.sanic_request_to_ws_request
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.send
  kind: method
  ns: sanic.mixins
  description: Writes HTTP data with backpressure control.
  summary: Writes HTTP data with backpressure control
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.signal
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.state
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.transport
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.url
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.version
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.websocket
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.websocket_handshake
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: subprotocols
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WebSocketProtocol.websocket_max_size
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.websocket_ping_interval
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.websocket_ping_timeout
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WebSocketProtocol.websocket_timeout
  kind: property
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WorkerMultiplexer
  kind: class
  ns: sanic.mixins
  description: |-
    Multiplexer for Sanic workers.

    This is instantiated inside of worker porocesses only. It is used to
    communicate with the monitor process.

    Args:
        monitor_publisher (Connection): The connection to the monitor.
        worker_state (Dict[str, Any]): The state of the worker.
  summary: Multiplexer for Sanic workers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: monitor_publisher
      default: null
      rest: false
    - kind: positional
      name: worker_state
      default: null
      rest: false
    - type: WorkerMultiplexer
      kind: return
  inherits_from: null
- name: WorkerMultiplexer.ack
  kind: method
  ns: sanic.mixins
  description: Acknowledge the worker is ready.
  summary: Acknowledge the worker is ready
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerMultiplexer.exit
  kind: method
  ns: sanic.mixins
  description: Run cleanup at worker exit.
  summary: Run cleanup at worker exit
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerMultiplexer.manage
  kind: method
  ns: sanic.mixins
  description: |-
    Manages the initiation and monitoring of a worker process.

    Args:
        ident (str): A unique identifier for the worker process.
        func (Callable[..., Any]): The function to be executed in the worker process.
        kwargs (Dict[str, Any]): A dictionary of arguments to be passed to `func`.
        transient (bool, optional): Flag to mark the process as transient. If `True`,
            the Worker Manager will restart the process with any global restart
            (e.g., auto-reload). Defaults to `False`.
        restartable (Optional[bool], optional): Flag to mark the process as restartable. If `True`,
            the Worker Manager can restart the process if prompted. Defaults to `None`.
        tracked (bool, optional): Flag to indicate whether the process should be tracked
            after its completion. Defaults to `False`.
        auto_start (bool, optional): Flag to indicate whether the process should be started
        workers (int, optional): The number of worker processes to run. Defaults to 1.

    This method packages the provided arguments into a bundle and sends them back to the
    main process to be managed by the Worker Manager.
  summary: Manages the initiation and monitoring of a worker process
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: ident
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - kind: positional
      name: kwargs
      default: null
      rest: false
    - kind: positional
      name: transient
      default: 'False'
      rest: false
    - kind: positional
      name: restartable
      default: None
      rest: false
    - kind: positional
      name: tracked
      default: 'False'
      rest: false
    - kind: positional
      name: auto_start
      default: 'True'
      rest: false
    - kind: positional
      name: workers
      default: '1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerMultiplexer.name
  kind: property
  ns: sanic.mixins
  description: The name of the worker.
  summary: The name of the worker
  signatures: null
  inherits_from: null
- name: WorkerMultiplexer.pid
  kind: property
  ns: sanic.mixins
  description: The process ID of the worker.
  summary: The process ID of the worker
  signatures: null
  inherits_from: null
- name: WorkerMultiplexer.reload
  kind: method
  ns: sanic.mixins
  description: |-
    Restart the worker.

    Args:
        name (str): The name of the process to restart.
        all_workers (bool): Whether to restart all workers.
        zero_downtime (bool): Whether to restart with zero downtime.
  summary: Restart the worker
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: all_workers
      default: 'False'
      rest: false
    - kind: positional
      name: zero_downtime
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerMultiplexer.restart
  kind: method
  ns: sanic.mixins
  description: |-
    Restart the worker.

    Args:
        name (str): The name of the process to restart.
        all_workers (bool): Whether to restart all workers.
        zero_downtime (bool): Whether to restart with zero downtime.
  summary: Restart the worker
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: all_workers
      default: 'False'
      rest: false
    - kind: positional
      name: zero_downtime
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerMultiplexer.scale
  kind: method
  ns: sanic.mixins
  description: |-
    Scale the number of workers.

    Args:
        num_workers (int): The number of workers to scale to.
  summary: Scale the number of workers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: num_workers
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerMultiplexer.set_serving
  kind: method
  ns: sanic.mixins
  description: |-
    Set the worker to serving.

    Args:
        serving (bool): Whether the worker is serving.
  summary: Set the worker to serving
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: serving
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerMultiplexer.state
  kind: property
  ns: sanic.mixins
  description: The state of the worker.
  summary: The state of the worker
  signatures: null
  inherits_from: null
- name: WorkerMultiplexer.terminate
  kind: method
  ns: sanic.mixins
  description: |-
    Terminate the worker.

    Args:
        early (bool): Whether to terminate early.
  summary: Terminate the worker
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: early
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerMultiplexer.workers
  kind: property
  ns: sanic.mixins
  description: The state of all workers.
  summary: The state of all workers
  signatures: null
  inherits_from: null
- name: all_tasks
  kind: function
  ns: sanic.mixins
  description: Return a set of all tasks for the loop.
  summary: Return a set of all tasks for the loop
  signatures:
  - - kind: positional
      name: loop
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: cast
  kind: function
  ns: sanic.mixins
  description: |-
    Cast a value to a type.

    This returns the value unchanged.  To the type checker this
    signals that the return value has the designated type, but at
    runtime we intentionally don't check anything (we want this
    to be as fast as possible).
  summary: Cast a value to a type
  signatures:
  - - kind: positional
      name: typ
      default: null
      rest: false
    - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: configure_socket
  kind: function
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: server_settings
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: deprecation
  kind: function
  ns: sanic.mixins
  description: |-
    Add a deprecation notice

    Example when a feature is being removed. In this case, version
    should be AT LEAST next version + 2

        deprecation("Helpful message", 99.9)

    Example when a feature is deprecated but not being removed:

        deprecation("Helpful message", 0)

    :param message: The message of the notice
    :type message: str
    :param version: The version when the feature will be removed. If it is
      not being removed, then set version=0.
    :type version: float
  summary: Add a deprecation notice
  signatures:
  - - kind: positional
      name: message
      default: null
      rest: false
    - kind: positional
      name: version
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_context
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_goodbye
  kind: function
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: get_logo
  kind: function
  ns: sanic.mixins
  description: |-
    Get the Sanic logo.

    Will return the full color logo if the terminal supports it.

    Args:
        full (bool, optional): Use the full color logo. Defaults to `False`.
        coffee (bool, optional): Use the coffee logo. Defaults to `False`.

    Returns:
        str: Sanic logo.
  summary: Get the Sanic logo
  signatures:
  - - kind: positional
      name: full
      default: 'False'
      rest: false
    - kind: positional
      name: coffee
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_ssl_context
  kind: function
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: ssl
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_start_method
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: allow_none
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: import_module
  kind: function
  ns: sanic.mixins
  description: |-
    Import a module.

    The 'package' argument is required when performing a relative import. It
    specifies the package to use as the anchor point from which to resolve the
    relative import to an absolute import.
  summary: Import a module
  signatures:
  - - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: package
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: is_atty
  kind: function
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: new_event_loop
  kind: function
  ns: sanic.mixins
  description: Equivalent to calling get_event_loop_policy().new_event_loop().
  summary: Equivalent to calling get_event_loop_policy()
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: process_to_context
  kind: function
  ns: sanic.mixins
  description: Process app.run ssl argument from easy formats to full SSLContext.
  summary: Process app
  signatures:
  - - kind: positional
      name: ssldef
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: remove_unix_socket
  kind: function
  ns: sanic.mixins
  description: Remove dead unix socket during server exit.
  summary: Remove dead unix socket during server exit
  signatures:
  - - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: serve
  kind: function
  ns: sanic.mixins
  description: |-
    Start asynchronous HTTP Server on an individual process.

    :param host: Address to host on
    :param port: Port to host on
    :param before_start: function to be executed before the server starts
                         listening. Takes arguments `app` instance and `loop`
    :param after_start: function to be executed after the server starts
                        listening. Takes  arguments `app` instance and `loop`
    :param before_stop: function to be executed when a stop signal is
                        received before it is respected. Takes arguments
                        `app` instance and `loop`
    :param after_stop: function to be executed when a stop signal is
                       received after it is respected. Takes arguments
                       `app` instance and `loop`
    :param ssl: SSLContext
    :param sock: Socket for the server to accept connections from
    :param unix: Unix socket to listen on instead of TCP port
    :param reuse_port: `True` for multiple workers
    :param loop: asyncio compatible event loop
    :param run_async: bool: Do not create a new event loop for the server,
                      and return an AsyncServer object rather than running it
    :param asyncio_server_kwargs: key-value args for asyncio/uvloop
                                  create_server method
    :return: Nothing

    Args:
        host (str): Address to host on
        port (int): Port to host on
        app (Sanic): Sanic app instance
        ssl (Optional[SSLContext], optional): SSLContext. Defaults to `None`.
        sock (Optional[socket.socket], optional): Socket for the server to
            accept connections from. Defaults to `None`.
        unix (Optional[str], optional): Unix socket to listen on instead of
            TCP port. Defaults to `None`.
        reuse_port (bool, optional): `True` for multiple workers. Defaults
            to `False`.
        loop: asyncio compatible event loop. Defaults
            to `None`.
        protocol (Type[asyncio.Protocol], optional): Protocol to use. Defaults
            to `HttpProtocol`.
        backlog (int, optional): The maximum number of queued connections
            passed to socket.listen(). Defaults to `100`.
        register_sys_signals (bool, optional): Register SIGINT and SIGTERM.
            Defaults to `True`.
        run_multiple (bool, optional): Run multiple workers. Defaults
            to `False`.
        run_async (bool, optional): Return an AsyncServer object.
            Defaults to `False`.
        connections: Connections. Defaults to `None`.
        signal (Signal, optional): Signal. Defaults to `Signal()`.
        state: State. Defaults to `None`.
        asyncio_server_kwargs (Optional[Dict[str, Union[int, float]]], optional):
            key-value args for asyncio/uvloop create_server method. Defaults
            to `None`.
        version (str, optional): HTTP version. Defaults to `HTTP.VERSION_1`.

    Raises:
        ServerError: Cannot run HTTP/3 server without aioquic installed.

    Returns:
        AsyncioServer: AsyncioServer object if `run_async` is `True`.
  summary: Start asynchronous HTTP Server on an individual process
  signatures:
  - - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: port
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: ssl
      default: None
      rest: false
    - kind: positional
      name: sock
      default: None
      rest: false
    - kind: positional
      name: unix
      default: None
      rest: false
    - kind: positional
      name: reuse_port
      default: 'False'
      rest: false
    - kind: positional
      name: loop
      default: None
      rest: false
    - kind: positional
      name: protocol
      default: <class 'sanic.server.protocols.http_protocol.HttpProtocol'>
      rest: false
    - kind: positional
      name: backlog
      default: '100'
      rest: false
    - kind: positional
      name: register_sys_signals
      default: 'True'
      rest: false
    - kind: positional
      name: run_multiple
      default: 'False'
      rest: false
    - kind: positional
      name: run_async
      default: 'False'
      rest: false
    - kind: positional
      name: connections
      default: None
      rest: false
    - kind: positional
      name: signal
      default: <sanic.models.server_types.Signal object at 0x7f13fccf4710>
      rest: false
    - kind: positional
      name: state
      default: None
      rest: false
    - kind: positional
      name: asyncio_server_kwargs
      default: None
      rest: false
    - kind: positional
      name: version
      default: '1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: set_start_method
  kind: method
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - kind: positional
      name: force
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: setup_ext
  kind: function
  ns: sanic.mixins
  description: |-
    Setup Sanic Extensions.

    Requires Sanic Extensions to be installed.

    Args:
        app (Sanic): Sanic application.
        fail (bool, optional): Raise an error if Sanic Extensions is not
            installed. Defaults to `False`.
        **kwargs: Keyword arguments to pass to `sanic_ext.Extend`.

    Returns:
        sanic_ext.Extend: Sanic Extensions instance.
  summary: Setup Sanic Extensions
  signatures:
  - - kind: positional
      name: app
      default: null
      rest: false
    - name: fail
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: trigger_events
  kind: function
  ns: sanic.mixins
  description: |-
    Trigger event callbacks (functions or async)

    Args:
        events (Optional[Iterable[Callable[..., Any]]]): [description]
        loop ([type]): [description]
        app (Optional[Sanic], optional): [description]. Defaults to None.
  summary: Trigger event callbacks (functions or async)
  signatures:
  - - kind: positional
      name: events
      default: null
      rest: false
    - kind: positional
      name: loop
      default: null
      rest: false
    - kind: positional
      name: app
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: try_use_uvloop
  kind: function
  ns: sanic.mixins
  description: Use uvloop instead of the default asyncio loop.
  summary: Use uvloop instead of the default asyncio loop
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: try_windows_loop
  kind: function
  ns: sanic.mixins
  description: Try to use the WindowsSelectorEventLoopPolicy instead of the default
  summary: Try to use the WindowsSelectorEventLoopPolicy instead of the default
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: worker_serve
  kind: function
  ns: sanic.mixins
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: port
      default: null
      rest: false
    - kind: positional
      name: app_name
      default: null
      rest: false
    - kind: positional
      name: monitor_publisher
      default: null
      rest: false
    - kind: positional
      name: app_loader
      default: null
      rest: false
    - kind: positional
      name: worker_state
      default: None
      rest: false
    - kind: positional
      name: server_info
      default: None
      rest: false
    - kind: positional
      name: ssl
      default: None
      rest: false
    - kind: positional
      name: sock
      default: None
      rest: false
    - kind: positional
      name: unix
      default: None
      rest: false
    - kind: positional
      name: reuse_port
      default: 'False'
      rest: false
    - kind: positional
      name: loop
      default: None
      rest: false
    - kind: positional
      name: protocol
      default: <class 'sanic.server.protocols.http_protocol.HttpProtocol'>
      rest: false
    - kind: positional
      name: backlog
      default: '100'
      rest: false
    - kind: positional
      name: register_sys_signals
      default: 'True'
      rest: false
    - kind: positional
      name: run_multiple
      default: 'False'
      rest: false
    - kind: positional
      name: run_async
      default: 'False'
      rest: false
    - kind: positional
      name: connections
      default: None
      rest: false
    - kind: positional
      name: signal
      default: <sanic.models.server_types.Signal object at 0x7f13fc5bced0>
      rest: false
    - kind: positional
      name: state
      default: None
      rest: false
    - kind: positional
      name: asyncio_server_kwargs
      default: None
      rest: false
    - kind: positional
      name: version
      default: '1'
      rest: false
    - kind: positional
      name: config
      default: None
      rest: false
    - kind: positional
      name: passthru
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: static
  kind: module
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_HTTP_CONTENT_TYPE
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.mixins
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath
  kind: class
  ns: sanic.mixins
  description: |-
    Base class for manipulating paths without I/O.

    PurePath represents a filesystem path and offers operations which
    don't imply any actual filesystem I/O.  Depending on your system,
    instantiating a PurePath will return either a PurePosixPath or a
    PureWindowsPath object.  You can also instantiate either of these classes
    directly, regardless of your system.
  summary: Base class for manipulating paths without I/O
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: PurePath
      kind: return
  inherits_from: null
- name: PurePath.anchor
  kind: property
  ns: sanic.mixins
  description: The concatenation of the drive and root, or ''.
  summary: The concatenation of the drive and root, or ''
  signatures: null
  inherits_from: null
- name: PurePath.as_posix
  kind: method
  ns: sanic.mixins
  description: |-
    Return the string representation of the path with forward (/)
    slashes.
  summary: Return the string representation of the path with forward (/)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.as_uri
  kind: method
  ns: sanic.mixins
  description: Return the path as a 'file' URI.
  summary: Return the path as a 'file' URI
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.drive
  kind: property
  ns: sanic.mixins
  description: The drive prefix (letter or UNC path), if any.
  summary: The drive prefix (letter or UNC path), if any
  signatures: null
  inherits_from: null
- name: PurePath.is_absolute
  kind: method
  ns: sanic.mixins
  description: |-
    True if the path is absolute (has both a root and, if applicable,
    a drive).
  summary: True if the path is absolute (has both a root and, if applicable,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.is_relative_to
  kind: method
  ns: sanic.mixins
  description: "Return True if the path is relative to another path or False.\n        "
  summary: Return True if the path is relative to another path or False
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.is_reserved
  kind: method
  ns: sanic.mixins
  description: |-
    Return True if the path contains one of the special names reserved
    by the system, if any.
  summary: Return True if the path contains one of the special names reserved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.joinpath
  kind: method
  ns: sanic.mixins
  description: |-
    Combine this path with one or several arguments, and return a
    new path representing either a subpath (if all arguments are relative
    paths) or a totally different path (if one of the arguments is
    anchored).
  summary: Combine this path with one or several arguments, and return a
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.match
  kind: method
  ns: sanic.mixins
  description: Return True if this path matches the given pattern.
  summary: Return True if this path matches the given pattern
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path_pattern
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.name
  kind: property
  ns: sanic.mixins
  description: The final path component, if any.
  summary: The final path component, if any
  signatures: null
  inherits_from: null
- name: PurePath.parent
  kind: property
  ns: sanic.mixins
  description: The logical parent of the path.
  summary: The logical parent of the path
  signatures: null
  inherits_from: null
- name: PurePath.parents
  kind: property
  ns: sanic.mixins
  description: A sequence of this path's logical parents.
  summary: A sequence of this path's logical parents
  signatures: null
  inherits_from: null
- name: PurePath.parts
  kind: property
  ns: sanic.mixins
  description: |-
    An object providing sequence-like access to the
    components in the filesystem path.
  summary: An object providing sequence-like access to the
  signatures: null
  inherits_from: null
- name: PurePath.relative_to
  kind: method
  ns: sanic.mixins
  description: |-
    Return the relative path to another path identified by the passed
    arguments.  If the operation is not possible (because this is not
    a subpath of the other path), raise ValueError.
  summary: Return the relative path to another path identified by the passed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.root
  kind: property
  ns: sanic.mixins
  description: The root of the path, if any.
  summary: The root of the path, if any
  signatures: null
  inherits_from: null
- name: PurePath.stem
  kind: property
  ns: sanic.mixins
  description: The final path component, minus its last suffix.
  summary: The final path component, minus its last suffix
  signatures: null
  inherits_from: null
- name: PurePath.suffix
  kind: property
  ns: sanic.mixins
  description: |-
    The final component's last suffix, if any.

    This includes the leading period. For example: '.txt'
  summary: The final component's last suffix, if any
  signatures: null
  inherits_from: null
- name: PurePath.suffixes
  kind: property
  ns: sanic.mixins
  description: |-
    A list of the final component's suffixes, if any.

    These include the leading periods. For example: ['.tar', '.gz']
  summary: A list of the final component's suffixes, if any
  signatures: null
  inherits_from: null
- name: PurePath.with_name
  kind: method
  ns: sanic.mixins
  description: Return a new path with the file name changed.
  summary: Return a new path with the file name changed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.with_stem
  kind: method
  ns: sanic.mixins
  description: Return a new path with the stem changed.
  summary: Return a new path with the stem changed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: stem
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PurePath.with_suffix
  kind: method
  ns: sanic.mixins
  description: |-
    Return a new path with the file suffix changed.  If the path
    has no suffix, add given suffix.  If the given suffix is an empty
    string, remove the suffix from the path.
  summary: Return a new path with the file suffix changed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sequence
  kind: callable
  ns: sanic.mixins
  description: A generic version of collections.abc.Sequence.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.mixins
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.mixins
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.mixins
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: file
  kind: function
  ns: sanic.mixins
  description: |-
    Return a response object with file data.

    Args:
        location (Union[str, PurePath]): Location of file on system.
        status (int, optional): HTTP response code. Won't enforce the passed in status if only a part of the content will be sent (206) or file is being validated (304). Defaults to 200.
        request_headers (Optional[Header], optional): The request headers.
        validate_when_requested (bool, optional): If `True`, will validate the file when requested. Defaults to True.
        mime_type (Optional[str], optional): Specific mime_type.
        headers (Optional[Dict[str, str]], optional): Custom Headers.
        filename (Optional[str], optional): Override filename.
        last_modified (Optional[Union[datetime, float, int, Default]], optional): The last modified date and time of the file.
        max_age (Optional[Union[float, int]], optional): Max age for cache control.
        no_store (Optional[bool], optional): Any cache should not store this response. Defaults to None.
        _range (Optional[Range], optional):

    Returns:
        HTTPResponse: The response object with the file data.
  summary: Return a response object with file data
  signatures:
  - - kind: positional
      name: location
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: request_headers
      default: None
      rest: false
    - kind: positional
      name: validate_when_requested
      default: 'True'
      rest: false
    - kind: positional
      name: mime_type
      default: None
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: filename
      default: None
      rest: false
    - kind: positional
      name: last_modified
      default: <Default>
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: no_store
      default: None
      rest: false
    - kind: positional
      name: _range
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: file_stream
  kind: function
  ns: sanic.mixins
  description: |-
    Return a streaming response object with file data.

    :param location: Location of file on system.
    :param chunk_size: The size of each chunk in the stream (in bytes)
    :param mime_type: Specific mime_type.
    :param headers: Custom Headers.
    :param filename: Override filename.
    :param _range:

    Args:
        location (Union[str, PurePath]): Location of file on system.
        status (int, optional): HTTP response code. Won't enforce the passed in status if only a part of the content will be sent (206) or file is being validated (304). Defaults to `200`.
        chunk_size (int, optional): The size of each chunk in the stream (in bytes). Defaults to `4096`.
        mime_type (Optional[str], optional): Specific mime_type.
        headers (Optional[Dict[str, str]], optional): Custom HTTP headers.
        filename (Optional[str], optional): Override filename.
        _range (Optional[Range], optional): The range of bytes to send.
  summary: Return a streaming response object with file data
  signatures:
  - - kind: positional
      name: location
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: chunk_size
      default: '4096'
      rest: false
    - kind: positional
      name: mime_type
      default: None
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: filename
      default: None
      rest: false
    - kind: positional
      name: _range
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: formatdate
  kind: function
  ns: sanic.mixins
  description: |-
    Returns a date string as specified by RFC 2822, e.g.:

    Fri, 09 Nov 2001 01:08:47 -0000

    Optional timeval if given is a floating point time value as accepted by
    gmtime() and localtime(), otherwise the current time is used.

    Optional localtime is a flag that when True, interprets timeval, and
    returns a date relative to the local timezone instead of UTC, properly
    taking daylight savings time into account.

    Optional argument usegmt means that the timezone is written out as
    an ascii string, not numeric one (so "GMT" instead of "+0000"). This
    is needed for HTTP, and is only used when localtime==False.
  summary: Returns a date string as specified by RFC 2822, e
  signatures:
  - - kind: positional
      name: timeval
      default: None
      rest: false
    - kind: positional
      name: localtime
      default: 'False'
      rest: false
    - kind: positional
      name: usegmt
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: guess_type
  kind: function
  ns: sanic.mixins
  description: |-
    Guess the type of a file based on its URL.

    Return value is a tuple (type, encoding) where type is None if the
    type can't be guessed (no or unknown suffix) or a string of the
    form type/subtype, usable for a MIME Content-type header; and
    encoding is None for no encoding or the name of the program used
    to encode (e.g. compress or gzip).  The mappings are table
    driven.  Encoding suffixes are case sensitive; type suffixes are
    first tried case sensitive, then case insensitive.

    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped
    to ".tar.gz".  (This is table-driven too, using the dictionary
    suffix_map).

    Optional `strict' argument when false adds a bunch of commonly found, but
    non-standard types.
  summary: Guess the type of a file based on its URL
  signatures:
  - - kind: positional
      name: url
      default: null
      rest: false
    - kind: positional
      name: strict
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: stat_async
  kind: function
  ns: sanic.mixins
  description: |-
    Perform a stat system call on the given path.

      path
        Path to be examined; can be string, bytes, a path-like object or
        open-file-descriptor int.
      dir_fd
        If not None, it should be a file descriptor open to a directory,
        and path should be a relative string; path will then be relative to
        that directory.
      follow_symlinks
        If False, and the last element of the path is a symbolic link,
        stat will examine the symbolic link itself instead of the file
        the link points to.

    dir_fd and follow_symlinks may not be implemented
      on your platform.  If they are unavailable, using them will raise a
      NotImplementedError.

    It's an error to use dir_fd or follow_symlinks when specifying path as
      an open file descriptor.
  summary: Perform a stat system call on the given path
  signatures:
  - - name: loop
      default: None
      rest: false
      kind: kw-only
    - name: executor
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: unquote
  kind: function
  ns: sanic.mixins
  description: |-
    Replace %xx escapes by their single-character equivalent. The optional
    encoding and errors parameters specify how to decode percent-encoded
    sequences into Unicode characters, as accepted by the bytes.decode()
    method.
    By default, percent-encoded sequences are decoded with UTF-8, and invalid
    sequences are replaced by a placeholder character.

    unquote('abc%20def') -> 'abc def'.
  summary: Replace %xx escapes by their single-character equivalent
  signatures:
  - - kind: positional
      name: string
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: replace
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: validate_file
  kind: function
  ns: sanic.mixins
  description: |-
    Validate file based on request headers.

    Args:
        request_headers (Header): The request headers.
        last_modified (Union[datetime, float, int]): The last modified date and time of the file.

    Returns:
        Optional[HTTPResponse]: A response object with status 304 if the file is not modified.
  summary: Validate file based on request headers
  signatures:
  - - kind: positional
      name: request_headers
      default: null
      rest: false
    - kind: positional
      name: last_modified
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: wraps
  kind: function
  ns: sanic.mixins
  description: |-
    Decorator factory to apply update_wrapper() to a wrapper function

    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
  summary: Decorator factory to apply update_wrapper() to a wrapper function
  signatures:
  - - kind: positional
      name: wrapped
      default: null
      rest: false
    - kind: positional
      name: assigned
      default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
      rest: false
    - kind: positional
      name: updated
      default: ('__dict__',)
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.models
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: asgi
  kind: module
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ASGIMessage
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ASGIReceive
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ASGIScope
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ASGISend
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Awaitable
  kind: callable
  ns: sanic.models
  description: A generic version of collections.abc.Awaitable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.models
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockProtocol
  kind: class
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: transport
      default: null
      rest: false
    - kind: positional
      name: loop
      default: null
      rest: false
    - type: MockProtocol
      kind: return
  inherits_from: null
- name: MockProtocol.complete
  kind: method
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockProtocol.drain
  kind: method
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockProtocol.is_complete
  kind: property
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MockProtocol.pause_writing
  kind: method
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockProtocol.push_data
  kind: method
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MockProtocol.resume_writing
  kind: method
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MutableMapping
  kind: callable
  ns: sanic.models
  description: A generic version of collections.abc.MutableMapping.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.models
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransportProtocol
  kind: class
  ns: sanic.models
  description: Base class for transports.
  summary: Base class for transports
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: extra
      default: None
      rest: false
    - type: TransportProtocol
      kind: return
  inherits_from:
  - <class 'asyncio.transports.BaseTransport'>
- name: TransportProtocol.close
  kind: method
  ns: sanic.models
  description: |-
    Close the transport.

    Buffered data will be flushed asynchronously.  No more data
    will be received.  After all buffered data is flushed, the
    protocol's connection_lost() method will (eventually) be
    called with None as its argument.
  summary: Close the transport
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransportProtocol.get_extra_info
  kind: method
  ns: sanic.models
  description: Get optional transport information.
  summary: Get optional transport information
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransportProtocol.get_protocol
  kind: method
  ns: sanic.models
  description: Return the current protocol.
  summary: Return the current protocol
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransportProtocol.is_closing
  kind: method
  ns: sanic.models
  description: Return True if the transport is closing or closed.
  summary: Return True if the transport is closing or closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransportProtocol.set_protocol
  kind: method
  ns: sanic.models
  description: Set a new protocol.
  summary: Set a new protocol
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.models
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: futures
  kind: module
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.models
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ErrorMiddlewareType
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Iterable
  kind: callable
  ns: sanic.models
  description: A generic version of collections.abc.Iterable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.models
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerType
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareType
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NamedTuple
  kind: function
  ns: sanic.models
  description: |-
    Typed version of namedtuple.

    Usage::

        class Employee(NamedTuple):
            name: str
            id: int

    This is equivalent to::

        Employee = collections.namedtuple('Employee', ['name', 'id'])

    The resulting class has an extra __annotations__ attribute, giving a
    dict that maps field names to types.  (The field names are also in
    the _fields attribute, which is part of the namedtuple API.)
    An alternative equivalent functional syntax is also accepted::

        Employee = NamedTuple('Employee', [('name', str), ('id', int)])
  summary: Typed version of namedtuple
  signatures:
  - - kind: positional
      name: typename
      default: null
      rest: false
    - kind: positional
      name: fields
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.models
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalHandler
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.models
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: handler_types
  kind: module
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.models
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Coroutine
  kind: callable
  ns: sanic.models
  description: A generic version of collections.abc.Coroutine.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ErrorMiddlewareType
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ListenerType
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareResponse
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MiddlewareType
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.models
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Request
  kind: const
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RequestMiddlewareType
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ResponseMiddlewareType
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteHandler
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Sanic
  kind: const
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalHandler
  kind: callable
  ns: sanic.models
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.models
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: http_types
  kind: module
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Credentials
  kind: class
  ns: sanic.models
  description: 'Credentials(auth_type: ''Optional[str]'', token: ''Optional[str]'', _username: ''Optional[str]'' = None, _password: ''Optional[str]'' = None)'
  summary: 'Credentials(auth_type: ''Optional[str]'', token: ''Optional[str]'', _username: ''Optional[str]'' = None, _password: ''Optional[str]'' = None)'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: auth_type
      default: null
      rest: false
    - kind: positional
      name: token
      default: null
      rest: false
    - kind: positional
      name: _username
      default: None
      rest: false
    - kind: positional
      name: _password
      default: None
      rest: false
    - type: Credentials
      kind: return
  inherits_from: null
- name: Credentials.password
  kind: property
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Credentials.username
  kind: property
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.models
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: b64decode
  kind: function
  ns: sanic.models
  description: |-
    Decode the Base64 encoded bytes-like object or ASCII string s.

    Optional altchars must be a bytes-like object or ASCII string of length 2
    which specifies the alternative alphabet used instead of the '+' and '/'
    characters.

    The result is returned as a bytes object.  A binascii.Error is raised if
    s is incorrectly padded.

    If validate is False (the default), characters that are neither in the
    normal base-64 alphabet nor the alternative alphabet are discarded prior
    to the padding check.  If validate is True, these non-alphabet characters
    in the input result in a binascii.Error.
    For more information about the strict base64 check, see:

    https://docs.python.org/3.11/library/binascii.html#binascii.a2b_base64
  summary: Decode the Base64 encoded bytes-like object or ASCII string s
  signatures:
  - - kind: positional
      name: s
      default: null
      rest: false
    - kind: positional
      name: altchars
      default: None
      rest: false
    - kind: positional
      name: validate
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: dataclass
  kind: function
  ns: sanic.models
  description: |-
    Add dunder methods based on the fields defined in the class.

    Examines PEP 526 __annotations__ to determine fields.

    If init is true, an __init__() method is added to the class. If repr
    is true, a __repr__() method is added. If order is true, rich
    comparison dunder methods are added. If unsafe_hash is true, a
    __hash__() method is added. If frozen is true, fields may not be
    assigned to after instance creation. If match_args is true, the
    __match_args__ tuple is added. If kw_only is true, then by default
    all fields are keyword-only. If slots is true, a new class with a
    __slots__ attribute is returned.
  summary: Add dunder methods based on the fields defined in the class
  signatures:
  - - kind: positional
      name: cls
      default: None
      rest: false
    - name: init
      default: 'True'
      rest: false
      kind: kw-only
    - name: repr
      default: 'True'
      rest: false
      kind: kw-only
    - name: eq
      default: 'True'
      rest: false
      kind: kw-only
    - name: order
      default: 'False'
      rest: false
      kind: kw-only
    - name: unsafe_hash
      default: 'False'
      rest: false
      kind: kw-only
    - name: frozen
      default: 'False'
      rest: false
      kind: kw-only
    - name: match_args
      default: 'True'
      rest: false
      kind: kw-only
    - name: kw_only
      default: 'False'
      rest: false
      kind: kw-only
    - name: slots
      default: 'False'
      rest: false
      kind: kw-only
    - name: weakref_slot
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: field
  kind: function
  ns: sanic.models
  description: |-
    Return an object to identify dataclass fields.

    default is the default value of the field.  default_factory is a
    0-argument function called to initialize a field's value.  If init
    is true, the field will be a parameter to the class's __init__()
    function.  If repr is true, the field will be included in the
    object's repr().  If hash is true, the field will be included in the
    object's hash().  If compare is true, the field will be used in
    comparison functions.  metadata, if specified, must be a mapping
    which is stored but not otherwise examined by dataclass.  If kw_only
    is true, the field will become a keyword-only parameter to
    __init__().

    It is an error to specify both default and default_factory.
  summary: Return an object to identify dataclass fields
  signatures:
  - - name: default
      default: <dataclasses._MISSING_TYPE object at 0x7f13fd297750>
      rest: false
      kind: kw-only
    - name: default_factory
      default: <dataclasses._MISSING_TYPE object at 0x7f13fd297750>
      rest: false
      kind: kw-only
    - name: init
      default: 'True'
      rest: false
      kind: kw-only
    - name: repr
      default: 'True'
      rest: false
      kind: kw-only
    - name: hash
      default: None
      rest: false
      kind: kw-only
    - name: compare
      default: 'True'
      rest: false
      kind: kw-only
    - name: metadata
      default: None
      rest: false
      kind: kw-only
    - name: kw_only
      default: <dataclasses._MISSING_TYPE object at 0x7f13fd297750>
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: protocol_types
  kind: module
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseTransport
  kind: class
  ns: sanic.models
  description: Base class for transports.
  summary: Base class for transports
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: extra
      default: None
      rest: false
    - type: BaseTransport
      kind: return
  inherits_from: null
- name: BaseTransport.close
  kind: method
  ns: sanic.models
  description: |-
    Close the transport.

    Buffered data will be flushed asynchronously.  No more data
    will be received.  After all buffered data is flushed, the
    protocol's connection_lost() method will (eventually) be
    called with None as its argument.
  summary: Close the transport
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseTransport.get_extra_info
  kind: method
  ns: sanic.models
  description: Get optional transport information.
  summary: Get optional transport information
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseTransport.get_protocol
  kind: method
  ns: sanic.models
  description: Return the current protocol.
  summary: Return the current protocol
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseTransport.is_closing
  kind: method
  ns: sanic.models
  description: Return True if the transport is closing or closed.
  summary: Return True if the transport is closing or closed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseTransport.set_protocol
  kind: method
  ns: sanic.models
  description: Set a new protocol.
  summary: Set a new protocol
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: protocol
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTMLProtocol
  kind: class
  ns: sanic.models
  description: |-
    Base class for protocol classes.

    Protocol classes are defined as::

        class Proto(Protocol):
            def meth(self) -> int:
                ...

    Such classes are primarily used with static type checkers that recognize
    structural subtyping (static duck-typing).

    For example::

        class C:
            def meth(self) -> int:
                return 0

        def func(x: Proto) -> int:
            return x.meth()

        func(C())  # Passes static type check

    See PEP 544 for details. Protocol classes decorated with
    @typing.runtime_checkable act as simple-minded runtime protocols that check
    only the presence of given attributes, ignoring their type signatures.
    Protocol classes can be generic, they are defined as::

        class GenProto(Protocol[T]):
            def meth(self) -> T:
                ...
  summary: Base class for protocol classes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: HTMLProtocol
      kind: return
  inherits_from:
  - <class 'typing.Protocol'>
  - <class 'typing.Generic'>
- name: Optional
  kind: callable
  ns: sanic.models
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Protocol
  kind: class
  ns: sanic.models
  description: |-
    Base class for protocol classes.

    Protocol classes are defined as::

        class Proto(Protocol):
            def meth(self) -> int:
                ...

    Such classes are primarily used with static type checkers that recognize
    structural subtyping (static duck-typing).

    For example::

        class C:
            def meth(self) -> int:
                return 0

        def func(x: Proto) -> int:
            return x.meth()

        func(C())  # Passes static type check

    See PEP 544 for details. Protocol classes decorated with
    @typing.runtime_checkable act as simple-minded runtime protocols that check
    only the presence of given attributes, ignoring their type signatures.
    Protocol classes can be generic, they are defined as::

        class GenProto(Protocol[T]):
            def meth(self) -> T:
                ...
  summary: Base class for protocol classes
  signatures:
  - - type: Protocol
      kind: return
  inherits_from:
  - <class 'typing.Generic'>
- name: TYPE_CHECKING
  kind: const
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.models
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: server_types
  kind: module
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.models
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.models
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.models
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Tuple
  kind: callable
  ns: sanic.models
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.models
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.pages
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: base
  kind: module
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BasePage
  kind: class
  ns: sanic.pages
  description: Base page for Sanic pages.
  summary: Base page for Sanic pages
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: debug
      default: 'True'
      rest: false
    - type: BasePage
      kind: return
  inherits_from:
  - <class 'abc.ABC'>
- name: BasePage.CSS
  kind: property
  ns: sanic.pages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BasePage.HEADING
  kind: property
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BasePage.STYLE
  kind: property
  ns: sanic.pages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BasePage.TITLE
  kind: property
  ns: sanic.pages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BasePage.render
  kind: method
  ns: sanic.pages
  description: |-
    Renders the page.

    Returns:
        str: The rendered page.
  summary: Renders the page
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BasePage.style
  kind: property
  ns: sanic.pages
  description: |-
    Returns the CSS for the page.

    Returns:
        str: The CSS for the page.
  summary: Returns the CSS for the page
  signatures: null
  inherits_from: null
- name: Builder
  kind: class
  ns: sanic.pages
  description: |-
    Builder generates a document with .elemname(attr1="value", ...) syntax.

    Create a HTML5 document by calling Document or by the E shorthand for
    creating empty snippets.

    E.g. Document("page title", lang="en").div(id="main")("Hello World!")
  summary: 'Builder generates a document with '
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: Builder
      kind: return
  inherits_from: null
- name: Builder.brief
  kind: property
  ns: sanic.pages
  description: A shorter output for the repr() of the document.
  summary: A shorter output for the repr() of the document
  signatures: null
  inherits_from: null
- name: CSS
  kind: class
  ns: sanic.pages
  description: Cascade stylesheets, i.e. combine all ancestor styles
  summary: Cascade stylesheets, i
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: bases
      default: null
      rest: false
    - kind: positional
      name: attrs
      default: null
      rest: false
    - type: CSS
      kind: return
  inherits_from:
  - <class 'abc.ABCMeta'>
  - <class 'type'>
- name: CSS.mro
  kind: callable
  ns: sanic.pages
  description: Return a type's method resolution order.
  summary: Return a type's method resolution order
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CSS.register
  kind: method
  ns: sanic.pages
  description: |-
    Register a virtual subclass of an ABC.

    Returns the subclass, to allow usage as a class decorator.
  summary: Register a virtual subclass of an ABC
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: subclass
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Document
  kind: function
  ns: sanic.pages
  description: |-
    Construct a new document with a DOCTYPE and minimal structure.

    The html tag is added if any attributes are provided for it.
    If a title is provided, meta charset and title element are added in head.

    E.g. Document("Page title", lang="en") produces a valid document, whereas
    Document() produces only a DOCTYPE declaration.

    Stylesheets, scripts and favicon passed in _urls will be linked in.

    Meta viewport may be added to disable device scaling (True) or using a
    custom string value for any other setting.
  summary: Construct a new document with a DOCTYPE and minimal structure
  signatures:
  - - name: _urls
      default: None
      rest: false
      kind: kw-only
    - name: _viewport
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML
  kind: class
  ns: sanic.pages
  description: A HTML string that will not be escaped.
  summary: A HTML string that will not be escaped
  signatures: null
  inherits_from:
  - <class 'str'>
- name: HTML.capitalize
  kind: callable
  ns: sanic.pages
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.casefold
  kind: callable
  ns: sanic.pages
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.center
  kind: callable
  ns: sanic.pages
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.count
  kind: callable
  ns: sanic.pages
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: HTML.encode
  kind: callable
  ns: sanic.pages
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.endswith
  kind: callable
  ns: sanic.pages
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: HTML.expandtabs
  kind: callable
  ns: sanic.pages
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.find
  kind: callable
  ns: sanic.pages
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: HTML.format
  kind: callable
  ns: sanic.pages
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: HTML.format_map
  kind: callable
  ns: sanic.pages
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: HTML.index
  kind: callable
  ns: sanic.pages
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: HTML.isalnum
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.isalpha
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.isascii
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.isdecimal
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.isdigit
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.isidentifier
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.islower
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.isnumeric
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.isprintable
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.isspace
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.istitle
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.isupper
  kind: callable
  ns: sanic.pages
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.join
  kind: callable
  ns: sanic.pages
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.ljust
  kind: callable
  ns: sanic.pages
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.lower
  kind: callable
  ns: sanic.pages
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.lstrip
  kind: callable
  ns: sanic.pages
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.partition
  kind: callable
  ns: sanic.pages
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.removeprefix
  kind: callable
  ns: sanic.pages
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.removesuffix
  kind: callable
  ns: sanic.pages
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.replace
  kind: callable
  ns: sanic.pages
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.rfind
  kind: callable
  ns: sanic.pages
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: HTML.rindex
  kind: callable
  ns: sanic.pages
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: HTML.rjust
  kind: callable
  ns: sanic.pages
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.rpartition
  kind: callable
  ns: sanic.pages
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.rsplit
  kind: callable
  ns: sanic.pages
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.rstrip
  kind: callable
  ns: sanic.pages
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.split
  kind: callable
  ns: sanic.pages
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.splitlines
  kind: callable
  ns: sanic.pages
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.startswith
  kind: callable
  ns: sanic.pages
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: HTML.strip
  kind: callable
  ns: sanic.pages
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.swapcase
  kind: callable
  ns: sanic.pages
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.title
  kind: callable
  ns: sanic.pages
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.translate
  kind: callable
  ns: sanic.pages
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.upper
  kind: callable
  ns: sanic.pages
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTML.zfill
  kind: callable
  ns: sanic.pages
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SVG_LOGO_SIMPLE
  kind: const
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VERSION
  kind: const
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: abstractmethod
  kind: function
  ns: sanic.pages
  description: |-
    A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.  abstractmethod() may be used to declare
    abstract methods for properties and descriptors.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, arg1, arg2, argN):
                ...
  summary: A decorator indicating abstract methods
  signatures:
  - - kind: positional
      name: funcobj
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: css
  kind: module
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CURRENT_DIR
  kind: const
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.pages
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: directory_page
  kind: module
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.pages
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DirectoryPage
  kind: class
  ns: sanic.pages
  description: Page for viewing a directory.
  summary: Page for viewing a directory
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: files
      default: null
      rest: false
    - kind: positional
      name: url
      default: null
      rest: false
    - kind: positional
      name: debug
      default: null
      rest: false
    - type: DirectoryPage
      kind: return
  inherits_from:
  - <class 'sanic.pages.base.BasePage'>
  - <class 'abc.ABC'>
- name: DirectoryPage.CSS
  kind: property
  ns: sanic.pages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: DirectoryPage.HEADING
  kind: property
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DirectoryPage.STYLE
  kind: property
  ns: sanic.pages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: DirectoryPage.TITLE
  kind: property
  ns: sanic.pages
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: DirectoryPage.render
  kind: method
  ns: sanic.pages
  description: |-
    Renders the page.

    Returns:
        str: The rendered page.
  summary: Renders the page
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DirectoryPage.style
  kind: property
  ns: sanic.pages
  description: |-
    Returns the CSS for the page.

    Returns:
        str: The CSS for the page.
  summary: Returns the CSS for the page
  signatures: null
  inherits_from: null
- name: E
  kind: callable
  ns: sanic.pages
  description: Use E.elemname or E(content) to create initially empty snippets.
  summary: Use E
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileInfo
  kind: class
  ns: sanic.pages
  description: Type for file info.
  summary: Type for file info
  signatures: null
  inherits_from:
  - <class 'dict'>
- name: FileInfo.clear
  kind: callable
  ns: sanic.pages
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: FileInfo.copy
  kind: callable
  ns: sanic.pages
  description: D.copy() -> a shallow copy of D
  summary: D
  signatures: null
  inherits_from: null
- name: FileInfo.get
  kind: callable
  ns: sanic.pages
  description: Return the value for key if key is in the dictionary, else default.
  summary: Return the value for key if key is in the dictionary, else default
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileInfo.items
  kind: callable
  ns: sanic.pages
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures: null
  inherits_from: null
- name: FileInfo.keys
  kind: callable
  ns: sanic.pages
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: FileInfo.pop
  kind: callable
  ns: sanic.pages
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures: null
  inherits_from: null
- name: FileInfo.popitem
  kind: callable
  ns: sanic.pages
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileInfo.setdefault
  kind: callable
  ns: sanic.pages
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileInfo.update
  kind: callable
  ns: sanic.pages
  description: |-
    D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]
  summary: D
  signatures: null
  inherits_from: null
- name: FileInfo.values
  kind: callable
  ns: sanic.pages
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures: null
  inherits_from: null
- name: Iterable
  kind: callable
  ns: sanic.pages
  description: A generic version of collections.abc.Iterable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TypedDict
  kind: function
  ns: sanic.pages
  description: |-
    A simple typed namespace. At runtime it is equivalent to a plain dict.

    TypedDict creates a dictionary type such that a type checker will expect all
    instances to have a certain set of keys, where each key is
    associated with a value of a consistent type. This expectation
    is not checked at runtime.

    Usage::

        >>> class Point2D(TypedDict):
        ...     x: int
        ...     y: int
        ...     label: str
        ...
        >>> a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK
        >>> b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check
        >>> Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')
        True

    The type info can be accessed via the Point2D.__annotations__ dict, and
    the Point2D.__required_keys__ and Point2D.__optional_keys__ frozensets.
    TypedDict supports an additional equivalent form::

        Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})

    By default, all keys must be present in a TypedDict. It is possible
    to override this by specifying totality::

        class Point2D(TypedDict, total=False):
            x: int
            y: int

    This means that a Point2D TypedDict can have any of the keys omitted. A type
    checker is only expected to support a literal False or True as the value of
    the total argument. True is the default, and makes all items defined in the
    class body be required.

    The Required and NotRequired special forms can also be used to mark
    individual keys as being required or not required::

        class Point2D(TypedDict):
            x: int               # the "x" key must always be present (Required is the default)
            y: NotRequired[int]  # the "y" key can be omitted

    See PEP 655 for more details on Required and NotRequired.
  summary: A simple typed namespace
  signatures:
  - - kind: positional
      name: typename
      default: null
      rest: false
    - kind: positional
      name: fields
      default: None
      rest: false
    - name: total
      default: 'True'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: error
  kind: module
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: E
  kind: callable
  ns: sanic.pages
  description: Use E.elemname or E(content) to create initially empty snippets.
  summary: Use E
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ENDUSER_TEXT
  kind: const
  ns: sanic.pages
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Mapping
  kind: callable
  ns: sanic.pages
  description: A generic version of collections.abc.Mapping.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: html_traceback
  kind: function
  ns: sanic.pages
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: exc
      default: None
      rest: false
    - kind: positional
      name: chain
      default: None
      rest: false
    - name: include_js_css
      default: 'True'
      rest: false
      kind: kw-only
    - name: local_urls
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.request
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: File
  kind: class
  ns: sanic.request
  description: |-
    Model for defining a file.

    It is a `namedtuple`, therefore you can iterate over the object, or
    access the parameters by name.

    Args:
        type (str, optional): The mimetype, defaults to "text/plain".
        body (bytes): Bytes of the file.
        name (str): The filename.
  summary: Model for defining a file
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: type
      default: null
      rest: false
    - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: File
      kind: return
  inherits_from:
  - <class 'tuple'>
- name: File.body
  kind: property
  ns: sanic.request
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: File.count
  kind: callable
  ns: sanic.request
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.index
  kind: callable
  ns: sanic.request
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: File.name
  kind: property
  ns: sanic.request
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: File.type
  kind: property
  ns: sanic.request
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: parse_multipart_form
  kind: function
  ns: sanic.request
  description: |-
    Parse a request body and returns fields and files

    Args:
        body (bytes): Bytes request body.
        boundary (bytes): Bytes multipart boundary.

    Returns:
        Tuple[RequestParameters, RequestParameters]: A tuple containing fields and files as `RequestParameters`.
  summary: Parse a request body and returns fields and files
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: boundary
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestParameters
  kind: class
  ns: sanic.request
  description: Hosts a dict with lists as values where get returns the first value of the list and getlist returns the whole shebang
  summary: Hosts a dict with lists as values where get returns the first value of the list and getlist returns the whole shebang
  signatures: null
  inherits_from:
  - <class 'dict'>
- name: RequestParameters.clear
  kind: callable
  ns: sanic.request
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: RequestParameters.copy
  kind: callable
  ns: sanic.request
  description: D.copy() -> a shallow copy of D
  summary: D
  signatures: null
  inherits_from: null
- name: RequestParameters.get
  kind: method
  ns: sanic.request
  description: |-
    Return the first value, either the default or actual

    Args:
        name (str): The name of the parameter
        default (Optional[Any], optional): The default value. Defaults to None.

    Returns:
        Optional[Any]: The first value of the list
  summary: Return the first value, either the default or actual
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestParameters.getlist
  kind: method
  ns: sanic.request
  description: |-
    Return the entire list

    Args:
        name (str): The name of the parameter
        default (Optional[Any], optional): The default value. Defaults to None.

    Returns:
        Optional[Any]: The entire list
  summary: Return the entire list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestParameters.items
  kind: callable
  ns: sanic.request
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures: null
  inherits_from: null
- name: RequestParameters.keys
  kind: callable
  ns: sanic.request
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: RequestParameters.pop
  kind: callable
  ns: sanic.request
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures: null
  inherits_from: null
- name: RequestParameters.popitem
  kind: callable
  ns: sanic.request
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestParameters.setdefault
  kind: callable
  ns: sanic.request
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestParameters.update
  kind: callable
  ns: sanic.request
  description: |-
    D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]
  summary: D
  signatures: null
  inherits_from: null
- name: RequestParameters.values
  kind: callable
  ns: sanic.request
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures: null
  inherits_from: null
- name: sanic.response
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JSONResponse
  kind: class
  ns: sanic.response
  description: |-
    Convenience class for JSON responses

    HTTP response to be sent back to the client, when the response
    is of json type. Offers several utilities to manipulate common
    json data types.

    Args:
        body (Optional[Any], optional): The body content to be returned. Defaults to `None`.
        status (int, optional): HTTP response number. Defaults to `200`.
        headers (Optional[Union[Header, Dict[str, str]]], optional): Headers to be returned. Defaults to `None`.
        content_type (str, optional): Content type to be returned (as a header). Defaults to `"application/json"`.
        dumps (Optional[Callable[..., str]], optional): The function to use for json encoding. Defaults to `None`.
        **kwargs (Any, optional): The kwargs to pass to the json encoding function. Defaults to `{}`.
  summary: Convenience class for JSON responses
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: body
      default: None
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: application/json
      rest: false
    - kind: positional
      name: dumps
      default: None
      rest: false
    - type: JSONResponse
      kind: return
  inherits_from:
  - <class 'sanic.response.types.HTTPResponse'>
  - <class 'sanic.response.types.BaseHTTPResponse'>
- name: JSONResponse.add_cookie
  kind: method
  ns: sanic.response
  description: |-
    Add a cookie to the CookieJar

    See [Cookies](/en/guide/basics/cookies.html)

    Args:
        key (str): The key to be added
        value (str): The value to be added
        path (str, optional): Path of the cookie. Defaults to `"/"`.
        domain (Optional[str], optional): Domain of the cookie. Defaults to `None`.
        secure (bool, optional): Whether the cookie is secure. Defaults to `True`.
        max_age (Optional[int], optional): Max age of the cookie. Defaults to `None`.
        expires (Optional[datetime], optional): Expiry date of the cookie. Defaults to `None`.
        httponly (bool, optional): Whether the cookie is http only. Defaults to `False`.
        samesite (Optional[SameSite], optional): SameSite policy of the cookie. Defaults to `"Lax"`.
        partitioned (bool, optional): Whether the cookie is partitioned. Defaults to `False`.
        comment (Optional[str], optional): Comment of the cookie. Defaults to `None`.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key. This requires that path="/", domain=None, and secure=True. Defaults to `False`.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key. This requires that secure=True. Defaults to `False`.

    Returns:
        Cookie: The cookie that was added
  summary: Add a cookie to the CookieJar
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - name: path
      default: /
      rest: false
      kind: kw-only
    - name: domain
      default: None
      rest: false
      kind: kw-only
    - name: secure
      default: 'True'
      rest: false
      kind: kw-only
    - name: max_age
      default: None
      rest: false
      kind: kw-only
    - name: expires
      default: None
      rest: false
      kind: kw-only
    - name: httponly
      default: 'False'
      rest: false
      kind: kw-only
    - name: samesite
      default: Lax
      rest: false
      kind: kw-only
    - name: partitioned
      default: 'False'
      rest: false
      kind: kw-only
    - name: comment
      default: None
      rest: false
      kind: kw-only
    - name: host_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - name: secure_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONResponse.append
  kind: method
  ns: sanic.response
  description: |-
    Appends a value to the response raw_body, ensuring that body is kept up to date.

    This can only be used if raw_body is a list.

    Args:
        value (Any): The value to append

    Raises:
        SanicException: If the body is not a list
  summary: Appends a value to the response raw_body, ensuring that body is kept up to date
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONResponse.asgi
  kind: property
  ns: sanic.response
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JSONResponse.body
  kind: property
  ns: sanic.response
  description: |-
    Returns the response body.

    Returns:
        Optional[bytes]: The response body
  summary: Returns the response body
  signatures: null
  inherits_from: null
- name: JSONResponse.content_type
  kind: property
  ns: sanic.response
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JSONResponse.cookies
  kind: property
  ns: sanic.response
  description: |-
    The response cookies.

    See [Cookies](/en/guide/basics/cookies.html)

    Returns:
        CookieJar: The response cookies
  summary: The response cookies
  signatures: null
  inherits_from: null
- name: JSONResponse.delete_cookie
  kind: method
  ns: sanic.response
  description: |-
    Delete a cookie

    This will effectively set it as Max-Age: 0, which a browser should
    interpret it to mean: "delete the cookie".

    Since it is a browser/client implementation, your results may vary
    depending upon which client is being used.

    See [Cookies](/en/guide/basics/cookies.html)

    Args:
        key (str): The key to be deleted
        path (str, optional): Path of the cookie. Defaults to `"/"`.
        domain (Optional[str], optional): Domain of the cookie. Defaults to `None`.
        host_prefix (bool, optional): Whether to add __Host- as a prefix to the key. This requires that path="/", domain=None, and secure=True. Defaults to `False`.
        secure_prefix (bool, optional): Whether to add __Secure- as a prefix to the key. This requires that secure=True. Defaults to `False`.
  summary: Delete a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - name: path
      default: /
      rest: false
      kind: kw-only
    - name: domain
      default: None
      rest: false
      kind: kw-only
    - name: host_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - name: secure_prefix
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONResponse.eof
  kind: method
  ns: sanic.response
  description: Send a EOF (End of File) message to the client.
  summary: Send a EOF (End of File) message to the client
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONResponse.extend
  kind: method
  ns: sanic.response
  description: |-
    Extends the response's raw_body with the given values, ensuring that body is kept up to date.

    This can only be used if raw_body is a list.

    Args:
        value (Any): The values to extend with

    Raises:
        SanicException: If the body is not a list
  summary: Extends the response's raw_body with the given values, ensuring that body is kept up to date
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONResponse.headers
  kind: property
  ns: sanic.response
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JSONResponse.pop
  kind: method
  ns: sanic.response
  description: |-
    Pops a key from the response's raw_body, ensuring that body is kept up to date.

    This can only be used if raw_body is a dict or a list.

    Args:
        key (Any): The key to pop
        default (Any, optional): The default value to return if the key is not found. Defaults to `_default`.

    Raises:
        SanicException: If the body is not a dict or a list
        TypeError: If the body is a list and a default value is provided

    Returns:
        Any: The value that was popped
  summary: Pops a key from the response's raw_body, ensuring that body is kept up to date
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: <Default>
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONResponse.processed_headers
  kind: property
  ns: sanic.response
  description: |-
    Obtain a list of header tuples encoded in bytes for sending.

    Add and remove headers based on status and content_type.

    Returns:
        Iterator[Tuple[bytes, bytes]]: A list of header tuples encoded in bytes for sending
  summary: Obtain a list of header tuples encoded in bytes for sending
  signatures: null
  inherits_from: null
- name: JSONResponse.raw_body
  kind: property
  ns: sanic.response
  description: |-
    Returns the raw body, as long as body has not been manually set previously.

    NOTE: This object should not be mutated, as it will not be
    reflected in the response body. If you need to mutate the
    response body, consider using one of the provided methods in
    this class or alternatively call set_body() with the mutated
    object afterwards or set the raw_body property to it.

    Returns:
        Optional[Any]: The raw body
  summary: Returns the raw body, as long as body has not been manually set previously
  signatures: null
  inherits_from: null
- name: JSONResponse.send
  kind: method
  ns: sanic.response
  description: |-
    Send any pending response headers and the given data as body.

    Args:
        data (Optional[AnyStr], optional): str or bytes to be written. Defaults to `None`.
        end_stream (Optional[bool], optional): whether to close the stream after this block. Defaults to `None`.
  summary: Send any pending response headers and the given data as body
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: end_stream
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONResponse.set_body
  kind: method
  ns: sanic.response
  description: |-
    Set the response body to the given value, using the given dumps function

    Sets a new response body using the given dumps function
    and kwargs, or falling back to the defaults given when
    creating the object if none are specified.

    Args:
        body (Any): The body to set
        dumps (Optional[Callable[..., str]], optional): The function to use for json encoding. Defaults to `None`.
        **dumps_kwargs (Any, optional): The kwargs to pass to the json encoding function. Defaults to `{}`.

    Examples:
        ```python
        response = JSONResponse({"foo": "bar"})
        response.set_body({"bar": "baz"})
        assert response.body == b'{"bar": "baz"}'
        ```
  summary: Set the response body to the given value, using the given dumps function
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: dumps
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JSONResponse.status
  kind: property
  ns: sanic.response
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JSONResponse.stream
  kind: property
  ns: sanic.response
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JSONResponse.update
  kind: method
  ns: sanic.response
  description: |-
    Updates the response's raw_body with the given values, ensuring that body is kept up to date.

    This can only be used if raw_body is a dict.

    Args:
        *args: The args to update with
        **kwargs: The kwargs to update with

    Raises:
        SanicException: If the body is not a dict
  summary: Updates the response's raw_body with the given values, ensuring that body is kept up to date
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: empty
  kind: function
  ns: sanic.response
  description: |-
    Returns an empty response to the client.

    Args:
        status (int, optional): HTTP response code. Defaults to `204`.
        headers ([type], optional): Custom HTTP headers. Defaults to `None`.

    Returns:
        HTTPResponse: An empty response to the client.
  summary: Returns an empty response to the client
  signatures:
  - - kind: positional
      name: status
      default: '204'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: json
  kind: function
  ns: sanic.response
  description: |-
    Returns response object with body in json format.

    Args:
        body (Any): Response data to be serialized.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.
        content_type (str, optional): The content type (string) of the response. Defaults to `"application/json"`.
        dumps (Callable[..., str], optional): A custom json dumps function. Defaults to `None`.
        **kwargs (Any): Remaining arguments that are passed to the json encoder.

    Returns:
        JSONResponse: A response object with body in json format.
  summary: Returns response object with body in json format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: application/json
      rest: false
    - kind: positional
      name: dumps
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: text
  kind: function
  ns: sanic.response
  description: |-
    Returns response object with body in text format.

    Args:
        body (str): Response data.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.
        content_type (str, optional): The content type (string) of the response. Defaults to `"text/plain; charset=utf-8"`.

    Returns:
        HTTPResponse: A response object with body in text format.

    Raises:
        TypeError: If the body is not a string.
  summary: Returns response object with body in text format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: text/plain; charset=utf-8
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: raw
  kind: function
  ns: sanic.response
  description: |-
    Returns response object without encoding the body.

    Args:
        body (Optional[AnyStr]): Response data.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.
        content_type (str, optional): The content type (string) of the response. Defaults to `"application/octet-stream"`.

    Returns:
        HTTPResponse: A response object without encoding the body.
  summary: Returns response object without encoding the body
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: html
  kind: function
  ns: sanic.response
  description: |-
    Returns response object with body in html format.

    Body should be a `str` or `bytes` like object, or an object with `__html__` or `_repr_html_`.

    Args:
        body (Union[str, bytes, HTMLProtocol]): Response data.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.

    Returns:
        HTTPResponse: A response object with body in html format.
  summary: Returns response object with body in html format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: validate_file
  kind: function
  ns: sanic.response
  description: |-
    Validate file based on request headers.

    Args:
        request_headers (Header): The request headers.
        last_modified (Union[datetime, float, int]): The last modified date and time of the file.

    Returns:
        Optional[HTTPResponse]: A response object with status 304 if the file is not modified.
  summary: Validate file based on request headers
  signatures:
  - - kind: positional
      name: request_headers
      default: null
      rest: false
    - kind: positional
      name: last_modified
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: file
  kind: function
  ns: sanic.response
  description: |-
    Return a response object with file data.

    Args:
        location (Union[str, PurePath]): Location of file on system.
        status (int, optional): HTTP response code. Won't enforce the passed in status if only a part of the content will be sent (206) or file is being validated (304). Defaults to 200.
        request_headers (Optional[Header], optional): The request headers.
        validate_when_requested (bool, optional): If `True`, will validate the file when requested. Defaults to True.
        mime_type (Optional[str], optional): Specific mime_type.
        headers (Optional[Dict[str, str]], optional): Custom Headers.
        filename (Optional[str], optional): Override filename.
        last_modified (Optional[Union[datetime, float, int, Default]], optional): The last modified date and time of the file.
        max_age (Optional[Union[float, int]], optional): Max age for cache control.
        no_store (Optional[bool], optional): Any cache should not store this response. Defaults to None.
        _range (Optional[Range], optional):

    Returns:
        HTTPResponse: The response object with the file data.
  summary: Return a response object with file data
  signatures:
  - - kind: positional
      name: location
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: request_headers
      default: None
      rest: false
    - kind: positional
      name: validate_when_requested
      default: 'True'
      rest: false
    - kind: positional
      name: mime_type
      default: None
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: filename
      default: None
      rest: false
    - kind: positional
      name: last_modified
      default: <Default>
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: no_store
      default: None
      rest: false
    - kind: positional
      name: _range
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: redirect
  kind: function
  ns: sanic.response
  description: |-
    Cause a HTTP redirect (302 by default) by setting a Location header.

    Args:
        to (str): path or fully qualified URL to redirect to
        headers (Optional[Dict[str, str]], optional): optional dict of headers to include in the new request. Defaults to None.
        status (int, optional): status code (int) of the new request, defaults to 302. Defaults to 302.
        content_type (str, optional): the content type (string) of the response. Defaults to "text/html; charset=utf-8".

    Returns:
        HTTPResponse: A response object with the redirect.
  summary: Cause a HTTP redirect (302 by default) by setting a Location header
  signatures:
  - - kind: positional
      name: to
      default: null
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: status
      default: '302'
      rest: false
    - kind: positional
      name: content_type
      default: text/html; charset=utf-8
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: file_stream
  kind: function
  ns: sanic.response
  description: |-
    Return a streaming response object with file data.

    :param location: Location of file on system.
    :param chunk_size: The size of each chunk in the stream (in bytes)
    :param mime_type: Specific mime_type.
    :param headers: Custom Headers.
    :param filename: Override filename.
    :param _range:

    Args:
        location (Union[str, PurePath]): Location of file on system.
        status (int, optional): HTTP response code. Won't enforce the passed in status if only a part of the content will be sent (206) or file is being validated (304). Defaults to `200`.
        chunk_size (int, optional): The size of each chunk in the stream (in bytes). Defaults to `4096`.
        mime_type (Optional[str], optional): Specific mime_type.
        headers (Optional[Dict[str, str]], optional): Custom HTTP headers.
        filename (Optional[str], optional): Override filename.
        _range (Optional[Range], optional): The range of bytes to send.
  summary: Return a streaming response object with file data
  signatures:
  - - kind: positional
      name: location
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: chunk_size
      default: '4096'
      rest: false
    - kind: positional
      name: mime_type
      default: None
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: filename
      default: None
      rest: false
    - kind: positional
      name: _range
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: json_dumps
  kind: callable
  ns: sanic.response
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures: null
  inherits_from: null
- name: sanic.router
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ALLOWED_LABELS
  kind: const
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseRouter
  kind: class
  ns: sanic.router
  description: |-
    Helper class that provides a standard way to create an ABC using
    inheritance.
  summary: Helper class that provides a standard way to create an ABC using
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: delimiter
      default: /
      rest: false
    - kind: positional
      name: exception
      default: <class 'sanic_routing.exceptions.NotFound'>
      rest: false
    - kind: positional
      name: method_handler_exception
      default: <class 'sanic_routing.exceptions.NoMethod'>
      rest: false
    - kind: positional
      name: route_class
      default: <class 'sanic_routing.route.Route'>
      rest: false
    - kind: positional
      name: group_class
      default: <class 'sanic_routing.group.RouteGroup'>
      rest: false
    - kind: positional
      name: stacking
      default: 'False'
      rest: false
    - kind: positional
      name: cascade_not_found
      default: 'False'
      rest: false
    - type: BaseRouter
      kind: return
  inherits_from:
  - <class 'abc.ABC'>
- name: BaseRouter.ALLOWED_METHODS
  kind: property
  ns: sanic.router
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: BaseRouter.DEFAULT_METHOD
  kind: property
  ns: sanic.router
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BaseRouter.add
  kind: method
  ns: sanic.router
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - kind: positional
      name: methods
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: requirements
      default: None
      rest: false
    - kind: positional
      name: strict
      default: 'False'
      rest: false
    - kind: positional
      name: unquote
      default: 'False'
      rest: false
    - kind: positional
      name: overwrite
      default: 'False'
      rest: false
    - kind: positional
      name: append
      default: 'False'
      rest: false
    - name: priority
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseRouter.finalize
  kind: method
  ns: sanic.router
  description: |-
    After all routes are added, we can put everything into a final state
    and build the routing dource

    :param do_compile: Whether to compile the source, mainly a debugging
        tool, defaults to True
    :type do_compile: bool, optional
    :param do_optimize: Experimental feature that uses AST module to make
        some optimizations, defaults to False
    :type do_optimize: bool, optional
    :raises FinalizationError: Cannot finalize if there are no routes, or
        the router has already been finalized (can call reset() to undo it)
  summary: After all routes are added, we can put everything into a final state
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: do_compile
      default: 'True'
      rest: false
    - kind: positional
      name: do_optimize
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseRouter.find_route
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseRouter.get
  kind: method
  ns: sanic.router
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseRouter.groups
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseRouter.matchers
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseRouter.register_pattern
  kind: method
  ns: sanic.router
  description: |-
    Add a custom parameter type to the router. The cast should raise a
    ValueError if it is an incorrect type. The order of registration is
    important if it is possible that a single value could pass multiple
    pattern types. Therefore, patterns are tried in the REVERSE order of
    registration. All custom patterns will be evaluated before any built-in
    patterns.

    :param label: The parts that is used to signify the type: example

    :type label: str
    :param cast: The callable that casts the value to the desired type, or
        fails trying
    :type cast: t.Callable[[str], t.Any]
    :param pattern: A regular expression that could also match the path
        segment
    :type pattern: Union[t.Pattern, str]
  summary: Add a custom parameter type to the router
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: label
      default: null
      rest: false
    - kind: positional
      name: cast
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: null
      rest: false
    - kind: positional
      name: param_info_class
      default: <class 'sanic_routing.patterns.ParamInfo'>
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseRouter.reset
  kind: method
  ns: sanic.router
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseRouter.resolve
  kind: method
  ns: sanic.router
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - name: method
      default: None
      rest: false
      kind: kw-only
    - name: orig
      default: None
      rest: false
      kind: kw-only
    - name: extra
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: BaseRouter.routes
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.router
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTP_METHODS
  kind: const
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Iterable
  kind: callable
  ns: sanic.router
  description: A generic version of collections.abc.Iterable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.router
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NoMethod
  kind: class
  ns: sanic.router
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: Method does not exist
      rest: false
    - kind: positional
      name: method
      default: None
      rest: false
    - kind: positional
      name: allowed_methods
      default: None
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - type: NoMethod
      kind: return
  inherits_from:
  - <class 'sanic_routing.exceptions.BaseException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NoMethod.add_note
  kind: callable
  ns: sanic.router
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NoMethod.args
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NoMethod.with_traceback
  kind: callable
  ns: sanic.router
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.router
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ROUTER_CACHE_SIZE
  kind: const
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RouteGroup
  kind: class
  ns: sanic.router
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: RouteGroup
      kind: return
  inherits_from: null
- name: RouteGroup.depth
  kind: property
  ns: sanic.router
  description: The number of parts in :py:attr:`parts`
  summary: The number of parts in :py:attr:`parts`
  signatures: null
  inherits_from: null
- name: RouteGroup.dynamic_path
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RouteGroup.finalize
  kind: method
  ns: sanic.router
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteGroup.merge
  kind: method
  ns: sanic.router
  description: |-
    The purpose of merge is to group routes with the same path, but
    declarared individually. In other words to group these:

    .. code-block:: python

        @app.get("/path/to")
        def handler1(...):
            ...

        @app.post("/path/to")
        def handler2(...):
            ...

    The other main purpose is to look for conflicts and
    raise ``RouteExists``

    A duplicate route is when:
    1. They have the same path and any overlapping methods; AND
    2. If they have requirements, they are the same

    :param group: Incoming route group
    :type group: RouteGroup
    :param overwrite: whether to allow an otherwise duplicate route group
        to overwrite the existing, if ``True`` will not raise exception
        on duplicates, defaults to False
    :type overwrite: bool, optional
    :param append: whether to allow an otherwise duplicate route group to
        append its routes to the existing route group, defaults to False
    :type append: bool, optional
    :raises RouteExists: Raised when there is a duplicate
  summary: The purpose of merge is to group routes with the same path, but
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: group
      default: null
      rest: false
    - kind: positional
      name: overwrite
      default: 'False'
      rest: false
    - kind: positional
      name: append
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteGroup.methods
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RouteGroup.passthru_properties
  kind: property
  ns: sanic.router
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: RouteGroup.prioritize_routes
  kind: method
  ns: sanic.router
  description: Sorts the routes in the group by priority
  summary: Sorts the routes in the group by priority
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteGroup.requirements
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RouteGroup.reset
  kind: method
  ns: sanic.router
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteGroup.routes
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RouteHandler
  kind: callable
  ns: sanic.router
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Tuple
  kind: callable
  ns: sanic.router
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: UUID
  kind: class
  ns: sanic.router
  description: |-
    Instances of the UUID class represent UUIDs as specified in RFC 4122.
    UUID objects are immutable, hashable, and usable as dictionary keys.
    Converting a UUID to a string with str() yields something in the form
    '12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts
    five possible forms: a similar string of hexadecimal digits, or a tuple
    of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and
    48-bit values respectively) as an argument named 'fields', or a string
    of 16 bytes (with all the integer fields in big-endian order) as an
    argument named 'bytes', or a string of 16 bytes (with the first three
    fields in little-endian order) as an argument named 'bytes_le', or a
    single 128-bit integer as an argument named 'int'.

    UUIDs have these read-only attributes:

        bytes       the UUID as a 16-byte string (containing the six
                    integer fields in big-endian byte order)

        bytes_le    the UUID as a 16-byte string (with time_low, time_mid,
                    and time_hi_version in little-endian byte order)

        fields      a tuple of the six integer fields of the UUID,
                    which are also available as six individual attributes
                    and two derived attributes:

            time_low                the first 32 bits of the UUID
            time_mid                the next 16 bits of the UUID
            time_hi_version         the next 16 bits of the UUID
            clock_seq_hi_variant    the next 8 bits of the UUID
            clock_seq_low           the next 8 bits of the UUID
            node                    the last 48 bits of the UUID

            time                    the 60-bit timestamp
            clock_seq               the 14-bit sequence number

        hex         the UUID as a 32-character hexadecimal string

        int         the UUID as a 128-bit integer

        urn         the UUID as a URN as specified in RFC 4122

        variant     the UUID variant (one of the constants RESERVED_NCS,
                    RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)

        version     the UUID version number (1 through 5, meaningful only
                    when the variant is RFC_4122)

        is_safe     An enum indicating whether the UUID has been generated in
                    a way that is safe for multiprocessing applications, via
                    uuid_generate_time_safe(3).
  summary: Instances of the UUID class represent UUIDs as specified in RFC 4122
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: hex
      default: None
      rest: false
    - kind: positional
      name: bytes
      default: None
      rest: false
    - kind: positional
      name: bytes_le
      default: None
      rest: false
    - kind: positional
      name: fields
      default: None
      rest: false
    - kind: positional
      name: int
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - name: is_safe
      default: SafeUUID.unknown
      rest: false
      kind: kw-only
    - type: UUID
      kind: return
  inherits_from: null
- name: UUID.bytes
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.bytes_le
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.clock_seq
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.clock_seq_hi_variant
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.clock_seq_low
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.fields
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.hex
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.int
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.is_safe
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.node
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.time
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.time_hi_version
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.time_low
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.time_mid
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.urn
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.variant
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUID.version
  kind: property
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.router
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.router
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: check_error_format
  kind: function
  ns: sanic.router
  description: Check that the format is known.
  summary: Check that the format is known
  signatures:
  - - kind: positional
      name: format
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: lru_cache
  kind: function
  ns: sanic.router
  description: |-
    Least-recently-used cache decorator.

    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.

    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.

    Arguments to the cached function must be hashable.

    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.

    See:  https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)
  summary: Least-recently-used cache decorator
  signatures:
  - - kind: positional
      name: maxsize
      default: '128'
      rest: false
    - kind: positional
      name: typed
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: signature
  kind: function
  ns: sanic.router
  description: Get a signature object for the passed callable.
  summary: Get a signature object for the passed callable
  signatures:
  - - kind: positional
      name: obj
      default: null
      rest: false
    - name: follow_wrapped
      default: 'True'
      rest: false
      kind: kw-only
    - name: globals
      default: None
      rest: false
      kind: kw-only
    - name: locals
      default: None
      rest: false
      kind: kw-only
    - name: eval_str
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.server
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: serve
  kind: function
  ns: sanic.server
  description: |-
    Start asynchronous HTTP Server on an individual process.

    :param host: Address to host on
    :param port: Port to host on
    :param before_start: function to be executed before the server starts
                         listening. Takes arguments `app` instance and `loop`
    :param after_start: function to be executed after the server starts
                        listening. Takes  arguments `app` instance and `loop`
    :param before_stop: function to be executed when a stop signal is
                        received before it is respected. Takes arguments
                        `app` instance and `loop`
    :param after_stop: function to be executed when a stop signal is
                       received after it is respected. Takes arguments
                       `app` instance and `loop`
    :param ssl: SSLContext
    :param sock: Socket for the server to accept connections from
    :param unix: Unix socket to listen on instead of TCP port
    :param reuse_port: `True` for multiple workers
    :param loop: asyncio compatible event loop
    :param run_async: bool: Do not create a new event loop for the server,
                      and return an AsyncServer object rather than running it
    :param asyncio_server_kwargs: key-value args for asyncio/uvloop
                                  create_server method
    :return: Nothing

    Args:
        host (str): Address to host on
        port (int): Port to host on
        app (Sanic): Sanic app instance
        ssl (Optional[SSLContext], optional): SSLContext. Defaults to `None`.
        sock (Optional[socket.socket], optional): Socket for the server to
            accept connections from. Defaults to `None`.
        unix (Optional[str], optional): Unix socket to listen on instead of
            TCP port. Defaults to `None`.
        reuse_port (bool, optional): `True` for multiple workers. Defaults
            to `False`.
        loop: asyncio compatible event loop. Defaults
            to `None`.
        protocol (Type[asyncio.Protocol], optional): Protocol to use. Defaults
            to `HttpProtocol`.
        backlog (int, optional): The maximum number of queued connections
            passed to socket.listen(). Defaults to `100`.
        register_sys_signals (bool, optional): Register SIGINT and SIGTERM.
            Defaults to `True`.
        run_multiple (bool, optional): Run multiple workers. Defaults
            to `False`.
        run_async (bool, optional): Return an AsyncServer object.
            Defaults to `False`.
        connections: Connections. Defaults to `None`.
        signal (Signal, optional): Signal. Defaults to `Signal()`.
        state: State. Defaults to `None`.
        asyncio_server_kwargs (Optional[Dict[str, Union[int, float]]], optional):
            key-value args for asyncio/uvloop create_server method. Defaults
            to `None`.
        version (str, optional): HTTP version. Defaults to `HTTP.VERSION_1`.

    Raises:
        ServerError: Cannot run HTTP/3 server without aioquic installed.

    Returns:
        AsyncioServer: AsyncioServer object if `run_async` is `True`.
  summary: Start asynchronous HTTP Server on an individual process
  signatures:
  - - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: port
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: ssl
      default: None
      rest: false
    - kind: positional
      name: sock
      default: None
      rest: false
    - kind: positional
      name: unix
      default: None
      rest: false
    - kind: positional
      name: reuse_port
      default: 'False'
      rest: false
    - kind: positional
      name: loop
      default: None
      rest: false
    - kind: positional
      name: protocol
      default: <class 'sanic.server.protocols.http_protocol.HttpProtocol'>
      rest: false
    - kind: positional
      name: backlog
      default: '100'
      rest: false
    - kind: positional
      name: register_sys_signals
      default: 'True'
      rest: false
    - kind: positional
      name: run_multiple
      default: 'False'
      rest: false
    - kind: positional
      name: run_async
      default: 'False'
      rest: false
    - kind: positional
      name: connections
      default: None
      rest: false
    - kind: positional
      name: signal
      default: <sanic.models.server_types.Signal object at 0x7f13fccf4710>
      rest: false
    - kind: positional
      name: state
      default: None
      rest: false
    - kind: positional
      name: asyncio_server_kwargs
      default: None
      rest: false
    - kind: positional
      name: version
      default: '1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: try_use_uvloop
  kind: function
  ns: sanic.server
  description: Use uvloop instead of the default asyncio loop.
  summary: Use uvloop instead of the default asyncio loop
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: sanic.signals
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.signals
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GENERIC_SIGNAL_FORMAT
  kind: const
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.signals
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.signals
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RESERVED_NAMESPACES
  kind: const
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalGroup
  kind: class
  ns: sanic.signals
  description: A `RouteGroup` that is used to dispatch signals to handlers
  summary: A `RouteGroup` that is used to dispatch signals to handlers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: SignalGroup
      kind: return
  inherits_from:
  - <class 'sanic_routing.group.RouteGroup'>
- name: SignalGroup.depth
  kind: property
  ns: sanic.signals
  description: The number of parts in :py:attr:`parts`
  summary: The number of parts in :py:attr:`parts`
  signatures: null
  inherits_from: null
- name: SignalGroup.dynamic_path
  kind: property
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalGroup.finalize
  kind: method
  ns: sanic.signals
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalGroup.merge
  kind: method
  ns: sanic.signals
  description: |-
    The purpose of merge is to group routes with the same path, but
    declarared individually. In other words to group these:

    .. code-block:: python

        @app.get("/path/to")
        def handler1(...):
            ...

        @app.post("/path/to")
        def handler2(...):
            ...

    The other main purpose is to look for conflicts and
    raise ``RouteExists``

    A duplicate route is when:
    1. They have the same path and any overlapping methods; AND
    2. If they have requirements, they are the same

    :param group: Incoming route group
    :type group: RouteGroup
    :param overwrite: whether to allow an otherwise duplicate route group
        to overwrite the existing, if ``True`` will not raise exception
        on duplicates, defaults to False
    :type overwrite: bool, optional
    :param append: whether to allow an otherwise duplicate route group to
        append its routes to the existing route group, defaults to False
    :type append: bool, optional
    :raises RouteExists: Raised when there is a duplicate
  summary: The purpose of merge is to group routes with the same path, but
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: group
      default: null
      rest: false
    - kind: positional
      name: overwrite
      default: 'False'
      rest: false
    - kind: positional
      name: append
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalGroup.methods
  kind: property
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalGroup.passthru_properties
  kind: property
  ns: sanic.signals
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: SignalGroup.prioritize_routes
  kind: method
  ns: sanic.signals
  description: Sorts the routes in the group by priority
  summary: Sorts the routes in the group by priority
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalGroup.requirements
  kind: property
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalGroup.reset
  kind: method
  ns: sanic.signals
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalGroup.routes
  kind: property
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalHandler
  kind: callable
  ns: sanic.signals
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalWaiter
  kind: class
  ns: sanic.signals
  description: A record representing a future waiting for a signal
  summary: A record representing a future waiting for a signal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: signal
      default: null
      rest: false
    - kind: positional
      name: event_definition
      default: null
      rest: false
    - kind: positional
      name: trigger
      default: null
      rest: false
    - kind: positional
      name: requirements
      default: None
      rest: false
    - kind: positional
      name: exclusive
      default: 'True'
      rest: false
    - kind: positional
      name: future
      default: None
      rest: false
    - type: SignalWaiter
      kind: return
  inherits_from: null
- name: SignalWaiter.exclusive
  kind: property
  ns: sanic.signals
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: SignalWaiter.future
  kind: property
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalWaiter.matches
  kind: method
  ns: sanic.signals
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: event
      default: null
      rest: false
    - kind: positional
      name: condition
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SignalWaiter.requirements
  kind: property
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SignalWaiter.trigger
  kind: property
  ns: sanic.signals
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: SignalWaiter.wait
  kind: method
  ns: sanic.signals
  description: |-
    Block until the signal is next dispatched.

    Return the context of the signal dispatch, if any.
  summary: Block until the signal is next dispatched
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Tuple
  kind: callable
  ns: sanic.signals
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.signals
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: cast
  kind: function
  ns: sanic.signals
  description: |-
    Cast a value to a type.

    This returns the value unchanged.  To the type checker this
    signals that the return value has the designated type, but at
    runtime we intentionally don't check anything (we want this
    to be as fast as possible).
  summary: Cast a value to a type
  signatures:
  - - kind: positional
      name: typ
      default: null
      rest: false
    - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: dataclass
  kind: function
  ns: sanic.signals
  description: |-
    Add dunder methods based on the fields defined in the class.

    Examines PEP 526 __annotations__ to determine fields.

    If init is true, an __init__() method is added to the class. If repr
    is true, a __repr__() method is added. If order is true, rich
    comparison dunder methods are added. If unsafe_hash is true, a
    __hash__() method is added. If frozen is true, fields may not be
    assigned to after instance creation. If match_args is true, the
    __match_args__ tuple is added. If kw_only is true, then by default
    all fields are keyword-only. If slots is true, a new class with a
    __slots__ attribute is returned.
  summary: Add dunder methods based on the fields defined in the class
  signatures:
  - - kind: positional
      name: cls
      default: None
      rest: false
    - name: init
      default: 'True'
      rest: false
      kind: kw-only
    - name: repr
      default: 'True'
      rest: false
      kind: kw-only
    - name: eq
      default: 'True'
      rest: false
      kind: kw-only
    - name: order
      default: 'False'
      rest: false
      kind: kw-only
    - name: unsafe_hash
      default: 'False'
      rest: false
      kind: kw-only
    - name: frozen
      default: 'False'
      rest: false
      kind: kw-only
    - name: match_args
      default: 'True'
      rest: false
      kind: kw-only
    - name: kw_only
      default: 'False'
      rest: false
      kind: kw-only
    - name: slots
      default: 'False'
      rest: false
      kind: kw-only
    - name: weakref_slot
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: isawaitable
  kind: function
  ns: sanic.signals
  description: Return true if object can be passed to an ``await`` expression.
  summary: Return true if object can be passed to an ``await`` expression
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.signals
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: path_to_parts
  kind: function
  ns: sanic.signals
  description: |-
    OK > /foo/<id:int>/bar/<name:[A-z]+>
    OK > /foo/<unhashable:[A-Za-z0-9/]+>
    OK > /foo/<ext:file\.(?P<ext>txt)>/<ext:[a-z]>
    OK > /foo/<user>/<user:str>
    OK > /foo/<ext:[a-z]>/<ext:file\.(?P<ext>txt)d>
    NOT OK > /foo/<ext:file\.(?P<ext>txt)d>/<ext:[a-z]>
  summary: OK > /foo/<id:int>/bar/<name:[A-z]+>
  signatures:
  - - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: delimiter
      default: /
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.simple
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: create_simple_server
  kind: function
  ns: sanic.simple
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: directory
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.touchup
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.types
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: sanic.utils
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.utils
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: import_string
  kind: function
  ns: sanic.utils
  description: |-
    import a module or class by string path.

    :module_name: str with path of module or path to import and
    instantiate a class
    :returns: a module object or one instance from class if
    module_name is a valid path to class
  summary: import a module or class by string path
  signatures:
  - - kind: positional
      name: module_name
      default: null
      rest: false
    - kind: positional
      name: package
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: load_module_from_file_location
  kind: function
  ns: sanic.utils
  description: |-
    Returns loaded module provided as a file path.

    :param args:
        Corresponds to importlib.util.spec_from_file_location location
        parameters,but with this differences:
        - It has to be of a string or bytes type.
        - You can also use here environment variables
          in format ${some_env_var}.
          Mark that $some_env_var will not be resolved as environment variable.
    :encoding:
        If location parameter is of a bytes type, then use this encoding
        to decode it into string.
    :param args:
        Corresponds to the rest of importlib.util.spec_from_file_location
        parameters.
    :param kwargs:
        Corresponds to the rest of importlib.util.spec_from_file_location
        parameters.

    For example You can:

        some_module = load_module_from_file_location(
            "some_module_name",
            "/some/path/${some_env_var}"
        )
  summary: Returns loaded module provided as a file path
  signatures:
  - - kind: positional
      name: location
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf8
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: module_from_spec
  kind: function
  ns: sanic.utils
  description: Create a module based on the provided spec.
  summary: Create a module based on the provided spec
  signatures:
  - - kind: positional
      name: spec
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: os_environ
  kind: const
  ns: sanic.utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: re_findall
  kind: function
  ns: sanic.utils
  description: |-
    Return a list of all non-overlapping matches in the string.

    If one or more capturing groups are present in the pattern, return
    a list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result.
  summary: Return a list of all non-overlapping matches in the string
  signatures:
  - - kind: positional
      name: pattern
      default: null
      rest: false
    - kind: positional
      name: string
      default: null
      rest: false
    - kind: positional
      name: flags
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: spec_from_file_location
  kind: function
  ns: sanic.utils
  description: |-
    Return a module spec based on a file location.

    To indicate that the module is a package, set
    submodule_search_locations to a list of directory paths.  An
    empty list is sufficient, though its not otherwise useful to the
    import system.

    The loader must take a spec as its only __init__() arg.
  summary: Return a module spec based on a file location
  signatures:
  - - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: location
      default: None
      rest: false
    - name: loader
      default: None
      rest: false
      kind: kw-only
    - name: submodule_search_locations
      default: <object object at 0x7f13fe1e80c0>
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: str_to_bool
  kind: function
  ns: sanic.utils
  description: |-
    Takes string and tries to turn it into bool as human would do.

    If val is in case insensitive (
        "y", "yes", "yep", "yup", "t",
        "true", "on", "enable", "enabled", "1"
    ) returns True.
    If val is in case insensitive (
        "n", "no", "f", "false", "off", "disable", "disabled", "0"
    ) returns False.
    Else Raise ValueError.
  summary: Takes string and tries to turn it into bool as human would do
  signatures:
  - - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.views
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.views
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethodView
  kind: class
  ns: sanic.views
  description: |-
    Class based implementation for creating and grouping handlers

    Class-based views (CBVs) are an alternative to function-based views. They
    allow you to reuse common logic, and group related views, while keeping
    the flexibility of function-based views.


    To use a class-based view, subclass the method handler, and implement
    methods (`get`, `post`, `put`, `patch`, `delete`) for the class
    to correspond to each HTTP method you want to support.

    For example:

    ```python
    class DummyView(HTTPMethodView):
        def get(self, request: Request):
            return text('I am get method')

        def put(self, request: Request):
            return text('I am put method')
    ```

    If someone tries to use a non-implemented method, they will reveive a
    405 response.

    If you need any url params just include them in method signature, like
    you would for function-based views.

    ```python
    class DummyView(HTTPMethodView):
        def get(self, request: Request, my_param_here: str):
            return text(f"I am get method with {my_param_here}")
    ```

    Next, you need to attach the view to the app or blueprint. You can do this
    in the exact same way as you would for a function-based view, except you
    should you use `MyView.as_view()` instead of `my_view_handler`.

    ```python
    app.add_route(DummyView.as_view(), "/<my_param_here>")
    ```

    Alternatively, you can use the `attach` method:

    ```python
    DummyView.attach(app, "/<my_param_here>")
    ```

    Or, at the time of subclassing:

    ```python
    class DummyView(HTTPMethodView, attach=app, uri="/<my_param_here>"):
        ...
    ```

    To add a decorator, you can either:

    1. Add it to the `decorators` list on the class, which will apply it to
         all methods on the class; or
    2. Add it to the method directly, which will only apply it to that method.

    ```python
    class DummyView(HTTPMethodView):
        decorators = [my_decorator]
        ...

    # or

    class DummyView(HTTPMethodView):
        @my_decorator
        def get(self, request: Request):
            ...
    ```

    One catch is that you need to be mindful that the call inside the decorator
    may need to account for the `self` argument, which is passed to the method
    as the first argument. Alternatively, you may want to also mark your method
    as `staticmethod` to avoid this.

    Available attributes at the time of subclassing:
    - **attach** (Optional[Union[Sanic, Blueprint]]): The app or blueprint to
        attach the view to.
    - **uri** (str): The uri to attach the view to.
    - **methods** (Iterable[str]): The HTTP methods to attach the view to.
        Defaults to `{"GET"}`.
    - **host** (Optional[str]): The host to attach the view to.
    - **strict_slashes** (Optional[bool]): Whether to add a redirect rule for
        the uri with a trailing slash.
    - **version** (Optional[int]): The version to attach the view to.
    - **name** (Optional[str]): The name to attach the view to.
    - **stream** (bool): Whether the view is a stream handler.
    - **version_prefix** (str): The prefix to use for the version. Defaults
        to `"/v"`.
  summary: Class based implementation for creating and grouping handlers
  signatures:
  - - type: HTTPMethodView
      kind: return
  inherits_from: null
- name: HTTPMethodView.as_view
  kind: function
  ns: sanic.views
  description: |-
    Return view function for use with the routing system, that dispatches request to appropriate handler method.

    If you need to pass arguments to the class's constructor, you can
    pass the arguments to `as_view` and they will be passed to the class
    `__init__` method.

    Args:
        *class_args: Variable length argument list for the class instantiation.
        **class_kwargs: Arbitrary keyword arguments for the class instantiation.

    Returns:
        RouteHandler: The view function.

    Examples:
        ```python
        class DummyView(HTTPMethodView):
            def __init__(self, foo: MyFoo):
                self.foo = foo

            async def get(self, request: Request):
                return text(self.foo.bar)

        app.add_route(DummyView.as_view(foo=MyFoo()), "/")
        ```
  summary: Return view function for use with the routing system, that dispatches request to appropriate handler method
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethodView.attach
  kind: function
  ns: sanic.views
  description: |-
    Attaches the view to a Sanic app or Blueprint at the specified URI.

    Args:
        cls: The class that this method is part of.
        to (Union[Sanic, Blueprint]): The Sanic application or Blueprint to attach to.
        uri (str): The URI to bind the view to.
        methods (Iterable[str], optional): A collection of HTTP methods that the view should respond to. Defaults to `frozenset({"GET"})`.
        host (Optional[str], optional): A specific host or hosts to bind the view to. Defaults to `None`.
        strict_slashes (Optional[bool], optional): Enforce or not the trailing slash. Defaults to `None`.
        version (Optional[int], optional): Version of the API if versioning is used. Defaults to `None`.
        name (Optional[str], optional): Unique name for the route. Defaults to `None`.
        stream (bool, optional): Enable or disable streaming for the view. Defaults to `False`.
        version_prefix (str, optional): The prefix for the version, if versioning is used. Defaults to `"/v"`.
  summary: Attaches the view to a Sanic app or Blueprint at the specified URI
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: to
      default: null
      rest: false
    - kind: positional
      name: uri
      default: null
      rest: false
    - kind: positional
      name: methods
      default: frozenset({'GET'})
      rest: false
    - kind: positional
      name: host
      default: None
      rest: false
    - kind: positional
      name: strict_slashes
      default: None
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: stream
      default: 'False'
      rest: false
    - kind: positional
      name: version_prefix
      default: /v
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HTTPMethodView.decorators
  kind: property
  ns: sanic.views
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: HTTPMethodView.dispatch_request
  kind: method
  ns: sanic.views
  description: Dispatch request to appropriate handler method.
  summary: Dispatch request to appropriate handler method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Iterable
  kind: callable
  ns: sanic.views
  description: A generic version of collections.abc.Iterable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.views
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.views
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RouteHandler
  kind: callable
  ns: sanic.views
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TYPE_CHECKING
  kind: const
  ns: sanic.views
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.views
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.views
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: stream
  kind: function
  ns: sanic.views
  description: Decorator to mark a function as a stream handler.
  summary: Decorator to mark a function as a stream handler
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: sanic.worker
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: constants
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProcessState
  kind: class
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: ProcessState
      kind: return
  inherits_from:
  - <enum 'IntEnum'>
  - <class 'int'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: ProcessState.ACKED
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.COMPLETED
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.FAILED
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.IDLE
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.JOINED
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.NONE
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.RESTARTING
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.STARTED
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.STARTING
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.TERMINATED
  kind: property
  ns: sanic.worker
  description: Process states.
  summary: Process states
  signatures: null
  inherits_from: null
- name: ProcessState.as_integer_ratio
  kind: callable
  ns: sanic.worker
  description: |-
    Return integer ratio.

    Return a pair of integers, whose ratio is exactly equal to the original int
    and with a positive denominator.

    >>> (10).as_integer_ratio()
    (10, 1)
    >>> (-10).as_integer_ratio()
    (-10, 1)
    >>> (0).as_integer_ratio()
    (0, 1)
  summary: Return integer ratio
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ProcessState.bit_count
  kind: callable
  ns: sanic.worker
  description: |-
    Number of ones in the binary representation of the absolute value of self.

    Also known as the population count.

    >>> bin(13)
    '0b1101'
    >>> (13).bit_count()
    3
  summary: Number of ones in the binary representation of the absolute value of self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ProcessState.bit_length
  kind: callable
  ns: sanic.worker
  description: |-
    Number of bits necessary to represent self in binary.

    >>> bin(37)
    '0b100101'
    >>> (37).bit_length()
    6
  summary: Number of bits necessary to represent self in binary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ProcessState.conjugate
  kind: callable
  ns: sanic.worker
  description: Returns self, the complex conjugate of any int.
  summary: Returns self, the complex conjugate of any int
  signatures: null
  inherits_from: null
- name: ProcessState.denominator
  kind: property
  ns: sanic.worker
  description: the denominator of a rational number in lowest terms
  summary: the denominator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: ProcessState.imag
  kind: property
  ns: sanic.worker
  description: the imaginary part of a complex number
  summary: the imaginary part of a complex number
  signatures: null
  inherits_from: null
- name: ProcessState.numerator
  kind: property
  ns: sanic.worker
  description: the numerator of a rational number in lowest terms
  summary: the numerator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: ProcessState.real
  kind: property
  ns: sanic.worker
  description: the real part of a complex number
  summary: the real part of a complex number
  signatures: null
  inherits_from: null
- name: ProcessState.to_bytes
  kind: callable
  ns: sanic.worker
  description: |-
    Return an array of bytes representing an integer.

    length
      Length of bytes object to use.  An OverflowError is raised if the
      integer is not representable with the given number of bytes.  Default
      is length 1.
    byteorder
      The byte order used to represent the integer.  If byteorder is 'big',
      the most significant byte is at the beginning of the byte array.  If
      byteorder is 'little', the most significant byte is at the end of the
      byte array.  To request the native byte order of the host system, use
      `sys.byteorder' as the byte order value.  Default is to use 'big'.
    signed
      Determines whether two's complement is used to represent the integer.
      If signed is False and a negative integer is given, an OverflowError
      is raised.
  summary: Return an array of bytes representing an integer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: length
      default: '1'
      rest: false
    - kind: positional
      name: byteorder
      default: big
      rest: false
    - name: signed
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder
  kind: class
  ns: sanic.worker
  description: Available restart orders.
  summary: Available restart orders
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: RestartOrder
      kind: return
  inherits_from:
  - <enum 'UpperStrEnum'>
  - <enum 'StrEnum'>
  - <class 'str'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: RestartOrder.SHUTDOWN_FIRST
  kind: property
  ns: sanic.worker
  description: Available restart orders.
  summary: Available restart orders
  signatures: null
  inherits_from: null
- name: RestartOrder.STARTUP_FIRST
  kind: property
  ns: sanic.worker
  description: Available restart orders.
  summary: Available restart orders
  signatures: null
  inherits_from: null
- name: RestartOrder.capitalize
  kind: callable
  ns: sanic.worker
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.casefold
  kind: callable
  ns: sanic.worker
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.center
  kind: callable
  ns: sanic.worker
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.count
  kind: callable
  ns: sanic.worker
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: RestartOrder.encode
  kind: callable
  ns: sanic.worker
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: utf-8
      rest: false
    - kind: positional
      name: errors
      default: strict
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.endswith
  kind: callable
  ns: sanic.worker
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: RestartOrder.expandtabs
  kind: callable
  ns: sanic.worker
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tabsize
      default: '8'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.find
  kind: callable
  ns: sanic.worker
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: RestartOrder.format
  kind: callable
  ns: sanic.worker
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: RestartOrder.format_map
  kind: callable
  ns: sanic.worker
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: RestartOrder.index
  kind: callable
  ns: sanic.worker
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: RestartOrder.isalnum
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.isalpha
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.isascii
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.isdecimal
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.isdigit
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.isidentifier
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.islower
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.isnumeric
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.isprintable
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.isspace
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.istitle
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.isupper
  kind: callable
  ns: sanic.worker
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.join
  kind: callable
  ns: sanic.worker
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.ljust
  kind: callable
  ns: sanic.worker
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.lower
  kind: callable
  ns: sanic.worker
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.lstrip
  kind: callable
  ns: sanic.worker
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.partition
  kind: callable
  ns: sanic.worker
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.removeprefix
  kind: callable
  ns: sanic.worker
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.removesuffix
  kind: callable
  ns: sanic.worker
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: suffix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.replace
  kind: callable
  ns: sanic.worker
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: old
      default: null
      rest: false
    - kind: positional
      name: new
      default: null
      rest: false
    - kind: positional
      name: count
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.rfind
  kind: callable
  ns: sanic.worker
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: RestartOrder.rindex
  kind: callable
  ns: sanic.worker
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: RestartOrder.rjust
  kind: callable
  ns: sanic.worker
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - kind: positional
      name: fillchar
      default: ' '
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.rpartition
  kind: callable
  ns: sanic.worker
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.rsplit
  kind: callable
  ns: sanic.worker
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.rstrip
  kind: callable
  ns: sanic.worker
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.split
  kind: callable
  ns: sanic.worker
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sep
      default: None
      rest: false
    - kind: positional
      name: maxsplit
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.splitlines
  kind: callable
  ns: sanic.worker
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: keepends
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.startswith
  kind: callable
  ns: sanic.worker
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: RestartOrder.strip
  kind: callable
  ns: sanic.worker
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: chars
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.swapcase
  kind: callable
  ns: sanic.worker
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.title
  kind: callable
  ns: sanic.worker
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.translate
  kind: callable
  ns: sanic.worker
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: table
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.upper
  kind: callable
  ns: sanic.worker
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RestartOrder.zfill
  kind: callable
  ns: sanic.worker
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: inspector
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Connection
  kind: class
  ns: sanic.worker
  description: |-
    Connection class based on an arbitrary file descriptor (Unix only), or
    a socket handle (Windows).
  summary: Connection class based on an arbitrary file descriptor (Unix only), or
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: handle
      default: null
      rest: false
    - kind: positional
      name: readable
      default: 'True'
      rest: false
    - kind: positional
      name: writable
      default: 'True'
      rest: false
    - type: Connection
      kind: return
  inherits_from:
  - <class 'multiprocessing.connection._ConnectionBase'>
- name: Connection.close
  kind: method
  ns: sanic.worker
  description: Close the connection
  summary: Close the connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Connection.closed
  kind: property
  ns: sanic.worker
  description: True if the connection is closed
  summary: True if the connection is closed
  signatures: null
  inherits_from: null
- name: Connection.fileno
  kind: method
  ns: sanic.worker
  description: File descriptor or handle of the connection
  summary: File descriptor or handle of the connection
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Connection.poll
  kind: method
  ns: sanic.worker
  description: Whether there is any input available to be read
  summary: Whether there is any input available to be read
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: '0.0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Connection.readable
  kind: property
  ns: sanic.worker
  description: True if the connection is readable
  summary: True if the connection is readable
  signatures: null
  inherits_from: null
- name: Connection.recv
  kind: method
  ns: sanic.worker
  description: Receive a (picklable) object
  summary: Receive a (picklable) object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Connection.recv_bytes
  kind: method
  ns: sanic.worker
  description: Receive bytes data as a bytes object.
  summary: Receive bytes data as a bytes object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: maxlength
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Connection.recv_bytes_into
  kind: method
  ns: sanic.worker
  description: |-
    Receive bytes data into a writeable bytes-like object.
    Return the number of bytes read.
  summary: Receive bytes data into a writeable bytes-like object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buf
      default: null
      rest: false
    - kind: positional
      name: offset
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Connection.send
  kind: method
  ns: sanic.worker
  description: Send a (picklable) object
  summary: Send a (picklable) object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Connection.send_bytes
  kind: method
  ns: sanic.worker
  description: Send the bytes data from a bytes-like object
  summary: Send the bytes data from a bytes-like object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buf
      default: null
      rest: false
    - kind: positional
      name: offset
      default: '0'
      rest: false
    - kind: positional
      name: size
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Connection.writable
  kind: property
  ns: sanic.worker
  description: True if the connection is writable
  summary: True if the connection is writable
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.worker
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mapping
  kind: callable
  ns: sanic.worker
  description: A generic version of collections.abc.Mapping.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.worker
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime
  kind: class
  ns: sanic.worker
  description: |-
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
  summary: datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
  signatures: null
  inherits_from:
  - <class 'datetime.date'>
- name: datetime.astimezone
  kind: callable
  ns: sanic.worker
  description: tz -> convert to local time in new timezone tz
  summary: tz -> convert to local time in new timezone tz
  signatures: null
  inherits_from: null
- name: datetime.ctime
  kind: callable
  ns: sanic.worker
  description: Return ctime() style string.
  summary: Return ctime() style string
  signatures: null
  inherits_from: null
- name: datetime.date
  kind: callable
  ns: sanic.worker
  description: Return date object with same year, month and day.
  summary: Return date object with same year, month and day
  signatures: null
  inherits_from: null
- name: datetime.day
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.dst
  kind: callable
  ns: sanic.worker
  description: Return self.tzinfo.dst(self).
  summary: Return self
  signatures: null
  inherits_from: null
- name: datetime.fold
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.hour
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.isocalendar
  kind: callable
  ns: sanic.worker
  description: Return a named tuple containing ISO year, week number, and weekday.
  summary: Return a named tuple containing ISO year, week number, and weekday
  signatures: null
  inherits_from: null
- name: datetime.isoformat
  kind: callable
  ns: sanic.worker
  description: |-
    [sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].
    sep is used to separate the year from the time, and defaults to 'T'.
    The optional argument timespec specifies the number of additional terms
    of the time to include. Valid options are 'auto', 'hours', 'minutes',
    'seconds', 'milliseconds' and 'microseconds'.
  summary: '[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS['
  signatures: null
  inherits_from: null
- name: datetime.isoweekday
  kind: callable
  ns: sanic.worker
  description: |-
    Return the day of the week represented by the date.
    Monday == 1 ... Sunday == 7
  summary: Return the day of the week represented by the date
  signatures: null
  inherits_from: null
- name: datetime.max
  kind: property
  ns: sanic.worker
  description: |-
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
  summary: datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
  signatures: null
  inherits_from: null
- name: datetime.microsecond
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.min
  kind: property
  ns: sanic.worker
  description: |-
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
  summary: datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
  signatures: null
  inherits_from: null
- name: datetime.minute
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.month
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.replace
  kind: callable
  ns: sanic.worker
  description: Return datetime with new specified fields.
  summary: Return datetime with new specified fields
  signatures: null
  inherits_from: null
- name: datetime.resolution
  kind: property
  ns: sanic.worker
  description: |-
    Difference between two datetime values.

    timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)

    All arguments are optional and default to 0.
    Arguments may be integers or floats, and may be positive or negative.
  summary: Difference between two datetime values
  signatures: null
  inherits_from: null
- name: datetime.second
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.strftime
  kind: callable
  ns: sanic.worker
  description: format -> strftime() style string.
  summary: format -> strftime() style string
  signatures: null
  inherits_from: null
- name: datetime.time
  kind: callable
  ns: sanic.worker
  description: Return time object with same time but with tzinfo=None.
  summary: Return time object with same time but with tzinfo=None
  signatures: null
  inherits_from: null
- name: datetime.timestamp
  kind: callable
  ns: sanic.worker
  description: Return POSIX timestamp as float.
  summary: Return POSIX timestamp as float
  signatures: null
  inherits_from: null
- name: datetime.timetuple
  kind: callable
  ns: sanic.worker
  description: Return time tuple, compatible with time.localtime().
  summary: Return time tuple, compatible with time
  signatures: null
  inherits_from: null
- name: datetime.timetz
  kind: callable
  ns: sanic.worker
  description: Return time object with same time and tzinfo.
  summary: Return time object with same time and tzinfo
  signatures: null
  inherits_from: null
- name: datetime.toordinal
  kind: callable
  ns: sanic.worker
  description: Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.
  summary: Return proleptic Gregorian ordinal
  signatures: null
  inherits_from: null
- name: datetime.tzinfo
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.tzname
  kind: callable
  ns: sanic.worker
  description: Return self.tzinfo.tzname(self).
  summary: Return self
  signatures: null
  inherits_from: null
- name: datetime.utcoffset
  kind: callable
  ns: sanic.worker
  description: Return self.tzinfo.utcoffset(self).
  summary: Return self
  signatures: null
  inherits_from: null
- name: datetime.utctimetuple
  kind: callable
  ns: sanic.worker
  description: Return UTC time tuple, compatible with time.localtime().
  summary: Return UTC time tuple, compatible with time
  signatures: null
  inherits_from: null
- name: datetime.weekday
  kind: callable
  ns: sanic.worker
  description: |-
    Return the day of the week represented by the date.
    Monday == 0 ... Sunday == 6
  summary: Return the day of the week represented by the date
  signatures: null
  inherits_from: null
- name: datetime.year
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: environ
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: isawaitable
  kind: function
  ns: sanic.worker
  description: Return true if object can be passed to an ``await`` expression.
  summary: Return true if object can be passed to an ``await`` expression
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: json
  kind: function
  ns: sanic.worker
  description: |-
    Returns response object with body in json format.

    Args:
        body (Any): Response data to be serialized.
        status (int, optional): HTTP response code. Defaults to `200`.
        headers (Dict[str, str], optional): Custom HTTP headers. Defaults to `None`.
        content_type (str, optional): The content type (string) of the response. Defaults to `"application/json"`.
        dumps (Callable[..., str], optional): A custom json dumps function. Defaults to `None`.
        **kwargs (Any): Remaining arguments that are passed to the json encoder.

    Returns:
        JSONResponse: A response object with body in json format.
  summary: Returns response object with body in json format
  signatures:
  - - kind: positional
      name: body
      default: null
      rest: false
    - kind: positional
      name: status
      default: '200'
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: application/json
      rest: false
    - kind: positional
      name: dumps
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: loader
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.worker
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DEFAULT_APP_NAME
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.worker
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MkcertCreator
  kind: class
  ns: sanic.worker
  description: |-
    Helper class that provides a standard way to create an ABC using
    inheritance.
  summary: Helper class that provides a standard way to create an ABC using
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: cert
      default: null
      rest: false
    - type: MkcertCreator
      kind: return
  inherits_from:
  - <class 'sanic.http.tls.creators.CertCreator'>
  - <class 'abc.ABC'>
- name: MkcertCreator.check_supported
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MkcertCreator.generate_cert
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: localhost
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MkcertCreator.select
  kind: function
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: cert_creator
      default: null
      rest: false
    - kind: positional
      name: local_tls_key
      default: null
      rest: false
    - kind: positional
      name: local_tls_cert
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.worker
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TYPE_CHECKING
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TrustmeCreator
  kind: class
  ns: sanic.worker
  description: |-
    Helper class that provides a standard way to create an ABC using
    inheritance.
  summary: Helper class that provides a standard way to create an ABC using
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: cert
      default: null
      rest: false
    - type: TrustmeCreator
      kind: return
  inherits_from:
  - <class 'sanic.http.tls.creators.CertCreator'>
  - <class 'abc.ABC'>
- name: TrustmeCreator.check_supported
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TrustmeCreator.generate_cert
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: localhost
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TrustmeCreator.select
  kind: function
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: app
      default: null
      rest: false
    - kind: positional
      name: cert_creator
      default: null
      rest: false
    - kind: positional
      name: local_tls_key
      default: null
      rest: false
    - kind: positional
      name: local_tls_cert
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.worker
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: cast
  kind: function
  ns: sanic.worker
  description: |-
    Cast a value to a type.

    This returns the value unchanged.  To the type checker this
    signals that the return value has the designated type, but at
    runtime we intentionally don't check anything (we want this
    to be as fast as possible).
  summary: Cast a value to a type
  signatures:
  - - kind: positional
      name: typ
      default: null
      rest: false
    - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: import_module
  kind: function
  ns: sanic.worker
  description: |-
    Import a module.

    The 'package' argument is required when performing a relative import. It
    specifies the package to use as the anchor point from which to resolve the
    relative import to an absolute import.
  summary: Import a module
  signatures:
  - - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: package
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: isfunction
  kind: function
  ns: sanic.worker
  description: |-
    Return true if the object is a user-defined function.

    Function objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this function was defined
        __code__        code object containing compiled function bytecode
        __defaults__    tuple of any default values for arguments
        __globals__     global namespace in which this function was defined
        __annotations__ dict of parameter annotations
        __kwdefaults__  dict of keyword only parameters with defaults
  summary: Return true if the object is a user-defined function
  signatures:
  - - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: process_to_context
  kind: function
  ns: sanic.worker
  description: Process app.run ssl argument from easy formats to full SSLContext.
  summary: Process app
  signatures:
  - - kind: positional
      name: ssldef
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: manager
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.worker
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.worker
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Iterable
  kind: callable
  ns: sanic.worker
  description: A generic version of collections.abc.Iterable.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.worker
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonitorCycle
  kind: class
  ns: sanic.worker
  description: Enum where members are also (and must be) ints
  summary: Enum where members are also (and must be) ints
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: MonitorCycle
      kind: return
  inherits_from:
  - <enum 'IntEnum'>
  - <class 'int'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: MonitorCycle.BREAK
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MonitorCycle.CONTINUE
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MonitorCycle.as_integer_ratio
  kind: callable
  ns: sanic.worker
  description: |-
    Return integer ratio.

    Return a pair of integers, whose ratio is exactly equal to the original int
    and with a positive denominator.

    >>> (10).as_integer_ratio()
    (10, 1)
    >>> (-10).as_integer_ratio()
    (-10, 1)
    >>> (0).as_integer_ratio()
    (0, 1)
  summary: Return integer ratio
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonitorCycle.bit_count
  kind: callable
  ns: sanic.worker
  description: |-
    Number of ones in the binary representation of the absolute value of self.

    Also known as the population count.

    >>> bin(13)
    '0b1101'
    >>> (13).bit_count()
    3
  summary: Number of ones in the binary representation of the absolute value of self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonitorCycle.bit_length
  kind: callable
  ns: sanic.worker
  description: |-
    Number of bits necessary to represent self in binary.

    >>> bin(37)
    '0b100101'
    >>> (37).bit_length()
    6
  summary: Number of bits necessary to represent self in binary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MonitorCycle.conjugate
  kind: callable
  ns: sanic.worker
  description: Returns self, the complex conjugate of any int.
  summary: Returns self, the complex conjugate of any int
  signatures: null
  inherits_from: null
- name: MonitorCycle.denominator
  kind: property
  ns: sanic.worker
  description: the denominator of a rational number in lowest terms
  summary: the denominator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: MonitorCycle.imag
  kind: property
  ns: sanic.worker
  description: the imaginary part of a complex number
  summary: the imaginary part of a complex number
  signatures: null
  inherits_from: null
- name: MonitorCycle.numerator
  kind: property
  ns: sanic.worker
  description: the numerator of a rational number in lowest terms
  summary: the numerator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: MonitorCycle.real
  kind: property
  ns: sanic.worker
  description: the real part of a complex number
  summary: the real part of a complex number
  signatures: null
  inherits_from: null
- name: MonitorCycle.to_bytes
  kind: callable
  ns: sanic.worker
  description: |-
    Return an array of bytes representing an integer.

    length
      Length of bytes object to use.  An OverflowError is raised if the
      integer is not representable with the given number of bytes.  Default
      is length 1.
    byteorder
      The byte order used to represent the integer.  If byteorder is 'big',
      the most significant byte is at the beginning of the byte array.  If
      byteorder is 'little', the most significant byte is at the end of the
      byte array.  To request the native byte order of the host system, use
      `sys.byteorder' as the byte order value.  Default is to use 'big'.
    signed
      Determines whether two's complement is used to represent the integer.
      If signed is False and a negative integer is given, an OverflowError
      is raised.
  summary: Return an array of bytes representing an integer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: length
      default: '1'
      rest: false
    - kind: positional
      name: byteorder
      default: big
      rest: false
    - name: signed
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: OS_IS_WINDOWS
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.worker
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Restarter
  kind: class
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - type: Restarter
      kind: return
  inherits_from: null
- name: Restarter.restart
  kind: method
  ns: sanic.worker
  description: |-
    Restart the worker processes.

    Args:
        process_names (Optional[List[str]], optional): The names of the processes to restart.
            If `None`, then all processes will be restarted. Defaults to `None`.
        restart_order (RestartOrder, optional): The order in which to restart the processes.
            Defaults to `RestartOrder.SHUTDOWN_FIRST`.
  summary: Restart the worker processes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: transient_processes
      default: null
      rest: false
    - kind: positional
      name: durable_processes
      default: null
      rest: false
    - kind: positional
      name: process_names
      default: None
      rest: false
    - kind: positional
      name: restart_order
      default: SHUTDOWN_FIRST
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SIGINT
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SIGKILL
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SIGTERM
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Signals
  kind: class
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Signals
      kind: return
  inherits_from:
  - <enum 'IntEnum'>
  - <class 'int'>
  - <enum 'ReprEnum'>
  - <enum 'Enum'>
- name: Signals.SIGABRT
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGALRM
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGBUS
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGCHLD
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGCONT
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGFPE
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGHUP
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGILL
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGINT
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGIO
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGKILL
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGPIPE
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGPROF
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGPWR
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGQUIT
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGRTMAX
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGRTMIN
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGSEGV
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGSTKFLT
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGSTOP
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGSYS
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGTERM
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGTRAP
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGTSTP
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGTTIN
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGTTOU
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGURG
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGUSR1
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGUSR2
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGVTALRM
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGWINCH
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGXCPU
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.SIGXFSZ
  kind: property
  ns: sanic.worker
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: Signals.as_integer_ratio
  kind: callable
  ns: sanic.worker
  description: |-
    Return integer ratio.

    Return a pair of integers, whose ratio is exactly equal to the original int
    and with a positive denominator.

    >>> (10).as_integer_ratio()
    (10, 1)
    >>> (-10).as_integer_ratio()
    (-10, 1)
    >>> (0).as_integer_ratio()
    (0, 1)
  summary: Return integer ratio
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signals.bit_count
  kind: callable
  ns: sanic.worker
  description: |-
    Number of ones in the binary representation of the absolute value of self.

    Also known as the population count.

    >>> bin(13)
    '0b1101'
    >>> (13).bit_count()
    3
  summary: Number of ones in the binary representation of the absolute value of self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signals.bit_length
  kind: callable
  ns: sanic.worker
  description: |-
    Number of bits necessary to represent self in binary.

    >>> bin(37)
    '0b100101'
    >>> (37).bit_length()
    6
  summary: Number of bits necessary to represent self in binary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signals.conjugate
  kind: callable
  ns: sanic.worker
  description: Returns self, the complex conjugate of any int.
  summary: Returns self, the complex conjugate of any int
  signatures: null
  inherits_from: null
- name: Signals.denominator
  kind: property
  ns: sanic.worker
  description: the denominator of a rational number in lowest terms
  summary: the denominator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: Signals.imag
  kind: property
  ns: sanic.worker
  description: the imaginary part of a complex number
  summary: the imaginary part of a complex number
  signatures: null
  inherits_from: null
- name: Signals.numerator
  kind: property
  ns: sanic.worker
  description: the numerator of a rational number in lowest terms
  summary: the numerator of a rational number in lowest terms
  signatures: null
  inherits_from: null
- name: Signals.real
  kind: property
  ns: sanic.worker
  description: the real part of a complex number
  summary: the real part of a complex number
  signatures: null
  inherits_from: null
- name: Signals.to_bytes
  kind: callable
  ns: sanic.worker
  description: |-
    Return an array of bytes representing an integer.

    length
      Length of bytes object to use.  An OverflowError is raised if the
      integer is not representable with the given number of bytes.  Default
      is length 1.
    byteorder
      The byte order used to represent the integer.  If byteorder is 'big',
      the most significant byte is at the beginning of the byte array.  If
      byteorder is 'little', the most significant byte is at the end of the
      byte array.  To request the native byte order of the host system, use
      `sys.byteorder' as the byte order value.  Default is to use 'big'.
    signed
      Determines whether two's complement is used to represent the integer.
      If signed is False and a negative integer is given, an OverflowError
      is raised.
  summary: Return an array of bytes representing an integer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: length
      default: '1'
      rest: false
    - kind: positional
      name: byteorder
      default: big
      rest: false
    - name: signed
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Tuple
  kind: callable
  ns: sanic.worker
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Worker
  kind: class
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: ident
      default: null
      rest: false
    - kind: positional
      name: serve
      default: null
      rest: false
    - kind: positional
      name: server_settings
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - kind: positional
      name: worker_state
      default: null
      rest: false
    - kind: positional
      name: num
      default: '1'
      rest: false
    - kind: positional
      name: restartable
      default: 'False'
      rest: false
    - kind: positional
      name: tracked
      default: 'True'
      rest: false
    - kind: positional
      name: auto_start
      default: 'True'
      rest: false
    - type: Worker
      kind: return
  inherits_from: null
- name: Worker.WORKER_PREFIX
  kind: property
  ns: sanic.worker
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Worker.create_process
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Worker.has_alive_processes
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerProcess
  kind: class
  ns: sanic.worker
  description: A worker process.
  summary: A worker process
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: factory
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - kind: positional
      name: kwargs
      default: null
      rest: false
    - kind: positional
      name: worker_state
      default: null
      rest: false
    - kind: positional
      name: restartable
      default: 'False'
      rest: false
    - type: WorkerProcess
      kind: return
  inherits_from: null
- name: WorkerProcess.SERVER_LABEL
  kind: property
  ns: sanic.worker
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: WorkerProcess.THRESHOLD
  kind: property
  ns: sanic.worker
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WorkerProcess.exit
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerProcess.exitcode
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WorkerProcess.is_alive
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerProcess.join
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerProcess.pid
  kind: property
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WorkerProcess.restart
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: restart_order
      default: SHUTDOWN_FIRST
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerProcess.set_state
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: state
      default: null
      rest: false
    - kind: positional
      name: force
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerProcess.spawn
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerProcess.start
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerProcess.terminate
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: choice
  kind: method
  ns: sanic.worker
  description: Choose a random element from a non-empty sequence.
  summary: Choose a random element from a non-empty sequence
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: seq
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: signal_func
  kind: function
  ns: sanic.worker
  description: |-
    Set the action for the given signal.

    The action can be SIG_DFL, SIG_IGN, or a callable Python object.
    The previous action is returned.  See getsignal() for possible return values.

    *** IMPORTANT NOTICE ***
    A signal handler function is called with two arguments:
    the first is the signal number, the second is the interrupted stack frame.
  summary: Set the action for the given signal
  signatures:
  - - kind: positional
      name: signalnum
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: multiplexer
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Callable
  kind: callable
  ns: sanic.worker
  description: |-
    Deprecated alias to collections.abc.Callable.

    Callable[[int], str] signifies a function that takes a single
    parameter of type int and returns a str.

    The subscription syntax must always be used with exactly two
    values: the argument list and the return type.
    The argument list must be a list of types, a ParamSpec,
    Concatenate or ellipsis. The return type must be a single type.

    There is no syntax to indicate optional or keyword arguments;
    such function types are rarely used as callback types.
  summary: Deprecated alias to collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.worker
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.worker
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerState
  kind: class
  ns: sanic.worker
  description: |-
    A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.
  summary: A Mapping is a generic container for associating key/value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: state
      default: null
      rest: false
    - kind: positional
      name: current
      default: null
      rest: false
    - type: WorkerState
      kind: return
  inherits_from:
  - <class 'collections.abc.Mapping'>
  - <class 'collections.abc.Collection'>
  - <class 'collections.abc.Sized'>
  - <class 'collections.abc.Iterable'>
  - <class 'collections.abc.Container'>
- name: WorkerState.RESTRICTED
  kind: property
  ns: sanic.worker
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: WorkerState.full
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerState.get
  kind: method
  ns: sanic.worker
  description: D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerState.items
  kind: method
  ns: sanic.worker
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerState.keys
  kind: method
  ns: sanic.worker
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerState.pop
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerState.update
  kind: method
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: mapping
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WorkerState.values
  kind: method
  ns: sanic.worker
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: environ
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: process
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.worker
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SIGINT
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.worker
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_now
  kind: function
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: signature
  kind: function
  ns: sanic.worker
  description: Get a signature object for the passed callable.
  summary: Get a signature object for the passed callable
  signatures:
  - - kind: positional
      name: obj
      default: null
      rest: false
    - name: follow_wrapped
      default: 'True'
      rest: false
      kind: kw-only
    - name: globals
      default: None
      rest: false
      kind: kw-only
    - name: locals
      default: None
      rest: false
      kind: kw-only
    - name: eval_str
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: timezone
  kind: class
  ns: sanic.worker
  description: Fixed offset from UTC implementation of tzinfo.
  summary: Fixed offset from UTC implementation of tzinfo
  signatures: null
  inherits_from:
  - <class 'datetime.tzinfo'>
- name: timezone.dst
  kind: callable
  ns: sanic.worker
  description: Return None.
  summary: Return None
  signatures: null
  inherits_from: null
- name: timezone.fromutc
  kind: callable
  ns: sanic.worker
  description: datetime in UTC -> datetime in local time.
  summary: datetime in UTC -> datetime in local time
  signatures: null
  inherits_from: null
- name: timezone.max
  kind: property
  ns: sanic.worker
  description: Fixed offset from UTC implementation of tzinfo.
  summary: Fixed offset from UTC implementation of tzinfo
  signatures: null
  inherits_from: null
- name: timezone.min
  kind: property
  ns: sanic.worker
  description: Fixed offset from UTC implementation of tzinfo.
  summary: Fixed offset from UTC implementation of tzinfo
  signatures: null
  inherits_from: null
- name: timezone.tzname
  kind: callable
  ns: sanic.worker
  description: If name is specified when timezone is created, returns the name.  Otherwise returns offset as 'UTC(+|-)HH:MM'.
  summary: If name is specified when timezone is created, returns the name
  signatures: null
  inherits_from: null
- name: timezone.utc
  kind: property
  ns: sanic.worker
  description: Fixed offset from UTC implementation of tzinfo.
  summary: Fixed offset from UTC implementation of tzinfo
  signatures: null
  inherits_from: null
- name: timezone.utcoffset
  kind: callable
  ns: sanic.worker
  description: Return fixed offset.
  summary: Return fixed offset
  signatures: null
  inherits_from: null
- name: reloader
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.worker
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SIGINT
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SIGTERM
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.worker
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: annotations
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: new_event_loop
  kind: function
  ns: sanic.worker
  description: Equivalent to calling get_event_loop_policy().new_event_loop().
  summary: Equivalent to calling get_event_loop_policy()
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: signal_func
  kind: function
  ns: sanic.worker
  description: |-
    Set the action for the given signal.

    The action can be SIG_DFL, SIG_IGN, or a callable Python object.
    The previous action is returned.  See getsignal() for possible return values.

    *** IMPORTANT NOTICE ***
    A signal handler function is called with two arguments:
    the first is the signal number, the second is the interrupted stack frame.
  summary: Set the action for the given signal
  signatures:
  - - kind: positional
      name: signalnum
      default: null
      rest: false
    - kind: positional
      name: handler
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: trigger_events
  kind: function
  ns: sanic.worker
  description: |-
    Trigger event callbacks (functions or async)

    Args:
        events (Optional[Iterable[Callable[..., Any]]]): [description]
        loop ([type]): [description]
        app (Optional[Sanic], optional): [description]. Defaults to None.
  summary: Trigger event callbacks (functions or async)
  signatures:
  - - kind: positional
      name: events
      default: null
      rest: false
    - kind: positional
      name: loop
      default: null
      rest: false
    - kind: positional
      name: app
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: restarter
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.worker
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.worker
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Set
  kind: callable
  ns: sanic.worker
  description: A generic version of set.
  summary: A generic version of set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: serve
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.worker
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.worker
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Optional
  kind: callable
  ns: sanic.worker
  description: Optional[X] is equivalent to Union[X, None].
  summary: Optional[X] is equivalent to Union[X, None]
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Type
  kind: callable
  ns: sanic.worker
  description: |-
    Deprecated alias to builtins.type.

    builtins.type or typing.Type can be used to annotate class objects.
    For example, suppose we have the following classes::

        class User: ...  # Abstract base for User classes
        class BasicUser(User): ...
        class ProUser(User): ...
        class TeamUser(User): ...

    And a function that takes a class argument that's a subclass of
    User and returns an instance of the corresponding class::

        U = TypeVar('U', bound=User)
        def new_user(user_class: Type[U]) -> U:
            user = user_class()
            # (Here we could write the user object to a database)
            return user

        joe = new_user(BasicUser)

    At this point the type checker knows that joe has type BasicUser.
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Union
  kind: callable
  ns: sanic.worker
  description: |-
    Union type; Union[X, Y] means either X or Y.

    On Python 3.10 and higher, the | operator
    can also be used to denote unions;
    X | Y means the same thing to the type checker as Union[X, Y].

    To define a union, use e.g. Union[int, str]. Details:
    - The arguments must be types and there must be at least one.
    - None as an argument is a special case and is replaced by
      type(None).
    - Unions of unions are flattened, e.g.::

        assert Union[Union[int, str], float] == Union[int, str, float]

    - Unions of a single argument vanish, e.g.::

        assert Union[int] == int  # The constructor actually returns int

    - Redundant arguments are skipped, e.g.::

        assert Union[int, str, int] == Union[int, str]

    - When comparing unions, the argument order is ignored, e.g.::

        assert Union[int, str] == Union[str, int]

    - You cannot subclass or instantiate a union.
    - You can use Optional[X] as a shorthand for Union[X, None].
  summary: Union type; Union[X, Y] means either X or Y
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: error_logger
  kind: const
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: worker_serve
  kind: function
  ns: sanic.worker
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: port
      default: null
      rest: false
    - kind: positional
      name: app_name
      default: null
      rest: false
    - kind: positional
      name: monitor_publisher
      default: null
      rest: false
    - kind: positional
      name: app_loader
      default: null
      rest: false
    - kind: positional
      name: worker_state
      default: None
      rest: false
    - kind: positional
      name: server_info
      default: None
      rest: false
    - kind: positional
      name: ssl
      default: None
      rest: false
    - kind: positional
      name: sock
      default: None
      rest: false
    - kind: positional
      name: unix
      default: None
      rest: false
    - kind: positional
      name: reuse_port
      default: 'False'
      rest: false
    - kind: positional
      name: loop
      default: None
      rest: false
    - kind: positional
      name: protocol
      default: <class 'sanic.server.protocols.http_protocol.HttpProtocol'>
      rest: false
    - kind: positional
      name: backlog
      default: '100'
      rest: false
    - kind: positional
      name: register_sys_signals
      default: 'True'
      rest: false
    - kind: positional
      name: run_multiple
      default: 'False'
      rest: false
    - kind: positional
      name: run_async
      default: 'False'
      rest: false
    - kind: positional
      name: connections
      default: None
      rest: false
    - kind: positional
      name: signal
      default: <sanic.models.server_types.Signal object at 0x7f13fc5bced0>
      rest: false
    - kind: positional
      name: state
      default: None
      rest: false
    - kind: positional
      name: asyncio_server_kwargs
      default: None
      rest: false
    - kind: positional
      name: version
      default: '1'
      rest: false
    - kind: positional
      name: config
      default: None
      rest: false
    - kind: positional
      name: passthru
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: state
  kind: module
  ns: sanic.worker
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Dict
  kind: callable
  ns: sanic.worker
  description: A generic version of dict.
  summary: A generic version of dict
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ItemsView
  kind: callable
  ns: sanic.worker
  description: A generic version of collections.abc.ItemsView.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Iterator
  kind: callable
  ns: sanic.worker
  description: A generic version of collections.abc.Iterator.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: KeysView
  kind: callable
  ns: sanic.worker
  description: A generic version of collections.abc.KeysView.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: List
  kind: callable
  ns: sanic.worker
  description: A generic version of list.
  summary: A generic version of list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mapping
  kind: class
  ns: sanic.worker
  description: |-
    A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.
  summary: A Mapping is a generic container for associating key/value
  signatures:
  - - type: Mapping
      kind: return
  inherits_from:
  - <class 'collections.abc.Collection'>
  - <class 'collections.abc.Sized'>
  - <class 'collections.abc.Iterable'>
  - <class 'collections.abc.Container'>
- name: Mapping.get
  kind: method
  ns: sanic.worker
  description: D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mapping.items
  kind: method
  ns: sanic.worker
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mapping.keys
  kind: method
  ns: sanic.worker
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Mapping.values
  kind: method
  ns: sanic.worker
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MappingType
  kind: callable
  ns: sanic.worker
  description: A generic version of collections.abc.Mapping.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ValuesView
  kind: callable
  ns: sanic.worker
  description: A generic version of collections.abc.ValuesView.
  summary: A generic version of collections
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
