---
name: jinja2
text_format: rst
generator: src:python
generator_command: src:python use "jinja2"
version: 3.1.4
summary: A very fast and expressive template engine.
description: |-
  Jinja

  Jinja is a fast, expressive, extensible templating engine. Special
  placeholders in the template allow writing code similar to Python
  syntax. Then the template is passed data to render the final document.

  It includes:

  -   Template inheritance and inclusion.
  -   Define and import macros within templates.
  -   HTML templates can use autoescaping to prevent XSS from untrusted
      user input.
  -   A sandboxed environment can safely render untrusted templates.
  -   AsyncIO support for generating templates and calling async
      functions.
  -   I18N support with Babel.
  -   Templates are compiled to optimized Python code just-in-time and
      cached, or can be compiled ahead-of-time.
  -   Exceptions point to the correct line in templates to make debugging
      easier.
  -   Extensible filters, tests, functions, and even syntax.

  Jinja's philosophy is that while application logic belongs in Python if
  possible, it shouldn't make the template designer's job difficult by
  restricting functionality too much.

  In A Nutshell

  .. code-block:: jinja

      {% extends "base.html" %}
      {% block title %}Members{% endblock %}
      {% block content %}
        <ul>
        {% for user in users %}
          <li><a href="{{ user.url }}">{{ user.username }}</a></li>
        {% endfor %}
        </ul>
      {% endblock %}

  Donate

  The Pallets organization develops and supports Jinja and other popular
  packages. In order to grow the community of contributors and users, and
  allow the maintainers to devote more time to the projects, please donate
  today.
homepage: null
license: BSD-3-Clause

---
- name: jinja2
  kind: module
  ns: null
  description: |-
    Jinja is a template engine written in pure Python. It provides a
    non-XML syntax that supports inline expressions and an optional
    sandboxed environment.
  summary: Jinja is a template engine written in pure Python
  signatures: null
  inherits_from: null
- name: BaseLoader
  kind: class
  ns: jinja2
  description: |-
    Baseclass for all loaders.  Subclass this and override `get_source` to
    implement a custom loading mechanism.  The environment provides a
    `get_template` method that calls the loader's `load` method to get the
    :class:`Template` object.

    A very basic example for a loader that looks up templates on the file
    system could look like this::

        from jinja2 import BaseLoader, TemplateNotFound
        from os.path import join, exists, getmtime

        class MyLoader(BaseLoader):

            def __init__(self, path):
                self.path = path

            def get_source(self, environment, template):
                path = join(self.path, template)
                if not exists(path):
                    raise TemplateNotFound(template)
                mtime = getmtime(path)
                with open(path) as f:
                    source = f.read()
                return source, path, lambda: mtime == getmtime(path)
  summary: Baseclass for all loaders
  signatures:
  - type: BaseLoader
  inherits_from: null
- name: BaseLoader.get_source
  kind: method
  ns: jinja2
  description: |-
    Get the template source, filename and reload helper for a template.
    It's passed the environment and template name and has to return a
    tuple in the form ``(source, filename, uptodate)`` or raise a
    `TemplateNotFound` error if it can't locate the template.

    The source part of the returned tuple must be the source of the
    template as a string. The filename should be the name of the
    file on the filesystem if it was loaded from there, otherwise
    ``None``. The filename is used by Python for the tracebacks
    if no loader extension is used.

    The last item in the tuple is the `uptodate` function.  If auto
    reloading is enabled it's always called to check if the template
    changed.  No arguments are passed so the function must store the
    old state somewhere (for example in a closure).  If it returns `False`
    the template will be reloaded.
  summary: Get the template source, filename and reload helper for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseLoader.has_source_access
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: BaseLoader.list_templates
  kind: method
  ns: jinja2
  description: |-
    Iterates over all templates.  If the loader does not support that
    it should raise a :exc:`TypeError` which is the default behavior.
  summary: Iterates over all templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseLoader.load
  kind: method
  ns: jinja2
  description: |-
    Loads a template.  This method looks up the template in the cache
    or loads one by calling :meth:`get_source`.  Subclasses should not
    override this method as loaders working on collections of other
    loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
    will not call this method but `get_source` directly.
  summary: Loads a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BytecodeCache
  kind: class
  ns: jinja2
  description: |-
    To implement your own bytecode cache you have to subclass this class
    and override :meth:`load_bytecode` and :meth:`dump_bytecode`.  Both of
    these methods are passed a :class:`~jinja2.bccache.Bucket`.

    A very basic bytecode cache that saves the bytecode on the file system::

        from os import path

        class MyCache(BytecodeCache):

            def __init__(self, directory):
                self.directory = directory

            def load_bytecode(self, bucket):
                filename = path.join(self.directory, bucket.key)
                if path.exists(filename):
                    with open(filename, 'rb') as f:
                        bucket.load_bytecode(f)

            def dump_bytecode(self, bucket):
                filename = path.join(self.directory, bucket.key)
                with open(filename, 'wb') as f:
                    bucket.write_bytecode(f)

    A more advanced version of a filesystem based bytecode cache is part of
    Jinja.
  summary: To implement your own bytecode cache you have to subclass this class
  signatures:
  - type: BytecodeCache
  inherits_from: null
- name: BytecodeCache.clear
  kind: method
  ns: jinja2
  description: |-
    Clears the cache.  This method is not used by Jinja but should be
    implemented to allow applications to clear the bytecode cache used
    by a particular environment.
  summary: Clears the cache
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytecodeCache.dump_bytecode
  kind: method
  ns: jinja2
  description: |-
    Subclasses have to override this method to write the bytecode
    from a bucket back to the cache.  If it unable to do so it must not
    fail silently but raise an exception.
  summary: Subclasses have to override this method to write the bytecode
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: bucket
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytecodeCache.get_bucket
  kind: method
  ns: jinja2
  description: |-
    Return a cache bucket for the given template.  All arguments are
    mandatory but filename may be `None`.
  summary: Return a cache bucket for the given template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytecodeCache.get_cache_key
  kind: method
  ns: jinja2
  description: Returns the unique hash key for this template name.
  summary: Returns the unique hash key for this template name
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BytecodeCache.get_source_checksum
  kind: method
  ns: jinja2
  description: Returns a checksum for the source.
  summary: Returns a checksum for the source
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytecodeCache.load_bytecode
  kind: method
  ns: jinja2
  description: |-
    Subclasses have to override this method to load bytecode into a
    bucket.  If they are not able to find code in the cache for the
    bucket, it must not do anything.
  summary: Subclasses have to override this method to load bytecode into a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: bucket
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytecodeCache.set_bucket
  kind: method
  ns: jinja2
  description: Put the bucket into the cache.
  summary: Put the bucket into the cache
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: bucket
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainableUndefined
  kind: class
  ns: jinja2
  description: |-
    An undefined that is chainable, where both ``__getattr__`` and
    ``__getitem__`` return itself rather than raising an
    :exc:`UndefinedError`.

    >>> foo = ChainableUndefined(name='foo')
    >>> str(foo.bar['baz'])
    ''
    >>> foo.bar['baz'] + 42
    Traceback (most recent call last):
      ...
    jinja2.exceptions.UndefinedError: 'foo' is undefined

    .. versionadded:: 2.11.0
  summary: An undefined that is chainable, where both ``__getattr__`` and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: hint
    default: None
    rest: false
  - kind: positional
    name: obj
    default: missing
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: exc
    default: <class 'jinja2.exceptions.UndefinedError'>
    rest: false
  - type: ChainableUndefined
  inherits_from:
  - <class 'jinja2.runtime.Undefined'>
- name: ChoiceLoader
  kind: class
  ns: jinja2
  description: |-
    This loader works like the `PrefixLoader` just that no prefix is
    specified.  If a template could not be found by one loader the next one
    is tried.

    >>> loader = ChoiceLoader([
    ...     FileSystemLoader('/path/to/user/templates'),
    ...     FileSystemLoader('/path/to/system/templates')
    ... ])

    This is useful if you want to allow users to override builtin templates
    from a different location.
  summary: This loader works like the `PrefixLoader` just that no prefix is
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: loaders
    default: null
    rest: false
  - type: ChoiceLoader
  inherits_from:
  - <class 'jinja2.loaders.BaseLoader'>
- name: ChoiceLoader.get_source
  kind: method
  ns: jinja2
  description: |-
    Get the template source, filename and reload helper for a template.
    It's passed the environment and template name and has to return a
    tuple in the form ``(source, filename, uptodate)`` or raise a
    `TemplateNotFound` error if it can't locate the template.

    The source part of the returned tuple must be the source of the
    template as a string. The filename should be the name of the
    file on the filesystem if it was loaded from there, otherwise
    ``None``. The filename is used by Python for the tracebacks
    if no loader extension is used.

    The last item in the tuple is the `uptodate` function.  If auto
    reloading is enabled it's always called to check if the template
    changed.  No arguments are passed so the function must store the
    old state somewhere (for example in a closure).  If it returns `False`
    the template will be reloaded.
  summary: Get the template source, filename and reload helper for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChoiceLoader.has_source_access
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ChoiceLoader.list_templates
  kind: method
  ns: jinja2
  description: |-
    Iterates over all templates.  If the loader does not support that
    it should raise a :exc:`TypeError` which is the default behavior.
  summary: Iterates over all templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChoiceLoader.load
  kind: method
  ns: jinja2
  description: |-
    Loads a template.  This method looks up the template in the cache
    or loads one by calling :meth:`get_source`.  Subclasses should not
    override this method as loaders working on collections of other
    loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
    will not call this method but `get_source` directly.
  summary: Loads a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DebugUndefined
  kind: class
  ns: jinja2
  description: |-
    An undefined that returns the debug info when printed.

    >>> foo = DebugUndefined(name='foo')
    >>> str(foo)
    '{{ foo }}'
    >>> not foo
    True
    >>> foo + 42
    Traceback (most recent call last):
      ...
    jinja2.exceptions.UndefinedError: 'foo' is undefined
  summary: An undefined that returns the debug info when printed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: hint
    default: None
    rest: false
  - kind: positional
    name: obj
    default: missing
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: exc
    default: <class 'jinja2.exceptions.UndefinedError'>
    rest: false
  - type: DebugUndefined
  inherits_from:
  - <class 'jinja2.runtime.Undefined'>
- name: DictLoader
  kind: class
  ns: jinja2
  description: |-
    Loads a template from a Python dict mapping template names to
    template source.  This loader is useful for unittesting:

    >>> loader = DictLoader({'index.html': 'source here'})

    Because auto reloading is rarely useful this is disabled per default.
  summary: Loads a template from a Python dict mapping template names to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: mapping
    default: null
    rest: false
  - type: DictLoader
  inherits_from:
  - <class 'jinja2.loaders.BaseLoader'>
- name: DictLoader.get_source
  kind: method
  ns: jinja2
  description: |-
    Get the template source, filename and reload helper for a template.
    It's passed the environment and template name and has to return a
    tuple in the form ``(source, filename, uptodate)`` or raise a
    `TemplateNotFound` error if it can't locate the template.

    The source part of the returned tuple must be the source of the
    template as a string. The filename should be the name of the
    file on the filesystem if it was loaded from there, otherwise
    ``None``. The filename is used by Python for the tracebacks
    if no loader extension is used.

    The last item in the tuple is the `uptodate` function.  If auto
    reloading is enabled it's always called to check if the template
    changed.  No arguments are passed so the function must store the
    old state somewhere (for example in a closure).  If it returns `False`
    the template will be reloaded.
  summary: Get the template source, filename and reload helper for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DictLoader.has_source_access
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: DictLoader.list_templates
  kind: method
  ns: jinja2
  description: |-
    Iterates over all templates.  If the loader does not support that
    it should raise a :exc:`TypeError` which is the default behavior.
  summary: Iterates over all templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DictLoader.load
  kind: method
  ns: jinja2
  description: |-
    Loads a template.  This method looks up the template in the cache
    or loads one by calling :meth:`get_source`.  Subclasses should not
    override this method as loaders working on collections of other
    loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
    will not call this method but `get_source` directly.
  summary: Loads a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment
  kind: class
  ns: jinja2
  description: |-
    The core component of Jinja is the `Environment`.  It contains
    important shared variables like configuration, filters, tests,
    globals and others.  Instances of this class may be modified if
    they are not shared and if no template was loaded so far.
    Modifications on environments after the first template was loaded
    will lead to surprising effects and undefined behavior.

    Here are the possible initialization parameters:

        `block_start_string`
            The string marking the beginning of a block.  Defaults to ``'{%'``.

        `block_end_string`
            The string marking the end of a block.  Defaults to ``'%}'``.

        `variable_start_string`
            The string marking the beginning of a print statement.
            Defaults to ``'{{'``.

        `variable_end_string`
            The string marking the end of a print statement.  Defaults to
            ``'}}'``.

        `comment_start_string`
            The string marking the beginning of a comment.  Defaults to ``'{#'``.

        `comment_end_string`
            The string marking the end of a comment.  Defaults to ``'#}'``.

        `line_statement_prefix`
            If given and a string, this will be used as prefix for line based
            statements.  See also :ref:`line-statements`.

        `line_comment_prefix`
            If given and a string, this will be used as prefix for line based
            comments.  See also :ref:`line-statements`.

            .. versionadded:: 2.2

        `trim_blocks`
            If this is set to ``True`` the first newline after a block is
            removed (block, not variable tag!).  Defaults to `False`.

        `lstrip_blocks`
            If this is set to ``True`` leading spaces and tabs are stripped
            from the start of a line to a block.  Defaults to `False`.

        `newline_sequence`
            The sequence that starts a newline.  Must be one of ``'\r'``,
            ``'\n'`` or ``'\r\n'``.  The default is ``'\n'`` which is a
            useful default for Linux and OS X systems as well as web
            applications.

        `keep_trailing_newline`
            Preserve the trailing newline when rendering templates.
            The default is ``False``, which causes a single newline,
            if present, to be stripped from the end of the template.

            .. versionadded:: 2.7

        `extensions`
            List of Jinja extensions to use.  This can either be import paths
            as strings or extension classes.  For more information have a
            look at :ref:`the extensions documentation <jinja-extensions>`.

        `optimized`
            should the optimizer be enabled?  Default is ``True``.

        `undefined`
            :class:`Undefined` or a subclass of it that is used to represent
            undefined values in the template.

        `finalize`
            A callable that can be used to process the result of a variable
            expression before it is output.  For example one can convert
            ``None`` implicitly into an empty string here.

        `autoescape`
            If set to ``True`` the XML/HTML autoescaping feature is enabled by
            default.  For more details about autoescaping see
            :class:`~markupsafe.Markup`.  As of Jinja 2.4 this can also
            be a callable that is passed the template name and has to
            return ``True`` or ``False`` depending on autoescape should be
            enabled by default.

            .. versionchanged:: 2.4
               `autoescape` can now be a function

        `loader`
            The template loader for this environment.

        `cache_size`
            The size of the cache.  Per default this is ``400`` which means
            that if more than 400 templates are loaded the loader will clean
            out the least recently used template.  If the cache size is set to
            ``0`` templates are recompiled all the time, if the cache size is
            ``-1`` the cache will not be cleaned.

            .. versionchanged:: 2.8
               The cache size was increased to 400 from a low 50.

        `auto_reload`
            Some loaders load templates from locations where the template
            sources may change (ie: file system or database).  If
            ``auto_reload`` is set to ``True`` (default) every time a template is
            requested the loader checks if the source changed and if yes, it
            will reload the template.  For higher performance it's possible to
            disable that.

        `bytecode_cache`
            If set to a bytecode cache object, this object will provide a
            cache for the internal Jinja bytecode so that templates don't
            have to be parsed if they were not changed.

            See :ref:`bytecode-cache` for more information.

        `enable_async`
            If set to true this enables async template execution which
            allows using async functions and generators.
  summary: The core component of Jinja is the `Environment`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: block_start_string
    default: '{%'
    rest: false
  - kind: positional
    name: block_end_string
    default: '%}'
    rest: false
  - kind: positional
    name: variable_start_string
    default: '{{'
    rest: false
  - kind: positional
    name: variable_end_string
    default: '}}'
    rest: false
  - kind: positional
    name: comment_start_string
    default: '{#'
    rest: false
  - kind: positional
    name: comment_end_string
    default: '#}'
    rest: false
  - kind: positional
    name: line_statement_prefix
    default: None
    rest: false
  - kind: positional
    name: line_comment_prefix
    default: None
    rest: false
  - kind: positional
    name: trim_blocks
    default: 'False'
    rest: false
  - kind: positional
    name: lstrip_blocks
    default: 'False'
    rest: false
  - kind: positional
    name: newline_sequence
    default: |2+

    rest: false
  - kind: positional
    name: keep_trailing_newline
    default: 'False'
    rest: false
  - kind: positional
    name: extensions
    default: ()
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - kind: positional
    name: undefined
    default: <class 'jinja2.runtime.Undefined'>
    rest: false
  - kind: positional
    name: finalize
    default: None
    rest: false
  - kind: positional
    name: autoescape
    default: 'False'
    rest: false
  - kind: positional
    name: loader
    default: None
    rest: false
  - kind: positional
    name: cache_size
    default: '400'
    rest: false
  - kind: positional
    name: auto_reload
    default: 'True'
    rest: false
  - kind: positional
    name: bytecode_cache
    default: None
    rest: false
  - kind: positional
    name: enable_async
    default: 'False'
    rest: false
  - type: Environment
  inherits_from: null
- name: Environment.add_extension
  kind: method
  ns: jinja2
  description: |-
    Adds an extension after the environment was created.

    .. versionadded:: 2.5
  summary: Adds an extension after the environment was created
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: extension
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.call_filter
  kind: method
  ns: jinja2
  description: |-
    Invoke a filter on a value the same way the compiler does.

    This might return a coroutine if the filter is running from an
    environment in async mode and the filter supports async
    execution. It's your responsibility to await this if needed.

    .. versionadded:: 2.7
  summary: Invoke a filter on a value the same way the compiler does
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: context
    default: None
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.call_test
  kind: method
  ns: jinja2
  description: |-
    Invoke a test on a value the same way the compiler does.

    This might return a coroutine if the test is running from an
    environment in async mode and the test supports async execution.
    It's your responsibility to await this if needed.

    .. versionchanged:: 3.0
        Tests support ``@pass_context``, etc. decorators. Added
        the ``context`` and ``eval_ctx`` parameters.

    .. versionadded:: 2.7
  summary: Invoke a test on a value the same way the compiler does
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: context
    default: None
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class
  kind: class
  ns: jinja2
  description: |-
    Walks the abstract syntax tree and call visitor functions for every
    node found.  The visitor functions may return values which will be
    forwarded by the `visit` method.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `get_visitor` function.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.
  summary: Walks the abstract syntax tree and call visitor functions for every
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: stream
    default: None
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - type: CodeGenerator
  inherits_from:
  - <class 'jinja2.visitor.NodeVisitor'>
- name: Environment.code_generator_class.blockvisit
  kind: method
  ns: jinja2
  description: |-
    Visit a list of nodes as block in a frame.  If the current frame
    is no buffer a dummy ``if 0: yield None`` is written automatically.
  summary: Visit a list of nodes as block in a frame
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: nodes
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.buffer
  kind: method
  ns: jinja2
  description: Enable buffering for the frame from that point onwards.
  summary: Enable buffering for the frame from that point onwards
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.choose_async
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: async_value
    default: 'async '
    rest: false
  - kind: positional
    name: sync_value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.derive_context
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.dump_local_context
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.end_write
  kind: method
  ns: jinja2
  description: End the writing process started by `start_write`.
  summary: End the writing process started by `start_write`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.enter_frame
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.fail
  kind: method
  ns: jinja2
  description: Fail with a :exc:`TemplateAssertionError`.
  summary: Fail with a :exc:`TemplateAssertionError`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: msg
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.func
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.generic_visit
  kind: method
  ns: jinja2
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.get_context_ref
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.get_resolve_func
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.get_visitor
  kind: method
  ns: jinja2
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.indent
  kind: method
  ns: jinja2
  description: Indent by one.
  summary: Indent by one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.leave_frame
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: with_python_scope
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.macro_body
  kind: method
  ns: jinja2
  description: Dump the function def of a macro or call block.
  summary: Dump the function def of a macro or call block
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.macro_def
  kind: method
  ns: jinja2
  description: Dump the macro definition for the def created by macro_body.
  summary: Dump the macro definition for the def created by macro_body
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: macro_ref
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.mark_parameter_stored
  kind: method
  ns: jinja2
  description: |-
    Marks a parameter in the current parameter definitions as stored.
    This will skip the enforced undefined checks.
  summary: Marks a parameter in the current parameter definitions as stored
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.newline
  kind: method
  ns: jinja2
  description: Add one or more newlines before the next write.
  summary: Add one or more newlines before the next write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - kind: positional
    name: extra
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.optimized
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Environment.code_generator_class.outdent
  kind: method
  ns: jinja2
  description: Outdent by step.
  summary: Outdent by step
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: step
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.parameter_is_undeclared
  kind: method
  ns: jinja2
  description: Checks if a given target is an undeclared parameter.
  summary: Checks if a given target is an undeclared parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.pop_assign_tracking
  kind: method
  ns: jinja2
  description: |-
    Pops the topmost level for assignment tracking and updates the
    context variables if necessary.
  summary: Pops the topmost level for assignment tracking and updates the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.pop_context_reference
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.pop_parameter_definitions
  kind: method
  ns: jinja2
  description: Pops the current parameter definitions set.
  summary: Pops the current parameter definitions set
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.position
  kind: method
  ns: jinja2
  description: Return a human readable position for the node.
  summary: Return a human readable position for the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.pull_dependencies
  kind: method
  ns: jinja2
  description: |-
    Find all filter and test names used in the template and
    assign them to variables in the compiled namespace. Checking
    that the names are registered with the environment is done when
    compiling the Filter and Test nodes. If the node is in an If or
    CondExpr node, the check is done at runtime instead.

    .. versionchanged:: 3.0
        Filters and tests in If and CondExpr nodes are checked at
        runtime instead of compile time.
  summary: Find all filter and test names used in the template and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: nodes
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.push_assign_tracking
  kind: method
  ns: jinja2
  description: Pushes a new layer for assignment tracking.
  summary: Pushes a new layer for assignment tracking
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.push_context_reference
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.push_parameter_definitions
  kind: method
  ns: jinja2
  description: |-
    Pushes all parameter targets from the given frame into a local
    stack that permits tracking of yet to be assigned parameters.  In
    particular this enables the optimization from `visit_Name` to skip
    undefined expressions for parameters in macros as macros can reference
    otherwise unbound parameters.
  summary: Pushes all parameter targets from the given frame into a local
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.return_buffer_contents
  kind: method
  ns: jinja2
  description: Return the buffer contents of the frame.
  summary: Return the buffer contents of the frame
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: force_unescaped
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.signature
  kind: method
  ns: jinja2
  description: |-
    Writes a function call to the stream for the current node.
    A leading comma is added automatically.  The extra keyword
    arguments may not include python keywords otherwise a syntax
    error could occur.  The extra keyword arguments should be given
    as python dict.
  summary: Writes a function call to the stream for the current node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: extra_kwargs
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.simple_write
  kind: method
  ns: jinja2
  description: Simple shortcut for start_write + write + end_write.
  summary: Simple shortcut for start_write + write + end_write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.start_write
  kind: method
  ns: jinja2
  description: Yield or write into the frame buffer.
  summary: Yield or write into the frame buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.temporary_identifier
  kind: method
  ns: jinja2
  description: Get a new unique identifier.
  summary: Get a new unique identifier
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit
  kind: method
  ns: jinja2
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Add
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_And
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Assign
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_AssignBlock
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Block
  kind: method
  ns: jinja2
  description: Call a block and register it for the template.
  summary: Call a block and register it for the template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Break
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Call
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_CallBlock
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Compare
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Concat
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_CondExpr
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Const
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_ContextReference
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Continue
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_DerivedContextReference
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Dict
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Div
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_EnvironmentAttribute
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_EvalContextModifier
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_ExprStmt
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Extends
  kind: method
  ns: jinja2
  description: Calls the extender.
  summary: Calls the extender
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_ExtensionAttribute
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Filter
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_FilterBlock
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_FloorDiv
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_For
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_FromImport
  kind: method
  ns: jinja2
  description: Visit named imports.
  summary: Visit named imports
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Getattr
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Getitem
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_If
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Import
  kind: method
  ns: jinja2
  description: Visit regular imports.
  summary: Visit regular imports
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_ImportedName
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Include
  kind: method
  ns: jinja2
  description: Handles includes.
  summary: Handles includes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_InternalName
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Keyword
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_List
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Macro
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_MarkSafe
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_MarkSafeIfAutoescape
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Mod
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Mul
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_NSRef
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Name
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Neg
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Not
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Operand
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Or
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Output
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_OverlayScope
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Pos
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Pow
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Scope
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_ScopedEvalContextModifier
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Slice
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Sub
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Template
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_TemplateData
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Test
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_Tuple
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.visit_With
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.write
  kind: method
  ns: jinja2
  description: Write a string into the output stream.
  summary: Write a string into the output stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: x
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.write_commons
  kind: method
  ns: jinja2
  description: |-
    Writes a common preamble that is used by root and block functions.
    Primarily this sets up common local helpers and enforces a generator
    through a dead branch.
  summary: Writes a common preamble that is used by root and block functions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.code_generator_class.writeline
  kind: method
  ns: jinja2
  description: Combination of newline and write.
  summary: Combination of newline and write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: x
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - kind: positional
    name: extra
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.compile
  kind: method
  ns: jinja2
  description: |-
    Compile a node or template source code.  The `name` parameter is
    the load name of the template after it was joined using
    :meth:`join_path` if necessary, not the filename on the file system.
    the `filename` parameter is the estimated filename of the template on
    the file system.  If the template came from a database or memory this
    can be omitted.

    The return value of this method is a python code object.  If the `raw`
    parameter is `True` the return value will be a string with python
    code equivalent to the bytecode returned otherwise.  This method is
    mainly used internally.

    `defer_init` is use internally to aid the module code generator.  This
    causes the generated code to be able to import without the global
    environment variable to be set.

    .. versionadded:: 2.4
       `defer_init` parameter added.
  summary: Compile a node or template source code
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - kind: positional
    name: raw
    default: 'False'
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.compile_expression
  kind: method
  ns: jinja2
  description: |-
    A handy helper method that returns a callable that accepts keyword
    arguments that appear as variables in the expression.  If called it
    returns the result of the expression.

    This is useful if applications want to use the same rules as Jinja
    in template "configuration files" or similar situations.

    Example usage:

    >>> env = Environment()
    >>> expr = env.compile_expression('foo == 42')
    >>> expr(foo=23)
    False
    >>> expr(foo=42)
    True

    Per default the return value is converted to `None` if the
    expression returns an undefined value.  This can be changed
    by setting `undefined_to_none` to `False`.

    >>> env.compile_expression('var')() is None
    True
    >>> env.compile_expression('var', undefined_to_none=False)()
    Undefined

    .. versionadded:: 2.1
  summary: A handy helper method that returns a callable that accepts keyword
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: undefined_to_none
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.compile_templates
  kind: method
  ns: jinja2
  description: |-
    Finds all the templates the loader can find, compiles them
    and stores them in `target`.  If `zip` is `None`, instead of in a
    zipfile, the templates will be stored in a directory.
    By default a deflate zip algorithm is used. To switch to
    the stored algorithm, `zip` can be set to ``'stored'``.

    `extensions` and `filter_func` are passed to :meth:`list_templates`.
    Each template returned will be compiled to the target folder or
    zipfile.

    By default template compilation errors are ignored.  In case a
    log function is provided, errors are logged.  If you want template
    syntax errors to abort the compilation you can set `ignore_errors`
    to `False` and you will get an exception on syntax errors.

    .. versionadded:: 2.4
  summary: Finds all the templates the loader can find, compiles them
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: None
    rest: false
  - kind: positional
    name: filter_func
    default: None
    rest: false
  - kind: positional
    name: zip
    default: deflated
    rest: false
  - kind: positional
    name: log_function
    default: None
    rest: false
  - kind: positional
    name: ignore_errors
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class
  kind: class
  ns: jinja2
  description: |-
    The template context holds the variables of a template.  It stores the
    values passed to the template and also the names the template exports.
    Creating instances is neither supported nor useful as it's created
    automatically at various stages of the template evaluation and should not
    be created by hand.

    The context is immutable.  Modifications on :attr:`parent` **must not**
    happen and modifications on :attr:`vars` are allowed from generated
    template code only.  Template filters and global functions marked as
    :func:`pass_context` get the active context passed as first argument
    and are allowed to access the context read-only.

    The template context supports read only dict operations (`get`,
    `keys`, `values`, `items`, `iterkeys`, `itervalues`, `iteritems`,
    `__getitem__`, `__contains__`).  Additionally there is a :meth:`resolve`
    method that doesn't fail with a `KeyError` but returns an
    :class:`Undefined` object for missing variables.
  summary: The template context holds the variables of a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: parent
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: blocks
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: Context
  inherits_from: null
- name: Environment.context_class.call
  kind: method
  ns: jinja2
  description: |-
    Call the callable with the arguments and keyword arguments
    provided but inject the active context or environment as first
    argument if the callable has :func:`pass_context` or
    :func:`pass_environment`.
  summary: Call the callable with the arguments and keyword arguments
  signatures:
  - kind: positional
    name: _Context__self
    default: null
    rest: false
  - kind: positional
    name: _Context__obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.derived
  kind: method
  ns: jinja2
  description: |-
    Internal helper function to create a derived context.  This is
    used in situations where the system needs a new context in the same
    template that is independent.
  summary: Internal helper function to create a derived context
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.get
  kind: method
  ns: jinja2
  description: |-
    Look up a variable by name, or return a default if the key is
    not found.

    :param key: The variable name to look up.
    :param default: The value to return if the key is not found.
  summary: Look up a variable by name, or return a default if the key is
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.get_all
  kind: method
  ns: jinja2
  description: |-
    Return the complete context as dict including the exported
    variables.  For optimizations reasons this might not return an
    actual copy so be careful with using it.
  summary: Return the complete context as dict including the exported
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.get_exported
  kind: method
  ns: jinja2
  description: Get a new dict with the exported variables.
  summary: Get a new dict with the exported variables
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.items
  kind: method
  ns: jinja2
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.keys
  kind: method
  ns: jinja2
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.resolve
  kind: method
  ns: jinja2
  description: |-
    Look up a variable by name, or return an :class:`Undefined`
    object if the key is not found.

    If you need to add custom behavior, override
    :meth:`resolve_or_missing`, not this method. The various lookup
    functions use that method, not this one.

    :param key: The variable name to look up.
  summary: Look up a variable by name, or return an :class:`Undefined`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.resolve_or_missing
  kind: method
  ns: jinja2
  description: |-
    Look up a variable by name, or return a ``missing`` sentinel
    if the key is not found.

    Override this method to add custom lookup behavior.
    :meth:`resolve`, :meth:`get`, and :meth:`__getitem__` use this
    method. Don't call this method directly.

    :param key: The variable name to look up.
  summary: Look up a variable by name, or return a ``missing`` sentinel
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.super
  kind: method
  ns: jinja2
  description: Render a parent block.
  summary: Render a parent block
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: current
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.context_class.values
  kind: method
  ns: jinja2
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.extend
  kind: method
  ns: jinja2
  description: |-
    Add the items to the instance of the environment if they do not exist
    yet.  This is used by :ref:`extensions <writing-extensions>` to register
    callbacks and configuration values without breaking inheritance.
  summary: Add the items to the instance of the environment if they do not exist
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.from_string
  kind: method
  ns: jinja2
  description: |-
    Load a template from a source string without using
    :attr:`loader`.

    :param source: Jinja source to compile into a template.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.
    :param template_class: Return an instance of this
        :class:`Template` class.
  summary: Load a template from a source string without using
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - kind: positional
    name: template_class
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.get_or_select_template
  kind: method
  ns: jinja2
  description: |-
    Use :meth:`select_template` if an iterable of template names
    is given, or :meth:`get_template` if one name is given.

    .. versionadded:: 2.3
  summary: Use :meth:`select_template` if an iterable of template names
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template_name_or_list
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.get_template
  kind: method
  ns: jinja2
  description: |-
    Load a template by name with :attr:`loader` and return a
    :class:`Template`. If the template does not exist a
    :exc:`TemplateNotFound` exception is raised.

    :param name: Name of the template to load. When loading
        templates from the filesystem, "/" is used as the path
        separator, even on Windows.
    :param parent: The name of the parent template importing this
        template. :meth:`join_path` can be used to implement name
        transformations with this.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.

    .. versionchanged:: 3.0
        If a template is loaded from cache, ``globals`` will update
        the template's globals instead of ignoring the new values.

    .. versionchanged:: 2.4
        If ``name`` is a :class:`Template` object it is returned
        unchanged.
  summary: Load a template by name with :attr:`loader` and return a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.getattr
  kind: method
  ns: jinja2
  description: |-
    Get an item or attribute of an object but prefer the attribute.
    Unlike :meth:`getitem` the attribute *must* be a string.
  summary: Get an item or attribute of an object but prefer the attribute
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.getitem
  kind: method
  ns: jinja2
  description: Get an item or attribute of an object but prefer the item.
  summary: Get an item or attribute of an object but prefer the item
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: argument
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.handle_exception
  kind: method
  ns: jinja2
  description: |-
    Exception handling helper.  This is used internally to either raise
    rewritten exceptions or return a rendered traceback for the template.
  summary: Exception handling helper
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.iter_extensions
  kind: method
  ns: jinja2
  description: Iterates over the extensions by priority.
  summary: Iterates over the extensions by priority
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.join_path
  kind: method
  ns: jinja2
  description: |-
    Join a template with the parent.  By default all the lookups are
    relative to the loader root so this method returns the `template`
    parameter unchanged, but if the paths should be relative to the
    parent template, this function can be used to calculate the real
    template name.

    Subclasses may override this method and implement template path
    joining here.
  summary: Join a template with the parent
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - kind: positional
    name: parent
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.lex
  kind: method
  ns: jinja2
  description: |-
    Lex the given sourcecode and return a generator that yields
    tokens as tuples in the form ``(lineno, token_type, value)``.
    This can be useful for :ref:`extension development <writing-extensions>`
    and debugging templates.

    This does not perform preprocessing.  If you want the preprocessing
    of the extensions to be applied you have to filter source through
    the :meth:`preprocess` method.
  summary: Lex the given sourcecode and return a generator that yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.lexer
  kind: property
  ns: jinja2
  description: The lexer for this environment.
  summary: The lexer for this environment
  signatures: null
  inherits_from: null
- name: Environment.linked_to
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Environment.list_templates
  kind: method
  ns: jinja2
  description: |-
    Returns a list of templates for this environment.  This requires
    that the loader supports the loader's
    :meth:`~BaseLoader.list_templates` method.

    If there are other files in the template folder besides the
    actual templates, the returned list can be filtered.  There are two
    ways: either `extensions` is set to a list of file extensions for
    templates, or a `filter_func` can be provided which is a callable that
    is passed a template name and should return `True` if it should end up
    in the result list.

    If the loader does not support that, a :exc:`TypeError` is raised.

    .. versionadded:: 2.4
  summary: Returns a list of templates for this environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: None
    rest: false
  - kind: positional
    name: filter_func
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.make_globals
  kind: method
  ns: jinja2
  description: |-
    Make the globals map for a template. Any given template
    globals overlay the environment :attr:`globals`.

    Returns a :class:`collections.ChainMap`. This allows any changes
    to a template's globals to only affect that template, while
    changes to the environment's globals are still reflected.
    However, avoid modifying any globals after a template is loaded.

    :param d: Dict of template-specific globals.

    .. versionchanged:: 3.0
        Use :class:`collections.ChainMap` to always prevent mutating
        environment globals.
  summary: Make the globals map for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: d
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.overlay
  kind: method
  ns: jinja2
  description: |-
    Create a new overlay environment that shares all the data with the
    current environment except for cache and the overridden attributes.
    Extensions cannot be removed for an overlayed environment.  An overlayed
    environment automatically gets all the extensions of the environment it
    is linked to plus optional extra extensions.

    Creating overlays should happen after the initial environment was set
    up completely.  Not all attributes are truly linked, some are just
    copied over so modifications on the original environment may not shine
    through.

    .. versionchanged:: 3.1.2
        Added the ``newline_sequence``,, ``keep_trailing_newline``,
        and ``enable_async`` parameters to match ``__init__``.
  summary: Create a new overlay environment that shares all the data with the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: block_start_string
    default: missing
    rest: false
  - kind: positional
    name: block_end_string
    default: missing
    rest: false
  - kind: positional
    name: variable_start_string
    default: missing
    rest: false
  - kind: positional
    name: variable_end_string
    default: missing
    rest: false
  - kind: positional
    name: comment_start_string
    default: missing
    rest: false
  - kind: positional
    name: comment_end_string
    default: missing
    rest: false
  - kind: positional
    name: line_statement_prefix
    default: missing
    rest: false
  - kind: positional
    name: line_comment_prefix
    default: missing
    rest: false
  - kind: positional
    name: trim_blocks
    default: missing
    rest: false
  - kind: positional
    name: lstrip_blocks
    default: missing
    rest: false
  - kind: positional
    name: newline_sequence
    default: missing
    rest: false
  - kind: positional
    name: keep_trailing_newline
    default: missing
    rest: false
  - kind: positional
    name: extensions
    default: missing
    rest: false
  - kind: positional
    name: optimized
    default: missing
    rest: false
  - kind: positional
    name: undefined
    default: missing
    rest: false
  - kind: positional
    name: finalize
    default: missing
    rest: false
  - kind: positional
    name: autoescape
    default: missing
    rest: false
  - kind: positional
    name: loader
    default: missing
    rest: false
  - kind: positional
    name: cache_size
    default: missing
    rest: false
  - kind: positional
    name: auto_reload
    default: missing
    rest: false
  - kind: positional
    name: bytecode_cache
    default: missing
    rest: false
  - kind: positional
    name: enable_async
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.overlayed
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Environment.parse
  kind: method
  ns: jinja2
  description: |-
    Parse the sourcecode and return the abstract syntax tree.  This
    tree of nodes is used by the compiler to convert the template into
    executable source- or bytecode.  This is useful for debugging or to
    extract information from templates.

    If you are :ref:`developing Jinja extensions <writing-extensions>`
    this gives you a good overview of the node tree generated.
  summary: Parse the sourcecode and return the abstract syntax tree
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.preprocess
  kind: method
  ns: jinja2
  description: |-
    Preprocesses the source with all extensions.  This is automatically
    called for all parsing and compiling methods but *not* for :meth:`lex`
    because there you usually only want the actual source tokenized.
  summary: Preprocesses the source with all extensions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.sandboxed
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Environment.select_template
  kind: method
  ns: jinja2
  description: |-
    Like :meth:`get_template`, but tries loading multiple names.
    If none of the names can be loaded a :exc:`TemplatesNotFound`
    exception is raised.

    :param names: List of template names to try loading in order.
    :param parent: The name of the parent template importing this
        template. :meth:`join_path` can be used to implement name
        transformations with this.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.

    .. versionchanged:: 3.0
        If a template is loaded from cache, ``globals`` will update
        the template's globals instead of ignoring the new values.

    .. versionchanged:: 2.11
        If ``names`` is :class:`Undefined`, an :exc:`UndefinedError`
        is raised instead. If no templates were found and ``names``
        contains :class:`Undefined`, the message is more helpful.

    .. versionchanged:: 2.4
        If ``names`` contains a :class:`Template` object it is
        returned unchanged.

    .. versionadded:: 2.3
  summary: Like :meth:`get_template`, but tries loading multiple names
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: names
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.shared
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Environment.template_class
  kind: class
  ns: jinja2
  description: |-
    A compiled template that can be rendered.

    Use the methods on :class:`Environment` to create or load templates.
    The environment is used to configure how templates are compiled and
    behave.

    It is also possible to create a template object directly. This is
    not usually recommended. The constructor takes most of the same
    arguments as :class:`Environment`. All templates created with the
    same environment arguments share the same ephemeral ``Environment``
    instance behind the scenes.

    A template object should be considered immutable. Modifications on
    the object are not supported.
  summary: A compiled template that can be rendered
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: block_start_string
    default: '{%'
    rest: false
  - kind: positional
    name: block_end_string
    default: '%}'
    rest: false
  - kind: positional
    name: variable_start_string
    default: '{{'
    rest: false
  - kind: positional
    name: variable_end_string
    default: '}}'
    rest: false
  - kind: positional
    name: comment_start_string
    default: '{#'
    rest: false
  - kind: positional
    name: comment_end_string
    default: '#}'
    rest: false
  - kind: positional
    name: line_statement_prefix
    default: None
    rest: false
  - kind: positional
    name: line_comment_prefix
    default: None
    rest: false
  - kind: positional
    name: trim_blocks
    default: 'False'
    rest: false
  - kind: positional
    name: lstrip_blocks
    default: 'False'
    rest: false
  - kind: positional
    name: newline_sequence
    default: |2+

    rest: false
  - kind: positional
    name: keep_trailing_newline
    default: 'False'
    rest: false
  - kind: positional
    name: extensions
    default: ()
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - kind: positional
    name: undefined
    default: <class 'jinja2.runtime.Undefined'>
    rest: false
  - kind: positional
    name: finalize
    default: None
    rest: false
  - kind: positional
    name: autoescape
    default: 'False'
    rest: false
  - kind: positional
    name: enable_async
    default: 'False'
    rest: false
  - type: Template
  inherits_from: null
- name: Environment.template_class.debug_info
  kind: property
  ns: jinja2
  description: The debug info mapping.
  summary: The debug info mapping
  signatures: null
  inherits_from: null
- name: Environment.template_class.from_code
  kind: function
  ns: jinja2
  description: |-
    Creates a template object from compiled code and the globals.  This
    is used by the loaders and environment to create a template object.
  summary: Creates a template object from compiled code and the globals
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: code
    default: null
    rest: false
  - kind: positional
    name: globals
    default: null
    rest: false
  - kind: positional
    name: uptodate
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.from_module_dict
  kind: function
  ns: jinja2
  description: |-
    Creates a template object from a module.  This is used by the
    module loader to create a template object.

    .. versionadded:: 2.4
  summary: Creates a template object from a module
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: module_dict
    default: null
    rest: false
  - kind: positional
    name: globals
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.generate
  kind: method
  ns: jinja2
  description: |-
    For very large templates it can be useful to not render the whole
    template at once but evaluate each statement after another and yield
    piece for piece.  This method basically does exactly that and returns
    a generator that yields one item after another as strings.

    It accepts the same arguments as :meth:`render`.
  summary: For very large templates it can be useful to not render the whole
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.generate_async
  kind: method
  ns: jinja2
  description: |-
    An async version of :meth:`generate`.  Works very similarly but
    returns an async iterator instead.
  summary: An async version of :meth:`generate`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.get_corresponding_lineno
  kind: method
  ns: jinja2
  description: |-
    Return the source line number of a line number in the
    generated bytecode as they are not in sync.
  summary: Return the source line number of a line number in the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.is_up_to_date
  kind: property
  ns: jinja2
  description: If this variable is `False` there is a newer version available.
  summary: If this variable is `False` there is a newer version available
  signatures: null
  inherits_from: null
- name: Environment.template_class.make_module
  kind: method
  ns: jinja2
  description: |-
    This method works like the :attr:`module` attribute when called
    without arguments but it will evaluate the template on every call
    rather than caching it.  It's also possible to provide
    a dict which is then used as context.  The arguments are the same
    as for the :meth:`new_context` method.
  summary: This method works like the :attr:`module` attribute when called
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.make_module_async
  kind: method
  ns: jinja2
  description: |-
    As template module creation can invoke template code for
    asynchronous executions this method must be used instead of the
    normal :meth:`make_module` one.  Likewise the module attribute
    becomes unavailable in async mode.
  summary: As template module creation can invoke template code for
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.module
  kind: property
  ns: jinja2
  description: |-
    The template as module.  This is used for imports in the
    template runtime but is also useful if one wants to access
    exported template variables from the Python layer:

    >>> t = Template('{% macro foo() %}42{% endmacro %}23')
    >>> str(t.module)
    '23'
    >>> t.module.foo() == u'42'
    True

    This attribute is not available if async mode is enabled.
  summary: The template as module
  signatures: null
  inherits_from: null
- name: Environment.template_class.new_context
  kind: method
  ns: jinja2
  description: |-
    Create a new :class:`Context` for this template.  The vars
    provided will be passed to the template.  Per default the globals
    are added to the context.  If shared is set to `True` the data
    is passed as is to the context without adding the globals.

    `locals` can be a dict of local variables for internal usage.
  summary: Create a new :class:`Context` for this template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.render
  kind: method
  ns: jinja2
  description: |-
    This method accepts the same arguments as the `dict` constructor:
    A dict, a dict subclass or some keyword arguments.  If no arguments
    are given the context will be empty.  These two calls do the same::

        template.render(knights='that say nih')
        template.render({'knights': 'that say nih'})

    This will return the rendered template as a string.
  summary: 'This method accepts the same arguments as the `dict` constructor:'
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.render_async
  kind: method
  ns: jinja2
  description: |-
    This works similar to :meth:`render` but returns a coroutine
    that when awaited returns the entire rendered template string.  This
    requires the async feature to be enabled.

    Example usage::

        await template.render_async(knights='that say nih; asynchronously')
  summary: This works similar to :meth:`render` but returns a coroutine
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Environment.template_class.stream
  kind: method
  ns: jinja2
  description: |-
    Works exactly like :meth:`generate` but returns a
    :class:`TemplateStream`.
  summary: Works exactly like :meth:`generate` but returns a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemBytecodeCache
  kind: class
  ns: jinja2
  description: |-
    A bytecode cache that stores bytecode on the filesystem.  It accepts
    two arguments: The directory where the cache items are stored and a
    pattern string that is used to build the filename.

    If no directory is specified a default cache directory is selected.  On
    Windows the user's temp directory is used, on UNIX systems a directory
    is created for the user in the system temp directory.

    The pattern can be used to have multiple separate caches operate on the
    same directory.  The default pattern is ``'__jinja2_%s.cache'``.  ``%s``
    is replaced with the cache key.

    >>> bcc = FileSystemBytecodeCache('/tmp/jinja_cache', '%s.cache')

    This bytecode cache supports clearing of the cache using the clear method.
  summary: A bytecode cache that stores bytecode on the filesystem
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: directory
    default: None
    rest: false
  - kind: positional
    name: pattern
    default: __jinja2_%s.cache
    rest: false
  - type: FileSystemBytecodeCache
  inherits_from:
  - <class 'jinja2.bccache.BytecodeCache'>
- name: FileSystemBytecodeCache.clear
  kind: method
  ns: jinja2
  description: |-
    Clears the cache.  This method is not used by Jinja but should be
    implemented to allow applications to clear the bytecode cache used
    by a particular environment.
  summary: Clears the cache
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemBytecodeCache.dump_bytecode
  kind: method
  ns: jinja2
  description: |-
    Subclasses have to override this method to write the bytecode
    from a bucket back to the cache.  If it unable to do so it must not
    fail silently but raise an exception.
  summary: Subclasses have to override this method to write the bytecode
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: bucket
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemBytecodeCache.get_bucket
  kind: method
  ns: jinja2
  description: |-
    Return a cache bucket for the given template.  All arguments are
    mandatory but filename may be `None`.
  summary: Return a cache bucket for the given template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemBytecodeCache.get_cache_key
  kind: method
  ns: jinja2
  description: Returns the unique hash key for this template name.
  summary: Returns the unique hash key for this template name
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemBytecodeCache.get_source_checksum
  kind: method
  ns: jinja2
  description: Returns a checksum for the source.
  summary: Returns a checksum for the source
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemBytecodeCache.load_bytecode
  kind: method
  ns: jinja2
  description: |-
    Subclasses have to override this method to load bytecode into a
    bucket.  If they are not able to find code in the cache for the
    bucket, it must not do anything.
  summary: Subclasses have to override this method to load bytecode into a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: bucket
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemBytecodeCache.set_bucket
  kind: method
  ns: jinja2
  description: Put the bucket into the cache.
  summary: Put the bucket into the cache
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: bucket
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemLoader
  kind: class
  ns: jinja2
  description: |-
    Load templates from a directory in the file system.

    The path can be relative or absolute. Relative paths are relative to
    the current working directory.

    .. code-block:: python

        loader = FileSystemLoader("templates")

    A list of paths can be given. The directories will be searched in
    order, stopping at the first matching template.

    .. code-block:: python

        loader = FileSystemLoader(["/override/templates", "/default/templates"])

    :param searchpath: A path, or list of paths, to the directory that
        contains the templates.
    :param encoding: Use this encoding to read the text from template
        files.
    :param followlinks: Follow symbolic links in the path.

    .. versionchanged:: 2.8
        Added the ``followlinks`` parameter.
  summary: Load templates from a directory in the file system
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: searchpath
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: utf-8
    rest: false
  - kind: positional
    name: followlinks
    default: 'False'
    rest: false
  - type: FileSystemLoader
  inherits_from:
  - <class 'jinja2.loaders.BaseLoader'>
- name: FileSystemLoader.get_source
  kind: method
  ns: jinja2
  description: |-
    Get the template source, filename and reload helper for a template.
    It's passed the environment and template name and has to return a
    tuple in the form ``(source, filename, uptodate)`` or raise a
    `TemplateNotFound` error if it can't locate the template.

    The source part of the returned tuple must be the source of the
    template as a string. The filename should be the name of the
    file on the filesystem if it was loaded from there, otherwise
    ``None``. The filename is used by Python for the tracebacks
    if no loader extension is used.

    The last item in the tuple is the `uptodate` function.  If auto
    reloading is enabled it's always called to check if the template
    changed.  No arguments are passed so the function must store the
    old state somewhere (for example in a closure).  If it returns `False`
    the template will be reloaded.
  summary: Get the template source, filename and reload helper for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemLoader.has_source_access
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FileSystemLoader.list_templates
  kind: method
  ns: jinja2
  description: |-
    Iterates over all templates.  If the loader does not support that
    it should raise a :exc:`TypeError` which is the default behavior.
  summary: Iterates over all templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileSystemLoader.load
  kind: method
  ns: jinja2
  description: |-
    Loads a template.  This method looks up the template in the cache
    or loads one by calling :meth:`get_source`.  Subclasses should not
    override this method as loaders working on collections of other
    loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
    will not call this method but `get_source` directly.
  summary: Loads a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FunctionLoader
  kind: class
  ns: jinja2
  description: |-
    A loader that is passed a function which does the loading.  The
    function receives the name of the template and has to return either
    a string with the template source, a tuple in the form ``(source,
    filename, uptodatefunc)`` or `None` if the template does not exist.

    >>> def load_template(name):
    ...     if name == 'index.html':
    ...         return '...'
    ...
    >>> loader = FunctionLoader(load_template)

    The `uptodatefunc` is a function that is called if autoreload is enabled
    and has to return `True` if the template is still up to date.  For more
    details have a look at :meth:`BaseLoader.get_source` which has the same
    return value.
  summary: A loader that is passed a function which does the loading
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: load_func
    default: null
    rest: false
  - type: FunctionLoader
  inherits_from:
  - <class 'jinja2.loaders.BaseLoader'>
- name: FunctionLoader.get_source
  kind: method
  ns: jinja2
  description: |-
    Get the template source, filename and reload helper for a template.
    It's passed the environment and template name and has to return a
    tuple in the form ``(source, filename, uptodate)`` or raise a
    `TemplateNotFound` error if it can't locate the template.

    The source part of the returned tuple must be the source of the
    template as a string. The filename should be the name of the
    file on the filesystem if it was loaded from there, otherwise
    ``None``. The filename is used by Python for the tracebacks
    if no loader extension is used.

    The last item in the tuple is the `uptodate` function.  If auto
    reloading is enabled it's always called to check if the template
    changed.  No arguments are passed so the function must store the
    old state somewhere (for example in a closure).  If it returns `False`
    the template will be reloaded.
  summary: Get the template source, filename and reload helper for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FunctionLoader.has_source_access
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FunctionLoader.list_templates
  kind: method
  ns: jinja2
  description: |-
    Iterates over all templates.  If the loader does not support that
    it should raise a :exc:`TypeError` which is the default behavior.
  summary: Iterates over all templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FunctionLoader.load
  kind: method
  ns: jinja2
  description: |-
    Loads a template.  This method looks up the template in the cache
    or loads one by calling :meth:`get_source`.  Subclasses should not
    override this method as loaders working on collections of other
    loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
    will not call this method but `get_source` directly.
  summary: Loads a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MemcachedBytecodeCache
  kind: class
  ns: jinja2
  description: |-
    This class implements a bytecode cache that uses a memcache cache for
    storing the information.  It does not enforce a specific memcache library
    (tummy's memcache or cmemcache) but will accept any class that provides
    the minimal interface required.

    Libraries compatible with this class:

    -   `cachelib <https://github.com/pallets/cachelib>`_
    -   `python-memcached <https://pypi.org/project/python-memcached/>`_

    (Unfortunately the django cache interface is not compatible because it
    does not support storing binary data, only text. You can however pass
    the underlying cache client to the bytecode cache which is available
    as `django.core.cache.cache._client`.)

    The minimal interface for the client passed to the constructor is this:

    .. class:: MinimalClientInterface

        .. method:: set(key, value[, timeout])

            Stores the bytecode in the cache.  `value` is a string and
            `timeout` the timeout of the key.  If timeout is not provided
            a default timeout or no timeout should be assumed, if it's
            provided it's an integer with the number of seconds the cache
            item should exist.

        .. method:: get(key)

            Returns the value for the cache key.  If the item does not
            exist in the cache the return value must be `None`.

    The other arguments to the constructor are the prefix for all keys that
    is added before the actual cache key and the timeout for the bytecode in
    the cache system.  We recommend a high (or no) timeout.

    This bytecode cache does not support clearing of used items in the cache.
    The clear method is a no-operation function.

    .. versionadded:: 2.7
       Added support for ignoring memcache errors through the
       `ignore_memcache_errors` parameter.
  summary: This class implements a bytecode cache that uses a memcache cache for
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: client
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: jinja2/bytecode/
    rest: false
  - kind: positional
    name: timeout
    default: None
    rest: false
  - kind: positional
    name: ignore_memcache_errors
    default: 'True'
    rest: false
  - type: MemcachedBytecodeCache
  inherits_from:
  - <class 'jinja2.bccache.BytecodeCache'>
- name: MemcachedBytecodeCache.clear
  kind: method
  ns: jinja2
  description: |-
    Clears the cache.  This method is not used by Jinja but should be
    implemented to allow applications to clear the bytecode cache used
    by a particular environment.
  summary: Clears the cache
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MemcachedBytecodeCache.dump_bytecode
  kind: method
  ns: jinja2
  description: |-
    Subclasses have to override this method to write the bytecode
    from a bucket back to the cache.  If it unable to do so it must not
    fail silently but raise an exception.
  summary: Subclasses have to override this method to write the bytecode
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: bucket
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MemcachedBytecodeCache.get_bucket
  kind: method
  ns: jinja2
  description: |-
    Return a cache bucket for the given template.  All arguments are
    mandatory but filename may be `None`.
  summary: Return a cache bucket for the given template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MemcachedBytecodeCache.get_cache_key
  kind: method
  ns: jinja2
  description: Returns the unique hash key for this template name.
  summary: Returns the unique hash key for this template name
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MemcachedBytecodeCache.get_source_checksum
  kind: method
  ns: jinja2
  description: Returns a checksum for the source.
  summary: Returns a checksum for the source
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MemcachedBytecodeCache.load_bytecode
  kind: method
  ns: jinja2
  description: |-
    Subclasses have to override this method to load bytecode into a
    bucket.  If they are not able to find code in the cache for the
    bucket, it must not do anything.
  summary: Subclasses have to override this method to load bytecode into a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: bucket
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MemcachedBytecodeCache.set_bucket
  kind: method
  ns: jinja2
  description: Put the bucket into the cache.
  summary: Put the bucket into the cache
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: bucket
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ModuleLoader
  kind: class
  ns: jinja2
  description: |-
    This loader loads templates from precompiled templates.

    Example usage:

    >>> loader = ChoiceLoader([
    ...     ModuleLoader('/path/to/compiled/templates'),
    ...     FileSystemLoader('/path/to/templates')
    ... ])

    Templates can be precompiled with :meth:`Environment.compile_templates`.
  summary: This loader loads templates from precompiled templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - type: ModuleLoader
  inherits_from:
  - <class 'jinja2.loaders.BaseLoader'>
- name: ModuleLoader.get_module_filename
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ModuleLoader.get_source
  kind: method
  ns: jinja2
  description: |-
    Get the template source, filename and reload helper for a template.
    It's passed the environment and template name and has to return a
    tuple in the form ``(source, filename, uptodate)`` or raise a
    `TemplateNotFound` error if it can't locate the template.

    The source part of the returned tuple must be the source of the
    template as a string. The filename should be the name of the
    file on the filesystem if it was loaded from there, otherwise
    ``None``. The filename is used by Python for the tracebacks
    if no loader extension is used.

    The last item in the tuple is the `uptodate` function.  If auto
    reloading is enabled it's always called to check if the template
    changed.  No arguments are passed so the function must store the
    old state somewhere (for example in a closure).  If it returns `False`
    the template will be reloaded.
  summary: Get the template source, filename and reload helper for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ModuleLoader.get_template_key
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ModuleLoader.has_source_access
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ModuleLoader.list_templates
  kind: method
  ns: jinja2
  description: |-
    Iterates over all templates.  If the loader does not support that
    it should raise a :exc:`TypeError` which is the default behavior.
  summary: Iterates over all templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ModuleLoader.load
  kind: method
  ns: jinja2
  description: |-
    Loads a template.  This method looks up the template in the cache
    or loads one by calling :meth:`get_source`.  Subclasses should not
    override this method as loaders working on collections of other
    loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
    will not call this method but `get_source` directly.
  summary: Loads a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PackageLoader
  kind: class
  ns: jinja2
  description: |-
    Load templates from a directory in a Python package.

    :param package_name: Import name of the package that contains the
        template directory.
    :param package_path: Directory within the imported package that
        contains the templates.
    :param encoding: Encoding of template files.

    The following example looks up templates in the ``pages`` directory
    within the ``project.ui`` package.

    .. code-block:: python

        loader = PackageLoader("project.ui", "pages")

    Only packages installed as directories (standard pip behavior) or
    zip/egg files (less common) are supported. The Python API for
    introspecting data in packages is too limited to support other
    installation methods the way this loader requires.

    There is limited support for :pep:`420` namespace packages. The
    template directory is assumed to only be in one namespace
    contributor. Zip files contributing to a namespace are not
    supported.

    .. versionchanged:: 3.0
        No longer uses ``setuptools`` as a dependency.

    .. versionchanged:: 3.0
        Limited PEP 420 namespace package support.
  summary: Load templates from a directory in a Python package
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: package_name
    default: null
    rest: false
  - kind: positional
    name: package_path
    default: templates
    rest: false
  - kind: positional
    name: encoding
    default: utf-8
    rest: false
  - type: PackageLoader
  inherits_from:
  - <class 'jinja2.loaders.BaseLoader'>
- name: PackageLoader.get_source
  kind: method
  ns: jinja2
  description: |-
    Get the template source, filename and reload helper for a template.
    It's passed the environment and template name and has to return a
    tuple in the form ``(source, filename, uptodate)`` or raise a
    `TemplateNotFound` error if it can't locate the template.

    The source part of the returned tuple must be the source of the
    template as a string. The filename should be the name of the
    file on the filesystem if it was loaded from there, otherwise
    ``None``. The filename is used by Python for the tracebacks
    if no loader extension is used.

    The last item in the tuple is the `uptodate` function.  If auto
    reloading is enabled it's always called to check if the template
    changed.  No arguments are passed so the function must store the
    old state somewhere (for example in a closure).  If it returns `False`
    the template will be reloaded.
  summary: Get the template source, filename and reload helper for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PackageLoader.has_source_access
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: PackageLoader.list_templates
  kind: method
  ns: jinja2
  description: |-
    Iterates over all templates.  If the loader does not support that
    it should raise a :exc:`TypeError` which is the default behavior.
  summary: Iterates over all templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PackageLoader.load
  kind: method
  ns: jinja2
  description: |-
    Loads a template.  This method looks up the template in the cache
    or loads one by calling :meth:`get_source`.  Subclasses should not
    override this method as loaders working on collections of other
    loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
    will not call this method but `get_source` directly.
  summary: Loads a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PrefixLoader
  kind: class
  ns: jinja2
  description: |-
    A loader that is passed a dict of loaders where each loader is bound
    to a prefix.  The prefix is delimited from the template by a slash per
    default, which can be changed by setting the `delimiter` argument to
    something else::

        loader = PrefixLoader({
            'app1':     PackageLoader('mypackage.app1'),
            'app2':     PackageLoader('mypackage.app2')
        })

    By loading ``'app1/index.html'`` the file from the app1 package is loaded,
    by loading ``'app2/index.html'`` the file from the second.
  summary: A loader that is passed a dict of loaders where each loader is bound
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: mapping
    default: null
    rest: false
  - kind: positional
    name: delimiter
    default: /
    rest: false
  - type: PrefixLoader
  inherits_from:
  - <class 'jinja2.loaders.BaseLoader'>
- name: PrefixLoader.get_loader
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PrefixLoader.get_source
  kind: method
  ns: jinja2
  description: |-
    Get the template source, filename and reload helper for a template.
    It's passed the environment and template name and has to return a
    tuple in the form ``(source, filename, uptodate)`` or raise a
    `TemplateNotFound` error if it can't locate the template.

    The source part of the returned tuple must be the source of the
    template as a string. The filename should be the name of the
    file on the filesystem if it was loaded from there, otherwise
    ``None``. The filename is used by Python for the tracebacks
    if no loader extension is used.

    The last item in the tuple is the `uptodate` function.  If auto
    reloading is enabled it's always called to check if the template
    changed.  No arguments are passed so the function must store the
    old state somewhere (for example in a closure).  If it returns `False`
    the template will be reloaded.
  summary: Get the template source, filename and reload helper for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PrefixLoader.has_source_access
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: PrefixLoader.list_templates
  kind: method
  ns: jinja2
  description: |-
    Iterates over all templates.  If the loader does not support that
    it should raise a :exc:`TypeError` which is the default behavior.
  summary: Iterates over all templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PrefixLoader.load
  kind: method
  ns: jinja2
  description: |-
    Loads a template.  This method looks up the template in the cache
    or loads one by calling :meth:`get_source`.  Subclasses should not
    override this method as loaders working on collections of other
    loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
    will not call this method but `get_source` directly.
  summary: Loads a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StrictUndefined
  kind: class
  ns: jinja2
  description: |-
    An undefined that barks on print and iteration as well as boolean
    tests and all kinds of comparisons.  In other words: you can do nothing
    with it except checking if it's defined using the `defined` test.

    >>> foo = StrictUndefined(name='foo')
    >>> str(foo)
    Traceback (most recent call last):
      ...
    jinja2.exceptions.UndefinedError: 'foo' is undefined
    >>> not foo
    Traceback (most recent call last):
      ...
    jinja2.exceptions.UndefinedError: 'foo' is undefined
    >>> foo + 42
    Traceback (most recent call last):
      ...
    jinja2.exceptions.UndefinedError: 'foo' is undefined
  summary: An undefined that barks on print and iteration as well as boolean
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: hint
    default: None
    rest: false
  - kind: positional
    name: obj
    default: missing
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: exc
    default: <class 'jinja2.exceptions.UndefinedError'>
    rest: false
  - type: StrictUndefined
  inherits_from:
  - <class 'jinja2.runtime.Undefined'>
- name: TemplateAssertionError
  kind: class
  ns: jinja2
  description: |-
    Like a template syntax error, but covers cases where something in the
    template caused an error at compile time that wasn't necessarily caused
    by a syntax error.  However it's a direct subclass of
    :exc:`TemplateSyntaxError` and has the same attributes.
  summary: Like a template syntax error, but covers cases where something in the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: TemplateAssertionError
  inherits_from:
  - <class 'jinja2.exceptions.TemplateSyntaxError'>
  - <class 'jinja2.exceptions.TemplateError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TemplateAssertionError.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplateAssertionError.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateAssertionError.message
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateAssertionError.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplateError
  kind: class
  ns: jinja2
  description: Baseclass for all template errors.
  summary: Baseclass for all template errors
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: None
    rest: false
  - type: TemplateError
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TemplateError.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplateError.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateError.message
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateError.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplateNotFound
  kind: class
  ns: jinja2
  description: |-
    Raised if a template does not exist.

    .. versionchanged:: 2.11
        If the given name is :class:`Undefined` and no message was
        provided, an :exc:`UndefinedError` is raised.
  summary: Raised if a template does not exist
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: message
    default: None
    rest: false
  - type: TemplateNotFound
  inherits_from:
  - <class 'OSError'>
  - <class 'LookupError'>
  - <class 'jinja2.exceptions.TemplateError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TemplateNotFound.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplateNotFound.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateNotFound.characters_written
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateNotFound.errno
  kind: property
  ns: jinja2
  description: POSIX exception code
  summary: POSIX exception code
  signatures: null
  inherits_from: null
- name: TemplateNotFound.filename
  kind: property
  ns: jinja2
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: TemplateNotFound.filename2
  kind: property
  ns: jinja2
  description: second exception filename
  summary: second exception filename
  signatures: null
  inherits_from: null
- name: TemplateNotFound.message
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateNotFound.strerror
  kind: property
  ns: jinja2
  description: exception strerror
  summary: exception strerror
  signatures: null
  inherits_from: null
- name: TemplateNotFound.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplateRuntimeError
  kind: class
  ns: jinja2
  description: |-
    A generic runtime error in the template engine.  Under some situations
    Jinja may raise this exception.
  summary: A generic runtime error in the template engine
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: None
    rest: false
  - type: TemplateRuntimeError
  inherits_from:
  - <class 'jinja2.exceptions.TemplateError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TemplateRuntimeError.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplateRuntimeError.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateRuntimeError.message
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateRuntimeError.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplateSyntaxError
  kind: class
  ns: jinja2
  description: Raised to tell the user that there is a problem with the template.
  summary: Raised to tell the user that there is a problem with the template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: TemplateSyntaxError
  inherits_from:
  - <class 'jinja2.exceptions.TemplateError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TemplateSyntaxError.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplateSyntaxError.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateSyntaxError.message
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateSyntaxError.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplatesNotFound
  kind: class
  ns: jinja2
  description: |-
    Like :class:`TemplateNotFound` but raised if multiple templates
    are selected.  This is a subclass of :class:`TemplateNotFound`
    exception, so just catching the base exception will catch both.

    .. versionchanged:: 2.11
        If a name in the list of names is :class:`Undefined`, a message
        about it being undefined is shown rather than the empty string.

    .. versionadded:: 2.2
  summary: Like :class:`TemplateNotFound` but raised if multiple templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: names
    default: ()
    rest: false
  - kind: positional
    name: message
    default: None
    rest: false
  - type: TemplatesNotFound
  inherits_from:
  - <class 'jinja2.exceptions.TemplateNotFound'>
  - <class 'OSError'>
  - <class 'LookupError'>
  - <class 'jinja2.exceptions.TemplateError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TemplatesNotFound.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TemplatesNotFound.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplatesNotFound.characters_written
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplatesNotFound.errno
  kind: property
  ns: jinja2
  description: POSIX exception code
  summary: POSIX exception code
  signatures: null
  inherits_from: null
- name: TemplatesNotFound.filename
  kind: property
  ns: jinja2
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: TemplatesNotFound.filename2
  kind: property
  ns: jinja2
  description: second exception filename
  summary: second exception filename
  signatures: null
  inherits_from: null
- name: TemplatesNotFound.message
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplatesNotFound.strerror
  kind: property
  ns: jinja2
  description: exception strerror
  summary: exception strerror
  signatures: null
  inherits_from: null
- name: TemplatesNotFound.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Undefined
  kind: class
  ns: jinja2
  description: |-
    The default undefined type.  This undefined type can be printed and
    iterated over, but every other access will raise an :exc:`UndefinedError`:

    >>> foo = Undefined(name='foo')
    >>> str(foo)
    ''
    >>> not foo
    True
    >>> foo + 42
    Traceback (most recent call last):
      ...
    jinja2.exceptions.UndefinedError: 'foo' is undefined
  summary: The default undefined type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: hint
    default: None
    rest: false
  - kind: positional
    name: obj
    default: missing
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: exc
    default: <class 'jinja2.exceptions.UndefinedError'>
    rest: false
  - type: Undefined
  inherits_from: null
- name: UndefinedError
  kind: class
  ns: jinja2
  description: Raised if a template tries to operate on :class:`Undefined`.
  summary: Raised if a template tries to operate on :class:`Undefined`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: None
    rest: false
  - type: UndefinedError
  inherits_from:
  - <class 'jinja2.exceptions.TemplateRuntimeError'>
  - <class 'jinja2.exceptions.TemplateError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: UndefinedError.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: UndefinedError.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UndefinedError.message
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UndefinedError.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: async_utils
  kind: module
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WRAPPER_ASSIGNMENTS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: async_variant
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: normal_func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_aiter
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_await
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_to_list
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_eval_context
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
    to the decorated function when called while rendering a template.
    See :ref:`eval-context`.

    Can be used on functions, filters, and tests.

    If only ``EvalContext.environment`` is needed, use
    :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: wraps
  kind: function
  ns: jinja2
  description: |-
    Decorator factory to apply update_wrapper() to a wrapper function

    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
  summary: Decorator factory to apply update_wrapper() to a wrapper function
  signatures:
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
- name: bccache
  kind: module
  ns: jinja2
  description: |-
    The optional bytecode cache system. This is useful if you have very
    complex template situations and the compilation of all those templates
    slows down your application too much.

    Situations where this is useful are often forking web applications that
    are initialized on the first request.
  summary: The optional bytecode cache system
  signatures: null
  inherits_from: null
- name: Bucket
  kind: class
  ns: jinja2
  description: |-
    Buckets are used to store the bytecode for one template.  It's created
    and initialized by the bytecode cache and passed to the loading functions.

    The buckets get an internal checksum from the cache assigned and use this
    to automatically reject outdated cache material.  Individual bytecode
    cache subclasses don't have to care about cache invalidation.
  summary: Buckets are used to store the bytecode for one template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: checksum
    default: null
    rest: false
  - type: Bucket
  inherits_from: null
- name: Bucket.bytecode_from_string
  kind: method
  ns: jinja2
  description: Load bytecode from bytes.
  summary: Load bytecode from bytes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Bucket.bytecode_to_string
  kind: method
  ns: jinja2
  description: Return the bytecode as bytes.
  summary: Return the bytecode as bytes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Bucket.load_bytecode
  kind: method
  ns: jinja2
  description: Loads bytecode from a file or file like object.
  summary: Loads bytecode from a file or file like object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Bucket.reset
  kind: method
  ns: jinja2
  description: Resets the bucket (unloads the bytecode).
  summary: Resets the bucket (unloads the bytecode)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Bucket.write_bytecode
  kind: method
  ns: jinja2
  description: Dump the bytecode into the file or file like object passed.
  summary: Dump the bytecode into the file or file like object passed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO
  kind: class
  ns: jinja2
  description: Buffered I/O implementation using an in-memory bytes buffer.
  summary: Buffered I/O implementation using an in-memory bytes buffer
  signatures:
  - kind: positional
    name: initial_bytes
    default: b''
    rest: false
  - type: BytesIO
  inherits_from:
  - <class '_io._BufferedIOBase'>
  - <class '_io._IOBase'>
- name: BytesIO.close
  kind: callable
  ns: jinja2
  description: Disable all I/O operations.
  summary: Disable all I/O operations
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.closed
  kind: property
  ns: jinja2
  description: True if the file is closed.
  summary: True if the file is closed
  signatures: null
  inherits_from: null
- name: BytesIO.detach
  kind: callable
  ns: jinja2
  description: |-
    Disconnect this buffer from its underlying raw stream and return it.

    After the raw stream has been detached, the buffer is in an unusable
    state.
  summary: Disconnect this buffer from its underlying raw stream and return it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.fileno
  kind: callable
  ns: jinja2
  description: |-
    Returns underlying file descriptor if one exists.

    OSError is raised if the IO object does not use a file descriptor.
  summary: Returns underlying file descriptor if one exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.flush
  kind: callable
  ns: jinja2
  description: Does nothing.
  summary: Does nothing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.getbuffer
  kind: callable
  ns: jinja2
  description: Get a read-write view over the contents of the BytesIO object.
  summary: Get a read-write view over the contents of the BytesIO object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.getvalue
  kind: callable
  ns: jinja2
  description: Retrieve the entire contents of the BytesIO object.
  summary: Retrieve the entire contents of the BytesIO object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.isatty
  kind: callable
  ns: jinja2
  description: |-
    Always returns False.

    BytesIO objects are not connected to a TTY-like device.
  summary: Always returns False
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.read
  kind: callable
  ns: jinja2
  description: |-
    Read at most size bytes, returned as a bytes object.

    If the size argument is negative, read until EOF is reached.
    Return an empty bytes object at EOF.
  summary: Read at most size bytes, returned as a bytes object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.read1
  kind: callable
  ns: jinja2
  description: |-
    Read at most size bytes, returned as a bytes object.

    If the size argument is negative or omitted, read until EOF is reached.
    Return an empty bytes object at EOF.
  summary: Read at most size bytes, returned as a bytes object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readable
  kind: callable
  ns: jinja2
  description: Returns True if the IO object can be read.
  summary: Returns True if the IO object can be read
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readinto
  kind: callable
  ns: jinja2
  description: |-
    Read bytes into buffer.

    Returns number of bytes read (0 for EOF), or None if the object
    is set not to block and has no data to read.
  summary: Read bytes into buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: buffer
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readinto1
  kind: callable
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: buffer
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readline
  kind: callable
  ns: jinja2
  description: |-
    Next line from the file, as a bytes object.

    Retain newline.  A non-negative size argument limits the maximum
    number of bytes to return (an incomplete line may be returned then).
    Return an empty bytes object at EOF.
  summary: Next line from the file, as a bytes object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readlines
  kind: callable
  ns: jinja2
  description: |-
    List of bytes objects, each a line from the file.

    Call readline() repeatedly and return a list of the lines so read.
    The optional size argument, if given, is an approximate bound on the
    total number of bytes in the lines returned.
  summary: List of bytes objects, each a line from the file
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.seek
  kind: callable
  ns: jinja2
  description: |-
    Change stream position.

    Seek to byte offset pos relative to position indicated by whence:
         0  Start of stream (the default).  pos should be >= 0;
         1  Current position - pos may be negative;
         2  End of stream - pos usually negative.
    Returns the new absolute position.
  summary: Change stream position
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pos
    default: null
    rest: false
  - kind: positional
    name: whence
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.seekable
  kind: callable
  ns: jinja2
  description: Returns True if the IO object can be seeked.
  summary: Returns True if the IO object can be seeked
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.tell
  kind: callable
  ns: jinja2
  description: Current file position, an integer.
  summary: Current file position, an integer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.truncate
  kind: callable
  ns: jinja2
  description: |-
    Truncate the file to at most size bytes.

    Size defaults to the current file position, as returned by tell().
    The current file position is unchanged.  Returns the new size.
  summary: Truncate the file to at most size bytes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.writable
  kind: callable
  ns: jinja2
  description: Returns True if the IO object can be written.
  summary: Returns True if the IO object can be written
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.write
  kind: callable
  ns: jinja2
  description: |-
    Write bytes to file.

    Return the number of bytes written.
  summary: Write bytes to file
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: b
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.writelines
  kind: callable
  ns: jinja2
  description: |-
    Write lines to the file.

    Note that newlines are not added.  lines can be any iterable object
    producing bytes-like objects. This is equivalent to calling write() for
    each element.
  summary: Write lines to the file
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lines
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CodeType
  kind: class
  ns: jinja2
  description: Create a code object.  Not for the faint of heart.
  summary: Create a code object
  signatures:
  - kind: positional
    name: argcount
    default: null
    rest: false
  - kind: positional
    name: posonlyargcount
    default: null
    rest: false
  - kind: positional
    name: kwonlyargcount
    default: null
    rest: false
  - kind: positional
    name: nlocals
    default: null
    rest: false
  - kind: positional
    name: stacksize
    default: null
    rest: false
  - kind: positional
    name: flags
    default: null
    rest: false
  - kind: positional
    name: codestring
    default: null
    rest: false
  - kind: positional
    name: constants
    default: null
    rest: false
  - kind: positional
    name: names
    default: null
    rest: false
  - kind: positional
    name: varnames
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: qualname
    default: null
    rest: false
  - kind: positional
    name: firstlineno
    default: null
    rest: false
  - kind: positional
    name: linetable
    default: null
    rest: false
  - kind: positional
    name: exceptiontable
    default: null
    rest: false
  - kind: positional
    name: freevars
    default: ()
    rest: false
  - kind: positional
    name: cellvars
    default: ()
    rest: false
  - type: code
  inherits_from: null
- name: CodeType.co_argcount
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_cellvars
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_code
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_consts
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_exceptiontable
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_filename
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_firstlineno
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_flags
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_freevars
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_kwonlyargcount
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_lines
  kind: callable
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_linetable
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_lnotab
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_name
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_names
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_nlocals
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_positions
  kind: callable
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_posonlyargcount
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_qualname
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_stacksize
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.co_varnames
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CodeType.replace
  kind: callable
  ns: jinja2
  description: Return a copy of the code object with new values for the specified fields.
  summary: Return a copy of the code object with new values for the specified fields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: bc_magic
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: bc_version
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: clear_caches
  kind: function
  ns: jinja2
  description: |-
    Jinja keeps internal caches for environments and lexers.  These are
    used so that Jinja doesn't have to recreate environments and lexers all
    the time.  Normally you don't have to care about that but if you are
    measuring memory consumption you may want to clean the caches.
  summary: Jinja keeps internal caches for environments and lexers
  signatures:
  - type: '?'
  inherits_from: null
- name: compiler
  kind: module
  ns: jinja2
  description: Compiles nodes from the parser into Python code.
  summary: Compiles nodes from the parser into Python code
  signatures: null
  inherits_from: null
- name: CompilerExit
  kind: class
  ns: jinja2
  description: |-
    Raised if the compiler encountered a situation where it just
    doesn't make sense to further process the code.  Any block that
    raises such an exception is not further processed.
  summary: Raised if the compiler encountered a situation where it just
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: CompilerExit.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: CompilerExit.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CompilerExit.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DependencyFinderVisitor
  kind: class
  ns: jinja2
  description: A visitor that collects filter and test calls.
  summary: A visitor that collects filter and test calls
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: DependencyFinderVisitor
  inherits_from:
  - <class 'jinja2.visitor.NodeVisitor'>
- name: DependencyFinderVisitor.generic_visit
  kind: method
  ns: jinja2
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DependencyFinderVisitor.get_visitor
  kind: method
  ns: jinja2
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DependencyFinderVisitor.visit
  kind: method
  ns: jinja2
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DependencyFinderVisitor.visit_Block
  kind: method
  ns: jinja2
  description: Stop visiting at blocks.
  summary: Stop visiting at blocks
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DependencyFinderVisitor.visit_Filter
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DependencyFinderVisitor.visit_Test
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContext
  kind: class
  ns: jinja2
  description: |-
    Holds evaluation time information.  Custom attributes can be attached
    to it in extensions.
  summary: Holds evaluation time information
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template_name
    default: None
    rest: false
  - type: EvalContext
  inherits_from: null
- name: EvalContext.revert
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContext.save
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: F
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Frame
  kind: class
  ns: jinja2
  description: Holds compile time information for us.
  summary: Holds compile time information for us
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: level
    default: None
    rest: false
  - type: Frame
  inherits_from: null
- name: Frame.copy
  kind: method
  ns: jinja2
  description: Create a copy of the current one.
  summary: Create a copy of the current one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Frame.inner
  kind: method
  ns: jinja2
  description: Return an inner frame.
  summary: Return an inner frame
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: isolated
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Frame.soft
  kind: method
  ns: jinja2
  description: |-
    Return a soft frame.  A soft frame may not be modified as
    standalone thing as it shares the resources with the frame it
    was created of, but it's not a rootlevel frame any longer.

    This is only used to implement if-statements and conditional
    expressions.
  summary: Return a soft frame
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MacroRef
  kind: class
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: MacroRef
  inherits_from: null
- name: Markup
  kind: class
  ns: jinja2
  description: |-
    A string that is ready to be safely inserted into an HTML or XML
    document, either because it was escaped or because it was marked
    safe.

    Passing an object to the constructor converts it to text and wraps
    it to mark it safe without escaping. To escape the text, use the
    :meth:`escape` class method instead.

    >>> Markup("Hello, <em>World</em>!")
    Markup('Hello, <em>World</em>!')
    >>> Markup(42)
    Markup('42')
    >>> Markup.escape("Hello, <em>World</em>!")
    Markup('Hello &lt;em&gt;World&lt;/em&gt;!')

    This implements the ``__html__()`` interface that some frameworks
    use. Passing an object that implements ``__html__()`` will wrap the
    output of that method, marking it safe.

    >>> class Foo:
    ...     def __html__(self):
    ...         return '<a href="/foo">foo</a>'
    ...
    >>> Markup(Foo())
    Markup('<a href="/foo">foo</a>')

    This is a subclass of :class:`str`. It has the same methods, but
    escapes their arguments and returns a ``Markup`` instance.

    >>> Markup("<em>%s</em>") % ("foo & bar",)
    Markup('<em>foo &amp; bar</em>')
    >>> Markup("<em>Hello</em> ") + "<foo>"
    Markup('<em>Hello</em> &lt;foo&gt;')
  summary: A string that is ready to be safely inserted into an HTML or XML
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: base
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - type: Markup
  inherits_from:
  - <class 'str'>
- name: Markup.capitalize
  kind: method
  ns: jinja2
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.casefold
  kind: method
  ns: jinja2
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.center
  kind: method
  ns: jinja2
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.count
  kind: callable
  ns: jinja2
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: Markup.encode
  kind: callable
  ns: jinja2
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: utf-8
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.endswith
  kind: callable
  ns: jinja2
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: Markup.escape
  kind: function
  ns: jinja2
  description: |-
    Escape a string. Calls :func:`escape` and ensures that for
    subclasses the correct type is returned.
  summary: Escape a string
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.expandtabs
  kind: method
  ns: jinja2
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.find
  kind: callable
  ns: jinja2
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: Markup.format
  kind: method
  ns: jinja2
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.format_map
  kind: method
  ns: jinja2
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: map
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.index
  kind: callable
  ns: jinja2
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: Markup.isalnum
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.isalpha
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.isascii
  kind: callable
  ns: jinja2
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.isdecimal
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.isdigit
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.isidentifier
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.islower
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.isnumeric
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.isprintable
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.isspace
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.istitle
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.isupper
  kind: callable
  ns: jinja2
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.join
  kind: method
  ns: jinja2
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.ljust
  kind: method
  ns: jinja2
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.lower
  kind: method
  ns: jinja2
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.lstrip
  kind: method
  ns: jinja2
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.partition
  kind: method
  ns: jinja2
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sep
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.removeprefix
  kind: method
  ns: jinja2
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.removesuffix
  kind: method
  ns: jinja2
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.replace
  kind: method
  ns: jinja2
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.rfind
  kind: callable
  ns: jinja2
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: Markup.rindex
  kind: callable
  ns: jinja2
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: Markup.rjust
  kind: method
  ns: jinja2
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.rpartition
  kind: method
  ns: jinja2
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sep
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.rsplit
  kind: method
  ns: jinja2
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sep
    default: None
    rest: false
  - kind: positional
    name: maxsplit
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.rstrip
  kind: method
  ns: jinja2
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.split
  kind: method
  ns: jinja2
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sep
    default: None
    rest: false
  - kind: positional
    name: maxsplit
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.splitlines
  kind: method
  ns: jinja2
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keepends
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.startswith
  kind: callable
  ns: jinja2
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: Markup.strip
  kind: method
  ns: jinja2
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.striptags
  kind: method
  ns: jinja2
  description: |-
    :meth:`unescape` the markup, remove tags, and normalize
    whitespace to single spaces.

    >>> Markup("Main &raquo;        <em>About</em>").striptags()
    'Main » About'
  summary: :meth:`unescape` the markup, remove tags, and normalize
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.swapcase
  kind: method
  ns: jinja2
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.title
  kind: method
  ns: jinja2
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.translate
  kind: method
  ns: jinja2
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.unescape
  kind: method
  ns: jinja2
  description: |-
    Convert escaped markup back into a text string. This replaces
    HTML entities with the characters they represent.

    >>> Markup("Main &raquo; <em>About</em>").unescape()
    'Main » <em>About</em>'
  summary: Convert escaped markup back into a text string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.upper
  kind: method
  ns: jinja2
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Markup.zfill
  kind: method
  ns: jinja2
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NodeVisitor
  kind: class
  ns: jinja2
  description: |-
    Walks the abstract syntax tree and call visitor functions for every
    node found.  The visitor functions may return values which will be
    forwarded by the `visit` method.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `get_visitor` function.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.
  summary: Walks the abstract syntax tree and call visitor functions for every
  signatures:
  - type: NodeVisitor
  inherits_from: null
- name: NodeVisitor.generic_visit
  kind: method
  ns: jinja2
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NodeVisitor.get_visitor
  kind: method
  ns: jinja2
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NodeVisitor.visit
  kind: method
  ns: jinja2
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Optimizer
  kind: class
  ns: jinja2
  description: |-
    Walks the abstract syntax tree and allows modifications of nodes.

    The `NodeTransformer` will walk the AST and use the return value of the
    visitor functions to replace or remove the old node.  If the return
    value of the visitor function is `None` the node will be removed
    from the previous location otherwise it's replaced with the return
    value.  The return value may be the original node in which case no
    replacement takes place.
  summary: Walks the abstract syntax tree and allows modifications of nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: Optimizer
  inherits_from:
  - <class 'jinja2.visitor.NodeTransformer'>
  - <class 'jinja2.visitor.NodeVisitor'>
- name: Optimizer.generic_visit
  kind: method
  ns: jinja2
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Optimizer.get_visitor
  kind: method
  ns: jinja2
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Optimizer.visit
  kind: method
  ns: jinja2
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Optimizer.visit_list
  kind: method
  ns: jinja2
  description: |-
    As transformers may return lists in some places this method
    can be used to enforce a list as return value.
  summary: As transformers may return lists in some places this method
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO
  kind: class
  ns: jinja2
  description: |-
    Text I/O implementation using an in-memory buffer.

    The initial_value argument sets the value of object.  The newline
    argument is like the one of TextIOWrapper's constructor.
  summary: Text I/O implementation using an in-memory buffer
  signatures:
  - kind: positional
    name: initial_value
    default: null
    rest: false
  - kind: positional
    name: newline
    default: |2+

    rest: false
  - type: StringIO
  inherits_from:
  - <class '_io._TextIOBase'>
  - <class '_io._IOBase'>
- name: StringIO.close
  kind: callable
  ns: jinja2
  description: |-
    Close the IO object.

    Attempting any further operation after the object is closed
    will raise a ValueError.

    This method has no effect if the file is already closed.
  summary: Close the IO object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.closed
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StringIO.detach
  kind: callable
  ns: jinja2
  description: |-
    Separate the underlying buffer from the TextIOBase and return it.

    After the underlying buffer has been detached, the TextIO is in an
    unusable state.
  summary: Separate the underlying buffer from the TextIOBase and return it
  signatures: null
  inherits_from: null
- name: StringIO.encoding
  kind: property
  ns: jinja2
  description: |-
    Encoding of the text stream.

    Subclasses should override.
  summary: Encoding of the text stream
  signatures: null
  inherits_from: null
- name: StringIO.errors
  kind: property
  ns: jinja2
  description: |-
    The error setting of the decoder or encoder.

    Subclasses should override.
  summary: The error setting of the decoder or encoder
  signatures: null
  inherits_from: null
- name: StringIO.fileno
  kind: callable
  ns: jinja2
  description: |-
    Returns underlying file descriptor if one exists.

    OSError is raised if the IO object does not use a file descriptor.
  summary: Returns underlying file descriptor if one exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.flush
  kind: callable
  ns: jinja2
  description: |-
    Flush write buffers, if applicable.

    This is not implemented for read-only and non-blocking streams.
  summary: Flush write buffers, if applicable
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.getvalue
  kind: callable
  ns: jinja2
  description: Retrieve the entire contents of the object.
  summary: Retrieve the entire contents of the object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.isatty
  kind: callable
  ns: jinja2
  description: |-
    Return whether this is an 'interactive' stream.

    Return False if it can't be determined.
  summary: Return whether this is an 'interactive' stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.line_buffering
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StringIO.newlines
  kind: property
  ns: jinja2
  description: |-
    Line endings translated so far.

    Only line endings translated during reading are considered.

    Subclasses should override.
  summary: Line endings translated so far
  signatures: null
  inherits_from: null
- name: StringIO.read
  kind: callable
  ns: jinja2
  description: |-
    Read at most size characters, returned as a string.

    If the argument is negative or omitted, read until EOF
    is reached. Return an empty string at EOF.
  summary: Read at most size characters, returned as a string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.readable
  kind: callable
  ns: jinja2
  description: Returns True if the IO object can be read.
  summary: Returns True if the IO object can be read
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.readline
  kind: callable
  ns: jinja2
  description: |-
    Read until newline or EOF.

    Returns an empty string if EOF is hit immediately.
  summary: Read until newline or EOF
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.readlines
  kind: callable
  ns: jinja2
  description: |-
    Return a list of lines from the stream.

    hint can be specified to control the number of lines read: no more
    lines will be read if the total size (in bytes/characters) of all
    lines so far exceeds hint.
  summary: Return a list of lines from the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: hint
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.seek
  kind: callable
  ns: jinja2
  description: |-
    Change stream position.

    Seek to character offset pos relative to position indicated by whence:
        0  Start of stream (the default).  pos should be >= 0;
        1  Current position - pos must be 0;
        2  End of stream - pos must be 0.
    Returns the new absolute position.
  summary: Change stream position
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pos
    default: null
    rest: false
  - kind: positional
    name: whence
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.seekable
  kind: callable
  ns: jinja2
  description: Returns True if the IO object can be seeked.
  summary: Returns True if the IO object can be seeked
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.tell
  kind: callable
  ns: jinja2
  description: Tell the current file position.
  summary: Tell the current file position
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.truncate
  kind: callable
  ns: jinja2
  description: |-
    Truncate size to pos.

    The pos argument defaults to the current file position, as
    returned by tell().  The current file position is unchanged.
    Returns the new absolute position.
  summary: Truncate size to pos
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pos
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.writable
  kind: callable
  ns: jinja2
  description: Returns True if the IO object can be written.
  summary: Returns True if the IO object can be written
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.write
  kind: callable
  ns: jinja2
  description: |-
    Write string to file.

    Returns the number of characters written, which is always equal to
    the length of the string.
  summary: Write string to file
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringIO.writelines
  kind: callable
  ns: jinja2
  description: |-
    Write a list of lines to stream.

    Line separators are not added, so it is usual for each of the
    lines provided to have a line separator at the end.
  summary: Write a list of lines to stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lines
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols
  kind: class
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: level
    default: None
    rest: false
  - type: Symbols
  inherits_from: null
- name: Symbols.analyze_node
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.branch_update
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: branch_symbols
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.copy
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.declare_parameter
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.dump_param_targets
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.dump_stores
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.find_load
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.find_ref
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.load
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.ref
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Symbols.store
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UndeclaredNameVisitor
  kind: class
  ns: jinja2
  description: |-
    A visitor that checks if a name is accessed without being
    declared.  This is different from the frame visitor as it will
    not stop at closure frames.
  summary: A visitor that checks if a name is accessed without being
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: names
    default: null
    rest: false
  - type: UndeclaredNameVisitor
  inherits_from:
  - <class 'jinja2.visitor.NodeVisitor'>
- name: UndeclaredNameVisitor.generic_visit
  kind: method
  ns: jinja2
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UndeclaredNameVisitor.get_visitor
  kind: method
  ns: jinja2
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UndeclaredNameVisitor.visit
  kind: method
  ns: jinja2
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UndeclaredNameVisitor.visit_Block
  kind: method
  ns: jinja2
  description: Stop visiting a blocks.
  summary: Stop visiting a blocks
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UndeclaredNameVisitor.visit_Name
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: VAR_LOAD_ALIAS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_PARAMETER
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_RESOLVE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_UNDEFINED
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VisitorExit
  kind: class
  ns: jinja2
  description: Exception used by the `UndeclaredNameVisitor` to signal a stop.
  summary: Exception used by the `UndeclaredNameVisitor` to signal a stop
  signatures: null
  inherits_from:
  - <class 'RuntimeError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: VisitorExit.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: VisitorExit.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VisitorExit.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: chain
  kind: class
  ns: jinja2
  description: |-
    chain(*iterables) --> chain object

    Return a chain object whose .__next__() method returns elements from the
    first iterable until it is exhausted, then elements from the next
    iterable, until all of the iterables are exhausted.
  summary: chain(*iterables) --> chain object
  signatures: null
  inherits_from: null
- name: contextmanager
  kind: function
  ns: jinja2
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: find_undeclared
  kind: function
  ns: jinja2
  description: |-
    Check if the names passed are accessed undeclared.  The return value
    is a set of all the undeclared names from the sequence of names found.
  summary: Check if the names passed are accessed undeclared
  signatures:
  - kind: positional
    name: nodes
    default: null
    rest: false
  - kind: positional
    name: names
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: generate
  kind: function
  ns: jinja2
  description: Generate the python source for a node tree.
  summary: Generate the python source for a node tree
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: stream
    default: None
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: has_safe_repr
  kind: function
  ns: jinja2
  description: Does the node have a safe representation?
  summary: Does the node have a safe representation?
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: nodes
  kind: module
  ns: jinja2
  description: |-
    AST nodes generated by the parser for the compiler. Also provides
    some node tree helper functions used by the parser and compiler in order
    to normalize nodes.
  summary: AST nodes generated by the parser for the compiler
  signatures: null
  inherits_from: null
- name: Add
  kind: class
  ns: jinja2
  description: Add the left to the right node.
  summary: Add the left to the right node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Add
  inherits_from:
  - <class 'jinja2.nodes.BinExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Add.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Add.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Add.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Add.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Add.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Add.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Add.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Add.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Add.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Add.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Add.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Add.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Add.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Add.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: And
  kind: class
  ns: jinja2
  description: Short circuited AND.
  summary: Short circuited AND
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: And
  inherits_from:
  - <class 'jinja2.nodes.BinExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: And.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: And.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: And.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: And.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: And.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: And.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: And.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: And.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: And.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: And.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: And.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: And.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: And.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: And.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Assign
  kind: class
  ns: jinja2
  description: Assigns an expression to a target.
  summary: Assigns an expression to a target
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Assign
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Assign.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Assign.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Assign.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Assign.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Assign.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Assign.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Assign.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Assign.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Assign.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Assign.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Assign.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: AssignBlock
  kind: class
  ns: jinja2
  description: Assigns a block to a target.
  summary: Assigns a block to a target
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: AssignBlock
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: AssignBlock.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: AssignBlock.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: AssignBlock.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AssignBlock.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: AssignBlock.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AssignBlock.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AssignBlock.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: AssignBlock.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: AssignBlock.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AssignBlock.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AssignBlock.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr
  kind: class
  ns: jinja2
  description: Baseclass for all binary expressions.
  summary: Baseclass for all binary expressions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: BinExpr
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: BinExpr.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: BinExpr.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: BinExpr.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: BinExpr.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BinExpr.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Block
  kind: class
  ns: jinja2
  description: |-
    A node that represents a block.

    .. versionchanged:: 3.0.0
        the `required` field was added.
  summary: A node that represents a block
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Block
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Block.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Block.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Block.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Block.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Block.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Block.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Block.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Block.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Block.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Block.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Block.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Break
  kind: class
  ns: jinja2
  description: Break a loop.
  summary: Break a loop
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Break
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Break.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Break.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Break.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Break.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Break.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Break.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Break.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Break.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Break.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Break.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Break.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Call
  kind: class
  ns: jinja2
  description: |-
    Calls an expression.  `args` is a list of arguments, `kwargs` a list
    of keyword arguments (list of :class:`Keyword` nodes), and `dyn_args`
    and `dyn_kwargs` has to be either `None` or a node that is used as
    node for dynamic positional (``*args``) or keyword (``**kwargs``)
    arguments.
  summary: Calls an expression
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Call
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Call.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Call.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Call.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Call.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Call.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Call.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Call.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Call.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Call.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Call.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Call.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Call.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Call.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: CallBlock
  kind: class
  ns: jinja2
  description: |-
    Like a macro without a name but a call instead.  `call` is called with
    the unnamed macro as `caller` argument this node holds.
  summary: Like a macro without a name but a call instead
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: CallBlock
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: CallBlock.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: CallBlock.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: CallBlock.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CallBlock.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: CallBlock.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CallBlock.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CallBlock.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CallBlock.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CallBlock.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CallBlock.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CallBlock.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare
  kind: class
  ns: jinja2
  description: |-
    Compares an expression with some other expressions.  `ops` must be a
    list of :class:`Operand`\s.
  summary: Compares an expression with some other expressions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Compare
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Compare.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Compare.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Compare.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Compare.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Compare.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat
  kind: class
  ns: jinja2
  description: |-
    Concatenates the list of expressions provided after converting
    them to strings.
  summary: Concatenates the list of expressions provided after converting
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Concat
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Concat.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Concat.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Concat.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Concat.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Concat.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr
  kind: class
  ns: jinja2
  description: |-
    A conditional expression (inline if expression).  (``{{
    foo if bar else baz }}``)
  summary: A conditional expression (inline if expression)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: CondExpr
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: CondExpr.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: CondExpr.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: CondExpr.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: CondExpr.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CondExpr.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Const
  kind: class
  ns: jinja2
  description: |-
    All constant values.  The parser will return this node for simple
    constants such as ``42`` or ``"foo"`` but it can be used to store more
    complex values such as lists too.  Only constants with a safe
    representation (objects where ``eval(repr(x)) == x`` is true).
  summary: All constant values
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Const
  inherits_from:
  - <class 'jinja2.nodes.Literal'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Const.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Const.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Const.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Const.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.from_untrusted
  kind: function
  ns: jinja2
  description: |-
    Return a const object if the value is representable as
    constant value in the generated code, otherwise it will raise
    an `Impossible` exception.
  summary: Return a const object if the value is representable as
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - kind: positional
    name: environment
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Const.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference
  kind: class
  ns: jinja2
  description: |-
    Returns the current template context.  It can be used like a
    :class:`Name` node, with a ``'load'`` ctx and will return the
    current :class:`~jinja2.runtime.Context` object.

    Here an example that assigns the current template name to a
    variable named `foo`::

        Assign(Name('foo', ctx='store'),
               Getattr(ContextReference(), 'name'))

    This is basically equivalent to using the
    :func:`~jinja2.pass_context` decorator when using the high-level
    API, which causes a reference to the context to be passed as the
    first argument to a function.
  summary: Returns the current template context
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: ContextReference
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: ContextReference.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ContextReference.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ContextReference.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ContextReference.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContextReference.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Continue
  kind: class
  ns: jinja2
  description: Continue a loop.
  summary: Continue a loop
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Continue
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Continue.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Continue.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Continue.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Continue.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Continue.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Continue.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Continue.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Continue.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Continue.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Continue.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Continue.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference
  kind: class
  ns: jinja2
  description: |-
    Return the current template context including locals. Behaves
    exactly like :class:`ContextReference`, but includes local
    variables, such as from a ``for`` loop.

    .. versionadded:: 2.11
  summary: Return the current template context including locals
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: DerivedContextReference
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: DerivedContextReference.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: DerivedContextReference.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: DerivedContextReference.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: DerivedContextReference.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DerivedContextReference.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict
  kind: class
  ns: jinja2
  description: |-
    Any dict literal such as ``{1: 2, 3: 4}``.  The items must be a list of
    :class:`Pair` nodes.
  summary: 'Any dict literal such as ``{1: 2, 3: 4}``'
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Dict
  inherits_from:
  - <class 'jinja2.nodes.Literal'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Dict.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Dict.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Dict.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Dict.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Dict.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Div
  kind: class
  ns: jinja2
  description: Divides the left by the right node.
  summary: Divides the left by the right node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Div
  inherits_from:
  - <class 'jinja2.nodes.BinExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Div.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Div.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Div.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Div.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Div.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Div.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Div.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Div.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Div.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Div.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Div.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Div.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Div.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Div.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute
  kind: class
  ns: jinja2
  description: |-
    Loads an attribute from the environment object.  This is useful for
    extensions that want to call a callback stored on the environment.
  summary: Loads an attribute from the environment object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: EnvironmentAttribute
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: EnvironmentAttribute.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: EnvironmentAttribute.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: EnvironmentAttribute.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: EnvironmentAttribute.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EnvironmentAttribute.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContextModifier
  kind: class
  ns: jinja2
  description: |-
    Modifies the eval context.  For each option that should be modified,
    a :class:`Keyword` has to be added to the :attr:`options` list.

    Example to change the `autoescape` setting::

        EvalContextModifier(options=[Keyword('autoescape', Const(True))])
  summary: Modifies the eval context
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: EvalContextModifier
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: EvalContextModifier.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: EvalContextModifier.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: EvalContextModifier.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContextModifier.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: EvalContextModifier.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContextModifier.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContextModifier.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContextModifier.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContextModifier.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContextModifier.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EvalContextModifier.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr
  kind: class
  ns: jinja2
  description: Baseclass for all expressions.
  summary: Baseclass for all expressions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Expr
  inherits_from:
  - <class 'jinja2.nodes.Node'>
- name: Expr.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Expr.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Expr.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Expr.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Expr.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmt
  kind: class
  ns: jinja2
  description: A statement that evaluates an expression and discards the result.
  summary: A statement that evaluates an expression and discards the result
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: ExprStmt
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: ExprStmt.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ExprStmt.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ExprStmt.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmt.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ExprStmt.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmt.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmt.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmt.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmt.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmt.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmt.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Extends
  kind: class
  ns: jinja2
  description: Represents an extends statement.
  summary: Represents an extends statement
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Extends
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Extends.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Extends.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Extends.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Extends.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Extends.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Extends.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Extends.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Extends.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Extends.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Extends.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Extends.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute
  kind: class
  ns: jinja2
  description: |-
    Returns the attribute of an extension bound to the environment.
    The identifier is the identifier of the :class:`Extension`.

    This node is usually constructed by calling the
    :meth:`~jinja2.ext.Extension.attr` method on an extension.
  summary: Returns the attribute of an extension bound to the environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: ExtensionAttribute
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: ExtensionAttribute.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ExtensionAttribute.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ExtensionAttribute.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ExtensionAttribute.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExtensionAttribute.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter
  kind: class
  ns: jinja2
  description: |-
    Apply a filter to an expression. ``name`` is the name of the
    filter, the other fields are the same as :class:`Call`.

    If ``node`` is ``None``, the filter is being used in a filter block
    and is applied to the content of the block.
  summary: Apply a filter to an expression
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Filter
  inherits_from:
  - <class 'jinja2.nodes._FilterTestCommon'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Filter.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Filter.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Filter.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Filter.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Filter.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: FilterBlock
  kind: class
  ns: jinja2
  description: Node for filter sections.
  summary: Node for filter sections
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: FilterBlock
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: FilterBlock.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FilterBlock.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: FilterBlock.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FilterBlock.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: FilterBlock.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FilterBlock.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FilterBlock.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FilterBlock.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FilterBlock.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FilterBlock.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FilterBlock.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv
  kind: class
  ns: jinja2
  description: |-
    Divides the left by the right node and converts the
    result into an integer by truncating.
  summary: Divides the left by the right node and converts the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: FloorDiv
  inherits_from:
  - <class 'jinja2.nodes.BinExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: FloorDiv.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FloorDiv.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: FloorDiv.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: FloorDiv.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: FloorDiv.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloorDiv.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: For
  kind: class
  ns: jinja2
  description: |-
    The for loop.  `target` is the target for the iteration (usually a
    :class:`Name` or :class:`Tuple`), `iter` the iterable.  `body` is a list
    of nodes that are used as loop-body, and `else_` a list of nodes for the
    `else` block.  If no else node exists it has to be an empty list.

    For filtered nodes an expression can be stored as `test`, otherwise `None`.
  summary: The for loop
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: For
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: For.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: For.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: For.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: For.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: For.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: For.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: For.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: For.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: For.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: For.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: For.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: FromImport
  kind: class
  ns: jinja2
  description: |-
    A node that represents the from import tag.  It's important to not
    pass unsafe names to the name attribute.  The compiler translates the
    attribute lookups directly into getattr calls and does *not* use the
    subscript callback of the interface.  As exported variables may not
    start with double underscores (which the parser asserts) this is not a
    problem for regular Jinja code, but if this node is used in an extension
    extra care must be taken.

    The list of names may contain tuples if aliases are wanted.
  summary: A node that represents the from import tag
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: FromImport
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: FromImport.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FromImport.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: FromImport.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FromImport.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: FromImport.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FromImport.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FromImport.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FromImport.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FromImport.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FromImport.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FromImport.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr
  kind: class
  ns: jinja2
  description: |-
    Get an attribute or item from an expression that is a ascii-only
    bytestring and prefer the attribute.
  summary: Get an attribute or item from an expression that is a ascii-only
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Getattr
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Getattr.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Getattr.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Getattr.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Getattr.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getattr.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem
  kind: class
  ns: jinja2
  description: Get an attribute or item from an expression and prefer the item.
  summary: Get an attribute or item from an expression and prefer the item
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Getitem
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Getitem.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Getitem.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Getitem.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Getitem.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Getitem.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Helper
  kind: class
  ns: jinja2
  description: Nodes that exist in a specific context only.
  summary: Nodes that exist in a specific context only
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Helper
  inherits_from:
  - <class 'jinja2.nodes.Node'>
- name: Helper.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Helper.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Helper.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Helper.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Helper.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Helper.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Helper.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Helper.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Helper.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Helper.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Helper.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: If
  kind: class
  ns: jinja2
  description: If `test` is true, `body` is rendered, else `else_`.
  summary: If `test` is true, `body` is rendered, else `else_`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: If
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: If.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: If.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: If.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: If.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: If.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: If.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: If.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: If.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: If.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: If.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: If.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Import
  kind: class
  ns: jinja2
  description: A node that represents the import tag.
  summary: A node that represents the import tag
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Import
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Import.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Import.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Import.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Import.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Import.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Import.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Import.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Import.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Import.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Import.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Import.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName
  kind: class
  ns: jinja2
  description: |-
    If created with an import name the import name is returned on node
    access.  For example ``ImportedName('cgi.escape')`` returns the `escape`
    function from the cgi module on evaluation.  Imports are optimized by the
    compiler so there is no need to assign them to local variables.
  summary: If created with an import name the import name is returned on node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: ImportedName
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: ImportedName.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ImportedName.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ImportedName.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ImportedName.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImportedName.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Impossible
  kind: class
  ns: jinja2
  description: Raised if the node could not perform a requested action.
  summary: Raised if the node could not perform a requested action
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Impossible.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Impossible.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Impossible.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Include
  kind: class
  ns: jinja2
  description: A node that represents the include tag.
  summary: A node that represents the include tag
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Include
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Include.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Include.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Include.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Include.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Include.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Include.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Include.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Include.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Include.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Include.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Include.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName
  kind: class
  ns: jinja2
  description: |-
    An internal name in the compiler.  You cannot create these nodes
    yourself but the parser provides a
    :meth:`~jinja2.parser.Parser.free_identifier` method that creates
    a new identifier for you.  This identifier is not available from the
    template and is not treated specially by the compiler.
  summary: An internal name in the compiler
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: InternalName
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: InternalName.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: InternalName.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: InternalName.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: InternalName.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: InternalName.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Keyword
  kind: class
  ns: jinja2
  description: A key, value pair for keyword arguments where key is a string.
  summary: A key, value pair for keyword arguments where key is a string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Keyword
  inherits_from:
  - <class 'jinja2.nodes.Helper'>
  - <class 'jinja2.nodes.Node'>
- name: Keyword.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Keyword.as_const
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Keyword.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Keyword.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Keyword.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Keyword.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Keyword.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Keyword.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Keyword.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Keyword.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Keyword.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Keyword.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: List
  kind: class
  ns: jinja2
  description: Any list literal such as ``[1, 2, 3]``
  summary: Any list literal such as ``[1, 2, 3]``
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: List
  inherits_from:
  - <class 'jinja2.nodes.Literal'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: List.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: List.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: List.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: List.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: List.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: List.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: List.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: List.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: List.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: List.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: List.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: List.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: List.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal
  kind: class
  ns: jinja2
  description: Baseclass for literals.
  summary: Baseclass for literals
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Literal
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Literal.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Literal.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Literal.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Literal.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Literal.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Macro
  kind: class
  ns: jinja2
  description: |-
    A macro definition.  `name` is the name of the macro, `args` a list of
    arguments and `defaults` a list of defaults if there are any.  `body` is
    a list of nodes for the macro body.
  summary: A macro definition
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Macro
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Macro.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Macro.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Macro.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Macro.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Macro.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Macro.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Macro.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Macro.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Macro.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Macro.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Macro.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe
  kind: class
  ns: jinja2
  description: Mark the wrapped expression as safe (wrap it as `Markup`).
  summary: Mark the wrapped expression as safe (wrap it as `Markup`)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: MarkSafe
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: MarkSafe.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: MarkSafe.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: MarkSafe.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: MarkSafe.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafe.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape
  kind: class
  ns: jinja2
  description: |-
    Mark the wrapped expression as safe (wrap it as `Markup`) but
    only if autoescaping is active.

    .. versionadded:: 2.5
  summary: Mark the wrapped expression as safe (wrap it as `Markup`) but
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: MarkSafeIfAutoescape
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: MarkSafeIfAutoescape.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: MarkSafeIfAutoescape.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: MarkSafeIfAutoescape.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: MarkSafeIfAutoescape.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MarkSafeIfAutoescape.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod
  kind: class
  ns: jinja2
  description: Left modulo right.
  summary: Left modulo right
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Mod
  inherits_from:
  - <class 'jinja2.nodes.BinExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Mod.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Mod.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Mod.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Mod.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Mod.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mod.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul
  kind: class
  ns: jinja2
  description: Multiplies the left with the right node.
  summary: Multiplies the left with the right node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Mul
  inherits_from:
  - <class 'jinja2.nodes.BinExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Mul.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Mul.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Mul.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Mul.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Mul.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Mul.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef
  kind: class
  ns: jinja2
  description: Reference to a namespace value assignment
  summary: Reference to a namespace value assignment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: NSRef
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: NSRef.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: NSRef.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: NSRef.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: NSRef.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NSRef.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Name
  kind: class
  ns: jinja2
  description: |-
    Looks up a name or stores a value in a name.
    The `ctx` of the node can be one of the following values:

    -   `store`: store a value in the name
    -   `load`: load that name
    -   `param`: like `store` but if the name was defined as function parameter.
  summary: Looks up a name or stores a value in a name
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Name
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Name.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Name.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Name.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Name.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Name.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Name.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Name.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Name.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Name.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Name.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Name.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Name.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Name.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg
  kind: class
  ns: jinja2
  description: Make the expression negative.
  summary: Make the expression negative
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Neg
  inherits_from:
  - <class 'jinja2.nodes.UnaryExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Neg.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Neg.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Neg.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Neg.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Neg.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Neg.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Node
  kind: class
  ns: jinja2
  description: |-
    Baseclass for all Jinja nodes.  There are a number of nodes available
    of different types.  There are four major types:

    -   :class:`Stmt`: statements
    -   :class:`Expr`: expressions
    -   :class:`Helper`: helper nodes
    -   :class:`Template`: the outermost wrapper node

    All nodes have fields and attributes.  Fields may be other nodes, lists,
    or arbitrary values.  Fields are passed to the constructor as regular
    positional arguments, attributes as keyword arguments.  Each node has
    two attributes: `lineno` (the line number of the node) and `environment`.
    The `environment` attribute is set at the end of the parsing process for
    all nodes automatically.
  summary: Baseclass for all Jinja nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Node
  inherits_from: null
- name: Node.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Node.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Node.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Node.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Node.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Node.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Node.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Node.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Node.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Node.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Node.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: NodeType
  kind: class
  ns: jinja2
  description: |-
    A metaclass for nodes that handles the field and attribute
    inheritance.  fields and attributes from the parent class are
    automatically forwarded to the child.
  summary: A metaclass for nodes that handles the field and attribute
  signatures:
  - type: NodeType
  inherits_from:
  - <class 'type'>
- name: NodeType.mro
  kind: callable
  ns: jinja2
  description: Return a type's method resolution order.
  summary: Return a type's method resolution order
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Not
  kind: class
  ns: jinja2
  description: Negate the expression.
  summary: Negate the expression
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Not
  inherits_from:
  - <class 'jinja2.nodes.UnaryExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Not.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Not.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Not.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Not.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Not.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Not.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Not.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Not.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Not.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Not.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Not.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Not.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Not.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Not.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Operand
  kind: class
  ns: jinja2
  description: Holds an operator and an expression.
  summary: Holds an operator and an expression
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Operand
  inherits_from:
  - <class 'jinja2.nodes.Helper'>
  - <class 'jinja2.nodes.Node'>
- name: Operand.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Operand.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Operand.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Operand.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Operand.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Operand.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Operand.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Operand.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Operand.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Operand.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Operand.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Or
  kind: class
  ns: jinja2
  description: Short circuited OR.
  summary: Short circuited OR
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Or
  inherits_from:
  - <class 'jinja2.nodes.BinExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Or.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Or.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Or.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Or.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Or.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Or.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Or.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Or.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Or.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Or.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Or.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Or.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Or.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Or.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Output
  kind: class
  ns: jinja2
  description: |-
    A node that holds multiple expressions which are then printed out.
    This is used both for the `print` statement and the regular template data.
  summary: A node that holds multiple expressions which are then printed out
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Output
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Output.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Output.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Output.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Output.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Output.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Output.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Output.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Output.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Output.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Output.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Output.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: OverlayScope
  kind: class
  ns: jinja2
  description: |-
    An overlay scope for extensions.  This is a largely unoptimized scope
    that however can be used to introduce completely arbitrary variables into
    a sub scope from a dictionary or dictionary like object.  The `context`
    field has to evaluate to a dictionary object.

    Example usage::

        OverlayScope(context=self.call_method('get_context'),
                     body=[...])

    .. versionadded:: 2.10
  summary: An overlay scope for extensions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: OverlayScope
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: OverlayScope.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: OverlayScope.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: OverlayScope.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: OverlayScope.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: OverlayScope.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: OverlayScope.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: OverlayScope.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: OverlayScope.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: OverlayScope.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: OverlayScope.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: OverlayScope.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Pair
  kind: class
  ns: jinja2
  description: A key, value pair for dicts.
  summary: A key, value pair for dicts
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Pair
  inherits_from:
  - <class 'jinja2.nodes.Helper'>
  - <class 'jinja2.nodes.Node'>
- name: Pair.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Pair.as_const
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Pair.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Pair.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pair.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Pair.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pair.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pair.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Pair.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Pair.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pair.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pair.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos
  kind: class
  ns: jinja2
  description: Make the expression positive (noop for most expressions)
  summary: Make the expression positive (noop for most expressions)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Pos
  inherits_from:
  - <class 'jinja2.nodes.UnaryExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Pos.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Pos.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Pos.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Pos.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Pos.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pos.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow
  kind: class
  ns: jinja2
  description: Left to the power of right.
  summary: Left to the power of right
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Pow
  inherits_from:
  - <class 'jinja2.nodes.BinExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Pow.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Pow.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Pow.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Pow.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Pow.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Pow.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Scope
  kind: class
  ns: jinja2
  description: An artificial scope.
  summary: An artificial scope
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Scope
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: Scope.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Scope.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Scope.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Scope.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Scope.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Scope.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Scope.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Scope.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Scope.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Scope.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Scope.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ScopedEvalContextModifier
  kind: class
  ns: jinja2
  description: |-
    Modifies the eval context and reverts it later.  Works exactly like
    :class:`EvalContextModifier` but will only modify the
    :class:`~jinja2.nodes.EvalContext` for nodes in the :attr:`body`.
  summary: Modifies the eval context and reverts it later
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: ScopedEvalContextModifier
  inherits_from:
  - <class 'jinja2.nodes.EvalContextModifier'>
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: ScopedEvalContextModifier.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ScopedEvalContextModifier.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ScopedEvalContextModifier.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ScopedEvalContextModifier.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: ScopedEvalContextModifier.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ScopedEvalContextModifier.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ScopedEvalContextModifier.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ScopedEvalContextModifier.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ScopedEvalContextModifier.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ScopedEvalContextModifier.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ScopedEvalContextModifier.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice
  kind: class
  ns: jinja2
  description: |-
    Represents a slice object.  This must only be used as argument for
    :class:`Subscript`.
  summary: Represents a slice object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Slice
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Slice.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Slice.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Slice.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Slice.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Slice.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Stmt
  kind: class
  ns: jinja2
  description: Base node for all statements.
  summary: Base node for all statements
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Stmt
  inherits_from:
  - <class 'jinja2.nodes.Node'>
- name: Stmt.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Stmt.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Stmt.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Stmt.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Stmt.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Stmt.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Stmt.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Stmt.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Stmt.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Stmt.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Stmt.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub
  kind: class
  ns: jinja2
  description: Subtract the right from the left node.
  summary: Subtract the right from the left node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Sub
  inherits_from:
  - <class 'jinja2.nodes.BinExpr'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Sub.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Sub.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Sub.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Sub.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub.operator
  kind: property
  ns: jinja2
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Sub.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Sub.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Template
  kind: class
  ns: jinja2
  description: |-
    Node that represents a template.  This must be the outermost node that
    is passed to the compiler.
  summary: Node that represents a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Template
  inherits_from:
  - <class 'jinja2.nodes.Node'>
- name: Template.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Template.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Template.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Template.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Template.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Template.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Template.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Template.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Template.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Template.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Template.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData
  kind: class
  ns: jinja2
  description: A constant template string.
  summary: A constant template string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: TemplateData
  inherits_from:
  - <class 'jinja2.nodes.Literal'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: TemplateData.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: TemplateData.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: TemplateData.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: TemplateData.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateData.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Test
  kind: class
  ns: jinja2
  description: |-
    Apply a test to an expression. ``name`` is the name of the test,
    the other field are the same as :class:`Call`.

    .. versionchanged:: 3.0
        ``as_const`` shares the same logic for filters and tests. Tests
        check for volatile, async, and ``@pass_context`` etc.
        decorators.
  summary: Apply a test to an expression
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Test
  inherits_from:
  - <class 'jinja2.nodes._FilterTestCommon'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Test.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Test.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Test.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Test.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Test.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Test.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Test.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Test.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Test.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Test.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Test.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Test.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Test.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple
  kind: class
  ns: jinja2
  description: |-
    For loop unpacking and some other things like multiple arguments
    for subscripts.  Like for :class:`Name` `ctx` specifies if the tuple
    is used for loading the names or storing.
  summary: For loop unpacking and some other things like multiple arguments
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Tuple
  inherits_from:
  - <class 'jinja2.nodes.Literal'>
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: Tuple.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Tuple.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Tuple.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Tuple.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr
  kind: class
  ns: jinja2
  description: Baseclass for all unary expressions.
  summary: Baseclass for all unary expressions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: UnaryExpr
  inherits_from:
  - <class 'jinja2.nodes.Expr'>
  - <class 'jinja2.nodes.Node'>
- name: UnaryExpr.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: UnaryExpr.as_const
  kind: method
  ns: jinja2
  description: |-
    Return the value of the expression as constant or raise
    :exc:`Impossible` if this was not possible.

    An :class:`EvalContext` can be provided, if none is given
    a default context is created which requires the nodes to have
    an attached environment.

    .. versionchanged:: 2.4
       the `eval_ctx` parameter was added.
  summary: Return the value of the expression as constant or raise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: UnaryExpr.can_assign
  kind: method
  ns: jinja2
  description: Check if it's possible to assign something to this node.
  summary: Check if it's possible to assign something to this node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: UnaryExpr.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnaryExpr.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: With
  kind: class
  ns: jinja2
  description: |-
    Specific node for with statements.  In older versions of Jinja the
    with statement was implemented on the base of the `Scope` node instead.

    .. versionadded:: 2.9.3
  summary: Specific node for with statements
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: With
  inherits_from:
  - <class 'jinja2.nodes.Stmt'>
  - <class 'jinja2.nodes.Node'>
- name: With.abstract
  kind: property
  ns: jinja2
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: With.attributes
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: With.dump
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: With.fields
  kind: property
  ns: jinja2
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: With.find
  kind: method
  ns: jinja2
  description: |-
    Find the first node of a given type.  If no such node exists the
    return value is `None`.
  summary: Find the first node of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: With.find_all
  kind: method
  ns: jinja2
  description: |-
    Find all the nodes of a given type.  If the type is a tuple,
    the check is performed for any of the tuple items.
  summary: Find all the nodes of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: With.iter_child_nodes
  kind: method
  ns: jinja2
  description: |-
    Iterates over all direct child nodes of the node.  This iterates
    over all fields and yields the values of they are nodes.  If the value
    of a field is a list all the nodes in that list are returned.
  summary: Iterates over all direct child nodes of the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: With.iter_fields
  kind: method
  ns: jinja2
  description: |-
    This method iterates over all fields that are defined and yields
    ``(key, value)`` tuples.  Per default all fields are returned, but
    it's possible to limit that to some fields by providing the `only`
    parameter or to exclude some using the `exclude` parameter.  Both
    should be sets or tuples of field names.
  summary: This method iterates over all fields that are defined and yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exclude
    default: None
    rest: false
  - kind: positional
    name: only
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: With.set_ctx
  kind: method
  ns: jinja2
  description: |-
    Reset the context of a node and all child nodes.  Per default the
    parser will all generate nodes that have a 'load' context as it's the
    most common one.  This method is used in the parser to set assignment
    targets and other nodes to a store context.
  summary: Reset the context of a node and all child nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: With.set_environment
  kind: method
  ns: jinja2
  description: Set the environment for all nodes.
  summary: Set the environment for all nodes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: With.set_lineno
  kind: method
  ns: jinja2
  description: Set the line numbers of the node and children.
  summary: Set the line numbers of the node and children
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: override
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: args_as_const
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: deque
  kind: class
  ns: jinja2
  description: |-
    deque([iterable[, maxlen]]) --> deque object

    A list-like sequence optimized for data accesses near its endpoints.
  summary: deque([iterable[, maxlen]]) --> deque object
  signatures: null
  inherits_from: null
- name: deque.append
  kind: callable
  ns: jinja2
  description: Add an element to the right side of the deque.
  summary: Add an element to the right side of the deque
  signatures: null
  inherits_from: null
- name: deque.appendleft
  kind: callable
  ns: jinja2
  description: Add an element to the left side of the deque.
  summary: Add an element to the left side of the deque
  signatures: null
  inherits_from: null
- name: deque.clear
  kind: callable
  ns: jinja2
  description: Remove all elements from the deque.
  summary: Remove all elements from the deque
  signatures: null
  inherits_from: null
- name: deque.copy
  kind: callable
  ns: jinja2
  description: Return a shallow copy of a deque.
  summary: Return a shallow copy of a deque
  signatures: null
  inherits_from: null
- name: deque.count
  kind: callable
  ns: jinja2
  description: D.count(value) -- return number of occurrences of value
  summary: D
  signatures: null
  inherits_from: null
- name: deque.extend
  kind: callable
  ns: jinja2
  description: Extend the right side of the deque with elements from the iterable
  summary: Extend the right side of the deque with elements from the iterable
  signatures: null
  inherits_from: null
- name: deque.extendleft
  kind: callable
  ns: jinja2
  description: Extend the left side of the deque with elements from the iterable
  summary: Extend the left side of the deque with elements from the iterable
  signatures: null
  inherits_from: null
- name: deque.index
  kind: callable
  ns: jinja2
  description: |-
    D.index(value, [start, [stop]]) -- return first index of value.
    Raises ValueError if the value is not present.
  summary: D
  signatures: null
  inherits_from: null
- name: deque.insert
  kind: callable
  ns: jinja2
  description: D.insert(index, object) -- insert object before index
  summary: D
  signatures: null
  inherits_from: null
- name: deque.maxlen
  kind: property
  ns: jinja2
  description: maximum size of a deque or None if unbounded
  summary: maximum size of a deque or None if unbounded
  signatures: null
  inherits_from: null
- name: deque.pop
  kind: callable
  ns: jinja2
  description: Remove and return the rightmost element.
  summary: Remove and return the rightmost element
  signatures: null
  inherits_from: null
- name: deque.popleft
  kind: callable
  ns: jinja2
  description: Remove and return the leftmost element.
  summary: Remove and return the leftmost element
  signatures: null
  inherits_from: null
- name: deque.remove
  kind: callable
  ns: jinja2
  description: D.remove(value) -- remove first occurrence of value.
  summary: D
  signatures: null
  inherits_from: null
- name: deque.reverse
  kind: callable
  ns: jinja2
  description: D.reverse() -- reverse *IN PLACE*
  summary: D
  signatures: null
  inherits_from: null
- name: deque.rotate
  kind: callable
  ns: jinja2
  description: Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.
  summary: Rotate the deque n steps to the right (default n=1)
  signatures: null
  inherits_from: null
- name: get_eval_context
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: operators
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: optimizeconst
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: update_wrapper
  kind: function
  ns: jinja2
  description: |-
    Update a wrapper function to look like the wrapped function

    wrapper is the function to be updated
    wrapped is the original function
    assigned is a tuple naming the attributes assigned directly
    from the wrapped function to the wrapper function (defaults to
    functools.WRAPPER_ASSIGNMENTS)
    updated is a tuple naming the attributes of the wrapper that
    are updated with the corresponding attribute from the wrapped
    function (defaults to functools.WRAPPER_UPDATES)
  summary: Update a wrapper function to look like the wrapped function
  signatures:
  - kind: positional
    name: wrapper
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
- name: defaults
  kind: module
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BLOCK_END_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BLOCK_START_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COMMENT_END_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COMMENT_START_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Cycler
  kind: class
  ns: jinja2
  description: |-
    Cycle through values by yield them one at a time, then restarting
    once the end is reached. Available as ``cycler`` in templates.

    Similar to ``loop.cycle``, but can be used outside loops or across
    multiple loops. For example, render a list of folders and files in a
    list, alternating giving them "odd" and "even" classes.

    .. code-block:: html+jinja

        {% set row_class = cycler("odd", "even") %}
        <ul class="browser">
        {% for folder in folders %}
          <li class="folder {{ row_class.next() }}">{{ folder }}
        {% endfor %}
        {% for file in files %}
          <li class="file {{ row_class.next() }}">{{ file }}
        {% endfor %}
        </ul>

    :param items: Each positional argument will be yielded in the order
        given for each cycle.

    .. versionadded:: 2.1
  summary: Cycle through values by yield them one at a time, then restarting
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: Cycler
  inherits_from: null
- name: Cycler.current
  kind: property
  ns: jinja2
  description: |-
    Return the current item. Equivalent to the item that will be
    returned next time :meth:`next` is called.
  summary: Return the current item
  signatures: null
  inherits_from: null
- name: Cycler.next
  kind: method
  ns: jinja2
  description: |-
    Return the current item, then advance :attr:`current` to the
    next item.
  summary: Return the current item, then advance :attr:`current` to the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Cycler.reset
  kind: method
  ns: jinja2
  description: Resets the current item to the first item.
  summary: Resets the current item to the first item
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DEFAULT_FILTERS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_NAMESPACE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_POLICIES
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_TESTS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Joiner
  kind: class
  ns: jinja2
  description: A joining helper for templates.
  summary: A joining helper for templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sep
    default: ', '
    rest: false
  - type: Joiner
  inherits_from: null
- name: KEEP_TRAILING_NEWLINE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LINE_COMMENT_PREFIX
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LINE_STATEMENT_PREFIX
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LSTRIP_BLOCKS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NEWLINE_SEQUENCE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Namespace
  kind: class
  ns: jinja2
  description: |-
    A namespace object that can hold arbitrary attributes.  It may be
    initialized from a dictionary or with keyword arguments.
  summary: A namespace object that can hold arbitrary attributes
  signatures:
  - type: Namespace
  inherits_from: null
- name: TRIM_BLOCKS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VARIABLE_END_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VARIABLE_START_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: generate_lorem_ipsum
  kind: function
  ns: jinja2
  description: Generate some lorem ipsum for the template.
  summary: Generate some lorem ipsum for the template
  signatures:
  - kind: positional
    name: n
    default: '5'
    rest: false
  - kind: positional
    name: html
    default: 'True'
    rest: false
  - kind: positional
    name: min
    default: '20'
    rest: false
  - kind: positional
    name: max
    default: '100'
    rest: false
  - type: '?'
  inherits_from: null
- name: environment
  kind: module
  ns: jinja2
  description: |-
    Classes for managing templates and their runtime and compile time
    options.
  summary: Classes for managing templates and their runtime and compile time
  signatures: null
  inherits_from: null
- name: BLOCK_END_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BLOCK_START_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COMMENT_END_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COMMENT_START_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ChainMap
  kind: class
  ns: jinja2
  description: |-
    A ChainMap groups multiple dicts (or other mappings) together
    to create a single, updateable view.

    The underlying mappings are stored in a list.  That list is public and can
    be accessed or updated using the *maps* attribute.  There is no other
    state.

    Lookups search the underlying mappings successively until a key is found.
    In contrast, writes, updates, and deletions only operate on the first
    mapping.
  summary: A ChainMap groups multiple dicts (or other mappings) together
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: ChainMap
  inherits_from:
  - <class 'collections.abc.MutableMapping'>
  - <class 'collections.abc.Mapping'>
  - <class 'collections.abc.Collection'>
  - <class 'collections.abc.Sized'>
  - <class 'collections.abc.Iterable'>
  - <class 'collections.abc.Container'>
- name: ChainMap.clear
  kind: method
  ns: jinja2
  description: Clear maps[0], leaving maps[1:] intact.
  summary: Clear maps[0], leaving maps[1:] intact
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.copy
  kind: method
  ns: jinja2
  description: New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]
  summary: New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.fromkeys
  kind: function
  ns: jinja2
  description: Create a ChainMap with a single dict created from the iterable.
  summary: Create a ChainMap with a single dict created from the iterable
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.get
  kind: method
  ns: jinja2
  description: D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.items
  kind: method
  ns: jinja2
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.keys
  kind: method
  ns: jinja2
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.new_child
  kind: method
  ns: jinja2
  description: |-
    New ChainMap with a new map followed by all previous maps.
    If no map is provided, an empty dict is used.
    Keyword arguments update the map or new empty dict.
  summary: New ChainMap with a new map followed by all previous maps
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: m
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.parents
  kind: property
  ns: jinja2
  description: New ChainMap from maps[1:].
  summary: New ChainMap from maps[1:]
  signatures: null
  inherits_from: null
- name: ChainMap.pop
  kind: method
  ns: jinja2
  description: Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0].
  summary: Remove *key* from maps[0] and return its value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.popitem
  kind: method
  ns: jinja2
  description: Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.
  summary: Remove and return an item pair from maps[0]
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.setdefault
  kind: method
  ns: jinja2
  description: D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.update
  kind: method
  ns: jinja2
  description: |-
    D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
    If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
    If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
    In either case, this is followed by: for k, v in F.items(): D[k] = v
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: other
    default: ()
    rest: false
  - type: '?'
  inherits_from: null
- name: ChainMap.values
  kind: method
  ns: jinja2
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DEFAULT_FILTERS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_NAMESPACE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_POLICIES
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_TESTS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: KEEP_TRAILING_NEWLINE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LINE_COMMENT_PREFIX
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LINE_STATEMENT_PREFIX
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LRUCache
  kind: class
  ns: jinja2
  description: A simple LRU Cache implementation.
  summary: A simple LRU Cache implementation
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: capacity
    default: null
    rest: false
  - type: LRUCache
  inherits_from: null
- name: LRUCache.clear
  kind: method
  ns: jinja2
  description: Clear the cache.
  summary: Clear the cache
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LRUCache.copy
  kind: method
  ns: jinja2
  description: Return a shallow copy of the instance.
  summary: Return a shallow copy of the instance
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LRUCache.get
  kind: method
  ns: jinja2
  description: Return an item from the cache dict or `default`
  summary: Return an item from the cache dict or `default`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: LRUCache.items
  kind: method
  ns: jinja2
  description: Return a list of items.
  summary: Return a list of items
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LRUCache.keys
  kind: method
  ns: jinja2
  description: Return a list of all keys ordered by most recent usage.
  summary: Return a list of all keys ordered by most recent usage
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LRUCache.setdefault
  kind: method
  ns: jinja2
  description: |-
    Set `default` if the key is not in the cache otherwise
    leave unchanged. Return the value of this key.
  summary: Set `default` if the key is not in the cache otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: LRUCache.values
  kind: method
  ns: jinja2
  description: Return a list of all values.
  summary: Return a list of all values
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LSTRIP_BLOCKS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Lexer
  kind: class
  ns: jinja2
  description: |-
    Class that implements a lexer for a given environment. Automatically
    created by the environment class, usually you don't have to do that.

    Note that the lexer is not automatically bound to an environment.
    Multiple environments can share the same lexer.
  summary: Class that implements a lexer for a given environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: Lexer
  inherits_from: null
- name: Lexer.tokeniter
  kind: method
  ns: jinja2
  description: |-
    This method tokenizes the text and returns the tokens in a
    generator. Use this method if you just want to tokenize a template.

    .. versionchanged:: 3.0
        Only ``\n``, ``\r\n`` and ``\r`` are treated as line
        breaks.
  summary: This method tokenizes the text and returns the tokens in a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - kind: positional
    name: state
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Lexer.tokenize
  kind: method
  ns: jinja2
  description: Calls tokeniter + tokenize and wraps it in a token stream.
  summary: Calls tokeniter + tokenize and wraps it in a token stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - kind: positional
    name: state
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Lexer.wrap
  kind: method
  ns: jinja2
  description: |-
    This is called with the stream as returned by `tokenize` and wraps
    every token in a :class:`Token` and converts the value.
  summary: This is called with the stream as returned by `tokenize` and wraps
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: stream
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NEWLINE_SEQUENCE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Parser
  kind: class
  ns: jinja2
  description: |-
    This is the central parsing class Jinja uses.  It's passed to
    extensions and can be used to parse expressions or statements.
  summary: This is the central parsing class Jinja uses
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - kind: positional
    name: state
    default: None
    rest: false
  - type: Parser
  inherits_from: null
- name: Parser.fail
  kind: method
  ns: jinja2
  description: |-
    Convenience method that raises `exc` with the message, passed
    line number or last line number as well as the current name and
    filename.
  summary: Convenience method that raises `exc` with the message, passed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: msg
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - kind: positional
    name: exc
    default: <class 'jinja2.exceptions.TemplateSyntaxError'>
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.fail_eof
  kind: method
  ns: jinja2
  description: Like fail_unknown_tag but for end of template situations.
  summary: Like fail_unknown_tag but for end of template situations
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: end_tokens
    default: None
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.fail_unknown_tag
  kind: method
  ns: jinja2
  description: |-
    Called if the parser encounters an unknown tag.  Tries to fail
    with a human readable error message that could help to identify
    the problem.
  summary: Called if the parser encounters an unknown tag
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.free_identifier
  kind: method
  ns: jinja2
  description: Return a new free identifier as :class:`~jinja2.nodes.InternalName`.
  summary: Return a new free identifier as :class:`~jinja2
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.is_tuple_end
  kind: method
  ns: jinja2
  description: Are we at the end of a tuple?
  summary: Are we at the end of a tuple?
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: extra_end_rules
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse
  kind: method
  ns: jinja2
  description: Parse the whole template into a `Template` node.
  summary: Parse the whole template into a `Template` node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_and
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_assign_target
  kind: method
  ns: jinja2
  description: |-
    Parse an assignment target.  As Jinja allows assignments to
    tuples, this function can parse all allowed assignment targets.  Per
    default assignments to tuples are parsed, that can be disable however
    by setting `with_tuple` to `False`.  If only assignments to names are
    wanted `name_only` can be set to `True`.  The `extra_end_rules`
    parameter is forwarded to the tuple parsing function.  If
    `with_namespace` is enabled, a namespace assignment may be parsed.
  summary: Parse an assignment target
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: with_tuple
    default: 'True'
    rest: false
  - kind: positional
    name: name_only
    default: 'False'
    rest: false
  - kind: positional
    name: extra_end_rules
    default: None
    rest: false
  - kind: positional
    name: with_namespace
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_autoescape
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_block
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_call
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_call_args
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_call_block
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_compare
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_concat
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_condexpr
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_dict
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_expression
  kind: method
  ns: jinja2
  description: |-
    Parse an expression.  Per default all expressions are parsed, if
    the optional `with_condexpr` parameter is set to `False` conditional
    expressions are not parsed.
  summary: Parse an expression
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: with_condexpr
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_extends
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_filter
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: start_inline
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_filter_block
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_filter_expr
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_for
  kind: method
  ns: jinja2
  description: Parse a for loop.
  summary: Parse a for loop
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_from
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_if
  kind: method
  ns: jinja2
  description: Parse an if construct.
  summary: Parse an if construct
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_import
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_import_context
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: default
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_include
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_list
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_macro
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_math1
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_math2
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_not
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_or
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_postfix
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_pow
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_primary
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_print
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_set
  kind: method
  ns: jinja2
  description: Parse an assign statement.
  summary: Parse an assign statement
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_signature
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_statement
  kind: method
  ns: jinja2
  description: Parse a single statement.
  summary: Parse a single statement
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_statements
  kind: method
  ns: jinja2
  description: |-
    Parse multiple statements into a list until one of the end tokens
    is reached.  This is used to parse the body of statements as it also
    parses template data if appropriate.  The parser checks first if the
    current token is a colon and skips it if there is one.  Then it checks
    for the block end and parses until if one of the `end_tokens` is
    reached.  Per default the active token in the stream at the end of
    the call is the matched end token.  If this is not wanted `drop_needle`
    can be set to `True` and the end token is removed.
  summary: Parse multiple statements into a list until one of the end tokens
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: end_tokens
    default: null
    rest: false
  - kind: positional
    name: drop_needle
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_subscribed
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_subscript
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_test
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_tuple
  kind: method
  ns: jinja2
  description: |-
    Works like `parse_expression` but if multiple expressions are
    delimited by a comma a :class:`~jinja2.nodes.Tuple` node is created.
    This method could also return a regular expression instead of a tuple
    if no commas where found.

    The default parsing mode is a full tuple.  If `simplified` is `True`
    only names and literals are parsed.  The `no_condexpr` parameter is
    forwarded to :meth:`parse_expression`.

    Because tuples do not require delimiters and may end in a bogus comma
    an extra hint is needed that marks the end of a tuple.  For example
    for loops support tuples between `for` and `in`.  In that case the
    `extra_end_rules` is set to ``['name:in']``.

    `explicit_parentheses` is true if the parsing was triggered by an
    expression in parentheses.  This is used to figure out if an empty
    tuple is a valid expression or not.
  summary: Works like `parse_expression` but if multiple expressions are
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: simplified
    default: 'False'
    rest: false
  - kind: positional
    name: with_condexpr
    default: 'True'
    rest: false
  - kind: positional
    name: extra_end_rules
    default: None
    rest: false
  - kind: positional
    name: explicit_parentheses
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_unary
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: with_filter
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.parse_with
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parser.subparse
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: end_tokens
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TRIM_BLOCKS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TemplateExpression
  kind: class
  ns: jinja2
  description: |-
    The :meth:`jinja2.Environment.compile_expression` method returns an
    instance of this object.  It encapsulates the expression-like access
    to the template with an expression it wraps.
  summary: The :meth:`jinja2
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - kind: positional
    name: undefined_to_none
    default: null
    rest: false
  - type: TemplateExpression
  inherits_from: null
- name: TemplateModule
  kind: class
  ns: jinja2
  description: |-
    Represents an imported template.  All the exported names of the
    template are available as attributes on this object.  Additionally
    converting it into a string renders the contents.
  summary: Represents an imported template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: body_stream
    default: None
    rest: false
  - type: TemplateModule
  inherits_from: null
- name: TemplateStream
  kind: class
  ns: jinja2
  description: |-
    A template stream works pretty much like an ordinary python generator
    but it can buffer multiple items to reduce the number of total iterations.
    Per default the output is unbuffered which means that for every unbuffered
    instruction in the template one string is yielded.

    If buffering is enabled with a buffer size of 5, five items are combined
    into a new string.  This is mainly useful if you are streaming
    big templates to a client via WSGI which flushes after each iteration.
  summary: A template stream works pretty much like an ordinary python generator
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: gen
    default: null
    rest: false
  - type: TemplateStream
  inherits_from: null
- name: TemplateStream.disable_buffering
  kind: method
  ns: jinja2
  description: Disable the output buffering.
  summary: Disable the output buffering
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateStream.dump
  kind: method
  ns: jinja2
  description: |-
    Dump the complete stream into a file or file-like object.
    Per default strings are written, if you want to encode
    before writing specify an `encoding`.

    Example usage::

        Template('Hello {{ name }}!').stream(name='foo').dump('hello.html')
  summary: Dump the complete stream into a file or file-like object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: fp
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - type: '?'
  inherits_from: null
- name: TemplateStream.enable_buffering
  kind: method
  ns: jinja2
  description: Enable buffering.  Buffer `size` items before yielding them.
  summary: Enable buffering
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '5'
    rest: false
  - type: '?'
  inherits_from: null
- name: TokenStream
  kind: class
  ns: jinja2
  description: |-
    A token stream is an iterable that yields :class:`Token`\s.  The
    parser however does not iterate over it but calls :meth:`next` to go
    one token ahead.  The current active token is stored as :attr:`current`.
  summary: A token stream is an iterable that yields :class:`Token`\s
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: generator
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - type: TokenStream
  inherits_from: null
- name: TokenStream.close
  kind: method
  ns: jinja2
  description: Close the stream.
  summary: Close the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TokenStream.eos
  kind: property
  ns: jinja2
  description: Are we at the end of the stream?
  summary: Are we at the end of the stream?
  signatures: null
  inherits_from: null
- name: TokenStream.expect
  kind: method
  ns: jinja2
  description: |-
    Expect a given token type and return it.  This accepts the same
    argument as :meth:`jinja2.lexer.Token.test`.
  summary: Expect a given token type and return it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TokenStream.look
  kind: method
  ns: jinja2
  description: Look at the next token.
  summary: Look at the next token
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TokenStream.next_if
  kind: method
  ns: jinja2
  description: |-
    Perform the token test and return the token if it matched.
    Otherwise the return value is `None`.
  summary: Perform the token test and return the token if it matched
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TokenStream.push
  kind: method
  ns: jinja2
  description: Push a token back to the stream.
  summary: Push a token back to the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: token
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TokenStream.skip
  kind: method
  ns: jinja2
  description: Got n tokens ahead.
  summary: Got n tokens ahead
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: TokenStream.skip_if
  kind: method
  ns: jinja2
  description: Like :meth:`next_if` but only returns `True` or `False`.
  summary: Like :meth:`next_if` but only returns `True` or `False`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: VARIABLE_END_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VARIABLE_START_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: consume
  kind: function
  ns: jinja2
  description: Consumes an iterable without doing anything with it.
  summary: Consumes an iterable without doing anything with it
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: copy_cache
  kind: function
  ns: jinja2
  description: Create an empty copy of the given cache.
  summary: Create an empty copy of the given cache
  signatures:
  - kind: positional
    name: cache
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: create_cache
  kind: function
  ns: jinja2
  description: Return the cache class for the given size.
  summary: Return the cache class for the given size
  signatures:
  - kind: positional
    name: size
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: generate
  kind: function
  ns: jinja2
  description: Generate the python source for a node tree.
  summary: Generate the python source for a node tree
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: stream
    default: None
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_lexer
  kind: function
  ns: jinja2
  description: Return a lexer which is probably cached.
  summary: Return a lexer which is probably cached
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: get_spontaneous_environment
  kind: callable
  ns: jinja2
  description: |-
    Return a new spontaneous environment. A spontaneous environment
    is used for templates created directly rather than through an
    existing environment.

    :param cls: Environment class to create.
    :param args: Positional arguments passed to environment.
  summary: Return a new spontaneous environment
  signatures: null
  inherits_from: null
- name: import_string
  kind: function
  ns: jinja2
  description: |-
    Imports an object based on a string.  This is useful if you want to
    use import paths as endpoints or something similar.  An import path can
    be specified either in dotted notation (``xml.sax.saxutils.escape``)
    or with a colon as object delimiter (``xml.sax.saxutils:escape``).

    If the `silent` is True the return value will be `None` if the import
    fails.

    :return: imported object
  summary: Imports an object based on a string
  signatures:
  - kind: positional
    name: import_name
    default: null
    rest: false
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: internalcode
  kind: function
  ns: jinja2
  description: Marks the function as internally used
  summary: Marks the function as internally used
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: load_extensions
  kind: function
  ns: jinja2
  description: |-
    Load the extensions from the list and bind it to the environment.
    Returns a dict of instantiated extensions.
  summary: Load the extensions from the list and bind it to the environment
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: lru_cache
  kind: function
  ns: jinja2
  description: |-
    Least-recently-used cache decorator.

    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.

    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.

    Arguments to the cached function must be hashable.

    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.

    See:  https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)
  summary: Least-recently-used cache decorator
  signatures:
  - kind: positional
    name: maxsize
    default: '128'
    rest: false
  - kind: positional
    name: typed
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: missing
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: new_context
  kind: function
  ns: jinja2
  description: Internal helper for context creation.
  summary: Internal helper for context creation
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template_name
    default: null
    rest: false
  - kind: positional
    name: blocks
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: partial
  kind: class
  ns: jinja2
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures: null
  inherits_from: null
- name: partial.args
  kind: property
  ns: jinja2
  description: tuple of arguments to future partial calls
  summary: tuple of arguments to future partial calls
  signatures: null
  inherits_from: null
- name: partial.func
  kind: property
  ns: jinja2
  description: function object to use in future partial calls
  summary: function object to use in future partial calls
  signatures: null
  inherits_from: null
- name: partial.keywords
  kind: property
  ns: jinja2
  description: dictionary of keyword arguments to future partial calls
  summary: dictionary of keyword arguments to future partial calls
  signatures: null
  inherits_from: null
- name: exceptions
  kind: module
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FilterArgumentError
  kind: class
  ns: jinja2
  description: |-
    This error is raised if a filter was called with inappropriate
    arguments
  summary: This error is raised if a filter was called with inappropriate
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: None
    rest: false
  - type: FilterArgumentError
  inherits_from:
  - <class 'jinja2.exceptions.TemplateRuntimeError'>
  - <class 'jinja2.exceptions.TemplateError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FilterArgumentError.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FilterArgumentError.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FilterArgumentError.message
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FilterArgumentError.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SecurityError
  kind: class
  ns: jinja2
  description: |-
    Raised if a template tries to do something insecure if the
    sandbox is enabled.
  summary: Raised if a template tries to do something insecure if the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: None
    rest: false
  - type: SecurityError
  inherits_from:
  - <class 'jinja2.exceptions.TemplateRuntimeError'>
  - <class 'jinja2.exceptions.TemplateError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SecurityError.add_note
  kind: callable
  ns: jinja2
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SecurityError.args
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SecurityError.message
  kind: property
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SecurityError.with_traceback
  kind: callable
  ns: jinja2
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: filters
  kind: module
  ns: jinja2
  description: Built-in template filters used with the ``|`` operator.
  summary: Built-in template filters used with the ``|`` operator
  signatures: null
  inherits_from: null
- name: F
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FILTERS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: K
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: async_select_or_reject
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - kind: positional
    name: modfunc
    default: null
    rest: false
  - kind: positional
    name: lookup_attr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: async_variant
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: normal_func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_aiter
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_await
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_to_list
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_attr
  kind: function
  ns: jinja2
  description: |-
    Get an attribute of an object.  ``foo|attr("bar")`` works like
    ``foo.bar`` just that always an attribute is returned and items are not
    looked up.

    See :ref:`Notes on subscriptions <notes-on-subscriptions>` for more details.
  summary: Get an attribute of an object
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_batch
  kind: function
  ns: jinja2
  description: |-
    A filter that batches items. It works pretty much like `slice`
    just the other way round. It returns a list of lists with the
    given number of items. If you provide a second parameter this
    is used to fill up missing items. See this example:

    .. sourcecode:: html+jinja

        <table>
        {%- for row in items|batch(3, '&nbsp;') %}
          <tr>
          {%- for column in row %}
            <td>{{ column }}</td>
          {%- endfor %}
          </tr>
        {%- endfor %}
        </table>
  summary: A filter that batches items
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: linecount
    default: null
    rest: false
  - kind: positional
    name: fill_with
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_capitalize
  kind: function
  ns: jinja2
  description: |-
    Capitalize a value. The first character will be uppercase, all others
    lowercase.
  summary: Capitalize a value
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_center
  kind: function
  ns: jinja2
  description: Centers the value in a field of a given width.
  summary: Centers the value in a field of a given width
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: width
    default: '80'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_default
  kind: function
  ns: jinja2
  description: |-
    If the value is undefined it will return the passed default value,
    otherwise the value of the variable:

    .. sourcecode:: jinja

        {{ my_variable|default('my_variable is not defined') }}

    This will output the value of ``my_variable`` if the variable was
    defined, otherwise ``'my_variable is not defined'``. If you want
    to use default with variables that evaluate to false you have to
    set the second parameter to `true`:

    .. sourcecode:: jinja

        {{ ''|default('the string was empty', true) }}

    .. versionchanged:: 2.11
       It's now possible to configure the :class:`~jinja2.Environment` with
       :class:`~jinja2.ChainableUndefined` to make the `default` filter work
       on nested elements and attributes that may contain undefined values
       in the chain without getting an :exc:`~jinja2.UndefinedError`.
  summary: If the value is undefined it will return the passed default value,
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: default_value
    default: null
    rest: false
  - kind: positional
    name: boolean
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_dictsort
  kind: function
  ns: jinja2
  description: |-
    Sort a dict and yield (key, value) pairs. Python dicts may not
    be in the order you want to display them in, so sort them first.

    .. sourcecode:: jinja

        {% for key, value in mydict|dictsort %}
            sort the dict by key, case insensitive

        {% for key, value in mydict|dictsort(reverse=true) %}
            sort the dict by key, case insensitive, reverse order

        {% for key, value in mydict|dictsort(true) %}
            sort the dict by key, case sensitive

        {% for key, value in mydict|dictsort(false, 'value') %}
            sort the dict by value, case insensitive
  summary: Sort a dict and yield (key, value) pairs
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: by
    default: key
    rest: false
  - kind: positional
    name: reverse
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_filesizeformat
  kind: function
  ns: jinja2
  description: |-
    Format the value like a 'human-readable' file size (i.e. 13 kB,
    4.1 MB, 102 Bytes, etc).  Per default decimal prefixes are used (Mega,
    Giga, etc.), if the second parameter is set to `True` the binary
    prefixes are used (Mebi, Gibi).
  summary: Format the value like a 'human-readable' file size (i
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: binary
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_first
  kind: function
  ns: jinja2
  description: Return the first item of a sequence.
  summary: Return the first item of a sequence
  signatures:
  - type: '?'
  inherits_from: null
- name: do_float
  kind: function
  ns: jinja2
  description: |-
    Convert the value into a floating point number. If the
    conversion doesn't work it will return ``0.0``. You can
    override this default using the first parameter.
  summary: Convert the value into a floating point number
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: default
    default: '0.0'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_forceescape
  kind: function
  ns: jinja2
  description: Enforce HTML escaping.  This will probably double escape variables.
  summary: Enforce HTML escaping
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_format
  kind: function
  ns: jinja2
  description: |-
    Apply the given values to a `printf-style`_ format string, like
    ``string % values``.

    .. sourcecode:: jinja

        {{ "%s, %s!"|format(greeting, name) }}
        Hello, World!

    In most cases it should be more convenient and efficient to use the
    ``%`` operator or :meth:`str.format`.

    .. code-block:: text

        {{ "%s, %s!" % (greeting, name) }}
        {{ "{}, {}!".format(greeting, name) }}

    .. _printf-style: https://docs.python.org/library/stdtypes.html
        #printf-style-string-formatting
  summary: Apply the given values to a `printf-style`_ format string, like
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_groupby
  kind: function
  ns: jinja2
  description: |-
    Group a sequence of objects by an attribute using Python's
    :func:`itertools.groupby`. The attribute can use dot notation for
    nested access, like ``"address.city"``. Unlike Python's ``groupby``,
    the values are sorted first so only one group is returned for each
    unique value.

    For example, a list of ``User`` objects with a ``city`` attribute
    can be rendered in groups. In this example, ``grouper`` refers to
    the ``city`` value of the group.

    .. sourcecode:: html+jinja

        <ul>{% for city, items in users|groupby("city") %}
          <li>{{ city }}
            <ul>{% for user in items %}
              <li>{{ user.name }}
            {% endfor %}</ul>
          </li>
        {% endfor %}</ul>

    ``groupby`` yields namedtuples of ``(grouper, list)``, which
    can be used instead of the tuple unpacking above. ``grouper`` is the
    value of the attribute, and ``list`` is the items with that value.

    .. sourcecode:: html+jinja

        <ul>{% for group in users|groupby("city") %}
          <li>{{ group.grouper }}: {{ group.list|join(", ") }}
        {% endfor %}</ul>

    You can specify a ``default`` value to use if an object in the list
    does not have the given attribute.

    .. sourcecode:: jinja

        <ul>{% for city, items in users|groupby("city", default="NY") %}
          <li>{{ city }}: {{ items|map(attribute="name")|join(", ") }}</li>
        {% endfor %}</ul>

    Like the :func:`~jinja-filters.sort` filter, sorting and grouping is
    case-insensitive by default. The ``key`` for each group will have
    the case of the first item in that group of values. For example, if
    a list of users has cities ``["CA", "NY", "ca"]``, the "CA" group
    will have two values. This can be disabled by passing
    ``case_sensitive=True``.

    .. versionchanged:: 3.1
        Added the ``case_sensitive`` parameter. Sorting and grouping is
        case-insensitive by default, matching other filters that do
        comparisons.

    .. versionchanged:: 3.0
        Added the ``default`` parameter.

    .. versionchanged:: 2.6
        The attribute supports dot notation for nested access.
  summary: Group a sequence of objects by an attribute using Python's
  signatures:
  - type: '?'
  inherits_from: null
- name: do_indent
  kind: function
  ns: jinja2
  description: |-
    Return a copy of the string with each line indented by 4 spaces. The
    first line and blank lines are not indented by default.

    :param width: Number of spaces, or a string, to indent by.
    :param first: Don't skip indenting the first line.
    :param blank: Don't skip indenting empty lines.

    .. versionchanged:: 3.0
        ``width`` can be a string.

    .. versionchanged:: 2.10
        Blank lines are not indented by default.

        Rename the ``indentfirst`` argument to ``first``.
  summary: Return a copy of the string with each line indented by 4 spaces
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: width
    default: '4'
    rest: false
  - kind: positional
    name: first
    default: 'False'
    rest: false
  - kind: positional
    name: blank
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_int
  kind: function
  ns: jinja2
  description: |-
    Convert the value into an integer. If the
    conversion doesn't work it will return ``0``. You can
    override this default using the first parameter. You
    can also override the default base (10) in the second
    parameter, which handles input with prefixes such as
    0b, 0o and 0x for bases 2, 8 and 16 respectively.
    The base is ignored for decimal numbers and non-string values.
  summary: Convert the value into an integer
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: default
    default: '0'
    rest: false
  - kind: positional
    name: base
    default: '10'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_items
  kind: function
  ns: jinja2
  description: |-
    Return an iterator over the ``(key, value)`` items of a mapping.

    ``x|items`` is the same as ``x.items()``, except if ``x`` is
    undefined an empty iterator is returned.

    This filter is useful if you expect the template to be rendered with
    an implementation of Jinja in another programming language that does
    not have a ``.items()`` method on its mapping type.

    .. code-block:: html+jinja

        <dl>
        {% for key, value in my_dict|items %}
            <dt>{{ key }}
            <dd>{{ value }}
        {% endfor %}
        </dl>

    .. versionadded:: 3.1
  summary: Return an iterator over the ``(key, value)`` items of a mapping
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_join
  kind: function
  ns: jinja2
  description: |-
    Return a string which is the concatenation of the strings in the
    sequence. The separator between elements is an empty string per
    default, you can define it with the optional parameter:

    .. sourcecode:: jinja

        {{ [1, 2, 3]|join('|') }}
            -> 1|2|3

        {{ [1, 2, 3]|join }}
            -> 123

    It is also possible to join certain attributes of an object:

    .. sourcecode:: jinja

        {{ users|join(', ', attribute='username') }}

    .. versionadded:: 2.6
       The `attribute` parameter was added.
  summary: Return a string which is the concatenation of the strings in the
  signatures:
  - type: '?'
  inherits_from: null
- name: do_last
  kind: function
  ns: jinja2
  description: |-
    Return the last item of a sequence.

    Note: Does not work with generators. You may want to explicitly
    convert it to a list:

    .. sourcecode:: jinja

        {{ data | selectattr('name', '==', 'Jinja') | list | last }}
  summary: Return the last item of a sequence
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_list
  kind: function
  ns: jinja2
  description: |-
    Convert the value into a list.  If it was a string the returned list
    will be a list of characters.
  summary: Convert the value into a list
  signatures:
  - type: '?'
  inherits_from: null
- name: do_lower
  kind: function
  ns: jinja2
  description: Convert a value to lowercase.
  summary: Convert a value to lowercase
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_map
  kind: function
  ns: jinja2
  description: |-
    Applies a filter on a sequence of objects or looks up an attribute.
    This is useful when dealing with lists of objects but you are really
    only interested in a certain value of it.

    The basic usage is mapping on an attribute.  Imagine you have a list
    of users but you are only interested in a list of usernames:

    .. sourcecode:: jinja

        Users on this page: {{ users|map(attribute='username')|join(', ') }}

    You can specify a ``default`` value to use if an object in the list
    does not have the given attribute.

    .. sourcecode:: jinja

        {{ users|map(attribute="username", default="Anonymous")|join(", ") }}

    Alternatively you can let it invoke a filter by passing the name of the
    filter and the arguments afterwards.  A good example would be applying a
    text conversion filter on a sequence:

    .. sourcecode:: jinja

        Users on this page: {{ titles|map('lower')|join(', ') }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u.username for u in users)
        (getattr(u, "username", "Anonymous") for u in users)
        (do_lower(x) for x in titles)

    .. versionchanged:: 2.11.0
        Added the ``default`` parameter.

    .. versionadded:: 2.7
  summary: Applies a filter on a sequence of objects or looks up an attribute
  signatures:
  - type: '?'
  inherits_from: null
- name: do_mark_safe
  kind: function
  ns: jinja2
  description: |-
    Mark the value as safe which means that in an environment with automatic
    escaping enabled this variable will not be escaped.
  summary: Mark the value as safe which means that in an environment with automatic
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_mark_unsafe
  kind: function
  ns: jinja2
  description: Mark a value as unsafe.  This is the reverse operation for :func:`safe`.
  summary: Mark a value as unsafe
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_max
  kind: function
  ns: jinja2
  description: |-
    Return the largest item from the sequence.

    .. sourcecode:: jinja

        {{ [1, 2, 3]|max }}
            -> 3

    :param case_sensitive: Treat upper and lower case strings as distinct.
    :param attribute: Get the object with the max value of this attribute.
  summary: Return the largest item from the sequence
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_min
  kind: function
  ns: jinja2
  description: |-
    Return the smallest item from the sequence.

    .. sourcecode:: jinja

        {{ [1, 2, 3]|min }}
            -> 1

    :param case_sensitive: Treat upper and lower case strings as distinct.
    :param attribute: Get the object with the min value of this attribute.
  summary: Return the smallest item from the sequence
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_pprint
  kind: function
  ns: jinja2
  description: Pretty print a variable. Useful for debugging.
  summary: Pretty print a variable
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_random
  kind: function
  ns: jinja2
  description: Return a random item from the sequence.
  summary: Return a random item from the sequence
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_reject
  kind: function
  ns: jinja2
  description: |-
    Filters a sequence of objects by applying a test to each object,
    and rejecting the objects with the test succeeding.

    If no test is specified, each object will be evaluated as a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ numbers|reject("odd") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (n for n in numbers if not test_odd(n))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to each object,
  signatures:
  - type: '?'
  inherits_from: null
- name: do_rejectattr
  kind: function
  ns: jinja2
  description: |-
    Filters a sequence of objects by applying a test to the specified
    attribute of each object, and rejecting the objects with the test
    succeeding.

    If no test is specified, the attribute's value will be evaluated as
    a boolean.

    .. sourcecode:: jinja

        {{ users|rejectattr("is_active") }}
        {{ users|rejectattr("email", "none") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u for user in users if not user.is_active)
        (u for user in users if not test_none(user.email))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to the specified
  signatures:
  - type: '?'
  inherits_from: null
- name: do_replace
  kind: function
  ns: jinja2
  description: |-
    Return a copy of the value with all occurrences of a substring
    replaced with a new one. The first argument is the substring
    that should be replaced, the second is the replacement string.
    If the optional third argument ``count`` is given, only the first
    ``count`` occurrences are replaced:

    .. sourcecode:: jinja

        {{ "Hello World"|replace("Hello", "Goodbye") }}
            -> Goodbye World

        {{ "aaaaargh"|replace("a", "d'oh, ", 2) }}
            -> d'oh, d'oh, aaargh
  summary: Return a copy of the value with all occurrences of a substring
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: old
    default: null
    rest: false
  - kind: positional
    name: new
    default: null
    rest: false
  - kind: positional
    name: count
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_reverse
  kind: function
  ns: jinja2
  description: |-
    Reverse the object or return an iterator that iterates over it the other
    way round.
  summary: Reverse the object or return an iterator that iterates over it the other
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_round
  kind: function
  ns: jinja2
  description: |-
    Round the number to a given precision. The first
    parameter specifies the precision (default is ``0``), the
    second the rounding method:

    - ``'common'`` rounds either up or down
    - ``'ceil'`` always rounds up
    - ``'floor'`` always rounds down

    If you don't specify a method ``'common'`` is used.

    .. sourcecode:: jinja

        {{ 42.55|round }}
            -> 43.0
        {{ 42.55|round(1, 'floor') }}
            -> 42.5

    Note that even if rounded to 0 precision, a float is returned.  If
    you need a real integer, pipe it through `int`:

    .. sourcecode:: jinja

        {{ 42.55|round|int }}
            -> 43
  summary: Round the number to a given precision
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: precision
    default: '0'
    rest: false
  - kind: positional
    name: method
    default: common
    rest: false
  - type: '?'
  inherits_from: null
- name: do_select
  kind: function
  ns: jinja2
  description: |-
    Filters a sequence of objects by applying a test to each object,
    and only selecting the objects with the test succeeding.

    If no test is specified, each object will be evaluated as a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ numbers|select("odd") }}
        {{ numbers|select("odd") }}
        {{ numbers|select("divisibleby", 3) }}
        {{ numbers|select("lessthan", 42) }}
        {{ strings|select("equalto", "mystring") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (n for n in numbers if test_odd(n))
        (n for n in numbers if test_divisibleby(n, 3))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to each object,
  signatures:
  - type: '?'
  inherits_from: null
- name: do_selectattr
  kind: function
  ns: jinja2
  description: |-
    Filters a sequence of objects by applying a test to the specified
    attribute of each object, and only selecting the objects with the
    test succeeding.

    If no test is specified, the attribute's value will be evaluated as
    a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ users|selectattr("is_active") }}
        {{ users|selectattr("email", "none") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u for user in users if user.is_active)
        (u for user in users if test_none(user.email))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to the specified
  signatures:
  - type: '?'
  inherits_from: null
- name: do_slice
  kind: function
  ns: jinja2
  description: |-
    Slice an iterator and return a list of lists containing
    those items. Useful if you want to create a div containing
    three ul tags that represent columns:

    .. sourcecode:: html+jinja

        <div class="columnwrapper">
          {%- for column in items|slice(3) %}
            <ul class="column-{{ loop.index }}">
            {%- for item in column %}
              <li>{{ item }}</li>
            {%- endfor %}
            </ul>
          {%- endfor %}
        </div>

    If you pass it a second argument it's used to fill missing
    values on the last iteration.
  summary: Slice an iterator and return a list of lists containing
  signatures:
  - type: '?'
  inherits_from: null
- name: do_sort
  kind: function
  ns: jinja2
  description: |-
    Sort an iterable using Python's :func:`sorted`.

    .. sourcecode:: jinja

        {% for city in cities|sort %}
            ...
        {% endfor %}

    :param reverse: Sort descending instead of ascending.
    :param case_sensitive: When sorting strings, sort upper and lower
        case separately.
    :param attribute: When sorting objects or dicts, an attribute or
        key to sort by. Can use dot notation like ``"address.city"``.
        Can be a list of attributes like ``"age,name"``.

    The sort is stable, it does not change the relative order of
    elements that compare equal. This makes it is possible to chain
    sorts on different attributes and ordering.

    .. sourcecode:: jinja

        {% for user in users|sort(attribute="name")
            |sort(reverse=true, attribute="age") %}
            ...
        {% endfor %}

    As a shortcut to chaining when the direction is the same for all
    attributes, pass a comma separate list of attributes.

    .. sourcecode:: jinja

        {% for user in users|sort(attribute="age,name") %}
            ...
        {% endfor %}

    .. versionchanged:: 2.11.0
        The ``attribute`` parameter can be a comma separated list of
        attributes, e.g. ``"age,name"``.

    .. versionchanged:: 2.6
       The ``attribute`` parameter was added.
  summary: Sort an iterable using Python's :func:`sorted`
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: reverse
    default: 'False'
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_striptags
  kind: function
  ns: jinja2
  description: Strip SGML/XML tags and replace adjacent whitespace by one space.
  summary: Strip SGML/XML tags and replace adjacent whitespace by one space
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_sum
  kind: function
  ns: jinja2
  description: |-
    Returns the sum of a sequence of numbers plus the value of parameter
    'start' (which defaults to 0).  When the sequence is empty it returns
    start.

    It is also possible to sum up only certain attributes:

    .. sourcecode:: jinja

        Total: {{ items|sum(attribute='price') }}

    .. versionchanged:: 2.6
       The ``attribute`` parameter was added to allow summing up over
       attributes.  Also the ``start`` parameter was moved on to the right.
  summary: Returns the sum of a sequence of numbers plus the value of parameter
  signatures:
  - type: '?'
  inherits_from: null
- name: do_title
  kind: function
  ns: jinja2
  description: |-
    Return a titlecased version of the value. I.e. words will start with
    uppercase letters, all remaining characters are lowercase.
  summary: Return a titlecased version of the value
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_tojson
  kind: function
  ns: jinja2
  description: |-
    Serialize an object to a string of JSON, and mark it safe to
    render in HTML. This filter is only for use in HTML documents.

    The returned string is safe to render in HTML documents and
    ``<script>`` tags. The exception is in HTML attributes that are
    double quoted; either use single quotes or the ``|forceescape``
    filter.

    :param value: The object to serialize to JSON.
    :param indent: The ``indent`` parameter passed to ``dumps``, for
        pretty-printing the value.

    .. versionadded:: 2.9
  summary: Serialize an object to a string of JSON, and mark it safe to
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: indent
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_trim
  kind: function
  ns: jinja2
  description: Strip leading and trailing characters, by default whitespace.
  summary: Strip leading and trailing characters, by default whitespace
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: chars
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_truncate
  kind: function
  ns: jinja2
  description: |-
    Return a truncated copy of the string. The length is specified
    with the first parameter which defaults to ``255``. If the second
    parameter is ``true`` the filter will cut the text at length. Otherwise
    it will discard the last word. If the text was in fact
    truncated it will append an ellipsis sign (``"..."``). If you want a
    different ellipsis sign than ``"..."`` you can specify it using the
    third parameter. Strings that only exceed the length by the tolerance
    margin given in the fourth parameter will not be truncated.

    .. sourcecode:: jinja

        {{ "foo bar baz qux"|truncate(9) }}
            -> "foo..."
        {{ "foo bar baz qux"|truncate(9, True) }}
            -> "foo ba..."
        {{ "foo bar baz qux"|truncate(11) }}
            -> "foo bar baz qux"
        {{ "foo bar baz qux"|truncate(11, False, '...', 0) }}
            -> "foo bar..."

    The default leeway on newer Jinja versions is 5 and was 0 before but
    can be reconfigured globally.
  summary: Return a truncated copy of the string
  signatures:
  - kind: positional
    name: env
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: length
    default: '255'
    rest: false
  - kind: positional
    name: killwords
    default: 'False'
    rest: false
  - kind: positional
    name: end
    default: '...'
    rest: false
  - kind: positional
    name: leeway
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_unique
  kind: function
  ns: jinja2
  description: |-
    Returns a list of unique items from the given iterable.

    .. sourcecode:: jinja

        {{ ['foo', 'bar', 'foobar', 'FooBar']|unique|list }}
            -> ['foo', 'bar', 'foobar']

    The unique items are yielded in the same order as their first occurrence in
    the iterable passed to the filter.

    :param case_sensitive: Treat upper and lower case strings as distinct.
    :param attribute: Filter objects with unique values for this attribute.
  summary: Returns a list of unique items from the given iterable
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_upper
  kind: function
  ns: jinja2
  description: Convert a value to uppercase.
  summary: Convert a value to uppercase
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_urlencode
  kind: function
  ns: jinja2
  description: |-
    Quote data for use in a URL path or query using UTF-8.

    Basic wrapper around :func:`urllib.parse.quote` when given a
    string, or :func:`urllib.parse.urlencode` for a dict or iterable.

    :param value: Data to quote. A string will be quoted directly. A
        dict or iterable of ``(key, value)`` pairs will be joined as a
        query string.

    When given a string, "/" is not quoted. HTTP servers treat "/" and
    "%2F" equivalently in paths. If you need quoted slashes, use the
    ``|replace("/", "%2F")`` filter.

    .. versionadded:: 2.7
  summary: Quote data for use in a URL path or query using UTF-8
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_urlize
  kind: function
  ns: jinja2
  description: |-
    Convert URLs in text into clickable links.

    This may not recognize links in some situations. Usually, a more
    comprehensive formatter, such as a Markdown library, is a better
    choice.

    Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email
    addresses. Links with trailing punctuation (periods, commas, closing
    parentheses) and leading punctuation (opening parentheses) are
    recognized excluding the punctuation. Email addresses that include
    header fields are not recognized (for example,
    ``mailto:address@example.com?cc=copy@example.com``).

    :param value: Original text containing URLs to link.
    :param trim_url_limit: Shorten displayed URL values to this length.
    :param nofollow: Add the ``rel=nofollow`` attribute to links.
    :param target: Add the ``target`` attribute to links.
    :param rel: Add the ``rel`` attribute to links.
    :param extra_schemes: Recognize URLs that start with these schemes
        in addition to the default behavior. Defaults to
        ``env.policies["urlize.extra_schemes"]``, which defaults to no
        extra schemes.

    .. versionchanged:: 3.0
        The ``extra_schemes`` parameter was added.

    .. versionchanged:: 3.0
        Generate ``https://`` links for URLs without a scheme.

    .. versionchanged:: 3.0
        The parsing rules were updated. Recognize email addresses with
        or without the ``mailto:`` scheme. Validate IP addresses. Ignore
        parentheses and brackets in more cases.

    .. versionchanged:: 2.8
       The ``target`` parameter was added.
  summary: Convert URLs in text into clickable links
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: trim_url_limit
    default: None
    rest: false
  - kind: positional
    name: nofollow
    default: 'False'
    rest: false
  - kind: positional
    name: target
    default: None
    rest: false
  - kind: positional
    name: rel
    default: None
    rest: false
  - kind: positional
    name: extra_schemes
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_wordcount
  kind: function
  ns: jinja2
  description: Count the words in that string.
  summary: Count the words in that string
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_wordwrap
  kind: function
  ns: jinja2
  description: |-
    Wrap a string to the given width. Existing newlines are treated
    as paragraphs to be wrapped separately.

    :param s: Original text to wrap.
    :param width: Maximum length of wrapped lines.
    :param break_long_words: If a word is longer than ``width``, break
        it across lines.
    :param break_on_hyphens: If a word contains hyphens, it may be split
        across lines.
    :param wrapstring: String to join each wrapped line. Defaults to
        :attr:`Environment.newline_sequence`.

    .. versionchanged:: 2.11
        Existing newlines are treated as paragraphs wrapped separately.

    .. versionchanged:: 2.11
        Added the ``break_on_hyphens`` parameter.

    .. versionchanged:: 2.7
        Added the ``wrapstring`` parameter.
  summary: Wrap a string to the given width
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: width
    default: '79'
    rest: false
  - kind: positional
    name: break_long_words
    default: 'True'
    rest: false
  - kind: positional
    name: wrapstring
    default: None
    rest: false
  - kind: positional
    name: break_on_hyphens
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_xmlattr
  kind: function
  ns: jinja2
  description: |-
    Create an SGML/XML attribute string based on the items in a dict.

    **Values** that are neither ``none`` nor ``undefined`` are automatically
    escaped, safely allowing untrusted user input.

    User input should not be used as **keys** to this filter. If any key
    contains a space, ``/`` solidus, ``>`` greater-than sign, or ``=`` equals
    sign, this fails with a ``ValueError``. Regardless of this, user input
    should never be used as keys to this filter, or must be separately validated
    first.

    .. sourcecode:: html+jinja

        <ul{{ {'class': 'my_list', 'missing': none,
                'id': 'list-%d'|format(variable)}|xmlattr }}>
        ...
        </ul>

    Results in something like this:

    .. sourcecode:: html

        <ul class="my_list" id="list-42">
        ...
        </ul>

    As you can see it automatically prepends a space in front of the item
    if the filter returned something unless the second parameter is false.

    .. versionchanged:: 3.1.4
        Keys with ``/`` solidus, ``>`` greater-than sign, or ``=`` equals sign
        are not allowed.

    .. versionchanged:: 3.1.3
        Keys with spaces are not allowed.
  summary: Create an SGML/XML attribute string based on the items in a dict
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: d
    default: null
    rest: false
  - kind: positional
    name: autospace
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: groupby
  kind: class
  ns: jinja2
  description: |-
    make an iterator that returns consecutive keys and groups from the iterable

    iterable
      Elements to divide into groups according to the key function.
    key
      A function for computing the group category for each element.
      If the key function is not specified or is None, the element itself
      is used for grouping.
  summary: make an iterator that returns consecutive keys and groups from the iterable
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - kind: positional
    name: key
    default: None
    rest: false
  - type: groupby
  inherits_from: null
- name: htmlsafe_json_dumps
  kind: function
  ns: jinja2
  description: |-
    Serialize an object to a string of JSON with :func:`json.dumps`,
    then replace HTML-unsafe characters with Unicode escapes and mark
    the result safe with :class:`~markupsafe.Markup`.

    This is available in templates as the ``|tojson`` filter.

    The following characters are escaped: ``<``, ``>``, ``&``, ``'``.

    The returned string is safe to render in HTML documents and
    ``<script>`` tags. The exception is in HTML attributes that are
    double quoted; either use single quotes or the ``|forceescape``
    filter.

    :param obj: The object to serialize to JSON.
    :param dumps: The ``dumps`` function to use. Defaults to
        ``env.policies["json.dumps_function"]``, which defaults to
        :func:`json.dumps`.
    :param kwargs: Extra arguments to pass to ``dumps``. Merged onto
        ``env.policies["json.dumps_kwargs"]``.

    .. versionchanged:: 3.0
        The ``dumper`` parameter is renamed to ``dumps``.

    .. versionadded:: 2.9
  summary: Serialize an object to a string of JSON with :func:`json
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: dumps
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ignore_case
  kind: function
  ns: jinja2
  description: |-
    For use as a postprocessor for :func:`make_attrgetter`. Converts strings
    to lowercase and returns other types as-is.
  summary: For use as a postprocessor for :func:`make_attrgetter`
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: make_attrgetter
  kind: function
  ns: jinja2
  description: |-
    Returns a callable that looks up the given attribute from a
    passed object with the rules of the environment.  Dots are allowed
    to access attributes of attributes.  Integer parts in paths are
    looked up as integers.
  summary: Returns a callable that looks up the given attribute from a
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - kind: positional
    name: postprocess
    default: None
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: make_multi_attrgetter
  kind: function
  ns: jinja2
  description: |-
    Returns a callable that looks up the given comma separated
    attributes from a passed object with the rules of the environment.
    Dots are allowed to access attributes of each attribute.  Integer
    parts in paths are looked up as integers.

    The value returned by the returned callable is a list of extracted
    attribute values.

    Examples of attribute: "attr1,attr2", "attr1.inner1.0,attr2.inner2.0", etc.
  summary: Returns a callable that looks up the given comma separated
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - kind: positional
    name: postprocess
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_context
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.runtime.Context` as the first argument
    to the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    If only ``Context.eval_context`` is needed, use
    :func:`pass_eval_context`. If only ``Context.environment`` is
    needed, use :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``contextfunction`` and ``contextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_environment
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.Environment` as the first argument to
    the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    .. versionadded:: 3.0.0
        Replaces ``environmentfunction`` and ``environmentfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_eval_context
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
    to the decorated function when called while rendering a template.
    See :ref:`eval-context`.

    Can be used on functions, filters, and tests.

    If only ``EvalContext.environment`` is needed, use
    :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pformat
  kind: function
  ns: jinja2
  description: Format an object using :func:`pprint.pformat`.
  summary: Format an object using :func:`pprint
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: prepare_map
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: prepare_select_or_reject
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - kind: positional
    name: modfunc
    default: null
    rest: false
  - kind: positional
    name: lookup_attr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: select_or_reject
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - kind: positional
    name: modfunc
    default: null
    rest: false
  - kind: positional
    name: lookup_attr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_first
  kind: function
  ns: jinja2
  description: Return the first item of a sequence.
  summary: Return the first item of a sequence
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_groupby
  kind: function
  ns: jinja2
  description: |-
    Group a sequence of objects by an attribute using Python's
    :func:`itertools.groupby`. The attribute can use dot notation for
    nested access, like ``"address.city"``. Unlike Python's ``groupby``,
    the values are sorted first so only one group is returned for each
    unique value.

    For example, a list of ``User`` objects with a ``city`` attribute
    can be rendered in groups. In this example, ``grouper`` refers to
    the ``city`` value of the group.

    .. sourcecode:: html+jinja

        <ul>{% for city, items in users|groupby("city") %}
          <li>{{ city }}
            <ul>{% for user in items %}
              <li>{{ user.name }}
            {% endfor %}</ul>
          </li>
        {% endfor %}</ul>

    ``groupby`` yields namedtuples of ``(grouper, list)``, which
    can be used instead of the tuple unpacking above. ``grouper`` is the
    value of the attribute, and ``list`` is the items with that value.

    .. sourcecode:: html+jinja

        <ul>{% for group in users|groupby("city") %}
          <li>{{ group.grouper }}: {{ group.list|join(", ") }}
        {% endfor %}</ul>

    You can specify a ``default`` value to use if an object in the list
    does not have the given attribute.

    .. sourcecode:: jinja

        <ul>{% for city, items in users|groupby("city", default="NY") %}
          <li>{{ city }}: {{ items|map(attribute="name")|join(", ") }}</li>
        {% endfor %}</ul>

    Like the :func:`~jinja-filters.sort` filter, sorting and grouping is
    case-insensitive by default. The ``key`` for each group will have
    the case of the first item in that group of values. For example, if
    a list of users has cities ``["CA", "NY", "ca"]``, the "CA" group
    will have two values. This can be disabled by passing
    ``case_sensitive=True``.

    .. versionchanged:: 3.1
        Added the ``case_sensitive`` parameter. Sorting and grouping is
        case-insensitive by default, matching other filters that do
        comparisons.

    .. versionchanged:: 3.0
        Added the ``default`` parameter.

    .. versionchanged:: 2.6
        The attribute supports dot notation for nested access.
  summary: Group a sequence of objects by an attribute using Python's
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_join
  kind: function
  ns: jinja2
  description: |-
    Return a string which is the concatenation of the strings in the
    sequence. The separator between elements is an empty string per
    default, you can define it with the optional parameter:

    .. sourcecode:: jinja

        {{ [1, 2, 3]|join('|') }}
            -> 1|2|3

        {{ [1, 2, 3]|join }}
            -> 123

    It is also possible to join certain attributes of an object:

    .. sourcecode:: jinja

        {{ users|join(', ', attribute='username') }}

    .. versionadded:: 2.6
       The `attribute` parameter was added.
  summary: Return a string which is the concatenation of the strings in the
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: d
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_list
  kind: function
  ns: jinja2
  description: |-
    Convert the value into a list.  If it was a string the returned list
    will be a list of characters.
  summary: Convert the value into a list
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_map
  kind: function
  ns: jinja2
  description: |-
    Applies a filter on a sequence of objects or looks up an attribute.
    This is useful when dealing with lists of objects but you are really
    only interested in a certain value of it.

    The basic usage is mapping on an attribute.  Imagine you have a list
    of users but you are only interested in a list of usernames:

    .. sourcecode:: jinja

        Users on this page: {{ users|map(attribute='username')|join(', ') }}

    You can specify a ``default`` value to use if an object in the list
    does not have the given attribute.

    .. sourcecode:: jinja

        {{ users|map(attribute="username", default="Anonymous")|join(", ") }}

    Alternatively you can let it invoke a filter by passing the name of the
    filter and the arguments afterwards.  A good example would be applying a
    text conversion filter on a sequence:

    .. sourcecode:: jinja

        Users on this page: {{ titles|map('lower')|join(', ') }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u.username for u in users)
        (getattr(u, "username", "Anonymous") for u in users)
        (do_lower(x) for x in titles)

    .. versionchanged:: 2.11.0
        Added the ``default`` parameter.

    .. versionadded:: 2.7
  summary: Applies a filter on a sequence of objects or looks up an attribute
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_reject
  kind: function
  ns: jinja2
  description: |-
    Filters a sequence of objects by applying a test to each object,
    and rejecting the objects with the test succeeding.

    If no test is specified, each object will be evaluated as a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ numbers|reject("odd") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (n for n in numbers if not test_odd(n))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to each object,
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_rejectattr
  kind: function
  ns: jinja2
  description: |-
    Filters a sequence of objects by applying a test to the specified
    attribute of each object, and rejecting the objects with the test
    succeeding.

    If no test is specified, the attribute's value will be evaluated as
    a boolean.

    .. sourcecode:: jinja

        {{ users|rejectattr("is_active") }}
        {{ users|rejectattr("email", "none") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u for user in users if not user.is_active)
        (u for user in users if not test_none(user.email))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to the specified
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_select
  kind: function
  ns: jinja2
  description: |-
    Filters a sequence of objects by applying a test to each object,
    and only selecting the objects with the test succeeding.

    If no test is specified, each object will be evaluated as a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ numbers|select("odd") }}
        {{ numbers|select("odd") }}
        {{ numbers|select("divisibleby", 3) }}
        {{ numbers|select("lessthan", 42) }}
        {{ strings|select("equalto", "mystring") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (n for n in numbers if test_odd(n))
        (n for n in numbers if test_divisibleby(n, 3))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to each object,
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_selectattr
  kind: function
  ns: jinja2
  description: |-
    Filters a sequence of objects by applying a test to the specified
    attribute of each object, and only selecting the objects with the
    test succeeding.

    If no test is specified, the attribute's value will be evaluated as
    a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ users|selectattr("is_active") }}
        {{ users|selectattr("email", "none") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u for user in users if user.is_active)
        (u for user in users if test_none(user.email))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to the specified
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_slice
  kind: function
  ns: jinja2
  description: |-
    Slice an iterator and return a list of lists containing
    those items. Useful if you want to create a div containing
    three ul tags that represent columns:

    .. sourcecode:: html+jinja

        <div class="columnwrapper">
          {%- for column in items|slice(3) %}
            <ul class="column-{{ loop.index }}">
            {%- for item in column %}
              <li>{{ item }}</li>
            {%- endfor %}
            </ul>
          {%- endfor %}
        </div>

    If you pass it a second argument it's used to fill missing
    values on the last iteration.
  summary: Slice an iterator and return a list of lists containing
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: slices
    default: null
    rest: false
  - kind: positional
    name: fill_with
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_sum
  kind: function
  ns: jinja2
  description: |-
    Returns the sum of a sequence of numbers plus the value of parameter
    'start' (which defaults to 0).  When the sequence is empty it returns
    start.

    It is also possible to sum up only certain attributes:

    .. sourcecode:: jinja

        Total: {{ items|sum(attribute='price') }}

    .. versionchanged:: 2.6
       The ``attribute`` parameter was added to allow summing up over
       attributes.  Also the ``start`` parameter was moved on to the right.
  summary: Returns the sum of a sequence of numbers plus the value of parameter
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: iterable
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - kind: positional
    name: start
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: url_quote
  kind: function
  ns: jinja2
  description: |-
    Quote a string for use in a URL using the given charset.

    :param obj: String or bytes to quote. Other types are converted to
        string then encoded to bytes using the given charset.
    :param charset: Encode text to bytes using this charset.
    :param for_qs: Quote "/" and use "+" for spaces.
  summary: Quote a string for use in a URL using the given charset
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: charset
    default: utf-8
    rest: false
  - kind: positional
    name: for_qs
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: urlize
  kind: function
  ns: jinja2
  description: |-
    Convert URLs in text into clickable links.

    This may not recognize links in some situations. Usually, a more
    comprehensive formatter, such as a Markdown library, is a better
    choice.

    Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email
    addresses. Links with trailing punctuation (periods, commas, closing
    parentheses) and leading punctuation (opening parentheses) are
    recognized excluding the punctuation. Email addresses that include
    header fields are not recognized (for example,
    ``mailto:address@example.com?cc=copy@example.com``).

    :param text: Original text containing URLs to link.
    :param trim_url_limit: Shorten displayed URL values to this length.
    :param target: Add the ``target`` attribute to links.
    :param rel: Add the ``rel`` attribute to links.
    :param extra_schemes: Recognize URLs that start with these schemes
        in addition to the default behavior.

    .. versionchanged:: 3.0
        The ``extra_schemes`` parameter was added.

    .. versionchanged:: 3.0
        Generate ``https://`` links for URLs without a scheme.

    .. versionchanged:: 3.0
        The parsing rules were updated. Recognize email addresses with
        or without the ``mailto:`` scheme. Validate IP addresses. Ignore
        parentheses and brackets in more cases.
  summary: Convert URLs in text into clickable links
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: trim_url_limit
    default: None
    rest: false
  - kind: positional
    name: rel
    default: None
    rest: false
  - kind: positional
    name: target
    default: None
    rest: false
  - kind: positional
    name: extra_schemes
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: idtracking
  kind: module
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FrameSymbolVisitor
  kind: class
  ns: jinja2
  description: A visitor for `Frame.inspect`.
  summary: A visitor for `Frame
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: symbols
    default: null
    rest: false
  - type: FrameSymbolVisitor
  inherits_from:
  - <class 'jinja2.visitor.NodeVisitor'>
- name: FrameSymbolVisitor.generic_visit
  kind: method
  ns: jinja2
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.get_visitor
  kind: method
  ns: jinja2
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit
  kind: method
  ns: jinja2
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_Assign
  kind: method
  ns: jinja2
  description: Visit assignments in the correct order.
  summary: Visit assignments in the correct order
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_AssignBlock
  kind: method
  ns: jinja2
  description: Stop visiting at block assigns.
  summary: Stop visiting at block assigns
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_Block
  kind: method
  ns: jinja2
  description: Stop visiting at blocks.
  summary: Stop visiting at blocks
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_CallBlock
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_FilterBlock
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_For
  kind: method
  ns: jinja2
  description: |-
    Visiting stops at for blocks.  However the block sequence
    is visited as part of the outer scope.
  summary: Visiting stops at for blocks
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_FromImport
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_If
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_Import
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_Macro
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_NSRef
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_Name
  kind: method
  ns: jinja2
  description: All assignments to names go through this function.
  summary: All assignments to names go through this function
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: store_as_param
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_OverlayScope
  kind: method
  ns: jinja2
  description: Do not visit into overlay scopes.
  summary: Do not visit into overlay scopes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_Scope
  kind: method
  ns: jinja2
  description: Stop visiting at scopes.
  summary: Stop visiting at scopes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FrameSymbolVisitor.visit_With
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor
  kind: class
  ns: jinja2
  description: |-
    Walks the abstract syntax tree and call visitor functions for every
    node found.  The visitor functions may return values which will be
    forwarded by the `visit` method.

    Per default the visitor functions for the nodes are ``'visit_'`` +
    class name of the node.  So a `TryFinally` node visit function would
    be `visit_TryFinally`.  This behavior can be changed by overriding
    the `get_visitor` function.  If no visitor function exists for a node
    (return value `None`) the `generic_visit` visitor is used instead.
  summary: Walks the abstract syntax tree and call visitor functions for every
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: symbols
    default: null
    rest: false
  - type: RootVisitor
  inherits_from:
  - <class 'jinja2.visitor.NodeVisitor'>
- name: RootVisitor.generic_visit
  kind: method
  ns: jinja2
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.get_visitor
  kind: method
  ns: jinja2
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit
  kind: method
  ns: jinja2
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_AssignBlock
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_Block
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_CallBlock
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_FilterBlock
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_For
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: for_branch
    default: body
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_If
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_Macro
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_OverlayScope
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_Scope
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_ScopedEvalContextModifier
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_Template
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RootVisitor.visit_With
  kind: method
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: VAR_LOAD_ALIAS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_PARAMETER
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_RESOLVE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_UNDEFINED
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: find_symbols
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: nodes
    default: null
    rest: false
  - kind: positional
    name: parent_symbols
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: symbols_for_node
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: parent_symbols
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: is_undefined
  kind: function
  ns: jinja2
  description: |-
    Check if the object passed is undefined.  This does nothing more than
    performing an instance check against :class:`Undefined` but looks nicer.
    This can be used for custom filters or tests that want to react to
    undefined variables.  For example a custom default filter can look like
    this::

        def default(var, default=''):
            if is_undefined(var):
                return default
            return var
  summary: Check if the object passed is undefined
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: lexer
  kind: module
  ns: jinja2
  description: |-
    Implements a Jinja / Python combination lexer. The ``Lexer`` class
    is used to do some preprocessing. It filters out invalid operators like
    the bitshift operators we don't allow in templates. It separates
    template code and python code in expressions.
  summary: Implements a Jinja / Python combination lexer
  signatures: null
  inherits_from: null
- name: Failure
  kind: class
  ns: jinja2
  description: |-
    Class that raises a `TemplateSyntaxError` if called.
    Used by the `Lexer` to specify known errors.
  summary: Class that raises a `TemplateSyntaxError` if called
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: cls
    default: <class 'jinja2.exceptions.TemplateSyntaxError'>
    rest: false
  - type: Failure
  inherits_from: null
- name: OptionalLStrip
  kind: class
  ns: jinja2
  description: |-
    A special tuple for marking a point in the state that can have
    lstrip applied.
  summary: A special tuple for marking a point in the state that can have
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - type: OptionalLStrip
  inherits_from:
  - <class 'tuple'>
- name: OptionalLStrip.count
  kind: callable
  ns: jinja2
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: OptionalLStrip.index
  kind: callable
  ns: jinja2
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: start
    default: '0'
    rest: false
  - kind: positional
    name: stop
    default: '9223372036854775807'
    rest: false
  - type: '?'
  inherits_from: null
- name: TOKEN_ADD
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_ASSIGN
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_BLOCK_BEGIN
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_BLOCK_END
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COLON
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COMMA
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COMMENT
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COMMENT_BEGIN
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COMMENT_END
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_DATA
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_DIV
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_DOT
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_EOF
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_EQ
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_FLOAT
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_FLOORDIV
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_GT
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_GTEQ
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_INITIAL
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_INTEGER
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LBRACE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LBRACKET
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINECOMMENT
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINECOMMENT_BEGIN
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINECOMMENT_END
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINESTATEMENT_BEGIN
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINESTATEMENT_END
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LPAREN
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LT
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LTEQ
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_MOD
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_MUL
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_NAME
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_NE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_OPERATOR
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_PIPE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_POW
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RAW_BEGIN
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RAW_END
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RBRACE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RBRACKET
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RPAREN
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_SEMICOLON
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_STRING
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_SUB
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_TILDE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_VARIABLE_BEGIN
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_VARIABLE_END
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_WHITESPACE
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Token
  kind: class
  ns: jinja2
  description: Token(lineno, type, value)
  summary: Token(lineno, type, value)
  signatures:
  - kind: positional
    name: _cls
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - kind: positional
    name: type
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: Token
  inherits_from:
  - <class 'tuple'>
- name: Token.count
  kind: callable
  ns: jinja2
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Token.index
  kind: callable
  ns: jinja2
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: start
    default: '0'
    rest: false
  - kind: positional
    name: stop
    default: '9223372036854775807'
    rest: false
  - type: '?'
  inherits_from: null
- name: Token.lineno
  kind: property
  ns: jinja2
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: Token.test
  kind: method
  ns: jinja2
  description: |-
    Test a token against a token expression.  This can either be a
    token type or ``'token_type:token_value'``.  This can only test
    against string values and types.
  summary: Test a token against a token expression
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Token.test_any
  kind: method
  ns: jinja2
  description: Test against multiple token expressions.
  summary: Test against multiple token expressions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Token.type
  kind: property
  ns: jinja2
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: Token.value
  kind: property
  ns: jinja2
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: TokenStreamIterator
  kind: class
  ns: jinja2
  description: |-
    The iterator for tokenstreams.  Iterate over the stream
    until the eof token is reached.
  summary: The iterator for tokenstreams
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: stream
    default: null
    rest: false
  - type: TokenStreamIterator
  inherits_from: null
- name: compile_rules
  kind: function
  ns: jinja2
  description: Compiles all the rules from the environment into a list of rules.
  summary: Compiles all the rules from the environment into a list of rules
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: count_newlines
  kind: function
  ns: jinja2
  description: |-
    Count the number of newline characters in the string.  This is
    useful for extensions that filter a stream.
  summary: Count the number of newline characters in the string
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: describe_token
  kind: function
  ns: jinja2
  description: Returns a description of the token.
  summary: Returns a description of the token
  signatures:
  - kind: positional
    name: token
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: describe_token_expr
  kind: function
  ns: jinja2
  description: Like `describe_token` but for token expressions.
  summary: Like `describe_token` but for token expressions
  signatures:
  - kind: positional
    name: expr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: float_re
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_lexer
  kind: function
  ns: jinja2
  description: Return a lexer which is probably cached.
  summary: Return a lexer which is probably cached
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ignore_if_empty
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ignored_tokens
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: integer_re
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: literal_eval
  kind: function
  ns: jinja2
  description: |-
    Evaluate an expression node or a string containing only a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
    sets, booleans, and None.

    Caution: A complex expression can overflow the C stack and cause a crash.
  summary: Evaluate an expression node or a string containing only a Python
  signatures:
  - kind: positional
    name: node_or_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: name_re
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: newline_re
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: operator_re
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: operators
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: reverse_operators
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: string_re
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: whitespace_re
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: loaders
  kind: module
  ns: jinja2
  description: |-
    API and implementations for loading templates from different data
    sources.
  summary: API and implementations for loading templates from different data
  signatures: null
  inherits_from: null
- name: ModuleType
  kind: class
  ns: jinja2
  description: |-
    Create a module object.

    The name must be a string; the optional doc argument can have any type.
  summary: Create a module object
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: doc
    default: None
    rest: false
  - type: module
  inherits_from: null
- name: import_module
  kind: function
  ns: jinja2
  description: |-
    Import a module.

    The 'package' argument is required when performing a relative import. It
    specifies the package to use as the anchor point from which to resolve the
    relative import to an absolute import.
  summary: Import a module
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: package
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: internalcode
  kind: function
  ns: jinja2
  description: Marks the function as internally used
  summary: Marks the function as internally used
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_template_path
  kind: function
  ns: jinja2
  description: |-
    Split a path into segments and perform a sanity check.  If it detects
    '..' in the path it will raise a `TemplateNotFound` error.
  summary: Split a path into segments and perform a sanity check
  signatures:
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: make_logging_undefined
  kind: function
  ns: jinja2
  description: |-
    Given a logger object this returns a new undefined class that will
    log certain failures.  It will log iterations and printing.  If no
    logger is given a default logger is created.

    Example::

        logger = logging.getLogger(__name__)
        LoggingUndefined = make_logging_undefined(
            logger=logger,
            base=Undefined
        )

    .. versionadded:: 2.8

    :param logger: the logger to use.  If not provided, a default logger
                   is created.
    :param base: the base class to add logging functionality to.  This
                 defaults to :class:`Undefined`.
  summary: Given a logger object this returns a new undefined class that will
  signatures:
  - kind: positional
    name: logger
    default: None
    rest: false
  - kind: positional
    name: base
    default: <class 'jinja2.runtime.Undefined'>
    rest: false
  - type: '?'
  inherits_from: null
- name: optimizer
  kind: module
  ns: jinja2
  description: |-
    The optimizer tries to constant fold expressions and modify the AST
    in place so that it should be faster to evaluate.

    Because the AST does not contain all the scoping information and the
    compiler has to find that out, we cannot do all the optimizations we
    want. For example, loop unrolling doesn't work because unrolled loops
    would have a different scope. The solution would be a second syntax tree
    that stored the scoping rules.
  summary: The optimizer tries to constant fold expressions and modify the AST
  signatures: null
  inherits_from: null
- name: NodeTransformer
  kind: class
  ns: jinja2
  description: |-
    Walks the abstract syntax tree and allows modifications of nodes.

    The `NodeTransformer` will walk the AST and use the return value of the
    visitor functions to replace or remove the old node.  If the return
    value of the visitor function is `None` the node will be removed
    from the previous location otherwise it's replaced with the return
    value.  The return value may be the original node in which case no
    replacement takes place.
  summary: Walks the abstract syntax tree and allows modifications of nodes
  signatures:
  - type: NodeTransformer
  inherits_from:
  - <class 'jinja2.visitor.NodeVisitor'>
- name: NodeTransformer.generic_visit
  kind: method
  ns: jinja2
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NodeTransformer.get_visitor
  kind: method
  ns: jinja2
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NodeTransformer.visit
  kind: method
  ns: jinja2
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NodeTransformer.visit_list
  kind: method
  ns: jinja2
  description: |-
    As transformers may return lists in some places this method
    can be used to enforce a list as return value.
  summary: As transformers may return lists in some places this method
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: optimize
  kind: function
  ns: jinja2
  description: |-
    The context hint can be used to perform an static optimization
    based on the context given.
  summary: The context hint can be used to perform an static optimization
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: parser
  kind: module
  ns: jinja2
  description: Parse tokens from the lexer into nodes for the compiler.
  summary: Parse tokens from the lexer into nodes for the compiler
  signatures: null
  inherits_from: null
- name: describe_token
  kind: function
  ns: jinja2
  description: Returns a description of the token.
  summary: Returns a description of the token
  signatures:
  - kind: positional
    name: token
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: describe_token_expr
  kind: function
  ns: jinja2
  description: Like `describe_token` but for token expressions.
  summary: Like `describe_token` but for token expressions
  signatures:
  - kind: positional
    name: expr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_context
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.runtime.Context` as the first argument
    to the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    If only ``Context.eval_context`` is needed, use
    :func:`pass_eval_context`. If only ``Context.environment`` is
    needed, use :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``contextfunction`` and ``contextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_environment
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.Environment` as the first argument to
    the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    .. versionadded:: 3.0.0
        Replaces ``environmentfunction`` and ``environmentfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_eval_context
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
    to the decorated function when called while rendering a template.
    See :ref:`eval-context`.

    Can be used on functions, filters, and tests.

    If only ``EvalContext.environment`` is needed, use
    :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: runtime
  kind: module
  ns: jinja2
  description: The runtime functions and state used by compiled templates.
  summary: The runtime functions and state used by compiled templates
  signatures: null
  inherits_from: null
- name: AsyncLoopContext
  kind: class
  ns: jinja2
  description: |-
    A wrapper iterable for dynamic ``for`` loops, with information
    about the loop and iteration.
  summary: A wrapper iterable for dynamic ``for`` loops, with information
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: iterable
    default: null
    rest: false
  - kind: positional
    name: undefined
    default: null
    rest: false
  - kind: positional
    name: recurse
    default: None
    rest: false
  - kind: positional
    name: depth0
    default: '0'
    rest: false
  - type: AsyncLoopContext
  inherits_from:
  - <class 'jinja2.runtime.LoopContext'>
- name: AsyncLoopContext.changed
  kind: method
  ns: jinja2
  description: |-
    Return ``True`` if previously called with a different value
    (including when called for the first time).

    :param value: One or more values to compare to the last call.
  summary: Return ``True`` if previously called with a different value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AsyncLoopContext.cycle
  kind: method
  ns: jinja2
  description: |-
    Return a value from the given args, cycling through based on
    the current :attr:`index0`.

    :param args: One or more values to cycle through.
  summary: Return a value from the given args, cycling through based on
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AsyncLoopContext.depth
  kind: property
  ns: jinja2
  description: How many levels deep a recursive loop currently is, starting at 1.
  summary: How many levels deep a recursive loop currently is, starting at 1
  signatures: null
  inherits_from: null
- name: AsyncLoopContext.first
  kind: property
  ns: jinja2
  description: Whether this is the first iteration of the loop.
  summary: Whether this is the first iteration of the loop
  signatures: null
  inherits_from: null
- name: AsyncLoopContext.index
  kind: property
  ns: jinja2
  description: Current iteration of the loop, starting at 1.
  summary: Current iteration of the loop, starting at 1
  signatures: null
  inherits_from: null
- name: AsyncLoopContext.index0
  kind: property
  ns: jinja2
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AsyncLoopContext.last
  kind: property
  ns: jinja2
  description: |-
    Whether this is the last iteration of the loop.

    Causes the iterable to advance early. See
    :func:`itertools.groupby` for issues this can cause.
    The :func:`groupby` filter avoids that issue.
  summary: Whether this is the last iteration of the loop
  signatures: null
  inherits_from: null
- name: AsyncLoopContext.length
  kind: property
  ns: jinja2
  description: |-
    Length of the iterable.

    If the iterable is a generator or otherwise does not have a
    size, it is eagerly evaluated to get a size.
  summary: Length of the iterable
  signatures: null
  inherits_from: null
- name: AsyncLoopContext.nextitem
  kind: property
  ns: jinja2
  description: |-
    The item in the next iteration. Undefined during the last
    iteration.

    Causes the iterable to advance early. See
    :func:`itertools.groupby` for issues this can cause.
    The :func:`jinja-filters.groupby` filter avoids that issue.
  summary: The item in the next iteration
  signatures: null
  inherits_from: null
- name: AsyncLoopContext.previtem
  kind: property
  ns: jinja2
  description: |-
    The item in the previous iteration. Undefined during the
    first iteration.
  summary: The item in the previous iteration
  signatures: null
  inherits_from: null
- name: AsyncLoopContext.revindex
  kind: property
  ns: jinja2
  description: |-
    Number of iterations from the end of the loop, ending at 1.

    Requires calculating :attr:`length`.
  summary: Number of iterations from the end of the loop, ending at 1
  signatures: null
  inherits_from: null
- name: AsyncLoopContext.revindex0
  kind: property
  ns: jinja2
  description: |-
    Number of iterations from the end of the loop, ending at 0.

    Requires calculating :attr:`length`.
  summary: Number of iterations from the end of the loop, ending at 0
  signatures: null
  inherits_from: null
- name: BlockReference
  kind: class
  ns: jinja2
  description: One block on a template reference.
  summary: One block on a template reference
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: stack
    default: null
    rest: false
  - kind: positional
    name: depth
    default: null
    rest: false
  - type: BlockReference
  inherits_from: null
- name: BlockReference.super
  kind: property
  ns: jinja2
  description: Super the block.
  summary: Super the block
  signatures: null
  inherits_from: null
- name: F
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LoopContext
  kind: class
  ns: jinja2
  description: |-
    A wrapper iterable for dynamic ``for`` loops, with information
    about the loop and iteration.
  summary: A wrapper iterable for dynamic ``for`` loops, with information
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: iterable
    default: null
    rest: false
  - kind: positional
    name: undefined
    default: null
    rest: false
  - kind: positional
    name: recurse
    default: None
    rest: false
  - kind: positional
    name: depth0
    default: '0'
    rest: false
  - type: LoopContext
  inherits_from: null
- name: LoopContext.changed
  kind: method
  ns: jinja2
  description: |-
    Return ``True`` if previously called with a different value
    (including when called for the first time).

    :param value: One or more values to compare to the last call.
  summary: Return ``True`` if previously called with a different value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LoopContext.cycle
  kind: method
  ns: jinja2
  description: |-
    Return a value from the given args, cycling through based on
    the current :attr:`index0`.

    :param args: One or more values to cycle through.
  summary: Return a value from the given args, cycling through based on
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LoopContext.depth
  kind: property
  ns: jinja2
  description: How many levels deep a recursive loop currently is, starting at 1.
  summary: How many levels deep a recursive loop currently is, starting at 1
  signatures: null
  inherits_from: null
- name: LoopContext.first
  kind: property
  ns: jinja2
  description: Whether this is the first iteration of the loop.
  summary: Whether this is the first iteration of the loop
  signatures: null
  inherits_from: null
- name: LoopContext.index
  kind: property
  ns: jinja2
  description: Current iteration of the loop, starting at 1.
  summary: Current iteration of the loop, starting at 1
  signatures: null
  inherits_from: null
- name: LoopContext.index0
  kind: property
  ns: jinja2
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: LoopContext.last
  kind: property
  ns: jinja2
  description: |-
    Whether this is the last iteration of the loop.

    Causes the iterable to advance early. See
    :func:`itertools.groupby` for issues this can cause.
    The :func:`groupby` filter avoids that issue.
  summary: Whether this is the last iteration of the loop
  signatures: null
  inherits_from: null
- name: LoopContext.length
  kind: property
  ns: jinja2
  description: |-
    Length of the iterable.

    If the iterable is a generator or otherwise does not have a
    size, it is eagerly evaluated to get a size.
  summary: Length of the iterable
  signatures: null
  inherits_from: null
- name: LoopContext.nextitem
  kind: property
  ns: jinja2
  description: |-
    The item in the next iteration. Undefined during the last
    iteration.

    Causes the iterable to advance early. See
    :func:`itertools.groupby` for issues this can cause.
    The :func:`jinja-filters.groupby` filter avoids that issue.
  summary: The item in the next iteration
  signatures: null
  inherits_from: null
- name: LoopContext.previtem
  kind: property
  ns: jinja2
  description: |-
    The item in the previous iteration. Undefined during the
    first iteration.
  summary: The item in the previous iteration
  signatures: null
  inherits_from: null
- name: LoopContext.revindex
  kind: property
  ns: jinja2
  description: |-
    Number of iterations from the end of the loop, ending at 1.

    Requires calculating :attr:`length`.
  summary: Number of iterations from the end of the loop, ending at 1
  signatures: null
  inherits_from: null
- name: LoopContext.revindex0
  kind: property
  ns: jinja2
  description: |-
    Number of iterations from the end of the loop, ending at 0.

    Requires calculating :attr:`length`.
  summary: Number of iterations from the end of the loop, ending at 0
  signatures: null
  inherits_from: null
- name: Macro
  kind: class
  ns: jinja2
  description: Wraps a macro function.
  summary: Wraps a macro function
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: func
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: arguments
    default: null
    rest: false
  - kind: positional
    name: catch_kwargs
    default: null
    rest: false
  - kind: positional
    name: catch_varargs
    default: null
    rest: false
  - kind: positional
    name: caller
    default: null
    rest: false
  - kind: positional
    name: default_autoescape
    default: None
    rest: false
  - type: Macro
  inherits_from: null
- name: TemplateReference
  kind: class
  ns: jinja2
  description: The `self` in templates.
  summary: The `self` in templates
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - type: TemplateReference
  inherits_from: null
- name: V
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: async_exported
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: auto_aiter
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_await
  kind: function
  ns: jinja2
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: exported
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: identity
  kind: function
  ns: jinja2
  description: |-
    Returns its argument. Useful for certain things in the
    environment.
  summary: Returns its argument
  signatures:
  - kind: positional
    name: x
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: internalcode
  kind: function
  ns: jinja2
  description: Marks the function as internally used
  summary: Marks the function as internally used
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: make_logging_undefined
  kind: function
  ns: jinja2
  description: |-
    Given a logger object this returns a new undefined class that will
    log certain failures.  It will log iterations and printing.  If no
    logger is given a default logger is created.

    Example::

        logger = logging.getLogger(__name__)
        LoggingUndefined = make_logging_undefined(
            logger=logger,
            base=Undefined
        )

    .. versionadded:: 2.8

    :param logger: the logger to use.  If not provided, a default logger
                   is created.
    :param base: the base class to add logging functionality to.  This
                 defaults to :class:`Undefined`.
  summary: Given a logger object this returns a new undefined class that will
  signatures:
  - kind: positional
    name: logger
    default: None
    rest: false
  - kind: positional
    name: base
    default: <class 'jinja2.runtime.Undefined'>
    rest: false
  - type: '?'
  inherits_from: null
- name: markup_join
  kind: function
  ns: jinja2
  description: Concatenation that escapes if necessary and converts to string.
  summary: Concatenation that escapes if necessary and converts to string
  signatures:
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: missing
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: new_context
  kind: function
  ns: jinja2
  description: Internal helper for context creation.
  summary: Internal helper for context creation
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template_name
    default: null
    rest: false
  - kind: positional
    name: blocks
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: object_type_repr
  kind: function
  ns: jinja2
  description: |-
    Returns the name of the object's type.  For some recognized
    singletons the name of the object is returned instead. (For
    example for `None` and `Ellipsis`).
  summary: Returns the name of the object's type
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_eval_context
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
    to the decorated function when called while rendering a template.
    See :ref:`eval-context`.

    Can be used on functions, filters, and tests.

    If only ``EvalContext.environment`` is needed, use
    :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: str_join
  kind: function
  ns: jinja2
  description: Simple args to string conversion and concatenation.
  summary: Simple args to string conversion and concatenation
  signatures:
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: select_autoescape
  kind: function
  ns: jinja2
  description: |-
    Intelligently sets the initial value of autoescaping based on the
    filename of the template.  This is the recommended way to configure
    autoescaping if you do not want to write a custom function yourself.

    If you want to enable it for all templates created from strings or
    for all templates with `.html` and `.xml` extensions::

        from jinja2 import Environment, select_autoescape
        env = Environment(autoescape=select_autoescape(
            enabled_extensions=('html', 'xml'),
            default_for_string=True,
        ))

    Example configuration to turn it on at all times except if the template
    ends with `.txt`::

        from jinja2 import Environment, select_autoescape
        env = Environment(autoescape=select_autoescape(
            disabled_extensions=('txt',),
            default_for_string=True,
            default=True,
        ))

    The `enabled_extensions` is an iterable of all the extensions that
    autoescaping should be enabled for.  Likewise `disabled_extensions` is
    a list of all templates it should be disabled for.  If a template is
    loaded from a string then the default from `default_for_string` is used.
    If nothing matches then the initial value of autoescaping is set to the
    value of `default`.

    For security reasons this function operates case insensitive.

    .. versionadded:: 2.9
  summary: Intelligently sets the initial value of autoescaping based on the
  signatures:
  - kind: positional
    name: enabled_extensions
    default: ('html', 'htm', 'xml')
    rest: false
  - kind: positional
    name: disabled_extensions
    default: ()
    rest: false
  - kind: positional
    name: default_for_string
    default: 'True'
    rest: false
  - kind: positional
    name: default
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: tests
  kind: module
  ns: jinja2
  description: Built-in template tests used with the ``is`` operator.
  summary: Built-in template tests used with the ``is`` operator
  signatures: null
  inherits_from: null
- name: Number
  kind: class
  ns: jinja2
  description: |-
    All numbers inherit from this class.

    If you just want to check if an argument x is a number, without
    caring what kind, use isinstance(x, Number).
  summary: All numbers inherit from this class
  signatures:
  - type: Number
  inherits_from: null
- name: TESTS
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: pass_environment
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.Environment` as the first argument to
    the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    .. versionadded:: 3.0.0
        Replaces ``environmentfunction`` and ``environmentfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_boolean
  kind: function
  ns: jinja2
  description: |-
    Return true if the object is a boolean value.

    .. versionadded:: 2.11
  summary: Return true if the object is a boolean value
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_defined
  kind: function
  ns: jinja2
  description: |-
    Return true if the variable is defined:

    .. sourcecode:: jinja

        {% if variable is defined %}
            value of variable: {{ variable }}
        {% else %}
            variable is not defined
        {% endif %}

    See the :func:`default` filter for a simple way to set undefined
    variables.
  summary: 'Return true if the variable is defined:'
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_divisibleby
  kind: function
  ns: jinja2
  description: Check if a variable is divisible by a number.
  summary: Check if a variable is divisible by a number
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: num
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_escaped
  kind: function
  ns: jinja2
  description: Check if the value is escaped.
  summary: Check if the value is escaped
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_even
  kind: function
  ns: jinja2
  description: Return true if the variable is even.
  summary: Return true if the variable is even
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_false
  kind: function
  ns: jinja2
  description: |-
    Return true if the object is False.

    .. versionadded:: 2.11
  summary: Return true if the object is False
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_filter
  kind: function
  ns: jinja2
  description: |-
    Check if a filter exists by name. Useful if a filter may be
    optionally available.

    .. code-block:: jinja

        {% if 'markdown' is filter %}
            {{ value | markdown }}
        {% else %}
            {{ value }}
        {% endif %}

    .. versionadded:: 3.0
  summary: Check if a filter exists by name
  signatures:
  - kind: positional
    name: env
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_float
  kind: function
  ns: jinja2
  description: |-
    Return true if the object is a float.

    .. versionadded:: 2.11
  summary: Return true if the object is a float
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_in
  kind: function
  ns: jinja2
  description: |-
    Check if value is in seq.

    .. versionadded:: 2.10
  summary: Check if value is in seq
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_integer
  kind: function
  ns: jinja2
  description: |-
    Return true if the object is an integer.

    .. versionadded:: 2.11
  summary: Return true if the object is an integer
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_iterable
  kind: function
  ns: jinja2
  description: Check if it's possible to iterate over an object.
  summary: Check if it's possible to iterate over an object
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_lower
  kind: function
  ns: jinja2
  description: Return true if the variable is lowercased.
  summary: Return true if the variable is lowercased
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_mapping
  kind: function
  ns: jinja2
  description: |-
    Return true if the object is a mapping (dict etc.).

    .. versionadded:: 2.6
  summary: Return true if the object is a mapping (dict etc
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_none
  kind: function
  ns: jinja2
  description: Return true if the variable is none.
  summary: Return true if the variable is none
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_number
  kind: function
  ns: jinja2
  description: Return true if the variable is a number.
  summary: Return true if the variable is a number
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_odd
  kind: function
  ns: jinja2
  description: Return true if the variable is odd.
  summary: Return true if the variable is odd
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_sameas
  kind: function
  ns: jinja2
  description: |-
    Check if an object points to the same memory address than another
    object:

    .. sourcecode:: jinja

        {% if foo.attribute is sameas false %}
            the foo attribute really is the `False` singleton
        {% endif %}
  summary: Check if an object points to the same memory address than another
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: other
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_sequence
  kind: function
  ns: jinja2
  description: |-
    Return true if the variable is a sequence. Sequences are variables
    that are iterable.
  summary: Return true if the variable is a sequence
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_string
  kind: function
  ns: jinja2
  description: Return true if the object is a string.
  summary: Return true if the object is a string
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_test
  kind: function
  ns: jinja2
  description: |-
    Check if a test exists by name. Useful if a test may be
    optionally available.

    .. code-block:: jinja

        {% if 'loud' is test %}
            {% if value is loud %}
                {{ value|upper }}
            {% else %}
                {{ value|lower }}
            {% endif %}
        {% else %}
            {{ value }}
        {% endif %}

    .. versionadded:: 3.0
  summary: Check if a test exists by name
  signatures:
  - kind: positional
    name: env
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_true
  kind: function
  ns: jinja2
  description: |-
    Return true if the object is True.

    .. versionadded:: 2.11
  summary: Return true if the object is True
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_undefined
  kind: function
  ns: jinja2
  description: Like :func:`defined` but the other way round.
  summary: Like :func:`defined` but the other way round
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_upper
  kind: function
  ns: jinja2
  description: Return true if the variable is uppercased.
  summary: Return true if the variable is uppercased
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: utils
  kind: module
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: F
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: choice
  kind: method
  ns: jinja2
  description: Choose a random element from a non-empty sequence.
  summary: Choose a random element from a non-empty sequence
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: clear_caches
  kind: function
  ns: jinja2
  description: |-
    Jinja keeps internal caches for environments and lexers.  These are
    used so that Jinja doesn't have to recreate environments and lexers all
    the time.  Normally you don't have to care about that but if you are
    measuring memory consumption you may want to clean the caches.
  summary: Jinja keeps internal caches for environments and lexers
  signatures:
  - type: '?'
  inherits_from: null
- name: consume
  kind: function
  ns: jinja2
  description: Consumes an iterable without doing anything with it.
  summary: Consumes an iterable without doing anything with it
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: generate_lorem_ipsum
  kind: function
  ns: jinja2
  description: Generate some lorem ipsum for the template.
  summary: Generate some lorem ipsum for the template
  signatures:
  - kind: positional
    name: n
    default: '5'
    rest: false
  - kind: positional
    name: html
    default: 'True'
    rest: false
  - kind: positional
    name: min
    default: '20'
    rest: false
  - kind: positional
    name: max
    default: '100'
    rest: false
  - type: '?'
  inherits_from: null
- name: htmlsafe_json_dumps
  kind: function
  ns: jinja2
  description: |-
    Serialize an object to a string of JSON with :func:`json.dumps`,
    then replace HTML-unsafe characters with Unicode escapes and mark
    the result safe with :class:`~markupsafe.Markup`.

    This is available in templates as the ``|tojson`` filter.

    The following characters are escaped: ``<``, ``>``, ``&``, ``'``.

    The returned string is safe to render in HTML documents and
    ``<script>`` tags. The exception is in HTML attributes that are
    double quoted; either use single quotes or the ``|forceescape``
    filter.

    :param obj: The object to serialize to JSON.
    :param dumps: The ``dumps`` function to use. Defaults to
        ``env.policies["json.dumps_function"]``, which defaults to
        :func:`json.dumps`.
    :param kwargs: Extra arguments to pass to ``dumps``. Merged onto
        ``env.policies["json.dumps_kwargs"]``.

    .. versionchanged:: 3.0
        The ``dumper`` parameter is renamed to ``dumps``.

    .. versionadded:: 2.9
  summary: Serialize an object to a string of JSON with :func:`json
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: dumps
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: import_string
  kind: function
  ns: jinja2
  description: |-
    Imports an object based on a string.  This is useful if you want to
    use import paths as endpoints or something similar.  An import path can
    be specified either in dotted notation (``xml.sax.saxutils.escape``)
    or with a colon as object delimiter (``xml.sax.saxutils:escape``).

    If the `silent` is True the return value will be `None` if the import
    fails.

    :return: imported object
  summary: Imports an object based on a string
  signatures:
  - kind: positional
    name: import_name
    default: null
    rest: false
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: internal_code
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: internalcode
  kind: function
  ns: jinja2
  description: Marks the function as internally used
  summary: Marks the function as internally used
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: is_undefined
  kind: function
  ns: jinja2
  description: |-
    Check if the object passed is undefined.  This does nothing more than
    performing an instance check against :class:`Undefined` but looks nicer.
    This can be used for custom filters or tests that want to react to
    undefined variables.  For example a custom default filter can look like
    this::

        def default(var, default=''):
            if is_undefined(var):
                return default
            return var
  summary: Check if the object passed is undefined
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: missing
  kind: const
  ns: jinja2
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: object_type_repr
  kind: function
  ns: jinja2
  description: |-
    Returns the name of the object's type.  For some recognized
    singletons the name of the object is returned instead. (For
    example for `None` and `Ellipsis`).
  summary: Returns the name of the object's type
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: open_if_exists
  kind: function
  ns: jinja2
  description: |-
    Returns a file descriptor for the filename if that file exists,
    otherwise ``None``.
  summary: Returns a file descriptor for the filename if that file exists,
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: rb
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_context
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.runtime.Context` as the first argument
    to the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    If only ``Context.eval_context`` is needed, use
    :func:`pass_eval_context`. If only ``Context.environment`` is
    needed, use :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``contextfunction`` and ``contextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_environment
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.Environment` as the first argument to
    the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    .. versionadded:: 3.0.0
        Replaces ``environmentfunction`` and ``environmentfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_eval_context
  kind: function
  ns: jinja2
  description: |-
    Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
    to the decorated function when called while rendering a template.
    See :ref:`eval-context`.

    Can be used on functions, filters, and tests.

    If only ``EvalContext.environment`` is needed, use
    :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pformat
  kind: function
  ns: jinja2
  description: Format an object using :func:`pprint.pformat`.
  summary: Format an object using :func:`pprint
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: quote_from_bytes
  kind: function
  ns: jinja2
  description: |-
    Like quote(), but accepts a bytes object rather than a str, and does
    not perform string-to-bytes encoding.  It always returns an ASCII string.
    quote_from_bytes(b'abc def?') -> 'abc%20def%3f'
  summary: Like quote(), but accepts a bytes object rather than a str, and does
  signatures:
  - kind: positional
    name: bs
    default: null
    rest: false
  - kind: positional
    name: safe
    default: /
    rest: false
  - type: '?'
  inherits_from: null
- name: randrange
  kind: method
  ns: jinja2
  description: |-
    Choose a random item from range(stop) or range(start, stop[, step]).

    Roughly equivalent to ``choice(range(start, stop, step))`` but
    supports arbitrarily large ranges and is optimized for common cases.
  summary: Choose a random item from range(stop) or range(start, stop[, step])
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: start
    default: null
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - kind: positional
    name: step
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: select_autoescape
  kind: function
  ns: jinja2
  description: |-
    Intelligently sets the initial value of autoescaping based on the
    filename of the template.  This is the recommended way to configure
    autoescaping if you do not want to write a custom function yourself.

    If you want to enable it for all templates created from strings or
    for all templates with `.html` and `.xml` extensions::

        from jinja2 import Environment, select_autoescape
        env = Environment(autoescape=select_autoescape(
            enabled_extensions=('html', 'xml'),
            default_for_string=True,
        ))

    Example configuration to turn it on at all times except if the template
    ends with `.txt`::

        from jinja2 import Environment, select_autoescape
        env = Environment(autoescape=select_autoescape(
            disabled_extensions=('txt',),
            default_for_string=True,
            default=True,
        ))

    The `enabled_extensions` is an iterable of all the extensions that
    autoescaping should be enabled for.  Likewise `disabled_extensions` is
    a list of all templates it should be disabled for.  If a template is
    loaded from a string then the default from `default_for_string` is used.
    If nothing matches then the initial value of autoescaping is set to the
    value of `default`.

    For security reasons this function operates case insensitive.

    .. versionadded:: 2.9
  summary: Intelligently sets the initial value of autoescaping based on the
  signatures:
  - kind: positional
    name: enabled_extensions
    default: ('html', 'htm', 'xml')
    rest: false
  - kind: positional
    name: disabled_extensions
    default: ()
    rest: false
  - kind: positional
    name: default_for_string
    default: 'True'
    rest: false
  - kind: positional
    name: default
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: url_quote
  kind: function
  ns: jinja2
  description: |-
    Quote a string for use in a URL using the given charset.

    :param obj: String or bytes to quote. Other types are converted to
        string then encoded to bytes using the given charset.
    :param charset: Encode text to bytes using this charset.
    :param for_qs: Quote "/" and use "+" for spaces.
  summary: Quote a string for use in a URL using the given charset
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: charset
    default: utf-8
    rest: false
  - kind: positional
    name: for_qs
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: urlize
  kind: function
  ns: jinja2
  description: |-
    Convert URLs in text into clickable links.

    This may not recognize links in some situations. Usually, a more
    comprehensive formatter, such as a Markdown library, is a better
    choice.

    Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email
    addresses. Links with trailing punctuation (periods, commas, closing
    parentheses) and leading punctuation (opening parentheses) are
    recognized excluding the punctuation. Email addresses that include
    header fields are not recognized (for example,
    ``mailto:address@example.com?cc=copy@example.com``).

    :param text: Original text containing URLs to link.
    :param trim_url_limit: Shorten displayed URL values to this length.
    :param target: Add the ``target`` attribute to links.
    :param rel: Add the ``rel`` attribute to links.
    :param extra_schemes: Recognize URLs that start with these schemes
        in addition to the default behavior.

    .. versionchanged:: 3.0
        The ``extra_schemes`` parameter was added.

    .. versionchanged:: 3.0
        Generate ``https://`` links for URLs without a scheme.

    .. versionchanged:: 3.0
        The parsing rules were updated. Recognize email addresses with
        or without the ``mailto:`` scheme. Validate IP addresses. Ignore
        parentheses and brackets in more cases.
  summary: Convert URLs in text into clickable links
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: trim_url_limit
    default: None
    rest: false
  - kind: positional
    name: rel
    default: None
    rest: false
  - kind: positional
    name: target
    default: None
    rest: false
  - kind: positional
    name: extra_schemes
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: visitor
  kind: module
  ns: jinja2
  description: |-
    API for traversing the AST nodes. Implemented by the compiler and
    meta introspection.
  summary: API for traversing the AST nodes
  signatures: null
  inherits_from: null
- name: jinja2.async_utils
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: jinja2.async_utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WRAPPER_ASSIGNMENTS
  kind: const
  ns: jinja2.async_utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: async_variant
  kind: function
  ns: jinja2.async_utils
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: normal_func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_aiter
  kind: function
  ns: jinja2.async_utils
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_await
  kind: function
  ns: jinja2.async_utils
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_to_list
  kind: function
  ns: jinja2.async_utils
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_eval_context
  kind: function
  ns: jinja2.async_utils
  description: |-
    Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
    to the decorated function when called while rendering a template.
    See :ref:`eval-context`.

    Can be used on functions, filters, and tests.

    If only ``EvalContext.environment`` is needed, use
    :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: wraps
  kind: function
  ns: jinja2.async_utils
  description: |-
    Decorator factory to apply update_wrapper() to a wrapper function

    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
  summary: Decorator factory to apply update_wrapper() to a wrapper function
  signatures:
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.bccache
  kind: module
  ns: null
  description: |-
    The optional bytecode cache system. This is useful if you have very
    complex template situations and the compilation of all those templates
    slows down your application too much.

    Situations where this is useful are often forking web applications that
    are initialized on the first request.
  summary: The optional bytecode cache system
  signatures: null
  inherits_from: null
- name: bc_magic
  kind: const
  ns: jinja2.bccache
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: bc_version
  kind: const
  ns: jinja2.bccache
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: jinja2.compiler
  kind: module
  ns: null
  description: Compiles nodes from the parser into Python code.
  summary: Compiles nodes from the parser into Python code
  signatures: null
  inherits_from: null
- name: F
  kind: const
  ns: jinja2.compiler
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_ALIAS
  kind: const
  ns: jinja2.compiler
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_PARAMETER
  kind: const
  ns: jinja2.compiler
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_RESOLVE
  kind: const
  ns: jinja2.compiler
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_UNDEFINED
  kind: const
  ns: jinja2.compiler
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: contextmanager
  kind: function
  ns: jinja2.compiler
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: find_undeclared
  kind: function
  ns: jinja2.compiler
  description: |-
    Check if the names passed are accessed undeclared.  The return value
    is a set of all the undeclared names from the sequence of names found.
  summary: Check if the names passed are accessed undeclared
  signatures:
  - kind: positional
    name: nodes
    default: null
    rest: false
  - kind: positional
    name: names
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: generate
  kind: function
  ns: jinja2.compiler
  description: Generate the python source for a node tree.
  summary: Generate the python source for a node tree
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: stream
    default: None
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: has_safe_repr
  kind: function
  ns: jinja2.compiler
  description: Does the node have a safe representation?
  summary: Does the node have a safe representation?
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: operators
  kind: const
  ns: jinja2.compiler
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: optimizeconst
  kind: function
  ns: jinja2.compiler
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: update_wrapper
  kind: function
  ns: jinja2.compiler
  description: |-
    Update a wrapper function to look like the wrapped function

    wrapper is the function to be updated
    wrapped is the original function
    assigned is a tuple naming the attributes assigned directly
    from the wrapped function to the wrapper function (defaults to
    functools.WRAPPER_ASSIGNMENTS)
    updated is a tuple naming the attributes of the wrapper that
    are updated with the corresponding attribute from the wrapped
    function (defaults to functools.WRAPPER_UPDATES)
  summary: Update a wrapper function to look like the wrapped function
  signatures:
  - kind: positional
    name: wrapper
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.constants
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LOREM_IPSUM_WORDS
  kind: const
  ns: jinja2.constants
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: jinja2.debug
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType
  kind: class
  ns: jinja2.debug
  description: |-
    TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
    --

    Create a new traceback object.
  summary: TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
  signatures: null
  inherits_from: null
- name: TracebackType.tb_frame
  kind: property
  ns: jinja2.debug
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType.tb_lasti
  kind: property
  ns: jinja2.debug
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType.tb_lineno
  kind: property
  ns: jinja2.debug
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType.tb_next
  kind: property
  ns: jinja2.debug
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fake_traceback
  kind: function
  ns: jinja2.debug
  description: |-
    Produce a new traceback object that looks like it came from the
    template source instead of the compiled code. The filename, line
    number, and location name will point to the template, and the local
    variables will be the current template context.

    :param exc_value: The original exception to be re-raised to create
        the new traceback.
    :param tb: The original traceback to get the local variables and
        code info from.
    :param filename: The template filename.
    :param lineno: The line number in the template source.
  summary: Produce a new traceback object that looks like it came from the
  signatures:
  - kind: positional
    name: exc_value
    default: null
    rest: false
  - kind: positional
    name: tb
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: get_template_locals
  kind: function
  ns: jinja2.debug
  description: |-
    Based on the runtime locals, get the context that would be
    available at that point in the template.
  summary: Based on the runtime locals, get the context that would be
  signatures:
  - kind: positional
    name: real_locals
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: internal_code
  kind: const
  ns: jinja2.debug
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: missing
  kind: const
  ns: jinja2.debug
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: rewrite_traceback_stack
  kind: function
  ns: jinja2.debug
  description: |-
    Rewrite the current exception to replace any tracebacks from
    within compiled template code with tracebacks that look like they
    came from the template source.

    This must be called within an ``except`` block.

    :param source: For ``TemplateSyntaxError``, the original source if
        known.
    :return: The original exception with the rewritten traceback.
  summary: Rewrite the current exception to replace any tracebacks from
  signatures:
  - kind: positional
    name: source
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.defaults
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BLOCK_END_STRING
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BLOCK_START_STRING
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COMMENT_END_STRING
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COMMENT_START_STRING
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_FILTERS
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_NAMESPACE
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_POLICIES
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_TESTS
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: KEEP_TRAILING_NEWLINE
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LINE_COMMENT_PREFIX
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LINE_STATEMENT_PREFIX
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LSTRIP_BLOCKS
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NEWLINE_SEQUENCE
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TRIM_BLOCKS
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VARIABLE_END_STRING
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VARIABLE_START_STRING
  kind: const
  ns: jinja2.defaults
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: generate_lorem_ipsum
  kind: function
  ns: jinja2.defaults
  description: Generate some lorem ipsum for the template.
  summary: Generate some lorem ipsum for the template
  signatures:
  - kind: positional
    name: n
    default: '5'
    rest: false
  - kind: positional
    name: html
    default: 'True'
    rest: false
  - kind: positional
    name: min
    default: '20'
    rest: false
  - kind: positional
    name: max
    default: '100'
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.environment
  kind: module
  ns: null
  description: |-
    Classes for managing templates and their runtime and compile time
    options.
  summary: Classes for managing templates and their runtime and compile time
  signatures: null
  inherits_from: null
- name: BLOCK_END_STRING
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BLOCK_START_STRING
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COMMENT_END_STRING
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COMMENT_START_STRING
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_FILTERS
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_NAMESPACE
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_POLICIES
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DEFAULT_TESTS
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: KEEP_TRAILING_NEWLINE
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LINE_COMMENT_PREFIX
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LINE_STATEMENT_PREFIX
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LSTRIP_BLOCKS
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NEWLINE_SEQUENCE
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TRIM_BLOCKS
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VARIABLE_END_STRING
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VARIABLE_START_STRING
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: consume
  kind: function
  ns: jinja2.environment
  description: Consumes an iterable without doing anything with it.
  summary: Consumes an iterable without doing anything with it
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: copy_cache
  kind: function
  ns: jinja2.environment
  description: Create an empty copy of the given cache.
  summary: Create an empty copy of the given cache
  signatures:
  - kind: positional
    name: cache
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: create_cache
  kind: function
  ns: jinja2.environment
  description: Return the cache class for the given size.
  summary: Return the cache class for the given size
  signatures:
  - kind: positional
    name: size
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: generate
  kind: function
  ns: jinja2.environment
  description: Generate the python source for a node tree.
  summary: Generate the python source for a node tree
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: stream
    default: None
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_lexer
  kind: function
  ns: jinja2.environment
  description: Return a lexer which is probably cached.
  summary: Return a lexer which is probably cached
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: get_spontaneous_environment
  kind: callable
  ns: jinja2.environment
  description: |-
    Return a new spontaneous environment. A spontaneous environment
    is used for templates created directly rather than through an
    existing environment.

    :param cls: Environment class to create.
    :param args: Positional arguments passed to environment.
  summary: Return a new spontaneous environment
  signatures: null
  inherits_from: null
- name: import_string
  kind: function
  ns: jinja2.environment
  description: |-
    Imports an object based on a string.  This is useful if you want to
    use import paths as endpoints or something similar.  An import path can
    be specified either in dotted notation (``xml.sax.saxutils.escape``)
    or with a colon as object delimiter (``xml.sax.saxutils:escape``).

    If the `silent` is True the return value will be `None` if the import
    fails.

    :return: imported object
  summary: Imports an object based on a string
  signatures:
  - kind: positional
    name: import_name
    default: null
    rest: false
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: internalcode
  kind: function
  ns: jinja2.environment
  description: Marks the function as internally used
  summary: Marks the function as internally used
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: load_extensions
  kind: function
  ns: jinja2.environment
  description: |-
    Load the extensions from the list and bind it to the environment.
    Returns a dict of instantiated extensions.
  summary: Load the extensions from the list and bind it to the environment
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: lru_cache
  kind: function
  ns: jinja2.environment
  description: |-
    Least-recently-used cache decorator.

    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.

    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.

    Arguments to the cached function must be hashable.

    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.

    See:  https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)
  summary: Least-recently-used cache decorator
  signatures:
  - kind: positional
    name: maxsize
    default: '128'
    rest: false
  - kind: positional
    name: typed
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: missing
  kind: const
  ns: jinja2.environment
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: new_context
  kind: function
  ns: jinja2.environment
  description: Internal helper for context creation.
  summary: Internal helper for context creation
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template_name
    default: null
    rest: false
  - kind: positional
    name: blocks
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.exceptions
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: jinja2.ext
  kind: module
  ns: null
  description: Extension API for adding custom tags and behavior.
  summary: Extension API for adding custom tags and behavior
  signatures: null
  inherits_from: null
- name: DebugExtension
  kind: class
  ns: jinja2.ext
  description: |-
    A ``{% debug %}`` tag that dumps the available variables,
    filters, and tests.

    .. code-block:: html+jinja

        <pre>{% debug %}</pre>

    .. code-block:: text

        {'context': {'cycler': <class 'jinja2.utils.Cycler'>,
                     ...,
                     'namespace': <class 'jinja2.utils.Namespace'>},
         'filters': ['abs', 'attr', 'batch', 'capitalize', 'center', 'count', 'd',
                     ..., 'urlencode', 'urlize', 'wordcount', 'wordwrap', 'xmlattr'],
         'tests': ['!=', '<', '<=', '==', '>', '>=', 'callable', 'defined',
                   ..., 'odd', 'sameas', 'sequence', 'string', 'undefined', 'upper']}

    .. versionadded:: 2.11.0
  summary: A ``{% debug %}`` tag that dumps the available variables,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: DebugExtension
  inherits_from:
  - <class 'jinja2.ext.Extension'>
- name: DebugExtension.attr
  kind: method
  ns: jinja2.ext
  description: |-
    Return an attribute node for the current extension.  This is useful
    to pass constants on extensions to generated template code.

    ::

        self.attr('_my_attribute', lineno=lineno)
  summary: Return an attribute node for the current extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DebugExtension.bind
  kind: method
  ns: jinja2.ext
  description: Create a copy of this extension bound to another environment.
  summary: Create a copy of this extension bound to another environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DebugExtension.call_method
  kind: method
  ns: jinja2.ext
  description: |-
    Call a method of the extension.  This is a shortcut for
    :meth:`attr` + :class:`jinja2.nodes.Call`.
  summary: Call a method of the extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: dyn_args
    default: None
    rest: false
  - kind: positional
    name: dyn_kwargs
    default: None
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DebugExtension.filter_stream
  kind: method
  ns: jinja2.ext
  description: |-
    It's passed a :class:`~jinja2.lexer.TokenStream` that can be used
    to filter tokens returned.  This method has to return an iterable of
    :class:`~jinja2.lexer.Token`\s, but it doesn't have to return a
    :class:`~jinja2.lexer.TokenStream`.
  summary: It's passed a :class:`~jinja2
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: stream
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DebugExtension.identifier
  kind: property
  ns: jinja2.ext
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: DebugExtension.parse
  kind: method
  ns: jinja2.ext
  description: |-
    If any of the :attr:`tags` matched this method is called with the
    parser as first argument.  The token the parser stream is pointing at
    is the name token that matched.  This method has to return one or a
    list of multiple nodes.
  summary: If any of the :attr:`tags` matched this method is called with the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: parser
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DebugExtension.preprocess
  kind: method
  ns: jinja2.ext
  description: |-
    This method is called before the actual lexing and can be used to
    preprocess the source.  The `filename` is optional.  The return value
    must be the preprocessed source.
  summary: This method is called before the actual lexing and can be used to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DebugExtension.priority
  kind: property
  ns: jinja2.ext
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: DebugExtension.tags
  kind: property
  ns: jinja2.ext
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: ExprStmtExtension
  kind: class
  ns: jinja2.ext
  description: |-
    Adds a `do` tag to Jinja that works like the print statement just
    that it doesn't print the return value.
  summary: Adds a `do` tag to Jinja that works like the print statement just
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: ExprStmtExtension
  inherits_from:
  - <class 'jinja2.ext.Extension'>
- name: ExprStmtExtension.attr
  kind: method
  ns: jinja2.ext
  description: |-
    Return an attribute node for the current extension.  This is useful
    to pass constants on extensions to generated template code.

    ::

        self.attr('_my_attribute', lineno=lineno)
  summary: Return an attribute node for the current extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmtExtension.bind
  kind: method
  ns: jinja2.ext
  description: Create a copy of this extension bound to another environment.
  summary: Create a copy of this extension bound to another environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmtExtension.call_method
  kind: method
  ns: jinja2.ext
  description: |-
    Call a method of the extension.  This is a shortcut for
    :meth:`attr` + :class:`jinja2.nodes.Call`.
  summary: Call a method of the extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: dyn_args
    default: None
    rest: false
  - kind: positional
    name: dyn_kwargs
    default: None
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmtExtension.filter_stream
  kind: method
  ns: jinja2.ext
  description: |-
    It's passed a :class:`~jinja2.lexer.TokenStream` that can be used
    to filter tokens returned.  This method has to return an iterable of
    :class:`~jinja2.lexer.Token`\s, but it doesn't have to return a
    :class:`~jinja2.lexer.TokenStream`.
  summary: It's passed a :class:`~jinja2
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: stream
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmtExtension.identifier
  kind: property
  ns: jinja2.ext
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ExprStmtExtension.parse
  kind: method
  ns: jinja2.ext
  description: |-
    If any of the :attr:`tags` matched this method is called with the
    parser as first argument.  The token the parser stream is pointing at
    is the name token that matched.  This method has to return one or a
    list of multiple nodes.
  summary: If any of the :attr:`tags` matched this method is called with the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: parser
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmtExtension.preprocess
  kind: method
  ns: jinja2.ext
  description: |-
    This method is called before the actual lexing and can be used to
    preprocess the source.  The `filename` is optional.  The return value
    must be the preprocessed source.
  summary: This method is called before the actual lexing and can be used to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ExprStmtExtension.priority
  kind: property
  ns: jinja2.ext
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ExprStmtExtension.tags
  kind: property
  ns: jinja2.ext
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: Extension
  kind: class
  ns: jinja2.ext
  description: |-
    Extensions can be used to add extra functionality to the Jinja template
    system at the parser level.  Custom extensions are bound to an environment
    but may not store environment specific data on `self`.  The reason for
    this is that an extension can be bound to another environment (for
    overlays) by creating a copy and reassigning the `environment` attribute.

    As extensions are created by the environment they cannot accept any
    arguments for configuration.  One may want to work around that by using
    a factory function, but that is not possible as extensions are identified
    by their import name.  The correct way to configure the extension is
    storing the configuration values on the environment.  Because this way the
    environment ends up acting as central configuration storage the
    attributes may clash which is why extensions have to ensure that the names
    they choose for configuration are not too generic.  ``prefix`` for example
    is a terrible name, ``fragment_cache_prefix`` on the other hand is a good
    name as includes the name of the extension (fragment cache).
  summary: Extensions can be used to add extra functionality to the Jinja template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: Extension
  inherits_from: null
- name: Extension.attr
  kind: method
  ns: jinja2.ext
  description: |-
    Return an attribute node for the current extension.  This is useful
    to pass constants on extensions to generated template code.

    ::

        self.attr('_my_attribute', lineno=lineno)
  summary: Return an attribute node for the current extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Extension.bind
  kind: method
  ns: jinja2.ext
  description: Create a copy of this extension bound to another environment.
  summary: Create a copy of this extension bound to another environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Extension.call_method
  kind: method
  ns: jinja2.ext
  description: |-
    Call a method of the extension.  This is a shortcut for
    :meth:`attr` + :class:`jinja2.nodes.Call`.
  summary: Call a method of the extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: dyn_args
    default: None
    rest: false
  - kind: positional
    name: dyn_kwargs
    default: None
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Extension.filter_stream
  kind: method
  ns: jinja2.ext
  description: |-
    It's passed a :class:`~jinja2.lexer.TokenStream` that can be used
    to filter tokens returned.  This method has to return an iterable of
    :class:`~jinja2.lexer.Token`\s, but it doesn't have to return a
    :class:`~jinja2.lexer.TokenStream`.
  summary: It's passed a :class:`~jinja2
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: stream
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Extension.parse
  kind: method
  ns: jinja2.ext
  description: |-
    If any of the :attr:`tags` matched this method is called with the
    parser as first argument.  The token the parser stream is pointing at
    is the name token that matched.  This method has to return one or a
    list of multiple nodes.
  summary: If any of the :attr:`tags` matched this method is called with the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: parser
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Extension.preprocess
  kind: method
  ns: jinja2.ext
  description: |-
    This method is called before the actual lexing and can be used to
    preprocess the source.  The `filename` is optional.  The return value
    must be the preprocessed source.
  summary: This method is called before the actual lexing and can be used to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Extension.priority
  kind: property
  ns: jinja2.ext
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Extension.tags
  kind: property
  ns: jinja2.ext
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: GETTEXT_FUNCTIONS
  kind: const
  ns: jinja2.ext
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InternationalizationExtension
  kind: class
  ns: jinja2.ext
  description: This extension adds gettext support to Jinja.
  summary: This extension adds gettext support to Jinja
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: InternationalizationExtension
  inherits_from:
  - <class 'jinja2.ext.Extension'>
- name: InternationalizationExtension.attr
  kind: method
  ns: jinja2.ext
  description: |-
    Return an attribute node for the current extension.  This is useful
    to pass constants on extensions to generated template code.

    ::

        self.attr('_my_attribute', lineno=lineno)
  summary: Return an attribute node for the current extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: InternationalizationExtension.bind
  kind: method
  ns: jinja2.ext
  description: Create a copy of this extension bound to another environment.
  summary: Create a copy of this extension bound to another environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: InternationalizationExtension.call_method
  kind: method
  ns: jinja2.ext
  description: |-
    Call a method of the extension.  This is a shortcut for
    :meth:`attr` + :class:`jinja2.nodes.Call`.
  summary: Call a method of the extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: dyn_args
    default: None
    rest: false
  - kind: positional
    name: dyn_kwargs
    default: None
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: InternationalizationExtension.filter_stream
  kind: method
  ns: jinja2.ext
  description: |-
    It's passed a :class:`~jinja2.lexer.TokenStream` that can be used
    to filter tokens returned.  This method has to return an iterable of
    :class:`~jinja2.lexer.Token`\s, but it doesn't have to return a
    :class:`~jinja2.lexer.TokenStream`.
  summary: It's passed a :class:`~jinja2
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: stream
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: InternationalizationExtension.identifier
  kind: property
  ns: jinja2.ext
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: InternationalizationExtension.parse
  kind: method
  ns: jinja2.ext
  description: Parse a translatable tag.
  summary: Parse a translatable tag
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: parser
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: InternationalizationExtension.preprocess
  kind: method
  ns: jinja2.ext
  description: |-
    This method is called before the actual lexing and can be used to
    preprocess the source.  The `filename` is optional.  The return value
    must be the preprocessed source.
  summary: This method is called before the actual lexing and can be used to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: InternationalizationExtension.priority
  kind: property
  ns: jinja2.ext
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: InternationalizationExtension.tags
  kind: property
  ns: jinja2.ext
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: LoopControlExtension
  kind: class
  ns: jinja2.ext
  description: Adds break and continue to the template engine.
  summary: Adds break and continue to the template engine
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: LoopControlExtension
  inherits_from:
  - <class 'jinja2.ext.Extension'>
- name: LoopControlExtension.attr
  kind: method
  ns: jinja2.ext
  description: |-
    Return an attribute node for the current extension.  This is useful
    to pass constants on extensions to generated template code.

    ::

        self.attr('_my_attribute', lineno=lineno)
  summary: Return an attribute node for the current extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: LoopControlExtension.bind
  kind: method
  ns: jinja2.ext
  description: Create a copy of this extension bound to another environment.
  summary: Create a copy of this extension bound to another environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LoopControlExtension.call_method
  kind: method
  ns: jinja2.ext
  description: |-
    Call a method of the extension.  This is a shortcut for
    :meth:`attr` + :class:`jinja2.nodes.Call`.
  summary: Call a method of the extension
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: dyn_args
    default: None
    rest: false
  - kind: positional
    name: dyn_kwargs
    default: None
    rest: false
  - kind: positional
    name: lineno
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: LoopControlExtension.filter_stream
  kind: method
  ns: jinja2.ext
  description: |-
    It's passed a :class:`~jinja2.lexer.TokenStream` that can be used
    to filter tokens returned.  This method has to return an iterable of
    :class:`~jinja2.lexer.Token`\s, but it doesn't have to return a
    :class:`~jinja2.lexer.TokenStream`.
  summary: It's passed a :class:`~jinja2
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: stream
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LoopControlExtension.identifier
  kind: property
  ns: jinja2.ext
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: LoopControlExtension.parse
  kind: method
  ns: jinja2.ext
  description: |-
    If any of the :attr:`tags` matched this method is called with the
    parser as first argument.  The token the parser stream is pointing at
    is the name token that matched.  This method has to return one or a
    list of multiple nodes.
  summary: If any of the :attr:`tags` matched this method is called with the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: parser
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LoopControlExtension.preprocess
  kind: method
  ns: jinja2.ext
  description: |-
    This method is called before the actual lexing and can be used to
    preprocess the source.  The `filename` is optional.  The return value
    must be the preprocessed source.
  summary: This method is called before the actual lexing and can be used to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: LoopControlExtension.priority
  kind: property
  ns: jinja2.ext
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: LoopControlExtension.tags
  kind: property
  ns: jinja2.ext
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: babel_extract
  kind: function
  ns: jinja2.ext
  description: |-
    Babel extraction method for Jinja templates.

    .. versionchanged:: 2.3
       Basic support for translation comments was added.  If `comment_tags`
       is now set to a list of keywords for extraction, the extractor will
       try to find the best preceding comment that begins with one of the
       keywords.  For best results, make sure to not have more than one
       gettext call in one line of code and the matching comment in the
       same line or the line before.

    .. versionchanged:: 2.5.1
       The `newstyle_gettext` flag can be set to `True` to enable newstyle
       gettext calls.

    .. versionchanged:: 2.7
       A `silent` option can now be provided.  If set to `False` template
       syntax errors are propagated instead of being ignored.

    :param fileobj: the file-like object the messages should be extracted from
    :param keywords: a list of keywords (i.e. function names) that should be
                     recognized as translation functions
    :param comment_tags: a list of translator tags to search for and include
                         in the results.
    :param options: a dictionary of additional options (optional)
    :return: an iterator over ``(lineno, funcname, message, comments)`` tuples.
             (comments will be empty currently)
  summary: Babel extraction method for Jinja templates
  signatures:
  - kind: positional
    name: fileobj
    default: null
    rest: false
  - kind: positional
    name: keywords
    default: null
    rest: false
  - kind: positional
    name: comment_tags
    default: null
    rest: false
  - kind: positional
    name: options
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: extract_from_ast
  kind: function
  ns: jinja2.ext
  description: |-
    Extract localizable strings from the given template node.  Per
    default this function returns matches in babel style that means non string
    parameters as well as keyword arguments are returned as `None`.  This
    allows Babel to figure out what you really meant if you are using
    gettext functions that allow keyword arguments for placeholder expansion.
    If you don't want that behavior set the `babel_style` parameter to `False`
    which causes only strings to be returned and parameters are always stored
    in tuples.  As a consequence invalid gettext calls (calls without a single
    string parameter or string parameters after non-string parameters) are
    skipped.

    This example explains the behavior:

    >>> from jinja2 import Environment
    >>> env = Environment()
    >>> node = env.parse('{{ (_("foo"), _(), ngettext("foo", "bar", 42)) }}')
    >>> list(extract_from_ast(node))
    [(1, '_', 'foo'), (1, '_', ()), (1, 'ngettext', ('foo', 'bar', None))]
    >>> list(extract_from_ast(node, babel_style=False))
    [(1, '_', ('foo',)), (1, 'ngettext', ('foo', 'bar'))]

    For every string found this function yields a ``(lineno, function,
    message)`` tuple, where:

    * ``lineno`` is the number of the line on which the string was found,
    * ``function`` is the name of the ``gettext`` function used (if the
      string was extracted from embedded Python code), and
    *   ``message`` is the string, or a tuple of strings for functions
         with multiple string arguments.

    This extraction function operates on the AST and is because of that unable
    to extract any comments.  For comment support you have to use the babel
    extraction interface or extract comments yourself.
  summary: Extract localizable strings from the given template node
  signatures:
  - kind: positional
    name: ast
    default: null
    rest: false
  - kind: positional
    name: gettext_functions
    default: ('_', 'gettext', 'ngettext', 'pgettext', 'npgettext')
    rest: false
  - kind: positional
    name: babel_style
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: import_string
  kind: function
  ns: jinja2.ext
  description: |-
    Imports an object based on a string.  This is useful if you want to
    use import paths as endpoints or something similar.  An import path can
    be specified either in dotted notation (``xml.sax.saxutils.escape``)
    or with a colon as object delimiter (``xml.sax.saxutils:escape``).

    If the `silent` is True the return value will be `None` if the import
    fails.

    :return: imported object
  summary: Imports an object based on a string
  signatures:
  - kind: positional
    name: import_name
    default: null
    rest: false
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_context
  kind: function
  ns: jinja2.ext
  description: |-
    Pass the :class:`~jinja2.runtime.Context` as the first argument
    to the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    If only ``Context.eval_context`` is needed, use
    :func:`pass_eval_context`. If only ``Context.environment`` is
    needed, use :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``contextfunction`` and ``contextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.filters
  kind: module
  ns: null
  description: Built-in template filters used with the ``|`` operator.
  summary: Built-in template filters used with the ``|`` operator
  signatures: null
  inherits_from: null
- name: F
  kind: const
  ns: jinja2.filters
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FILTERS
  kind: const
  ns: jinja2.filters
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: K
  kind: const
  ns: jinja2.filters
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: jinja2.filters
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: async_select_or_reject
  kind: function
  ns: jinja2.filters
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - kind: positional
    name: modfunc
    default: null
    rest: false
  - kind: positional
    name: lookup_attr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: async_variant
  kind: function
  ns: jinja2.filters
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: normal_func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_aiter
  kind: function
  ns: jinja2.filters
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_await
  kind: function
  ns: jinja2.filters
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_to_list
  kind: function
  ns: jinja2.filters
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_attr
  kind: function
  ns: jinja2.filters
  description: |-
    Get an attribute of an object.  ``foo|attr("bar")`` works like
    ``foo.bar`` just that always an attribute is returned and items are not
    looked up.

    See :ref:`Notes on subscriptions <notes-on-subscriptions>` for more details.
  summary: Get an attribute of an object
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_batch
  kind: function
  ns: jinja2.filters
  description: |-
    A filter that batches items. It works pretty much like `slice`
    just the other way round. It returns a list of lists with the
    given number of items. If you provide a second parameter this
    is used to fill up missing items. See this example:

    .. sourcecode:: html+jinja

        <table>
        {%- for row in items|batch(3, '&nbsp;') %}
          <tr>
          {%- for column in row %}
            <td>{{ column }}</td>
          {%- endfor %}
          </tr>
        {%- endfor %}
        </table>
  summary: A filter that batches items
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: linecount
    default: null
    rest: false
  - kind: positional
    name: fill_with
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_capitalize
  kind: function
  ns: jinja2.filters
  description: |-
    Capitalize a value. The first character will be uppercase, all others
    lowercase.
  summary: Capitalize a value
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_center
  kind: function
  ns: jinja2.filters
  description: Centers the value in a field of a given width.
  summary: Centers the value in a field of a given width
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: width
    default: '80'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_default
  kind: function
  ns: jinja2.filters
  description: |-
    If the value is undefined it will return the passed default value,
    otherwise the value of the variable:

    .. sourcecode:: jinja

        {{ my_variable|default('my_variable is not defined') }}

    This will output the value of ``my_variable`` if the variable was
    defined, otherwise ``'my_variable is not defined'``. If you want
    to use default with variables that evaluate to false you have to
    set the second parameter to `true`:

    .. sourcecode:: jinja

        {{ ''|default('the string was empty', true) }}

    .. versionchanged:: 2.11
       It's now possible to configure the :class:`~jinja2.Environment` with
       :class:`~jinja2.ChainableUndefined` to make the `default` filter work
       on nested elements and attributes that may contain undefined values
       in the chain without getting an :exc:`~jinja2.UndefinedError`.
  summary: If the value is undefined it will return the passed default value,
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: default_value
    default: null
    rest: false
  - kind: positional
    name: boolean
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_dictsort
  kind: function
  ns: jinja2.filters
  description: |-
    Sort a dict and yield (key, value) pairs. Python dicts may not
    be in the order you want to display them in, so sort them first.

    .. sourcecode:: jinja

        {% for key, value in mydict|dictsort %}
            sort the dict by key, case insensitive

        {% for key, value in mydict|dictsort(reverse=true) %}
            sort the dict by key, case insensitive, reverse order

        {% for key, value in mydict|dictsort(true) %}
            sort the dict by key, case sensitive

        {% for key, value in mydict|dictsort(false, 'value') %}
            sort the dict by value, case insensitive
  summary: Sort a dict and yield (key, value) pairs
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: by
    default: key
    rest: false
  - kind: positional
    name: reverse
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_filesizeformat
  kind: function
  ns: jinja2.filters
  description: |-
    Format the value like a 'human-readable' file size (i.e. 13 kB,
    4.1 MB, 102 Bytes, etc).  Per default decimal prefixes are used (Mega,
    Giga, etc.), if the second parameter is set to `True` the binary
    prefixes are used (Mebi, Gibi).
  summary: Format the value like a 'human-readable' file size (i
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: binary
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_first
  kind: function
  ns: jinja2.filters
  description: Return the first item of a sequence.
  summary: Return the first item of a sequence
  signatures:
  - type: '?'
  inherits_from: null
- name: do_float
  kind: function
  ns: jinja2.filters
  description: |-
    Convert the value into a floating point number. If the
    conversion doesn't work it will return ``0.0``. You can
    override this default using the first parameter.
  summary: Convert the value into a floating point number
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: default
    default: '0.0'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_forceescape
  kind: function
  ns: jinja2.filters
  description: Enforce HTML escaping.  This will probably double escape variables.
  summary: Enforce HTML escaping
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_format
  kind: function
  ns: jinja2.filters
  description: |-
    Apply the given values to a `printf-style`_ format string, like
    ``string % values``.

    .. sourcecode:: jinja

        {{ "%s, %s!"|format(greeting, name) }}
        Hello, World!

    In most cases it should be more convenient and efficient to use the
    ``%`` operator or :meth:`str.format`.

    .. code-block:: text

        {{ "%s, %s!" % (greeting, name) }}
        {{ "{}, {}!".format(greeting, name) }}

    .. _printf-style: https://docs.python.org/library/stdtypes.html
        #printf-style-string-formatting
  summary: Apply the given values to a `printf-style`_ format string, like
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_groupby
  kind: function
  ns: jinja2.filters
  description: |-
    Group a sequence of objects by an attribute using Python's
    :func:`itertools.groupby`. The attribute can use dot notation for
    nested access, like ``"address.city"``. Unlike Python's ``groupby``,
    the values are sorted first so only one group is returned for each
    unique value.

    For example, a list of ``User`` objects with a ``city`` attribute
    can be rendered in groups. In this example, ``grouper`` refers to
    the ``city`` value of the group.

    .. sourcecode:: html+jinja

        <ul>{% for city, items in users|groupby("city") %}
          <li>{{ city }}
            <ul>{% for user in items %}
              <li>{{ user.name }}
            {% endfor %}</ul>
          </li>
        {% endfor %}</ul>

    ``groupby`` yields namedtuples of ``(grouper, list)``, which
    can be used instead of the tuple unpacking above. ``grouper`` is the
    value of the attribute, and ``list`` is the items with that value.

    .. sourcecode:: html+jinja

        <ul>{% for group in users|groupby("city") %}
          <li>{{ group.grouper }}: {{ group.list|join(", ") }}
        {% endfor %}</ul>

    You can specify a ``default`` value to use if an object in the list
    does not have the given attribute.

    .. sourcecode:: jinja

        <ul>{% for city, items in users|groupby("city", default="NY") %}
          <li>{{ city }}: {{ items|map(attribute="name")|join(", ") }}</li>
        {% endfor %}</ul>

    Like the :func:`~jinja-filters.sort` filter, sorting and grouping is
    case-insensitive by default. The ``key`` for each group will have
    the case of the first item in that group of values. For example, if
    a list of users has cities ``["CA", "NY", "ca"]``, the "CA" group
    will have two values. This can be disabled by passing
    ``case_sensitive=True``.

    .. versionchanged:: 3.1
        Added the ``case_sensitive`` parameter. Sorting and grouping is
        case-insensitive by default, matching other filters that do
        comparisons.

    .. versionchanged:: 3.0
        Added the ``default`` parameter.

    .. versionchanged:: 2.6
        The attribute supports dot notation for nested access.
  summary: Group a sequence of objects by an attribute using Python's
  signatures:
  - type: '?'
  inherits_from: null
- name: do_indent
  kind: function
  ns: jinja2.filters
  description: |-
    Return a copy of the string with each line indented by 4 spaces. The
    first line and blank lines are not indented by default.

    :param width: Number of spaces, or a string, to indent by.
    :param first: Don't skip indenting the first line.
    :param blank: Don't skip indenting empty lines.

    .. versionchanged:: 3.0
        ``width`` can be a string.

    .. versionchanged:: 2.10
        Blank lines are not indented by default.

        Rename the ``indentfirst`` argument to ``first``.
  summary: Return a copy of the string with each line indented by 4 spaces
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: width
    default: '4'
    rest: false
  - kind: positional
    name: first
    default: 'False'
    rest: false
  - kind: positional
    name: blank
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_int
  kind: function
  ns: jinja2.filters
  description: |-
    Convert the value into an integer. If the
    conversion doesn't work it will return ``0``. You can
    override this default using the first parameter. You
    can also override the default base (10) in the second
    parameter, which handles input with prefixes such as
    0b, 0o and 0x for bases 2, 8 and 16 respectively.
    The base is ignored for decimal numbers and non-string values.
  summary: Convert the value into an integer
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: default
    default: '0'
    rest: false
  - kind: positional
    name: base
    default: '10'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_items
  kind: function
  ns: jinja2.filters
  description: |-
    Return an iterator over the ``(key, value)`` items of a mapping.

    ``x|items`` is the same as ``x.items()``, except if ``x`` is
    undefined an empty iterator is returned.

    This filter is useful if you expect the template to be rendered with
    an implementation of Jinja in another programming language that does
    not have a ``.items()`` method on its mapping type.

    .. code-block:: html+jinja

        <dl>
        {% for key, value in my_dict|items %}
            <dt>{{ key }}
            <dd>{{ value }}
        {% endfor %}
        </dl>

    .. versionadded:: 3.1
  summary: Return an iterator over the ``(key, value)`` items of a mapping
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_join
  kind: function
  ns: jinja2.filters
  description: |-
    Return a string which is the concatenation of the strings in the
    sequence. The separator between elements is an empty string per
    default, you can define it with the optional parameter:

    .. sourcecode:: jinja

        {{ [1, 2, 3]|join('|') }}
            -> 1|2|3

        {{ [1, 2, 3]|join }}
            -> 123

    It is also possible to join certain attributes of an object:

    .. sourcecode:: jinja

        {{ users|join(', ', attribute='username') }}

    .. versionadded:: 2.6
       The `attribute` parameter was added.
  summary: Return a string which is the concatenation of the strings in the
  signatures:
  - type: '?'
  inherits_from: null
- name: do_last
  kind: function
  ns: jinja2.filters
  description: |-
    Return the last item of a sequence.

    Note: Does not work with generators. You may want to explicitly
    convert it to a list:

    .. sourcecode:: jinja

        {{ data | selectattr('name', '==', 'Jinja') | list | last }}
  summary: Return the last item of a sequence
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_list
  kind: function
  ns: jinja2.filters
  description: |-
    Convert the value into a list.  If it was a string the returned list
    will be a list of characters.
  summary: Convert the value into a list
  signatures:
  - type: '?'
  inherits_from: null
- name: do_lower
  kind: function
  ns: jinja2.filters
  description: Convert a value to lowercase.
  summary: Convert a value to lowercase
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_map
  kind: function
  ns: jinja2.filters
  description: |-
    Applies a filter on a sequence of objects or looks up an attribute.
    This is useful when dealing with lists of objects but you are really
    only interested in a certain value of it.

    The basic usage is mapping on an attribute.  Imagine you have a list
    of users but you are only interested in a list of usernames:

    .. sourcecode:: jinja

        Users on this page: {{ users|map(attribute='username')|join(', ') }}

    You can specify a ``default`` value to use if an object in the list
    does not have the given attribute.

    .. sourcecode:: jinja

        {{ users|map(attribute="username", default="Anonymous")|join(", ") }}

    Alternatively you can let it invoke a filter by passing the name of the
    filter and the arguments afterwards.  A good example would be applying a
    text conversion filter on a sequence:

    .. sourcecode:: jinja

        Users on this page: {{ titles|map('lower')|join(', ') }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u.username for u in users)
        (getattr(u, "username", "Anonymous") for u in users)
        (do_lower(x) for x in titles)

    .. versionchanged:: 2.11.0
        Added the ``default`` parameter.

    .. versionadded:: 2.7
  summary: Applies a filter on a sequence of objects or looks up an attribute
  signatures:
  - type: '?'
  inherits_from: null
- name: do_mark_safe
  kind: function
  ns: jinja2.filters
  description: |-
    Mark the value as safe which means that in an environment with automatic
    escaping enabled this variable will not be escaped.
  summary: Mark the value as safe which means that in an environment with automatic
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_mark_unsafe
  kind: function
  ns: jinja2.filters
  description: Mark a value as unsafe.  This is the reverse operation for :func:`safe`.
  summary: Mark a value as unsafe
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_max
  kind: function
  ns: jinja2.filters
  description: |-
    Return the largest item from the sequence.

    .. sourcecode:: jinja

        {{ [1, 2, 3]|max }}
            -> 3

    :param case_sensitive: Treat upper and lower case strings as distinct.
    :param attribute: Get the object with the max value of this attribute.
  summary: Return the largest item from the sequence
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_min
  kind: function
  ns: jinja2.filters
  description: |-
    Return the smallest item from the sequence.

    .. sourcecode:: jinja

        {{ [1, 2, 3]|min }}
            -> 1

    :param case_sensitive: Treat upper and lower case strings as distinct.
    :param attribute: Get the object with the min value of this attribute.
  summary: Return the smallest item from the sequence
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_pprint
  kind: function
  ns: jinja2.filters
  description: Pretty print a variable. Useful for debugging.
  summary: Pretty print a variable
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_random
  kind: function
  ns: jinja2.filters
  description: Return a random item from the sequence.
  summary: Return a random item from the sequence
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_reject
  kind: function
  ns: jinja2.filters
  description: |-
    Filters a sequence of objects by applying a test to each object,
    and rejecting the objects with the test succeeding.

    If no test is specified, each object will be evaluated as a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ numbers|reject("odd") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (n for n in numbers if not test_odd(n))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to each object,
  signatures:
  - type: '?'
  inherits_from: null
- name: do_rejectattr
  kind: function
  ns: jinja2.filters
  description: |-
    Filters a sequence of objects by applying a test to the specified
    attribute of each object, and rejecting the objects with the test
    succeeding.

    If no test is specified, the attribute's value will be evaluated as
    a boolean.

    .. sourcecode:: jinja

        {{ users|rejectattr("is_active") }}
        {{ users|rejectattr("email", "none") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u for user in users if not user.is_active)
        (u for user in users if not test_none(user.email))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to the specified
  signatures:
  - type: '?'
  inherits_from: null
- name: do_replace
  kind: function
  ns: jinja2.filters
  description: |-
    Return a copy of the value with all occurrences of a substring
    replaced with a new one. The first argument is the substring
    that should be replaced, the second is the replacement string.
    If the optional third argument ``count`` is given, only the first
    ``count`` occurrences are replaced:

    .. sourcecode:: jinja

        {{ "Hello World"|replace("Hello", "Goodbye") }}
            -> Goodbye World

        {{ "aaaaargh"|replace("a", "d'oh, ", 2) }}
            -> d'oh, d'oh, aaargh
  summary: Return a copy of the value with all occurrences of a substring
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: old
    default: null
    rest: false
  - kind: positional
    name: new
    default: null
    rest: false
  - kind: positional
    name: count
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_reverse
  kind: function
  ns: jinja2.filters
  description: |-
    Reverse the object or return an iterator that iterates over it the other
    way round.
  summary: Reverse the object or return an iterator that iterates over it the other
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_round
  kind: function
  ns: jinja2.filters
  description: |-
    Round the number to a given precision. The first
    parameter specifies the precision (default is ``0``), the
    second the rounding method:

    - ``'common'`` rounds either up or down
    - ``'ceil'`` always rounds up
    - ``'floor'`` always rounds down

    If you don't specify a method ``'common'`` is used.

    .. sourcecode:: jinja

        {{ 42.55|round }}
            -> 43.0
        {{ 42.55|round(1, 'floor') }}
            -> 42.5

    Note that even if rounded to 0 precision, a float is returned.  If
    you need a real integer, pipe it through `int`:

    .. sourcecode:: jinja

        {{ 42.55|round|int }}
            -> 43
  summary: Round the number to a given precision
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: precision
    default: '0'
    rest: false
  - kind: positional
    name: method
    default: common
    rest: false
  - type: '?'
  inherits_from: null
- name: do_select
  kind: function
  ns: jinja2.filters
  description: |-
    Filters a sequence of objects by applying a test to each object,
    and only selecting the objects with the test succeeding.

    If no test is specified, each object will be evaluated as a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ numbers|select("odd") }}
        {{ numbers|select("odd") }}
        {{ numbers|select("divisibleby", 3) }}
        {{ numbers|select("lessthan", 42) }}
        {{ strings|select("equalto", "mystring") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (n for n in numbers if test_odd(n))
        (n for n in numbers if test_divisibleby(n, 3))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to each object,
  signatures:
  - type: '?'
  inherits_from: null
- name: do_selectattr
  kind: function
  ns: jinja2.filters
  description: |-
    Filters a sequence of objects by applying a test to the specified
    attribute of each object, and only selecting the objects with the
    test succeeding.

    If no test is specified, the attribute's value will be evaluated as
    a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ users|selectattr("is_active") }}
        {{ users|selectattr("email", "none") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u for user in users if user.is_active)
        (u for user in users if test_none(user.email))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to the specified
  signatures:
  - type: '?'
  inherits_from: null
- name: do_slice
  kind: function
  ns: jinja2.filters
  description: |-
    Slice an iterator and return a list of lists containing
    those items. Useful if you want to create a div containing
    three ul tags that represent columns:

    .. sourcecode:: html+jinja

        <div class="columnwrapper">
          {%- for column in items|slice(3) %}
            <ul class="column-{{ loop.index }}">
            {%- for item in column %}
              <li>{{ item }}</li>
            {%- endfor %}
            </ul>
          {%- endfor %}
        </div>

    If you pass it a second argument it's used to fill missing
    values on the last iteration.
  summary: Slice an iterator and return a list of lists containing
  signatures:
  - type: '?'
  inherits_from: null
- name: do_sort
  kind: function
  ns: jinja2.filters
  description: |-
    Sort an iterable using Python's :func:`sorted`.

    .. sourcecode:: jinja

        {% for city in cities|sort %}
            ...
        {% endfor %}

    :param reverse: Sort descending instead of ascending.
    :param case_sensitive: When sorting strings, sort upper and lower
        case separately.
    :param attribute: When sorting objects or dicts, an attribute or
        key to sort by. Can use dot notation like ``"address.city"``.
        Can be a list of attributes like ``"age,name"``.

    The sort is stable, it does not change the relative order of
    elements that compare equal. This makes it is possible to chain
    sorts on different attributes and ordering.

    .. sourcecode:: jinja

        {% for user in users|sort(attribute="name")
            |sort(reverse=true, attribute="age") %}
            ...
        {% endfor %}

    As a shortcut to chaining when the direction is the same for all
    attributes, pass a comma separate list of attributes.

    .. sourcecode:: jinja

        {% for user in users|sort(attribute="age,name") %}
            ...
        {% endfor %}

    .. versionchanged:: 2.11.0
        The ``attribute`` parameter can be a comma separated list of
        attributes, e.g. ``"age,name"``.

    .. versionchanged:: 2.6
       The ``attribute`` parameter was added.
  summary: Sort an iterable using Python's :func:`sorted`
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: reverse
    default: 'False'
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_striptags
  kind: function
  ns: jinja2.filters
  description: Strip SGML/XML tags and replace adjacent whitespace by one space.
  summary: Strip SGML/XML tags and replace adjacent whitespace by one space
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_sum
  kind: function
  ns: jinja2.filters
  description: |-
    Returns the sum of a sequence of numbers plus the value of parameter
    'start' (which defaults to 0).  When the sequence is empty it returns
    start.

    It is also possible to sum up only certain attributes:

    .. sourcecode:: jinja

        Total: {{ items|sum(attribute='price') }}

    .. versionchanged:: 2.6
       The ``attribute`` parameter was added to allow summing up over
       attributes.  Also the ``start`` parameter was moved on to the right.
  summary: Returns the sum of a sequence of numbers plus the value of parameter
  signatures:
  - type: '?'
  inherits_from: null
- name: do_title
  kind: function
  ns: jinja2.filters
  description: |-
    Return a titlecased version of the value. I.e. words will start with
    uppercase letters, all remaining characters are lowercase.
  summary: Return a titlecased version of the value
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_tojson
  kind: function
  ns: jinja2.filters
  description: |-
    Serialize an object to a string of JSON, and mark it safe to
    render in HTML. This filter is only for use in HTML documents.

    The returned string is safe to render in HTML documents and
    ``<script>`` tags. The exception is in HTML attributes that are
    double quoted; either use single quotes or the ``|forceescape``
    filter.

    :param value: The object to serialize to JSON.
    :param indent: The ``indent`` parameter passed to ``dumps``, for
        pretty-printing the value.

    .. versionadded:: 2.9
  summary: Serialize an object to a string of JSON, and mark it safe to
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: indent
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_trim
  kind: function
  ns: jinja2.filters
  description: Strip leading and trailing characters, by default whitespace.
  summary: Strip leading and trailing characters, by default whitespace
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: chars
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_truncate
  kind: function
  ns: jinja2.filters
  description: |-
    Return a truncated copy of the string. The length is specified
    with the first parameter which defaults to ``255``. If the second
    parameter is ``true`` the filter will cut the text at length. Otherwise
    it will discard the last word. If the text was in fact
    truncated it will append an ellipsis sign (``"..."``). If you want a
    different ellipsis sign than ``"..."`` you can specify it using the
    third parameter. Strings that only exceed the length by the tolerance
    margin given in the fourth parameter will not be truncated.

    .. sourcecode:: jinja

        {{ "foo bar baz qux"|truncate(9) }}
            -> "foo..."
        {{ "foo bar baz qux"|truncate(9, True) }}
            -> "foo ba..."
        {{ "foo bar baz qux"|truncate(11) }}
            -> "foo bar baz qux"
        {{ "foo bar baz qux"|truncate(11, False, '...', 0) }}
            -> "foo bar..."

    The default leeway on newer Jinja versions is 5 and was 0 before but
    can be reconfigured globally.
  summary: Return a truncated copy of the string
  signatures:
  - kind: positional
    name: env
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: length
    default: '255'
    rest: false
  - kind: positional
    name: killwords
    default: 'False'
    rest: false
  - kind: positional
    name: end
    default: '...'
    rest: false
  - kind: positional
    name: leeway
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_unique
  kind: function
  ns: jinja2.filters
  description: |-
    Returns a list of unique items from the given iterable.

    .. sourcecode:: jinja

        {{ ['foo', 'bar', 'foobar', 'FooBar']|unique|list }}
            -> ['foo', 'bar', 'foobar']

    The unique items are yielded in the same order as their first occurrence in
    the iterable passed to the filter.

    :param case_sensitive: Treat upper and lower case strings as distinct.
    :param attribute: Filter objects with unique values for this attribute.
  summary: Returns a list of unique items from the given iterable
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_upper
  kind: function
  ns: jinja2.filters
  description: Convert a value to uppercase.
  summary: Convert a value to uppercase
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_urlencode
  kind: function
  ns: jinja2.filters
  description: |-
    Quote data for use in a URL path or query using UTF-8.

    Basic wrapper around :func:`urllib.parse.quote` when given a
    string, or :func:`urllib.parse.urlencode` for a dict or iterable.

    :param value: Data to quote. A string will be quoted directly. A
        dict or iterable of ``(key, value)`` pairs will be joined as a
        query string.

    When given a string, "/" is not quoted. HTTP servers treat "/" and
    "%2F" equivalently in paths. If you need quoted slashes, use the
    ``|replace("/", "%2F")`` filter.

    .. versionadded:: 2.7
  summary: Quote data for use in a URL path or query using UTF-8
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_urlize
  kind: function
  ns: jinja2.filters
  description: |-
    Convert URLs in text into clickable links.

    This may not recognize links in some situations. Usually, a more
    comprehensive formatter, such as a Markdown library, is a better
    choice.

    Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email
    addresses. Links with trailing punctuation (periods, commas, closing
    parentheses) and leading punctuation (opening parentheses) are
    recognized excluding the punctuation. Email addresses that include
    header fields are not recognized (for example,
    ``mailto:address@example.com?cc=copy@example.com``).

    :param value: Original text containing URLs to link.
    :param trim_url_limit: Shorten displayed URL values to this length.
    :param nofollow: Add the ``rel=nofollow`` attribute to links.
    :param target: Add the ``target`` attribute to links.
    :param rel: Add the ``rel`` attribute to links.
    :param extra_schemes: Recognize URLs that start with these schemes
        in addition to the default behavior. Defaults to
        ``env.policies["urlize.extra_schemes"]``, which defaults to no
        extra schemes.

    .. versionchanged:: 3.0
        The ``extra_schemes`` parameter was added.

    .. versionchanged:: 3.0
        Generate ``https://`` links for URLs without a scheme.

    .. versionchanged:: 3.0
        The parsing rules were updated. Recognize email addresses with
        or without the ``mailto:`` scheme. Validate IP addresses. Ignore
        parentheses and brackets in more cases.

    .. versionchanged:: 2.8
       The ``target`` parameter was added.
  summary: Convert URLs in text into clickable links
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: trim_url_limit
    default: None
    rest: false
  - kind: positional
    name: nofollow
    default: 'False'
    rest: false
  - kind: positional
    name: target
    default: None
    rest: false
  - kind: positional
    name: rel
    default: None
    rest: false
  - kind: positional
    name: extra_schemes
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: do_wordcount
  kind: function
  ns: jinja2.filters
  description: Count the words in that string.
  summary: Count the words in that string
  signatures:
  - kind: positional
    name: s
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: do_wordwrap
  kind: function
  ns: jinja2.filters
  description: |-
    Wrap a string to the given width. Existing newlines are treated
    as paragraphs to be wrapped separately.

    :param s: Original text to wrap.
    :param width: Maximum length of wrapped lines.
    :param break_long_words: If a word is longer than ``width``, break
        it across lines.
    :param break_on_hyphens: If a word contains hyphens, it may be split
        across lines.
    :param wrapstring: String to join each wrapped line. Defaults to
        :attr:`Environment.newline_sequence`.

    .. versionchanged:: 2.11
        Existing newlines are treated as paragraphs wrapped separately.

    .. versionchanged:: 2.11
        Added the ``break_on_hyphens`` parameter.

    .. versionchanged:: 2.7
        Added the ``wrapstring`` parameter.
  summary: Wrap a string to the given width
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: width
    default: '79'
    rest: false
  - kind: positional
    name: break_long_words
    default: 'True'
    rest: false
  - kind: positional
    name: wrapstring
    default: None
    rest: false
  - kind: positional
    name: break_on_hyphens
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: do_xmlattr
  kind: function
  ns: jinja2.filters
  description: |-
    Create an SGML/XML attribute string based on the items in a dict.

    **Values** that are neither ``none`` nor ``undefined`` are automatically
    escaped, safely allowing untrusted user input.

    User input should not be used as **keys** to this filter. If any key
    contains a space, ``/`` solidus, ``>`` greater-than sign, or ``=`` equals
    sign, this fails with a ``ValueError``. Regardless of this, user input
    should never be used as keys to this filter, or must be separately validated
    first.

    .. sourcecode:: html+jinja

        <ul{{ {'class': 'my_list', 'missing': none,
                'id': 'list-%d'|format(variable)}|xmlattr }}>
        ...
        </ul>

    Results in something like this:

    .. sourcecode:: html

        <ul class="my_list" id="list-42">
        ...
        </ul>

    As you can see it automatically prepends a space in front of the item
    if the filter returned something unless the second parameter is false.

    .. versionchanged:: 3.1.4
        Keys with ``/`` solidus, ``>`` greater-than sign, or ``=`` equals sign
        are not allowed.

    .. versionchanged:: 3.1.3
        Keys with spaces are not allowed.
  summary: Create an SGML/XML attribute string based on the items in a dict
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: d
    default: null
    rest: false
  - kind: positional
    name: autospace
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: htmlsafe_json_dumps
  kind: function
  ns: jinja2.filters
  description: |-
    Serialize an object to a string of JSON with :func:`json.dumps`,
    then replace HTML-unsafe characters with Unicode escapes and mark
    the result safe with :class:`~markupsafe.Markup`.

    This is available in templates as the ``|tojson`` filter.

    The following characters are escaped: ``<``, ``>``, ``&``, ``'``.

    The returned string is safe to render in HTML documents and
    ``<script>`` tags. The exception is in HTML attributes that are
    double quoted; either use single quotes or the ``|forceescape``
    filter.

    :param obj: The object to serialize to JSON.
    :param dumps: The ``dumps`` function to use. Defaults to
        ``env.policies["json.dumps_function"]``, which defaults to
        :func:`json.dumps`.
    :param kwargs: Extra arguments to pass to ``dumps``. Merged onto
        ``env.policies["json.dumps_kwargs"]``.

    .. versionchanged:: 3.0
        The ``dumper`` parameter is renamed to ``dumps``.

    .. versionadded:: 2.9
  summary: Serialize an object to a string of JSON with :func:`json
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: dumps
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ignore_case
  kind: function
  ns: jinja2.filters
  description: |-
    For use as a postprocessor for :func:`make_attrgetter`. Converts strings
    to lowercase and returns other types as-is.
  summary: For use as a postprocessor for :func:`make_attrgetter`
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: make_attrgetter
  kind: function
  ns: jinja2.filters
  description: |-
    Returns a callable that looks up the given attribute from a
    passed object with the rules of the environment.  Dots are allowed
    to access attributes of attributes.  Integer parts in paths are
    looked up as integers.
  summary: Returns a callable that looks up the given attribute from a
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - kind: positional
    name: postprocess
    default: None
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: make_multi_attrgetter
  kind: function
  ns: jinja2.filters
  description: |-
    Returns a callable that looks up the given comma separated
    attributes from a passed object with the rules of the environment.
    Dots are allowed to access attributes of each attribute.  Integer
    parts in paths are looked up as integers.

    The value returned by the returned callable is a list of extracted
    attribute values.

    Examples of attribute: "attr1,attr2", "attr1.inner1.0,attr2.inner2.0", etc.
  summary: Returns a callable that looks up the given comma separated
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - kind: positional
    name: postprocess
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_context
  kind: function
  ns: jinja2.filters
  description: |-
    Pass the :class:`~jinja2.runtime.Context` as the first argument
    to the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    If only ``Context.eval_context`` is needed, use
    :func:`pass_eval_context`. If only ``Context.environment`` is
    needed, use :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``contextfunction`` and ``contextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_environment
  kind: function
  ns: jinja2.filters
  description: |-
    Pass the :class:`~jinja2.Environment` as the first argument to
    the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    .. versionadded:: 3.0.0
        Replaces ``environmentfunction`` and ``environmentfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_eval_context
  kind: function
  ns: jinja2.filters
  description: |-
    Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
    to the decorated function when called while rendering a template.
    See :ref:`eval-context`.

    Can be used on functions, filters, and tests.

    If only ``EvalContext.environment`` is needed, use
    :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pformat
  kind: function
  ns: jinja2.filters
  description: Format an object using :func:`pprint.pformat`.
  summary: Format an object using :func:`pprint
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: prepare_map
  kind: function
  ns: jinja2.filters
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: prepare_select_or_reject
  kind: function
  ns: jinja2.filters
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - kind: positional
    name: modfunc
    default: null
    rest: false
  - kind: positional
    name: lookup_attr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: select_or_reject
  kind: function
  ns: jinja2.filters
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - kind: positional
    name: modfunc
    default: null
    rest: false
  - kind: positional
    name: lookup_attr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_first
  kind: function
  ns: jinja2.filters
  description: Return the first item of a sequence.
  summary: Return the first item of a sequence
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_groupby
  kind: function
  ns: jinja2.filters
  description: |-
    Group a sequence of objects by an attribute using Python's
    :func:`itertools.groupby`. The attribute can use dot notation for
    nested access, like ``"address.city"``. Unlike Python's ``groupby``,
    the values are sorted first so only one group is returned for each
    unique value.

    For example, a list of ``User`` objects with a ``city`` attribute
    can be rendered in groups. In this example, ``grouper`` refers to
    the ``city`` value of the group.

    .. sourcecode:: html+jinja

        <ul>{% for city, items in users|groupby("city") %}
          <li>{{ city }}
            <ul>{% for user in items %}
              <li>{{ user.name }}
            {% endfor %}</ul>
          </li>
        {% endfor %}</ul>

    ``groupby`` yields namedtuples of ``(grouper, list)``, which
    can be used instead of the tuple unpacking above. ``grouper`` is the
    value of the attribute, and ``list`` is the items with that value.

    .. sourcecode:: html+jinja

        <ul>{% for group in users|groupby("city") %}
          <li>{{ group.grouper }}: {{ group.list|join(", ") }}
        {% endfor %}</ul>

    You can specify a ``default`` value to use if an object in the list
    does not have the given attribute.

    .. sourcecode:: jinja

        <ul>{% for city, items in users|groupby("city", default="NY") %}
          <li>{{ city }}: {{ items|map(attribute="name")|join(", ") }}</li>
        {% endfor %}</ul>

    Like the :func:`~jinja-filters.sort` filter, sorting and grouping is
    case-insensitive by default. The ``key`` for each group will have
    the case of the first item in that group of values. For example, if
    a list of users has cities ``["CA", "NY", "ca"]``, the "CA" group
    will have two values. This can be disabled by passing
    ``case_sensitive=True``.

    .. versionchanged:: 3.1
        Added the ``case_sensitive`` parameter. Sorting and grouping is
        case-insensitive by default, matching other filters that do
        comparisons.

    .. versionchanged:: 3.0
        Added the ``default`` parameter.

    .. versionchanged:: 2.6
        The attribute supports dot notation for nested access.
  summary: Group a sequence of objects by an attribute using Python's
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_join
  kind: function
  ns: jinja2.filters
  description: |-
    Return a string which is the concatenation of the strings in the
    sequence. The separator between elements is an empty string per
    default, you can define it with the optional parameter:

    .. sourcecode:: jinja

        {{ [1, 2, 3]|join('|') }}
            -> 1|2|3

        {{ [1, 2, 3]|join }}
            -> 123

    It is also possible to join certain attributes of an object:

    .. sourcecode:: jinja

        {{ users|join(', ', attribute='username') }}

    .. versionadded:: 2.6
       The `attribute` parameter was added.
  summary: Return a string which is the concatenation of the strings in the
  signatures:
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: d
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_list
  kind: function
  ns: jinja2.filters
  description: |-
    Convert the value into a list.  If it was a string the returned list
    will be a list of characters.
  summary: Convert the value into a list
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_map
  kind: function
  ns: jinja2.filters
  description: |-
    Applies a filter on a sequence of objects or looks up an attribute.
    This is useful when dealing with lists of objects but you are really
    only interested in a certain value of it.

    The basic usage is mapping on an attribute.  Imagine you have a list
    of users but you are only interested in a list of usernames:

    .. sourcecode:: jinja

        Users on this page: {{ users|map(attribute='username')|join(', ') }}

    You can specify a ``default`` value to use if an object in the list
    does not have the given attribute.

    .. sourcecode:: jinja

        {{ users|map(attribute="username", default="Anonymous")|join(", ") }}

    Alternatively you can let it invoke a filter by passing the name of the
    filter and the arguments afterwards.  A good example would be applying a
    text conversion filter on a sequence:

    .. sourcecode:: jinja

        Users on this page: {{ titles|map('lower')|join(', ') }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u.username for u in users)
        (getattr(u, "username", "Anonymous") for u in users)
        (do_lower(x) for x in titles)

    .. versionchanged:: 2.11.0
        Added the ``default`` parameter.

    .. versionadded:: 2.7
  summary: Applies a filter on a sequence of objects or looks up an attribute
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_reject
  kind: function
  ns: jinja2.filters
  description: |-
    Filters a sequence of objects by applying a test to each object,
    and rejecting the objects with the test succeeding.

    If no test is specified, each object will be evaluated as a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ numbers|reject("odd") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (n for n in numbers if not test_odd(n))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to each object,
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_rejectattr
  kind: function
  ns: jinja2.filters
  description: |-
    Filters a sequence of objects by applying a test to the specified
    attribute of each object, and rejecting the objects with the test
    succeeding.

    If no test is specified, the attribute's value will be evaluated as
    a boolean.

    .. sourcecode:: jinja

        {{ users|rejectattr("is_active") }}
        {{ users|rejectattr("email", "none") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u for user in users if not user.is_active)
        (u for user in users if not test_none(user.email))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to the specified
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_select
  kind: function
  ns: jinja2.filters
  description: |-
    Filters a sequence of objects by applying a test to each object,
    and only selecting the objects with the test succeeding.

    If no test is specified, each object will be evaluated as a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ numbers|select("odd") }}
        {{ numbers|select("odd") }}
        {{ numbers|select("divisibleby", 3) }}
        {{ numbers|select("lessthan", 42) }}
        {{ strings|select("equalto", "mystring") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (n for n in numbers if test_odd(n))
        (n for n in numbers if test_divisibleby(n, 3))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to each object,
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_selectattr
  kind: function
  ns: jinja2.filters
  description: |-
    Filters a sequence of objects by applying a test to the specified
    attribute of each object, and only selecting the objects with the
    test succeeding.

    If no test is specified, the attribute's value will be evaluated as
    a boolean.

    Example usage:

    .. sourcecode:: jinja

        {{ users|selectattr("is_active") }}
        {{ users|selectattr("email", "none") }}

    Similar to a generator comprehension such as:

    .. code-block:: python

        (u for user in users if user.is_active)
        (u for user in users if test_none(user.email))

    .. versionadded:: 2.7
  summary: Filters a sequence of objects by applying a test to the specified
  signatures:
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_slice
  kind: function
  ns: jinja2.filters
  description: |-
    Slice an iterator and return a list of lists containing
    those items. Useful if you want to create a div containing
    three ul tags that represent columns:

    .. sourcecode:: html+jinja

        <div class="columnwrapper">
          {%- for column in items|slice(3) %}
            <ul class="column-{{ loop.index }}">
            {%- for item in column %}
              <li>{{ item }}</li>
            {%- endfor %}
            </ul>
          {%- endfor %}
        </div>

    If you pass it a second argument it's used to fill missing
    values on the last iteration.
  summary: Slice an iterator and return a list of lists containing
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: slices
    default: null
    rest: false
  - kind: positional
    name: fill_with
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: sync_do_sum
  kind: function
  ns: jinja2.filters
  description: |-
    Returns the sum of a sequence of numbers plus the value of parameter
    'start' (which defaults to 0).  When the sequence is empty it returns
    start.

    It is also possible to sum up only certain attributes:

    .. sourcecode:: jinja

        Total: {{ items|sum(attribute='price') }}

    .. versionchanged:: 2.6
       The ``attribute`` parameter was added to allow summing up over
       attributes.  Also the ``start`` parameter was moved on to the right.
  summary: Returns the sum of a sequence of numbers plus the value of parameter
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: iterable
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: None
    rest: false
  - kind: positional
    name: start
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: url_quote
  kind: function
  ns: jinja2.filters
  description: |-
    Quote a string for use in a URL using the given charset.

    :param obj: String or bytes to quote. Other types are converted to
        string then encoded to bytes using the given charset.
    :param charset: Encode text to bytes using this charset.
    :param for_qs: Quote "/" and use "+" for spaces.
  summary: Quote a string for use in a URL using the given charset
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: charset
    default: utf-8
    rest: false
  - kind: positional
    name: for_qs
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: urlize
  kind: function
  ns: jinja2.filters
  description: |-
    Convert URLs in text into clickable links.

    This may not recognize links in some situations. Usually, a more
    comprehensive formatter, such as a Markdown library, is a better
    choice.

    Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email
    addresses. Links with trailing punctuation (periods, commas, closing
    parentheses) and leading punctuation (opening parentheses) are
    recognized excluding the punctuation. Email addresses that include
    header fields are not recognized (for example,
    ``mailto:address@example.com?cc=copy@example.com``).

    :param text: Original text containing URLs to link.
    :param trim_url_limit: Shorten displayed URL values to this length.
    :param target: Add the ``target`` attribute to links.
    :param rel: Add the ``rel`` attribute to links.
    :param extra_schemes: Recognize URLs that start with these schemes
        in addition to the default behavior.

    .. versionchanged:: 3.0
        The ``extra_schemes`` parameter was added.

    .. versionchanged:: 3.0
        Generate ``https://`` links for URLs without a scheme.

    .. versionchanged:: 3.0
        The parsing rules were updated. Recognize email addresses with
        or without the ``mailto:`` scheme. Validate IP addresses. Ignore
        parentheses and brackets in more cases.
  summary: Convert URLs in text into clickable links
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: trim_url_limit
    default: None
    rest: false
  - kind: positional
    name: rel
    default: None
    rest: false
  - kind: positional
    name: target
    default: None
    rest: false
  - kind: positional
    name: extra_schemes
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.idtracking
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_ALIAS
  kind: const
  ns: jinja2.idtracking
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_PARAMETER
  kind: const
  ns: jinja2.idtracking
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_RESOLVE
  kind: const
  ns: jinja2.idtracking
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VAR_LOAD_UNDEFINED
  kind: const
  ns: jinja2.idtracking
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: find_symbols
  kind: function
  ns: jinja2.idtracking
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: nodes
    default: null
    rest: false
  - kind: positional
    name: parent_symbols
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: symbols_for_node
  kind: function
  ns: jinja2.idtracking
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: parent_symbols
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.lexer
  kind: module
  ns: null
  description: |-
    Implements a Jinja / Python combination lexer. The ``Lexer`` class
    is used to do some preprocessing. It filters out invalid operators like
    the bitshift operators we don't allow in templates. It separates
    template code and python code in expressions.
  summary: Implements a Jinja / Python combination lexer
  signatures: null
  inherits_from: null
- name: TOKEN_ADD
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_ASSIGN
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_BLOCK_BEGIN
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_BLOCK_END
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COLON
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COMMA
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COMMENT
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COMMENT_BEGIN
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_COMMENT_END
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_DATA
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_DIV
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_DOT
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_EOF
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_EQ
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_FLOAT
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_FLOORDIV
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_GT
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_GTEQ
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_INITIAL
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_INTEGER
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LBRACE
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LBRACKET
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINECOMMENT
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINECOMMENT_BEGIN
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINECOMMENT_END
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINESTATEMENT_BEGIN
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LINESTATEMENT_END
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LPAREN
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LT
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_LTEQ
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_MOD
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_MUL
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_NAME
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_NE
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_OPERATOR
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_PIPE
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_POW
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RAW_BEGIN
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RAW_END
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RBRACE
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RBRACKET
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_RPAREN
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_SEMICOLON
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_STRING
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_SUB
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_TILDE
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_VARIABLE_BEGIN
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_VARIABLE_END
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TOKEN_WHITESPACE
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: compile_rules
  kind: function
  ns: jinja2.lexer
  description: Compiles all the rules from the environment into a list of rules.
  summary: Compiles all the rules from the environment into a list of rules
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: count_newlines
  kind: function
  ns: jinja2.lexer
  description: |-
    Count the number of newline characters in the string.  This is
    useful for extensions that filter a stream.
  summary: Count the number of newline characters in the string
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: describe_token
  kind: function
  ns: jinja2.lexer
  description: Returns a description of the token.
  summary: Returns a description of the token
  signatures:
  - kind: positional
    name: token
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: describe_token_expr
  kind: function
  ns: jinja2.lexer
  description: Like `describe_token` but for token expressions.
  summary: Like `describe_token` but for token expressions
  signatures:
  - kind: positional
    name: expr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: float_re
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_lexer
  kind: function
  ns: jinja2.lexer
  description: Return a lexer which is probably cached.
  summary: Return a lexer which is probably cached
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ignore_if_empty
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ignored_tokens
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: integer_re
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: literal_eval
  kind: function
  ns: jinja2.lexer
  description: |-
    Evaluate an expression node or a string containing only a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
    sets, booleans, and None.

    Caution: A complex expression can overflow the C stack and cause a crash.
  summary: Evaluate an expression node or a string containing only a Python
  signatures:
  - kind: positional
    name: node_or_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: name_re
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: newline_re
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: operator_re
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: operators
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: reverse_operators
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: string_re
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: whitespace_re
  kind: const
  ns: jinja2.lexer
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: jinja2.loaders
  kind: module
  ns: null
  description: |-
    API and implementations for loading templates from different data
    sources.
  summary: API and implementations for loading templates from different data
  signatures: null
  inherits_from: null
- name: import_module
  kind: function
  ns: jinja2.loaders
  description: |-
    Import a module.

    The 'package' argument is required when performing a relative import. It
    specifies the package to use as the anchor point from which to resolve the
    relative import to an absolute import.
  summary: Import a module
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: package
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: internalcode
  kind: function
  ns: jinja2.loaders
  description: Marks the function as internally used
  summary: Marks the function as internally used
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_template_path
  kind: function
  ns: jinja2.loaders
  description: |-
    Split a path into segments and perform a sanity check.  If it detects
    '..' in the path it will raise a `TemplateNotFound` error.
  summary: Split a path into segments and perform a sanity check
  signatures:
  - kind: positional
    name: template
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.meta
  kind: module
  ns: null
  description: |-
    Functions that expose information about templates that might be
    interesting for introspection.
  summary: Functions that expose information about templates that might be
  signatures: null
  inherits_from: null
- name: TrackingCodeGenerator
  kind: class
  ns: jinja2.meta
  description: We abuse the code generator for introspection.
  summary: We abuse the code generator for introspection
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: TrackingCodeGenerator
  inherits_from:
  - <class 'jinja2.compiler.CodeGenerator'>
  - <class 'jinja2.visitor.NodeVisitor'>
- name: TrackingCodeGenerator.blockvisit
  kind: method
  ns: jinja2.meta
  description: |-
    Visit a list of nodes as block in a frame.  If the current frame
    is no buffer a dummy ``if 0: yield None`` is written automatically.
  summary: Visit a list of nodes as block in a frame
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: nodes
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.buffer
  kind: method
  ns: jinja2.meta
  description: Enable buffering for the frame from that point onwards.
  summary: Enable buffering for the frame from that point onwards
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.choose_async
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: async_value
    default: 'async '
    rest: false
  - kind: positional
    name: sync_value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.derive_context
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.dump_local_context
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.end_write
  kind: method
  ns: jinja2.meta
  description: End the writing process started by `start_write`.
  summary: End the writing process started by `start_write`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.enter_frame
  kind: method
  ns: jinja2.meta
  description: Remember all undeclared identifiers.
  summary: Remember all undeclared identifiers
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.fail
  kind: method
  ns: jinja2.meta
  description: Fail with a :exc:`TemplateAssertionError`.
  summary: Fail with a :exc:`TemplateAssertionError`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: msg
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.func
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.generic_visit
  kind: method
  ns: jinja2.meta
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.get_context_ref
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.get_resolve_func
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.get_visitor
  kind: method
  ns: jinja2.meta
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.indent
  kind: method
  ns: jinja2.meta
  description: Indent by one.
  summary: Indent by one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.leave_frame
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: with_python_scope
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.macro_body
  kind: method
  ns: jinja2.meta
  description: Dump the function def of a macro or call block.
  summary: Dump the function def of a macro or call block
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.macro_def
  kind: method
  ns: jinja2.meta
  description: Dump the macro definition for the def created by macro_body.
  summary: Dump the macro definition for the def created by macro_body
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: macro_ref
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.mark_parameter_stored
  kind: method
  ns: jinja2.meta
  description: |-
    Marks a parameter in the current parameter definitions as stored.
    This will skip the enforced undefined checks.
  summary: Marks a parameter in the current parameter definitions as stored
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.newline
  kind: method
  ns: jinja2.meta
  description: Add one or more newlines before the next write.
  summary: Add one or more newlines before the next write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - kind: positional
    name: extra
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.optimized
  kind: property
  ns: jinja2.meta
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TrackingCodeGenerator.outdent
  kind: method
  ns: jinja2.meta
  description: Outdent by step.
  summary: Outdent by step
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: step
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.parameter_is_undeclared
  kind: method
  ns: jinja2.meta
  description: Checks if a given target is an undeclared parameter.
  summary: Checks if a given target is an undeclared parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.pop_assign_tracking
  kind: method
  ns: jinja2.meta
  description: |-
    Pops the topmost level for assignment tracking and updates the
    context variables if necessary.
  summary: Pops the topmost level for assignment tracking and updates the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.pop_context_reference
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.pop_parameter_definitions
  kind: method
  ns: jinja2.meta
  description: Pops the current parameter definitions set.
  summary: Pops the current parameter definitions set
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.position
  kind: method
  ns: jinja2.meta
  description: Return a human readable position for the node.
  summary: Return a human readable position for the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.pull_dependencies
  kind: method
  ns: jinja2.meta
  description: |-
    Find all filter and test names used in the template and
    assign them to variables in the compiled namespace. Checking
    that the names are registered with the environment is done when
    compiling the Filter and Test nodes. If the node is in an If or
    CondExpr node, the check is done at runtime instead.

    .. versionchanged:: 3.0
        Filters and tests in If and CondExpr nodes are checked at
        runtime instead of compile time.
  summary: Find all filter and test names used in the template and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: nodes
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.push_assign_tracking
  kind: method
  ns: jinja2.meta
  description: Pushes a new layer for assignment tracking.
  summary: Pushes a new layer for assignment tracking
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.push_context_reference
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.push_parameter_definitions
  kind: method
  ns: jinja2.meta
  description: |-
    Pushes all parameter targets from the given frame into a local
    stack that permits tracking of yet to be assigned parameters.  In
    particular this enables the optimization from `visit_Name` to skip
    undefined expressions for parameters in macros as macros can reference
    otherwise unbound parameters.
  summary: Pushes all parameter targets from the given frame into a local
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.return_buffer_contents
  kind: method
  ns: jinja2.meta
  description: Return the buffer contents of the frame.
  summary: Return the buffer contents of the frame
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: force_unescaped
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.signature
  kind: method
  ns: jinja2.meta
  description: |-
    Writes a function call to the stream for the current node.
    A leading comma is added automatically.  The extra keyword
    arguments may not include python keywords otherwise a syntax
    error could occur.  The extra keyword arguments should be given
    as python dict.
  summary: Writes a function call to the stream for the current node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: extra_kwargs
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.simple_write
  kind: method
  ns: jinja2.meta
  description: Simple shortcut for start_write + write + end_write.
  summary: Simple shortcut for start_write + write + end_write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.start_write
  kind: method
  ns: jinja2.meta
  description: Yield or write into the frame buffer.
  summary: Yield or write into the frame buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.temporary_identifier
  kind: method
  ns: jinja2.meta
  description: Get a new unique identifier.
  summary: Get a new unique identifier
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit
  kind: method
  ns: jinja2.meta
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Add
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_And
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Assign
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_AssignBlock
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Block
  kind: method
  ns: jinja2.meta
  description: Call a block and register it for the template.
  summary: Call a block and register it for the template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Break
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Call
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_CallBlock
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Compare
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Concat
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_CondExpr
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Const
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_ContextReference
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Continue
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_DerivedContextReference
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Dict
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Div
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_EnvironmentAttribute
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_EvalContextModifier
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_ExprStmt
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Extends
  kind: method
  ns: jinja2.meta
  description: Calls the extender.
  summary: Calls the extender
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_ExtensionAttribute
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Filter
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_FilterBlock
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_FloorDiv
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_For
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_FromImport
  kind: method
  ns: jinja2.meta
  description: Visit named imports.
  summary: Visit named imports
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Getattr
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Getitem
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_If
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Import
  kind: method
  ns: jinja2.meta
  description: Visit regular imports.
  summary: Visit regular imports
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_ImportedName
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Include
  kind: method
  ns: jinja2.meta
  description: Handles includes.
  summary: Handles includes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_InternalName
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Keyword
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_List
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Macro
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_MarkSafe
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_MarkSafeIfAutoescape
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Mod
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Mul
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_NSRef
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Name
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Neg
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Not
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Operand
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Or
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Output
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_OverlayScope
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Pos
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Pow
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Scope
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_ScopedEvalContextModifier
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Slice
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Sub
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Template
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_TemplateData
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Test
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_Tuple
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.visit_With
  kind: method
  ns: jinja2.meta
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.write
  kind: method
  ns: jinja2.meta
  description: Don't write.
  summary: Don't write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: x
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.write_commons
  kind: method
  ns: jinja2.meta
  description: |-
    Writes a common preamble that is used by root and block functions.
    Primarily this sets up common local helpers and enforces a generator
    through a dead branch.
  summary: Writes a common preamble that is used by root and block functions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TrackingCodeGenerator.writeline
  kind: method
  ns: jinja2.meta
  description: Combination of newline and write.
  summary: Combination of newline and write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: x
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - kind: positional
    name: extra
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: find_referenced_templates
  kind: function
  ns: jinja2.meta
  description: |-
    Finds all the referenced templates from the AST.  This will return an
    iterator over all the hardcoded template extensions, inclusions and
    imports.  If dynamic inheritance or inclusion is used, `None` will be
    yielded.

    >>> from jinja2 import Environment, meta
    >>> env = Environment()
    >>> ast = env.parse('{% extends "layout.html" %}{% include helper %}')
    >>> list(meta.find_referenced_templates(ast))
    ['layout.html', None]

    This function is useful for dependency tracking.  For example if you want
    to rebuild parts of the website after a layout template has changed.
  summary: Finds all the referenced templates from the AST
  signatures:
  - kind: positional
    name: ast
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: find_undeclared_variables
  kind: function
  ns: jinja2.meta
  description: |-
    Returns a set of all variables in the AST that will be looked up from
    the context at runtime.  Because at compile time it's not known which
    variables will be used depending on the path the execution takes at
    runtime, all variables are returned.

    >>> from jinja2 import Environment, meta
    >>> env = Environment()
    >>> ast = env.parse('{% set foo = 42 %}{{ bar + foo }}')
    >>> meta.find_undeclared_variables(ast) == {'bar'}
    True

    .. admonition:: Implementation

       Internally the code generator is used for finding undeclared variables.
       This is good to know because the code generator might raise a
       :exc:`TemplateAssertionError` during compilation and as a matter of
       fact this function can currently raise that exception as well.
  summary: Returns a set of all variables in the AST that will be looked up from
  signatures:
  - kind: positional
    name: ast
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.nativetypes
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: GeneratorType
  kind: class
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - type: generator
  inherits_from: null
- name: GeneratorType.close
  kind: callable
  ns: jinja2.nativetypes
  description: close() -> raise GeneratorExit inside generator.
  summary: close() -> raise GeneratorExit inside generator
  signatures: null
  inherits_from: null
- name: GeneratorType.gi_code
  kind: property
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: GeneratorType.gi_frame
  kind: property
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: GeneratorType.gi_running
  kind: property
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: GeneratorType.gi_suspended
  kind: property
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: GeneratorType.gi_yieldfrom
  kind: property
  ns: jinja2.nativetypes
  description: object being iterated by yield from, or None
  summary: object being iterated by yield from, or None
  signatures: null
  inherits_from: null
- name: GeneratorType.send
  kind: callable
  ns: jinja2.nativetypes
  description: |-
    send(arg) -> send 'arg' into generator,
    return next yielded value or raise StopIteration.
  summary: send(arg) -> send 'arg' into generator,
  signatures: null
  inherits_from: null
- name: GeneratorType.throw
  kind: callable
  ns: jinja2.nativetypes
  description: |-
    throw(value)
    throw(type[,value[,tb]])

    Raise exception in generator, return next yielded value or raise
    StopIteration.
  summary: throw(value)
  signatures: null
  inherits_from: null
- name: NativeCodeGenerator
  kind: class
  ns: jinja2.nativetypes
  description: |-
    A code generator which renders Python types by not adding
    ``str()`` around output nodes.
  summary: A code generator which renders Python types by not adding
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: stream
    default: None
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - type: NativeCodeGenerator
  inherits_from:
  - <class 'jinja2.compiler.CodeGenerator'>
  - <class 'jinja2.visitor.NodeVisitor'>
- name: NativeCodeGenerator.blockvisit
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Visit a list of nodes as block in a frame.  If the current frame
    is no buffer a dummy ``if 0: yield None`` is written automatically.
  summary: Visit a list of nodes as block in a frame
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: nodes
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.buffer
  kind: method
  ns: jinja2.nativetypes
  description: Enable buffering for the frame from that point onwards.
  summary: Enable buffering for the frame from that point onwards
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.choose_async
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: async_value
    default: 'async '
    rest: false
  - kind: positional
    name: sync_value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.derive_context
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.dump_local_context
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.end_write
  kind: method
  ns: jinja2.nativetypes
  description: End the writing process started by `start_write`.
  summary: End the writing process started by `start_write`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.enter_frame
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.fail
  kind: method
  ns: jinja2.nativetypes
  description: Fail with a :exc:`TemplateAssertionError`.
  summary: Fail with a :exc:`TemplateAssertionError`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: msg
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.func
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.generic_visit
  kind: method
  ns: jinja2.nativetypes
  description: Called if no explicit visitor function exists for a node.
  summary: Called if no explicit visitor function exists for a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.get_context_ref
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.get_resolve_func
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.get_visitor
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Return the visitor function for this node or `None` if no visitor
    exists for this node.  In that case the generic visit function is
    used instead.
  summary: Return the visitor function for this node or `None` if no visitor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.indent
  kind: method
  ns: jinja2.nativetypes
  description: Indent by one.
  summary: Indent by one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.leave_frame
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: with_python_scope
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.macro_body
  kind: method
  ns: jinja2.nativetypes
  description: Dump the function def of a macro or call block.
  summary: Dump the function def of a macro or call block
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.macro_def
  kind: method
  ns: jinja2.nativetypes
  description: Dump the macro definition for the def created by macro_body.
  summary: Dump the macro definition for the def created by macro_body
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: macro_ref
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.mark_parameter_stored
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Marks a parameter in the current parameter definitions as stored.
    This will skip the enforced undefined checks.
  summary: Marks a parameter in the current parameter definitions as stored
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.newline
  kind: method
  ns: jinja2.nativetypes
  description: Add one or more newlines before the next write.
  summary: Add one or more newlines before the next write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - kind: positional
    name: extra
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.optimized
  kind: property
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NativeCodeGenerator.outdent
  kind: method
  ns: jinja2.nativetypes
  description: Outdent by step.
  summary: Outdent by step
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: step
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.parameter_is_undeclared
  kind: method
  ns: jinja2.nativetypes
  description: Checks if a given target is an undeclared parameter.
  summary: Checks if a given target is an undeclared parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.pop_assign_tracking
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Pops the topmost level for assignment tracking and updates the
    context variables if necessary.
  summary: Pops the topmost level for assignment tracking and updates the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.pop_context_reference
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.pop_parameter_definitions
  kind: method
  ns: jinja2.nativetypes
  description: Pops the current parameter definitions set.
  summary: Pops the current parameter definitions set
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.position
  kind: method
  ns: jinja2.nativetypes
  description: Return a human readable position for the node.
  summary: Return a human readable position for the node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.pull_dependencies
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Find all filter and test names used in the template and
    assign them to variables in the compiled namespace. Checking
    that the names are registered with the environment is done when
    compiling the Filter and Test nodes. If the node is in an If or
    CondExpr node, the check is done at runtime instead.

    .. versionchanged:: 3.0
        Filters and tests in If and CondExpr nodes are checked at
        runtime instead of compile time.
  summary: Find all filter and test names used in the template and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: nodes
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.push_assign_tracking
  kind: method
  ns: jinja2.nativetypes
  description: Pushes a new layer for assignment tracking.
  summary: Pushes a new layer for assignment tracking
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.push_context_reference
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.push_parameter_definitions
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Pushes all parameter targets from the given frame into a local
    stack that permits tracking of yet to be assigned parameters.  In
    particular this enables the optimization from `visit_Name` to skip
    undefined expressions for parameters in macros as macros can reference
    otherwise unbound parameters.
  summary: Pushes all parameter targets from the given frame into a local
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.return_buffer_contents
  kind: method
  ns: jinja2.nativetypes
  description: Return the buffer contents of the frame.
  summary: Return the buffer contents of the frame
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: force_unescaped
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.signature
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Writes a function call to the stream for the current node.
    A leading comma is added automatically.  The extra keyword
    arguments may not include python keywords otherwise a syntax
    error could occur.  The extra keyword arguments should be given
    as python dict.
  summary: Writes a function call to the stream for the current node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: extra_kwargs
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.simple_write
  kind: method
  ns: jinja2.nativetypes
  description: Simple shortcut for start_write + write + end_write.
  summary: Simple shortcut for start_write + write + end_write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.start_write
  kind: method
  ns: jinja2.nativetypes
  description: Yield or write into the frame buffer.
  summary: Yield or write into the frame buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.temporary_identifier
  kind: method
  ns: jinja2.nativetypes
  description: Get a new unique identifier.
  summary: Get a new unique identifier
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit
  kind: method
  ns: jinja2.nativetypes
  description: Visit a node.
  summary: Visit a node
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Add
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_And
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Assign
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_AssignBlock
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Block
  kind: method
  ns: jinja2.nativetypes
  description: Call a block and register it for the template.
  summary: Call a block and register it for the template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Break
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Call
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_CallBlock
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Compare
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Concat
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_CondExpr
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Const
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_ContextReference
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Continue
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_DerivedContextReference
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Dict
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Div
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_EnvironmentAttribute
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_EvalContextModifier
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_ExprStmt
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Extends
  kind: method
  ns: jinja2.nativetypes
  description: Calls the extender.
  summary: Calls the extender
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_ExtensionAttribute
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Filter
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_FilterBlock
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_FloorDiv
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_For
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_FromImport
  kind: method
  ns: jinja2.nativetypes
  description: Visit named imports.
  summary: Visit named imports
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Getattr
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Getitem
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_If
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Import
  kind: method
  ns: jinja2.nativetypes
  description: Visit regular imports.
  summary: Visit regular imports
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_ImportedName
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Include
  kind: method
  ns: jinja2.nativetypes
  description: Handles includes.
  summary: Handles includes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_InternalName
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Keyword
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_List
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Macro
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_MarkSafe
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_MarkSafeIfAutoescape
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Mod
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Mul
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_NSRef
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Name
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Neg
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Not
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Operand
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Or
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Output
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_OverlayScope
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Pos
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Pow
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Scope
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_ScopedEvalContextModifier
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Slice
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Sub
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Template
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_TemplateData
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Test
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_Tuple
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.visit_With
  kind: method
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: frame
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.write
  kind: method
  ns: jinja2.nativetypes
  description: Write a string into the output stream.
  summary: Write a string into the output stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: x
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.write_commons
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Writes a common preamble that is used by root and block functions.
    Primarily this sets up common local helpers and enforces a generator
    through a dead branch.
  summary: Writes a common preamble that is used by root and block functions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeCodeGenerator.writeline
  kind: method
  ns: jinja2.nativetypes
  description: Combination of newline and write.
  summary: Combination of newline and write
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: x
    default: null
    rest: false
  - kind: positional
    name: node
    default: None
    rest: false
  - kind: positional
    name: extra
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment
  kind: class
  ns: jinja2.nativetypes
  description: An environment that renders templates to native Python types.
  summary: An environment that renders templates to native Python types
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: block_start_string
    default: '{%'
    rest: false
  - kind: positional
    name: block_end_string
    default: '%}'
    rest: false
  - kind: positional
    name: variable_start_string
    default: '{{'
    rest: false
  - kind: positional
    name: variable_end_string
    default: '}}'
    rest: false
  - kind: positional
    name: comment_start_string
    default: '{#'
    rest: false
  - kind: positional
    name: comment_end_string
    default: '#}'
    rest: false
  - kind: positional
    name: line_statement_prefix
    default: None
    rest: false
  - kind: positional
    name: line_comment_prefix
    default: None
    rest: false
  - kind: positional
    name: trim_blocks
    default: 'False'
    rest: false
  - kind: positional
    name: lstrip_blocks
    default: 'False'
    rest: false
  - kind: positional
    name: newline_sequence
    default: |2+

    rest: false
  - kind: positional
    name: keep_trailing_newline
    default: 'False'
    rest: false
  - kind: positional
    name: extensions
    default: ()
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - kind: positional
    name: undefined
    default: <class 'jinja2.runtime.Undefined'>
    rest: false
  - kind: positional
    name: finalize
    default: None
    rest: false
  - kind: positional
    name: autoescape
    default: 'False'
    rest: false
  - kind: positional
    name: loader
    default: None
    rest: false
  - kind: positional
    name: cache_size
    default: '400'
    rest: false
  - kind: positional
    name: auto_reload
    default: 'True'
    rest: false
  - kind: positional
    name: bytecode_cache
    default: None
    rest: false
  - kind: positional
    name: enable_async
    default: 'False'
    rest: false
  - type: NativeEnvironment
  inherits_from:
  - <class 'jinja2.environment.Environment'>
- name: NativeEnvironment.add_extension
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Adds an extension after the environment was created.

    .. versionadded:: 2.5
  summary: Adds an extension after the environment was created
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: extension
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.call_filter
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Invoke a filter on a value the same way the compiler does.

    This might return a coroutine if the filter is running from an
    environment in async mode and the filter supports async
    execution. It's your responsibility to await this if needed.

    .. versionadded:: 2.7
  summary: Invoke a filter on a value the same way the compiler does
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: context
    default: None
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.call_test
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Invoke a test on a value the same way the compiler does.

    This might return a coroutine if the test is running from an
    environment in async mode and the test supports async execution.
    It's your responsibility to await this if needed.

    .. versionchanged:: 3.0
        Tests support ``@pass_context``, etc. decorators. Added
        the ``context`` and ``eval_ctx`` parameters.

    .. versionadded:: 2.7
  summary: Invoke a test on a value the same way the compiler does
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: context
    default: None
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.compile
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Compile a node or template source code.  The `name` parameter is
    the load name of the template after it was joined using
    :meth:`join_path` if necessary, not the filename on the file system.
    the `filename` parameter is the estimated filename of the template on
    the file system.  If the template came from a database or memory this
    can be omitted.

    The return value of this method is a python code object.  If the `raw`
    parameter is `True` the return value will be a string with python
    code equivalent to the bytecode returned otherwise.  This method is
    mainly used internally.

    `defer_init` is use internally to aid the module code generator.  This
    causes the generated code to be able to import without the global
    environment variable to be set.

    .. versionadded:: 2.4
       `defer_init` parameter added.
  summary: Compile a node or template source code
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - kind: positional
    name: raw
    default: 'False'
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.compile_expression
  kind: method
  ns: jinja2.nativetypes
  description: |-
    A handy helper method that returns a callable that accepts keyword
    arguments that appear as variables in the expression.  If called it
    returns the result of the expression.

    This is useful if applications want to use the same rules as Jinja
    in template "configuration files" or similar situations.

    Example usage:

    >>> env = Environment()
    >>> expr = env.compile_expression('foo == 42')
    >>> expr(foo=23)
    False
    >>> expr(foo=42)
    True

    Per default the return value is converted to `None` if the
    expression returns an undefined value.  This can be changed
    by setting `undefined_to_none` to `False`.

    >>> env.compile_expression('var')() is None
    True
    >>> env.compile_expression('var', undefined_to_none=False)()
    Undefined

    .. versionadded:: 2.1
  summary: A handy helper method that returns a callable that accepts keyword
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: undefined_to_none
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.compile_templates
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Finds all the templates the loader can find, compiles them
    and stores them in `target`.  If `zip` is `None`, instead of in a
    zipfile, the templates will be stored in a directory.
    By default a deflate zip algorithm is used. To switch to
    the stored algorithm, `zip` can be set to ``'stored'``.

    `extensions` and `filter_func` are passed to :meth:`list_templates`.
    Each template returned will be compiled to the target folder or
    zipfile.

    By default template compilation errors are ignored.  In case a
    log function is provided, errors are logged.  If you want template
    syntax errors to abort the compilation you can set `ignore_errors`
    to `False` and you will get an exception on syntax errors.

    .. versionadded:: 2.4
  summary: Finds all the templates the loader can find, compiles them
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: None
    rest: false
  - kind: positional
    name: filter_func
    default: None
    rest: false
  - kind: positional
    name: zip
    default: deflated
    rest: false
  - kind: positional
    name: log_function
    default: None
    rest: false
  - kind: positional
    name: ignore_errors
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.concat
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Return a native Python type from the list of compiled nodes. If
    the result is a single node, its value is returned. Otherwise, the
    nodes are concatenated as strings. If the result can be parsed with
    :func:`ast.literal_eval`, the parsed value is returned. Otherwise,
    the string is returned.

    :param values: Iterable of outputs to concatenate.
  summary: Return a native Python type from the list of compiled nodes
  signatures:
  - kind: positional
    name: values
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.extend
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Add the items to the instance of the environment if they do not exist
    yet.  This is used by :ref:`extensions <writing-extensions>` to register
    callbacks and configuration values without breaking inheritance.
  summary: Add the items to the instance of the environment if they do not exist
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.from_string
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Load a template from a source string without using
    :attr:`loader`.

    :param source: Jinja source to compile into a template.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.
    :param template_class: Return an instance of this
        :class:`Template` class.
  summary: Load a template from a source string without using
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - kind: positional
    name: template_class
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.get_or_select_template
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Use :meth:`select_template` if an iterable of template names
    is given, or :meth:`get_template` if one name is given.

    .. versionadded:: 2.3
  summary: Use :meth:`select_template` if an iterable of template names
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template_name_or_list
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.get_template
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Load a template by name with :attr:`loader` and return a
    :class:`Template`. If the template does not exist a
    :exc:`TemplateNotFound` exception is raised.

    :param name: Name of the template to load. When loading
        templates from the filesystem, "/" is used as the path
        separator, even on Windows.
    :param parent: The name of the parent template importing this
        template. :meth:`join_path` can be used to implement name
        transformations with this.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.

    .. versionchanged:: 3.0
        If a template is loaded from cache, ``globals`` will update
        the template's globals instead of ignoring the new values.

    .. versionchanged:: 2.4
        If ``name`` is a :class:`Template` object it is returned
        unchanged.
  summary: Load a template by name with :attr:`loader` and return a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.getattr
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Get an item or attribute of an object but prefer the attribute.
    Unlike :meth:`getitem` the attribute *must* be a string.
  summary: Get an item or attribute of an object but prefer the attribute
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.getitem
  kind: method
  ns: jinja2.nativetypes
  description: Get an item or attribute of an object but prefer the item.
  summary: Get an item or attribute of an object but prefer the item
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: argument
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.handle_exception
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Exception handling helper.  This is used internally to either raise
    rewritten exceptions or return a rendered traceback for the template.
  summary: Exception handling helper
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.iter_extensions
  kind: method
  ns: jinja2.nativetypes
  description: Iterates over the extensions by priority.
  summary: Iterates over the extensions by priority
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.join_path
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Join a template with the parent.  By default all the lookups are
    relative to the loader root so this method returns the `template`
    parameter unchanged, but if the paths should be relative to the
    parent template, this function can be used to calculate the real
    template name.

    Subclasses may override this method and implement template path
    joining here.
  summary: Join a template with the parent
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - kind: positional
    name: parent
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.lex
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Lex the given sourcecode and return a generator that yields
    tokens as tuples in the form ``(lineno, token_type, value)``.
    This can be useful for :ref:`extension development <writing-extensions>`
    and debugging templates.

    This does not perform preprocessing.  If you want the preprocessing
    of the extensions to be applied you have to filter source through
    the :meth:`preprocess` method.
  summary: Lex the given sourcecode and return a generator that yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.lexer
  kind: property
  ns: jinja2.nativetypes
  description: The lexer for this environment.
  summary: The lexer for this environment
  signatures: null
  inherits_from: null
- name: NativeEnvironment.linked_to
  kind: property
  ns: jinja2.nativetypes
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NativeEnvironment.list_templates
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Returns a list of templates for this environment.  This requires
    that the loader supports the loader's
    :meth:`~BaseLoader.list_templates` method.

    If there are other files in the template folder besides the
    actual templates, the returned list can be filtered.  There are two
    ways: either `extensions` is set to a list of file extensions for
    templates, or a `filter_func` can be provided which is a callable that
    is passed a template name and should return `True` if it should end up
    in the result list.

    If the loader does not support that, a :exc:`TypeError` is raised.

    .. versionadded:: 2.4
  summary: Returns a list of templates for this environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: None
    rest: false
  - kind: positional
    name: filter_func
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.make_globals
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Make the globals map for a template. Any given template
    globals overlay the environment :attr:`globals`.

    Returns a :class:`collections.ChainMap`. This allows any changes
    to a template's globals to only affect that template, while
    changes to the environment's globals are still reflected.
    However, avoid modifying any globals after a template is loaded.

    :param d: Dict of template-specific globals.

    .. versionchanged:: 3.0
        Use :class:`collections.ChainMap` to always prevent mutating
        environment globals.
  summary: Make the globals map for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: d
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.overlay
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Create a new overlay environment that shares all the data with the
    current environment except for cache and the overridden attributes.
    Extensions cannot be removed for an overlayed environment.  An overlayed
    environment automatically gets all the extensions of the environment it
    is linked to plus optional extra extensions.

    Creating overlays should happen after the initial environment was set
    up completely.  Not all attributes are truly linked, some are just
    copied over so modifications on the original environment may not shine
    through.

    .. versionchanged:: 3.1.2
        Added the ``newline_sequence``,, ``keep_trailing_newline``,
        and ``enable_async`` parameters to match ``__init__``.
  summary: Create a new overlay environment that shares all the data with the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: block_start_string
    default: missing
    rest: false
  - kind: positional
    name: block_end_string
    default: missing
    rest: false
  - kind: positional
    name: variable_start_string
    default: missing
    rest: false
  - kind: positional
    name: variable_end_string
    default: missing
    rest: false
  - kind: positional
    name: comment_start_string
    default: missing
    rest: false
  - kind: positional
    name: comment_end_string
    default: missing
    rest: false
  - kind: positional
    name: line_statement_prefix
    default: missing
    rest: false
  - kind: positional
    name: line_comment_prefix
    default: missing
    rest: false
  - kind: positional
    name: trim_blocks
    default: missing
    rest: false
  - kind: positional
    name: lstrip_blocks
    default: missing
    rest: false
  - kind: positional
    name: newline_sequence
    default: missing
    rest: false
  - kind: positional
    name: keep_trailing_newline
    default: missing
    rest: false
  - kind: positional
    name: extensions
    default: missing
    rest: false
  - kind: positional
    name: optimized
    default: missing
    rest: false
  - kind: positional
    name: undefined
    default: missing
    rest: false
  - kind: positional
    name: finalize
    default: missing
    rest: false
  - kind: positional
    name: autoescape
    default: missing
    rest: false
  - kind: positional
    name: loader
    default: missing
    rest: false
  - kind: positional
    name: cache_size
    default: missing
    rest: false
  - kind: positional
    name: auto_reload
    default: missing
    rest: false
  - kind: positional
    name: bytecode_cache
    default: missing
    rest: false
  - kind: positional
    name: enable_async
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.overlayed
  kind: property
  ns: jinja2.nativetypes
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: NativeEnvironment.parse
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Parse the sourcecode and return the abstract syntax tree.  This
    tree of nodes is used by the compiler to convert the template into
    executable source- or bytecode.  This is useful for debugging or to
    extract information from templates.

    If you are :ref:`developing Jinja extensions <writing-extensions>`
    this gives you a good overview of the node tree generated.
  summary: Parse the sourcecode and return the abstract syntax tree
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.preprocess
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Preprocesses the source with all extensions.  This is automatically
    called for all parsing and compiling methods but *not* for :meth:`lex`
    because there you usually only want the actual source tokenized.
  summary: Preprocesses the source with all extensions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.sandboxed
  kind: property
  ns: jinja2.nativetypes
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: NativeEnvironment.select_template
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Like :meth:`get_template`, but tries loading multiple names.
    If none of the names can be loaded a :exc:`TemplatesNotFound`
    exception is raised.

    :param names: List of template names to try loading in order.
    :param parent: The name of the parent template importing this
        template. :meth:`join_path` can be used to implement name
        transformations with this.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.

    .. versionchanged:: 3.0
        If a template is loaded from cache, ``globals`` will update
        the template's globals instead of ignoring the new values.

    .. versionchanged:: 2.11
        If ``names`` is :class:`Undefined`, an :exc:`UndefinedError`
        is raised instead. If no templates were found and ``names``
        contains :class:`Undefined`, the message is more helpful.

    .. versionchanged:: 2.4
        If ``names`` contains a :class:`Template` object it is
        returned unchanged.

    .. versionadded:: 2.3
  summary: Like :meth:`get_template`, but tries loading multiple names
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: names
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.shared
  kind: property
  ns: jinja2.nativetypes
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: NativeEnvironment.template_class
  kind: class
  ns: jinja2.nativetypes
  description: |-
    A compiled template that can be rendered.

    Use the methods on :class:`Environment` to create or load templates.
    The environment is used to configure how templates are compiled and
    behave.

    It is also possible to create a template object directly. This is
    not usually recommended. The constructor takes most of the same
    arguments as :class:`Environment`. All templates created with the
    same environment arguments share the same ephemeral ``Environment``
    instance behind the scenes.

    A template object should be considered immutable. Modifications on
    the object are not supported.
  summary: A compiled template that can be rendered
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: block_start_string
    default: '{%'
    rest: false
  - kind: positional
    name: block_end_string
    default: '%}'
    rest: false
  - kind: positional
    name: variable_start_string
    default: '{{'
    rest: false
  - kind: positional
    name: variable_end_string
    default: '}}'
    rest: false
  - kind: positional
    name: comment_start_string
    default: '{#'
    rest: false
  - kind: positional
    name: comment_end_string
    default: '#}'
    rest: false
  - kind: positional
    name: line_statement_prefix
    default: None
    rest: false
  - kind: positional
    name: line_comment_prefix
    default: None
    rest: false
  - kind: positional
    name: trim_blocks
    default: 'False'
    rest: false
  - kind: positional
    name: lstrip_blocks
    default: 'False'
    rest: false
  - kind: positional
    name: newline_sequence
    default: |2+

    rest: false
  - kind: positional
    name: keep_trailing_newline
    default: 'False'
    rest: false
  - kind: positional
    name: extensions
    default: ()
    rest: false
  - kind: positional
    name: optimized
    default: 'True'
    rest: false
  - kind: positional
    name: undefined
    default: <class 'jinja2.runtime.Undefined'>
    rest: false
  - kind: positional
    name: finalize
    default: None
    rest: false
  - kind: positional
    name: autoescape
    default: 'False'
    rest: false
  - kind: positional
    name: enable_async
    default: 'False'
    rest: false
  - type: NativeTemplate
  inherits_from:
  - <class 'jinja2.environment.Template'>
- name: NativeEnvironment.template_class.debug_info
  kind: property
  ns: jinja2.nativetypes
  description: The debug info mapping.
  summary: The debug info mapping
  signatures: null
  inherits_from: null
- name: NativeEnvironment.template_class.from_code
  kind: function
  ns: jinja2.nativetypes
  description: |-
    Creates a template object from compiled code and the globals.  This
    is used by the loaders and environment to create a template object.
  summary: Creates a template object from compiled code and the globals
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: code
    default: null
    rest: false
  - kind: positional
    name: globals
    default: null
    rest: false
  - kind: positional
    name: uptodate
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.from_module_dict
  kind: function
  ns: jinja2.nativetypes
  description: |-
    Creates a template object from a module.  This is used by the
    module loader to create a template object.

    .. versionadded:: 2.4
  summary: Creates a template object from a module
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: module_dict
    default: null
    rest: false
  - kind: positional
    name: globals
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.generate
  kind: method
  ns: jinja2.nativetypes
  description: |-
    For very large templates it can be useful to not render the whole
    template at once but evaluate each statement after another and yield
    piece for piece.  This method basically does exactly that and returns
    a generator that yields one item after another as strings.

    It accepts the same arguments as :meth:`render`.
  summary: For very large templates it can be useful to not render the whole
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.generate_async
  kind: method
  ns: jinja2.nativetypes
  description: |-
    An async version of :meth:`generate`.  Works very similarly but
    returns an async iterator instead.
  summary: An async version of :meth:`generate`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.get_corresponding_lineno
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Return the source line number of a line number in the
    generated bytecode as they are not in sync.
  summary: Return the source line number of a line number in the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lineno
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.is_up_to_date
  kind: property
  ns: jinja2.nativetypes
  description: If this variable is `False` there is a newer version available.
  summary: If this variable is `False` there is a newer version available
  signatures: null
  inherits_from: null
- name: NativeEnvironment.template_class.make_module
  kind: method
  ns: jinja2.nativetypes
  description: |-
    This method works like the :attr:`module` attribute when called
    without arguments but it will evaluate the template on every call
    rather than caching it.  It's also possible to provide
    a dict which is then used as context.  The arguments are the same
    as for the :meth:`new_context` method.
  summary: This method works like the :attr:`module` attribute when called
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.make_module_async
  kind: method
  ns: jinja2.nativetypes
  description: |-
    As template module creation can invoke template code for
    asynchronous executions this method must be used instead of the
    normal :meth:`make_module` one.  Likewise the module attribute
    becomes unavailable in async mode.
  summary: As template module creation can invoke template code for
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.module
  kind: property
  ns: jinja2.nativetypes
  description: |-
    The template as module.  This is used for imports in the
    template runtime but is also useful if one wants to access
    exported template variables from the Python layer:

    >>> t = Template('{% macro foo() %}42{% endmacro %}23')
    >>> str(t.module)
    '23'
    >>> t.module.foo() == u'42'
    True

    This attribute is not available if async mode is enabled.
  summary: The template as module
  signatures: null
  inherits_from: null
- name: NativeEnvironment.template_class.new_context
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Create a new :class:`Context` for this template.  The vars
    provided will be passed to the template.  Per default the globals
    are added to the context.  If shared is set to `True` the data
    is passed as is to the context without adding the globals.

    `locals` can be a dict of local variables for internal usage.
  summary: Create a new :class:`Context` for this template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.render
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Render the template to produce a native Python type. If the
    result is a single node, its value is returned. Otherwise, the
    nodes are concatenated as strings. If the result can be parsed
    with :func:`ast.literal_eval`, the parsed value is returned.
    Otherwise, the string is returned.
  summary: Render the template to produce a native Python type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.render_async
  kind: method
  ns: jinja2.nativetypes
  description: |-
    This works similar to :meth:`render` but returns a coroutine
    that when awaited returns the entire rendered template string.  This
    requires the async feature to be enabled.

    Example usage::

        await template.render_async(knights='that say nih; asynchronously')
  summary: This works similar to :meth:`render` but returns a coroutine
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NativeEnvironment.template_class.stream
  kind: method
  ns: jinja2.nativetypes
  description: |-
    Works exactly like :meth:`generate` but returns a
    :class:`TemplateStream`.
  summary: Works exactly like :meth:`generate` but returns a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: has_safe_repr
  kind: function
  ns: jinja2.nativetypes
  description: Does the node have a safe representation?
  summary: Does the node have a safe representation?
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: islice
  kind: class
  ns: jinja2.nativetypes
  description: |-
    islice(iterable, stop) --> islice object
    islice(iterable, start, stop[, step]) --> islice object

    Return an iterator whose next() method returns selected values from an
    iterable.  If start is specified, will skip all preceding elements;
    otherwise, start defaults to zero.  Step defaults to one.  If
    specified as another value, step determines how many values are
    skipped between successive calls.  Works like a slice() on a list
    but returns an iterator.
  summary: islice(iterable, stop) --> islice object
  signatures: null
  inherits_from: null
- name: literal_eval
  kind: function
  ns: jinja2.nativetypes
  description: |-
    Evaluate an expression node or a string containing only a Python
    expression.  The string or node provided may only consist of the following
    Python literal structures: strings, bytes, numbers, tuples, lists, dicts,
    sets, booleans, and None.

    Caution: A complex expression can overflow the C stack and cause a crash.
  summary: Evaluate an expression node or a string containing only a Python
  signatures:
  - kind: positional
    name: node_or_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: native_concat
  kind: function
  ns: jinja2.nativetypes
  description: |-
    Return a native Python type from the list of compiled nodes. If
    the result is a single node, its value is returned. Otherwise, the
    nodes are concatenated as strings. If the result can be parsed with
    :func:`ast.literal_eval`, the parsed value is returned. Otherwise,
    the string is returned.

    :param values: Iterable of outputs to concatenate.
  summary: Return a native Python type from the list of compiled nodes
  signatures:
  - kind: positional
    name: values
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: parse
  kind: function
  ns: jinja2.nativetypes
  description: |-
    Parse the source into an AST node.
    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).
    Pass type_comments=True to get back type comments where the syntax allows.
  summary: Parse the source into an AST node
  signatures:
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: filename
    default: <unknown>
    rest: false
  - kind: positional
    name: mode
    default: exec
    rest: false
  - name: type_comments
    default: 'False'
    rest: false
    kind: kw-only
  - name: feature_version
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: jinja2.nodes
  kind: module
  ns: null
  description: |-
    AST nodes generated by the parser for the compiler. Also provides
    some node tree helper functions used by the parser and compiler in order
    to normalize nodes.
  summary: AST nodes generated by the parser for the compiler
  signatures: null
  inherits_from: null
- name: args_as_const
  kind: function
  ns: jinja2.nodes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: eval_ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: get_eval_context
  kind: function
  ns: jinja2.nodes
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.optimizer
  kind: module
  ns: null
  description: |-
    The optimizer tries to constant fold expressions and modify the AST
    in place so that it should be faster to evaluate.

    Because the AST does not contain all the scoping information and the
    compiler has to find that out, we cannot do all the optimizations we
    want. For example, loop unrolling doesn't work because unrolled loops
    would have a different scope. The solution would be a second syntax tree
    that stored the scoping rules.
  summary: The optimizer tries to constant fold expressions and modify the AST
  signatures: null
  inherits_from: null
- name: optimize
  kind: function
  ns: jinja2.optimizer
  description: |-
    The context hint can be used to perform an static optimization
    based on the context given.
  summary: The context hint can be used to perform an static optimization
  signatures:
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: environment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.parser
  kind: module
  ns: null
  description: Parse tokens from the lexer into nodes for the compiler.
  summary: Parse tokens from the lexer into nodes for the compiler
  signatures: null
  inherits_from: null
- name: describe_token
  kind: function
  ns: jinja2.parser
  description: Returns a description of the token.
  summary: Returns a description of the token
  signatures:
  - kind: positional
    name: token
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: describe_token_expr
  kind: function
  ns: jinja2.parser
  description: Like `describe_token` but for token expressions.
  summary: Like `describe_token` but for token expressions
  signatures:
  - kind: positional
    name: expr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.runtime
  kind: module
  ns: null
  description: The runtime functions and state used by compiled templates.
  summary: The runtime functions and state used by compiled templates
  signatures: null
  inherits_from: null
- name: F
  kind: const
  ns: jinja2.runtime
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: jinja2.runtime
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: async_exported
  kind: const
  ns: jinja2.runtime
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: auto_aiter
  kind: function
  ns: jinja2.runtime
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: auto_await
  kind: function
  ns: jinja2.runtime
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: exported
  kind: const
  ns: jinja2.runtime
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: identity
  kind: function
  ns: jinja2.runtime
  description: |-
    Returns its argument. Useful for certain things in the
    environment.
  summary: Returns its argument
  signatures:
  - kind: positional
    name: x
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: internalcode
  kind: function
  ns: jinja2.runtime
  description: Marks the function as internally used
  summary: Marks the function as internally used
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: make_logging_undefined
  kind: function
  ns: jinja2.runtime
  description: |-
    Given a logger object this returns a new undefined class that will
    log certain failures.  It will log iterations and printing.  If no
    logger is given a default logger is created.

    Example::

        logger = logging.getLogger(__name__)
        LoggingUndefined = make_logging_undefined(
            logger=logger,
            base=Undefined
        )

    .. versionadded:: 2.8

    :param logger: the logger to use.  If not provided, a default logger
                   is created.
    :param base: the base class to add logging functionality to.  This
                 defaults to :class:`Undefined`.
  summary: Given a logger object this returns a new undefined class that will
  signatures:
  - kind: positional
    name: logger
    default: None
    rest: false
  - kind: positional
    name: base
    default: <class 'jinja2.runtime.Undefined'>
    rest: false
  - type: '?'
  inherits_from: null
- name: markup_join
  kind: function
  ns: jinja2.runtime
  description: Concatenation that escapes if necessary and converts to string.
  summary: Concatenation that escapes if necessary and converts to string
  signatures:
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: missing
  kind: const
  ns: jinja2.runtime
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: new_context
  kind: function
  ns: jinja2.runtime
  description: Internal helper for context creation.
  summary: Internal helper for context creation
  signatures:
  - kind: positional
    name: environment
    default: null
    rest: false
  - kind: positional
    name: template_name
    default: null
    rest: false
  - kind: positional
    name: blocks
    default: null
    rest: false
  - kind: positional
    name: vars
    default: None
    rest: false
  - kind: positional
    name: shared
    default: 'False'
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - kind: positional
    name: locals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: object_type_repr
  kind: function
  ns: jinja2.runtime
  description: |-
    Returns the name of the object's type.  For some recognized
    singletons the name of the object is returned instead. (For
    example for `None` and `Ellipsis`).
  summary: Returns the name of the object's type
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_eval_context
  kind: function
  ns: jinja2.runtime
  description: |-
    Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
    to the decorated function when called while rendering a template.
    See :ref:`eval-context`.

    Can be used on functions, filters, and tests.

    If only ``EvalContext.environment`` is needed, use
    :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: str_join
  kind: function
  ns: jinja2.runtime
  description: Simple args to string conversion and concatenation.
  summary: Simple args to string conversion and concatenation
  signatures:
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.sandbox
  kind: module
  ns: null
  description: |-
    A sandbox layer that ensures unsafe operations cannot be performed.
    Useful when the template itself comes from an untrusted source.
  summary: A sandbox layer that ensures unsafe operations cannot be performed
  signatures: null
  inherits_from: null
- name: EscapeFormatter
  kind: class
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: escape
    default: null
    rest: false
  - type: EscapeFormatter
  inherits_from:
  - <class 'string.Formatter'>
- name: EscapeFormatter.check_unused_args
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: used_args
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EscapeFormatter.convert_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: conversion
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EscapeFormatter.escape
  kind: property
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: EscapeFormatter.format
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EscapeFormatter.format_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: format_spec
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EscapeFormatter.get_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: field_name
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EscapeFormatter.get_value
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EscapeFormatter.parse
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EscapeFormatter.vformat
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: F
  kind: const
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Formatter
  kind: class
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - type: Formatter
  inherits_from: null
- name: Formatter.check_unused_args
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: used_args
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Formatter.convert_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: conversion
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Formatter.format
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Formatter.format_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: format_spec
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Formatter.get_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: field_name
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Formatter.get_value
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Formatter.parse
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Formatter.vformat
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment
  kind: class
  ns: jinja2.sandbox
  description: |-
    Works exactly like the regular `SandboxedEnvironment` but does not
    permit modifications on the builtin mutable objects `list`, `set`, and
    `dict` by using the :func:`modifies_known_mutable` function.
  summary: Works exactly like the regular `SandboxedEnvironment` but does not
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: ImmutableSandboxedEnvironment
  inherits_from:
  - <class 'jinja2.sandbox.SandboxedEnvironment'>
  - <class 'jinja2.environment.Environment'>
- name: ImmutableSandboxedEnvironment.add_extension
  kind: method
  ns: jinja2.sandbox
  description: |-
    Adds an extension after the environment was created.

    .. versionadded:: 2.5
  summary: Adds an extension after the environment was created
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: extension
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.call
  kind: method
  ns: jinja2.sandbox
  description: Call an object from sandboxed code.
  summary: Call an object from sandboxed code
  signatures:
  - kind: positional
    name: _SandboxedEnvironment__self
    default: null
    rest: false
  - kind: positional
    name: _SandboxedEnvironment__context
    default: null
    rest: false
  - kind: positional
    name: _SandboxedEnvironment__obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.call_binop
  kind: method
  ns: jinja2.sandbox
  description: |-
    For intercepted binary operator calls (:meth:`intercepted_binops`)
    this function is executed instead of the builtin operator.  This can
    be used to fine tune the behavior of certain operators.

    .. versionadded:: 2.6
  summary: For intercepted binary operator calls (:meth:`intercepted_binops`)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: operator
    default: null
    rest: false
  - kind: positional
    name: left
    default: null
    rest: false
  - kind: positional
    name: right
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.call_filter
  kind: method
  ns: jinja2.sandbox
  description: |-
    Invoke a filter on a value the same way the compiler does.

    This might return a coroutine if the filter is running from an
    environment in async mode and the filter supports async
    execution. It's your responsibility to await this if needed.

    .. versionadded:: 2.7
  summary: Invoke a filter on a value the same way the compiler does
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: context
    default: None
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.call_test
  kind: method
  ns: jinja2.sandbox
  description: |-
    Invoke a test on a value the same way the compiler does.

    This might return a coroutine if the test is running from an
    environment in async mode and the test supports async execution.
    It's your responsibility to await this if needed.

    .. versionchanged:: 3.0
        Tests support ``@pass_context``, etc. decorators. Added
        the ``context`` and ``eval_ctx`` parameters.

    .. versionadded:: 2.7
  summary: Invoke a test on a value the same way the compiler does
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: context
    default: None
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.call_unop
  kind: method
  ns: jinja2.sandbox
  description: |-
    For intercepted unary operator calls (:meth:`intercepted_unops`)
    this function is executed instead of the builtin operator.  This can
    be used to fine tune the behavior of certain operators.

    .. versionadded:: 2.6
  summary: For intercepted unary operator calls (:meth:`intercepted_unops`)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: operator
    default: null
    rest: false
  - kind: positional
    name: arg
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.compile
  kind: method
  ns: jinja2.sandbox
  description: |-
    Compile a node or template source code.  The `name` parameter is
    the load name of the template after it was joined using
    :meth:`join_path` if necessary, not the filename on the file system.
    the `filename` parameter is the estimated filename of the template on
    the file system.  If the template came from a database or memory this
    can be omitted.

    The return value of this method is a python code object.  If the `raw`
    parameter is `True` the return value will be a string with python
    code equivalent to the bytecode returned otherwise.  This method is
    mainly used internally.

    `defer_init` is use internally to aid the module code generator.  This
    causes the generated code to be able to import without the global
    environment variable to be set.

    .. versionadded:: 2.4
       `defer_init` parameter added.
  summary: Compile a node or template source code
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - kind: positional
    name: raw
    default: 'False'
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.compile_expression
  kind: method
  ns: jinja2.sandbox
  description: |-
    A handy helper method that returns a callable that accepts keyword
    arguments that appear as variables in the expression.  If called it
    returns the result of the expression.

    This is useful if applications want to use the same rules as Jinja
    in template "configuration files" or similar situations.

    Example usage:

    >>> env = Environment()
    >>> expr = env.compile_expression('foo == 42')
    >>> expr(foo=23)
    False
    >>> expr(foo=42)
    True

    Per default the return value is converted to `None` if the
    expression returns an undefined value.  This can be changed
    by setting `undefined_to_none` to `False`.

    >>> env.compile_expression('var')() is None
    True
    >>> env.compile_expression('var', undefined_to_none=False)()
    Undefined

    .. versionadded:: 2.1
  summary: A handy helper method that returns a callable that accepts keyword
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: undefined_to_none
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.compile_templates
  kind: method
  ns: jinja2.sandbox
  description: |-
    Finds all the templates the loader can find, compiles them
    and stores them in `target`.  If `zip` is `None`, instead of in a
    zipfile, the templates will be stored in a directory.
    By default a deflate zip algorithm is used. To switch to
    the stored algorithm, `zip` can be set to ``'stored'``.

    `extensions` and `filter_func` are passed to :meth:`list_templates`.
    Each template returned will be compiled to the target folder or
    zipfile.

    By default template compilation errors are ignored.  In case a
    log function is provided, errors are logged.  If you want template
    syntax errors to abort the compilation you can set `ignore_errors`
    to `False` and you will get an exception on syntax errors.

    .. versionadded:: 2.4
  summary: Finds all the templates the loader can find, compiles them
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: None
    rest: false
  - kind: positional
    name: filter_func
    default: None
    rest: false
  - kind: positional
    name: zip
    default: deflated
    rest: false
  - kind: positional
    name: log_function
    default: None
    rest: false
  - kind: positional
    name: ignore_errors
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.default_binop_table
  kind: property
  ns: jinja2.sandbox
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: ImmutableSandboxedEnvironment.default_unop_table
  kind: property
  ns: jinja2.sandbox
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: ImmutableSandboxedEnvironment.extend
  kind: method
  ns: jinja2.sandbox
  description: |-
    Add the items to the instance of the environment if they do not exist
    yet.  This is used by :ref:`extensions <writing-extensions>` to register
    callbacks and configuration values without breaking inheritance.
  summary: Add the items to the instance of the environment if they do not exist
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.format_string
  kind: method
  ns: jinja2.sandbox
  description: |-
    If a format call is detected, then this is routed through this
    method so that our safety sandbox can be used for it.
  summary: If a format call is detected, then this is routed through this
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - kind: positional
    name: format_func
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.from_string
  kind: method
  ns: jinja2.sandbox
  description: |-
    Load a template from a source string without using
    :attr:`loader`.

    :param source: Jinja source to compile into a template.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.
    :param template_class: Return an instance of this
        :class:`Template` class.
  summary: Load a template from a source string without using
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - kind: positional
    name: template_class
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.get_or_select_template
  kind: method
  ns: jinja2.sandbox
  description: |-
    Use :meth:`select_template` if an iterable of template names
    is given, or :meth:`get_template` if one name is given.

    .. versionadded:: 2.3
  summary: Use :meth:`select_template` if an iterable of template names
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template_name_or_list
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.get_template
  kind: method
  ns: jinja2.sandbox
  description: |-
    Load a template by name with :attr:`loader` and return a
    :class:`Template`. If the template does not exist a
    :exc:`TemplateNotFound` exception is raised.

    :param name: Name of the template to load. When loading
        templates from the filesystem, "/" is used as the path
        separator, even on Windows.
    :param parent: The name of the parent template importing this
        template. :meth:`join_path` can be used to implement name
        transformations with this.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.

    .. versionchanged:: 3.0
        If a template is loaded from cache, ``globals`` will update
        the template's globals instead of ignoring the new values.

    .. versionchanged:: 2.4
        If ``name`` is a :class:`Template` object it is returned
        unchanged.
  summary: Load a template by name with :attr:`loader` and return a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.getattr
  kind: method
  ns: jinja2.sandbox
  description: |-
    Subscribe an object from sandboxed code and prefer the
    attribute.  The attribute passed *must* be a bytestring.
  summary: Subscribe an object from sandboxed code and prefer the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.getitem
  kind: method
  ns: jinja2.sandbox
  description: Subscribe an object from sandboxed code.
  summary: Subscribe an object from sandboxed code
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: argument
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.handle_exception
  kind: method
  ns: jinja2.sandbox
  description: |-
    Exception handling helper.  This is used internally to either raise
    rewritten exceptions or return a rendered traceback for the template.
  summary: Exception handling helper
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.intercepted_binops
  kind: property
  ns: jinja2.sandbox
  description: |-
    frozenset() -> empty frozenset object
    frozenset(iterable) -> frozenset object

    Build an immutable unordered collection of unique elements.
  summary: frozenset() -> empty frozenset object
  signatures: null
  inherits_from: null
- name: ImmutableSandboxedEnvironment.intercepted_unops
  kind: property
  ns: jinja2.sandbox
  description: |-
    frozenset() -> empty frozenset object
    frozenset(iterable) -> frozenset object

    Build an immutable unordered collection of unique elements.
  summary: frozenset() -> empty frozenset object
  signatures: null
  inherits_from: null
- name: ImmutableSandboxedEnvironment.is_safe_attribute
  kind: method
  ns: jinja2.sandbox
  description: |-
    The sandboxed environment will call this method to check if the
    attribute of an object is safe to access.  Per default all attributes
    starting with an underscore are considered private as well as the
    special attributes of internal python objects as returned by the
    :func:`is_internal_attribute` function.
  summary: The sandboxed environment will call this method to check if the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attr
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.is_safe_callable
  kind: method
  ns: jinja2.sandbox
  description: |-
    Check if an object is safely callable. By default callables
    are considered safe unless decorated with :func:`unsafe`.

    This also recognizes the Django convention of setting
    ``func.alters_data = True``.
  summary: Check if an object is safely callable
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.iter_extensions
  kind: method
  ns: jinja2.sandbox
  description: Iterates over the extensions by priority.
  summary: Iterates over the extensions by priority
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.join_path
  kind: method
  ns: jinja2.sandbox
  description: |-
    Join a template with the parent.  By default all the lookups are
    relative to the loader root so this method returns the `template`
    parameter unchanged, but if the paths should be relative to the
    parent template, this function can be used to calculate the real
    template name.

    Subclasses may override this method and implement template path
    joining here.
  summary: Join a template with the parent
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - kind: positional
    name: parent
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.lex
  kind: method
  ns: jinja2.sandbox
  description: |-
    Lex the given sourcecode and return a generator that yields
    tokens as tuples in the form ``(lineno, token_type, value)``.
    This can be useful for :ref:`extension development <writing-extensions>`
    and debugging templates.

    This does not perform preprocessing.  If you want the preprocessing
    of the extensions to be applied you have to filter source through
    the :meth:`preprocess` method.
  summary: Lex the given sourcecode and return a generator that yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.lexer
  kind: property
  ns: jinja2.sandbox
  description: The lexer for this environment.
  summary: The lexer for this environment
  signatures: null
  inherits_from: null
- name: ImmutableSandboxedEnvironment.linked_to
  kind: property
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ImmutableSandboxedEnvironment.list_templates
  kind: method
  ns: jinja2.sandbox
  description: |-
    Returns a list of templates for this environment.  This requires
    that the loader supports the loader's
    :meth:`~BaseLoader.list_templates` method.

    If there are other files in the template folder besides the
    actual templates, the returned list can be filtered.  There are two
    ways: either `extensions` is set to a list of file extensions for
    templates, or a `filter_func` can be provided which is a callable that
    is passed a template name and should return `True` if it should end up
    in the result list.

    If the loader does not support that, a :exc:`TypeError` is raised.

    .. versionadded:: 2.4
  summary: Returns a list of templates for this environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: None
    rest: false
  - kind: positional
    name: filter_func
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.make_globals
  kind: method
  ns: jinja2.sandbox
  description: |-
    Make the globals map for a template. Any given template
    globals overlay the environment :attr:`globals`.

    Returns a :class:`collections.ChainMap`. This allows any changes
    to a template's globals to only affect that template, while
    changes to the environment's globals are still reflected.
    However, avoid modifying any globals after a template is loaded.

    :param d: Dict of template-specific globals.

    .. versionchanged:: 3.0
        Use :class:`collections.ChainMap` to always prevent mutating
        environment globals.
  summary: Make the globals map for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: d
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.overlay
  kind: method
  ns: jinja2.sandbox
  description: |-
    Create a new overlay environment that shares all the data with the
    current environment except for cache and the overridden attributes.
    Extensions cannot be removed for an overlayed environment.  An overlayed
    environment automatically gets all the extensions of the environment it
    is linked to plus optional extra extensions.

    Creating overlays should happen after the initial environment was set
    up completely.  Not all attributes are truly linked, some are just
    copied over so modifications on the original environment may not shine
    through.

    .. versionchanged:: 3.1.2
        Added the ``newline_sequence``,, ``keep_trailing_newline``,
        and ``enable_async`` parameters to match ``__init__``.
  summary: Create a new overlay environment that shares all the data with the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: block_start_string
    default: missing
    rest: false
  - kind: positional
    name: block_end_string
    default: missing
    rest: false
  - kind: positional
    name: variable_start_string
    default: missing
    rest: false
  - kind: positional
    name: variable_end_string
    default: missing
    rest: false
  - kind: positional
    name: comment_start_string
    default: missing
    rest: false
  - kind: positional
    name: comment_end_string
    default: missing
    rest: false
  - kind: positional
    name: line_statement_prefix
    default: missing
    rest: false
  - kind: positional
    name: line_comment_prefix
    default: missing
    rest: false
  - kind: positional
    name: trim_blocks
    default: missing
    rest: false
  - kind: positional
    name: lstrip_blocks
    default: missing
    rest: false
  - kind: positional
    name: newline_sequence
    default: missing
    rest: false
  - kind: positional
    name: keep_trailing_newline
    default: missing
    rest: false
  - kind: positional
    name: extensions
    default: missing
    rest: false
  - kind: positional
    name: optimized
    default: missing
    rest: false
  - kind: positional
    name: undefined
    default: missing
    rest: false
  - kind: positional
    name: finalize
    default: missing
    rest: false
  - kind: positional
    name: autoescape
    default: missing
    rest: false
  - kind: positional
    name: loader
    default: missing
    rest: false
  - kind: positional
    name: cache_size
    default: missing
    rest: false
  - kind: positional
    name: auto_reload
    default: missing
    rest: false
  - kind: positional
    name: bytecode_cache
    default: missing
    rest: false
  - kind: positional
    name: enable_async
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.overlayed
  kind: property
  ns: jinja2.sandbox
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ImmutableSandboxedEnvironment.parse
  kind: method
  ns: jinja2.sandbox
  description: |-
    Parse the sourcecode and return the abstract syntax tree.  This
    tree of nodes is used by the compiler to convert the template into
    executable source- or bytecode.  This is useful for debugging or to
    extract information from templates.

    If you are :ref:`developing Jinja extensions <writing-extensions>`
    this gives you a good overview of the node tree generated.
  summary: Parse the sourcecode and return the abstract syntax tree
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.preprocess
  kind: method
  ns: jinja2.sandbox
  description: |-
    Preprocesses the source with all extensions.  This is automatically
    called for all parsing and compiling methods but *not* for :meth:`lex`
    because there you usually only want the actual source tokenized.
  summary: Preprocesses the source with all extensions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.sandboxed
  kind: property
  ns: jinja2.sandbox
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ImmutableSandboxedEnvironment.select_template
  kind: method
  ns: jinja2.sandbox
  description: |-
    Like :meth:`get_template`, but tries loading multiple names.
    If none of the names can be loaded a :exc:`TemplatesNotFound`
    exception is raised.

    :param names: List of template names to try loading in order.
    :param parent: The name of the parent template importing this
        template. :meth:`join_path` can be used to implement name
        transformations with this.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.

    .. versionchanged:: 3.0
        If a template is loaded from cache, ``globals`` will update
        the template's globals instead of ignoring the new values.

    .. versionchanged:: 2.11
        If ``names`` is :class:`Undefined`, an :exc:`UndefinedError`
        is raised instead. If no templates were found and ``names``
        contains :class:`Undefined`, the message is more helpful.

    .. versionchanged:: 2.4
        If ``names`` contains a :class:`Template` object it is
        returned unchanged.

    .. versionadded:: 2.3
  summary: Like :meth:`get_template`, but tries loading multiple names
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: names
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ImmutableSandboxedEnvironment.shared
  kind: property
  ns: jinja2.sandbox
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ImmutableSandboxedEnvironment.unsafe_undefined
  kind: method
  ns: jinja2.sandbox
  description: Return an undefined object for unsafe attributes.
  summary: Return an undefined object for unsafe attributes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MAX_RANGE
  kind: const
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment
  kind: class
  ns: jinja2.sandbox
  description: |-
    The sandboxed environment.  It works like the regular environment but
    tells the compiler to generate sandboxed code.  Additionally subclasses of
    this environment may override the methods that tell the runtime what
    attributes or functions are safe to access.

    If the template tries to access insecure code a :exc:`SecurityError` is
    raised.  However also other exceptions may occur during the rendering so
    the caller has to ensure that all exceptions are caught.
  summary: The sandboxed environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: SandboxedEnvironment
  inherits_from:
  - <class 'jinja2.environment.Environment'>
- name: SandboxedEnvironment.add_extension
  kind: method
  ns: jinja2.sandbox
  description: |-
    Adds an extension after the environment was created.

    .. versionadded:: 2.5
  summary: Adds an extension after the environment was created
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: extension
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.call
  kind: method
  ns: jinja2.sandbox
  description: Call an object from sandboxed code.
  summary: Call an object from sandboxed code
  signatures:
  - kind: positional
    name: _SandboxedEnvironment__self
    default: null
    rest: false
  - kind: positional
    name: _SandboxedEnvironment__context
    default: null
    rest: false
  - kind: positional
    name: _SandboxedEnvironment__obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.call_binop
  kind: method
  ns: jinja2.sandbox
  description: |-
    For intercepted binary operator calls (:meth:`intercepted_binops`)
    this function is executed instead of the builtin operator.  This can
    be used to fine tune the behavior of certain operators.

    .. versionadded:: 2.6
  summary: For intercepted binary operator calls (:meth:`intercepted_binops`)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: operator
    default: null
    rest: false
  - kind: positional
    name: left
    default: null
    rest: false
  - kind: positional
    name: right
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.call_filter
  kind: method
  ns: jinja2.sandbox
  description: |-
    Invoke a filter on a value the same way the compiler does.

    This might return a coroutine if the filter is running from an
    environment in async mode and the filter supports async
    execution. It's your responsibility to await this if needed.

    .. versionadded:: 2.7
  summary: Invoke a filter on a value the same way the compiler does
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: context
    default: None
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.call_test
  kind: method
  ns: jinja2.sandbox
  description: |-
    Invoke a test on a value the same way the compiler does.

    This might return a coroutine if the test is running from an
    environment in async mode and the test supports async execution.
    It's your responsibility to await this if needed.

    .. versionchanged:: 3.0
        Tests support ``@pass_context``, etc. decorators. Added
        the ``context`` and ``eval_ctx`` parameters.

    .. versionadded:: 2.7
  summary: Invoke a test on a value the same way the compiler does
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: kwargs
    default: None
    rest: false
  - kind: positional
    name: context
    default: None
    rest: false
  - kind: positional
    name: eval_ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.call_unop
  kind: method
  ns: jinja2.sandbox
  description: |-
    For intercepted unary operator calls (:meth:`intercepted_unops`)
    this function is executed instead of the builtin operator.  This can
    be used to fine tune the behavior of certain operators.

    .. versionadded:: 2.6
  summary: For intercepted unary operator calls (:meth:`intercepted_unops`)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: operator
    default: null
    rest: false
  - kind: positional
    name: arg
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.compile
  kind: method
  ns: jinja2.sandbox
  description: |-
    Compile a node or template source code.  The `name` parameter is
    the load name of the template after it was joined using
    :meth:`join_path` if necessary, not the filename on the file system.
    the `filename` parameter is the estimated filename of the template on
    the file system.  If the template came from a database or memory this
    can be omitted.

    The return value of this method is a python code object.  If the `raw`
    parameter is `True` the return value will be a string with python
    code equivalent to the bytecode returned otherwise.  This method is
    mainly used internally.

    `defer_init` is use internally to aid the module code generator.  This
    causes the generated code to be able to import without the global
    environment variable to be set.

    .. versionadded:: 2.4
       `defer_init` parameter added.
  summary: Compile a node or template source code
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - kind: positional
    name: raw
    default: 'False'
    rest: false
  - kind: positional
    name: defer_init
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.compile_expression
  kind: method
  ns: jinja2.sandbox
  description: |-
    A handy helper method that returns a callable that accepts keyword
    arguments that appear as variables in the expression.  If called it
    returns the result of the expression.

    This is useful if applications want to use the same rules as Jinja
    in template "configuration files" or similar situations.

    Example usage:

    >>> env = Environment()
    >>> expr = env.compile_expression('foo == 42')
    >>> expr(foo=23)
    False
    >>> expr(foo=42)
    True

    Per default the return value is converted to `None` if the
    expression returns an undefined value.  This can be changed
    by setting `undefined_to_none` to `False`.

    >>> env.compile_expression('var')() is None
    True
    >>> env.compile_expression('var', undefined_to_none=False)()
    Undefined

    .. versionadded:: 2.1
  summary: A handy helper method that returns a callable that accepts keyword
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: undefined_to_none
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.compile_templates
  kind: method
  ns: jinja2.sandbox
  description: |-
    Finds all the templates the loader can find, compiles them
    and stores them in `target`.  If `zip` is `None`, instead of in a
    zipfile, the templates will be stored in a directory.
    By default a deflate zip algorithm is used. To switch to
    the stored algorithm, `zip` can be set to ``'stored'``.

    `extensions` and `filter_func` are passed to :meth:`list_templates`.
    Each template returned will be compiled to the target folder or
    zipfile.

    By default template compilation errors are ignored.  In case a
    log function is provided, errors are logged.  If you want template
    syntax errors to abort the compilation you can set `ignore_errors`
    to `False` and you will get an exception on syntax errors.

    .. versionadded:: 2.4
  summary: Finds all the templates the loader can find, compiles them
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: None
    rest: false
  - kind: positional
    name: filter_func
    default: None
    rest: false
  - kind: positional
    name: zip
    default: deflated
    rest: false
  - kind: positional
    name: log_function
    default: None
    rest: false
  - kind: positional
    name: ignore_errors
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.default_binop_table
  kind: property
  ns: jinja2.sandbox
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment.default_unop_table
  kind: property
  ns: jinja2.sandbox
  description: |-
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
  summary: dict() -> new empty dictionary
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment.extend
  kind: method
  ns: jinja2.sandbox
  description: |-
    Add the items to the instance of the environment if they do not exist
    yet.  This is used by :ref:`extensions <writing-extensions>` to register
    callbacks and configuration values without breaking inheritance.
  summary: Add the items to the instance of the environment if they do not exist
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.format_string
  kind: method
  ns: jinja2.sandbox
  description: |-
    If a format call is detected, then this is routed through this
    method so that our safety sandbox can be used for it.
  summary: If a format call is detected, then this is routed through this
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: s
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - kind: positional
    name: format_func
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.from_string
  kind: method
  ns: jinja2.sandbox
  description: |-
    Load a template from a source string without using
    :attr:`loader`.

    :param source: Jinja source to compile into a template.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.
    :param template_class: Return an instance of this
        :class:`Template` class.
  summary: Load a template from a source string without using
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - kind: positional
    name: template_class
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.get_or_select_template
  kind: method
  ns: jinja2.sandbox
  description: |-
    Use :meth:`select_template` if an iterable of template names
    is given, or :meth:`get_template` if one name is given.

    .. versionadded:: 2.3
  summary: Use :meth:`select_template` if an iterable of template names
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template_name_or_list
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.get_template
  kind: method
  ns: jinja2.sandbox
  description: |-
    Load a template by name with :attr:`loader` and return a
    :class:`Template`. If the template does not exist a
    :exc:`TemplateNotFound` exception is raised.

    :param name: Name of the template to load. When loading
        templates from the filesystem, "/" is used as the path
        separator, even on Windows.
    :param parent: The name of the parent template importing this
        template. :meth:`join_path` can be used to implement name
        transformations with this.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.

    .. versionchanged:: 3.0
        If a template is loaded from cache, ``globals`` will update
        the template's globals instead of ignoring the new values.

    .. versionchanged:: 2.4
        If ``name`` is a :class:`Template` object it is returned
        unchanged.
  summary: Load a template by name with :attr:`loader` and return a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.getattr
  kind: method
  ns: jinja2.sandbox
  description: |-
    Subscribe an object from sandboxed code and prefer the
    attribute.  The attribute passed *must* be a bytestring.
  summary: Subscribe an object from sandboxed code and prefer the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.getitem
  kind: method
  ns: jinja2.sandbox
  description: Subscribe an object from sandboxed code.
  summary: Subscribe an object from sandboxed code
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: argument
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.handle_exception
  kind: method
  ns: jinja2.sandbox
  description: |-
    Exception handling helper.  This is used internally to either raise
    rewritten exceptions or return a rendered traceback for the template.
  summary: Exception handling helper
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.intercepted_binops
  kind: property
  ns: jinja2.sandbox
  description: |-
    frozenset() -> empty frozenset object
    frozenset(iterable) -> frozenset object

    Build an immutable unordered collection of unique elements.
  summary: frozenset() -> empty frozenset object
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment.intercepted_unops
  kind: property
  ns: jinja2.sandbox
  description: |-
    frozenset() -> empty frozenset object
    frozenset(iterable) -> frozenset object

    Build an immutable unordered collection of unique elements.
  summary: frozenset() -> empty frozenset object
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment.is_safe_attribute
  kind: method
  ns: jinja2.sandbox
  description: |-
    The sandboxed environment will call this method to check if the
    attribute of an object is safe to access.  Per default all attributes
    starting with an underscore are considered private as well as the
    special attributes of internal python objects as returned by the
    :func:`is_internal_attribute` function.
  summary: The sandboxed environment will call this method to check if the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attr
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.is_safe_callable
  kind: method
  ns: jinja2.sandbox
  description: |-
    Check if an object is safely callable. By default callables
    are considered safe unless decorated with :func:`unsafe`.

    This also recognizes the Django convention of setting
    ``func.alters_data = True``.
  summary: Check if an object is safely callable
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.iter_extensions
  kind: method
  ns: jinja2.sandbox
  description: Iterates over the extensions by priority.
  summary: Iterates over the extensions by priority
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.join_path
  kind: method
  ns: jinja2.sandbox
  description: |-
    Join a template with the parent.  By default all the lookups are
    relative to the loader root so this method returns the `template`
    parameter unchanged, but if the paths should be relative to the
    parent template, this function can be used to calculate the real
    template name.

    Subclasses may override this method and implement template path
    joining here.
  summary: Join a template with the parent
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: template
    default: null
    rest: false
  - kind: positional
    name: parent
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.lex
  kind: method
  ns: jinja2.sandbox
  description: |-
    Lex the given sourcecode and return a generator that yields
    tokens as tuples in the form ``(lineno, token_type, value)``.
    This can be useful for :ref:`extension development <writing-extensions>`
    and debugging templates.

    This does not perform preprocessing.  If you want the preprocessing
    of the extensions to be applied you have to filter source through
    the :meth:`preprocess` method.
  summary: Lex the given sourcecode and return a generator that yields
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.lexer
  kind: property
  ns: jinja2.sandbox
  description: The lexer for this environment.
  summary: The lexer for this environment
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment.linked_to
  kind: property
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment.list_templates
  kind: method
  ns: jinja2.sandbox
  description: |-
    Returns a list of templates for this environment.  This requires
    that the loader supports the loader's
    :meth:`~BaseLoader.list_templates` method.

    If there are other files in the template folder besides the
    actual templates, the returned list can be filtered.  There are two
    ways: either `extensions` is set to a list of file extensions for
    templates, or a `filter_func` can be provided which is a callable that
    is passed a template name and should return `True` if it should end up
    in the result list.

    If the loader does not support that, a :exc:`TypeError` is raised.

    .. versionadded:: 2.4
  summary: Returns a list of templates for this environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: extensions
    default: None
    rest: false
  - kind: positional
    name: filter_func
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.make_globals
  kind: method
  ns: jinja2.sandbox
  description: |-
    Make the globals map for a template. Any given template
    globals overlay the environment :attr:`globals`.

    Returns a :class:`collections.ChainMap`. This allows any changes
    to a template's globals to only affect that template, while
    changes to the environment's globals are still reflected.
    However, avoid modifying any globals after a template is loaded.

    :param d: Dict of template-specific globals.

    .. versionchanged:: 3.0
        Use :class:`collections.ChainMap` to always prevent mutating
        environment globals.
  summary: Make the globals map for a template
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: d
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.overlay
  kind: method
  ns: jinja2.sandbox
  description: |-
    Create a new overlay environment that shares all the data with the
    current environment except for cache and the overridden attributes.
    Extensions cannot be removed for an overlayed environment.  An overlayed
    environment automatically gets all the extensions of the environment it
    is linked to plus optional extra extensions.

    Creating overlays should happen after the initial environment was set
    up completely.  Not all attributes are truly linked, some are just
    copied over so modifications on the original environment may not shine
    through.

    .. versionchanged:: 3.1.2
        Added the ``newline_sequence``,, ``keep_trailing_newline``,
        and ``enable_async`` parameters to match ``__init__``.
  summary: Create a new overlay environment that shares all the data with the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: block_start_string
    default: missing
    rest: false
  - kind: positional
    name: block_end_string
    default: missing
    rest: false
  - kind: positional
    name: variable_start_string
    default: missing
    rest: false
  - kind: positional
    name: variable_end_string
    default: missing
    rest: false
  - kind: positional
    name: comment_start_string
    default: missing
    rest: false
  - kind: positional
    name: comment_end_string
    default: missing
    rest: false
  - kind: positional
    name: line_statement_prefix
    default: missing
    rest: false
  - kind: positional
    name: line_comment_prefix
    default: missing
    rest: false
  - kind: positional
    name: trim_blocks
    default: missing
    rest: false
  - kind: positional
    name: lstrip_blocks
    default: missing
    rest: false
  - kind: positional
    name: newline_sequence
    default: missing
    rest: false
  - kind: positional
    name: keep_trailing_newline
    default: missing
    rest: false
  - kind: positional
    name: extensions
    default: missing
    rest: false
  - kind: positional
    name: optimized
    default: missing
    rest: false
  - kind: positional
    name: undefined
    default: missing
    rest: false
  - kind: positional
    name: finalize
    default: missing
    rest: false
  - kind: positional
    name: autoescape
    default: missing
    rest: false
  - kind: positional
    name: loader
    default: missing
    rest: false
  - kind: positional
    name: cache_size
    default: missing
    rest: false
  - kind: positional
    name: auto_reload
    default: missing
    rest: false
  - kind: positional
    name: bytecode_cache
    default: missing
    rest: false
  - kind: positional
    name: enable_async
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.overlayed
  kind: property
  ns: jinja2.sandbox
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment.parse
  kind: method
  ns: jinja2.sandbox
  description: |-
    Parse the sourcecode and return the abstract syntax tree.  This
    tree of nodes is used by the compiler to convert the template into
    executable source- or bytecode.  This is useful for debugging or to
    extract information from templates.

    If you are :ref:`developing Jinja extensions <writing-extensions>`
    this gives you a good overview of the node tree generated.
  summary: Parse the sourcecode and return the abstract syntax tree
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.preprocess
  kind: method
  ns: jinja2.sandbox
  description: |-
    Preprocesses the source with all extensions.  This is automatically
    called for all parsing and compiling methods but *not* for :meth:`lex`
    because there you usually only want the actual source tokenized.
  summary: Preprocesses the source with all extensions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.sandboxed
  kind: property
  ns: jinja2.sandbox
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment.select_template
  kind: method
  ns: jinja2.sandbox
  description: |-
    Like :meth:`get_template`, but tries loading multiple names.
    If none of the names can be loaded a :exc:`TemplatesNotFound`
    exception is raised.

    :param names: List of template names to try loading in order.
    :param parent: The name of the parent template importing this
        template. :meth:`join_path` can be used to implement name
        transformations with this.
    :param globals: Extend the environment :attr:`globals` with
        these extra variables available for all renders of this
        template. If the template has already been loaded and
        cached, its globals are updated with any new items.

    .. versionchanged:: 3.0
        If a template is loaded from cache, ``globals`` will update
        the template's globals instead of ignoring the new values.

    .. versionchanged:: 2.11
        If ``names`` is :class:`Undefined`, an :exc:`UndefinedError`
        is raised instead. If no templates were found and ``names``
        contains :class:`Undefined`, the message is more helpful.

    .. versionchanged:: 2.4
        If ``names`` contains a :class:`Template` object it is
        returned unchanged.

    .. versionadded:: 2.3
  summary: Like :meth:`get_template`, but tries loading multiple names
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: names
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: globals
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEnvironment.shared
  kind: property
  ns: jinja2.sandbox
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: SandboxedEnvironment.unsafe_undefined
  kind: method
  ns: jinja2.sandbox
  description: Return an undefined object for unsafe attributes.
  summary: Return an undefined object for unsafe attributes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attribute
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEscapeFormatter
  kind: class
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: env
    default: null
    rest: false
  - type: SandboxedEscapeFormatter
  inherits_from:
  - <class 'jinja2.sandbox.SandboxedFormatter'>
  - <class 'markupsafe.EscapeFormatter'>
  - <class 'string.Formatter'>
- name: SandboxedEscapeFormatter.check_unused_args
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: used_args
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEscapeFormatter.convert_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: conversion
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEscapeFormatter.escape
  kind: property
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SandboxedEscapeFormatter.format
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEscapeFormatter.format_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: format_spec
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEscapeFormatter.get_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: field_name
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEscapeFormatter.get_value
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEscapeFormatter.parse
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedEscapeFormatter.vformat
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedFormatter
  kind: class
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: env
    default: null
    rest: false
  - type: SandboxedFormatter
  inherits_from:
  - <class 'string.Formatter'>
- name: SandboxedFormatter.check_unused_args
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: used_args
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedFormatter.convert_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: conversion
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedFormatter.format
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedFormatter.format_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: format_spec
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedFormatter.get_field
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: field_name
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedFormatter.get_value
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedFormatter.parse
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SandboxedFormatter.vformat
  kind: method
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: format_string
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: kwargs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UNSAFE_ASYNC_GENERATOR_ATTRIBUTES
  kind: const
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UNSAFE_COROUTINE_ATTRIBUTES
  kind: const
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UNSAFE_FUNCTION_ATTRIBUTES
  kind: const
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UNSAFE_GENERATOR_ATTRIBUTES
  kind: const
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UNSAFE_METHOD_ATTRIBUTES
  kind: const
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: inspect_format_method
  kind: function
  ns: jinja2.sandbox
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: callable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: is_internal_attribute
  kind: function
  ns: jinja2.sandbox
  description: |-
    Test if the attribute given is an internal python attribute.  For
    example this function returns `True` for the `func_code` attribute of
    python objects.  This is useful if the environment method
    :meth:`~SandboxedEnvironment.is_safe_attribute` is overridden.

    >>> from jinja2.sandbox import is_internal_attribute
    >>> is_internal_attribute(str, "mro")
    True
    >>> is_internal_attribute(str, "upper")
    False
  summary: Test if the attribute given is an internal python attribute
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: modifies_known_mutable
  kind: function
  ns: jinja2.sandbox
  description: |-
    This function checks if an attribute on a builtin mutable object
    (list, dict, set or deque) or the corresponding ABCs would modify it
    if called.

    >>> modifies_known_mutable({}, "clear")
    True
    >>> modifies_known_mutable({}, "keys")
    False
    >>> modifies_known_mutable([], "append")
    True
    >>> modifies_known_mutable([], "index")
    False

    If called with an unsupported object, ``False`` is returned.

    >>> modifies_known_mutable("foo", "upper")
    False
  summary: This function checks if an attribute on a builtin mutable object
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: attr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: safe_range
  kind: function
  ns: jinja2.sandbox
  description: |-
    A range that can't generate ranges with a length of more than
    MAX_RANGE items.
  summary: A range that can't generate ranges with a length of more than
  signatures:
  - type: '?'
  inherits_from: null
- name: unsafe
  kind: function
  ns: jinja2.sandbox
  description: |-
    Marks a function or method as unsafe.

    .. code-block: python

        @unsafe
        def delete(self):
            pass
  summary: Marks a function or method as unsafe
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.tests
  kind: module
  ns: null
  description: Built-in template tests used with the ``is`` operator.
  summary: Built-in template tests used with the ``is`` operator
  signatures: null
  inherits_from: null
- name: TESTS
  kind: const
  ns: jinja2.tests
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: pass_environment
  kind: function
  ns: jinja2.tests
  description: |-
    Pass the :class:`~jinja2.Environment` as the first argument to
    the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    .. versionadded:: 3.0.0
        Replaces ``environmentfunction`` and ``environmentfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_boolean
  kind: function
  ns: jinja2.tests
  description: |-
    Return true if the object is a boolean value.

    .. versionadded:: 2.11
  summary: Return true if the object is a boolean value
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_defined
  kind: function
  ns: jinja2.tests
  description: |-
    Return true if the variable is defined:

    .. sourcecode:: jinja

        {% if variable is defined %}
            value of variable: {{ variable }}
        {% else %}
            variable is not defined
        {% endif %}

    See the :func:`default` filter for a simple way to set undefined
    variables.
  summary: 'Return true if the variable is defined:'
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_divisibleby
  kind: function
  ns: jinja2.tests
  description: Check if a variable is divisible by a number.
  summary: Check if a variable is divisible by a number
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: num
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_escaped
  kind: function
  ns: jinja2.tests
  description: Check if the value is escaped.
  summary: Check if the value is escaped
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_even
  kind: function
  ns: jinja2.tests
  description: Return true if the variable is even.
  summary: Return true if the variable is even
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_false
  kind: function
  ns: jinja2.tests
  description: |-
    Return true if the object is False.

    .. versionadded:: 2.11
  summary: Return true if the object is False
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_filter
  kind: function
  ns: jinja2.tests
  description: |-
    Check if a filter exists by name. Useful if a filter may be
    optionally available.

    .. code-block:: jinja

        {% if 'markdown' is filter %}
            {{ value | markdown }}
        {% else %}
            {{ value }}
        {% endif %}

    .. versionadded:: 3.0
  summary: Check if a filter exists by name
  signatures:
  - kind: positional
    name: env
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_float
  kind: function
  ns: jinja2.tests
  description: |-
    Return true if the object is a float.

    .. versionadded:: 2.11
  summary: Return true if the object is a float
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_in
  kind: function
  ns: jinja2.tests
  description: |-
    Check if value is in seq.

    .. versionadded:: 2.10
  summary: Check if value is in seq
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_integer
  kind: function
  ns: jinja2.tests
  description: |-
    Return true if the object is an integer.

    .. versionadded:: 2.11
  summary: Return true if the object is an integer
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_iterable
  kind: function
  ns: jinja2.tests
  description: Check if it's possible to iterate over an object.
  summary: Check if it's possible to iterate over an object
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_lower
  kind: function
  ns: jinja2.tests
  description: Return true if the variable is lowercased.
  summary: Return true if the variable is lowercased
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_mapping
  kind: function
  ns: jinja2.tests
  description: |-
    Return true if the object is a mapping (dict etc.).

    .. versionadded:: 2.6
  summary: Return true if the object is a mapping (dict etc
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_none
  kind: function
  ns: jinja2.tests
  description: Return true if the variable is none.
  summary: Return true if the variable is none
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_number
  kind: function
  ns: jinja2.tests
  description: Return true if the variable is a number.
  summary: Return true if the variable is a number
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_odd
  kind: function
  ns: jinja2.tests
  description: Return true if the variable is odd.
  summary: Return true if the variable is odd
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_sameas
  kind: function
  ns: jinja2.tests
  description: |-
    Check if an object points to the same memory address than another
    object:

    .. sourcecode:: jinja

        {% if foo.attribute is sameas false %}
            the foo attribute really is the `False` singleton
        {% endif %}
  summary: Check if an object points to the same memory address than another
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: other
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_sequence
  kind: function
  ns: jinja2.tests
  description: |-
    Return true if the variable is a sequence. Sequences are variables
    that are iterable.
  summary: Return true if the variable is a sequence
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_string
  kind: function
  ns: jinja2.tests
  description: Return true if the object is a string.
  summary: Return true if the object is a string
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_test
  kind: function
  ns: jinja2.tests
  description: |-
    Check if a test exists by name. Useful if a test may be
    optionally available.

    .. code-block:: jinja

        {% if 'loud' is test %}
            {% if value is loud %}
                {{ value|upper }}
            {% else %}
                {{ value|lower }}
            {% endif %}
        {% else %}
            {{ value }}
        {% endif %}

    .. versionadded:: 3.0
  summary: Check if a test exists by name
  signatures:
  - kind: positional
    name: env
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_true
  kind: function
  ns: jinja2.tests
  description: |-
    Return true if the object is True.

    .. versionadded:: 2.11
  summary: Return true if the object is True
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_undefined
  kind: function
  ns: jinja2.tests
  description: Like :func:`defined` but the other way round.
  summary: Like :func:`defined` but the other way round
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: test_upper
  kind: function
  ns: jinja2.tests
  description: Return true if the variable is uppercased.
  summary: Return true if the variable is uppercased
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.utils
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: F
  kind: const
  ns: jinja2.utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: choice
  kind: method
  ns: jinja2.utils
  description: Choose a random element from a non-empty sequence.
  summary: Choose a random element from a non-empty sequence
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: seq
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: clear_caches
  kind: function
  ns: jinja2.utils
  description: |-
    Jinja keeps internal caches for environments and lexers.  These are
    used so that Jinja doesn't have to recreate environments and lexers all
    the time.  Normally you don't have to care about that but if you are
    measuring memory consumption you may want to clean the caches.
  summary: Jinja keeps internal caches for environments and lexers
  signatures:
  - type: '?'
  inherits_from: null
- name: consume
  kind: function
  ns: jinja2.utils
  description: Consumes an iterable without doing anything with it.
  summary: Consumes an iterable without doing anything with it
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: generate_lorem_ipsum
  kind: function
  ns: jinja2.utils
  description: Generate some lorem ipsum for the template.
  summary: Generate some lorem ipsum for the template
  signatures:
  - kind: positional
    name: n
    default: '5'
    rest: false
  - kind: positional
    name: html
    default: 'True'
    rest: false
  - kind: positional
    name: min
    default: '20'
    rest: false
  - kind: positional
    name: max
    default: '100'
    rest: false
  - type: '?'
  inherits_from: null
- name: htmlsafe_json_dumps
  kind: function
  ns: jinja2.utils
  description: |-
    Serialize an object to a string of JSON with :func:`json.dumps`,
    then replace HTML-unsafe characters with Unicode escapes and mark
    the result safe with :class:`~markupsafe.Markup`.

    This is available in templates as the ``|tojson`` filter.

    The following characters are escaped: ``<``, ``>``, ``&``, ``'``.

    The returned string is safe to render in HTML documents and
    ``<script>`` tags. The exception is in HTML attributes that are
    double quoted; either use single quotes or the ``|forceescape``
    filter.

    :param obj: The object to serialize to JSON.
    :param dumps: The ``dumps`` function to use. Defaults to
        ``env.policies["json.dumps_function"]``, which defaults to
        :func:`json.dumps`.
    :param kwargs: Extra arguments to pass to ``dumps``. Merged onto
        ``env.policies["json.dumps_kwargs"]``.

    .. versionchanged:: 3.0
        The ``dumper`` parameter is renamed to ``dumps``.

    .. versionadded:: 2.9
  summary: Serialize an object to a string of JSON with :func:`json
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: dumps
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: import_string
  kind: function
  ns: jinja2.utils
  description: |-
    Imports an object based on a string.  This is useful if you want to
    use import paths as endpoints or something similar.  An import path can
    be specified either in dotted notation (``xml.sax.saxutils.escape``)
    or with a colon as object delimiter (``xml.sax.saxutils:escape``).

    If the `silent` is True the return value will be `None` if the import
    fails.

    :return: imported object
  summary: Imports an object based on a string
  signatures:
  - kind: positional
    name: import_name
    default: null
    rest: false
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: internal_code
  kind: const
  ns: jinja2.utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: internalcode
  kind: function
  ns: jinja2.utils
  description: Marks the function as internally used
  summary: Marks the function as internally used
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: is_undefined
  kind: function
  ns: jinja2.utils
  description: |-
    Check if the object passed is undefined.  This does nothing more than
    performing an instance check against :class:`Undefined` but looks nicer.
    This can be used for custom filters or tests that want to react to
    undefined variables.  For example a custom default filter can look like
    this::

        def default(var, default=''):
            if is_undefined(var):
                return default
            return var
  summary: Check if the object passed is undefined
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: missing
  kind: const
  ns: jinja2.utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: object_type_repr
  kind: function
  ns: jinja2.utils
  description: |-
    Returns the name of the object's type.  For some recognized
    singletons the name of the object is returned instead. (For
    example for `None` and `Ellipsis`).
  summary: Returns the name of the object's type
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: open_if_exists
  kind: function
  ns: jinja2.utils
  description: |-
    Returns a file descriptor for the filename if that file exists,
    otherwise ``None``.
  summary: Returns a file descriptor for the filename if that file exists,
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: rb
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_context
  kind: function
  ns: jinja2.utils
  description: |-
    Pass the :class:`~jinja2.runtime.Context` as the first argument
    to the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    If only ``Context.eval_context`` is needed, use
    :func:`pass_eval_context`. If only ``Context.environment`` is
    needed, use :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``contextfunction`` and ``contextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_environment
  kind: function
  ns: jinja2.utils
  description: |-
    Pass the :class:`~jinja2.Environment` as the first argument to
    the decorated function when called while rendering a template.

    Can be used on functions, filters, and tests.

    .. versionadded:: 3.0.0
        Replaces ``environmentfunction`` and ``environmentfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_eval_context
  kind: function
  ns: jinja2.utils
  description: |-
    Pass the :class:`~jinja2.nodes.EvalContext` as the first argument
    to the decorated function when called while rendering a template.
    See :ref:`eval-context`.

    Can be used on functions, filters, and tests.

    If only ``EvalContext.environment`` is needed, use
    :func:`pass_environment`.

    .. versionadded:: 3.0.0
        Replaces ``evalcontextfunction`` and ``evalcontextfilter``.
  summary: Pass the :class:`~jinja2
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pformat
  kind: function
  ns: jinja2.utils
  description: Format an object using :func:`pprint.pformat`.
  summary: Format an object using :func:`pprint
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: quote_from_bytes
  kind: function
  ns: jinja2.utils
  description: |-
    Like quote(), but accepts a bytes object rather than a str, and does
    not perform string-to-bytes encoding.  It always returns an ASCII string.
    quote_from_bytes(b'abc def?') -> 'abc%20def%3f'
  summary: Like quote(), but accepts a bytes object rather than a str, and does
  signatures:
  - kind: positional
    name: bs
    default: null
    rest: false
  - kind: positional
    name: safe
    default: /
    rest: false
  - type: '?'
  inherits_from: null
- name: randrange
  kind: method
  ns: jinja2.utils
  description: |-
    Choose a random item from range(stop) or range(start, stop[, step]).

    Roughly equivalent to ``choice(range(start, stop, step))`` but
    supports arbitrarily large ranges and is optimized for common cases.
  summary: Choose a random item from range(stop) or range(start, stop[, step])
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: start
    default: null
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - kind: positional
    name: step
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: select_autoescape
  kind: function
  ns: jinja2.utils
  description: |-
    Intelligently sets the initial value of autoescaping based on the
    filename of the template.  This is the recommended way to configure
    autoescaping if you do not want to write a custom function yourself.

    If you want to enable it for all templates created from strings or
    for all templates with `.html` and `.xml` extensions::

        from jinja2 import Environment, select_autoescape
        env = Environment(autoescape=select_autoescape(
            enabled_extensions=('html', 'xml'),
            default_for_string=True,
        ))

    Example configuration to turn it on at all times except if the template
    ends with `.txt`::

        from jinja2 import Environment, select_autoescape
        env = Environment(autoescape=select_autoescape(
            disabled_extensions=('txt',),
            default_for_string=True,
            default=True,
        ))

    The `enabled_extensions` is an iterable of all the extensions that
    autoescaping should be enabled for.  Likewise `disabled_extensions` is
    a list of all templates it should be disabled for.  If a template is
    loaded from a string then the default from `default_for_string` is used.
    If nothing matches then the initial value of autoescaping is set to the
    value of `default`.

    For security reasons this function operates case insensitive.

    .. versionadded:: 2.9
  summary: Intelligently sets the initial value of autoescaping based on the
  signatures:
  - kind: positional
    name: enabled_extensions
    default: ('html', 'htm', 'xml')
    rest: false
  - kind: positional
    name: disabled_extensions
    default: ()
    rest: false
  - kind: positional
    name: default_for_string
    default: 'True'
    rest: false
  - kind: positional
    name: default
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: url_quote
  kind: function
  ns: jinja2.utils
  description: |-
    Quote a string for use in a URL using the given charset.

    :param obj: String or bytes to quote. Other types are converted to
        string then encoded to bytes using the given charset.
    :param charset: Encode text to bytes using this charset.
    :param for_qs: Quote "/" and use "+" for spaces.
  summary: Quote a string for use in a URL using the given charset
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: charset
    default: utf-8
    rest: false
  - kind: positional
    name: for_qs
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: urlize
  kind: function
  ns: jinja2.utils
  description: |-
    Convert URLs in text into clickable links.

    This may not recognize links in some situations. Usually, a more
    comprehensive formatter, such as a Markdown library, is a better
    choice.

    Works on ``http://``, ``https://``, ``www.``, ``mailto:``, and email
    addresses. Links with trailing punctuation (periods, commas, closing
    parentheses) and leading punctuation (opening parentheses) are
    recognized excluding the punctuation. Email addresses that include
    header fields are not recognized (for example,
    ``mailto:address@example.com?cc=copy@example.com``).

    :param text: Original text containing URLs to link.
    :param trim_url_limit: Shorten displayed URL values to this length.
    :param target: Add the ``target`` attribute to links.
    :param rel: Add the ``rel`` attribute to links.
    :param extra_schemes: Recognize URLs that start with these schemes
        in addition to the default behavior.

    .. versionchanged:: 3.0
        The ``extra_schemes`` parameter was added.

    .. versionchanged:: 3.0
        Generate ``https://`` links for URLs without a scheme.

    .. versionchanged:: 3.0
        The parsing rules were updated. Recognize email addresses with
        or without the ``mailto:`` scheme. Validate IP addresses. Ignore
        parentheses and brackets in more cases.
  summary: Convert URLs in text into clickable links
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: trim_url_limit
    default: None
    rest: false
  - kind: positional
    name: rel
    default: None
    rest: false
  - kind: positional
    name: target
    default: None
    rest: false
  - kind: positional
    name: extra_schemes
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: jinja2.visitor
  kind: module
  ns: null
  description: |-
    API for traversing the AST nodes. Implemented by the compiler and
    meta introspection.
  summary: API for traversing the AST nodes
  signatures: null
  inherits_from: null
