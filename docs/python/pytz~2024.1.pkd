---
name: pytz
text_format: rst
generator: src:python
generator_command: src:python use "pytz"
version: '2024.1'
summary: World timezone definitions, modern and historical
description: |
  pytz - World Timezone Definitions for Python
  ============================================

  :Author: Stuart Bishop <stuart@stuartbishop.net>

  Introduction
  ~~~~~~~~~~~~

  pytz brings the Olson tz database into Python. This library allows
  accurate and cross platform timezone calculations using Python 2.4
  or higher. It also solves the issue of ambiguous times at the end
  of daylight saving time, which you can read more about in the Python
  Library Reference (``datetime.tzinfo``).

  Almost all of the Olson timezones are supported.

  .. note::

      Projects using Python 3.9 or later should be using the support
      now included as part of the standard library, and third party
      packages work with it such as `tzdata <https://pypi.org/project/tzdata/>`_.
      pytz offers no advantages beyond backwards compatibility with
      code written for earlier versions of Python.

  .. note::

      This library differs from the documented Python API for
      tzinfo implementations; if you want to create local wallclock
      times you need to use the ``localize()`` method documented in this
      document. In addition, if you perform date arithmetic on local
      times that cross DST boundaries, the result may be in an incorrect
      timezone (ie. subtract 1 minute from 2002-10-27 1:00 EST and you get
      2002-10-27 0:59 EST instead of the correct 2002-10-27 1:59 EDT). A
      ``normalize()`` method is provided to correct this. Unfortunately these
      issues cannot be resolved without modifying the Python datetime
      implementation (see PEP-431).


  Installation
  ~~~~~~~~~~~~

  This package can either be installed using ``pip`` or from a tarball using the
  standard Python distutils.

  If you are installing using ``pip``, you don't need to download anything as the
  latest version will be downloaded for you from PyPI::

      pip install pytz

  If you are installing from a tarball, run the following command as an
  administrative user::

      python setup.py install


  pytz for Enterprise
  ~~~~~~~~~~~~~~~~~~~

  Available as part of the Tidelift Subscription.

  The maintainers of pytz and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. `Learn more. <https://tidelift.com/subscription/pkg/pypi-pytz?utm_source=pypi-pytz&utm_medium=referral&utm_campaign=enterprise&utm_term=repo>`_.


  Example & Usage
  ~~~~~~~~~~~~~~~

  Localized times and date arithmetic
  -----------------------------------

  >>> from datetime import datetime, timedelta
  >>> from pytz import timezone
  >>> import pytz
  >>> utc = pytz.utc
  >>> utc.zone
  'UTC'
  >>> eastern = timezone('US/Eastern')
  >>> eastern.zone
  'US/Eastern'
  >>> amsterdam = timezone('Europe/Amsterdam')
  >>> fmt = '%Y-%m-%d %H:%M:%S %Z%z'

  This library only supports two ways of building a localized time. The
  first is to use the ``localize()`` method provided by the pytz library.
  This is used to localize a naive datetime (datetime with no timezone
  information):

  >>> loc_dt = eastern.localize(datetime(2002, 10, 27, 6, 0, 0))
  >>> print(loc_dt.strftime(fmt))
  2002-10-27 06:00:00 EST-0500

  The second way of building a localized time is by converting an existing
  localized time using the standard ``astimezone()`` method:

  >>> ams_dt = loc_dt.astimezone(amsterdam)
  >>> ams_dt.strftime(fmt)
  '2002-10-27 12:00:00 CET+0100'

  Unfortunately using the tzinfo argument of the standard datetime
  constructors ''does not work'' with pytz for many timezones.

  >>> datetime(2002, 10, 27, 12, 0, 0, tzinfo=amsterdam).strftime(fmt)  # /!\ Does not work this way!
  '2002-10-27 12:00:00 LMT+0018'

  It is safe for timezones without daylight saving transitions though, such
  as UTC:

  >>> datetime(2002, 10, 27, 12, 0, 0, tzinfo=pytz.utc).strftime(fmt)  # /!\ Not recommended except for UTC
  '2002-10-27 12:00:00 UTC+0000'

  The preferred way of dealing with times is to always work in UTC,
  converting to localtime only when generating output to be read
  by humans.

  >>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)
  >>> loc_dt = utc_dt.astimezone(eastern)
  >>> loc_dt.strftime(fmt)
  '2002-10-27 01:00:00 EST-0500'

  This library also allows you to do date arithmetic using local
  times, although it is more complicated than working in UTC as you
  need to use the ``normalize()`` method to handle daylight saving time
  and other timezone transitions. In this example, ``loc_dt`` is set
  to the instant when daylight saving time ends in the US/Eastern
  timezone.

  >>> before = loc_dt - timedelta(minutes=10)
  >>> before.strftime(fmt)
  '2002-10-27 00:50:00 EST-0500'
  >>> eastern.normalize(before).strftime(fmt)
  '2002-10-27 01:50:00 EDT-0400'
  >>> after = eastern.normalize(before + timedelta(minutes=20))
  >>> after.strftime(fmt)
  '2002-10-27 01:10:00 EST-0500'

  Creating local times is also tricky, and the reason why working with
  local times is not recommended. Unfortunately, you cannot just pass
  a ``tzinfo`` argument when constructing a datetime (see the next
  section for more details)

  >>> dt = datetime(2002, 10, 27, 1, 30, 0)
  >>> dt1 = eastern.localize(dt, is_dst=True)
  >>> dt1.strftime(fmt)
  '2002-10-27 01:30:00 EDT-0400'
  >>> dt2 = eastern.localize(dt, is_dst=False)
  >>> dt2.strftime(fmt)
  '2002-10-27 01:30:00 EST-0500'

  Converting between timezones is more easily done, using the
  standard astimezone method.

  >>> utc_dt = datetime.fromtimestamp(1143408899, tz=utc)
  >>> utc_dt.strftime(fmt)
  '2006-03-26 21:34:59 UTC+0000'
  >>> au_tz = timezone('Australia/Sydney')
  >>> au_dt = utc_dt.astimezone(au_tz)
  >>> au_dt.strftime(fmt)
  '2006-03-27 08:34:59 AEDT+1100'
  >>> utc_dt2 = au_dt.astimezone(utc)
  >>> utc_dt2.strftime(fmt)
  '2006-03-26 21:34:59 UTC+0000'
  >>> utc_dt == utc_dt2
  True

  You can take shortcuts when dealing with the UTC side of timezone
  conversions. ``normalize()`` and ``localize()`` are not really
  necessary when there are no daylight saving time transitions to
  deal with.

  >>> utc_dt = datetime.fromtimestamp(1143408899, tz=utc)
  >>> utc_dt.strftime(fmt)
  '2006-03-26 21:34:59 UTC+0000'
  >>> au_tz = timezone('Australia/Sydney')
  >>> au_dt = au_tz.normalize(utc_dt.astimezone(au_tz))
  >>> au_dt.strftime(fmt)
  '2006-03-27 08:34:59 AEDT+1100'
  >>> utc_dt2 = au_dt.astimezone(utc)
  >>> utc_dt2.strftime(fmt)
  '2006-03-26 21:34:59 UTC+0000'


  ``tzinfo`` API
  --------------

  The ``tzinfo`` instances returned by the ``timezone()`` function have
  been extended to cope with ambiguous times by adding an ``is_dst``
  parameter to the ``utcoffset()``, ``dst()`` && ``tzname()`` methods.

  >>> tz = timezone('America/St_Johns')

  >>> normal = datetime(2009, 9, 1)
  >>> ambiguous = datetime(2009, 10, 31, 23, 30)

  The ``is_dst`` parameter is ignored for most timestamps. It is only used
  during DST transition ambiguous periods to resolve that ambiguity.

  >>> print(tz.utcoffset(normal, is_dst=True))
  -1 day, 21:30:00
  >>> print(tz.dst(normal, is_dst=True))
  1:00:00
  >>> tz.tzname(normal, is_dst=True)
  'NDT'

  >>> print(tz.utcoffset(ambiguous, is_dst=True))
  -1 day, 21:30:00
  >>> print(tz.dst(ambiguous, is_dst=True))
  1:00:00
  >>> tz.tzname(ambiguous, is_dst=True)
  'NDT'

  >>> print(tz.utcoffset(normal, is_dst=False))
  -1 day, 21:30:00
  >>> tz.dst(normal, is_dst=False).seconds
  3600
  >>> tz.tzname(normal, is_dst=False)
  'NDT'

  >>> print(tz.utcoffset(ambiguous, is_dst=False))
  -1 day, 20:30:00
  >>> tz.dst(ambiguous, is_dst=False)
  datetime.timedelta(0)
  >>> tz.tzname(ambiguous, is_dst=False)
  'NST'

  If ``is_dst`` is not specified, ambiguous timestamps will raise
  an ``pytz.exceptions.AmbiguousTimeError`` exception.

  >>> print(tz.utcoffset(normal))
  -1 day, 21:30:00
  >>> print(tz.dst(normal))
  1:00:00
  >>> tz.tzname(normal)
  'NDT'

  >>> import pytz.exceptions
  >>> try:
  ...     tz.utcoffset(ambiguous)
  ... except pytz.exceptions.AmbiguousTimeError:
  ...     print('pytz.exceptions.AmbiguousTimeError: %s' % ambiguous)
  pytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00
  >>> try:
  ...     tz.dst(ambiguous)
  ... except pytz.exceptions.AmbiguousTimeError:
  ...     print('pytz.exceptions.AmbiguousTimeError: %s' % ambiguous)
  pytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00
  >>> try:
  ...     tz.tzname(ambiguous)
  ... except pytz.exceptions.AmbiguousTimeError:
  ...     print('pytz.exceptions.AmbiguousTimeError: %s' % ambiguous)
  pytz.exceptions.AmbiguousTimeError: 2009-10-31 23:30:00


  Problems with Localtime
  ~~~~~~~~~~~~~~~~~~~~~~~

  The major problem we have to deal with is that certain datetimes
  may occur twice in a year. For example, in the US/Eastern timezone
  on the last Sunday morning in October, the following sequence
  happens:

      - 01:00 EDT occurs
      - 1 hour later, instead of 2:00am the clock is turned back 1 hour
        and 01:00 happens again (this time 01:00 EST)

  In fact, every instant between 01:00 and 02:00 occurs twice. This means
  that if you try and create a time in the 'US/Eastern' timezone
  the standard datetime syntax, there is no way to specify if you meant
  before of after the end-of-daylight-saving-time transition. Using the
  pytz custom syntax, the best you can do is make an educated guess:

  >>> loc_dt = eastern.localize(datetime(2002, 10, 27, 1, 30, 00))
  >>> loc_dt.strftime(fmt)
  '2002-10-27 01:30:00 EST-0500'

  As you can see, the system has chosen one for you and there is a 50%
  chance of it being out by one hour. For some applications, this does
  not matter. However, if you are trying to schedule meetings with people
  in different timezones or analyze log files it is not acceptable.

  The best and simplest solution is to stick with using UTC.  The pytz
  package encourages using UTC for internal timezone representation by
  including a special UTC implementation based on the standard Python
  reference implementation in the Python documentation.

  The UTC timezone unpickles to be the same instance, and pickles to a
  smaller size than other pytz tzinfo instances.  The UTC implementation
  can be obtained as pytz.utc, pytz.UTC, or pytz.timezone('UTC').

  >>> import pickle, pytz
  >>> dt = datetime(2005, 3, 1, 14, 13, 21, tzinfo=utc)
  >>> naive = dt.replace(tzinfo=None)
  >>> p = pickle.dumps(dt, 1)
  >>> naive_p = pickle.dumps(naive, 1)
  >>> len(p) - len(naive_p)
  17
  >>> new = pickle.loads(p)
  >>> new == dt
  True
  >>> new is dt
  False
  >>> new.tzinfo is dt.tzinfo
  True
  >>> pytz.utc is pytz.UTC is pytz.timezone('UTC')
  True

  Note that some other timezones are commonly thought of as the same (GMT,
  Greenwich, Universal, etc.). The definition of UTC is distinct from these
  other timezones, and they are not equivalent. For this reason, they will
  not compare the same in Python.

  >>> utc == pytz.timezone('GMT')
  False

  See the section `What is UTC`_, below.

  If you insist on working with local times, this library provides a
  facility for constructing them unambiguously:

  >>> loc_dt = datetime(2002, 10, 27, 1, 30, 00)
  >>> est_dt = eastern.localize(loc_dt, is_dst=True)
  >>> edt_dt = eastern.localize(loc_dt, is_dst=False)
  >>> print(est_dt.strftime(fmt) + ' / ' + edt_dt.strftime(fmt))
  2002-10-27 01:30:00 EDT-0400 / 2002-10-27 01:30:00 EST-0500

  If you pass None as the is_dst flag to localize(), pytz will refuse to
  guess and raise exceptions if you try to build ambiguous or non-existent
  times.

  For example, 1:30am on 27th Oct 2002 happened twice in the US/Eastern
  timezone when the clocks where put back at the end of Daylight Saving
  Time:

  >>> dt = datetime(2002, 10, 27, 1, 30, 00)
  >>> try:
  ...     eastern.localize(dt, is_dst=None)
  ... except pytz.exceptions.AmbiguousTimeError:
  ...     print('pytz.exceptions.AmbiguousTimeError: %s' % dt)
  pytz.exceptions.AmbiguousTimeError: 2002-10-27 01:30:00

  Similarly, 2:30am on 7th April 2002 never happened at all in the
  US/Eastern timezone, as the clocks where put forward at 2:00am skipping
  the entire hour:

  >>> dt = datetime(2002, 4, 7, 2, 30, 00)
  >>> try:
  ...     eastern.localize(dt, is_dst=None)
  ... except pytz.exceptions.NonExistentTimeError:
  ...     print('pytz.exceptions.NonExistentTimeError: %s' % dt)
  pytz.exceptions.NonExistentTimeError: 2002-04-07 02:30:00

  Both of these exceptions share a common base class to make error handling
  easier:

  >>> isinstance(pytz.AmbiguousTimeError(), pytz.InvalidTimeError)
  True
  >>> isinstance(pytz.NonExistentTimeError(), pytz.InvalidTimeError)
  True


  A special case is where countries change their timezone definitions
  with no daylight savings time switch. For example, in 1915 Warsaw
  switched from Warsaw time to Central European time with no daylight savings
  transition. So at the stroke of midnight on August 5th 1915 the clocks
  were wound back 24 minutes creating an ambiguous time period that cannot
  be specified without referring to the timezone abbreviation or the
  actual UTC offset. In this case midnight happened twice, neither time
  during a daylight saving time period. pytz handles this transition by
  treating the ambiguous period before the switch as daylight savings
  time, and the ambiguous period after as standard time.


  >>> warsaw = pytz.timezone('Europe/Warsaw')
  >>> amb_dt1 = warsaw.localize(datetime(1915, 8, 4, 23, 59, 59), is_dst=True)
  >>> amb_dt1.strftime(fmt)
  '1915-08-04 23:59:59 WMT+0124'
  >>> amb_dt2 = warsaw.localize(datetime(1915, 8, 4, 23, 59, 59), is_dst=False)
  >>> amb_dt2.strftime(fmt)
  '1915-08-04 23:59:59 CET+0100'
  >>> switch_dt = warsaw.localize(datetime(1915, 8, 5, 00, 00, 00), is_dst=False)
  >>> switch_dt.strftime(fmt)
  '1915-08-05 00:00:00 CET+0100'
  >>> str(switch_dt - amb_dt1)
  '0:24:01'
  >>> str(switch_dt - amb_dt2)
  '0:00:01'

  The best way of creating a time during an ambiguous time period is
  by converting from another timezone such as UTC:

  >>> utc_dt = datetime(1915, 8, 4, 22, 36, tzinfo=pytz.utc)
  >>> utc_dt.astimezone(warsaw).strftime(fmt)
  '1915-08-04 23:36:00 CET+0100'

  The standard Python way of handling all these ambiguities is not to
  handle them, such as demonstrated in this example using the US/Eastern
  timezone definition from the Python documentation (Note that this
  implementation only works for dates between 1987 and 2006 - it is
  included for tests only!):

  >>> from pytz.reference import Eastern # pytz.reference only for tests
  >>> dt = datetime(2002, 10, 27, 0, 30, tzinfo=Eastern)
  >>> str(dt)
  '2002-10-27 00:30:00-04:00'
  >>> str(dt + timedelta(hours=1))
  '2002-10-27 01:30:00-05:00'
  >>> str(dt + timedelta(hours=2))
  '2002-10-27 02:30:00-05:00'
  >>> str(dt + timedelta(hours=3))
  '2002-10-27 03:30:00-05:00'

  Notice the first two results? At first glance you might think they are
  correct, but taking the UTC offset into account you find that they are
  actually two hours appart instead of the 1 hour we asked for.

  >>> from pytz.reference import UTC # pytz.reference only for tests
  >>> str(dt.astimezone(UTC))
  '2002-10-27 04:30:00+00:00'
  >>> str((dt + timedelta(hours=1)).astimezone(UTC))
  '2002-10-27 06:30:00+00:00'


  Country Information
  ~~~~~~~~~~~~~~~~~~~

  A mechanism is provided to access the timezones commonly in use
  for a particular country, looked up using the ISO 3166 country code.
  It returns a list of strings that can be used to retrieve the relevant
  tzinfo instance using ``pytz.timezone()``:

  >>> print(' '.join(pytz.country_timezones['nz']))
  Pacific/Auckland Pacific/Chatham

  The Olson database comes with a ISO 3166 country code to English country
  name mapping that pytz exposes as a dictionary:

  >>> print(pytz.country_names['nz'])
  New Zealand


  What is UTC
  ~~~~~~~~~~~

  'UTC' is `Coordinated Universal Time`_. It is a successor to, but distinct
  from, Greenwich Mean Time (GMT) and the various definitions of Universal
  Time. UTC is now the worldwide standard for regulating clocks and time
  measurement.

  All other timezones are defined relative to UTC, and include offsets like
  UTC+0800 - hours to add or subtract from UTC to derive the local time. No
  daylight saving time occurs in UTC, making it a useful timezone to perform
  date arithmetic without worrying about the confusion and ambiguities caused
  by daylight saving time transitions, your country changing its timezone, or
  mobile computers that roam through multiple timezones.

  ..  _Coordinated Universal Time: https://en.wikipedia.org/wiki/Coordinated_Universal_Time


  Helpers
  ~~~~~~~

  There are two lists of timezones provided.

  ``all_timezones`` is the exhaustive list of the timezone names that can
  be used.

  >>> from pytz import all_timezones
  >>> len(all_timezones) >= 500
  True
  >>> 'Etc/Greenwich' in all_timezones
  True

  ``common_timezones`` is a list of useful, current timezones. It doesn't
  contain deprecated zones or historical zones, except for a few I've
  deemed in common usage, such as US/Eastern (open a bug report if you
  think other timezones are deserving of being included here). It is also
  a sequence of strings.

  >>> from pytz import common_timezones
  >>> len(common_timezones) < len(all_timezones)
  True
  >>> 'Etc/Greenwich' in common_timezones
  False
  >>> 'Australia/Melbourne' in common_timezones
  True
  >>> 'US/Eastern' in common_timezones
  True
  >>> 'Canada/Eastern' in common_timezones
  True
  >>> 'Australia/Yancowinna' in all_timezones
  True
  >>> 'Australia/Yancowinna' in common_timezones
  False

  Both ``common_timezones`` and ``all_timezones`` are alphabetically
  sorted:

  >>> common_timezones_dupe = common_timezones[:]
  >>> common_timezones_dupe.sort()
  >>> common_timezones == common_timezones_dupe
  True
  >>> all_timezones_dupe = all_timezones[:]
  >>> all_timezones_dupe.sort()
  >>> all_timezones == all_timezones_dupe
  True

  ``all_timezones`` and ``common_timezones`` are also available as sets.

  >>> from pytz import all_timezones_set, common_timezones_set
  >>> 'US/Eastern' in all_timezones_set
  True
  >>> 'US/Eastern' in common_timezones_set
  True
  >>> 'Australia/Victoria' in common_timezones_set
  False

  You can also retrieve lists of timezones used by particular countries
  using the ``country_timezones()`` function. It requires an ISO-3166
  two letter country code.

  >>> from pytz import country_timezones
  >>> print(' '.join(country_timezones('ch')))
  Europe/Zurich
  >>> print(' '.join(country_timezones('CH')))
  Europe/Zurich


  Internationalization - i18n/l10n
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Pytz is an interface to the IANA database, which uses ASCII names. The `Unicode  Consortium's Unicode Locales (CLDR) <http://cldr.unicode.org>`_
  project provides translations. Python packages such as
  `Babel <https://babel.pocoo.org/en/latest/api/dates.html#timezone-functionality>`_
  and Thomas Khyn's `l18n <https://pypi.org/project/l18n/>`_ package can be used
  to access these translations from Python.


  License
  ~~~~~~~

  MIT license.

  This code is also available as part of Zope 3 under the Zope Public
  License,  Version 2.1 (ZPL).

  I'm happy to relicense this code if necessary for inclusion in other
  open source projects.


  Latest Versions
  ~~~~~~~~~~~~~~~

  This package will be updated after releases of the Olson timezone
  database.  The latest version can be downloaded from the `Python Package
  Index <https://pypi.org/project/pytz/>`_.  The code that is used
  to generate this distribution is hosted on Github and available
  using git::

      git clone https://github.com/stub42/pytz.git

  Announcements of new releases are made on
  `Launchpad <https://launchpad.net/pytz>`_, and the
  `Atom feed <http://feeds.launchpad.net/pytz/announcements.atom>`_
  hosted there.


  Bugs, Feature Requests & Patches
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  Bugs should be reported on `Github <https://github.com/stub42/pytz/issues>`_.
  Feature requests are unlikely to be considered, and efforts instead directed
  to timezone support now built into Python or packages that work with it.


  Security Issues
  ~~~~~~~~~~~~~~~

  Reports about security issues can be made via `Tidelift <https://tidelift.com/security>`_.


  Issues & Limitations
  ~~~~~~~~~~~~~~~~~~~~

  - This project is in maintenance mode. Projects using Python 3.9 or later
    are best served by using the timezone functionaly now included in core
    Python and packages that work with it such as `tzdata <https://pypi.org/project/tzdata/>`_.

  - Offsets from UTC are rounded to the nearest whole minute, so timezones
    such as Europe/Amsterdam pre 1937 will be up to 30 seconds out. This
    was a limitation of the Python datetime library.

  - If you think a timezone definition is incorrect, I probably can't fix
    it. pytz is a direct translation of the Olson timezone database, and
    changes to the timezone definitions need to be made to this source.
    If you find errors they should be reported to the time zone mailing
    list, linked from http://www.iana.org/time-zones.


  Further Reading
  ~~~~~~~~~~~~~~~

  More info than you want to know about timezones:
  https://data.iana.org/time-zones/tz-link.html


  Contact
  ~~~~~~~

  Stuart Bishop <stuart@stuartbishop.net>
homepage: http://pythonhosted.org/pytz
license: MIT

---
- name: pytz
  kind: module
  ns: null
  description: |-
    datetime.tzinfo timezone definitions generated from the
    Olson timezone database:

        ftp://elsie.nci.nih.gov/pub/tz*.tar.gz

    See the datetime section of the Python Library Reference for information
    on how to use these modules.
  summary: datetime
  signatures: null
  inherits_from: null
- name: timezone
  kind: function
  ns: pytz
  description: |-
    Return a datetime.tzinfo implementation for the given timezone

    >>> from datetime import datetime, timedelta
    >>> utc = timezone('UTC')
    >>> eastern = timezone('US/Eastern')
    >>> eastern.zone
    'US/Eastern'
    >>> timezone(unicode('US/Eastern')) is eastern
    True
    >>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)
    >>> loc_dt = utc_dt.astimezone(eastern)
    >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
    >>> loc_dt.strftime(fmt)
    '2002-10-27 01:00:00 EST (-0500)'
    >>> (loc_dt - timedelta(minutes=10)).strftime(fmt)
    '2002-10-27 00:50:00 EST (-0500)'
    >>> eastern.normalize(loc_dt - timedelta(minutes=10)).strftime(fmt)
    '2002-10-27 01:50:00 EDT (-0400)'
    >>> (loc_dt + timedelta(minutes=10)).strftime(fmt)
    '2002-10-27 01:10:00 EST (-0500)'

    Raises UnknownTimeZoneError if passed an unknown zone.

    >>> try:
    ...     timezone('Asia/Shangri-La')
    ... except UnknownTimeZoneError:
    ...     print('Unknown')
    Unknown

    >>> try:
    ...     timezone(unicode('\N{TRADE MARK SIGN}'))
    ... except UnknownTimeZoneError:
    ...     print('Unknown')
    Unknown
  summary: Return a datetime
  signatures:
  - kind: positional
    name: zone
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: utc
  kind: const
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: country_timezones
  kind: callable
  ns: pytz
  description: |-
    Map ISO 3166 country code to a list of timezone names commonly used
    in that country.

    iso3166_code is the two letter code used to identify the country.

    >>> def print_list(list_of_strings):
    ...     'We use a helper so doctests work under Python 2.3 -> 3.x'
    ...     for s in list_of_strings:
    ...         print(s)

    >>> print_list(country_timezones['nz'])
    Pacific/Auckland
    Pacific/Chatham
    >>> print_list(country_timezones['ch'])
    Europe/Zurich
    >>> print_list(country_timezones['CH'])
    Europe/Zurich
    >>> print_list(country_timezones[unicode('ch')])
    Europe/Zurich
    >>> print_list(country_timezones['XXX'])
    Traceback (most recent call last):
    ...
    KeyError: 'XXX'

    Previously, this information was exposed as a function rather than a
    dictionary. This is still supported::

    >>> print_list(country_timezones('nz'))
    Pacific/Auckland
    Pacific/Chatham
  summary: Map ISO 3166 country code to a list of timezone names commonly used
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: iso3166_code
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: country_names
  kind: const
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AmbiguousTimeError
  kind: class
  ns: pytz
  description: |-
    Exception raised when attempting to create an ambiguous wallclock time.

    At the end of a DST transition period, a particular wallclock time will
    occur twice (once before the clocks are set back, once after). Both
    possibilities may be correct, unless further information is supplied.

    See DstTzInfo.normalize() for more info
  summary: Exception raised when attempting to create an ambiguous wallclock time
  signatures: null
  inherits_from:
  - <class 'pytz.exceptions.InvalidTimeError'>
  - <class 'pytz.exceptions.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: AmbiguousTimeError.add_note
  kind: callable
  ns: pytz
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: AmbiguousTimeError.args
  kind: property
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AmbiguousTimeError.with_traceback
  kind: callable
  ns: pytz
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidTimeError
  kind: class
  ns: pytz
  description: Base class for invalid time exceptions.
  summary: Base class for invalid time exceptions
  signatures: null
  inherits_from:
  - <class 'pytz.exceptions.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InvalidTimeError.add_note
  kind: callable
  ns: pytz
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidTimeError.args
  kind: property
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InvalidTimeError.with_traceback
  kind: callable
  ns: pytz
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: NonExistentTimeError
  kind: class
  ns: pytz
  description: |-
    Exception raised when attempting to create a wallclock time that
    cannot exist.

    At the start of a DST transition period, the wallclock time jumps forward.
    The instants jumped over never occur.
  summary: Exception raised when attempting to create a wallclock time that
  signatures: null
  inherits_from:
  - <class 'pytz.exceptions.InvalidTimeError'>
  - <class 'pytz.exceptions.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NonExistentTimeError.add_note
  kind: callable
  ns: pytz
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NonExistentTimeError.args
  kind: property
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NonExistentTimeError.with_traceback
  kind: callable
  ns: pytz
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: UnknownTimeZoneError
  kind: class
  ns: pytz
  description: |-
    Exception raised when pytz is passed an unknown timezone.

    >>> isinstance(UnknownTimeZoneError(), LookupError)
    True

    This class is actually a subclass of KeyError to provide backwards
    compatibility with code relying on the undocumented behavior of earlier
    pytz releases.

    >>> isinstance(UnknownTimeZoneError(), KeyError)
    True

    And also a subclass of pytz.exceptions.Error, as are other pytz
    exceptions.

    >>> isinstance(UnknownTimeZoneError(), Error)
    True
  summary: Exception raised when pytz is passed an unknown timezone
  signatures: null
  inherits_from:
  - <class 'KeyError'>
  - <class 'LookupError'>
  - <class 'pytz.exceptions.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: UnknownTimeZoneError.add_note
  kind: callable
  ns: pytz
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: UnknownTimeZoneError.args
  kind: property
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UnknownTimeZoneError.with_traceback
  kind: callable
  ns: pytz
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: all_timezones
  kind: const
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: all_timezones_set
  kind: const
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: common_timezones
  kind: const
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: common_timezones_set
  kind: const
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseTzInfo
  kind: class
  ns: pytz
  description: Abstract base class for time zone info objects.
  summary: Abstract base class for time zone info objects
  signatures: null
  inherits_from:
  - <class 'datetime.tzinfo'>
- name: BaseTzInfo.dst
  kind: callable
  ns: pytz
  description: datetime -> DST offset as timedelta positive east of UTC.
  summary: datetime -> DST offset as timedelta positive east of UTC
  signatures: null
  inherits_from: null
- name: BaseTzInfo.fromutc
  kind: callable
  ns: pytz
  description: datetime in UTC -> datetime in local time.
  summary: datetime in UTC -> datetime in local time
  signatures: null
  inherits_from: null
- name: BaseTzInfo.tzname
  kind: callable
  ns: pytz
  description: datetime -> string name of time zone.
  summary: datetime -> string name of time zone
  signatures: null
  inherits_from: null
- name: BaseTzInfo.utcoffset
  kind: callable
  ns: pytz
  description: datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
  summary: datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
  signatures: null
  inherits_from: null
- name: BaseTzInfo.zone
  kind: property
  ns: pytz
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FixedOffset
  kind: function
  ns: pytz
  description: |-
    return a fixed-offset timezone based off a number of minutes.

        >>> one = FixedOffset(-330)
        >>> one
        pytz.FixedOffset(-330)
        >>> str(one.utcoffset(datetime.datetime.now()))
        '-1 day, 18:30:00'
        >>> str(one.dst(datetime.datetime.now()))
        '0:00:00'

        >>> two = FixedOffset(1380)
        >>> two
        pytz.FixedOffset(1380)
        >>> str(two.utcoffset(datetime.datetime.now()))
        '23:00:00'
        >>> str(two.dst(datetime.datetime.now()))
        '0:00:00'

    The datetime.timedelta must be between the range of -1 and 1 day,
    non-inclusive.

        >>> FixedOffset(1440)
        Traceback (most recent call last):
        ...
        ValueError: ('absolute offset is too large', 1440)

        >>> FixedOffset(-1440)
        Traceback (most recent call last):
        ...
        ValueError: ('absolute offset is too large', -1440)

    An offset of 0 is special-cased to return UTC.

        >>> FixedOffset(0) is UTC
        True

    There should always be only one instance of a FixedOffset per timedelta.
    This should be true for multiple creation calls.

        >>> FixedOffset(-330) is one
        True
        >>> FixedOffset(1380) is two
        True

    It should also be true for pickling.

        >>> import pickle
        >>> pickle.loads(pickle.dumps(one)) is one
        True
        >>> pickle.loads(pickle.dumps(two)) is two
        True
  summary: return a fixed-offset timezone based off a number of minutes
  signatures:
  - kind: positional
    name: offset
    default: null
    rest: false
  - kind: positional
    name: _tzinfos
    default: '{}'
    rest: false
  - type: '?'
  inherits_from: null
- name: pytz.exceptions
  kind: module
  ns: null
  description: Custom exceptions raised by pytz.
  summary: Custom exceptions raised by pytz
  signatures: null
  inherits_from: null
- name: pytz.lazy
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DictMixin
  kind: class
  ns: pytz.lazy
  description: |-
    A Mapping is a generic container for associating key/value
    pairs.

    This class provides concrete generic implementations of all
    methods except for __getitem__, __iter__, and __len__.
  summary: A Mapping is a generic container for associating key/value
  signatures:
  - type: Mapping
  inherits_from:
  - <class 'collections.abc.Collection'>
  - <class 'collections.abc.Sized'>
  - <class 'collections.abc.Iterable'>
  - <class 'collections.abc.Container'>
- name: DictMixin.get
  kind: method
  ns: pytz.lazy
  description: D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DictMixin.items
  kind: method
  ns: pytz.lazy
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DictMixin.keys
  kind: method
  ns: pytz.lazy
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DictMixin.values
  kind: method
  ns: pytz.lazy
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyDict
  kind: class
  ns: pytz.lazy
  description: Dictionary populated on first use.
  summary: Dictionary populated on first use
  signatures:
  - type: LazyDict
  inherits_from:
  - <class 'collections.abc.Mapping'>
  - <class 'collections.abc.Collection'>
  - <class 'collections.abc.Sized'>
  - <class 'collections.abc.Iterable'>
  - <class 'collections.abc.Container'>
- name: LazyDict.data
  kind: property
  ns: pytz.lazy
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LazyDict.get
  kind: method
  ns: pytz.lazy
  description: D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyDict.items
  kind: method
  ns: pytz.lazy
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyDict.keys
  kind: method
  ns: pytz.lazy
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyDict.values
  kind: method
  ns: pytz.lazy
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList
  kind: class
  ns: pytz.lazy
  description: List populated on first use.
  summary: List populated on first use
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: fill_iter
    default: None
    rest: false
  - type: LazyList
  inherits_from:
  - <class 'list'>
- name: LazyList.append
  kind: callable
  ns: pytz.lazy
  description: Append object to the end of the list.
  summary: Append object to the end of the list
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: object
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.clear
  kind: callable
  ns: pytz.lazy
  description: Remove all items from list.
  summary: Remove all items from list
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.copy
  kind: callable
  ns: pytz.lazy
  description: Return a shallow copy of the list.
  summary: Return a shallow copy of the list
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.count
  kind: callable
  ns: pytz.lazy
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.extend
  kind: callable
  ns: pytz.lazy
  description: Extend list by appending elements from the iterable.
  summary: Extend list by appending elements from the iterable
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.index
  kind: callable
  ns: pytz.lazy
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: start
    default: '0'
    rest: false
  - kind: positional
    name: stop
    default: '9223372036854775807'
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.insert
  kind: callable
  ns: pytz.lazy
  description: Insert object before index.
  summary: Insert object before index
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: object
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.pop
  kind: callable
  ns: pytz.lazy
  description: |-
    Remove and return item at index (default last).

    Raises IndexError if list is empty or index is out of range.
  summary: Remove and return item at index (default last)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.remove
  kind: callable
  ns: pytz.lazy
  description: |-
    Remove first occurrence of value.

    Raises ValueError if the value is not present.
  summary: Remove first occurrence of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.reverse
  kind: callable
  ns: pytz.lazy
  description: Reverse *IN PLACE*.
  summary: Reverse *IN PLACE*
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyList.sort
  kind: callable
  ns: pytz.lazy
  description: |-
    Sort the list in ascending order and return None.

    The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
    order of two equal elements is maintained).

    If a key function is given, apply it once to each list item and sort them,
    ascending or descending, according to their function values.

    The reverse flag can be set to sort in descending order.
  summary: Sort the list in ascending order and return None
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - name: key
    default: None
    rest: false
    kind: kw-only
  - name: reverse
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: LazySet
  kind: class
  ns: pytz.lazy
  description: Set populated on first use.
  summary: Set populated on first use
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: fill_iter
    default: None
    rest: false
  - type: LazySet
  inherits_from:
  - <class 'set'>
- name: LazySet.add
  kind: callable
  ns: pytz.lazy
  description: |-
    Add an element to a set.

    This has no effect if the element is already present.
  summary: Add an element to a set
  signatures: null
  inherits_from: null
- name: LazySet.clear
  kind: callable
  ns: pytz.lazy
  description: Remove all elements from this set.
  summary: Remove all elements from this set
  signatures: null
  inherits_from: null
- name: LazySet.copy
  kind: callable
  ns: pytz.lazy
  description: Return a shallow copy of a set.
  summary: Return a shallow copy of a set
  signatures: null
  inherits_from: null
- name: LazySet.difference
  kind: callable
  ns: pytz.lazy
  description: |-
    Return the difference of two or more sets as a new set.

    (i.e. all elements that are in this set but not the others.)
  summary: Return the difference of two or more sets as a new set
  signatures: null
  inherits_from: null
- name: LazySet.difference_update
  kind: callable
  ns: pytz.lazy
  description: Remove all elements of another set from this set.
  summary: Remove all elements of another set from this set
  signatures: null
  inherits_from: null
- name: LazySet.discard
  kind: callable
  ns: pytz.lazy
  description: |-
    Remove an element from a set if it is a member.

    Unlike set.remove(), the discard() method does not raise
    an exception when an element is missing from the set.
  summary: Remove an element from a set if it is a member
  signatures: null
  inherits_from: null
- name: LazySet.intersection
  kind: callable
  ns: pytz.lazy
  description: |-
    Return the intersection of two sets as a new set.

    (i.e. all elements that are in both sets.)
  summary: Return the intersection of two sets as a new set
  signatures: null
  inherits_from: null
- name: LazySet.intersection_update
  kind: callable
  ns: pytz.lazy
  description: Update a set with the intersection of itself and another.
  summary: Update a set with the intersection of itself and another
  signatures: null
  inherits_from: null
- name: LazySet.isdisjoint
  kind: callable
  ns: pytz.lazy
  description: Return True if two sets have a null intersection.
  summary: Return True if two sets have a null intersection
  signatures: null
  inherits_from: null
- name: LazySet.issubset
  kind: callable
  ns: pytz.lazy
  description: Test whether every element in the set is in other.
  summary: Test whether every element in the set is in other
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: other
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazySet.issuperset
  kind: callable
  ns: pytz.lazy
  description: Test whether every element in other is in the set.
  summary: Test whether every element in other is in the set
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: other
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazySet.pop
  kind: callable
  ns: pytz.lazy
  description: |-
    Remove and return an arbitrary set element.
    Raises KeyError if the set is empty.
  summary: Remove and return an arbitrary set element
  signatures: null
  inherits_from: null
- name: LazySet.remove
  kind: callable
  ns: pytz.lazy
  description: |-
    Remove an element from a set; it must be a member.

    If the element is not a member, raise a KeyError.
  summary: Remove an element from a set; it must be a member
  signatures: null
  inherits_from: null
- name: LazySet.symmetric_difference
  kind: callable
  ns: pytz.lazy
  description: |-
    Return the symmetric difference of two sets as a new set.

    (i.e. all elements that are in exactly one of the sets.)
  summary: Return the symmetric difference of two sets as a new set
  signatures: null
  inherits_from: null
- name: LazySet.symmetric_difference_update
  kind: callable
  ns: pytz.lazy
  description: Update a set with the symmetric difference of itself and another.
  summary: Update a set with the symmetric difference of itself and another
  signatures: null
  inherits_from: null
- name: LazySet.union
  kind: callable
  ns: pytz.lazy
  description: |-
    Return the union of sets as a new set.

    (i.e. all elements that are in either set.)
  summary: Return the union of sets as a new set
  signatures: null
  inherits_from: null
- name: LazySet.update
  kind: callable
  ns: pytz.lazy
  description: Update a set with the union of itself and others.
  summary: Update a set with the union of itself and others
  signatures: null
  inherits_from: null
- name: RLock
  kind: function
  ns: pytz.lazy
  description: |-
    Factory function that returns a new reentrant lock.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it again
    without blocking; the thread must release it once for each time it has
    acquired it.
  summary: Factory function that returns a new reentrant lock
  signatures:
  - type: '?'
  inherits_from: null
- name: pytz.reference
  kind: module
  ns: null
  description: |-
    Reference tzinfo implementations from the Python docs.
    Used for testing against as they are only correct for the years
    1987 to 2006. Do not use these for real code.
  summary: Reference tzinfo implementations from the Python docs
  signatures: null
  inherits_from: null
- name: FixedOffset
  kind: class
  ns: pytz.reference
  description: Fixed offset in minutes east from UTC.
  summary: Fixed offset in minutes east from UTC
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: offset
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: FixedOffset
  inherits_from:
  - <class 'datetime.tzinfo'>
- name: FixedOffset.dst
  kind: method
  ns: pytz.reference
  description: datetime -> DST offset as timedelta positive east of UTC.
  summary: datetime -> DST offset as timedelta positive east of UTC
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FixedOffset.fromutc
  kind: callable
  ns: pytz.reference
  description: datetime in UTC -> datetime in local time.
  summary: datetime in UTC -> datetime in local time
  signatures: null
  inherits_from: null
- name: FixedOffset.tzname
  kind: method
  ns: pytz.reference
  description: datetime -> string name of time zone.
  summary: datetime -> string name of time zone
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FixedOffset.utcoffset
  kind: method
  ns: pytz.reference
  description: datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
  summary: datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LocalTimezone
  kind: class
  ns: pytz.reference
  description: Abstract base class for time zone info objects.
  summary: Abstract base class for time zone info objects
  signatures: null
  inherits_from:
  - <class 'datetime.tzinfo'>
- name: LocalTimezone.dst
  kind: method
  ns: pytz.reference
  description: datetime -> DST offset as timedelta positive east of UTC.
  summary: datetime -> DST offset as timedelta positive east of UTC
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LocalTimezone.fromutc
  kind: callable
  ns: pytz.reference
  description: datetime in UTC -> datetime in local time.
  summary: datetime in UTC -> datetime in local time
  signatures: null
  inherits_from: null
- name: LocalTimezone.tzname
  kind: method
  ns: pytz.reference
  description: datetime -> string name of time zone.
  summary: datetime -> string name of time zone
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LocalTimezone.utcoffset
  kind: method
  ns: pytz.reference
  description: datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
  summary: datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: USTimeZone
  kind: class
  ns: pytz.reference
  description: Abstract base class for time zone info objects.
  summary: Abstract base class for time zone info objects
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: hours
    default: null
    rest: false
  - kind: positional
    name: reprname
    default: null
    rest: false
  - kind: positional
    name: stdname
    default: null
    rest: false
  - kind: positional
    name: dstname
    default: null
    rest: false
  - type: USTimeZone
  inherits_from:
  - <class 'datetime.tzinfo'>
- name: USTimeZone.dst
  kind: method
  ns: pytz.reference
  description: datetime -> DST offset as timedelta positive east of UTC.
  summary: datetime -> DST offset as timedelta positive east of UTC
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: USTimeZone.fromutc
  kind: callable
  ns: pytz.reference
  description: datetime in UTC -> datetime in local time.
  summary: datetime in UTC -> datetime in local time
  signatures: null
  inherits_from: null
- name: USTimeZone.tzname
  kind: method
  ns: pytz.reference
  description: datetime -> string name of time zone.
  summary: datetime -> string name of time zone
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: USTimeZone.utcoffset
  kind: method
  ns: pytz.reference
  description: datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
  summary: datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Eastern
  kind: const
  ns: pytz.reference
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Central
  kind: const
  ns: pytz.reference
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Mountain
  kind: const
  ns: pytz.reference
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Pacific
  kind: const
  ns: pytz.reference
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UTC
  kind: const
  ns: pytz.reference
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: pytz.tzfile
  kind: module
  ns: null
  description: '$Id: tzfile.py,v 1.8 2004/06/03 00:15:24 zenzen Exp $'
  summary: '$Id: tzfile'
  signatures: null
  inherits_from: null
- name: DstTzInfo
  kind: class
  ns: pytz.tzfile
  description: |-
    A timezone that has a variable offset from UTC

    The offset might change if daylight saving time comes into effect,
    or at a point in history when the region decides to change their
    timezone definition.
  summary: A timezone that has a variable offset from UTC
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _inf
    default: None
    rest: false
  - kind: positional
    name: _tzinfos
    default: None
    rest: false
  - type: DstTzInfo
  inherits_from:
  - <class 'pytz.tzinfo.BaseTzInfo'>
  - <class 'datetime.tzinfo'>
- name: DstTzInfo.dst
  kind: method
  ns: pytz.tzfile
  description: |-
    See datetime.tzinfo.dst

    The is_dst parameter may be used to remove ambiguity during DST
    transitions.

    >>> from pytz import timezone
    >>> tz = timezone('America/St_Johns')

    >>> normal = datetime(2009, 9, 1)

    >>> str(tz.dst(normal))
    '1:00:00'
    >>> str(tz.dst(normal, is_dst=False))
    '1:00:00'
    >>> str(tz.dst(normal, is_dst=True))
    '1:00:00'

    >>> ambiguous = datetime(2009, 10, 31, 23, 30)

    >>> str(tz.dst(ambiguous, is_dst=False))
    '0:00:00'
    >>> str(tz.dst(ambiguous, is_dst=True))
    '1:00:00'
    >>> try:
    ...     tz.dst(ambiguous)
    ... except AmbiguousTimeError:
    ...     print('Ambiguous')
    Ambiguous
  summary: See datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - kind: positional
    name: is_dst
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DstTzInfo.fromutc
  kind: method
  ns: pytz.tzfile
  description: See datetime.tzinfo.fromutc
  summary: See datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DstTzInfo.localize
  kind: method
  ns: pytz.tzfile
  description: |-
    Convert naive time to local time.

    This method should be used to construct localtimes, rather
    than passing a tzinfo argument to a datetime constructor.

    is_dst is used to determine the correct timezone in the ambigous
    period at the end of daylight saving time.

    >>> from pytz import timezone
    >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
    >>> amdam = timezone('Europe/Amsterdam')
    >>> dt  = datetime(2004, 10, 31, 2, 0, 0)
    >>> loc_dt1 = amdam.localize(dt, is_dst=True)
    >>> loc_dt2 = amdam.localize(dt, is_dst=False)
    >>> loc_dt1.strftime(fmt)
    '2004-10-31 02:00:00 CEST (+0200)'
    >>> loc_dt2.strftime(fmt)
    '2004-10-31 02:00:00 CET (+0100)'
    >>> str(loc_dt2 - loc_dt1)
    '1:00:00'

    Use is_dst=None to raise an AmbiguousTimeError for ambiguous
    times at the end of daylight saving time

    >>> try:
    ...     loc_dt1 = amdam.localize(dt, is_dst=None)
    ... except AmbiguousTimeError:
    ...     print('Ambiguous')
    Ambiguous

    is_dst defaults to False

    >>> amdam.localize(dt) == amdam.localize(dt, False)
    True

    is_dst is also used to determine the correct timezone in the
    wallclock times jumped over at the start of daylight saving time.

    >>> pacific = timezone('US/Pacific')
    >>> dt = datetime(2008, 3, 9, 2, 0, 0)
    >>> ploc_dt1 = pacific.localize(dt, is_dst=True)
    >>> ploc_dt2 = pacific.localize(dt, is_dst=False)
    >>> ploc_dt1.strftime(fmt)
    '2008-03-09 02:00:00 PDT (-0700)'
    >>> ploc_dt2.strftime(fmt)
    '2008-03-09 02:00:00 PST (-0800)'
    >>> str(ploc_dt2 - ploc_dt1)
    '1:00:00'

    Use is_dst=None to raise a NonExistentTimeError for these skipped
    times.

    >>> try:
    ...     loc_dt1 = pacific.localize(dt, is_dst=None)
    ... except NonExistentTimeError:
    ...     print('Non-existent')
    Non-existent
  summary: Convert naive time to local time
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - kind: positional
    name: is_dst
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: DstTzInfo.normalize
  kind: method
  ns: pytz.tzfile
  description: |-
    Correct the timezone information on the given datetime

    If date arithmetic crosses DST boundaries, the tzinfo
    is not magically adjusted. This method normalizes the
    tzinfo to the correct one.

    To test, first we need to do some setup

    >>> from pytz import timezone
    >>> utc = timezone('UTC')
    >>> eastern = timezone('US/Eastern')
    >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'

    We next create a datetime right on an end-of-DST transition point,
    the instant when the wallclocks are wound back one hour.

    >>> utc_dt = datetime(2002, 10, 27, 6, 0, 0, tzinfo=utc)
    >>> loc_dt = utc_dt.astimezone(eastern)
    >>> loc_dt.strftime(fmt)
    '2002-10-27 01:00:00 EST (-0500)'

    Now, if we subtract a few minutes from it, note that the timezone
    information has not changed.

    >>> before = loc_dt - timedelta(minutes=10)
    >>> before.strftime(fmt)
    '2002-10-27 00:50:00 EST (-0500)'

    But we can fix that by calling the normalize method

    >>> before = eastern.normalize(before)
    >>> before.strftime(fmt)
    '2002-10-27 01:50:00 EDT (-0400)'

    The supported method of converting between timezones is to use
    datetime.astimezone(). Currently, normalize() also works:

    >>> th = timezone('Asia/Bangkok')
    >>> am = timezone('Europe/Amsterdam')
    >>> dt = th.localize(datetime(2011, 5, 7, 1, 2, 3))
    >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
    >>> am.normalize(dt).strftime(fmt)
    '2011-05-06 20:02:03 CEST (+0200)'
  summary: Correct the timezone information on the given datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DstTzInfo.tzname
  kind: method
  ns: pytz.tzfile
  description: |-
    See datetime.tzinfo.tzname

    The is_dst parameter may be used to remove ambiguity during DST
    transitions.

    >>> from pytz import timezone
    >>> tz = timezone('America/St_Johns')

    >>> normal = datetime(2009, 9, 1)

    >>> tz.tzname(normal)
    'NDT'
    >>> tz.tzname(normal, is_dst=False)
    'NDT'
    >>> tz.tzname(normal, is_dst=True)
    'NDT'

    >>> ambiguous = datetime(2009, 10, 31, 23, 30)

    >>> tz.tzname(ambiguous, is_dst=False)
    'NST'
    >>> tz.tzname(ambiguous, is_dst=True)
    'NDT'
    >>> try:
    ...     tz.tzname(ambiguous)
    ... except AmbiguousTimeError:
    ...     print('Ambiguous')
    Ambiguous
  summary: See datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - kind: positional
    name: is_dst
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DstTzInfo.utcoffset
  kind: method
  ns: pytz.tzfile
  description: |-
    See datetime.tzinfo.utcoffset

    The is_dst parameter may be used to remove ambiguity during DST
    transitions.

    >>> from pytz import timezone
    >>> tz = timezone('America/St_Johns')
    >>> ambiguous = datetime(2009, 10, 31, 23, 30)

    >>> str(tz.utcoffset(ambiguous, is_dst=False))
    '-1 day, 20:30:00'

    >>> str(tz.utcoffset(ambiguous, is_dst=True))
    '-1 day, 21:30:00'

    >>> try:
    ...     tz.utcoffset(ambiguous)
    ... except AmbiguousTimeError:
    ...     print('Ambiguous')
    Ambiguous
  summary: See datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - kind: positional
    name: is_dst
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DstTzInfo.zone
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StaticTzInfo
  kind: class
  ns: pytz.tzfile
  description: |-
    A timezone that has a constant offset from UTC

    These timezones are rare, as most locations have changed their
    offset at some point in their history
  summary: A timezone that has a constant offset from UTC
  signatures: null
  inherits_from:
  - <class 'pytz.tzinfo.BaseTzInfo'>
  - <class 'datetime.tzinfo'>
- name: StaticTzInfo.dst
  kind: method
  ns: pytz.tzfile
  description: |-
    See datetime.tzinfo.dst

    is_dst is ignored for StaticTzInfo, and exists only to
    retain compatibility with DstTzInfo.
  summary: See datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - kind: positional
    name: is_dst
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StaticTzInfo.fromutc
  kind: method
  ns: pytz.tzfile
  description: See datetime.tzinfo.fromutc
  summary: See datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StaticTzInfo.localize
  kind: method
  ns: pytz.tzfile
  description: Convert naive time to local time
  summary: Convert naive time to local time
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - kind: positional
    name: is_dst
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: StaticTzInfo.normalize
  kind: method
  ns: pytz.tzfile
  description: |-
    Correct the timezone information on the given datetime.

    This is normally a no-op, as StaticTzInfo timezones never have
    ambiguous cases to correct:

    >>> from pytz import timezone
    >>> gmt = timezone('GMT')
    >>> isinstance(gmt, StaticTzInfo)
    True
    >>> dt = datetime(2011, 5, 8, 1, 2, 3, tzinfo=gmt)
    >>> gmt.normalize(dt) is dt
    True

    The supported method of converting between timezones is to use
    datetime.astimezone(). Currently normalize() also works:

    >>> la = timezone('America/Los_Angeles')
    >>> dt = la.localize(datetime(2011, 5, 7, 1, 2, 3))
    >>> fmt = '%Y-%m-%d %H:%M:%S %Z (%z)'
    >>> gmt.normalize(dt).strftime(fmt)
    '2011-05-07 08:02:03 GMT (+0000)'
  summary: Correct the timezone information on the given datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - kind: positional
    name: is_dst
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: StaticTzInfo.tzname
  kind: method
  ns: pytz.tzfile
  description: |-
    See datetime.tzinfo.tzname

    is_dst is ignored for StaticTzInfo, and exists only to
    retain compatibility with DstTzInfo.
  summary: See datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - kind: positional
    name: is_dst
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StaticTzInfo.utcoffset
  kind: method
  ns: pytz.tzfile
  description: |-
    See datetime.tzinfo.utcoffset

    is_dst is ignored for StaticTzInfo, and exists only to
    retain compatibility with DstTzInfo.
  summary: See datetime
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dt
    default: null
    rest: false
  - kind: positional
    name: is_dst
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StaticTzInfo.zone
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: build_tzinfo
  kind: function
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: zone
    default: null
    rest: false
  - kind: positional
    name: fp
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: datetime
  kind: class
  ns: pytz.tzfile
  description: |-
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
  summary: datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
  signatures: null
  inherits_from:
  - <class 'datetime.date'>
- name: datetime.astimezone
  kind: callable
  ns: pytz.tzfile
  description: tz -> convert to local time in new timezone tz
  summary: tz -> convert to local time in new timezone tz
  signatures: null
  inherits_from: null
- name: datetime.ctime
  kind: callable
  ns: pytz.tzfile
  description: Return ctime() style string.
  summary: Return ctime() style string
  signatures: null
  inherits_from: null
- name: datetime.date
  kind: callable
  ns: pytz.tzfile
  description: Return date object with same year, month and day.
  summary: Return date object with same year, month and day
  signatures: null
  inherits_from: null
- name: datetime.day
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.dst
  kind: callable
  ns: pytz.tzfile
  description: Return self.tzinfo.dst(self).
  summary: Return self
  signatures: null
  inherits_from: null
- name: datetime.fold
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.hour
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.isocalendar
  kind: callable
  ns: pytz.tzfile
  description: Return a named tuple containing ISO year, week number, and weekday.
  summary: Return a named tuple containing ISO year, week number, and weekday
  signatures: null
  inherits_from: null
- name: datetime.isoformat
  kind: callable
  ns: pytz.tzfile
  description: |-
    [sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].
    sep is used to separate the year from the time, and defaults to 'T'.
    The optional argument timespec specifies the number of additional terms
    of the time to include. Valid options are 'auto', 'hours', 'minutes',
    'seconds', 'milliseconds' and 'microseconds'.
  summary: '[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS['
  signatures: null
  inherits_from: null
- name: datetime.isoweekday
  kind: callable
  ns: pytz.tzfile
  description: |-
    Return the day of the week represented by the date.
    Monday == 1 ... Sunday == 7
  summary: Return the day of the week represented by the date
  signatures: null
  inherits_from: null
- name: datetime.max
  kind: property
  ns: pytz.tzfile
  description: |-
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
  summary: datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
  signatures: null
  inherits_from: null
- name: datetime.microsecond
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.min
  kind: property
  ns: pytz.tzfile
  description: |-
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
  summary: datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
  signatures: null
  inherits_from: null
- name: datetime.minute
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.month
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.replace
  kind: callable
  ns: pytz.tzfile
  description: Return datetime with new specified fields.
  summary: Return datetime with new specified fields
  signatures: null
  inherits_from: null
- name: datetime.resolution
  kind: property
  ns: pytz.tzfile
  description: |-
    Difference between two datetime values.

    timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)

    All arguments are optional and default to 0.
    Arguments may be integers or floats, and may be positive or negative.
  summary: Difference between two datetime values
  signatures: null
  inherits_from: null
- name: datetime.second
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.strftime
  kind: callable
  ns: pytz.tzfile
  description: format -> strftime() style string.
  summary: format -> strftime() style string
  signatures: null
  inherits_from: null
- name: datetime.time
  kind: callable
  ns: pytz.tzfile
  description: Return time object with same time but with tzinfo=None.
  summary: Return time object with same time but with tzinfo=None
  signatures: null
  inherits_from: null
- name: datetime.timestamp
  kind: callable
  ns: pytz.tzfile
  description: Return POSIX timestamp as float.
  summary: Return POSIX timestamp as float
  signatures: null
  inherits_from: null
- name: datetime.timetuple
  kind: callable
  ns: pytz.tzfile
  description: Return time tuple, compatible with time.localtime().
  summary: Return time tuple, compatible with time
  signatures: null
  inherits_from: null
- name: datetime.timetz
  kind: callable
  ns: pytz.tzfile
  description: Return time object with same time and tzinfo.
  summary: Return time object with same time and tzinfo
  signatures: null
  inherits_from: null
- name: datetime.toordinal
  kind: callable
  ns: pytz.tzfile
  description: Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.
  summary: Return proleptic Gregorian ordinal
  signatures: null
  inherits_from: null
- name: datetime.tzinfo
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.tzname
  kind: callable
  ns: pytz.tzfile
  description: Return self.tzinfo.tzname(self).
  summary: Return self
  signatures: null
  inherits_from: null
- name: datetime.utcoffset
  kind: callable
  ns: pytz.tzfile
  description: Return self.tzinfo.utcoffset(self).
  summary: Return self
  signatures: null
  inherits_from: null
- name: datetime.utctimetuple
  kind: callable
  ns: pytz.tzfile
  description: Return UTC time tuple, compatible with time.localtime().
  summary: Return UTC time tuple, compatible with time
  signatures: null
  inherits_from: null
- name: datetime.weekday
  kind: callable
  ns: pytz.tzfile
  description: |-
    Return the day of the week represented by the date.
    Monday == 0 ... Sunday == 6
  summary: Return the day of the week represented by the date
  signatures: null
  inherits_from: null
- name: datetime.year
  kind: property
  ns: pytz.tzfile
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: memorized_datetime
  kind: function
  ns: pytz.tzfile
  description: Create only one instance of each distinct datetime
  summary: Create only one instance of each distinct datetime
  signatures:
  - kind: positional
    name: seconds
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: memorized_timedelta
  kind: function
  ns: pytz.tzfile
  description: Create only one instance of each distinct timedelta
  summary: Create only one instance of each distinct timedelta
  signatures:
  - kind: positional
    name: seconds
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: memorized_ttinfo
  kind: function
  ns: pytz.tzfile
  description: Create only one instance of each distinct tuple
  summary: Create only one instance of each distinct tuple
  signatures:
  - type: '?'
  inherits_from: null
- name: pytz.tzinfo
  kind: module
  ns: null
  description: Base classes and helpers for building zone specific tzinfo classes
  summary: Base classes and helpers for building zone specific tzinfo classes
  signatures: null
  inherits_from: null
