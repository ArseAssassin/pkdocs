---
name: django
text_format: rst
generator: src:python
generator_command: src:python use "django"
language: python
version: 4.2.14
summary: A high-level Python web framework that encourages rapid development and clean, pragmatic design.
description: "======\nDjango\n======\n\nDjango is a high-level Python web framework that encourages rapid development\nand clean, pragmatic design. Thanks for checking it out.\n\nAll documentation is in the \"``docs``\" directory and online at\nhttps://docs.djangoproject.com/en/stable/. If you're just getting started,\nhere's how we recommend you read the docs:\n\n* First, read ``docs/intro/install.txt`` for instructions on installing Django.\n\n* Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n  ``docs/intro/tutorial02.txt``, etc.).\n\n* If you want to set up an actual deployment server, read\n  ``docs/howto/deployment/index.txt`` for instructions.\n\n* You'll probably want to read through the topical guides (in ``docs/topics``)\n  next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n  problems, and check out the reference (``docs/ref``) for gory details.\n\n* See ``docs/README`` for instructions on building an HTML version of the docs.\n\nDocs are updated rigorously. If you find any problems in the docs, or think\nthey should be clarified in any way, please take 30 seconds to fill out a\nticket here: https://code.djangoproject.com/newticket\n\nTo get more help:\n\n* Join the ``#django`` channel on ``irc.libera.chat``. Lots of helpful people\n  hang out there. See https://web.libera.chat if you're new to IRC.\n\n* Join the django-users mailing list, or read the archives, at\n  https://groups.google.com/group/django-users.\n\nTo contribute to Django:\n\n* Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n  information about getting involved.\n\nTo run Django's test suite:\n\n* Follow the instructions in the \"Unit tests\" section of\n  ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n  https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n\nSupporting the Development of Django\n====================================\n\nDjango's development depends on your contributions. \n\nIf you depend on Django, remember to support the Django Software Foundation: https://www.djangoproject.com/fundraising/\n"
homepage: https://www.djangoproject.com/
license: BSD-3-Clause

---
- name: django
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: VERSION
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_version
  kind: function
  ns: django
  description: Return a PEP 440-compliant version number from VERSION.
  summary: Return a PEP 440-compliant version number from VERSION
  signatures:
  - - kind: positional
      name: version
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: setup
  kind: function
  ns: django
  description: |-
    Configure the settings (this happens as a side effect of accessing the
    first setting), configure logging and populate the app registry.
    Set the thread-local urlresolvers script prefix if `set_prefix` is True.
  summary: Configure the settings (this happens as a side effect of accessing the
  signatures:
  - - kind: positional
      name: set_prefix
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: utils
  kind: module
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: functional
  kind: module
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LazyObject
  kind: class
  ns: django
  description: |-
    A wrapper for another class that can be used to delay instantiation of the
    wrapped class.

    By subclassing, you have the opportunity to intercept and alter the
    instantiation. If you don't need to do that, use SimpleLazyObject.
  summary: A wrapper for another class that can be used to delay instantiation of the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: LazyObject
      kind: return
  inherits_from: null
- name: Promise
  kind: class
  ns: django
  description: |-
    Base class for the proxy class created in the closure of the lazy function.
    It's used to recognize promises in code.
  summary: Base class for the proxy class created in the closure of the lazy function
  signatures:
  - - type: Promise
      kind: return
  inherits_from: null
- name: SimpleLazyObject
  kind: class
  ns: django
  description: |-
    A lazy object initialized from any function.

    Designed for compound objects of unknown type. For builtins or objects of
    known type, use django.utils.functional.lazy.
  summary: A lazy object initialized from any function
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - type: SimpleLazyObject
      kind: return
  inherits_from:
  - <class 'django.utils.functional.LazyObject'>
- name: cached_property
  kind: class
  ns: django
  description: |-
    Decorator that converts a method with a single self argument into a
    property cached on the instance.

    A cached property can be made out of an existing method:
    (e.g. ``url = cached_property(get_absolute_url)``).
  summary: Decorator that converts a method with a single self argument into a
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: cached_property
      kind: return
  inherits_from: null
- name: cached_property.func
  kind: method
  ns: django
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: instance
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: cached_property.name
  kind: property
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: classproperty
  kind: class
  ns: django
  description: |-
    Decorator that converts a method with a single cls argument into a property
    that can be accessed directly from the class.
  summary: Decorator that converts a method with a single cls argument into a property
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: None
      rest: false
    - type: classproperty
      kind: return
  inherits_from: null
- name: classproperty.getter
  kind: method
  ns: django
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: empty
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: keep_lazy
  kind: function
  ns: django
  description: |-
    A decorator that allows a function to be called with one or more lazy
    arguments. If none of the args are lazy, the function is evaluated
    immediately, otherwise a __proxy__ is returned that will evaluate the
    function when needed.
  summary: A decorator that allows a function to be called with one or more lazy
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: keep_lazy_text
  kind: function
  ns: django
  description: A decorator for functions that accept lazy arguments and return text.
  summary: A decorator for functions that accept lazy arguments and return text
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: lazy
  kind: function
  ns: django
  description: |-
    Turn any callable into a lazy evaluated callable. result classes or types
    is required -- at least one is needed so that the automatic forcing of
    the lazy evaluation code is triggered. Results are not memoized; the
    function is evaluated on every access.
  summary: Turn any callable into a lazy evaluated callable
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: lazystr
  kind: function
  ns: django
  description: Shortcut for the common case of a lazy callable that returns str.
  summary: Shortcut for the common case of a lazy callable that returns str
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: new_method_proxy
  kind: function
  ns: django
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: partition
  kind: function
  ns: django
  description: |-
    Split the values into two sets, based on the return value of the function
    (True/False). e.g.:

        >>> partition(lambda x: x > 3, range(5))
        [0, 1, 2, 3], [4]
  summary: Split the values into two sets, based on the return value of the function
  signatures:
  - - kind: positional
      name: predicate
      default: null
      rest: false
    - kind: positional
      name: values
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: total_ordering
  kind: function
  ns: django
  description: Class decorator that fills in missing ordering methods
  summary: Class decorator that fills in missing ordering methods
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: unpickle_lazyobject
  kind: function
  ns: django
  description: |-
    Used to unpickle lazy objects. Just return its argument, which will be the
    wrapped object.
  summary: Used to unpickle lazy objects
  signatures:
  - - kind: positional
      name: wrapped
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: wraps
  kind: function
  ns: django
  description: |-
    Decorator factory to apply update_wrapper() to a wrapper function

    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
  summary: Decorator factory to apply update_wrapper() to a wrapper function
  signatures:
  - - kind: positional
      name: wrapped
      default: null
      rest: false
    - kind: positional
      name: assigned
      default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
      rest: false
    - kind: positional
      name: updated
      default: ('__dict__',)
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: regex_helper
  kind: module
  ns: django
  description: |-
    Functions for reversing a regular expression (used in reverse URL resolving).
    Used internally by Django and not intended for external use.

    This is not, and is not intended to be, a complete reg-exp decompiler. It
    should be good enough for a large class of URLS, however.
  summary: Functions for reversing a regular expression (used in reverse URL resolving)
  signatures: null
  inherits_from: null
- name: Choice
  kind: class
  ns: django
  description: Represent multiple possibilities at this point in a pattern string.
  summary: Represent multiple possibilities at this point in a pattern string
  signatures:
  - - kind: positional
      name: iterable
      default: ()
      rest: false
    - type: Choice
      kind: return
  inherits_from:
  - <class 'list'>
- name: Choice.append
  kind: callable
  ns: django
  description: Append object to the end of the list.
  summary: Append object to the end of the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.clear
  kind: callable
  ns: django
  description: Remove all items from list.
  summary: Remove all items from list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.copy
  kind: callable
  ns: django
  description: Return a shallow copy of the list.
  summary: Return a shallow copy of the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.count
  kind: callable
  ns: django
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.extend
  kind: callable
  ns: django
  description: Extend list by appending elements from the iterable.
  summary: Extend list by appending elements from the iterable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.index
  kind: callable
  ns: django
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.insert
  kind: callable
  ns: django
  description: Insert object before index.
  summary: Insert object before index
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: null
      rest: false
    - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.pop
  kind: callable
  ns: django
  description: |-
    Remove and return item at index (default last).

    Raises IndexError if list is empty or index is out of range.
  summary: Remove and return item at index (default last)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.remove
  kind: callable
  ns: django
  description: |-
    Remove first occurrence of value.

    Raises ValueError if the value is not present.
  summary: Remove first occurrence of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.reverse
  kind: callable
  ns: django
  description: Reverse *IN PLACE*.
  summary: Reverse *IN PLACE*
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Choice.sort
  kind: callable
  ns: django
  description: |-
    Sort the list in ascending order and return None.

    The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
    order of two equal elements is maintained).

    If a key function is given, apply it once to each list item and sort them,
    ascending or descending, according to their function values.

    The reverse flag can be set to sort in descending order.
  summary: Sort the list in ascending order and return None
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: key
      default: None
      rest: false
      kind: kw-only
    - name: reverse
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: ESCAPE_MAPPINGS
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Group
  kind: class
  ns: django
  description: Represent a capturing group in the pattern string.
  summary: Represent a capturing group in the pattern string
  signatures:
  - - kind: positional
      name: iterable
      default: ()
      rest: false
    - type: Group
      kind: return
  inherits_from:
  - <class 'list'>
- name: Group.append
  kind: callable
  ns: django
  description: Append object to the end of the list.
  summary: Append object to the end of the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.clear
  kind: callable
  ns: django
  description: Remove all items from list.
  summary: Remove all items from list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.copy
  kind: callable
  ns: django
  description: Return a shallow copy of the list.
  summary: Return a shallow copy of the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.count
  kind: callable
  ns: django
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.extend
  kind: callable
  ns: django
  description: Extend list by appending elements from the iterable.
  summary: Extend list by appending elements from the iterable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.index
  kind: callable
  ns: django
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.insert
  kind: callable
  ns: django
  description: Insert object before index.
  summary: Insert object before index
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: null
      rest: false
    - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.pop
  kind: callable
  ns: django
  description: |-
    Remove and return item at index (default last).

    Raises IndexError if list is empty or index is out of range.
  summary: Remove and return item at index (default last)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.remove
  kind: callable
  ns: django
  description: |-
    Remove first occurrence of value.

    Raises ValueError if the value is not present.
  summary: Remove first occurrence of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.reverse
  kind: callable
  ns: django
  description: Reverse *IN PLACE*.
  summary: Reverse *IN PLACE*
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Group.sort
  kind: callable
  ns: django
  description: |-
    Sort the list in ascending order and return None.

    The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
    order of two equal elements is maintained).

    If a key function is given, apply it once to each list item and sort them,
    ascending or descending, according to their function values.

    The reverse flag can be set to sort in descending order.
  summary: Sort the list in ascending order and return None
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: key
      default: None
      rest: false
      kind: kw-only
    - name: reverse
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture
  kind: class
  ns: django
  description: Represent a non-capturing group in the pattern string.
  summary: Represent a non-capturing group in the pattern string
  signatures:
  - - kind: positional
      name: iterable
      default: ()
      rest: false
    - type: NonCapture
      kind: return
  inherits_from:
  - <class 'list'>
- name: NonCapture.append
  kind: callable
  ns: django
  description: Append object to the end of the list.
  summary: Append object to the end of the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.clear
  kind: callable
  ns: django
  description: Remove all items from list.
  summary: Remove all items from list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.copy
  kind: callable
  ns: django
  description: Return a shallow copy of the list.
  summary: Return a shallow copy of the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.count
  kind: callable
  ns: django
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.extend
  kind: callable
  ns: django
  description: Extend list by appending elements from the iterable.
  summary: Extend list by appending elements from the iterable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.index
  kind: callable
  ns: django
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.insert
  kind: callable
  ns: django
  description: Insert object before index.
  summary: Insert object before index
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: null
      rest: false
    - kind: positional
      name: object
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.pop
  kind: callable
  ns: django
  description: |-
    Remove and return item at index (default last).

    Raises IndexError if list is empty or index is out of range.
  summary: Remove and return item at index (default last)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: index
      default: '-1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.remove
  kind: callable
  ns: django
  description: |-
    Remove first occurrence of value.

    Raises ValueError if the value is not present.
  summary: Remove first occurrence of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.reverse
  kind: callable
  ns: django
  description: Reverse *IN PLACE*.
  summary: Reverse *IN PLACE*
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonCapture.sort
  kind: callable
  ns: django
  description: |-
    Sort the list in ascending order and return None.

    The sort is in-place (i.e. the list itself is modified) and stable (i.e. the
    order of two equal elements is maintained).

    If a key function is given, apply it once to each list item and sort them,
    ascending or descending, according to their function values.

    The reverse flag can be set to sort in descending order.
  summary: Sort the list in ascending order and return None
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: key
      default: None
      rest: false
      kind: kw-only
    - name: reverse
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: contains
  kind: function
  ns: django
  description: |-
    Return True if the "source" contains an instance of "inst". False,
    otherwise.
  summary: Return True if the "source" contains an instance of "inst"
  signatures:
  - - kind: positional
      name: source
      default: null
      rest: false
    - kind: positional
      name: inst
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: flatten_result
  kind: function
  ns: django
  description: |-
    Turn the given source sequence into a list of reg-exp possibilities and
    their arguments. Return a list of strings and a list of argument lists.
    Each of the two lists will be of the same length.
  summary: Turn the given source sequence into a list of reg-exp possibilities and
  signatures:
  - - kind: positional
      name: source
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_quantifier
  kind: function
  ns: django
  description: |-
    Parse a quantifier from the input, where "ch" is the first character in the
    quantifier.

    Return the minimum number of occurrences permitted by the quantifier and
    either None or the next character from the input_iter if the next character
    is not part of the quantifier.
  summary: Parse a quantifier from the input, where "ch" is the first character in the
  signatures:
  - - kind: positional
      name: ch
      default: null
      rest: false
    - kind: positional
      name: input_iter
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: next_char
  kind: function
  ns: django
  description: |-
    An iterator that yields the next character from "pattern_iter", respecting
    escape sequences. An escaped character is replaced by a representative of
    its class (e.g. \w -> "x"). If the escaped character is one that is
    skipped, it is not returned (the next character is returned instead).

    Yield the next character, along with a boolean indicating whether it is a
    raw (unescaped) character or not.
  summary: An iterator that yields the next character from "pattern_iter", respecting
  signatures:
  - - kind: positional
      name: input_iter
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: normalize
  kind: function
  ns: django
  description: |-
    Given a reg-exp pattern, normalize it to an iterable of forms that
    suffice for reverse matching. This does the following:

    (1) For any repeating sections, keeps the minimum number of occurrences
        permitted (this means zero for optional groups).
    (2) If an optional group includes parameters, include one occurrence of
        that group (along with the zero occurrence case from step (1)).
    (3) Select the first (essentially an arbitrary) element from any character
        class. Select an arbitrary character for any unordered class (e.g. '.'
        or '\w') in the pattern.
    (4) Ignore look-ahead and look-behind assertions.
    (5) Raise an error on any disjunctive ('|') constructs.

    Django's URLs for forward resolving are either all positional arguments or
    all keyword arguments. That is assumed here, as well. Although reverse
    resolving can be done using positional args when keyword args are
    specified, the two cannot be mixed in the same reverse() call.
  summary: Given a reg-exp pattern, normalize it to an iterable of forms that
  signatures:
  - - kind: positional
      name: pattern
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: walk_to_end
  kind: function
  ns: django
  description: |-
    The iterator is currently inside a capturing group. Walk to the close of
    this group, skipping over any nested groups and handling escaped
    parentheses correctly.
  summary: The iterator is currently inside a capturing group
  signatures:
  - - kind: positional
      name: ch
      default: null
      rest: false
    - kind: positional
      name: input_iter
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: version
  kind: module
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PY310
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PY311
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PY312
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PY36
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PY37
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PY38
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PY39
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_complete_version
  kind: function
  ns: django
  description: |-
    Return a tuple of the django version. If version argument is non-empty,
    check for correctness of the tuple provided.
  summary: Return a tuple of the django version
  signatures:
  - - kind: positional
      name: version
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_docs_version
  kind: function
  ns: django
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: version
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_git_changeset
  kind: callable
  ns: django
  description: |-
    Return a numeric identifier of the latest git changeset.

    The result is the UTC timestamp of the changeset in YYYYMMDDHHMMSS format.
    This value isn't guaranteed to be unique, but collisions are very unlikely,
    so it's sufficient for generating the development version numbers.
  summary: Return a numeric identifier of the latest git changeset
  signatures: null
  inherits_from: null
- name: get_main_version
  kind: function
  ns: django
  description: Return main version (X.Y[.Z]) from VERSION.
  summary: Return main version (X
  signatures:
  - - kind: positional
      name: version
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_version
  kind: function
  ns: django
  description: Return a PEP 440-compliant version number from VERSION.
  summary: Return a PEP 440-compliant version number from VERSION
  signatures:
  - - kind: positional
      name: version
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_version_tuple
  kind: function
  ns: django
  description: |-
    Return a tuple of version numbers (e.g. (1, 2, 3)) from the version
    string (e.g. '1.2.3').
  summary: Return a tuple of version numbers (e
  signatures:
  - - kind: positional
      name: version
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: version_component_re
  kind: const
  ns: django
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: django.apps
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AppConfig
  kind: class
  ns: django.apps
  description: Class representing a Django application and its configuration.
  summary: Class representing a Django application and its configuration
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: app_name
      default: null
      rest: false
    - kind: positional
      name: app_module
      default: null
      rest: false
    - type: AppConfig
      kind: return
  inherits_from: null
- name: AppConfig.create
  kind: function
  ns: django.apps
  description: Factory that creates an app config from an entry in INSTALLED_APPS.
  summary: Factory that creates an app config from an entry in INSTALLED_APPS
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: entry
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AppConfig.default_auto_field
  kind: property
  ns: django.apps
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AppConfig.get_model
  kind: method
  ns: django.apps
  description: |-
    Return the model with the given case-insensitive model_name.

    Raise LookupError if no model exists with this name.
  summary: Return the model with the given case-insensitive model_name
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: model_name
      default: null
      rest: false
    - kind: positional
      name: require_ready
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AppConfig.get_models
  kind: method
  ns: django.apps
  description: |-
    Return an iterable of models.

    By default, the following models aren't included:

    - auto-created models for many-to-many relations without
      an explicit intermediate table,
    - models that have been swapped out.

    Set the corresponding keyword argument to True to include such models.
    Keyword arguments aren't documented; they're a private API.
  summary: Return an iterable of models
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: include_auto_created
      default: 'False'
      rest: false
    - kind: positional
      name: include_swapped
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AppConfig.import_models
  kind: method
  ns: django.apps
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AppConfig.ready
  kind: method
  ns: django.apps
  description: Override this method in subclasses to run code when Django starts.
  summary: Override this method in subclasses to run code when Django starts
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: apps
  kind: const
  ns: django.apps
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: django.contrib
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: django.core
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: exceptions
  kind: module
  ns: django.core
  description: Global Django exception and warning classes.
  summary: Global Django exception and warning classes
  signatures: null
  inherits_from: null
- name: AppRegistryNotReady
  kind: class
  ns: django.core
  description: The django.apps registry is not populated yet
  summary: The django
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: AppRegistryNotReady.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: AppRegistryNotReady.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AppRegistryNotReady.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadRequest
  kind: class
  ns: django.core
  description: The request is malformed and cannot be processed.
  summary: The request is malformed and cannot be processed
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BadRequest.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadRequest.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BadRequest.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DisallowedHost
  kind: class
  ns: django.core
  description: HTTP_HOST header contains invalid value
  summary: HTTP_HOST header contains invalid value
  signatures: null
  inherits_from:
  - <class 'django.core.exceptions.SuspiciousOperation'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DisallowedHost.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DisallowedHost.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DisallowedHost.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DisallowedRedirect
  kind: class
  ns: django.core
  description: Redirect to scheme not in allowed list
  summary: Redirect to scheme not in allowed list
  signatures: null
  inherits_from:
  - <class 'django.core.exceptions.SuspiciousOperation'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DisallowedRedirect.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DisallowedRedirect.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DisallowedRedirect.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: EmptyResultSet
  kind: class
  ns: django.core
  description: A database query predicate is impossible.
  summary: A database query predicate is impossible
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: EmptyResultSet.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: EmptyResultSet.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: EmptyResultSet.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: FieldDoesNotExist
  kind: class
  ns: django.core
  description: The requested model field does not exist
  summary: The requested model field does not exist
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FieldDoesNotExist.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FieldDoesNotExist.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FieldDoesNotExist.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: FieldError
  kind: class
  ns: django.core
  description: Some kind of problem with a model field.
  summary: Some kind of problem with a model field
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FieldError.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FieldError.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FieldError.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: FullResultSet
  kind: class
  ns: django.core
  description: A database query predicate is matches everything.
  summary: A database query predicate is matches everything
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FullResultSet.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FullResultSet.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FullResultSet.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: MiddlewareNotUsed
  kind: class
  ns: django.core
  description: This middleware is not used in this server configuration
  summary: This middleware is not used in this server configuration
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: MiddlewareNotUsed.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: MiddlewareNotUsed.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MiddlewareNotUsed.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: MultipleObjectsReturned
  kind: class
  ns: django.core
  description: The query returned multiple objects when only one was expected.
  summary: The query returned multiple objects when only one was expected
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: MultipleObjectsReturned.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: MultipleObjectsReturned.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MultipleObjectsReturned.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: NON_FIELD_ERRORS
  kind: const
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ObjectDoesNotExist
  kind: class
  ns: django.core
  description: The requested object does not exist
  summary: The requested object does not exist
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ObjectDoesNotExist.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ObjectDoesNotExist.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ObjectDoesNotExist.silent_variable_failure
  kind: property
  ns: django.core
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ObjectDoesNotExist.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PermissionDenied
  kind: class
  ns: django.core
  description: The user did not have permission to do that
  summary: The user did not have permission to do that
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PermissionDenied.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PermissionDenied.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PermissionDenied.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestAborted
  kind: class
  ns: django.core
  description: The request was closed before it was completed, or timed out.
  summary: The request was closed before it was completed, or timed out
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: RequestAborted.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestAborted.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RequestAborted.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestDataTooBig
  kind: class
  ns: django.core
  description: |-
    The size of the request (excluding any file uploads) exceeded
    settings.DATA_UPLOAD_MAX_MEMORY_SIZE.
  summary: The size of the request (excluding any file uploads) exceeded
  signatures: null
  inherits_from:
  - <class 'django.core.exceptions.SuspiciousOperation'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: RequestDataTooBig.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestDataTooBig.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RequestDataTooBig.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SuspiciousFileOperation
  kind: class
  ns: django.core
  description: A Suspicious filesystem operation was attempted
  summary: A Suspicious filesystem operation was attempted
  signatures: null
  inherits_from:
  - <class 'django.core.exceptions.SuspiciousOperation'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SuspiciousFileOperation.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SuspiciousFileOperation.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SuspiciousFileOperation.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SuspiciousMultipartForm
  kind: class
  ns: django.core
  description: Suspect MIME request in multipart form data
  summary: Suspect MIME request in multipart form data
  signatures: null
  inherits_from:
  - <class 'django.core.exceptions.SuspiciousOperation'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SuspiciousMultipartForm.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SuspiciousMultipartForm.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SuspiciousMultipartForm.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SuspiciousOperation
  kind: class
  ns: django.core
  description: The user did something suspicious
  summary: The user did something suspicious
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SuspiciousOperation.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SuspiciousOperation.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SuspiciousOperation.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SynchronousOnlyOperation
  kind: class
  ns: django.core
  description: The user tried to call a sync-only function from an async context.
  summary: The user tried to call a sync-only function from an async context
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SynchronousOnlyOperation.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SynchronousOnlyOperation.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SynchronousOnlyOperation.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TooManyFieldsSent
  kind: class
  ns: django.core
  description: |-
    The number of fields in a GET or POST request exceeded
    settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.
  summary: The number of fields in a GET or POST request exceeded
  signatures: null
  inherits_from:
  - <class 'django.core.exceptions.SuspiciousOperation'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TooManyFieldsSent.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TooManyFieldsSent.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TooManyFieldsSent.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TooManyFilesSent
  kind: class
  ns: django.core
  description: |-
    The number of fields in a GET or POST request exceeded
    settings.DATA_UPLOAD_MAX_NUMBER_FILES.
  summary: The number of fields in a GET or POST request exceeded
  signatures: null
  inherits_from:
  - <class 'django.core.exceptions.SuspiciousOperation'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TooManyFilesSent.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TooManyFilesSent.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TooManyFilesSent.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ValidationError
  kind: class
  ns: django.core
  description: An error while validating data.
  summary: An error while validating data
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: null
      rest: false
    - kind: positional
      name: code
      default: None
      rest: false
    - kind: positional
      name: params
      default: None
      rest: false
    - type: ValidationError
      kind: return
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ValidationError.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ValidationError.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ValidationError.message_dict
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ValidationError.messages
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ValidationError.update_error_dict
  kind: method
  ns: django.core
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: error_dict
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ValidationError.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ViewDoesNotExist
  kind: class
  ns: django.core
  description: The requested view does not exist
  summary: The requested view does not exist
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ViewDoesNotExist.add_note
  kind: callable
  ns: django.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ViewDoesNotExist.args
  kind: property
  ns: django.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ViewDoesNotExist.with_traceback
  kind: callable
  ns: django.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: make_hashable
  kind: function
  ns: django.core
  description: |-
    Attempt to make value hashable or raise a TypeError if it fails.

    The returned value should generate the same hash for equal values.
  summary: Attempt to make value hashable or raise a TypeError if it fails
  signatures:
  - - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: django.db
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: connection
  kind: const
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: connections
  kind: const
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: router
  kind: const
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DatabaseError
  kind: class
  ns: django.db
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'django.db.utils.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DatabaseError.add_note
  kind: callable
  ns: django.db
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DatabaseError.args
  kind: property
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DatabaseError.with_traceback
  kind: callable
  ns: django.db
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: IntegrityError
  kind: class
  ns: django.db
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'django.db.utils.DatabaseError'>
  - <class 'django.db.utils.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: IntegrityError.add_note
  kind: callable
  ns: django.db
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: IntegrityError.args
  kind: property
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: IntegrityError.with_traceback
  kind: callable
  ns: django.db
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InternalError
  kind: class
  ns: django.db
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'django.db.utils.DatabaseError'>
  - <class 'django.db.utils.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InternalError.add_note
  kind: callable
  ns: django.db
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InternalError.args
  kind: property
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InternalError.with_traceback
  kind: callable
  ns: django.db
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProgrammingError
  kind: class
  ns: django.db
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'django.db.utils.DatabaseError'>
  - <class 'django.db.utils.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ProgrammingError.add_note
  kind: callable
  ns: django.db
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProgrammingError.args
  kind: property
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProgrammingError.with_traceback
  kind: callable
  ns: django.db
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DataError
  kind: class
  ns: django.db
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'django.db.utils.DatabaseError'>
  - <class 'django.db.utils.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DataError.add_note
  kind: callable
  ns: django.db
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DataError.args
  kind: property
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DataError.with_traceback
  kind: callable
  ns: django.db
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: NotSupportedError
  kind: class
  ns: django.db
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'django.db.utils.DatabaseError'>
  - <class 'django.db.utils.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NotSupportedError.add_note
  kind: callable
  ns: django.db
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NotSupportedError.args
  kind: property
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NotSupportedError.with_traceback
  kind: callable
  ns: django.db
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Error
  kind: class
  ns: django.db
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Error.add_note
  kind: callable
  ns: django.db
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Error.args
  kind: property
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Error.with_traceback
  kind: callable
  ns: django.db
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InterfaceError
  kind: class
  ns: django.db
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'django.db.utils.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InterfaceError.add_note
  kind: callable
  ns: django.db
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InterfaceError.args
  kind: property
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InterfaceError.with_traceback
  kind: callable
  ns: django.db
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: OperationalError
  kind: class
  ns: django.db
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'django.db.utils.DatabaseError'>
  - <class 'django.db.utils.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: OperationalError.add_note
  kind: callable
  ns: django.db
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: OperationalError.args
  kind: property
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: OperationalError.with_traceback
  kind: callable
  ns: django.db
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DEFAULT_DB_ALIAS
  kind: const
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DJANGO_VERSION_PICKLE_KEY
  kind: const
  ns: django.db
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: django.dispatch
  kind: module
  ns: null
  description: |-
    Multi-consumer multi-producer dispatching mechanism

    Originally based on pydispatch (BSD) https://pypi.org/project/PyDispatcher/2.0.1/
    See license.txt for original license.

    Heavily modified for Django's purposes.
  summary: Multi-consumer multi-producer dispatching mechanism
  signatures: null
  inherits_from: null
- name: Signal
  kind: class
  ns: django.dispatch
  description: |-
    Base class for all signals

    Internal attributes:

        receivers
            { receiverkey (id) : weakref(receiver) }
  summary: Base class for all signals
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: use_caching
      default: 'False'
      rest: false
    - type: Signal
      kind: return
  inherits_from: null
- name: Signal.connect
  kind: method
  ns: django.dispatch
  description: |-
    Connect receiver to sender for signal.

    Arguments:

        receiver
            A function or an instance method which is to receive signals.
            Receivers must be hashable objects.

            If weak is True, then receiver must be weak referenceable.

            Receivers must be able to accept keyword arguments.

            If a receiver is connected with a dispatch_uid argument, it
            will not be added if another receiver was already connected
            with that dispatch_uid.

        sender
            The sender to which the receiver should respond. Must either be
            a Python object, or None to receive events from any sender.

        weak
            Whether to use weak references to the receiver. By default, the
            module will attempt to use weak references to the receiver
            objects. If this parameter is false, then strong references will
            be used.

        dispatch_uid
            An identifier used to uniquely identify a particular instance of
            a receiver. This will usually be a string, though it may be
            anything hashable.
  summary: Connect receiver to sender for signal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: receiver
      default: null
      rest: false
    - kind: positional
      name: sender
      default: None
      rest: false
    - kind: positional
      name: weak
      default: 'True'
      rest: false
    - kind: positional
      name: dispatch_uid
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signal.disconnect
  kind: method
  ns: django.dispatch
  description: |-
    Disconnect receiver from sender for signal.

    If weak references are used, disconnect need not be called. The receiver
    will be removed from dispatch automatically.

    Arguments:

        receiver
            The registered receiver to disconnect. May be none if
            dispatch_uid is specified.

        sender
            The registered sender to disconnect

        dispatch_uid
            the unique identifier of the receiver to disconnect
  summary: Disconnect receiver from sender for signal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: receiver
      default: None
      rest: false
    - kind: positional
      name: sender
      default: None
      rest: false
    - kind: positional
      name: dispatch_uid
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signal.has_listeners
  kind: method
  ns: django.dispatch
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sender
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signal.send
  kind: method
  ns: django.dispatch
  description: |-
    Send signal from sender to all connected receivers.

    If any receiver raises an error, the error propagates back through send,
    terminating the dispatch loop. So it's possible that all receivers
    won't be called if an error is raised.

    Arguments:

        sender
            The sender of the signal. Either a specific object or None.

        named
            Named arguments which will be passed to receivers.

    Return a list of tuple pairs [(receiver, response), ... ].
  summary: Send signal from sender to all connected receivers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sender
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Signal.send_robust
  kind: method
  ns: django.dispatch
  description: |-
    Send signal from sender to all connected receivers catching errors.

    Arguments:

        sender
            The sender of the signal. Can be any Python object (normally one
            registered with a connect if you actually want something to
            occur).

        named
            Named arguments which will be passed to receivers.

    Return a list of tuple pairs [(receiver, response), ... ].

    If any receiver raises an error (specifically any subclass of
    Exception), return the error instance as the result for that receiver.
  summary: Send signal from sender to all connected receivers catching errors
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: sender
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: dispatcher
  kind: module
  ns: django.dispatch
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NONE_ID
  kind: const
  ns: django.dispatch
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NO_RECEIVERS
  kind: const
  ns: django.dispatch
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: func_accepts_kwargs
  kind: function
  ns: django.dispatch
  description: Return True if function 'func' accepts keyword arguments **kwargs.
  summary: Return True if function 'func' accepts keyword arguments **kwargs
  signatures:
  - - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: logger
  kind: const
  ns: django.dispatch
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: receiver
  kind: function
  ns: django.dispatch
  description: |-
    A decorator for connecting receivers to signals. Used by passing in the
    signal (or list of signals) and keyword arguments to connect::

        @receiver(post_save, sender=MyModel)
        def signal_receiver(sender, **kwargs):
            ...

        @receiver([post_save, post_delete], sender=MyModel)
        def signals_receiver(sender, **kwargs):
            ...
  summary: A decorator for connecting receivers to signals
  signatures:
  - - kind: positional
      name: signal
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: receiver
  kind: function
  ns: django.dispatch
  description: |-
    A decorator for connecting receivers to signals. Used by passing in the
    signal (or list of signals) and keyword arguments to connect::

        @receiver(post_save, sender=MyModel)
        def signal_receiver(sender, **kwargs):
            ...

        @receiver([post_save, post_delete], sender=MyModel)
        def signals_receiver(sender, **kwargs):
            ...
  summary: A decorator for connecting receivers to signals
  signatures:
  - - kind: positional
      name: signal
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: django.http
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SimpleCookie
  kind: class
  ns: django.http
  description: |-
    SimpleCookie supports strings as cookie values.  When setting
    the value using the dictionary assignment notation, SimpleCookie
    calls the builtin str() to convert the value to a string.  Values
    received from HTTP are kept as strings.
  summary: SimpleCookie supports strings as cookie values
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: input
      default: None
      rest: false
    - type: SimpleCookie
      kind: return
  inherits_from:
  - <class 'http.cookies.BaseCookie'>
  - <class 'dict'>
- name: SimpleCookie.clear
  kind: callable
  ns: django.http
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: SimpleCookie.copy
  kind: callable
  ns: django.http
  description: D.copy() -> a shallow copy of D
  summary: D
  signatures: null
  inherits_from: null
- name: SimpleCookie.get
  kind: callable
  ns: django.http
  description: Return the value for key if key is in the dictionary, else default.
  summary: Return the value for key if key is in the dictionary, else default
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleCookie.items
  kind: callable
  ns: django.http
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures: null
  inherits_from: null
- name: SimpleCookie.js_output
  kind: method
  ns: django.http
  description: Return a string suitable for JavaScript.
  summary: Return a string suitable for JavaScript
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: attrs
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleCookie.keys
  kind: callable
  ns: django.http
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: SimpleCookie.load
  kind: method
  ns: django.http
  description: |-
    Load cookies from a string (presumably HTTP_COOKIE) or
    from a dictionary.  Loading cookies from a dictionary 'd'
    is equivalent to calling:
        map(Cookie.__setitem__, d.keys(), d.values())
  summary: Load cookies from a string (presumably HTTP_COOKIE) or
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: rawdata
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleCookie.output
  kind: method
  ns: django.http
  description: Return a string suitable for HTTP.
  summary: Return a string suitable for HTTP
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: attrs
      default: None
      rest: false
    - kind: positional
      name: header
      default: 'Set-Cookie:'
      rest: false
    - kind: positional
      name: sep
      default: "\r\n"
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleCookie.pop
  kind: callable
  ns: django.http
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures: null
  inherits_from: null
- name: SimpleCookie.popitem
  kind: callable
  ns: django.http
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleCookie.setdefault
  kind: callable
  ns: django.http
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleCookie.update
  kind: callable
  ns: django.http
  description: |-
    D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]
  summary: D
  signatures: null
  inherits_from: null
- name: SimpleCookie.value_decode
  kind: method
  ns: django.http
  description: |-
    real_value, coded_value = value_decode(STRING)
    Called prior to setting a cookie's value from the network
    representation.  The VALUE is the value read from HTTP
    header.
    Override this function to modify the behavior of cookies.
  summary: real_value, coded_value = value_decode(STRING)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleCookie.value_encode
  kind: method
  ns: django.http
  description: |-
    real_value, coded_value = value_encode(VALUE)
    Called prior to setting a cookie's value from the dictionary
    representation.  The VALUE is the value being assigned.
    Override this function to modify the behavior of cookies.
  summary: real_value, coded_value = value_encode(VALUE)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: val
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleCookie.values
  kind: callable
  ns: django.http
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures: null
  inherits_from: null
- name: parse_cookie
  kind: function
  ns: django.http
  description: Return a dictionary parsed from a `Cookie:` header string.
  summary: Return a dictionary parsed from a `Cookie:` header string
  signatures:
  - - kind: positional
      name: cookie
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders
  kind: class
  ns: django.http
  description: |-
    Mapping allowing case-insensitive key lookups. Original case of keys is
    preserved for iteration and string representation.

    Example::

        >>> ci_map = CaseInsensitiveMapping({'name': 'Jane'})
        >>> ci_map['Name']
        Jane
        >>> ci_map['NAME']
        Jane
        >>> ci_map['name']
        Jane
        >>> ci_map  # original case preserved
        {'name': 'Jane'}
  summary: Mapping allowing case-insensitive key lookups
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: environ
      default: null
      rest: false
    - type: HttpHeaders
      kind: return
  inherits_from:
  - <class 'django.utils.datastructures.CaseInsensitiveMapping'>
  - <class 'collections.abc.Mapping'>
  - <class 'collections.abc.Collection'>
  - <class 'collections.abc.Sized'>
  - <class 'collections.abc.Iterable'>
  - <class 'collections.abc.Container'>
- name: HttpHeaders.HTTP_PREFIX
  kind: property
  ns: django.http
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: HttpHeaders.UNPREFIXED_HEADERS
  kind: property
  ns: django.http
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: HttpHeaders.copy
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders.get
  kind: method
  ns: django.http
  description: D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders.items
  kind: method
  ns: django.http
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders.keys
  kind: method
  ns: django.http
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders.parse_header_name
  kind: function
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders.to_asgi_name
  kind: function
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders.to_asgi_names
  kind: function
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: headers
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders.to_wsgi_name
  kind: function
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders.to_wsgi_names
  kind: function
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: headers
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpHeaders.values
  kind: method
  ns: django.http
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest
  kind: class
  ns: django.http
  description: A basic HTTP request.
  summary: A basic HTTP request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: HttpRequest
      kind: return
  inherits_from: null
- name: HttpRequest.accepted_types
  kind: property
  ns: django.http
  description: Return a list of MediaType instances.
  summary: Return a list of MediaType instances
  signatures: null
  inherits_from: null
- name: HttpRequest.accepts
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: media_type
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.body
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpRequest.build_absolute_uri
  kind: method
  ns: django.http
  description: |-
    Build an absolute URI from the location and the variables available in
    this request. If no ``location`` is specified, build the absolute URI
    using request.get_full_path(). If the location is absolute, convert it
    to an RFC 3987 compliant URI and return it. If location is relative or
    is scheme-relative (i.e., ``//example.com/``), urljoin() it to a base
    URL constructed from the request variables.
  summary: Build an absolute URI from the location and the variables available in
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: location
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.encoding
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpRequest.get_full_path
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: force_append_slash
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.get_full_path_info
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: force_append_slash
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.get_host
  kind: method
  ns: django.http
  description: Return the HTTP host using the environment or request headers.
  summary: Return the HTTP host using the environment or request headers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.get_port
  kind: method
  ns: django.http
  description: Return the port number for the request as a string.
  summary: Return the port number for the request as a string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.get_signed_cookie
  kind: method
  ns: django.http
  description: |-
    Attempt to return a signed cookie. If the signature fails or the
    cookie has expired, raise an exception, unless the `default` argument
    is provided,  in which case return that value.
  summary: Attempt to return a signed cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: <object object at 0x7f7ace864be0>
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.headers
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpRequest.is_secure
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.parse_file_upload
  kind: method
  ns: django.http
  description: Return a tuple of (POST QueryDict, FILES MultiValueDict).
  summary: Return a tuple of (POST QueryDict, FILES MultiValueDict)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: META
      default: null
      rest: false
    - kind: positional
      name: post_data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.read
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.readline
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.readlines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpRequest.scheme
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpRequest.upload_handlers
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: QueryDict
  kind: class
  ns: django.http
  description: |-
    A specialized MultiValueDict which represents a query string.

    A QueryDict can be used to represent GET or POST data. It subclasses
    MultiValueDict since keys in such data can be repeated, for instance
    in the data from a form with a <select multiple> field.

    By default QueryDicts are immutable, though the copy() method
    will always return a mutable copy.

    Both keys and values set on this class are converted from the given encoding
    (DEFAULT_CHARSET by default) to str.
  summary: A specialized MultiValueDict which represents a query string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: query_string
      default: None
      rest: false
    - kind: positional
      name: mutable
      default: 'False'
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - type: QueryDict
      kind: return
  inherits_from:
  - <class 'django.utils.datastructures.MultiValueDict'>
  - <class 'dict'>
- name: QueryDict.appendlist
  kind: method
  ns: django.http
  description: Append an item to the internal list associated with key.
  summary: Append an item to the internal list associated with key
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.clear
  kind: method
  ns: django.http
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.copy
  kind: method
  ns: django.http
  description: Return a mutable copy of this object.
  summary: Return a mutable copy of this object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.dict
  kind: method
  ns: django.http
  description: Return current object as a dict with singular values.
  summary: Return current object as a dict with singular values
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.encoding
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: QueryDict.fromkeys
  kind: function
  ns: django.http
  description: |-
    Return a new QueryDict with keys (may be repeated) from an iterable and
    values from value.
  summary: Return a new QueryDict with keys (may be repeated) from an iterable and
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: iterable
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: mutable
      default: 'False'
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.get
  kind: method
  ns: django.http
  description: |-
    Return the last data value for the passed key. If key doesn't exist
    or value is an empty list, return `default`.
  summary: Return the last data value for the passed key
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.getlist
  kind: method
  ns: django.http
  description: |-
    Return the list of values for the key. If key doesn't exist, return a
    default value.
  summary: Return the list of values for the key
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.items
  kind: method
  ns: django.http
  description: |-
    Yield (key, value) pairs, where value is the last item in the list
    associated with the key.
  summary: Yield (key, value) pairs, where value is the last item in the list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.keys
  kind: callable
  ns: django.http
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: QueryDict.lists
  kind: method
  ns: django.http
  description: Yield (key, list) pairs.
  summary: Yield (key, list) pairs
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.pop
  kind: method
  ns: django.http
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.popitem
  kind: method
  ns: django.http
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.setdefault
  kind: method
  ns: django.http
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.setlist
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: list_
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.setlistdefault
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default_list
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.update
  kind: method
  ns: django.http
  description: Extend rather than replace existing key lists.
  summary: Extend rather than replace existing key lists
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.urlencode
  kind: method
  ns: django.http
  description: |-
    Return an encoded string of all query string arguments.

    `safe` specifies characters which don't require quoting, for example::

        >>> q = QueryDict(mutable=True)
        >>> q['next'] = '/a&b/'
        >>> q.urlencode()
        'next=%2Fa%26b%2F'
        >>> q.urlencode(safe='/')
        'next=/a%26b/'
  summary: Return an encoded string of all query string arguments
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: safe
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: QueryDict.values
  kind: method
  ns: django.http
  description: Yield the last value on every key list.
  summary: Yield the last value on every key list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RawPostDataException
  kind: class
  ns: django.http
  description: |-
    You cannot access raw_post_data from a request that has
    multipart/* POST data if it has been accessed via POST,
    FILES, etc..
  summary: You cannot access raw_post_data from a request that has
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: RawPostDataException.add_note
  kind: callable
  ns: django.http
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RawPostDataException.args
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RawPostDataException.with_traceback
  kind: callable
  ns: django.http
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: UnreadablePostError
  kind: class
  ns: django.http
  description: Base class for I/O related errors.
  summary: Base class for I/O related errors
  signatures: null
  inherits_from:
  - <class 'OSError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: UnreadablePostError.add_note
  kind: callable
  ns: django.http
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: UnreadablePostError.args
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UnreadablePostError.characters_written
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UnreadablePostError.errno
  kind: property
  ns: django.http
  description: POSIX exception code
  summary: POSIX exception code
  signatures: null
  inherits_from: null
- name: UnreadablePostError.filename
  kind: property
  ns: django.http
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: UnreadablePostError.filename2
  kind: property
  ns: django.http
  description: second exception filename
  summary: second exception filename
  signatures: null
  inherits_from: null
- name: UnreadablePostError.strerror
  kind: property
  ns: django.http
  description: exception strerror
  summary: exception strerror
  signatures: null
  inherits_from: null
- name: UnreadablePostError.with_traceback
  kind: callable
  ns: django.http
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: HttpResponse
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: b''
      rest: false
    - type: HttpResponse
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponse.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponse.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponse.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponse.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponse.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponse.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponse.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase
  kind: class
  ns: django.http
  description: |-
    An HTTP response base class with dictionary-accessed headers.

    This class doesn't handle content. It should not be used directly.
    Use the HttpResponse and StreamingHttpResponse subclasses instead.
  summary: An HTTP response base class with dictionary-accessed headers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: None
      rest: false
    - kind: positional
      name: status
      default: None
      rest: false
    - kind: positional
      name: reason
      default: None
      rest: false
    - kind: positional
      name: charset
      default: None
      rest: false
    - kind: positional
      name: headers
      default: None
      rest: false
    - type: HttpResponseBase
      kind: return
  inherits_from: null
- name: HttpResponseBase.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseBase.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseBase.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponseBase.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBase.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse
  kind: class
  ns: django.http
  description: |-
    A streaming HTTP response class with an iterator as content.

    This should only be iterated once, when the response is streamed to the
    client. However, it can be appended to or replaced with a new iterator
    that wraps the original content (or yields entirely new content).
  summary: A streaming HTTP response class with an iterator as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: streaming_content
      default: ()
      rest: false
    - type: StreamingHttpResponse
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponseBase'>
- name: StreamingHttpResponse.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StreamingHttpResponse.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StreamingHttpResponse.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StreamingHttpResponse.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: StreamingHttpResponse.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: StreamingHttpResponse.streaming_content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StreamingHttpResponse.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StreamingHttpResponse.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: redirect_to
      default: null
      rest: false
    - type: HttpResponseRedirect
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponseRedirectBase'>
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponseRedirect.allowed_schemes
  kind: property
  ns: django.http
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: HttpResponseRedirect.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseRedirect.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseRedirect.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseRedirect.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponseRedirect.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponseRedirect.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.url
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseRedirect.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseRedirect.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: redirect_to
      default: null
      rest: false
    - type: HttpResponsePermanentRedirect
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponseRedirectBase'>
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponsePermanentRedirect.allowed_schemes
  kind: property
  ns: django.http
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: HttpResponsePermanentRedirect.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponsePermanentRedirect.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponsePermanentRedirect.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponsePermanentRedirect.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponsePermanentRedirect.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponsePermanentRedirect.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.url
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponsePermanentRedirect.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponsePermanentRedirect.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: HttpResponseNotModified
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponseNotModified.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseNotModified.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseNotModified.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseNotModified.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponseNotModified.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponseNotModified.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotModified.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: b''
      rest: false
    - type: HttpResponseBadRequest
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponseBadRequest.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseBadRequest.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseBadRequest.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseBadRequest.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponseBadRequest.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponseBadRequest.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseBadRequest.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: b''
      rest: false
    - type: HttpResponseForbidden
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponseForbidden.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseForbidden.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseForbidden.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseForbidden.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponseForbidden.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponseForbidden.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseForbidden.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: b''
      rest: false
    - type: HttpResponseNotFound
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponseNotFound.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseNotFound.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseNotFound.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseNotFound.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponseNotFound.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponseNotFound.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotFound.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: permitted_methods
      default: null
      rest: false
    - type: HttpResponseNotAllowed
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponseNotAllowed.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseNotAllowed.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseNotAllowed.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseNotAllowed.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponseNotAllowed.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponseNotAllowed.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseNotAllowed.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: b''
      rest: false
    - type: HttpResponseGone
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponseGone.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseGone.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseGone.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseGone.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponseGone.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponseGone.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseGone.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError
  kind: class
  ns: django.http
  description: |-
    An HTTP response class with a string as content.

    This content can be read, appended to, or replaced.
  summary: An HTTP response class with a string as content
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: b''
      rest: false
    - type: HttpResponseServerError
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: HttpResponseServerError.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseServerError.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseServerError.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HttpResponseServerError.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HttpResponseServerError.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HttpResponseServerError.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HttpResponseServerError.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Http404
  kind: class
  ns: django.http
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Http404.add_note
  kind: callable
  ns: django.http
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Http404.args
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Http404.with_traceback
  kind: callable
  ns: django.http
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadHeaderError
  kind: class
  ns: django.http
  description: Inappropriate argument value (of correct type).
  summary: Inappropriate argument value (of correct type)
  signatures: null
  inherits_from:
  - <class 'ValueError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BadHeaderError.add_note
  kind: callable
  ns: django.http
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadHeaderError.args
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BadHeaderError.with_traceback
  kind: callable
  ns: django.http
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: JsonResponse
  kind: class
  ns: django.http
  description: |-
    An HTTP response class that consumes data to be serialized to JSON.

    :param data: Data to be dumped into json. By default only ``dict`` objects
      are allowed to be passed due to a security flaw before ECMAScript 5. See
      the ``safe`` parameter for more information.
    :param encoder: Should be a json encoder class. Defaults to
      ``django.core.serializers.json.DjangoJSONEncoder``.
    :param safe: Controls if only ``dict`` objects may be serialized. Defaults
      to ``True``.
    :param json_dumps_params: A dictionary of kwargs passed to json.dumps().
  summary: An HTTP response class that consumes data to be serialized to JSON
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: encoder
      default: <class 'django.core.serializers.json.DjangoJSONEncoder'>
      rest: false
    - kind: positional
      name: safe
      default: 'True'
      rest: false
    - kind: positional
      name: json_dumps_params
      default: None
      rest: false
    - type: JsonResponse
      kind: return
  inherits_from:
  - <class 'django.http.response.HttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: JsonResponse.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JsonResponse.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JsonResponse.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: JsonResponse.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.serialize
  kind: method
  ns: django.http
  description: Full HTTP message, including headers, as a bytestring.
  summary: Full HTTP message, including headers, as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: JsonResponse.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: JsonResponse.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: JsonResponse.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse
  kind: class
  ns: django.http
  description: A streaming HTTP response class optimized for files.
  summary: A streaming HTTP response class optimized for files
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: as_attachment
      default: 'False'
      rest: false
      kind: kw-only
    - name: filename
      default: null
      rest: false
      kind: kw-only
    - type: FileResponse
      kind: return
  inherits_from:
  - <class 'django.http.response.StreamingHttpResponse'>
  - <class 'django.http.response.HttpResponseBase'>
- name: FileResponse.block_size
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: FileResponse.charset
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FileResponse.close
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FileResponse.delete_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.flush
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.get
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - kind: positional
      name: alternate
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.getvalue
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.has_header
  kind: method
  ns: django.http
  description: Case-insensitive check for a header.
  summary: Case-insensitive check for a header
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: header
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.items
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.make_bytes
  kind: method
  ns: django.http
  description: Turn a value into a bytestring encoded in the output charset.
  summary: Turn a value into a bytestring encoded in the output charset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.readable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.reason_phrase
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FileResponse.seekable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.serialize_headers
  kind: method
  ns: django.http
  description: HTTP headers as a bytestring.
  summary: HTTP headers as a bytestring
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.set_cookie
  kind: method
  ns: django.http
  description: |-
    Set a cookie.

    ``expires`` can be:
    - a string in the correct format,
    - a naive ``datetime.datetime`` object in UTC,
    - an aware ``datetime.datetime`` object in any time zone.
    If it is a ``datetime.datetime`` object then calculate ``max_age``.

    ``max_age`` can be:
    - int/float specifying seconds,
    - ``datetime.timedelta`` object.
  summary: Set a cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - kind: positional
      name: expires
      default: None
      rest: false
    - kind: positional
      name: path
      default: /
      rest: false
    - kind: positional
      name: domain
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - kind: positional
      name: httponly
      default: 'False'
      rest: false
    - kind: positional
      name: samesite
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.set_headers
  kind: method
  ns: django.http
  description: |-
    Set some common response headers (Content-Length, Content-Type, and
    Content-Disposition) based on the `filelike` response content.
  summary: Set some common response headers (Content-Length, Content-Type, and
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: filelike
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.set_signed_cookie
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.setdefault
  kind: method
  ns: django.http
  description: Set a header unless it has already been set.
  summary: Set a header unless it has already been set
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.status_code
  kind: property
  ns: django.http
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: FileResponse.streaming
  kind: property
  ns: django.http
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FileResponse.streaming_content
  kind: property
  ns: django.http
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FileResponse.tell
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.writable
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.write
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: content
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FileResponse.writelines
  kind: method
  ns: django.http
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lines
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: django.middleware
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: django.shortcuts
  kind: module
  ns: null
  description: |-
    This module collects helper functions and classes that "span" multiple levels
    of MVC. In other words, these functions/classes introduce controlled coupling
    for convenience's sake.
  summary: This module collects helper functions and classes that "span" multiple levels
  signatures: null
  inherits_from: null
- name: NoReverseMatch
  kind: class
  ns: django.shortcuts
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NoReverseMatch.add_note
  kind: callable
  ns: django.shortcuts
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NoReverseMatch.args
  kind: property
  ns: django.shortcuts
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NoReverseMatch.with_traceback
  kind: callable
  ns: django.shortcuts
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: get_list_or_404
  kind: function
  ns: django.shortcuts
  description: |-
    Use filter() to return a list of objects, or raise an Http404 exception if
    the list is empty.

    klass may be a Model, Manager, or QuerySet object. All other passed
    arguments and keyword arguments are used in the filter() query.
  summary: Use filter() to return a list of objects, or raise an Http404 exception if
  signatures:
  - - kind: positional
      name: klass
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_object_or_404
  kind: function
  ns: django.shortcuts
  description: |-
    Use get() to return an object, or raise an Http404 exception if the object
    does not exist.

    klass may be a Model, Manager, or QuerySet object. All other passed
    arguments and keyword arguments are used in the get() query.

    Like with QuerySet.get(), MultipleObjectsReturned is raised if more than
    one object is found.
  summary: Use get() to return an object, or raise an Http404 exception if the object
  signatures:
  - - kind: positional
      name: klass
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: redirect
  kind: function
  ns: django.shortcuts
  description: |-
    Return an HttpResponseRedirect to the appropriate URL for the arguments
    passed.

    The arguments could be:

        * A model: the model's `get_absolute_url()` function will be called.

        * A view name, possibly with arguments: `urls.reverse()` will be used
          to reverse-resolve the name.

        * A URL, which will be used as-is for the redirect location.

    Issues a temporary redirect by default; pass permanent=True to issue a
    permanent redirect.
  summary: Return an HttpResponseRedirect to the appropriate URL for the arguments
  signatures:
  - - kind: positional
      name: to
      default: null
      rest: false
    - name: permanent
      default: 'False'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: render
  kind: function
  ns: django.shortcuts
  description: |-
    Return an HttpResponse whose content is filled with the result of calling
    django.template.loader.render_to_string() with the passed arguments.
  summary: Return an HttpResponse whose content is filled with the result of calling
  signatures:
  - - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: template_name
      default: null
      rest: false
    - kind: positional
      name: context
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: None
      rest: false
    - kind: positional
      name: status
      default: None
      rest: false
    - kind: positional
      name: using
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: resolve_url
  kind: function
  ns: django.shortcuts
  description: |-
    Return a URL appropriate for the arguments passed.

    The arguments could be:

        * A model: the model's `get_absolute_url()` function will be called.

        * A view name, possibly with arguments: `urls.reverse()` will be used
          to reverse-resolve the name.

        * A URL, which will be returned as-is.
  summary: Return a URL appropriate for the arguments passed
  signatures:
  - - kind: positional
      name: to
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: reverse
  kind: function
  ns: django.shortcuts
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: viewname
      default: null
      rest: false
    - kind: positional
      name: urlconf
      default: None
      rest: false
    - kind: positional
      name: args
      default: None
      rest: false
    - kind: positional
      name: kwargs
      default: None
      rest: false
    - kind: positional
      name: current_app
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: django.template
  kind: module
  ns: null
  description: |-
    Django's support for templates.

    The django.template namespace contains two independent subsystems:

    1. Multiple Template Engines: support for pluggable template backends,
       built-in backends and backend-independent APIs
    2. Django Template Language: Django's own template engine, including its
       built-in loaders, context processors, tags and filters.

    Ideally these subsystems would be implemented in distinct packages. However
    keeping them together made the implementation of Multiple Template Engines
    less disruptive .

    Here's a breakdown of which modules belong to which subsystem.

    Multiple Template Engines:

    - django.template.backends.*
    - django.template.loader
    - django.template.response

    Django Template Language:

    - django.template.base
    - django.template.context
    - django.template.context_processors
    - django.template.loaders.*
    - django.template.debug
    - django.template.defaultfilters
    - django.template.defaulttags
    - django.template.engine
    - django.template.loader_tags
    - django.template.smartif

    Shared:

    - django.template.utils
  summary: Django's support for templates
  signatures: null
  inherits_from: null
- name: Engine
  kind: class
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: dirs
      default: None
      rest: false
    - kind: positional
      name: app_dirs
      default: 'False'
      rest: false
    - kind: positional
      name: context_processors
      default: None
      rest: false
    - kind: positional
      name: debug
      default: 'False'
      rest: false
    - kind: positional
      name: loaders
      default: None
      rest: false
    - kind: positional
      name: string_if_invalid
      default: null
      rest: false
    - kind: positional
      name: file_charset
      default: utf-8
      rest: false
    - kind: positional
      name: libraries
      default: None
      rest: false
    - kind: positional
      name: builtins
      default: None
      rest: false
    - kind: positional
      name: autoescape
      default: 'True'
      rest: false
    - type: Engine
      kind: return
  inherits_from: null
- name: Engine.default_builtins
  kind: property
  ns: django.template
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: Engine.find_template
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: dirs
      default: None
      rest: false
    - kind: positional
      name: skip
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Engine.find_template_loader
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: loader
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Engine.from_string
  kind: method
  ns: django.template
  description: |-
    Return a compiled Template object for the given template code,
    handling template inheritance recursively.
  summary: Return a compiled Template object for the given template code,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: template_code
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Engine.get_default
  kind: callable
  ns: django.template
  description: |-
    Return the first DjangoTemplates backend that's configured, or raise
    ImproperlyConfigured if none are configured.

    This is required for preserving historical APIs that rely on a
    globally available, implicitly configured engine such as:

    >>> from django.template import Context, Template
    >>> template = Template("Hello {{ name }}!")
    >>> context = Context({'name': "world"})
    >>> template.render(context)
    'Hello world!'
  summary: Return the first DjangoTemplates backend that's configured, or raise
  signatures: null
  inherits_from: null
- name: Engine.get_template
  kind: method
  ns: django.template
  description: |-
    Return a compiled Template object for the given template name,
    handling template inheritance recursively.
  summary: Return a compiled Template object for the given template name,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: template_name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Engine.get_template_builtins
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: builtins
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Engine.get_template_libraries
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: libraries
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Engine.get_template_loaders
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: template_loaders
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Engine.render_to_string
  kind: method
  ns: django.template
  description: |-
    Render the template specified by template_name with the given context.
    For use in Django's test suite.
  summary: Render the template specified by template_name with the given context
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: template_name
      default: null
      rest: false
    - kind: positional
      name: context
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Engine.select_template
  kind: method
  ns: django.template
  description: Given a list of template names, return the first that can be loaded.
  summary: Given a list of template names, return the first that can be loaded
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: template_name_list
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Engine.template_context_processors
  kind: property
  ns: django.template
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Engine.template_loaders
  kind: property
  ns: django.template
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: engines
  kind: const
  ns: django.template
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Template
  kind: class
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: template_string
      default: null
      rest: false
    - kind: positional
      name: origin
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: engine
      default: None
      rest: false
    - type: Template
      kind: return
  inherits_from: null
- name: Template.compile_nodelist
  kind: method
  ns: django.template
  description: |-
    Parse and compile the template source into a nodelist. If debug
    is True and an exception occurs during parsing, the exception is
    annotated with contextual line information where it occurred in the
    template source.
  summary: Parse and compile the template source into a nodelist
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Template.get_exception_info
  kind: method
  ns: django.template
  description: |-
    Return a dictionary containing contextual line information of where
    the exception occurred in the template. The following information is
    provided:

    message
        The message of the exception raised.

    source_lines
        The lines before, after, and including the line the exception
        occurred on.

    line
        The line number the exception occurred on.

    before, during, after
        The line the exception occurred on split into three parts:
        1. The content before the token that raised the error.
        2. The token that raised the error.
        3. The content after the token that raised the error.

    total
        The number of lines in source_lines.

    top
        The line number where source_lines starts.

    bottom
        The line number where source_lines ends.

    start
        The start position of the token in the template source.

    end
        The end position of the token in the template source.
  summary: Return a dictionary containing contextual line information of where
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: token
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Template.render
  kind: method
  ns: django.template
  description: Display stage -- can be called many times
  summary: Display stage -- can be called many times
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Context
  kind: class
  ns: django.template
  description: A stack container for variable context
  summary: A stack container for variable context
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: dict_
      default: None
      rest: false
    - kind: positional
      name: autoescape
      default: 'True'
      rest: false
    - kind: positional
      name: use_l10n
      default: None
      rest: false
    - kind: positional
      name: use_tz
      default: None
      rest: false
    - type: Context
      kind: return
  inherits_from:
  - <class 'django.template.context.BaseContext'>
- name: Context.bind_template
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Context.flatten
  kind: method
  ns: django.template
  description: Return self.dicts as one dictionary.
  summary: Return self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Context.get
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: otherwise
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Context.new
  kind: method
  ns: django.template
  description: |-
    Return a new context with the same properties, but with only the
    values given in 'values' stored.
  summary: Return a new context with the same properties, but with only the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: values
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Context.pop
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Context.push
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Context.set_upward
  kind: method
  ns: django.template
  description: |-
    Set a variable in one of the higher contexts if it exists there,
    otherwise in the current context.
  summary: Set a variable in one of the higher contexts if it exists there,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Context.setdefault
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Context.update
  kind: method
  ns: django.template
  description: Push other_dict to the stack of dictionaries in the Context
  summary: Push other_dict to the stack of dictionaries in the Context
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: other_dict
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestContext
  kind: class
  ns: django.template
  description: |-
    This subclass of template.Context automatically populates itself using
    the processors defined in the engine's configuration.
    Additional processors can be specified as a list of callables
    using the "processors" keyword argument.
  summary: This subclass of template
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: dict_
      default: None
      rest: false
    - kind: positional
      name: processors
      default: None
      rest: false
    - kind: positional
      name: use_l10n
      default: None
      rest: false
    - kind: positional
      name: use_tz
      default: None
      rest: false
    - kind: positional
      name: autoescape
      default: 'True'
      rest: false
    - type: RequestContext
      kind: return
  inherits_from:
  - <class 'django.template.context.Context'>
  - <class 'django.template.context.BaseContext'>
- name: RequestContext.bind_template
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: RequestContext.flatten
  kind: method
  ns: django.template
  description: Return self.dicts as one dictionary.
  summary: Return self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestContext.get
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: otherwise
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestContext.new
  kind: method
  ns: django.template
  description: |-
    Return a new context with the same properties, but with only the
    values given in 'values' stored.
  summary: Return a new context with the same properties, but with only the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: values
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestContext.pop
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestContext.push
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestContext.set_upward
  kind: method
  ns: django.template
  description: |-
    Set a variable in one of the higher contexts if it exists there,
    otherwise in the current context.
  summary: Set a variable in one of the higher contexts if it exists there,
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestContext.setdefault
  kind: method
  ns: django.template
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestContext.update
  kind: method
  ns: django.template
  description: Push other_dict to the stack of dictionaries in the Context
  summary: Push other_dict to the stack of dictionaries in the Context
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: other_dict
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: django.templatetags
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: static
  kind: module
  ns: django.templatetags
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PrefixNode
  kind: class
  ns: django.templatetags
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: varname
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: PrefixNode
      kind: return
  inherits_from:
  - <class 'django.template.base.Node'>
- name: PrefixNode.child_nodelists
  kind: property
  ns: django.templatetags
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: PrefixNode.get_nodes_by_type
  kind: method
  ns: django.templatetags
  description: |-
    Return a list of all nodes (within this node and its nodelist)
    of the given type
  summary: Return a list of all nodes (within this node and its nodelist)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: nodetype
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PrefixNode.handle_simple
  kind: function
  ns: django.templatetags
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PrefixNode.handle_token
  kind: function
  ns: django.templatetags
  description: Class method to parse prefix node and return a Node.
  summary: Class method to parse prefix node and return a Node
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parser
      default: null
      rest: false
    - kind: positional
      name: token
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PrefixNode.must_be_first
  kind: property
  ns: django.templatetags
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: PrefixNode.render
  kind: method
  ns: django.templatetags
  description: Return the node rendered as a string.
  summary: Return the node rendered as a string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PrefixNode.render_annotated
  kind: method
  ns: django.templatetags
  description: |-
    Render the node. If debug is True and an exception occurs during
    rendering, the exception is annotated with contextual line information
    where it occurred in the template. For internal usage this method is
    preferred over using the render method directly.
  summary: Render the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PrefixNode.token
  kind: property
  ns: django.templatetags
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StaticNode
  kind: class
  ns: django.templatetags
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: varname
      default: None
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - type: StaticNode
      kind: return
  inherits_from:
  - <class 'django.template.base.Node'>
- name: StaticNode.child_nodelists
  kind: property
  ns: django.templatetags
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: StaticNode.get_nodes_by_type
  kind: method
  ns: django.templatetags
  description: |-
    Return a list of all nodes (within this node and its nodelist)
    of the given type
  summary: Return a list of all nodes (within this node and its nodelist)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: nodetype
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StaticNode.handle_simple
  kind: function
  ns: django.templatetags
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StaticNode.handle_token
  kind: function
  ns: django.templatetags
  description: Class method to parse prefix node and return a Node.
  summary: Class method to parse prefix node and return a Node
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: parser
      default: null
      rest: false
    - kind: positional
      name: token
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StaticNode.must_be_first
  kind: property
  ns: django.templatetags
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: StaticNode.render
  kind: method
  ns: django.templatetags
  description: Return the node rendered as a string.
  summary: Return the node rendered as a string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StaticNode.render_annotated
  kind: method
  ns: django.templatetags
  description: |-
    Render the node. If debug is True and an exception occurs during
    rendering, the exception is annotated with contextual line information
    where it occurred in the template. For internal usage this method is
    preferred over using the render method directly.
  summary: Render the node
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: StaticNode.token
  kind: property
  ns: django.templatetags
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StaticNode.url
  kind: method
  ns: django.templatetags
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: context
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: apps
  kind: const
  ns: django.templatetags
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: conditional_escape
  kind: function
  ns: django.templatetags
  description: |-
    Similar to escape(), except that it doesn't operate on pre-escaped strings.

    This function relies on the __html__ convention used both by Django's
    SafeData class and by third-party libraries like markupsafe.
  summary: Similar to escape(), except that it doesn't operate on pre-escaped strings
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: do_static
  kind: function
  ns: django.templatetags
  description: |-
    Join the given path with the STATIC_URL setting.

    Usage::

        {% static path [as varname] %}

    Examples::

        {% static "myapp/css/base.css" %}
        {% static variable_with_path %}
        {% static "myapp/css/base.css" as admin_base_css %}
        {% static variable_with_path as varname %}
  summary: Join the given path with the STATIC_URL setting
  signatures:
  - - kind: positional
      name: parser
      default: null
      rest: false
    - kind: positional
      name: token
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_media_prefix
  kind: function
  ns: django.templatetags
  description: |-
    Populate a template variable with the media prefix,
    ``settings.MEDIA_URL``.

    Usage::

        {% get_media_prefix [as varname] %}

    Examples::

        {% get_media_prefix %}
        {% get_media_prefix as media_prefix %}
  summary: Populate a template variable with the media prefix,
  signatures:
  - - kind: positional
      name: parser
      default: null
      rest: false
    - kind: positional
      name: token
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_static_prefix
  kind: function
  ns: django.templatetags
  description: |-
    Populate a template variable with the static prefix,
    ``settings.STATIC_URL``.

    Usage::

        {% get_static_prefix [as varname] %}

    Examples::

        {% get_static_prefix %}
        {% get_static_prefix as static_prefix %}
  summary: Populate a template variable with the static prefix,
  signatures:
  - - kind: positional
      name: parser
      default: null
      rest: false
    - kind: positional
      name: token
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: iri_to_uri
  kind: function
  ns: django.templatetags
  description: "Convert an Internationalized Resource Identifier (IRI) portion to a URI\nportion that is suitable for inclusion in a URL.\n\nThis is the algorithm from RFC 3987 Section 3.1, slightly simplified since\nthe input is assumed to be a string rather than an arbitrary byte stream.\n\nTake an IRI (string or UTF-8 bytes, e.g. '/I ♥ Django/' or\nb'/I â\x99¥ Django/') and return a string containing the encoded\nresult with ASCII chars only (e.g. '/I%20%E2%99%A5%20Django/')."
  summary: Convert an Internationalized Resource Identifier (IRI) portion to a URI
  signatures:
  - - kind: positional
      name: iri
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: quote
  kind: function
  ns: django.templatetags
  description: |-
    quote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted. The
    quote function offers a cautious (not minimal) way to quote a
    string for most of these parts.

    RFC 3986 Uniform Resource Identifier (URI): Generic Syntax lists
    the following (un)reserved characters.

    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
    reserved      = gen-delims / sub-delims
    gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
                  / "*" / "+" / "," / ";" / "="

    Each of the reserved characters is reserved in some component of a URL,
    but not necessarily in all of them.

    The quote function %-escapes all characters that are neither in the
    unreserved chars ("always safe") nor the additional chars set via the
    safe arg.

    The default for the safe arg is '/'. The character is reserved, but in
    typical usage the quote function is being called on a path where the
    existing slash characters are to be preserved.

    Python 3.7 updates from using RFC 2396 to RFC 3986 to quote URL strings.
    Now, "~" is included in the set of unreserved characters.

    string and safe may be either str or bytes objects. encoding and errors
    must not be specified if string is a bytes object.

    The optional encoding and errors parameters specify how to deal with
    non-ASCII characters, as accepted by the str.encode method.
    By default, encoding='utf-8' (characters are encoded with UTF-8), and
    errors='strict' (unsupported characters raise a UnicodeEncodeError).
  summary: quote('abc def') -> 'abc%20def'
  signatures:
  - - kind: positional
      name: string
      default: null
      rest: false
    - kind: positional
      name: safe
      default: /
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - kind: positional
      name: errors
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: register
  kind: const
  ns: django.templatetags
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: static
  kind: function
  ns: django.templatetags
  description: |-
    Given a relative path to a static asset, return the absolute path to the
    asset.
  summary: Given a relative path to a static asset, return the absolute path to the
  signatures:
  - - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: urljoin
  kind: function
  ns: django.templatetags
  description: |-
    Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter.
  summary: Join a base URL and a possibly relative URL to form an absolute
  signatures:
  - - kind: positional
      name: base
      default: null
      rest: false
    - kind: positional
      name: url
      default: null
      rest: false
    - kind: positional
      name: allow_fragments
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: django.test
  kind: module
  ns: null
  description: Django Unit Test framework.
  summary: Django Unit Test framework
  signatures: null
  inherits_from: null
- name: AsyncClient
  kind: class
  ns: django.test
  description: |-
    An async version of Client that creates ASGIRequests and calls through an
    async request path.

    Does not currently support "follow" on its methods.
  summary: An async version of Client that creates ASGIRequests and calls through an
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: enforce_csrf_checks
      default: 'False'
      rest: false
    - kind: positional
      name: raise_request_exception
      default: 'True'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: AsyncClient
      kind: return
  inherits_from:
  - <class 'django.test.client.ClientMixin'>
  - <class 'django.test.client.AsyncRequestFactory'>
  - <class 'django.test.client.RequestFactory'>
- name: AsyncClient.check_exception
  kind: method
  ns: django.test
  description: |-
    Look for a signaled exception, clear the current context exception
    data, re-raise the signaled exception, and clear the signaled exception
    from the local cache.
  summary: Look for a signaled exception, clear the current context exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.delete
  kind: method
  ns: django.test
  description: Construct a DELETE request.
  summary: Construct a DELETE request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.force_login
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: user
      default: null
      rest: false
    - kind: positional
      name: backend
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.generic
  kind: method
  ns: django.test
  description: Construct an arbitrary HTTP request.
  summary: Construct an arbitrary HTTP request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.get
  kind: method
  ns: django.test
  description: Construct a GET request.
  summary: Construct a GET request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.head
  kind: method
  ns: django.test
  description: Construct a HEAD request.
  summary: Construct a HEAD request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.login
  kind: method
  ns: django.test
  description: |-
    Set the Factory to appear as if it has successfully logged into a site.

    Return True if login is possible or False if the provided credentials
    are incorrect.
  summary: Set the Factory to appear as if it has successfully logged into a site
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.logout
  kind: method
  ns: django.test
  description: Log out the user by removing the cookies and session object.
  summary: Log out the user by removing the cookies and session object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.options
  kind: method
  ns: django.test
  description: Construct an OPTIONS request.
  summary: Construct an OPTIONS request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.patch
  kind: method
  ns: django.test
  description: Construct a PATCH request.
  summary: Construct a PATCH request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.post
  kind: method
  ns: django.test
  description: Construct a POST request.
  summary: Construct a POST request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: multipart/form-data; boundary=BoUnDaRyStRiNg
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.put
  kind: method
  ns: django.test
  description: Construct a PUT request.
  summary: Construct a PUT request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.request
  kind: method
  ns: django.test
  description: |-
    Make a generic request. Compose the scope dictionary and pass to the
    handler, return the result of the handler. Assume defaults for the
    query environment, which can be overridden using the arguments to the
    request.
  summary: Make a generic request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.session
  kind: property
  ns: django.test
  description: Return the current session variables.
  summary: Return the current session variables
  signatures: null
  inherits_from: null
- name: AsyncClient.store_exc_info
  kind: method
  ns: django.test
  description: Store exceptions when they are generated by a view.
  summary: Store exceptions when they are generated by a view
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncClient.trace
  kind: method
  ns: django.test
  description: Construct a TRACE request.
  summary: Construct a TRACE request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory
  kind: class
  ns: django.test
  description: |-
    Class that lets you create mock ASGI-like Request objects for use in
    testing. Usage:

    rf = AsyncRequestFactory()
    get_request = await rf.get('/hello/')
    post_request = await rf.post('/submit/', {'foo': 'bar'})

    Once you have a request object you can pass it to any view function,
    including synchronous ones. The reason we have a separate class here is:
    a) this makes ASGIRequest subclasses, and
    b) AsyncTestClient can subclass it.
  summary: Class that lets you create mock ASGI-like Request objects for use in
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: json_encoder
      default: <class 'django.core.serializers.json.DjangoJSONEncoder'>
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: AsyncRequestFactory
      kind: return
  inherits_from:
  - <class 'django.test.client.RequestFactory'>
- name: AsyncRequestFactory.delete
  kind: method
  ns: django.test
  description: Construct a DELETE request.
  summary: Construct a DELETE request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory.generic
  kind: method
  ns: django.test
  description: Construct an arbitrary HTTP request.
  summary: Construct an arbitrary HTTP request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory.get
  kind: method
  ns: django.test
  description: Construct a GET request.
  summary: Construct a GET request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory.head
  kind: method
  ns: django.test
  description: Construct a HEAD request.
  summary: Construct a HEAD request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory.options
  kind: method
  ns: django.test
  description: Construct an OPTIONS request.
  summary: Construct an OPTIONS request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory.patch
  kind: method
  ns: django.test
  description: Construct a PATCH request.
  summary: Construct a PATCH request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory.post
  kind: method
  ns: django.test
  description: Construct a POST request.
  summary: Construct a POST request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: multipart/form-data; boundary=BoUnDaRyStRiNg
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory.put
  kind: method
  ns: django.test
  description: Construct a PUT request.
  summary: Construct a PUT request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory.request
  kind: method
  ns: django.test
  description: Construct a generic request object.
  summary: Construct a generic request object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: AsyncRequestFactory.trace
  kind: method
  ns: django.test
  description: Construct a TRACE request.
  summary: Construct a TRACE request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Client
  kind: class
  ns: django.test
  description: |-
    A class that can act as a client for testing purposes.

    It allows the user to compose GET and POST requests, and
    obtain the response that the server gave to those requests.
    The server Response objects are annotated with the details
    of the contexts and templates that were rendered during the
    process of serving the request.

    Client objects are stateful - they will retain cookie (and
    thus session) details for the lifetime of the Client instance.

    This is not intended as a replacement for Twill/Selenium or
    the like - it is here to allow testing against the
    contexts and templates produced by a view, rather than the
    HTML rendered to the end-user.
  summary: A class that can act as a client for testing purposes
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: enforce_csrf_checks
      default: 'False'
      rest: false
    - kind: positional
      name: raise_request_exception
      default: 'True'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: Client
      kind: return
  inherits_from:
  - <class 'django.test.client.ClientMixin'>
  - <class 'django.test.client.RequestFactory'>
- name: Client.check_exception
  kind: method
  ns: django.test
  description: |-
    Look for a signaled exception, clear the current context exception
    data, re-raise the signaled exception, and clear the signaled exception
    from the local cache.
  summary: Look for a signaled exception, clear the current context exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.delete
  kind: method
  ns: django.test
  description: Send a DELETE request to the server.
  summary: Send a DELETE request to the server
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: follow
      default: 'False'
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.force_login
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: user
      default: null
      rest: false
    - kind: positional
      name: backend
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.generic
  kind: method
  ns: django.test
  description: Construct an arbitrary HTTP request.
  summary: Construct an arbitrary HTTP request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.get
  kind: method
  ns: django.test
  description: Request a response from the server using GET.
  summary: Request a response from the server using GET
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: follow
      default: 'False'
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.head
  kind: method
  ns: django.test
  description: Request a response from the server using HEAD.
  summary: Request a response from the server using HEAD
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: follow
      default: 'False'
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.login
  kind: method
  ns: django.test
  description: |-
    Set the Factory to appear as if it has successfully logged into a site.

    Return True if login is possible or False if the provided credentials
    are incorrect.
  summary: Set the Factory to appear as if it has successfully logged into a site
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.logout
  kind: method
  ns: django.test
  description: Log out the user by removing the cookies and session object.
  summary: Log out the user by removing the cookies and session object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.options
  kind: method
  ns: django.test
  description: Request a response from the server using OPTIONS.
  summary: Request a response from the server using OPTIONS
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: follow
      default: 'False'
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.patch
  kind: method
  ns: django.test
  description: Send a resource to the server using PATCH.
  summary: Send a resource to the server using PATCH
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: follow
      default: 'False'
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.post
  kind: method
  ns: django.test
  description: Request a response from the server using POST.
  summary: Request a response from the server using POST
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: multipart/form-data; boundary=BoUnDaRyStRiNg
      rest: false
    - kind: positional
      name: follow
      default: 'False'
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.put
  kind: method
  ns: django.test
  description: Send a resource to the server using PUT.
  summary: Send a resource to the server using PUT
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: follow
      default: 'False'
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.request
  kind: method
  ns: django.test
  description: |-
    Make a generic request. Compose the environment dictionary and pass
    to the handler, return the result of the handler. Assume defaults for
    the query environment, which can be overridden using the arguments to
    the request.
  summary: Make a generic request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.session
  kind: property
  ns: django.test
  description: Return the current session variables.
  summary: Return the current session variables
  signatures: null
  inherits_from: null
- name: Client.store_exc_info
  kind: method
  ns: django.test
  description: Store exceptions when they are generated by a view.
  summary: Store exceptions when they are generated by a view
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Client.trace
  kind: method
  ns: django.test
  description: Send a TRACE request to the server.
  summary: Send a TRACE request to the server
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: follow
      default: 'False'
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory
  kind: class
  ns: django.test
  description: |-
    Class that lets you create mock Request objects for use in testing.

    Usage:

    rf = RequestFactory()
    get_request = rf.get('/hello/')
    post_request = rf.post('/submit/', {'foo': 'bar'})

    Once you have a request object you can pass it to any view function,
    just as if that view had been hooked up using a URLconf.
  summary: Class that lets you create mock Request objects for use in testing
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: json_encoder
      default: <class 'django.core.serializers.json.DjangoJSONEncoder'>
      rest: false
      kind: kw-only
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: RequestFactory
      kind: return
  inherits_from: null
- name: RequestFactory.delete
  kind: method
  ns: django.test
  description: Construct a DELETE request.
  summary: Construct a DELETE request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory.generic
  kind: method
  ns: django.test
  description: Construct an arbitrary HTTP request.
  summary: Construct an arbitrary HTTP request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory.get
  kind: method
  ns: django.test
  description: Construct a GET request.
  summary: Construct a GET request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory.head
  kind: method
  ns: django.test
  description: Construct a HEAD request.
  summary: Construct a HEAD request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory.options
  kind: method
  ns: django.test
  description: Construct an OPTIONS request.
  summary: Construct an OPTIONS request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory.patch
  kind: method
  ns: django.test
  description: Construct a PATCH request.
  summary: Construct a PATCH request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory.post
  kind: method
  ns: django.test
  description: Construct a POST request.
  summary: Construct a POST request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: None
      rest: false
    - kind: positional
      name: content_type
      default: multipart/form-data; boundary=BoUnDaRyStRiNg
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory.put
  kind: method
  ns: django.test
  description: Construct a PUT request.
  summary: Construct a PUT request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: content_type
      default: application/octet-stream
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory.request
  kind: method
  ns: django.test
  description: Construct a generic request object.
  summary: Construct a generic request object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: RequestFactory.trace
  kind: method
  ns: django.test
  description: Construct a TRACE request.
  summary: Construct a TRACE request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: secure
      default: 'False'
      rest: false
    - name: headers
      default: None
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase
  kind: class
  ns: django.test
  description: |-
    Similar to TransactionTestCase, but use `transaction.atomic()` to achieve
    test isolation.

    In most situations, TestCase should be preferred to TransactionTestCase as
    it allows faster execution. However, there are some situations where using
    TransactionTestCase might be necessary (e.g. testing some transactional
    behavior).

    On database backends with no transaction support, TestCase behaves as
    TransactionTestCase.
  summary: Similar to TransactionTestCase, but use `transaction
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: methodName
      default: runTest
      rest: false
    - type: TestCase
      kind: return
  inherits_from:
  - <class 'django.test.testcases.TransactionTestCase'>
  - <class 'django.test.testcases.SimpleTestCase'>
  - <class 'unittest.case.TestCase'>
- name: TestCase.addClassCleanup
  kind: function
  ns: django.test
  description: |-
    Same as addCleanup, except the cleanup items are called even if
    setUpClass fails (unlike tearDownClass).
  summary: Same as addCleanup, except the cleanup items are called even if
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.addCleanup
  kind: method
  ns: django.test
  description: |-
    Add a function, with arguments, to be called when the test is
    completed. Functions added are called on a LIFO basis and are
    called after tearDown on test failure or success.

    Cleanup items are called even if setUp fails (unlike tearDown).
  summary: Add a function, with arguments, to be called when the test is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.addTypeEqualityFunc
  kind: method
  ns: django.test
  description: |-
    Add a type specific assertEqual style function to compare a type.

    This method is for use by TestCase subclasses that need to register
    their own type equality functions to provide nicer error messages.

    Args:
        typeobj: The data type to call this function on when both values
                are of the same type in assertEqual().
        function: The callable taking two arguments and an optional
                msg= argument that raises self.failureException with a
                useful error message when the two arguments are not equal.
  summary: Add a type specific assertEqual style function to compare a type
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: typeobj
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertAlmostEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are unequal as determined by their
    difference rounded to the given number of decimal places
    (default 7) and comparing to zero, or by comparing that the
    difference between the two objects is more than the given
    delta.

    Note that decimal places (from zero) are usually not the same
    as significant digits (measured from the most significant digit).

    If the two objects compare equal then they will automatically
    compare almost equal.
  summary: Fail if the two objects are unequal as determined by their
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: places
      default: None
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: delta
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertAlmostEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertContains
  kind: method
  ns: django.test
  description: |-
    Assert that a response indicates that some content was retrieved
    successfully, (i.e., the HTTP status code was as expected) and that
    ``text`` occurs ``count`` times in the content of the response.
    If ``count`` is None, the count doesn't matter - the assertion is true
    if the text occurs at least once in the response.
  summary: Assert that a response indicates that some content was retrieved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - kind: positional
      name: status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: html
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertCountEqual
  kind: method
  ns: django.test
  description: |-
    Asserts that two iterables have the same elements, the same number of
    times, without regard to order.

        self.assertEqual(Counter(list(first)),
                         Counter(list(second)))

     Example:
        - [0, 1, 1] and [1, 0, 1] compare equal.
        - [0, 0, 1] and [0, 1] compare unequal.
  summary: Asserts that two iterables have the same elements, the same number of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertDictContainsSubset
  kind: method
  ns: django.test
  description: Checks whether dictionary is a superset of subset.
  summary: Checks whether dictionary is a superset of subset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: subset
      default: null
      rest: false
    - kind: positional
      name: dictionary
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertDictEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: d1
      default: null
      rest: false
    - kind: positional
      name: d2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are unequal as determined by the '=='
    operator.
  summary: Fail if the two objects are unequal as determined by the '=='
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertFalse
  kind: method
  ns: django.test
  description: Check that the expression is false.
  summary: Check that the expression is false
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertFieldOutput
  kind: method
  ns: django.test
  description: |-
    Assert that a form field behaves correctly with various inputs.

    Args:
        fieldclass: the class of the field to be tested.
        valid: a dictionary mapping valid inputs to their expected
                cleaned values.
        invalid: a dictionary mapping invalid inputs to one or more
                raised error messages.
        field_args: the args passed to instantiate the field
        field_kwargs: the kwargs passed to instantiate the field
        empty_value: the expected clean output for inputs in empty_values
  summary: Assert that a form field behaves correctly with various inputs
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fieldclass
      default: null
      rest: false
    - kind: positional
      name: valid
      default: null
      rest: false
    - kind: positional
      name: invalid
      default: null
      rest: false
    - kind: positional
      name: field_args
      default: None
      rest: false
    - kind: positional
      name: field_kwargs
      default: None
      rest: false
    - kind: positional
      name: empty_value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertFormError
  kind: method
  ns: django.test
  description: |-
    Assert that a field named "field" on the given form object has specific
    errors.

    errors can be either a single error message or a list of errors
    messages. Using errors=[] test that the field has no errors.

    You can pass field=None to check the form's non-field errors.
  summary: Assert that a field named "field" on the given form object has specific
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertFormSetError
  kind: method
  ns: django.test
  description: |-
    Similar to assertFormError() but for formsets.

    Use form_index=None to check the formset's non-form errors (in that
    case, you must also use field=None).
    Otherwise use an integer to check the formset's n-th form for errors.

    Other parameters are the same as assertFormError().
  summary: Similar to assertFormError() but for formsets
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertFormsetError
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertGreater
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a > b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertGreaterEqual
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a >= b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertHTMLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two HTML snippets are semantically the same.
    Whitespace in most cases is ignored, and attribute ordering is not
    significant. The arguments must be valid HTML.
  summary: Assert that two HTML snippets are semantically the same
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: html1
      default: null
      rest: false
    - kind: positional
      name: html2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertHTMLNotEqual
  kind: method
  ns: django.test
  description: Assert that two HTML snippets are not semantically equivalent.
  summary: Assert that two HTML snippets are not semantically equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: html1
      default: null
      rest: false
    - kind: positional
      name: html2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertIn
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a in b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: member
      default: null
      rest: false
    - kind: positional
      name: container
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertInHTML
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: needle
      default: null
      rest: false
    - kind: positional
      name: haystack
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertIs
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a is b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr1
      default: null
      rest: false
    - kind: positional
      name: expr2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertIsInstance
  kind: method
  ns: django.test
  description: |-
    Same as self.assertTrue(isinstance(obj, cls)), with a nicer
    default message.
  summary: Same as self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertIsNone
  kind: method
  ns: django.test
  description: Same as self.assertTrue(obj is None), with a nicer default message.
  summary: Same as self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertIsNot
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a is not b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr1
      default: null
      rest: false
    - kind: positional
      name: expr2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertIsNotNone
  kind: method
  ns: django.test
  description: Included for symmetry with assertIsNone.
  summary: Included for symmetry with assertIsNone
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertJSONEqual
  kind: method
  ns: django.test
  description: |-
    Assert that the JSON fragments raw and expected_data are equal.
    Usual JSON non-significant whitespace rules apply as the heavyweight
    is delegated to the json library.
  summary: Assert that the JSON fragments raw and expected_data are equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: raw
      default: null
      rest: false
    - kind: positional
      name: expected_data
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertJSONNotEqual
  kind: method
  ns: django.test
  description: |-
    Assert that the JSON fragments raw and expected_data are not equal.
    Usual JSON non-significant whitespace rules apply as the heavyweight
    is delegated to the json library.
  summary: Assert that the JSON fragments raw and expected_data are not equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: raw
      default: null
      rest: false
    - kind: positional
      name: expected_data
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertLess
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a < b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertLessEqual
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a <= b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertListEqual
  kind: method
  ns: django.test
  description: |-
    A list-specific equality assertion.

    Args:
        list1: The first list to compare.
        list2: The second list to compare.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: A list-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: list1
      default: null
      rest: false
    - kind: positional
      name: list2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertLogs
  kind: method
  ns: django.test
  description: |-
    Fail unless a log message of level *level* or higher is emitted
    on *logger_name* or its children.  If omitted, *level* defaults to
    INFO and *logger* defaults to the root logger.

    This method must be used as a context manager, and will yield
    a recording object with two attributes: `output` and `records`.
    At the end of the context manager, the `output` attribute will
    be a list of the matching formatted log messages and the
    `records` attribute will be a list of the corresponding LogRecord
    objects.

    Example::

        with self.assertLogs('foo', level='INFO') as cm:
            logging.getLogger('foo').info('first message')
            logging.getLogger('foo.bar').error('second message')
        self.assertEqual(cm.output, ['INFO:foo:first message',
                                     'ERROR:foo.bar:second message'])
  summary: Fail unless a log message of level *level* or higher is emitted
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logger
      default: None
      rest: false
    - kind: positional
      name: level
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertMultiLineEqual
  kind: method
  ns: django.test
  description: Assert that two multi-line strings are equal.
  summary: Assert that two multi-line strings are equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNoLogs
  kind: method
  ns: django.test
  description: |-
    Fail unless no log messages of level *level* or higher are emitted
    on *logger_name* or its children.

    This method must be used as a context manager.
  summary: Fail unless no log messages of level *level* or higher are emitted
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logger
      default: None
      rest: false
    - kind: positional
      name: level
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNotAlmostEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are equal as determined by their
    difference rounded to the given number of decimal places
    (default 7) and comparing to zero, or by comparing that the
    difference between the two objects is less than the given delta.

    Note that decimal places (from zero) are usually not the same
    as significant digits (measured from the most significant digit).

    Objects that are equal automatically fail.
  summary: Fail if the two objects are equal as determined by their
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: places
      default: None
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: delta
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNotAlmostEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNotContains
  kind: method
  ns: django.test
  description: |-
    Assert that a response indicates that some content was retrieved
    successfully, (i.e., the HTTP status code was as expected) and that
    ``text`` doesn't occur in the content of the response.
  summary: Assert that a response indicates that some content was retrieved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: html
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNotEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are equal as determined by the '!='
    operator.
  summary: Fail if the two objects are equal as determined by the '!='
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNotEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNotIn
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a not in b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: member
      default: null
      rest: false
    - kind: positional
      name: container
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNotIsInstance
  kind: method
  ns: django.test
  description: Included for symmetry with assertIsInstance.
  summary: Included for symmetry with assertIsInstance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNotRegex
  kind: method
  ns: django.test
  description: Fail the test if the text matches the regular expression.
  summary: Fail the test if the text matches the regular expression
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: unexpected_regex
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNotRegexpMatches
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertNumQueries
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: num
      default: null
      rest: false
    - kind: positional
      name: func
      default: None
      rest: false
    - name: using
      default: default
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertQuerySetEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: qs
      default: null
      rest: false
    - kind: positional
      name: values
      default: null
      rest: false
    - kind: positional
      name: transform
      default: None
      rest: false
    - kind: positional
      name: ordered
      default: 'True'
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertQuerysetEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertRaises
  kind: method
  ns: django.test
  description: |-
    Fail unless an exception of class expected_exception is raised
    by the callable when invoked with specified positional and
    keyword arguments. If a different type of exception is
    raised, it will not be caught, and the test case will be
    deemed to have suffered an error, exactly as for an
    unexpected exception.

    If called with the callable and arguments omitted, will return a
    context object used like this::

         with self.assertRaises(SomeException):
             do_something()

    An optional keyword argument 'msg' can be provided when assertRaises
    is used as a context object.

    The context manager keeps a reference to the exception as
    the 'exception' attribute. This allows you to inspect the
    exception after the assertion::

        with self.assertRaises(SomeException) as cm:
            do_something()
        the_exception = cm.exception
        self.assertEqual(the_exception.error_code, 3)
  summary: Fail unless an exception of class expected_exception is raised
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertRaisesMessage
  kind: method
  ns: django.test
  description: |-
    Assert that expected_message is found in the message of a raised
    exception.

    Args:
        expected_exception: Exception class expected to be raised.
        expected_message: expected error message string value.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
  summary: Assert that expected_message is found in the message of a raised
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - kind: positional
      name: expected_message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertRaisesRegex
  kind: method
  ns: django.test
  description: |-
    Asserts that the message in a raised exception matches a regex.

    Args:
        expected_exception: Exception class expected to be raised.
        expected_regex: Regex (re.Pattern object or string) expected
                to be found in error message.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
        msg: Optional message used in case of failure. Can only be used
                when assertRaisesRegex is used as a context manager.
  summary: Asserts that the message in a raised exception matches a regex
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertRaisesRegexp
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertRedirects
  kind: method
  ns: django.test
  description: |-
    Assert that a response redirected to a specific URL and that the
    redirect URL can be loaded.

    Won't work for external links since it uses the test client to do a
    request (use fetch_redirect_response=False to check such links without
    fetching them).
  summary: Assert that a response redirected to a specific URL and that the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: expected_url
      default: null
      rest: false
    - kind: positional
      name: status_code
      default: '302'
      rest: false
    - kind: positional
      name: target_status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: fetch_redirect_response
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertRegex
  kind: method
  ns: django.test
  description: Fail the test unless the text matches the regular expression.
  summary: Fail the test unless the text matches the regular expression
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertRegexpMatches
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertSequenceEqual
  kind: method
  ns: django.test
  description: |-
    An equality assertion for ordered sequences (like lists and tuples).

    For the purposes of this function, a valid ordered sequence type is one
    which can be indexed, has a length, and has an equality operator.

    Args:
        seq1: The first sequence to compare.
        seq2: The second sequence to compare.
        seq_type: The expected datatype of the sequences, or None if no
                datatype should be enforced.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: An equality assertion for ordered sequences (like lists and tuples)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: seq1
      default: null
      rest: false
    - kind: positional
      name: seq2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: seq_type
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertSetEqual
  kind: method
  ns: django.test
  description: |-
    A set-specific equality assertion.

    Args:
        set1: The first set to compare.
        set2: The second set to compare.
        msg: Optional message to use on failure instead of a list of
                differences.

    assertSetEqual uses ducktyping to support different types of sets, and
    is optimized for sets specifically (parameters must support a
    difference method).
  summary: A set-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: set1
      default: null
      rest: false
    - kind: positional
      name: set2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertTemplateNotUsed
  kind: method
  ns: django.test
  description: |-
    Assert that the template with the provided name was NOT used in
    rendering the response. Also usable as context manager.
  summary: Assert that the template with the provided name was NOT used in
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: None
      rest: false
    - kind: positional
      name: template_name
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertTemplateUsed
  kind: method
  ns: django.test
  description: |-
    Assert that the template with the provided name was used in rendering
    the response. Also usable as context manager.
  summary: Assert that the template with the provided name was used in rendering
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: None
      rest: false
    - kind: positional
      name: template_name
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertTrue
  kind: method
  ns: django.test
  description: Check that the expression is true.
  summary: Check that the expression is true
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertTupleEqual
  kind: method
  ns: django.test
  description: |-
    A tuple-specific equality assertion.

    Args:
        tuple1: The first tuple to compare.
        tuple2: The second tuple to compare.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: A tuple-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tuple1
      default: null
      rest: false
    - kind: positional
      name: tuple2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertURLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two URLs are the same, ignoring the order of query string
    parameters except for parameters with the same name.

    For example, /path/?x=1&y=2 is equal to /path/?y=2&x=1, but
    /path/?a=1&a=2 isn't equal to /path/?a=2&a=1.
  summary: Assert that two URLs are the same, ignoring the order of query string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: url1
      default: null
      rest: false
    - kind: positional
      name: url2
      default: null
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertWarns
  kind: method
  ns: django.test
  description: |-
    Fail unless a warning of class warnClass is triggered
    by the callable when invoked with specified positional and
    keyword arguments.  If a different type of warning is
    triggered, it will not be handled: depending on the other
    warning filtering rules in effect, it might be silenced, printed
    out, or raised as an exception.

    If called with the callable and arguments omitted, will return a
    context object used like this::

         with self.assertWarns(SomeWarning):
             do_something()

    An optional keyword argument 'msg' can be provided when assertWarns
    is used as a context object.

    The context manager keeps a reference to the first matching
    warning as the 'warning' attribute; similarly, the 'filename'
    and 'lineno' attributes give you information about the line
    of Python code from which the warning was triggered.
    This allows you to inspect the warning after the assertion::

        with self.assertWarns(SomeWarning) as cm:
            do_something()
        the_warning = cm.warning
        self.assertEqual(the_warning.some_attribute, 147)
  summary: Fail unless a warning of class warnClass is triggered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertWarnsMessage
  kind: method
  ns: django.test
  description: |-
    Same as assertRaisesMessage but for assertWarns() instead of
    assertRaises().
  summary: Same as assertRaisesMessage but for assertWarns() instead of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - kind: positional
      name: expected_message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertWarnsRegex
  kind: method
  ns: django.test
  description: |-
    Asserts that the message in a triggered warning matches a regexp.
    Basic functioning is similar to assertWarns() with the addition
    that only warnings whose messages also match the regular expression
    are considered successful matches.

    Args:
        expected_warning: Warning class expected to be triggered.
        expected_regex: Regex (re.Pattern object or string) expected
                to be found in error message.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
        msg: Optional message used in case of failure. Can only be used
                when assertWarnsRegex is used as a context manager.
  summary: Asserts that the message in a triggered warning matches a regexp
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertXMLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two XML snippets are semantically the same.
    Whitespace in most cases is ignored and attribute ordering is not
    significant. The arguments must be valid XML.
  summary: Assert that two XML snippets are semantically the same
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: xml1
      default: null
      rest: false
    - kind: positional
      name: xml2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assertXMLNotEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two XML snippets are not semantically equivalent.
    Whitespace in most cases is ignored and attribute ordering is not
    significant. The arguments must be valid XML.
  summary: Assert that two XML snippets are not semantically equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: xml1
      default: null
      rest: false
    - kind: positional
      name: xml2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.assert_
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.available_apps
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TestCase.captureOnCommitCallbacks
  kind: function
  ns: django.test
  description: Context manager to capture transaction.on_commit() callbacks.
  summary: Context manager to capture transaction
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.countTestCases
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.databases
  kind: property
  ns: django.test
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: TestCase.debug
  kind: method
  ns: django.test
  description: Perform the same as __call__(), without catching the exception.
  summary: Perform the same as __call__(), without catching the exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.defaultTestResult
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.doClassCleanups
  kind: function
  ns: django.test
  description: |-
    Execute all class cleanup functions. Normally called for you after
    tearDownClass.
  summary: Execute all class cleanup functions
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.doCleanups
  kind: method
  ns: django.test
  description: |-
    Execute all cleanup functions. Normally called for you after
    tearDown.
  summary: Execute all cleanup functions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.enterClassContext
  kind: function
  ns: django.test
  description: Same as enterContext, but class-wide.
  summary: Same as enterContext, but class-wide
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: cm
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.enterContext
  kind: method
  ns: django.test
  description: |-
    Enters the supplied context manager.

    If successful, also adds its __exit__ method as a cleanup
    function and returns the result of the __enter__ method.
  summary: Enters the supplied context manager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cm
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.fail
  kind: method
  ns: django.test
  description: Fail immediately, with the given message.
  summary: Fail immediately, with the given message
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.failIf
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.failIfAlmostEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.failIfEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.failUnless
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.failUnlessAlmostEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.failUnlessEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.failUnlessRaises
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.failureException
  kind: class
  ns: django.test
  description: Assertion failed.
  summary: Assertion failed
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TestCase.failureException.add_note
  kind: callable
  ns: django.test
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TestCase.failureException.args
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TestCase.failureException.with_traceback
  kind: callable
  ns: django.test
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TestCase.fixtures
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TestCase.id
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.longMessage
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: TestCase.maxDiff
  kind: property
  ns: django.test
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: TestCase.modify_settings
  kind: method
  ns: django.test
  description: |-
    A context manager that temporarily applies changes a list setting and
    reverts back to the original value when exiting the context.
  summary: A context manager that temporarily applies changes a list setting and
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.reset_sequences
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: TestCase.run
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: result
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.serialized_rollback
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: TestCase.setUp
  kind: method
  ns: django.test
  description: Hook method for setting up the test fixture before exercising it.
  summary: Hook method for setting up the test fixture before exercising it
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.setUpClass
  kind: function
  ns: django.test
  description: Hook method for setting up class fixture before running tests in the class.
  summary: Hook method for setting up class fixture before running tests in the class
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.setUpTestData
  kind: function
  ns: django.test
  description: Load initial data for the TestCase.
  summary: Load initial data for the TestCase
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.settings
  kind: method
  ns: django.test
  description: |-
    A context manager that temporarily sets a setting and reverts to the
    original value when exiting the context.
  summary: A context manager that temporarily sets a setting and reverts to the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.shortDescription
  kind: method
  ns: django.test
  description: |-
    Returns a one-line description of the test, or None if no
    description has been provided.

    The default implementation of this method returns the first line of
    the specified test method's docstring.
  summary: Returns a one-line description of the test, or None if no
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.skipTest
  kind: method
  ns: django.test
  description: Skip this test.
  summary: Skip this test
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: reason
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.subTest
  kind: method
  ns: django.test
  description: |-
    Return a context manager that will return the enclosed block
    of code in a subtest identified by the optional message and
    keyword parameters.  A failure in the subtest marks the test
    case as failed but resumes execution at the end of the enclosed
    block, allowing further test code to be executed.
  summary: Return a context manager that will return the enclosed block
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.tearDown
  kind: method
  ns: django.test
  description: Hook method for deconstructing the test fixture after testing it.
  summary: Hook method for deconstructing the test fixture after testing it
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TestCase.tearDownClass
  kind: function
  ns: django.test
  description: Hook method for deconstructing the class fixture after running all tests in the class.
  summary: Hook method for deconstructing the class fixture after running all tests in the class
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase
  kind: class
  ns: django.test
  description: |-
    A class whose instances are single test cases.

    By default, the test code itself should be placed in a method named
    'runTest'.

    If the fixture may be used for many test cases, create as
    many test methods as are needed. When instantiating such a TestCase
    subclass, specify in the constructor arguments the name of the test method
    that the instance is to execute.

    Test authors should subclass TestCase for their own tests. Construction
    and deconstruction of the test's environment ('fixture') can be
    implemented by overriding the 'setUp' and 'tearDown' methods respectively.

    If it is necessary to override the __init__ method, the base class
    __init__ method must always be called. It is important that subclasses
    should not change the signature of their __init__ method, since instances
    of the classes are instantiated automatically by parts of the framework
    in order to be run.

    When subclassing TestCase, you can set these attributes:
    * failureException: determines which exception will be raised when
        the instance's assertion methods fail; test methods raising this
        exception will be deemed to have 'failed' rather than 'errored'.
    * longMessage: determines whether long messages (including repr of
        objects used in assert methods) will be printed on failure in *addition*
        to any explicit message passed.
    * maxDiff: sets the maximum length of a diff in failure messages
        by assert methods using difflib. It is looked up as an instance
        attribute so can be configured by individual tests if required.
  summary: A class whose instances are single test cases
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: methodName
      default: runTest
      rest: false
    - type: TransactionTestCase
      kind: return
  inherits_from:
  - <class 'django.test.testcases.SimpleTestCase'>
  - <class 'unittest.case.TestCase'>
- name: TransactionTestCase.addClassCleanup
  kind: function
  ns: django.test
  description: |-
    Same as addCleanup, except the cleanup items are called even if
    setUpClass fails (unlike tearDownClass).
  summary: Same as addCleanup, except the cleanup items are called even if
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.addCleanup
  kind: method
  ns: django.test
  description: |-
    Add a function, with arguments, to be called when the test is
    completed. Functions added are called on a LIFO basis and are
    called after tearDown on test failure or success.

    Cleanup items are called even if setUp fails (unlike tearDown).
  summary: Add a function, with arguments, to be called when the test is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.addTypeEqualityFunc
  kind: method
  ns: django.test
  description: |-
    Add a type specific assertEqual style function to compare a type.

    This method is for use by TestCase subclasses that need to register
    their own type equality functions to provide nicer error messages.

    Args:
        typeobj: The data type to call this function on when both values
                are of the same type in assertEqual().
        function: The callable taking two arguments and an optional
                msg= argument that raises self.failureException with a
                useful error message when the two arguments are not equal.
  summary: Add a type specific assertEqual style function to compare a type
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: typeobj
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertAlmostEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are unequal as determined by their
    difference rounded to the given number of decimal places
    (default 7) and comparing to zero, or by comparing that the
    difference between the two objects is more than the given
    delta.

    Note that decimal places (from zero) are usually not the same
    as significant digits (measured from the most significant digit).

    If the two objects compare equal then they will automatically
    compare almost equal.
  summary: Fail if the two objects are unequal as determined by their
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: places
      default: None
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: delta
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertAlmostEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertContains
  kind: method
  ns: django.test
  description: |-
    Assert that a response indicates that some content was retrieved
    successfully, (i.e., the HTTP status code was as expected) and that
    ``text`` occurs ``count`` times in the content of the response.
    If ``count`` is None, the count doesn't matter - the assertion is true
    if the text occurs at least once in the response.
  summary: Assert that a response indicates that some content was retrieved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - kind: positional
      name: status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: html
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertCountEqual
  kind: method
  ns: django.test
  description: |-
    Asserts that two iterables have the same elements, the same number of
    times, without regard to order.

        self.assertEqual(Counter(list(first)),
                         Counter(list(second)))

     Example:
        - [0, 1, 1] and [1, 0, 1] compare equal.
        - [0, 0, 1] and [0, 1] compare unequal.
  summary: Asserts that two iterables have the same elements, the same number of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertDictContainsSubset
  kind: method
  ns: django.test
  description: Checks whether dictionary is a superset of subset.
  summary: Checks whether dictionary is a superset of subset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: subset
      default: null
      rest: false
    - kind: positional
      name: dictionary
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertDictEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: d1
      default: null
      rest: false
    - kind: positional
      name: d2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are unequal as determined by the '=='
    operator.
  summary: Fail if the two objects are unequal as determined by the '=='
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertFalse
  kind: method
  ns: django.test
  description: Check that the expression is false.
  summary: Check that the expression is false
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertFieldOutput
  kind: method
  ns: django.test
  description: |-
    Assert that a form field behaves correctly with various inputs.

    Args:
        fieldclass: the class of the field to be tested.
        valid: a dictionary mapping valid inputs to their expected
                cleaned values.
        invalid: a dictionary mapping invalid inputs to one or more
                raised error messages.
        field_args: the args passed to instantiate the field
        field_kwargs: the kwargs passed to instantiate the field
        empty_value: the expected clean output for inputs in empty_values
  summary: Assert that a form field behaves correctly with various inputs
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fieldclass
      default: null
      rest: false
    - kind: positional
      name: valid
      default: null
      rest: false
    - kind: positional
      name: invalid
      default: null
      rest: false
    - kind: positional
      name: field_args
      default: None
      rest: false
    - kind: positional
      name: field_kwargs
      default: None
      rest: false
    - kind: positional
      name: empty_value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertFormError
  kind: method
  ns: django.test
  description: |-
    Assert that a field named "field" on the given form object has specific
    errors.

    errors can be either a single error message or a list of errors
    messages. Using errors=[] test that the field has no errors.

    You can pass field=None to check the form's non-field errors.
  summary: Assert that a field named "field" on the given form object has specific
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertFormSetError
  kind: method
  ns: django.test
  description: |-
    Similar to assertFormError() but for formsets.

    Use form_index=None to check the formset's non-form errors (in that
    case, you must also use field=None).
    Otherwise use an integer to check the formset's n-th form for errors.

    Other parameters are the same as assertFormError().
  summary: Similar to assertFormError() but for formsets
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertFormsetError
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertGreater
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a > b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertGreaterEqual
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a >= b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertHTMLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two HTML snippets are semantically the same.
    Whitespace in most cases is ignored, and attribute ordering is not
    significant. The arguments must be valid HTML.
  summary: Assert that two HTML snippets are semantically the same
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: html1
      default: null
      rest: false
    - kind: positional
      name: html2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertHTMLNotEqual
  kind: method
  ns: django.test
  description: Assert that two HTML snippets are not semantically equivalent.
  summary: Assert that two HTML snippets are not semantically equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: html1
      default: null
      rest: false
    - kind: positional
      name: html2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertIn
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a in b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: member
      default: null
      rest: false
    - kind: positional
      name: container
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertInHTML
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: needle
      default: null
      rest: false
    - kind: positional
      name: haystack
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertIs
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a is b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr1
      default: null
      rest: false
    - kind: positional
      name: expr2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertIsInstance
  kind: method
  ns: django.test
  description: |-
    Same as self.assertTrue(isinstance(obj, cls)), with a nicer
    default message.
  summary: Same as self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertIsNone
  kind: method
  ns: django.test
  description: Same as self.assertTrue(obj is None), with a nicer default message.
  summary: Same as self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertIsNot
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a is not b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr1
      default: null
      rest: false
    - kind: positional
      name: expr2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertIsNotNone
  kind: method
  ns: django.test
  description: Included for symmetry with assertIsNone.
  summary: Included for symmetry with assertIsNone
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertJSONEqual
  kind: method
  ns: django.test
  description: |-
    Assert that the JSON fragments raw and expected_data are equal.
    Usual JSON non-significant whitespace rules apply as the heavyweight
    is delegated to the json library.
  summary: Assert that the JSON fragments raw and expected_data are equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: raw
      default: null
      rest: false
    - kind: positional
      name: expected_data
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertJSONNotEqual
  kind: method
  ns: django.test
  description: |-
    Assert that the JSON fragments raw and expected_data are not equal.
    Usual JSON non-significant whitespace rules apply as the heavyweight
    is delegated to the json library.
  summary: Assert that the JSON fragments raw and expected_data are not equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: raw
      default: null
      rest: false
    - kind: positional
      name: expected_data
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertLess
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a < b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertLessEqual
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a <= b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertListEqual
  kind: method
  ns: django.test
  description: |-
    A list-specific equality assertion.

    Args:
        list1: The first list to compare.
        list2: The second list to compare.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: A list-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: list1
      default: null
      rest: false
    - kind: positional
      name: list2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertLogs
  kind: method
  ns: django.test
  description: |-
    Fail unless a log message of level *level* or higher is emitted
    on *logger_name* or its children.  If omitted, *level* defaults to
    INFO and *logger* defaults to the root logger.

    This method must be used as a context manager, and will yield
    a recording object with two attributes: `output` and `records`.
    At the end of the context manager, the `output` attribute will
    be a list of the matching formatted log messages and the
    `records` attribute will be a list of the corresponding LogRecord
    objects.

    Example::

        with self.assertLogs('foo', level='INFO') as cm:
            logging.getLogger('foo').info('first message')
            logging.getLogger('foo.bar').error('second message')
        self.assertEqual(cm.output, ['INFO:foo:first message',
                                     'ERROR:foo.bar:second message'])
  summary: Fail unless a log message of level *level* or higher is emitted
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logger
      default: None
      rest: false
    - kind: positional
      name: level
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertMultiLineEqual
  kind: method
  ns: django.test
  description: Assert that two multi-line strings are equal.
  summary: Assert that two multi-line strings are equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNoLogs
  kind: method
  ns: django.test
  description: |-
    Fail unless no log messages of level *level* or higher are emitted
    on *logger_name* or its children.

    This method must be used as a context manager.
  summary: Fail unless no log messages of level *level* or higher are emitted
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logger
      default: None
      rest: false
    - kind: positional
      name: level
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNotAlmostEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are equal as determined by their
    difference rounded to the given number of decimal places
    (default 7) and comparing to zero, or by comparing that the
    difference between the two objects is less than the given delta.

    Note that decimal places (from zero) are usually not the same
    as significant digits (measured from the most significant digit).

    Objects that are equal automatically fail.
  summary: Fail if the two objects are equal as determined by their
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: places
      default: None
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: delta
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNotAlmostEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNotContains
  kind: method
  ns: django.test
  description: |-
    Assert that a response indicates that some content was retrieved
    successfully, (i.e., the HTTP status code was as expected) and that
    ``text`` doesn't occur in the content of the response.
  summary: Assert that a response indicates that some content was retrieved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: html
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNotEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are equal as determined by the '!='
    operator.
  summary: Fail if the two objects are equal as determined by the '!='
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNotEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNotIn
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a not in b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: member
      default: null
      rest: false
    - kind: positional
      name: container
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNotIsInstance
  kind: method
  ns: django.test
  description: Included for symmetry with assertIsInstance.
  summary: Included for symmetry with assertIsInstance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNotRegex
  kind: method
  ns: django.test
  description: Fail the test if the text matches the regular expression.
  summary: Fail the test if the text matches the regular expression
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: unexpected_regex
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNotRegexpMatches
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertNumQueries
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: num
      default: null
      rest: false
    - kind: positional
      name: func
      default: None
      rest: false
    - name: using
      default: default
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertQuerySetEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: qs
      default: null
      rest: false
    - kind: positional
      name: values
      default: null
      rest: false
    - kind: positional
      name: transform
      default: None
      rest: false
    - kind: positional
      name: ordered
      default: 'True'
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertQuerysetEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertRaises
  kind: method
  ns: django.test
  description: |-
    Fail unless an exception of class expected_exception is raised
    by the callable when invoked with specified positional and
    keyword arguments. If a different type of exception is
    raised, it will not be caught, and the test case will be
    deemed to have suffered an error, exactly as for an
    unexpected exception.

    If called with the callable and arguments omitted, will return a
    context object used like this::

         with self.assertRaises(SomeException):
             do_something()

    An optional keyword argument 'msg' can be provided when assertRaises
    is used as a context object.

    The context manager keeps a reference to the exception as
    the 'exception' attribute. This allows you to inspect the
    exception after the assertion::

        with self.assertRaises(SomeException) as cm:
            do_something()
        the_exception = cm.exception
        self.assertEqual(the_exception.error_code, 3)
  summary: Fail unless an exception of class expected_exception is raised
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertRaisesMessage
  kind: method
  ns: django.test
  description: |-
    Assert that expected_message is found in the message of a raised
    exception.

    Args:
        expected_exception: Exception class expected to be raised.
        expected_message: expected error message string value.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
  summary: Assert that expected_message is found in the message of a raised
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - kind: positional
      name: expected_message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertRaisesRegex
  kind: method
  ns: django.test
  description: |-
    Asserts that the message in a raised exception matches a regex.

    Args:
        expected_exception: Exception class expected to be raised.
        expected_regex: Regex (re.Pattern object or string) expected
                to be found in error message.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
        msg: Optional message used in case of failure. Can only be used
                when assertRaisesRegex is used as a context manager.
  summary: Asserts that the message in a raised exception matches a regex
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertRaisesRegexp
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertRedirects
  kind: method
  ns: django.test
  description: |-
    Assert that a response redirected to a specific URL and that the
    redirect URL can be loaded.

    Won't work for external links since it uses the test client to do a
    request (use fetch_redirect_response=False to check such links without
    fetching them).
  summary: Assert that a response redirected to a specific URL and that the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: expected_url
      default: null
      rest: false
    - kind: positional
      name: status_code
      default: '302'
      rest: false
    - kind: positional
      name: target_status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: fetch_redirect_response
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertRegex
  kind: method
  ns: django.test
  description: Fail the test unless the text matches the regular expression.
  summary: Fail the test unless the text matches the regular expression
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertRegexpMatches
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertSequenceEqual
  kind: method
  ns: django.test
  description: |-
    An equality assertion for ordered sequences (like lists and tuples).

    For the purposes of this function, a valid ordered sequence type is one
    which can be indexed, has a length, and has an equality operator.

    Args:
        seq1: The first sequence to compare.
        seq2: The second sequence to compare.
        seq_type: The expected datatype of the sequences, or None if no
                datatype should be enforced.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: An equality assertion for ordered sequences (like lists and tuples)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: seq1
      default: null
      rest: false
    - kind: positional
      name: seq2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: seq_type
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertSetEqual
  kind: method
  ns: django.test
  description: |-
    A set-specific equality assertion.

    Args:
        set1: The first set to compare.
        set2: The second set to compare.
        msg: Optional message to use on failure instead of a list of
                differences.

    assertSetEqual uses ducktyping to support different types of sets, and
    is optimized for sets specifically (parameters must support a
    difference method).
  summary: A set-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: set1
      default: null
      rest: false
    - kind: positional
      name: set2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertTemplateNotUsed
  kind: method
  ns: django.test
  description: |-
    Assert that the template with the provided name was NOT used in
    rendering the response. Also usable as context manager.
  summary: Assert that the template with the provided name was NOT used in
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: None
      rest: false
    - kind: positional
      name: template_name
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertTemplateUsed
  kind: method
  ns: django.test
  description: |-
    Assert that the template with the provided name was used in rendering
    the response. Also usable as context manager.
  summary: Assert that the template with the provided name was used in rendering
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: None
      rest: false
    - kind: positional
      name: template_name
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertTrue
  kind: method
  ns: django.test
  description: Check that the expression is true.
  summary: Check that the expression is true
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertTupleEqual
  kind: method
  ns: django.test
  description: |-
    A tuple-specific equality assertion.

    Args:
        tuple1: The first tuple to compare.
        tuple2: The second tuple to compare.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: A tuple-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tuple1
      default: null
      rest: false
    - kind: positional
      name: tuple2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertURLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two URLs are the same, ignoring the order of query string
    parameters except for parameters with the same name.

    For example, /path/?x=1&y=2 is equal to /path/?y=2&x=1, but
    /path/?a=1&a=2 isn't equal to /path/?a=2&a=1.
  summary: Assert that two URLs are the same, ignoring the order of query string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: url1
      default: null
      rest: false
    - kind: positional
      name: url2
      default: null
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertWarns
  kind: method
  ns: django.test
  description: |-
    Fail unless a warning of class warnClass is triggered
    by the callable when invoked with specified positional and
    keyword arguments.  If a different type of warning is
    triggered, it will not be handled: depending on the other
    warning filtering rules in effect, it might be silenced, printed
    out, or raised as an exception.

    If called with the callable and arguments omitted, will return a
    context object used like this::

         with self.assertWarns(SomeWarning):
             do_something()

    An optional keyword argument 'msg' can be provided when assertWarns
    is used as a context object.

    The context manager keeps a reference to the first matching
    warning as the 'warning' attribute; similarly, the 'filename'
    and 'lineno' attributes give you information about the line
    of Python code from which the warning was triggered.
    This allows you to inspect the warning after the assertion::

        with self.assertWarns(SomeWarning) as cm:
            do_something()
        the_warning = cm.warning
        self.assertEqual(the_warning.some_attribute, 147)
  summary: Fail unless a warning of class warnClass is triggered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertWarnsMessage
  kind: method
  ns: django.test
  description: |-
    Same as assertRaisesMessage but for assertWarns() instead of
    assertRaises().
  summary: Same as assertRaisesMessage but for assertWarns() instead of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - kind: positional
      name: expected_message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertWarnsRegex
  kind: method
  ns: django.test
  description: |-
    Asserts that the message in a triggered warning matches a regexp.
    Basic functioning is similar to assertWarns() with the addition
    that only warnings whose messages also match the regular expression
    are considered successful matches.

    Args:
        expected_warning: Warning class expected to be triggered.
        expected_regex: Regex (re.Pattern object or string) expected
                to be found in error message.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
        msg: Optional message used in case of failure. Can only be used
                when assertWarnsRegex is used as a context manager.
  summary: Asserts that the message in a triggered warning matches a regexp
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertXMLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two XML snippets are semantically the same.
    Whitespace in most cases is ignored and attribute ordering is not
    significant. The arguments must be valid XML.
  summary: Assert that two XML snippets are semantically the same
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: xml1
      default: null
      rest: false
    - kind: positional
      name: xml2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assertXMLNotEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two XML snippets are not semantically equivalent.
    Whitespace in most cases is ignored and attribute ordering is not
    significant. The arguments must be valid XML.
  summary: Assert that two XML snippets are not semantically equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: xml1
      default: null
      rest: false
    - kind: positional
      name: xml2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.assert_
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.available_apps
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TransactionTestCase.countTestCases
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.databases
  kind: property
  ns: django.test
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: TransactionTestCase.debug
  kind: method
  ns: django.test
  description: Perform the same as __call__(), without catching the exception.
  summary: Perform the same as __call__(), without catching the exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.defaultTestResult
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.doClassCleanups
  kind: function
  ns: django.test
  description: |-
    Execute all class cleanup functions. Normally called for you after
    tearDownClass.
  summary: Execute all class cleanup functions
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.doCleanups
  kind: method
  ns: django.test
  description: |-
    Execute all cleanup functions. Normally called for you after
    tearDown.
  summary: Execute all cleanup functions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.enterClassContext
  kind: function
  ns: django.test
  description: Same as enterContext, but class-wide.
  summary: Same as enterContext, but class-wide
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: cm
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.enterContext
  kind: method
  ns: django.test
  description: |-
    Enters the supplied context manager.

    If successful, also adds its __exit__ method as a cleanup
    function and returns the result of the __enter__ method.
  summary: Enters the supplied context manager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cm
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.fail
  kind: method
  ns: django.test
  description: Fail immediately, with the given message.
  summary: Fail immediately, with the given message
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.failIf
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.failIfAlmostEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.failIfEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.failUnless
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.failUnlessAlmostEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.failUnlessEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.failUnlessRaises
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.fixtures
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TransactionTestCase.id
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.longMessage
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: TransactionTestCase.maxDiff
  kind: property
  ns: django.test
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: TransactionTestCase.modify_settings
  kind: method
  ns: django.test
  description: |-
    A context manager that temporarily applies changes a list setting and
    reverts back to the original value when exiting the context.
  summary: A context manager that temporarily applies changes a list setting and
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.reset_sequences
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: TransactionTestCase.run
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: result
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.serialized_rollback
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: TransactionTestCase.setUp
  kind: method
  ns: django.test
  description: Hook method for setting up the test fixture before exercising it.
  summary: Hook method for setting up the test fixture before exercising it
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.setUpClass
  kind: function
  ns: django.test
  description: Hook method for setting up class fixture before running tests in the class.
  summary: Hook method for setting up class fixture before running tests in the class
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.settings
  kind: method
  ns: django.test
  description: |-
    A context manager that temporarily sets a setting and reverts to the
    original value when exiting the context.
  summary: A context manager that temporarily sets a setting and reverts to the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.shortDescription
  kind: method
  ns: django.test
  description: |-
    Returns a one-line description of the test, or None if no
    description has been provided.

    The default implementation of this method returns the first line of
    the specified test method's docstring.
  summary: Returns a one-line description of the test, or None if no
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.skipTest
  kind: method
  ns: django.test
  description: Skip this test.
  summary: Skip this test
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: reason
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.subTest
  kind: method
  ns: django.test
  description: |-
    Return a context manager that will return the enclosed block
    of code in a subtest identified by the optional message and
    keyword parameters.  A failure in the subtest marks the test
    case as failed but resumes execution at the end of the enclosed
    block, allowing further test code to be executed.
  summary: Return a context manager that will return the enclosed block
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.tearDown
  kind: method
  ns: django.test
  description: Hook method for deconstructing the test fixture after testing it.
  summary: Hook method for deconstructing the test fixture after testing it
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TransactionTestCase.tearDownClass
  kind: function
  ns: django.test
  description: Hook method for deconstructing the class fixture after running all tests in the class.
  summary: Hook method for deconstructing the class fixture after running all tests in the class
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase
  kind: class
  ns: django.test
  description: |-
    A class whose instances are single test cases.

    By default, the test code itself should be placed in a method named
    'runTest'.

    If the fixture may be used for many test cases, create as
    many test methods as are needed. When instantiating such a TestCase
    subclass, specify in the constructor arguments the name of the test method
    that the instance is to execute.

    Test authors should subclass TestCase for their own tests. Construction
    and deconstruction of the test's environment ('fixture') can be
    implemented by overriding the 'setUp' and 'tearDown' methods respectively.

    If it is necessary to override the __init__ method, the base class
    __init__ method must always be called. It is important that subclasses
    should not change the signature of their __init__ method, since instances
    of the classes are instantiated automatically by parts of the framework
    in order to be run.

    When subclassing TestCase, you can set these attributes:
    * failureException: determines which exception will be raised when
        the instance's assertion methods fail; test methods raising this
        exception will be deemed to have 'failed' rather than 'errored'.
    * longMessage: determines whether long messages (including repr of
        objects used in assert methods) will be printed on failure in *addition*
        to any explicit message passed.
    * maxDiff: sets the maximum length of a diff in failure messages
        by assert methods using difflib. It is looked up as an instance
        attribute so can be configured by individual tests if required.
  summary: A class whose instances are single test cases
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: methodName
      default: runTest
      rest: false
    - type: SimpleTestCase
      kind: return
  inherits_from:
  - <class 'unittest.case.TestCase'>
- name: SimpleTestCase.addClassCleanup
  kind: function
  ns: django.test
  description: |-
    Same as addCleanup, except the cleanup items are called even if
    setUpClass fails (unlike tearDownClass).
  summary: Same as addCleanup, except the cleanup items are called even if
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.addCleanup
  kind: method
  ns: django.test
  description: |-
    Add a function, with arguments, to be called when the test is
    completed. Functions added are called on a LIFO basis and are
    called after tearDown on test failure or success.

    Cleanup items are called even if setUp fails (unlike tearDown).
  summary: Add a function, with arguments, to be called when the test is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.addTypeEqualityFunc
  kind: method
  ns: django.test
  description: |-
    Add a type specific assertEqual style function to compare a type.

    This method is for use by TestCase subclasses that need to register
    their own type equality functions to provide nicer error messages.

    Args:
        typeobj: The data type to call this function on when both values
                are of the same type in assertEqual().
        function: The callable taking two arguments and an optional
                msg= argument that raises self.failureException with a
                useful error message when the two arguments are not equal.
  summary: Add a type specific assertEqual style function to compare a type
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: typeobj
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertAlmostEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are unequal as determined by their
    difference rounded to the given number of decimal places
    (default 7) and comparing to zero, or by comparing that the
    difference between the two objects is more than the given
    delta.

    Note that decimal places (from zero) are usually not the same
    as significant digits (measured from the most significant digit).

    If the two objects compare equal then they will automatically
    compare almost equal.
  summary: Fail if the two objects are unequal as determined by their
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: places
      default: None
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: delta
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertAlmostEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertContains
  kind: method
  ns: django.test
  description: |-
    Assert that a response indicates that some content was retrieved
    successfully, (i.e., the HTTP status code was as expected) and that
    ``text`` occurs ``count`` times in the content of the response.
    If ``count`` is None, the count doesn't matter - the assertion is true
    if the text occurs at least once in the response.
  summary: Assert that a response indicates that some content was retrieved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - kind: positional
      name: status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: html
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertCountEqual
  kind: method
  ns: django.test
  description: |-
    Asserts that two iterables have the same elements, the same number of
    times, without regard to order.

        self.assertEqual(Counter(list(first)),
                         Counter(list(second)))

     Example:
        - [0, 1, 1] and [1, 0, 1] compare equal.
        - [0, 0, 1] and [0, 1] compare unequal.
  summary: Asserts that two iterables have the same elements, the same number of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertDictContainsSubset
  kind: method
  ns: django.test
  description: Checks whether dictionary is a superset of subset.
  summary: Checks whether dictionary is a superset of subset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: subset
      default: null
      rest: false
    - kind: positional
      name: dictionary
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertDictEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: d1
      default: null
      rest: false
    - kind: positional
      name: d2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are unequal as determined by the '=='
    operator.
  summary: Fail if the two objects are unequal as determined by the '=='
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertFalse
  kind: method
  ns: django.test
  description: Check that the expression is false.
  summary: Check that the expression is false
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertFieldOutput
  kind: method
  ns: django.test
  description: |-
    Assert that a form field behaves correctly with various inputs.

    Args:
        fieldclass: the class of the field to be tested.
        valid: a dictionary mapping valid inputs to their expected
                cleaned values.
        invalid: a dictionary mapping invalid inputs to one or more
                raised error messages.
        field_args: the args passed to instantiate the field
        field_kwargs: the kwargs passed to instantiate the field
        empty_value: the expected clean output for inputs in empty_values
  summary: Assert that a form field behaves correctly with various inputs
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fieldclass
      default: null
      rest: false
    - kind: positional
      name: valid
      default: null
      rest: false
    - kind: positional
      name: invalid
      default: null
      rest: false
    - kind: positional
      name: field_args
      default: None
      rest: false
    - kind: positional
      name: field_kwargs
      default: None
      rest: false
    - kind: positional
      name: empty_value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertFormError
  kind: method
  ns: django.test
  description: |-
    Assert that a field named "field" on the given form object has specific
    errors.

    errors can be either a single error message or a list of errors
    messages. Using errors=[] test that the field has no errors.

    You can pass field=None to check the form's non-field errors.
  summary: Assert that a field named "field" on the given form object has specific
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertFormSetError
  kind: method
  ns: django.test
  description: |-
    Similar to assertFormError() but for formsets.

    Use form_index=None to check the formset's non-form errors (in that
    case, you must also use field=None).
    Otherwise use an integer to check the formset's n-th form for errors.

    Other parameters are the same as assertFormError().
  summary: Similar to assertFormError() but for formsets
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertFormsetError
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertGreater
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a > b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertGreaterEqual
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a >= b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertHTMLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two HTML snippets are semantically the same.
    Whitespace in most cases is ignored, and attribute ordering is not
    significant. The arguments must be valid HTML.
  summary: Assert that two HTML snippets are semantically the same
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: html1
      default: null
      rest: false
    - kind: positional
      name: html2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertHTMLNotEqual
  kind: method
  ns: django.test
  description: Assert that two HTML snippets are not semantically equivalent.
  summary: Assert that two HTML snippets are not semantically equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: html1
      default: null
      rest: false
    - kind: positional
      name: html2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertIn
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a in b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: member
      default: null
      rest: false
    - kind: positional
      name: container
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertInHTML
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: needle
      default: null
      rest: false
    - kind: positional
      name: haystack
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertIs
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a is b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr1
      default: null
      rest: false
    - kind: positional
      name: expr2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertIsInstance
  kind: method
  ns: django.test
  description: |-
    Same as self.assertTrue(isinstance(obj, cls)), with a nicer
    default message.
  summary: Same as self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertIsNone
  kind: method
  ns: django.test
  description: Same as self.assertTrue(obj is None), with a nicer default message.
  summary: Same as self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertIsNot
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a is not b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr1
      default: null
      rest: false
    - kind: positional
      name: expr2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertIsNotNone
  kind: method
  ns: django.test
  description: Included for symmetry with assertIsNone.
  summary: Included for symmetry with assertIsNone
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertJSONEqual
  kind: method
  ns: django.test
  description: |-
    Assert that the JSON fragments raw and expected_data are equal.
    Usual JSON non-significant whitespace rules apply as the heavyweight
    is delegated to the json library.
  summary: Assert that the JSON fragments raw and expected_data are equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: raw
      default: null
      rest: false
    - kind: positional
      name: expected_data
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertJSONNotEqual
  kind: method
  ns: django.test
  description: |-
    Assert that the JSON fragments raw and expected_data are not equal.
    Usual JSON non-significant whitespace rules apply as the heavyweight
    is delegated to the json library.
  summary: Assert that the JSON fragments raw and expected_data are not equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: raw
      default: null
      rest: false
    - kind: positional
      name: expected_data
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertLess
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a < b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertLessEqual
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a <= b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertListEqual
  kind: method
  ns: django.test
  description: |-
    A list-specific equality assertion.

    Args:
        list1: The first list to compare.
        list2: The second list to compare.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: A list-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: list1
      default: null
      rest: false
    - kind: positional
      name: list2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertLogs
  kind: method
  ns: django.test
  description: |-
    Fail unless a log message of level *level* or higher is emitted
    on *logger_name* or its children.  If omitted, *level* defaults to
    INFO and *logger* defaults to the root logger.

    This method must be used as a context manager, and will yield
    a recording object with two attributes: `output` and `records`.
    At the end of the context manager, the `output` attribute will
    be a list of the matching formatted log messages and the
    `records` attribute will be a list of the corresponding LogRecord
    objects.

    Example::

        with self.assertLogs('foo', level='INFO') as cm:
            logging.getLogger('foo').info('first message')
            logging.getLogger('foo.bar').error('second message')
        self.assertEqual(cm.output, ['INFO:foo:first message',
                                     'ERROR:foo.bar:second message'])
  summary: Fail unless a log message of level *level* or higher is emitted
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logger
      default: None
      rest: false
    - kind: positional
      name: level
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertMultiLineEqual
  kind: method
  ns: django.test
  description: Assert that two multi-line strings are equal.
  summary: Assert that two multi-line strings are equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNoLogs
  kind: method
  ns: django.test
  description: |-
    Fail unless no log messages of level *level* or higher are emitted
    on *logger_name* or its children.

    This method must be used as a context manager.
  summary: Fail unless no log messages of level *level* or higher are emitted
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logger
      default: None
      rest: false
    - kind: positional
      name: level
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNotAlmostEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are equal as determined by their
    difference rounded to the given number of decimal places
    (default 7) and comparing to zero, or by comparing that the
    difference between the two objects is less than the given delta.

    Note that decimal places (from zero) are usually not the same
    as significant digits (measured from the most significant digit).

    Objects that are equal automatically fail.
  summary: Fail if the two objects are equal as determined by their
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: places
      default: None
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: delta
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNotAlmostEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNotContains
  kind: method
  ns: django.test
  description: |-
    Assert that a response indicates that some content was retrieved
    successfully, (i.e., the HTTP status code was as expected) and that
    ``text`` doesn't occur in the content of the response.
  summary: Assert that a response indicates that some content was retrieved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: html
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNotEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are equal as determined by the '!='
    operator.
  summary: Fail if the two objects are equal as determined by the '!='
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNotEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNotIn
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a not in b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: member
      default: null
      rest: false
    - kind: positional
      name: container
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNotIsInstance
  kind: method
  ns: django.test
  description: Included for symmetry with assertIsInstance.
  summary: Included for symmetry with assertIsInstance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNotRegex
  kind: method
  ns: django.test
  description: Fail the test if the text matches the regular expression.
  summary: Fail the test if the text matches the regular expression
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: unexpected_regex
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertNotRegexpMatches
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertRaises
  kind: method
  ns: django.test
  description: |-
    Fail unless an exception of class expected_exception is raised
    by the callable when invoked with specified positional and
    keyword arguments. If a different type of exception is
    raised, it will not be caught, and the test case will be
    deemed to have suffered an error, exactly as for an
    unexpected exception.

    If called with the callable and arguments omitted, will return a
    context object used like this::

         with self.assertRaises(SomeException):
             do_something()

    An optional keyword argument 'msg' can be provided when assertRaises
    is used as a context object.

    The context manager keeps a reference to the exception as
    the 'exception' attribute. This allows you to inspect the
    exception after the assertion::

        with self.assertRaises(SomeException) as cm:
            do_something()
        the_exception = cm.exception
        self.assertEqual(the_exception.error_code, 3)
  summary: Fail unless an exception of class expected_exception is raised
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertRaisesMessage
  kind: method
  ns: django.test
  description: |-
    Assert that expected_message is found in the message of a raised
    exception.

    Args:
        expected_exception: Exception class expected to be raised.
        expected_message: expected error message string value.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
  summary: Assert that expected_message is found in the message of a raised
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - kind: positional
      name: expected_message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertRaisesRegex
  kind: method
  ns: django.test
  description: |-
    Asserts that the message in a raised exception matches a regex.

    Args:
        expected_exception: Exception class expected to be raised.
        expected_regex: Regex (re.Pattern object or string) expected
                to be found in error message.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
        msg: Optional message used in case of failure. Can only be used
                when assertRaisesRegex is used as a context manager.
  summary: Asserts that the message in a raised exception matches a regex
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertRaisesRegexp
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertRedirects
  kind: method
  ns: django.test
  description: |-
    Assert that a response redirected to a specific URL and that the
    redirect URL can be loaded.

    Won't work for external links since it uses the test client to do a
    request (use fetch_redirect_response=False to check such links without
    fetching them).
  summary: Assert that a response redirected to a specific URL and that the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: expected_url
      default: null
      rest: false
    - kind: positional
      name: status_code
      default: '302'
      rest: false
    - kind: positional
      name: target_status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: fetch_redirect_response
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertRegex
  kind: method
  ns: django.test
  description: Fail the test unless the text matches the regular expression.
  summary: Fail the test unless the text matches the regular expression
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertRegexpMatches
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertSequenceEqual
  kind: method
  ns: django.test
  description: |-
    An equality assertion for ordered sequences (like lists and tuples).

    For the purposes of this function, a valid ordered sequence type is one
    which can be indexed, has a length, and has an equality operator.

    Args:
        seq1: The first sequence to compare.
        seq2: The second sequence to compare.
        seq_type: The expected datatype of the sequences, or None if no
                datatype should be enforced.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: An equality assertion for ordered sequences (like lists and tuples)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: seq1
      default: null
      rest: false
    - kind: positional
      name: seq2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: seq_type
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertSetEqual
  kind: method
  ns: django.test
  description: |-
    A set-specific equality assertion.

    Args:
        set1: The first set to compare.
        set2: The second set to compare.
        msg: Optional message to use on failure instead of a list of
                differences.

    assertSetEqual uses ducktyping to support different types of sets, and
    is optimized for sets specifically (parameters must support a
    difference method).
  summary: A set-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: set1
      default: null
      rest: false
    - kind: positional
      name: set2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertTemplateNotUsed
  kind: method
  ns: django.test
  description: |-
    Assert that the template with the provided name was NOT used in
    rendering the response. Also usable as context manager.
  summary: Assert that the template with the provided name was NOT used in
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: None
      rest: false
    - kind: positional
      name: template_name
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertTemplateUsed
  kind: method
  ns: django.test
  description: |-
    Assert that the template with the provided name was used in rendering
    the response. Also usable as context manager.
  summary: Assert that the template with the provided name was used in rendering
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: None
      rest: false
    - kind: positional
      name: template_name
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertTrue
  kind: method
  ns: django.test
  description: Check that the expression is true.
  summary: Check that the expression is true
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertTupleEqual
  kind: method
  ns: django.test
  description: |-
    A tuple-specific equality assertion.

    Args:
        tuple1: The first tuple to compare.
        tuple2: The second tuple to compare.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: A tuple-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tuple1
      default: null
      rest: false
    - kind: positional
      name: tuple2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertURLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two URLs are the same, ignoring the order of query string
    parameters except for parameters with the same name.

    For example, /path/?x=1&y=2 is equal to /path/?y=2&x=1, but
    /path/?a=1&a=2 isn't equal to /path/?a=2&a=1.
  summary: Assert that two URLs are the same, ignoring the order of query string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: url1
      default: null
      rest: false
    - kind: positional
      name: url2
      default: null
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertWarns
  kind: method
  ns: django.test
  description: |-
    Fail unless a warning of class warnClass is triggered
    by the callable when invoked with specified positional and
    keyword arguments.  If a different type of warning is
    triggered, it will not be handled: depending on the other
    warning filtering rules in effect, it might be silenced, printed
    out, or raised as an exception.

    If called with the callable and arguments omitted, will return a
    context object used like this::

         with self.assertWarns(SomeWarning):
             do_something()

    An optional keyword argument 'msg' can be provided when assertWarns
    is used as a context object.

    The context manager keeps a reference to the first matching
    warning as the 'warning' attribute; similarly, the 'filename'
    and 'lineno' attributes give you information about the line
    of Python code from which the warning was triggered.
    This allows you to inspect the warning after the assertion::

        with self.assertWarns(SomeWarning) as cm:
            do_something()
        the_warning = cm.warning
        self.assertEqual(the_warning.some_attribute, 147)
  summary: Fail unless a warning of class warnClass is triggered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertWarnsMessage
  kind: method
  ns: django.test
  description: |-
    Same as assertRaisesMessage but for assertWarns() instead of
    assertRaises().
  summary: Same as assertRaisesMessage but for assertWarns() instead of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - kind: positional
      name: expected_message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertWarnsRegex
  kind: method
  ns: django.test
  description: |-
    Asserts that the message in a triggered warning matches a regexp.
    Basic functioning is similar to assertWarns() with the addition
    that only warnings whose messages also match the regular expression
    are considered successful matches.

    Args:
        expected_warning: Warning class expected to be triggered.
        expected_regex: Regex (re.Pattern object or string) expected
                to be found in error message.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
        msg: Optional message used in case of failure. Can only be used
                when assertWarnsRegex is used as a context manager.
  summary: Asserts that the message in a triggered warning matches a regexp
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertXMLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two XML snippets are semantically the same.
    Whitespace in most cases is ignored and attribute ordering is not
    significant. The arguments must be valid XML.
  summary: Assert that two XML snippets are semantically the same
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: xml1
      default: null
      rest: false
    - kind: positional
      name: xml2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assertXMLNotEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two XML snippets are not semantically equivalent.
    Whitespace in most cases is ignored and attribute ordering is not
    significant. The arguments must be valid XML.
  summary: Assert that two XML snippets are not semantically equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: xml1
      default: null
      rest: false
    - kind: positional
      name: xml2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.assert_
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.countTestCases
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.databases
  kind: property
  ns: django.test
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: SimpleTestCase.debug
  kind: method
  ns: django.test
  description: Perform the same as __call__(), without catching the exception.
  summary: Perform the same as __call__(), without catching the exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.defaultTestResult
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.doClassCleanups
  kind: function
  ns: django.test
  description: |-
    Execute all class cleanup functions. Normally called for you after
    tearDownClass.
  summary: Execute all class cleanup functions
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.doCleanups
  kind: method
  ns: django.test
  description: |-
    Execute all cleanup functions. Normally called for you after
    tearDown.
  summary: Execute all cleanup functions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.enterClassContext
  kind: function
  ns: django.test
  description: Same as enterContext, but class-wide.
  summary: Same as enterContext, but class-wide
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: cm
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.enterContext
  kind: method
  ns: django.test
  description: |-
    Enters the supplied context manager.

    If successful, also adds its __exit__ method as a cleanup
    function and returns the result of the __enter__ method.
  summary: Enters the supplied context manager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cm
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.fail
  kind: method
  ns: django.test
  description: Fail immediately, with the given message.
  summary: Fail immediately, with the given message
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.failIf
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.failIfAlmostEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.failIfEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.failUnless
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.failUnlessAlmostEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.failUnlessEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.failUnlessRaises
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.id
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.longMessage
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: SimpleTestCase.maxDiff
  kind: property
  ns: django.test
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: SimpleTestCase.modify_settings
  kind: method
  ns: django.test
  description: |-
    A context manager that temporarily applies changes a list setting and
    reverts back to the original value when exiting the context.
  summary: A context manager that temporarily applies changes a list setting and
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.run
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: result
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.setUp
  kind: method
  ns: django.test
  description: Hook method for setting up the test fixture before exercising it.
  summary: Hook method for setting up the test fixture before exercising it
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.setUpClass
  kind: function
  ns: django.test
  description: Hook method for setting up class fixture before running tests in the class.
  summary: Hook method for setting up class fixture before running tests in the class
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.settings
  kind: method
  ns: django.test
  description: |-
    A context manager that temporarily sets a setting and reverts to the
    original value when exiting the context.
  summary: A context manager that temporarily sets a setting and reverts to the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.shortDescription
  kind: method
  ns: django.test
  description: |-
    Returns a one-line description of the test, or None if no
    description has been provided.

    The default implementation of this method returns the first line of
    the specified test method's docstring.
  summary: Returns a one-line description of the test, or None if no
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.skipTest
  kind: method
  ns: django.test
  description: Skip this test.
  summary: Skip this test
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: reason
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.subTest
  kind: method
  ns: django.test
  description: |-
    Return a context manager that will return the enclosed block
    of code in a subtest identified by the optional message and
    keyword parameters.  A failure in the subtest marks the test
    case as failed but resumes execution at the end of the enclosed
    block, allowing further test code to be executed.
  summary: Return a context manager that will return the enclosed block
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.tearDown
  kind: method
  ns: django.test
  description: Hook method for deconstructing the test fixture after testing it.
  summary: Hook method for deconstructing the test fixture after testing it
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimpleTestCase.tearDownClass
  kind: function
  ns: django.test
  description: Hook method for deconstructing the class fixture after running all tests in the class.
  summary: Hook method for deconstructing the class fixture after running all tests in the class
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase
  kind: class
  ns: django.test
  description: |-
    Do basically the same as TransactionTestCase but also launch a live HTTP
    server in a separate thread so that the tests may use another testing
    framework, such as Selenium for example, instead of the built-in dummy
    client.
    It inherits from TransactionTestCase instead of TestCase because the
    threads don't share the same transactions (unless if using in-memory sqlite)
    and each thread needs to commit all their transactions so that the other
    thread can see the changes.
  summary: Do basically the same as TransactionTestCase but also launch a live HTTP
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: methodName
      default: runTest
      rest: false
    - type: LiveServerTestCase
      kind: return
  inherits_from:
  - <class 'django.test.testcases.TransactionTestCase'>
  - <class 'django.test.testcases.SimpleTestCase'>
  - <class 'unittest.case.TestCase'>
- name: LiveServerTestCase.addClassCleanup
  kind: function
  ns: django.test
  description: |-
    Same as addCleanup, except the cleanup items are called even if
    setUpClass fails (unlike tearDownClass).
  summary: Same as addCleanup, except the cleanup items are called even if
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.addCleanup
  kind: method
  ns: django.test
  description: |-
    Add a function, with arguments, to be called when the test is
    completed. Functions added are called on a LIFO basis and are
    called after tearDown on test failure or success.

    Cleanup items are called even if setUp fails (unlike tearDown).
  summary: Add a function, with arguments, to be called when the test is
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.addTypeEqualityFunc
  kind: method
  ns: django.test
  description: |-
    Add a type specific assertEqual style function to compare a type.

    This method is for use by TestCase subclasses that need to register
    their own type equality functions to provide nicer error messages.

    Args:
        typeobj: The data type to call this function on when both values
                are of the same type in assertEqual().
        function: The callable taking two arguments and an optional
                msg= argument that raises self.failureException with a
                useful error message when the two arguments are not equal.
  summary: Add a type specific assertEqual style function to compare a type
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: typeobj
      default: null
      rest: false
    - kind: positional
      name: function
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.allowed_host
  kind: property
  ns: django.test
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.assertAlmostEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are unequal as determined by their
    difference rounded to the given number of decimal places
    (default 7) and comparing to zero, or by comparing that the
    difference between the two objects is more than the given
    delta.

    Note that decimal places (from zero) are usually not the same
    as significant digits (measured from the most significant digit).

    If the two objects compare equal then they will automatically
    compare almost equal.
  summary: Fail if the two objects are unequal as determined by their
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: places
      default: None
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: delta
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertAlmostEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertContains
  kind: method
  ns: django.test
  description: |-
    Assert that a response indicates that some content was retrieved
    successfully, (i.e., the HTTP status code was as expected) and that
    ``text`` occurs ``count`` times in the content of the response.
    If ``count`` is None, the count doesn't matter - the assertion is true
    if the text occurs at least once in the response.
  summary: Assert that a response indicates that some content was retrieved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - kind: positional
      name: status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: html
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertCountEqual
  kind: method
  ns: django.test
  description: |-
    Asserts that two iterables have the same elements, the same number of
    times, without regard to order.

        self.assertEqual(Counter(list(first)),
                         Counter(list(second)))

     Example:
        - [0, 1, 1] and [1, 0, 1] compare equal.
        - [0, 0, 1] and [0, 1] compare unequal.
  summary: Asserts that two iterables have the same elements, the same number of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertDictContainsSubset
  kind: method
  ns: django.test
  description: Checks whether dictionary is a superset of subset.
  summary: Checks whether dictionary is a superset of subset
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: subset
      default: null
      rest: false
    - kind: positional
      name: dictionary
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertDictEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: d1
      default: null
      rest: false
    - kind: positional
      name: d2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are unequal as determined by the '=='
    operator.
  summary: Fail if the two objects are unequal as determined by the '=='
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertFalse
  kind: method
  ns: django.test
  description: Check that the expression is false.
  summary: Check that the expression is false
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertFieldOutput
  kind: method
  ns: django.test
  description: |-
    Assert that a form field behaves correctly with various inputs.

    Args:
        fieldclass: the class of the field to be tested.
        valid: a dictionary mapping valid inputs to their expected
                cleaned values.
        invalid: a dictionary mapping invalid inputs to one or more
                raised error messages.
        field_args: the args passed to instantiate the field
        field_kwargs: the kwargs passed to instantiate the field
        empty_value: the expected clean output for inputs in empty_values
  summary: Assert that a form field behaves correctly with various inputs
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: fieldclass
      default: null
      rest: false
    - kind: positional
      name: valid
      default: null
      rest: false
    - kind: positional
      name: invalid
      default: null
      rest: false
    - kind: positional
      name: field_args
      default: None
      rest: false
    - kind: positional
      name: field_kwargs
      default: None
      rest: false
    - kind: positional
      name: empty_value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertFormError
  kind: method
  ns: django.test
  description: |-
    Assert that a field named "field" on the given form object has specific
    errors.

    errors can be either a single error message or a list of errors
    messages. Using errors=[] test that the field has no errors.

    You can pass field=None to check the form's non-field errors.
  summary: Assert that a field named "field" on the given form object has specific
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertFormSetError
  kind: method
  ns: django.test
  description: |-
    Similar to assertFormError() but for formsets.

    Use form_index=None to check the formset's non-form errors (in that
    case, you must also use field=None).
    Otherwise use an integer to check the formset's n-th form for errors.

    Other parameters are the same as assertFormError().
  summary: Similar to assertFormError() but for formsets
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertFormsetError
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertGreater
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a > b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertGreaterEqual
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a >= b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertHTMLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two HTML snippets are semantically the same.
    Whitespace in most cases is ignored, and attribute ordering is not
    significant. The arguments must be valid HTML.
  summary: Assert that two HTML snippets are semantically the same
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: html1
      default: null
      rest: false
    - kind: positional
      name: html2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertHTMLNotEqual
  kind: method
  ns: django.test
  description: Assert that two HTML snippets are not semantically equivalent.
  summary: Assert that two HTML snippets are not semantically equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: html1
      default: null
      rest: false
    - kind: positional
      name: html2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertIn
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a in b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: member
      default: null
      rest: false
    - kind: positional
      name: container
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertInHTML
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: needle
      default: null
      rest: false
    - kind: positional
      name: haystack
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertIs
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a is b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr1
      default: null
      rest: false
    - kind: positional
      name: expr2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertIsInstance
  kind: method
  ns: django.test
  description: |-
    Same as self.assertTrue(isinstance(obj, cls)), with a nicer
    default message.
  summary: Same as self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertIsNone
  kind: method
  ns: django.test
  description: Same as self.assertTrue(obj is None), with a nicer default message.
  summary: Same as self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertIsNot
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a is not b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr1
      default: null
      rest: false
    - kind: positional
      name: expr2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertIsNotNone
  kind: method
  ns: django.test
  description: Included for symmetry with assertIsNone.
  summary: Included for symmetry with assertIsNone
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertJSONEqual
  kind: method
  ns: django.test
  description: |-
    Assert that the JSON fragments raw and expected_data are equal.
    Usual JSON non-significant whitespace rules apply as the heavyweight
    is delegated to the json library.
  summary: Assert that the JSON fragments raw and expected_data are equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: raw
      default: null
      rest: false
    - kind: positional
      name: expected_data
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertJSONNotEqual
  kind: method
  ns: django.test
  description: |-
    Assert that the JSON fragments raw and expected_data are not equal.
    Usual JSON non-significant whitespace rules apply as the heavyweight
    is delegated to the json library.
  summary: Assert that the JSON fragments raw and expected_data are not equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: raw
      default: null
      rest: false
    - kind: positional
      name: expected_data
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertLess
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a < b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertLessEqual
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a <= b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: null
      rest: false
    - kind: positional
      name: b
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertListEqual
  kind: method
  ns: django.test
  description: |-
    A list-specific equality assertion.

    Args:
        list1: The first list to compare.
        list2: The second list to compare.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: A list-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: list1
      default: null
      rest: false
    - kind: positional
      name: list2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertLogs
  kind: method
  ns: django.test
  description: |-
    Fail unless a log message of level *level* or higher is emitted
    on *logger_name* or its children.  If omitted, *level* defaults to
    INFO and *logger* defaults to the root logger.

    This method must be used as a context manager, and will yield
    a recording object with two attributes: `output` and `records`.
    At the end of the context manager, the `output` attribute will
    be a list of the matching formatted log messages and the
    `records` attribute will be a list of the corresponding LogRecord
    objects.

    Example::

        with self.assertLogs('foo', level='INFO') as cm:
            logging.getLogger('foo').info('first message')
            logging.getLogger('foo.bar').error('second message')
        self.assertEqual(cm.output, ['INFO:foo:first message',
                                     'ERROR:foo.bar:second message'])
  summary: Fail unless a log message of level *level* or higher is emitted
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logger
      default: None
      rest: false
    - kind: positional
      name: level
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertMultiLineEqual
  kind: method
  ns: django.test
  description: Assert that two multi-line strings are equal.
  summary: Assert that two multi-line strings are equal
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNoLogs
  kind: method
  ns: django.test
  description: |-
    Fail unless no log messages of level *level* or higher are emitted
    on *logger_name* or its children.

    This method must be used as a context manager.
  summary: Fail unless no log messages of level *level* or higher are emitted
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: logger
      default: None
      rest: false
    - kind: positional
      name: level
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNotAlmostEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are equal as determined by their
    difference rounded to the given number of decimal places
    (default 7) and comparing to zero, or by comparing that the
    difference between the two objects is less than the given delta.

    Note that decimal places (from zero) are usually not the same
    as significant digits (measured from the most significant digit).

    Objects that are equal automatically fail.
  summary: Fail if the two objects are equal as determined by their
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: places
      default: None
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: delta
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNotAlmostEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNotContains
  kind: method
  ns: django.test
  description: |-
    Assert that a response indicates that some content was retrieved
    successfully, (i.e., the HTTP status code was as expected) and that
    ``text`` doesn't occur in the content of the response.
  summary: Assert that a response indicates that some content was retrieved
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: html
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNotEqual
  kind: method
  ns: django.test
  description: |-
    Fail if the two objects are equal as determined by the '!='
    operator.
  summary: Fail if the two objects are equal as determined by the '!='
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: first
      default: null
      rest: false
    - kind: positional
      name: second
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNotEquals
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNotIn
  kind: method
  ns: django.test
  description: Just like self.assertTrue(a not in b), but with a nicer default message.
  summary: Just like self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: member
      default: null
      rest: false
    - kind: positional
      name: container
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNotIsInstance
  kind: method
  ns: django.test
  description: Included for symmetry with assertIsInstance.
  summary: Included for symmetry with assertIsInstance
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNotRegex
  kind: method
  ns: django.test
  description: Fail the test if the text matches the regular expression.
  summary: Fail the test if the text matches the regular expression
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: unexpected_regex
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNotRegexpMatches
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertNumQueries
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: num
      default: null
      rest: false
    - kind: positional
      name: func
      default: None
      rest: false
    - name: using
      default: default
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertQuerySetEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: qs
      default: null
      rest: false
    - kind: positional
      name: values
      default: null
      rest: false
    - kind: positional
      name: transform
      default: None
      rest: false
    - kind: positional
      name: ordered
      default: 'True'
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertQuerysetEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertRaises
  kind: method
  ns: django.test
  description: |-
    Fail unless an exception of class expected_exception is raised
    by the callable when invoked with specified positional and
    keyword arguments. If a different type of exception is
    raised, it will not be caught, and the test case will be
    deemed to have suffered an error, exactly as for an
    unexpected exception.

    If called with the callable and arguments omitted, will return a
    context object used like this::

         with self.assertRaises(SomeException):
             do_something()

    An optional keyword argument 'msg' can be provided when assertRaises
    is used as a context object.

    The context manager keeps a reference to the exception as
    the 'exception' attribute. This allows you to inspect the
    exception after the assertion::

        with self.assertRaises(SomeException) as cm:
            do_something()
        the_exception = cm.exception
        self.assertEqual(the_exception.error_code, 3)
  summary: Fail unless an exception of class expected_exception is raised
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertRaisesMessage
  kind: method
  ns: django.test
  description: |-
    Assert that expected_message is found in the message of a raised
    exception.

    Args:
        expected_exception: Exception class expected to be raised.
        expected_message: expected error message string value.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
  summary: Assert that expected_message is found in the message of a raised
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - kind: positional
      name: expected_message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertRaisesRegex
  kind: method
  ns: django.test
  description: |-
    Asserts that the message in a raised exception matches a regex.

    Args:
        expected_exception: Exception class expected to be raised.
        expected_regex: Regex (re.Pattern object or string) expected
                to be found in error message.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
        msg: Optional message used in case of failure. Can only be used
                when assertRaisesRegex is used as a context manager.
  summary: Asserts that the message in a raised exception matches a regex
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_exception
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertRaisesRegexp
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertRedirects
  kind: method
  ns: django.test
  description: |-
    Assert that a response redirected to a specific URL and that the
    redirect URL can be loaded.

    Won't work for external links since it uses the test client to do a
    request (use fetch_redirect_response=False to check such links without
    fetching them).
  summary: Assert that a response redirected to a specific URL and that the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: expected_url
      default: null
      rest: false
    - kind: positional
      name: status_code
      default: '302'
      rest: false
    - kind: positional
      name: target_status_code
      default: '200'
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: fetch_redirect_response
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertRegex
  kind: method
  ns: django.test
  description: Fail the test unless the text matches the regular expression.
  summary: Fail the test unless the text matches the regular expression
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertRegexpMatches
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertSequenceEqual
  kind: method
  ns: django.test
  description: |-
    An equality assertion for ordered sequences (like lists and tuples).

    For the purposes of this function, a valid ordered sequence type is one
    which can be indexed, has a length, and has an equality operator.

    Args:
        seq1: The first sequence to compare.
        seq2: The second sequence to compare.
        seq_type: The expected datatype of the sequences, or None if no
                datatype should be enforced.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: An equality assertion for ordered sequences (like lists and tuples)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: seq1
      default: null
      rest: false
    - kind: positional
      name: seq2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - kind: positional
      name: seq_type
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertSetEqual
  kind: method
  ns: django.test
  description: |-
    A set-specific equality assertion.

    Args:
        set1: The first set to compare.
        set2: The second set to compare.
        msg: Optional message to use on failure instead of a list of
                differences.

    assertSetEqual uses ducktyping to support different types of sets, and
    is optimized for sets specifically (parameters must support a
    difference method).
  summary: A set-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: set1
      default: null
      rest: false
    - kind: positional
      name: set2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertTemplateNotUsed
  kind: method
  ns: django.test
  description: |-
    Assert that the template with the provided name was NOT used in
    rendering the response. Also usable as context manager.
  summary: Assert that the template with the provided name was NOT used in
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: None
      rest: false
    - kind: positional
      name: template_name
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertTemplateUsed
  kind: method
  ns: django.test
  description: |-
    Assert that the template with the provided name was used in rendering
    the response. Also usable as context manager.
  summary: Assert that the template with the provided name was used in rendering
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: None
      rest: false
    - kind: positional
      name: template_name
      default: None
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - kind: positional
      name: count
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertTrue
  kind: method
  ns: django.test
  description: Check that the expression is true.
  summary: Check that the expression is true
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expr
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertTupleEqual
  kind: method
  ns: django.test
  description: |-
    A tuple-specific equality assertion.

    Args:
        tuple1: The first tuple to compare.
        tuple2: The second tuple to compare.
        msg: Optional message to use on failure instead of a list of
                differences.
  summary: A tuple-specific equality assertion
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: tuple1
      default: null
      rest: false
    - kind: positional
      name: tuple2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertURLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two URLs are the same, ignoring the order of query string
    parameters except for parameters with the same name.

    For example, /path/?x=1&y=2 is equal to /path/?y=2&x=1, but
    /path/?a=1&a=2 isn't equal to /path/?a=2&a=1.
  summary: Assert that two URLs are the same, ignoring the order of query string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: url1
      default: null
      rest: false
    - kind: positional
      name: url2
      default: null
      rest: false
    - kind: positional
      name: msg_prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertWarns
  kind: method
  ns: django.test
  description: |-
    Fail unless a warning of class warnClass is triggered
    by the callable when invoked with specified positional and
    keyword arguments.  If a different type of warning is
    triggered, it will not be handled: depending on the other
    warning filtering rules in effect, it might be silenced, printed
    out, or raised as an exception.

    If called with the callable and arguments omitted, will return a
    context object used like this::

         with self.assertWarns(SomeWarning):
             do_something()

    An optional keyword argument 'msg' can be provided when assertWarns
    is used as a context object.

    The context manager keeps a reference to the first matching
    warning as the 'warning' attribute; similarly, the 'filename'
    and 'lineno' attributes give you information about the line
    of Python code from which the warning was triggered.
    This allows you to inspect the warning after the assertion::

        with self.assertWarns(SomeWarning) as cm:
            do_something()
        the_warning = cm.warning
        self.assertEqual(the_warning.some_attribute, 147)
  summary: Fail unless a warning of class warnClass is triggered
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertWarnsMessage
  kind: method
  ns: django.test
  description: |-
    Same as assertRaisesMessage but for assertWarns() instead of
    assertRaises().
  summary: Same as assertRaisesMessage but for assertWarns() instead of
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - kind: positional
      name: expected_message
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertWarnsRegex
  kind: method
  ns: django.test
  description: |-
    Asserts that the message in a triggered warning matches a regexp.
    Basic functioning is similar to assertWarns() with the addition
    that only warnings whose messages also match the regular expression
    are considered successful matches.

    Args:
        expected_warning: Warning class expected to be triggered.
        expected_regex: Regex (re.Pattern object or string) expected
                to be found in error message.
        args: Function to be called and extra positional args.
        kwargs: Extra kwargs.
        msg: Optional message used in case of failure. Can only be used
                when assertWarnsRegex is used as a context manager.
  summary: Asserts that the message in a triggered warning matches a regexp
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: expected_warning
      default: null
      rest: false
    - kind: positional
      name: expected_regex
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertXMLEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two XML snippets are semantically the same.
    Whitespace in most cases is ignored and attribute ordering is not
    significant. The arguments must be valid XML.
  summary: Assert that two XML snippets are semantically the same
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: xml1
      default: null
      rest: false
    - kind: positional
      name: xml2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assertXMLNotEqual
  kind: method
  ns: django.test
  description: |-
    Assert that two XML snippets are not semantically equivalent.
    Whitespace in most cases is ignored and attribute ordering is not
    significant. The arguments must be valid XML.
  summary: Assert that two XML snippets are not semantically equivalent
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: xml1
      default: null
      rest: false
    - kind: positional
      name: xml2
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.assert_
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.available_apps
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.countTestCases
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.databases
  kind: property
  ns: django.test
  description: |-
    set() -> new empty set object
    set(iterable) -> new set object

    Build an unordered collection of unique elements.
  summary: set() -> new empty set object
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.debug
  kind: method
  ns: django.test
  description: Perform the same as __call__(), without catching the exception.
  summary: Perform the same as __call__(), without catching the exception
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.defaultTestResult
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.doClassCleanups
  kind: function
  ns: django.test
  description: |-
    Execute all class cleanup functions. Normally called for you after
    tearDownClass.
  summary: Execute all class cleanup functions
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.doCleanups
  kind: method
  ns: django.test
  description: |-
    Execute all cleanup functions. Normally called for you after
    tearDown.
  summary: Execute all cleanup functions
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.enterClassContext
  kind: function
  ns: django.test
  description: Same as enterContext, but class-wide.
  summary: Same as enterContext, but class-wide
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: cm
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.enterContext
  kind: method
  ns: django.test
  description: |-
    Enters the supplied context manager.

    If successful, also adds its __exit__ method as a cleanup
    function and returns the result of the __enter__ method.
  summary: Enters the supplied context manager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cm
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.fail
  kind: method
  ns: django.test
  description: Fail immediately, with the given message.
  summary: Fail immediately, with the given message
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.failIf
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.failIfAlmostEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.failIfEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.failUnless
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.failUnlessAlmostEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.failUnlessEqual
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.failUnlessRaises
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.fixtures
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.host
  kind: property
  ns: django.test
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.id
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.live_server_url
  kind: property
  ns: django.test
  description: |-
    Decorator that converts a method with a single cls argument into a property
    that can be accessed directly from the class.
  summary: Decorator that converts a method with a single cls argument into a property
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.longMessage
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.maxDiff
  kind: property
  ns: django.test
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.modify_settings
  kind: method
  ns: django.test
  description: |-
    A context manager that temporarily applies changes a list setting and
    reverts back to the original value when exiting the context.
  summary: A context manager that temporarily applies changes a list setting and
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.port
  kind: property
  ns: django.test
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.reset_sequences
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.run
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: result
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.serialized_rollback
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class
  kind: class
  ns: django.test
  description: Thread for running a live HTTP server while the tests are running.
  summary: Thread for running a live HTTP server while the tests are running
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: host
      default: null
      rest: false
    - kind: positional
      name: static_handler
      default: null
      rest: false
    - kind: positional
      name: connections_override
      default: None
      rest: false
    - kind: positional
      name: port
      default: '0'
      rest: false
    - type: LiveServerThread
      kind: return
  inherits_from:
  - <class 'threading.Thread'>
- name: LiveServerTestCase.server_thread_class.daemon
  kind: property
  ns: django.test
  description: |-
    A boolean value indicating whether this thread is a daemon thread.

    This must be set before start() is called, otherwise RuntimeError is
    raised. Its initial value is inherited from the creating thread; the
    main thread is not a daemon thread and therefore all threads created in
    the main thread default to daemon = False.

    The entire Python program exits when only daemon threads are left.
  summary: A boolean value indicating whether this thread is a daemon thread
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.getName
  kind: method
  ns: django.test
  description: |-
    Return a string used for identification purposes only.

    This method is deprecated, use the name attribute instead.
  summary: Return a string used for identification purposes only
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.ident
  kind: property
  ns: django.test
  description: |-
    Thread identifier of this thread or None if it has not been started.

    This is a nonzero integer. See the get_ident() function. Thread
    identifiers may be recycled when a thread exits and another thread is
    created. The identifier is available even after the thread has exited.
  summary: Thread identifier of this thread or None if it has not been started
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.isDaemon
  kind: method
  ns: django.test
  description: |-
    Return whether this thread is a daemon.

    This method is deprecated, use the daemon attribute instead.
  summary: Return whether this thread is a daemon
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.is_alive
  kind: method
  ns: django.test
  description: |-
    Return whether the thread is alive.

    This method returns True just before the run() method starts until just
    after the run() method terminates. See also the module function
    enumerate().
  summary: Return whether the thread is alive
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.join
  kind: method
  ns: django.test
  description: |-
    Wait until the thread terminates.

    This blocks the calling thread until the thread whose join() method is
    called terminates -- either normally or through an unhandled exception
    or until the optional timeout occurs.

    When the timeout argument is present and not None, it should be a
    floating point number specifying a timeout for the operation in seconds
    (or fractions thereof). As join() always returns None, you must call
    is_alive() after join() to decide whether a timeout happened -- if the
    thread is still alive, the join() call timed out.

    When the timeout argument is not present or None, the operation will
    block until the thread terminates.

    A thread can be join()ed many times.

    join() raises a RuntimeError if an attempt is made to join the current
    thread as that would cause a deadlock. It is also an error to join() a
    thread before it has been started and attempts to do so raises the same
    exception.
  summary: Wait until the thread terminates
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: timeout
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.name
  kind: property
  ns: django.test
  description: |-
    A string used for identification purposes only.

    It has no semantics. Multiple threads may be given the same name. The
    initial name is set by the constructor.
  summary: A string used for identification purposes only
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.native_id
  kind: property
  ns: django.test
  description: |-
    Native integral thread ID of this thread, or None if it has not been started.

    This is a non-negative integer. See the get_native_id() function.
    This represents the Thread ID as reported by the kernel.
  summary: Native integral thread ID of this thread, or None if it has not been started
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.run
  kind: method
  ns: django.test
  description: |-
    Set up the live server and databases, and then loop over handling
    HTTP requests.
  summary: Set up the live server and databases, and then loop over handling
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class
  kind: class
  ns: django.test
  description: A threaded version of the WSGIServer
  summary: A threaded version of the WSGIServer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: connections_override
      default: None
      rest: false
      kind: kw-only
    - type: ThreadedWSGIServer
      kind: return
  inherits_from:
  - <class 'socketserver.ThreadingMixIn'>
  - <class 'django.core.servers.basehttp.WSGIServer'>
  - <class 'wsgiref.simple_server.WSGIServer'>
  - <class 'http.server.HTTPServer'>
  - <class 'socketserver.TCPServer'>
  - <class 'socketserver.BaseServer'>
- name: LiveServerTestCase.server_thread_class.server_class.address_family
  kind: property
  ns: django.test
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.allow_reuse_address
  kind: property
  ns: django.test
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.allow_reuse_port
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.application
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.block_on_close
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.close_request
  kind: method
  ns: django.test
  description: Called to clean up an individual request.
  summary: Called to clean up an individual request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.daemon_threads
  kind: property
  ns: django.test
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.fileno
  kind: method
  ns: django.test
  description: |-
    Return socket file number.

    Interface required by selector.
  summary: Return socket file number
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.finish_request
  kind: method
  ns: django.test
  description: Finish one request by instantiating RequestHandlerClass.
  summary: Finish one request by instantiating RequestHandlerClass
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: client_address
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.get_app
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.get_request
  kind: method
  ns: django.test
  description: |-
    Get the request and client address from the socket.

    May be overridden.
  summary: Get the request and client address from the socket
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.handle_error
  kind: method
  ns: django.test
  description: |-
    Handle an error gracefully.  May be overridden.

    The default is to print a traceback and continue.
  summary: Handle an error gracefully
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: client_address
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.handle_request
  kind: method
  ns: django.test
  description: |-
    Handle one request, possibly blocking.

    Respects self.timeout.
  summary: Handle one request, possibly blocking
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.handle_timeout
  kind: method
  ns: django.test
  description: |-
    Called if no new request arrives within self.timeout.

    Overridden by ForkingMixIn.
  summary: Called if no new request arrives within self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.process_request
  kind: method
  ns: django.test
  description: Start a new thread to process the request.
  summary: Start a new thread to process the request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: client_address
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.process_request_thread
  kind: method
  ns: django.test
  description: |-
    Same as in BaseServer but as a thread.

    In addition, exception handling is done here.
  summary: Same as in BaseServer but as a thread
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: client_address
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.request_queue_size
  kind: property
  ns: django.test
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.serve_forever
  kind: method
  ns: django.test
  description: |-
    Handle one request at a time until shutdown.

    Polls for shutdown every poll_interval seconds. Ignores
    self.timeout. If you need to do periodic tasks, do them in
    another thread.
  summary: Handle one request at a time until shutdown
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: poll_interval
      default: '0.5'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.server_activate
  kind: method
  ns: django.test
  description: |-
    Called by constructor to activate the server.

    May be overridden.
  summary: Called by constructor to activate the server
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.server_bind
  kind: method
  ns: django.test
  description: Override server_bind to store the server name.
  summary: Override server_bind to store the server name
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.server_close
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.service_actions
  kind: method
  ns: django.test
  description: |-
    Called by the serve_forever() loop.

    May be overridden by a subclass / Mixin to implement any code that
    needs to be run during the loop.
  summary: Called by the serve_forever() loop
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.set_app
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: application
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.setup_environ
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.shutdown
  kind: method
  ns: django.test
  description: |-
    Stops the serve_forever loop.

    Blocks until the loop has finished. This must be called while
    serve_forever() is running in another thread, or it will
    deadlock.
  summary: Stops the serve_forever loop
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.shutdown_request
  kind: method
  ns: django.test
  description: Called to shutdown and close an individual request.
  summary: Called to shutdown and close an individual request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.socket_type
  kind: property
  ns: django.test
  description: An enumeration.
  summary: An enumeration
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.timeout
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.server_class.verify_request
  kind: method
  ns: django.test
  description: |-
    Verify the request.  May be overridden.

    Return True if we should proceed with this request.
  summary: Verify the request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - kind: positional
      name: client_address
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.setDaemon
  kind: method
  ns: django.test
  description: |-
    Set whether this thread is a daemon.

    This method is deprecated, use the .daemon property instead.
  summary: Set whether this thread is a daemon
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: daemonic
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.setName
  kind: method
  ns: django.test
  description: |-
    Set the name string for this thread.

    This method is deprecated, use the name attribute instead.
  summary: Set the name string for this thread
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.start
  kind: method
  ns: django.test
  description: |-
    Start the thread's activity.

    It must be called at most once per thread object. It arranges for the
    object's run() method to be invoked in a separate thread of control.

    This method will raise a RuntimeError if called more than once on the
    same thread object.
  summary: Start the thread's activity
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.server_thread_class.terminate
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.setUp
  kind: method
  ns: django.test
  description: Hook method for setting up the test fixture before exercising it.
  summary: Hook method for setting up the test fixture before exercising it
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.setUpClass
  kind: function
  ns: django.test
  description: Hook method for setting up class fixture before running tests in the class.
  summary: Hook method for setting up class fixture before running tests in the class
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.settings
  kind: method
  ns: django.test
  description: |-
    A context manager that temporarily sets a setting and reverts to the
    original value when exiting the context.
  summary: A context manager that temporarily sets a setting and reverts to the
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.shortDescription
  kind: method
  ns: django.test
  description: |-
    Returns a one-line description of the test, or None if no
    description has been provided.

    The default implementation of this method returns the first line of
    the specified test method's docstring.
  summary: Returns a one-line description of the test, or None if no
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.skipTest
  kind: method
  ns: django.test
  description: Skip this test.
  summary: Skip this test
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: reason
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler
  kind: class
  ns: django.test
  description: |-
    Handler for serving static files. A private class that is meant to be used
    solely as a convenience by LiveServerThread.
  summary: Handler for serving static files
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: application
      default: null
      rest: false
    - type: _StaticFilesHandler
      kind: return
  inherits_from:
  - <class 'django.test.testcases.FSFilesHandler'>
  - <class 'django.core.handlers.wsgi.WSGIHandler'>
  - <class 'django.core.handlers.base.BaseHandler'>
- name: LiveServerTestCase.static_handler.adapt_method_mode
  kind: method
  ns: django.test
  description: |-
    Adapt a method to be in the correct "mode":
    - If is_async is False:
      - Synchronous methods are left alone
      - Asynchronous methods are wrapped with async_to_sync
    - If is_async is True:
      - Synchronous methods are wrapped with sync_to_async()
      - Asynchronous methods are left alone
  summary: 'Adapt a method to be in the correct "mode":'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: is_async
      default: null
      rest: false
    - kind: positional
      name: method
      default: null
      rest: false
    - kind: positional
      name: method_is_async
      default: None
      rest: false
    - kind: positional
      name: debug
      default: 'False'
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.check_response
  kind: method
  ns: django.test
  description: Raise an error if the view returned None or an uncalled coroutine.
  summary: Raise an error if the view returned None or an uncalled coroutine
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: response
      default: null
      rest: false
    - kind: positional
      name: callback
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.file_path
  kind: method
  ns: django.test
  description: Return the relative path to the file on disk for the given URL.
  summary: Return the relative path to the file on disk for the given URL
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: url
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.get_base_dir
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.get_base_url
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.get_response
  kind: method
  ns: django.test
  description: Return an HttpResponse object for the given HttpRequest.
  summary: Return an HttpResponse object for the given HttpRequest
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.get_response_async
  kind: method
  ns: django.test
  description: |-
    Asynchronous version of get_response.

    Funneling everything, including WSGI, into a single async
    get_response() is too slow. Avoid the context switch by using
    a separate async response path.
  summary: Asynchronous version of get_response
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.load_middleware
  kind: method
  ns: django.test
  description: |-
    Populate middleware lists from settings.MIDDLEWARE.

    Must be called after the environment is fixed (see __call__ in subclasses).
  summary: Populate middleware lists from settings
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: is_async
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.make_view_atomic
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: view
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.process_exception_by_middleware
  kind: method
  ns: django.test
  description: |-
    Pass the exception to the exception middleware. If no middleware
    return a response for this exception, return None.
  summary: Pass the exception to the exception middleware
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: exception
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class
  kind: class
  ns: django.test
  description: A basic HTTP request.
  summary: A basic HTTP request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: environ
      default: null
      rest: false
    - type: WSGIRequest
      kind: return
  inherits_from:
  - <class 'django.http.request.HttpRequest'>
- name: LiveServerTestCase.static_handler.request_class.COOKIES
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.FILES
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.GET
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.POST
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.accepted_types
  kind: property
  ns: django.test
  description: Return a list of MediaType instances.
  summary: Return a list of MediaType instances
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.accepts
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: media_type
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.body
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.build_absolute_uri
  kind: method
  ns: django.test
  description: |-
    Build an absolute URI from the location and the variables available in
    this request. If no ``location`` is specified, build the absolute URI
    using request.get_full_path(). If the location is absolute, convert it
    to an RFC 3987 compliant URI and return it. If location is relative or
    is scheme-relative (i.e., ``//example.com/``), urljoin() it to a base
    URL constructed from the request variables.
  summary: Build an absolute URI from the location and the variables available in
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: location
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.close
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.encoding
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.get_full_path
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: force_append_slash
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.get_full_path_info
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: force_append_slash
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.get_host
  kind: method
  ns: django.test
  description: Return the HTTP host using the environment or request headers.
  summary: Return the HTTP host using the environment or request headers
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.get_port
  kind: method
  ns: django.test
  description: Return the port number for the request as a string.
  summary: Return the port number for the request as a string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.get_signed_cookie
  kind: method
  ns: django.test
  description: |-
    Attempt to return a signed cookie. If the signature fails or the
    cookie has expired, raise an exception, unless the `default` argument
    is provided,  in which case return that value.
  summary: Attempt to return a signed cookie
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: <object object at 0x7f7ace864be0>
      rest: false
    - kind: positional
      name: salt
      default: null
      rest: false
    - kind: positional
      name: max_age
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.headers
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.is_secure
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.parse_file_upload
  kind: method
  ns: django.test
  description: Return a tuple of (POST QueryDict, FILES MultiValueDict).
  summary: Return a tuple of (POST QueryDict, FILES MultiValueDict)
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: META
      default: null
      rest: false
    - kind: positional
      name: post_data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.read
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.readline
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.readlines
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.scheme
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.request_class.upload_handlers
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LiveServerTestCase.static_handler.resolve_request
  kind: method
  ns: django.test
  description: |-
    Retrieve/set the urlconf for the request. Return the view resolved,
    with its args and kwargs.
  summary: Retrieve/set the urlconf for the request
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.static_handler.serve
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.subTest
  kind: method
  ns: django.test
  description: |-
    Return a context manager that will return the enclosed block
    of code in a subtest identified by the optional message and
    keyword parameters.  A failure in the subtest marks the test
    case as failed but resumes execution at the end of the enclosed
    block, allowing further test code to be executed.
  summary: Return a context manager that will return the enclosed block
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.tearDown
  kind: method
  ns: django.test
  description: Hook method for deconstructing the test fixture after testing it.
  summary: Hook method for deconstructing the test fixture after testing it
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LiveServerTestCase.tearDownClass
  kind: function
  ns: django.test
  description: Hook method for deconstructing the class fixture after running all tests in the class.
  summary: Hook method for deconstructing the class fixture after running all tests in the class
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: skipIfDBFeature
  kind: function
  ns: django.test
  description: Skip a test if a database has at least one of the named features.
  summary: Skip a test if a database has at least one of the named features
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: skipUnlessAnyDBFeature
  kind: function
  ns: django.test
  description: Skip a test unless a database has any of the named features.
  summary: Skip a test unless a database has any of the named features
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: skipUnlessDBFeature
  kind: function
  ns: django.test
  description: Skip a test unless a database has all the named features.
  summary: Skip a test unless a database has all the named features
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: ignore_warnings
  kind: class
  ns: django.test
  description: |-
    A base class that can either be used as a context manager during tests
    or as a test function or unittest.TestCase subclass decorator to perform
    temporary alterations.

    `attr_name`: attribute assigned the return value of enable() if used as
                 a class decorator.

    `kwarg_name`: keyword argument passing the return value of enable() if
                  used as a function decorator.
  summary: A base class that can either be used as a context manager during tests
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: ignore_warnings
      kind: return
  inherits_from:
  - <class 'django.test.utils.TestContextDecorator'>
- name: ignore_warnings.decorate_callable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ignore_warnings.decorate_class
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ignore_warnings.disable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ignore_warnings.enable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: modify_settings
  kind: class
  ns: django.test
  description: |-
    Like override_settings, but makes it possible to append, prepend, or remove
    items instead of redefining the entire list.
  summary: Like override_settings, but makes it possible to append, prepend, or remove
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: modify_settings
      kind: return
  inherits_from:
  - <class 'django.test.utils.override_settings'>
  - <class 'django.test.utils.TestContextDecorator'>
- name: modify_settings.decorate_callable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: modify_settings.decorate_class
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: modify_settings.disable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: modify_settings.enable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: modify_settings.enable_exception
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: modify_settings.save_options
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: test_func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: override_settings
  kind: class
  ns: django.test
  description: |-
    Act as either a decorator or a context manager. If it's a decorator, take a
    function and return a wrapped function. If it's a contextmanager, use it
    with the ``with`` statement. In either event, entering/exiting are called
    before and after, respectively, the function/block is executed.
  summary: Act as either a decorator or a context manager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: override_settings
      kind: return
  inherits_from:
  - <class 'django.test.utils.TestContextDecorator'>
- name: override_settings.decorate_callable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: override_settings.decorate_class
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: override_settings.disable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: override_settings.enable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: override_settings.enable_exception
  kind: property
  ns: django.test
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: override_settings.save_options
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: test_func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: override_system_checks
  kind: class
  ns: django.test
  description: |-
    Act as a decorator. Override list of registered system checks.
    Useful when you override `INSTALLED_APPS`, e.g. if you exclude `auth` app,
    you also need to exclude its system checks.
  summary: Act as a decorator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: new_checks
      default: null
      rest: false
    - kind: positional
      name: deployment_checks
      default: None
      rest: false
    - type: override_system_checks
      kind: return
  inherits_from:
  - <class 'django.test.utils.TestContextDecorator'>
- name: override_system_checks.decorate_callable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: override_system_checks.decorate_class
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: override_system_checks.disable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: override_system_checks.enable
  kind: method
  ns: django.test
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: tag
  kind: function
  ns: django.test
  description: Decorator to add tags to a test class or method.
  summary: Decorator to add tags to a test class or method
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: django.urls
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LocalePrefixPattern
  kind: class
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: prefix_default_language
      default: 'True'
      rest: false
    - type: LocalePrefixPattern
      kind: return
  inherits_from: null
- name: LocalePrefixPattern.check
  kind: method
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalePrefixPattern.describe
  kind: method
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalePrefixPattern.language_prefix
  kind: property
  ns: django.urls
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LocalePrefixPattern.match
  kind: method
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LocalePrefixPattern.regex
  kind: property
  ns: django.urls
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: URLPattern
  kind: class
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: null
      rest: false
    - kind: positional
      name: callback
      default: null
      rest: false
    - kind: positional
      name: default_args
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - type: URLPattern
      kind: return
  inherits_from: null
- name: URLPattern.check
  kind: method
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: URLPattern.lookup_str
  kind: property
  ns: django.urls
  description: |-
    A string that identifies the view (e.g. 'path.to.view_function' or
    'path.to.ClassBasedView').
  summary: A string that identifies the view (e
  signatures: null
  inherits_from: null
- name: URLPattern.resolve
  kind: method
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: URLResolver
  kind: class
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: pattern
      default: null
      rest: false
    - kind: positional
      name: urlconf_name
      default: null
      rest: false
    - kind: positional
      name: default_kwargs
      default: None
      rest: false
    - kind: positional
      name: app_name
      default: None
      rest: false
    - kind: positional
      name: namespace
      default: None
      rest: false
    - type: URLResolver
      kind: return
  inherits_from: null
- name: URLResolver.app_dict
  kind: property
  ns: django.urls
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: URLResolver.check
  kind: method
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: URLResolver.namespace_dict
  kind: property
  ns: django.urls
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: URLResolver.resolve
  kind: method
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: path
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: URLResolver.resolve_error_handler
  kind: method
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: view_type
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: URLResolver.reverse
  kind: method
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: lookup_view
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: URLResolver.reverse_dict
  kind: property
  ns: django.urls
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: URLResolver.url_patterns
  kind: property
  ns: django.urls
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: URLResolver.urlconf_module
  kind: property
  ns: django.urls
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Resolver404
  kind: class
  ns: django.urls
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'django.http.response.Http404'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Resolver404.add_note
  kind: callable
  ns: django.urls
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Resolver404.args
  kind: property
  ns: django.urls
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Resolver404.with_traceback
  kind: callable
  ns: django.urls
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ResolverMatch
  kind: class
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: func
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - kind: positional
      name: kwargs
      default: null
      rest: false
    - kind: positional
      name: url_name
      default: None
      rest: false
    - kind: positional
      name: app_names
      default: None
      rest: false
    - kind: positional
      name: namespaces
      default: None
      rest: false
    - kind: positional
      name: route
      default: None
      rest: false
    - kind: positional
      name: tried
      default: None
      rest: false
    - kind: positional
      name: captured_kwargs
      default: None
      rest: false
    - kind: positional
      name: extra_kwargs
      default: None
      rest: false
    - type: ResolverMatch
      kind: return
  inherits_from: null
- name: clear_script_prefix
  kind: function
  ns: django.urls
  description: Unset the script prefix for the current thread.
  summary: Unset the script prefix for the current thread
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: clear_url_caches
  kind: function
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: get_callable
  kind: callable
  ns: django.urls
  description: |-
    Return a callable corresponding to lookup_view.
    * If lookup_view is already a callable, return it.
    * If lookup_view is a string import path that can be resolved to a callable,
      import that callable and return it, otherwise raise an exception
      (ImportError or ViewDoesNotExist).
  summary: Return a callable corresponding to lookup_view
  signatures: null
  inherits_from: null
- name: get_mod_func
  kind: function
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: callback
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_ns_resolver
  kind: callable
  ns: django.urls
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_resolver
  kind: function
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: urlconf
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: get_script_prefix
  kind: function
  ns: django.urls
  description: |-
    Return the currently active script prefix. Useful for client code that
    wishes to construct their own URLs manually (although accessing the request
    instance is normally going to be a lot cleaner).
  summary: Return the currently active script prefix
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: get_urlconf
  kind: function
  ns: django.urls
  description: |-
    Return the root URLconf to use for the current thread if it has been
    changed from the default one.
  summary: Return the root URLconf to use for the current thread if it has been
  signatures:
  - - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: include
  kind: function
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: arg
      default: null
      rest: false
    - kind: positional
      name: namespace
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: is_valid_path
  kind: function
  ns: django.urls
  description: |-
    Return the ResolverMatch if the given path resolves against the default URL
    resolver, False otherwise. This is a convenience method to make working
    with "is this a match?" cases easier, avoiding try...except blocks.
  summary: Return the ResolverMatch if the given path resolves against the default URL
  signatures:
  - - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: urlconf
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: path
  kind: callable
  ns: django.urls
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures:
  - - kind: positional
      name: route
      default: null
      rest: false
    - kind: positional
      name: view
      default: null
      rest: false
    - kind: positional
      name: kwargs
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - name: Pattern
      default: <class 'django.urls.resolvers.RoutePattern'>
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: re_path
  kind: callable
  ns: django.urls
  description: |-
    partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
  summary: partial(func, *args, **keywords) - new function with partial application
  signatures:
  - - kind: positional
      name: route
      default: null
      rest: false
    - kind: positional
      name: view
      default: null
      rest: false
    - kind: positional
      name: kwargs
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - name: Pattern
      default: <class 'django.urls.resolvers.RegexPattern'>
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: register_converter
  kind: function
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: converter
      default: null
      rest: false
    - kind: positional
      name: type_name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: resolve
  kind: function
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: path
      default: null
      rest: false
    - kind: positional
      name: urlconf
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: reverse
  kind: function
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: viewname
      default: null
      rest: false
    - kind: positional
      name: urlconf
      default: None
      rest: false
    - kind: positional
      name: args
      default: None
      rest: false
    - kind: positional
      name: kwargs
      default: None
      rest: false
    - kind: positional
      name: current_app
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: reverse_lazy
  kind: function
  ns: django.urls
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: set_script_prefix
  kind: function
  ns: django.urls
  description: Set the script prefix for the current thread.
  summary: Set the script prefix for the current thread
  signatures:
  - - kind: positional
      name: prefix
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: set_urlconf
  kind: function
  ns: django.urls
  description: |-
    Set the URLconf for the current thread (overriding the default one in
    settings). If urlconf_name is None, revert back to the default.
  summary: Set the URLconf for the current thread (overriding the default one in
  signatures:
  - - kind: positional
      name: urlconf_name
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: translate_url
  kind: function
  ns: django.urls
  description: |-
    Given a URL (absolute or relative), try to get its translated version in
    the `lang_code` language (either by i18n_patterns or by translated regex).
    Return the original URL if no translated version is found.
  summary: Given a URL (absolute or relative), try to get its translated version in
  signatures:
  - - kind: positional
      name: url
      default: null
      rest: false
    - kind: positional
      name: lang_code
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: django.views
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: View
  kind: class
  ns: django.views
  description: |-
    Intentionally simple parent class for all views. Only implements
    dispatch-by-method and simple sanity checking.
  summary: Intentionally simple parent class for all views
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: View
      kind: return
  inherits_from: null
- name: View.as_view
  kind: function
  ns: django.views
  description: Main entry point for a request-response process.
  summary: Main entry point for a request-response process
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: View.dispatch
  kind: method
  ns: django.views
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: View.http_method_names
  kind: property
  ns: django.views
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: View.http_method_not_allowed
  kind: method
  ns: django.views
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: View.options
  kind: method
  ns: django.views
  description: Handle responding to requests for the OPTIONS HTTP verb.
  summary: Handle responding to requests for the OPTIONS HTTP verb
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: View.setup
  kind: method
  ns: django.views
  description: Initialize attributes shared by all view methods.
  summary: Initialize attributes shared by all view methods
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: request
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: View.view_is_async
  kind: property
  ns: django.views
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
