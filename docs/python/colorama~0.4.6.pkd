---
name: colorama
text_format: rst
generator: src:python
generator_command: src:python use "colorama"
version: 0.4.6
summary: Cross-platform colored terminal text.
description: |-
  [Latest Version]

  [Supported Python versions]

  [Build Status]

  Colorama

  Makes ANSI escape character sequences (for producing colored terminal
  text and cursor positioning) work under MS Windows.

  PyPI for releases | Github for source | Colorama for enterprise on
  Tidelift

  If you find Colorama useful, please [Donate with Paypal] to the authors.
  Thank you!

  Installation

  Tested on CPython 2.7, 3.7, 3.8, 3.9 and 3.10 and Pypy 2.7 and 3.8.

  No requirements other than the standard library.

      pip install colorama
      # or
      conda install -c anaconda colorama

  Description

  ANSI escape character sequences have long been used to produce colored
  terminal text and cursor positioning on Unix and Macs. Colorama makes
  this work on Windows, too, by wrapping stdout, stripping ANSI sequences
  it finds (which would appear as gobbledygook in the output), and
  converting them into the appropriate win32 calls to modify the state of
  the terminal. On other platforms, Colorama does nothing.

  This has the upshot of providing a simple cross-platform API for
  printing colored terminal text from Python, and has the happy
  side-effect that existing applications or libraries which use ANSI
  sequences to produce colored output on Linux or Macs can now also work
  on Windows, simply by calling colorama.just_fix_windows_console() (since
  v0.4.6) or colorama.init() (all versions, but may have other
  side-effects – see below).

  An alternative approach is to install ansi.sys on Windows machines,
  which provides the same behaviour for all applications running in
  terminals. Colorama is intended for situations where that isn't easy
  (e.g., maybe your app doesn't have an installer.)

  Demo scripts in the source code repository print some colored text using
  ANSI sequences. Compare their output under Gnome-terminal's built in
  ANSI handling, versus on Windows Command-Prompt using Colorama:

  [ANSI sequences on Ubuntu under gnome-terminal.]

  [Same ANSI sequences on Windows, using Colorama.]

  These screenshots show that, on Windows, Colorama does not support ANSI
  'dim text'; it looks the same as 'normal text'.

  Usage

  Initialisation

  If the only thing you want from Colorama is to get ANSI escapes to work
  on Windows, then run:

      from colorama import just_fix_windows_console
      just_fix_windows_console()

  If you're on a recent version of Windows 10 or better, and your
  stdout/stderr are pointing to a Windows console, then this will flip the
  magic configuration switch to enable Windows' built-in ANSI support.

  If you're on an older version of Windows, and your stdout/stderr are
  pointing to a Windows console, then this will wrap sys.stdout and/or
  sys.stderr in a magic file object that intercepts ANSI escape sequences
  and issues the appropriate Win32 calls to emulate them.

  In all other circumstances, it does nothing whatsoever. Basically the
  idea is that this makes Windows act like Unix with respect to ANSI
  escape handling.

  It's safe to call this function multiple times. It's safe to call this
  function on non-Windows platforms, but it won't do anything. It's safe
  to call this function when one or both of your stdout/stderr are
  redirected to a file – it won't do anything to those streams.

  Alternatively, you can use the older interface with more features (but
  also more potential footguns):

      from colorama import init
      init()

  This does the same thing as just_fix_windows_console, except for the
  following differences:

  -   It's not safe to call init multiple times; you can end up with
      multiple layers of wrapping and broken ANSI support.
  -   Colorama will apply a heuristic to guess whether stdout/stderr
      support ANSI, and if it thinks they don't, then it will wrap
      sys.stdout and sys.stderr in a magic file object that strips out
      ANSI escape sequences before printing them. This happens on all
      platforms, and can be convenient if you want to write your code to
      emit ANSI escape sequences unconditionally, and let Colorama decide
      whether they should actually be output. But note that Colorama's
      heuristic is not particularly clever.
  -   init also accepts explicit keyword args to enable/disable various
      functionality – see below.

  To stop using Colorama before your program exits, simply call deinit().
  This will restore stdout and stderr to their original values, so that
  Colorama is disabled. To resume using Colorama again, call reinit(); it
  is cheaper than calling init() again (but does the same thing).

  Most users should depend on colorama >= 0.4.6, and use
  just_fix_windows_console. The old init interface will be supported
  indefinitely for backwards compatibility, but we don't plan to fix any
  issues with it, also for backwards compatibility.

  Colored Output

  Cross-platform printing of colored text can then be done using
  Colorama's constant shorthand for ANSI escape sequences. These are
  deliberately rudimentary, see below.

      from colorama import Fore, Back, Style
      print(Fore.RED + 'some red text')
      print(Back.GREEN + 'and with a green background')
      print(Style.DIM + 'and in dim text')
      print(Style.RESET_ALL)
      print('back to normal now')

  ...or simply by manually printing ANSI sequences from your own code:

      print('\033[31m' + 'some red text')
      print('\033[39m') # and reset to default color

  ...or, Colorama can be used in conjunction with existing ANSI libraries
  such as the venerable Termcolor the fabulous Blessings, or the
  incredible _Rich.

  If you wish Colorama's Fore, Back and Style constants were more capable,
  then consider using one of the above highly capable libraries to
  generate colors, etc, and use Colorama just for its primary purpose: to
  convert those ANSI sequences to also work on Windows:

  SIMILARLY, do not send PRs adding the generation of new ANSI types to
  Colorama. We are only interested in converting ANSI codes to win32 API
  calls, not shortcuts like the above to generate ANSI characters.

      from colorama import just_fix_windows_console
      from termcolor import colored

      # use Colorama to make Termcolor work on Windows too
      just_fix_windows_console()

      # then use Termcolor for all colored text output
      print(colored('Hello, World!', 'green', 'on_red'))

  Available formatting constants are:

      Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.
      Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.
      Style: DIM, NORMAL, BRIGHT, RESET_ALL

  Style.RESET_ALL resets foreground, background, and brightness. Colorama
  will perform this reset automatically on program exit.

  These are fairly well supported, but not part of the standard:

      Fore: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX
      Back: LIGHTBLACK_EX, LIGHTRED_EX, LIGHTGREEN_EX, LIGHTYELLOW_EX, LIGHTBLUE_EX, LIGHTMAGENTA_EX, LIGHTCYAN_EX, LIGHTWHITE_EX

  Cursor Positioning

  ANSI codes to reposition the cursor are supported. See demos/demo06.py
  for an example of how to generate them.

  Init Keyword Args

  init() accepts some **kwargs to override default behaviour.

  init(autoreset=False):

      If you find yourself repeatedly sending reset sequences to turn off
      color changes at the end of every print, then init(autoreset=True)
      will automate that:

          from colorama import init
          init(autoreset=True)
          print(Fore.RED + 'some red text')
          print('automatically back to default color again')

  init(strip=None):

      Pass True or False to override whether ANSI codes should be stripped
      from the output. The default behaviour is to strip if on Windows or
      if output is redirected (not a tty).

  init(convert=None):

      Pass True or False to override whether to convert ANSI codes in the
      output into win32 calls. The default behaviour is to convert if on
      Windows and output is to a tty (terminal).

  init(wrap=True):

      On Windows, Colorama works by replacing sys.stdout and sys.stderr
      with proxy objects, which override the .write() method to do their
      work. If this wrapping causes you problems, then this can be
      disabled by passing init(wrap=False). The default behaviour is to
      wrap if autoreset or strip or convert are True.

      When wrapping is disabled, colored printing on non-Windows platforms
      will continue to work as normal. To do cross-platform colored
      output, you can use Colorama's AnsiToWin32 proxy directly:

          import sys
          from colorama import init, AnsiToWin32
          init(wrap=False)
          stream = AnsiToWin32(sys.stderr).stream

          # Python 2
          print >>stream, Fore.BLUE + 'blue text on stderr'

          # Python 3
          print(Fore.BLUE + 'blue text on stderr', file=stream)

  Recognised ANSI Sequences

  ANSI sequences generally take the form:

      ESC [ <param> ; <param> ... <command>

  Where <param> is an integer, and <command> is a single letter. Zero or
  more params are passed to a <command>. If no params are passed, it is
  generally synonymous with passing a single zero. No spaces exist in the
  sequence; they have been inserted here simply to read more easily.

  The only ANSI sequences that Colorama converts into win32 calls are:

      ESC [ 0 m       # reset all (colors and brightness)
      ESC [ 1 m       # bright
      ESC [ 2 m       # dim (looks same as normal brightness)
      ESC [ 22 m      # normal brightness

      # FOREGROUND:
      ESC [ 30 m      # black
      ESC [ 31 m      # red
      ESC [ 32 m      # green
      ESC [ 33 m      # yellow
      ESC [ 34 m      # blue
      ESC [ 35 m      # magenta
      ESC [ 36 m      # cyan
      ESC [ 37 m      # white
      ESC [ 39 m      # reset

      # BACKGROUND
      ESC [ 40 m      # black
      ESC [ 41 m      # red
      ESC [ 42 m      # green
      ESC [ 43 m      # yellow
      ESC [ 44 m      # blue
      ESC [ 45 m      # magenta
      ESC [ 46 m      # cyan
      ESC [ 47 m      # white
      ESC [ 49 m      # reset

      # cursor positioning
      ESC [ y;x H     # position cursor at x across, y down
      ESC [ y;x f     # position cursor at x across, y down
      ESC [ n A       # move cursor n lines up
      ESC [ n B       # move cursor n lines down
      ESC [ n C       # move cursor n characters forward
      ESC [ n D       # move cursor n characters backward

      # clear the screen
      ESC [ mode J    # clear the screen

      # clear the line
      ESC [ mode K    # clear the line

  Multiple numeric params to the 'm' command can be combined into a single
  sequence:

      ESC [ 36 ; 45 ; 1 m     # bright cyan text on magenta background

  All other ANSI sequences of the form
  ESC [ <param> ; <param> ... <command> are silently stripped from the
  output on Windows.

  Any other form of ANSI sequence, such as single-character codes or
  alternative initial characters, are not recognised or stripped. It would
  be cool to add them though. Let me know if it would be useful for you,
  via the Issues on GitHub.

  Status & Known Problems

  I've personally only tested it on Windows XP (CMD, Console2), Ubuntu
  (gnome-terminal, xterm), and OS X.

  Some valid ANSI sequences aren't recognised.

  If you're hacking on the code, see README-hacking.md. ESPECIALLY, see
  the explanation there of why we do not want PRs that allow Colorama to
  generate new types of ANSI codes.

  See outstanding issues and wish-list:
  https://github.com/tartley/colorama/issues

  If anything doesn't work for you, or doesn't do what you expected or
  hoped for, I'd love to hear about it on that issues list, would be
  delighted by patches, and would be happy to grant commit access to
  anyone who submits a working patch or two.

  License

  Copyright Jonathan Hartley & Arnon Yaari, 2013-2020. BSD 3-Clause
  license; see LICENSE file.

  Professional support

    ------------ ----------------------------------------------------------------
    [Tidelift]   Professional support for colorama is available as part of the
                 Tidelift Subscription. Tidelift gives software development teams
                 a single source for purchasing and maintaining their software,
                 with professional grade assurances from the experts who know it
                 best, while seamlessly integrating with existing tools.

    ------------ ----------------------------------------------------------------

  Thanks

  See the CHANGELOG for more thanks!

  -   Marc Schlaich (schlamar) for a setup.py fix for Python2.5.
  -   Marc Abramowitz, reported & fixed a crash on exit with closed
      stdout, providing a solution to issue #7's setuptools/distutils
      debate, and other fixes.
  -   User 'eryksun', for guidance on correctly instantiating
      ctypes.windll.
  -   Matthew McCormick for politely pointing out a longstanding crash on
      non-Win.
  -   Ben Hoyt, for a magnificent fix under 64-bit Windows.
  -   Jesse at Empty Square for submitting a fix for examples in the
      README.
  -   User 'jamessp', an observant documentation fix for cursor
      positioning.
  -   User 'vaal1239', Dave Mckee & Lackner Kristof for a tiny but
      much-needed Win7 fix.
  -   Julien Stuyck, for wisely suggesting Python3 compatible updates to
      README.
  -   Daniel Griffith for multiple fabulous patches.
  -   Oscar Lesta for a valuable fix to stop ANSI chars being sent to
      non-tty output.
  -   Roger Binns, for many suggestions, valuable feedback, & bug reports.
  -   Tim Golden for thought and much appreciated feedback on the initial
      idea.
  -   User 'Zearin' for updates to the README file.
  -   John Szakmeister for adding support for light colors
  -   Charles Merriam for adding documentation to demos
  -   Jurko for a fix on 64-bit Windows CPython2.5 w/o ctypes
  -   Florian Bruhin for a fix when stdout or stderr are None
  -   Thomas Weininger for fixing ValueError on Windows
  -   Remi Rampin for better Github integration and fixes to the README
      file
  -   Simeon Visser for closing a file handle using 'with' and updating
      classifiers to include Python 3.3 and 3.4
  -   Andy Neff for fixing RESET of LIGHT_EX colors.
  -   Jonathan Hartley for the initial idea and implementation.
homepage: null
license: BSD-3-Clause

---
- name: colorama
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AnsiToWin32
  kind: class
  ns: colorama
  description: |-
    Implements a 'write()' method which, on Windows, will strip ANSI character
    sequences from the text, and if outputting to a tty, will convert them into
    win32 function calls.
  summary: Implements a 'write()' method which, on Windows, will strip ANSI character
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: convert
    default: None
    rest: false
  - kind: positional
    name: strip
    default: None
    rest: false
  - kind: positional
    name: autoreset
    default: 'False'
    rest: false
  - type: AnsiToWin32
  inherits_from: null
- name: AnsiToWin32.ANSI_CSI_RE
  kind: property
  ns: colorama
  description: Compiled regular expression object.
  summary: Compiled regular expression object
  signatures: null
  inherits_from: null
- name: AnsiToWin32.ANSI_OSC_RE
  kind: property
  ns: colorama
  description: Compiled regular expression object.
  summary: Compiled regular expression object
  signatures: null
  inherits_from: null
- name: AnsiToWin32.call_win32
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: command
    default: null
    rest: false
  - kind: positional
    name: params
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.convert_ansi
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: paramstring
    default: null
    rest: false
  - kind: positional
    name: command
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.convert_osc
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: text
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.extract_params
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: command
    default: null
    rest: false
  - kind: positional
    name: paramstring
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.flush
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.get_win32_calls
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.reset_all
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.should_wrap
  kind: method
  ns: colorama
  description: |-
    True if this class is actually needed. If false, then the output
    stream will not be affected, nor will win32 calls be issued, so
    wrapping stdout is not actually required. This will generally be
    False on non-Windows platforms, unless optional functionality like
    autoreset has been requested using kwargs to init()
  summary: True if this class is actually needed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.write
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: text
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.write_and_convert
  kind: method
  ns: colorama
  description: |-
    Write the given text to our wrapped stream, stripping any ANSI
    sequences from the text, and optionally converting them into win32
    calls.
  summary: Write the given text to our wrapped stream, stripping any ANSI
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: text
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiToWin32.write_plain_text
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: start
    default: null
    rest: false
  - kind: positional
    name: end
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Back
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Cursor
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Fore
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Style
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ansi
  kind: module
  ns: colorama
  description: |-
    This module generates ANSI character codes to printing colors to terminals.
    See: http://en.wikipedia.org/wiki/ANSI_escape_code
  summary: This module generates ANSI character codes to printing colors to terminals
  signatures: null
  inherits_from: null
- name: AnsiBack
  kind: class
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: AnsiBack
  inherits_from:
  - <class 'colorama.ansi.AnsiCodes'>
- name: AnsiBack.BLACK
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.BLUE
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.CYAN
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.GREEN
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.LIGHTBLACK_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.LIGHTBLUE_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.LIGHTCYAN_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.LIGHTGREEN_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.LIGHTMAGENTA_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.LIGHTRED_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.LIGHTWHITE_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.LIGHTYELLOW_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.MAGENTA
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.RED
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.RESET
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.WHITE
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiBack.YELLOW
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiCodes
  kind: class
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: AnsiCodes
  inherits_from: null
- name: AnsiCursor
  kind: class
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: AnsiCursor
  inherits_from: null
- name: AnsiCursor.BACK
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiCursor.DOWN
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiCursor.FORWARD
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiCursor.POS
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: x
    default: '1'
    rest: false
  - kind: positional
    name: y
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiCursor.UP
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: AnsiFore
  kind: class
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: AnsiFore
  inherits_from:
  - <class 'colorama.ansi.AnsiCodes'>
- name: AnsiFore.BLACK
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.BLUE
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.CYAN
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.GREEN
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.LIGHTBLACK_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.LIGHTBLUE_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.LIGHTCYAN_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.LIGHTGREEN_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.LIGHTMAGENTA_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.LIGHTRED_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.LIGHTWHITE_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.LIGHTYELLOW_EX
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.MAGENTA
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.RED
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.RESET
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.WHITE
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiFore.YELLOW
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiStyle
  kind: class
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: AnsiStyle
  inherits_from:
  - <class 'colorama.ansi.AnsiCodes'>
- name: AnsiStyle.BRIGHT
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiStyle.DIM
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiStyle.NORMAL
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: AnsiStyle.RESET_ALL
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: BEL
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Back
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CSI
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Cursor
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Fore
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: OSC
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Style
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: clear_line
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: mode
    default: '2'
    rest: false
  - type: '?'
  inherits_from: null
- name: clear_screen
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: mode
    default: '2'
    rest: false
  - type: '?'
  inherits_from: null
- name: code_to_chars
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: code
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: set_title
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: title
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ansitowin32
  kind: module
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BEL
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StreamWrapper
  kind: class
  ns: colorama
  description: |-
    Wraps a stream (such as stdout), acting as a transparent proxy for all
    attribute access apart from method 'write()', which is delegated to our
    Converter instance.
  summary: Wraps a stream (such as stdout), acting as a transparent proxy for all
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: converter
    default: null
    rest: false
  - type: StreamWrapper
  inherits_from: null
- name: StreamWrapper.closed
  kind: property
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StreamWrapper.isatty
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StreamWrapper.write
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: text
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Style
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WinColor
  kind: class
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: WinColor
  inherits_from: null
- name: WinColor.BLACK
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinColor.BLUE
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinColor.CYAN
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinColor.GREEN
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinColor.GREY
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinColor.MAGENTA
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinColor.RED
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinColor.YELLOW
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinStyle
  kind: class
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: WinStyle
  inherits_from: null
- name: WinStyle.BRIGHT
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinStyle.BRIGHT_BACKGROUND
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinStyle.NORMAL
  kind: property
  ns: colorama
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: WinTerm
  kind: class
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: WinTerm
  inherits_from: null
- name: WinTerm.back
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: back
    default: None
    rest: false
  - kind: positional
    name: light
    default: 'False'
    rest: false
  - kind: positional
    name: on_stderr
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.cursor_adjust
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: x
    default: null
    rest: false
  - kind: positional
    name: y
    default: null
    rest: false
  - kind: positional
    name: on_stderr
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.erase_line
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: mode
    default: '0'
    rest: false
  - kind: positional
    name: on_stderr
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.erase_screen
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: mode
    default: '0'
    rest: false
  - kind: positional
    name: on_stderr
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.fore
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: fore
    default: None
    rest: false
  - kind: positional
    name: light
    default: 'False'
    rest: false
  - kind: positional
    name: on_stderr
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.get_attrs
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.get_position
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: handle
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.reset_all
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: on_stderr
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.set_attrs
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.set_console
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: attrs
    default: None
    rest: false
  - kind: positional
    name: on_stderr
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.set_cursor_position
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: position
    default: None
    rest: false
  - kind: positional
    name: on_stderr
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.set_title
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: title
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: WinTerm.style
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: style
    default: None
    rest: false
  - kind: positional
    name: on_stderr
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: enable_vt_processing
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: fd
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: winapi_test
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: windll
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: winterm
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: colorama_text
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: deinit
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: init
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: autoreset
    default: 'False'
    rest: false
  - kind: positional
    name: convert
    default: None
    rest: false
  - kind: positional
    name: strip
    default: None
    rest: false
  - kind: positional
    name: wrap
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: initialise
  kind: module
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: atexit_done
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: colorama_text
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: deinit
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: fixed_windows_console
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: init
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: autoreset
    default: 'False'
    rest: false
  - kind: positional
    name: convert
    default: None
    rest: false
  - kind: positional
    name: strip
    default: None
    rest: false
  - kind: positional
    name: wrap
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: just_fix_windows_console
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: orig_stderr
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: orig_stdout
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: reinit
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: reset_all
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: wrap_stream
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: stream
    default: null
    rest: false
  - kind: positional
    name: convert
    default: null
    rest: false
  - kind: positional
    name: strip
    default: null
    rest: false
  - kind: positional
    name: autoreset
    default: null
    rest: false
  - kind: positional
    name: wrap
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: wrapped_stderr
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: wrapped_stdout
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: just_fix_windows_console
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: reinit
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: win32
  kind: module
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ENABLE_VIRTUAL_TERMINAL_PROCESSING
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LibraryLoader
  kind: class
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: dlltype
    default: null
    rest: false
  - type: LibraryLoader
  inherits_from: null
- name: LibraryLoader.LoadLibrary
  kind: method
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: STDERR
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: STDOUT
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SetConsoleTextAttribute
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: winapi_test
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: windll
  kind: const
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: winterm
  kind: module
  ns: colorama
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: enable_vt_processing
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: fd
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: get_osfhandle
  kind: function
  ns: colorama
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: _
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: colorama.ansi
  kind: module
  ns: null
  description: |-
    This module generates ANSI character codes to printing colors to terminals.
    See: http://en.wikipedia.org/wiki/ANSI_escape_code
  summary: This module generates ANSI character codes to printing colors to terminals
  signatures: null
  inherits_from: null
- name: BEL
  kind: const
  ns: colorama.ansi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Back
  kind: const
  ns: colorama.ansi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CSI
  kind: const
  ns: colorama.ansi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Cursor
  kind: const
  ns: colorama.ansi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Fore
  kind: const
  ns: colorama.ansi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: OSC
  kind: const
  ns: colorama.ansi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Style
  kind: const
  ns: colorama.ansi
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: clear_line
  kind: function
  ns: colorama.ansi
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: mode
    default: '2'
    rest: false
  - type: '?'
  inherits_from: null
- name: clear_screen
  kind: function
  ns: colorama.ansi
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: mode
    default: '2'
    rest: false
  - type: '?'
  inherits_from: null
- name: code_to_chars
  kind: function
  ns: colorama.ansi
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: code
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: set_title
  kind: function
  ns: colorama.ansi
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: title
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: colorama.ansitowin32
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BEL
  kind: const
  ns: colorama.ansitowin32
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Style
  kind: const
  ns: colorama.ansitowin32
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: enable_vt_processing
  kind: function
  ns: colorama.ansitowin32
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: fd
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: winapi_test
  kind: function
  ns: colorama.ansitowin32
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: windll
  kind: const
  ns: colorama.ansitowin32
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: winterm
  kind: const
  ns: colorama.ansitowin32
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: colorama.initialise
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: atexit_done
  kind: const
  ns: colorama.initialise
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: colorama_text
  kind: function
  ns: colorama.initialise
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: deinit
  kind: function
  ns: colorama.initialise
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: fixed_windows_console
  kind: const
  ns: colorama.initialise
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: init
  kind: function
  ns: colorama.initialise
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: autoreset
    default: 'False'
    rest: false
  - kind: positional
    name: convert
    default: None
    rest: false
  - kind: positional
    name: strip
    default: None
    rest: false
  - kind: positional
    name: wrap
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: just_fix_windows_console
  kind: function
  ns: colorama.initialise
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: orig_stderr
  kind: const
  ns: colorama.initialise
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: orig_stdout
  kind: const
  ns: colorama.initialise
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: reinit
  kind: function
  ns: colorama.initialise
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: reset_all
  kind: function
  ns: colorama.initialise
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: wrap_stream
  kind: function
  ns: colorama.initialise
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: stream
    default: null
    rest: false
  - kind: positional
    name: convert
    default: null
    rest: false
  - kind: positional
    name: strip
    default: null
    rest: false
  - kind: positional
    name: autoreset
    default: null
    rest: false
  - kind: positional
    name: wrap
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: wrapped_stderr
  kind: const
  ns: colorama.initialise
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: wrapped_stdout
  kind: const
  ns: colorama.initialise
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: colorama.tests
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: colorama.win32
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ENABLE_VIRTUAL_TERMINAL_PROCESSING
  kind: const
  ns: colorama.win32
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: STDERR
  kind: const
  ns: colorama.win32
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: STDOUT
  kind: const
  ns: colorama.win32
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SetConsoleTextAttribute
  kind: function
  ns: colorama.win32
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: winapi_test
  kind: function
  ns: colorama.win32
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: windll
  kind: const
  ns: colorama.win32
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: colorama.winterm
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: enable_vt_processing
  kind: function
  ns: colorama.winterm
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: fd
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: get_osfhandle
  kind: function
  ns: colorama.winterm
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: _
    default: null
    rest: false
  - type: '?'
  inherits_from: null
