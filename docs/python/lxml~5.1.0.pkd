---
name: lxml
text_format: rst
generator: src:python
generator_command: src:python use "lxml"
version: 5.1.0
summary: Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API.
description: |+
  lxml is a Pythonic, mature binding for the libxml2 and libxslt libraries.  It
  provides safe and convenient access to these libraries using the ElementTree
  API.

  It extends the ElementTree API significantly to offer support for XPath,
  RelaxNG, XML Schema, XSLT, C14N and much more.

  To contact the project, go to the `project home page
  <https://lxml.de/>`_ or see our bug tracker at
  https://launchpad.net/lxml

  In case you want to use the current in-development version of lxml,
  you can get it from the github repository at
  https://github.com/lxml/lxml .  Note that this requires Cython to
  build the sources, see the build instructions on the project home
  page.  To the same end, running ``easy_install lxml==dev`` will
  install lxml from
  https://github.com/lxml/lxml/tarball/master#egg=lxml-dev if you have
  an appropriate version of Cython installed.


  After an official release of a new stable series, bug fixes may become
  available at
  https://github.com/lxml/lxml/tree/lxml-5.1 .
  Running ``easy_install lxml==5.1bugfix`` will install
  the unreleased branch state from
  https://github.com/lxml/lxml/tarball/lxml-5.1#egg=lxml-5.1bugfix
  as soon as a maintenance branch has been established.  Note that this
  requires Cython to be installed at an appropriate version for the build.

  5.1.0 (2024-01-05)
  ==================

  Features added
  --------------

  * Parsing ASCII strings is slightly faster.

  Bugs fixed
  ----------

  * GH#349: The HTML ``Cleaner()`` interpreted an accidentally provided string parameter
    for the ``host_whitelist`` as list of characters and silently failed to reject any hosts.
    Passing a non-collection is now rejected.

  Other changes
  -------------

  * Support for Python 2.7 and Python versions < 3.6 was removed.

  * The wheel build was migrated to use ``cibuildwheel``.
    Patch by PrimoÅ¾ Godec.


homepage: https://lxml.de/
license: BSD-3-Clause

---
- name: lxml
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_include
  kind: function
  ns: lxml
  description: |-
    Returns a list of header include paths (for lxml itself, libxml2
    and libxslt) needed to compile C code against lxml if it was built
    with statically linked libraries.
  summary: Returns a list of header include paths (for lxml itself, libxml2
  signatures:
  - type: '?'
  inherits_from: null
- name: lxml.ElementInclude
  kind: module
  ns: null
  description: |-
    Limited XInclude support for the ElementTree package.

    While lxml.etree has full support for XInclude (see
    `etree.ElementTree.xinclude()`), this module provides a simpler, pure
    Python, ElementTree compatible implementation that supports a simple
    form of custom URL resolvers.
  summary: Limited XInclude support for the ElementTree package
  signatures: null
  inherits_from: null
- name: DEFAULT_MAX_INCLUSION_DEPTH
  kind: const
  ns: lxml.ElementInclude
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FatalIncludeError
  kind: class
  ns: lxml.ElementInclude
  description: "Base class for all syntax errors.\n    "
  summary: Base class for all syntax errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlSyntaxError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'SyntaxError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FatalIncludeError.add_note
  kind: callable
  ns: lxml.ElementInclude
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FatalIncludeError.args
  kind: property
  ns: lxml.ElementInclude
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FatalIncludeError.end_lineno
  kind: property
  ns: lxml.ElementInclude
  description: exception end lineno
  summary: exception end lineno
  signatures: null
  inherits_from: null
- name: FatalIncludeError.end_offset
  kind: property
  ns: lxml.ElementInclude
  description: exception end offset
  summary: exception end offset
  signatures: null
  inherits_from: null
- name: FatalIncludeError.filename
  kind: property
  ns: lxml.ElementInclude
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: FatalIncludeError.lineno
  kind: property
  ns: lxml.ElementInclude
  description: exception lineno
  summary: exception lineno
  signatures: null
  inherits_from: null
- name: FatalIncludeError.msg
  kind: property
  ns: lxml.ElementInclude
  description: exception msg
  summary: exception msg
  signatures: null
  inherits_from: null
- name: FatalIncludeError.offset
  kind: property
  ns: lxml.ElementInclude
  description: exception offset
  summary: exception offset
  signatures: null
  inherits_from: null
- name: FatalIncludeError.print_file_and_line
  kind: property
  ns: lxml.ElementInclude
  description: exception print_file_and_line
  summary: exception print_file_and_line
  signatures: null
  inherits_from: null
- name: FatalIncludeError.text
  kind: property
  ns: lxml.ElementInclude
  description: exception text
  summary: exception text
  signatures: null
  inherits_from: null
- name: FatalIncludeError.with_traceback
  kind: callable
  ns: lxml.ElementInclude
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError
  kind: class
  ns: lxml.ElementInclude
  description: "Base class for all syntax errors.\n    "
  summary: Base class for all syntax errors
  signatures: null
  inherits_from:
  - <class 'lxml.ElementInclude.FatalIncludeError'>
  - <class 'lxml.etree.LxmlSyntaxError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'SyntaxError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: LimitedRecursiveIncludeError.add_note
  kind: callable
  ns: lxml.ElementInclude
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.args
  kind: property
  ns: lxml.ElementInclude
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.end_lineno
  kind: property
  ns: lxml.ElementInclude
  description: exception end lineno
  summary: exception end lineno
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.end_offset
  kind: property
  ns: lxml.ElementInclude
  description: exception end offset
  summary: exception end offset
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.filename
  kind: property
  ns: lxml.ElementInclude
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.lineno
  kind: property
  ns: lxml.ElementInclude
  description: exception lineno
  summary: exception lineno
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.msg
  kind: property
  ns: lxml.ElementInclude
  description: exception msg
  summary: exception msg
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.offset
  kind: property
  ns: lxml.ElementInclude
  description: exception offset
  summary: exception offset
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.print_file_and_line
  kind: property
  ns: lxml.ElementInclude
  description: exception print_file_and_line
  summary: exception print_file_and_line
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.text
  kind: property
  ns: lxml.ElementInclude
  description: exception text
  summary: exception text
  signatures: null
  inherits_from: null
- name: LimitedRecursiveIncludeError.with_traceback
  kind: callable
  ns: lxml.ElementInclude
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XINCLUDE
  kind: const
  ns: lxml.ElementInclude
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XINCLUDE_FALLBACK
  kind: const
  ns: lxml.ElementInclude
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XINCLUDE_INCLUDE
  kind: const
  ns: lxml.ElementInclude
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XINCLUDE_ITER_TAG
  kind: const
  ns: lxml.ElementInclude
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: default_loader
  kind: function
  ns: lxml.ElementInclude
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: href
    default: null
    rest: false
  - kind: positional
    name: parse
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: include
  kind: function
  ns: lxml.ElementInclude
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: elem
    default: null
    rest: false
  - kind: positional
    name: loader
    default: None
    rest: false
  - kind: positional
    name: base_url
    default: None
    rest: false
  - kind: positional
    name: max_depth
    default: '6'
    rest: false
  - type: '?'
  inherits_from: null
- name: urljoin
  kind: function
  ns: lxml.ElementInclude
  description: |-
    Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter.
  summary: Join a base URL and a possibly relative URL to form an absolute
  signatures:
  - kind: positional
    name: base
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: allow_fragments
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: urlopen
  kind: function
  ns: lxml.ElementInclude
  description: |-
    Open the URL url, which can be either a string or a Request object.

    *data* must be an object specifying additional data to be sent to
    the server, or None if no such data is needed.  See Request for
    details.

    urllib.request module uses HTTP/1.1 and includes a "Connection:close"
    header in its HTTP requests.

    The optional *timeout* parameter specifies a timeout in seconds for
    blocking operations like the connection attempt (if not specified, the
    global default timeout setting will be used). This only works for HTTP,
    HTTPS and FTP connections.

    If *context* is specified, it must be a ssl.SSLContext instance describing
    the various SSL options. See HTTPSConnection for more details.

    The optional *cafile* and *capath* parameters specify a set of trusted CA
    certificates for HTTPS requests. cafile should point to a single file
    containing a bundle of CA certificates, whereas capath should point to a
    directory of hashed certificate files. More information can be found in
    ssl.SSLContext.load_verify_locations().

    The *cadefault* parameter is ignored.


    This function always returns an object which can work as a
    context manager and has the properties url, headers, and status.
    See urllib.response.addinfourl for more detail on these properties.

    For HTTP and HTTPS URLs, this function returns a http.client.HTTPResponse
    object slightly modified. In addition to the three new methods above, the
    msg attribute contains the same information as the reason attribute ---
    the reason phrase returned by the server --- instead of the response
    headers as it is specified in the documentation for HTTPResponse.

    For FTP, file, and data URLs and requests explicitly handled by legacy
    URLopener and FancyURLopener classes, this function returns a
    urllib.response.addinfourl object.

    Note that None may be returned if no handler handles the request (though
    the default installed global OpenerDirector uses UnknownHandler to ensure
    this never happens).

    In addition, if proxy settings are detected (for example, when a *_proxy
    environment variable like http_proxy is set), ProxyHandler is default
    installed and makes sure the requests are handled through the proxy.
  summary: Open the URL url, which can be either a string or a Request object
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: data
    default: None
    rest: false
  - kind: positional
    name: timeout
    default: <object object at 0x7f51b2d88830>
    rest: false
  - name: cafile
    default: None
    rest: false
    kind: kw-only
  - name: capath
    default: None
    rest: false
    kind: kw-only
  - name: cadefault
    default: 'False'
    rest: false
    kind: kw-only
  - name: context
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: lxml.builder
  kind: module
  ns: null
  description: The ``E`` Element factory for generating XML documents.
  summary: The ``E`` Element factory for generating XML documents
  signatures: null
  inherits_from: null
- name: E
  kind: callable
  ns: lxml.builder
  description: |-
    Element generator factory.

    Unlike the ordinary Element factory, the E factory allows you to pass in
    more than just a tag and some optional attributes; you can also pass in
    text and other elements.  The text is added as either text or tail
    attributes, and elements are inserted at the right spot.  Some small
    examples::

        >>> from lxml import etree as ET
        >>> from lxml.builder import E

        >>> ET.tostring(E("tag"))
        '<tag/>'
        >>> ET.tostring(E("tag", "text"))
        '<tag>text</tag>'
        >>> ET.tostring(E("tag", "text", key="value"))
        '<tag key="value">text</tag>'
        >>> ET.tostring(E("tag", E("subtag", "text"), "tail"))
        '<tag><subtag>text</subtag>tail</tag>'

    For simple tags, the factory also allows you to write ``E.tag(...)`` instead
    of ``E('tag', ...)``::

        >>> ET.tostring(E.tag())
        '<tag/>'
        >>> ET.tostring(E.tag("text"))
        '<tag>text</tag>'
        >>> ET.tostring(E.tag(E.subtag("text"), "tail"))
        '<tag><subtag>text</subtag>tail</tag>'

    Here's a somewhat larger example; this shows how to generate HTML
    documents, using a mix of prepared factory functions for inline elements,
    nested ``E.tag`` calls, and embedded XHTML fragments::

        # some common inline elements
        A = E.a
        I = E.i
        B = E.b

        def CLASS(v):
            # helper function, 'class' is a reserved word
            return {'class': v}

        page = (
            E.html(
                E.head(
                    E.title("This is a sample document")
                ),
                E.body(
                    E.h1("Hello!", CLASS("title")),
                    E.p("This is a paragraph with ", B("bold"), " text in it!"),
                    E.p("This is another paragraph, with a ",
                        A("link", href="http://www.python.org"), "."),
                    E.p("Here are some reserved characters: <spam&egg>."),
                    ET.XML("<p>And finally, here is an embedded XHTML fragment.</p>"),
                )
            )
        )

        print ET.tostring(page)

    Here's a prettyprinted version of the output from the above script::

        <html>
          <head>
            <title>This is a sample document</title>
          </head>
          <body>
            <h1 class="title">Hello!</h1>
            <p>This is a paragraph with <b>bold</b> text in it!</p>
            <p>This is another paragraph, with <a href="http://www.python.org">link</a>.</p>
            <p>Here are some reserved characters: &lt;spam&amp;egg&gt;.</p>
            <p>And finally, here is an embedded XHTML fragment.</p>
          </body>
        </html>

    For namespace support, you can pass a namespace map (``nsmap``)
    and/or a specific target ``namespace`` to the ElementMaker class::

        >>> E = ElementMaker(namespace="http://my.ns/")
        >>> print(ET.tostring( E.test ))
        <test xmlns="http://my.ns/"/>

        >>> E = ElementMaker(namespace="http://my.ns/", nsmap={'p':'http://my.ns/'})
        >>> print(ET.tostring( E.test ))
        <p:test xmlns:p="http://my.ns/"/>
  summary: Element generator factory
  signatures: null
  inherits_from: null
- name: ElementMaker
  kind: class
  ns: lxml.builder
  description: |-
    Element generator factory.

    Unlike the ordinary Element factory, the E factory allows you to pass in
    more than just a tag and some optional attributes; you can also pass in
    text and other elements.  The text is added as either text or tail
    attributes, and elements are inserted at the right spot.  Some small
    examples::

        >>> from lxml import etree as ET
        >>> from lxml.builder import E

        >>> ET.tostring(E("tag"))
        '<tag/>'
        >>> ET.tostring(E("tag", "text"))
        '<tag>text</tag>'
        >>> ET.tostring(E("tag", "text", key="value"))
        '<tag key="value">text</tag>'
        >>> ET.tostring(E("tag", E("subtag", "text"), "tail"))
        '<tag><subtag>text</subtag>tail</tag>'

    For simple tags, the factory also allows you to write ``E.tag(...)`` instead
    of ``E('tag', ...)``::

        >>> ET.tostring(E.tag())
        '<tag/>'
        >>> ET.tostring(E.tag("text"))
        '<tag>text</tag>'
        >>> ET.tostring(E.tag(E.subtag("text"), "tail"))
        '<tag><subtag>text</subtag>tail</tag>'

    Here's a somewhat larger example; this shows how to generate HTML
    documents, using a mix of prepared factory functions for inline elements,
    nested ``E.tag`` calls, and embedded XHTML fragments::

        # some common inline elements
        A = E.a
        I = E.i
        B = E.b

        def CLASS(v):
            # helper function, 'class' is a reserved word
            return {'class': v}

        page = (
            E.html(
                E.head(
                    E.title("This is a sample document")
                ),
                E.body(
                    E.h1("Hello!", CLASS("title")),
                    E.p("This is a paragraph with ", B("bold"), " text in it!"),
                    E.p("This is another paragraph, with a ",
                        A("link", href="http://www.python.org"), "."),
                    E.p("Here are some reserved characters: <spam&egg>."),
                    ET.XML("<p>And finally, here is an embedded XHTML fragment.</p>"),
                )
            )
        )

        print ET.tostring(page)

    Here's a prettyprinted version of the output from the above script::

        <html>
          <head>
            <title>This is a sample document</title>
          </head>
          <body>
            <h1 class="title">Hello!</h1>
            <p>This is a paragraph with <b>bold</b> text in it!</p>
            <p>This is another paragraph, with <a href="http://www.python.org">link</a>.</p>
            <p>Here are some reserved characters: &lt;spam&amp;egg&gt;.</p>
            <p>And finally, here is an embedded XHTML fragment.</p>
          </body>
        </html>

    For namespace support, you can pass a namespace map (``nsmap``)
    and/or a specific target ``namespace`` to the ElementMaker class::

        >>> E = ElementMaker(namespace="http://my.ns/")
        >>> print(ET.tostring( E.test ))
        <test xmlns="http://my.ns/"/>

        >>> E = ElementMaker(namespace="http://my.ns/", nsmap={'p':'http://my.ns/'})
        >>> print(ET.tostring( E.test ))
        <p:test xmlns:p="http://my.ns/"/>
  summary: Element generator factory
  signatures: null
  inherits_from: null
- name: basestring
  kind: class
  ns: lxml.builder
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: basestring.capitalize
  kind: callable
  ns: lxml.builder
  description: |-
    Return a capitalized version of the string.

    More specifically, make the first character have upper case and the rest lower
    case.
  summary: Return a capitalized version of the string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.casefold
  kind: callable
  ns: lxml.builder
  description: Return a version of the string suitable for caseless comparisons.
  summary: Return a version of the string suitable for caseless comparisons
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.center
  kind: callable
  ns: lxml.builder
  description: |-
    Return a centered string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a centered string of length width
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: width
    default: null
    rest: false
  - kind: positional
    name: fillchar
    default: ' '
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.count
  kind: callable
  ns: lxml.builder
  description: |-
    S.count(sub[, start[, end]]) -> int

    Return the number of non-overlapping occurrences of substring sub in
    string S[start:end].  Optional arguments start and end are
    interpreted as in slice notation.
  summary: S
  signatures: null
  inherits_from: null
- name: basestring.encode
  kind: callable
  ns: lxml.builder
  description: |-
    Encode the string using the codec registered for encoding.

    encoding
      The encoding in which to encode the string.
    errors
      The error handling scheme to use for encoding errors.
      The default is 'strict' meaning that encoding errors raise a
      UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
      'xmlcharrefreplace' as well as any other name registered with
      codecs.register_error that can handle UnicodeEncodeErrors.
  summary: Encode the string using the codec registered for encoding
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: utf-8
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.endswith
  kind: callable
  ns: lxml.builder
  description: |-
    S.endswith(suffix[, start[, end]]) -> bool

    Return True if S ends with the specified suffix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    suffix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: basestring.expandtabs
  kind: callable
  ns: lxml.builder
  description: |-
    Return a copy where all tab characters are expanded using spaces.

    If tabsize is not given, a tab size of 8 characters is assumed.
  summary: Return a copy where all tab characters are expanded using spaces
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tabsize
    default: '8'
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.find
  kind: callable
  ns: lxml.builder
  description: |-
    S.find(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: basestring.format
  kind: callable
  ns: lxml.builder
  description: |-
    S.format(*args, **kwargs) -> str

    Return a formatted version of S, using substitutions from args and kwargs.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: basestring.format_map
  kind: callable
  ns: lxml.builder
  description: |-
    S.format_map(mapping) -> str

    Return a formatted version of S, using substitutions from mapping.
    The substitutions are identified by braces ('{' and '}').
  summary: S
  signatures: null
  inherits_from: null
- name: basestring.index
  kind: callable
  ns: lxml.builder
  description: |-
    S.index(sub[, start[, end]]) -> int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: basestring.isalnum
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is an alpha-numeric string, False otherwise.

    A string is alpha-numeric if all characters in the string are alpha-numeric and
    there is at least one character in the string.
  summary: Return True if the string is an alpha-numeric string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.isalpha
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is an alphabetic string, False otherwise.

    A string is alphabetic if all characters in the string are alphabetic and there
    is at least one character in the string.
  summary: Return True if the string is an alphabetic string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.isascii
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if all characters in the string are ASCII, False otherwise.

    ASCII characters have code points in the range U+0000-U+007F.
    Empty string is ASCII too.
  summary: Return True if all characters in the string are ASCII, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.isdecimal
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is a decimal string, False otherwise.

    A string is a decimal string if all characters in the string are decimal and
    there is at least one character in the string.
  summary: Return True if the string is a decimal string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.isdigit
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is a digit string, False otherwise.

    A string is a digit string if all characters in the string are digits and there
    is at least one character in the string.
  summary: Return True if the string is a digit string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.isidentifier
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is a valid Python identifier, False otherwise.

    Call keyword.iskeyword(s) to test whether string s is a reserved identifier,
    such as "def" or "class".
  summary: Return True if the string is a valid Python identifier, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.islower
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is a lowercase string, False otherwise.

    A string is lowercase if all cased characters in the string are lowercase and
    there is at least one cased character in the string.
  summary: Return True if the string is a lowercase string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.isnumeric
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is a numeric string, False otherwise.

    A string is numeric if all characters in the string are numeric and there is at
    least one character in the string.
  summary: Return True if the string is a numeric string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.isprintable
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is printable, False otherwise.

    A string is printable if all of its characters are considered printable in
    repr() or if it is empty.
  summary: Return True if the string is printable, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.isspace
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is a whitespace string, False otherwise.

    A string is whitespace if all characters in the string are whitespace and there
    is at least one character in the string.
  summary: Return True if the string is a whitespace string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.istitle
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is a title-cased string, False otherwise.

    In a title-cased string, upper- and title-case characters may only
    follow uncased characters and lowercase characters only cased ones.
  summary: Return True if the string is a title-cased string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.isupper
  kind: callable
  ns: lxml.builder
  description: |-
    Return True if the string is an uppercase string, False otherwise.

    A string is uppercase if all cased characters in the string are uppercase and
    there is at least one cased character in the string.
  summary: Return True if the string is an uppercase string, False otherwise
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.join
  kind: callable
  ns: lxml.builder
  description: |-
    Concatenate any number of strings.

    The string whose method is called is inserted in between each given string.
    The result is returned as a new string.

    Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
  summary: Concatenate any number of strings
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: iterable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.ljust
  kind: callable
  ns: lxml.builder
  description: |-
    Return a left-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a left-justified string of length width
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: width
    default: null
    rest: false
  - kind: positional
    name: fillchar
    default: ' '
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.lower
  kind: callable
  ns: lxml.builder
  description: Return a copy of the string converted to lowercase.
  summary: Return a copy of the string converted to lowercase
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.lstrip
  kind: callable
  ns: lxml.builder
  description: |-
    Return a copy of the string with leading whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading whitespace removed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: chars
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.partition
  kind: callable
  ns: lxml.builder
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string.  If the separator is found,
    returns a 3-tuple containing the part before the separator, the separator
    itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing the original string
    and two empty strings.
  summary: Partition the string into three parts using the given separator
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sep
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.removeprefix
  kind: callable
  ns: lxml.builder
  description: |-
    Return a str with the given prefix string removed if present.

    If the string starts with the prefix string, return string[len(prefix):].
    Otherwise, return a copy of the original string.
  summary: Return a str with the given prefix string removed if present
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.removesuffix
  kind: callable
  ns: lxml.builder
  description: |-
    Return a str with the given suffix string removed if present.

    If the string ends with the suffix string and that suffix is not empty,
    return string[:-len(suffix)]. Otherwise, return a copy of the original
    string.
  summary: Return a str with the given suffix string removed if present
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: suffix
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.replace
  kind: callable
  ns: lxml.builder
  description: |-
    Return a copy with all occurrences of substring old replaced by new.

      count
        Maximum number of occurrences to replace.
        -1 (the default value) means replace all occurrences.

    If the optional argument count is given, only the first count occurrences are
    replaced.
  summary: Return a copy with all occurrences of substring old replaced by new
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old
    default: null
    rest: false
  - kind: positional
    name: new
    default: null
    rest: false
  - kind: positional
    name: count
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.rfind
  kind: callable
  ns: lxml.builder
  description: |-
    S.rfind(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
  summary: S
  signatures: null
  inherits_from: null
- name: basestring.rindex
  kind: callable
  ns: lxml.builder
  description: |-
    S.rindex(sub[, start[, end]]) -> int

    Return the highest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Raises ValueError when the substring is not found.
  summary: S
  signatures: null
  inherits_from: null
- name: basestring.rjust
  kind: callable
  ns: lxml.builder
  description: |-
    Return a right-justified string of length width.

    Padding is done using the specified fill character (default is a space).
  summary: Return a right-justified string of length width
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: width
    default: null
    rest: false
  - kind: positional
    name: fillchar
    default: ' '
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.rpartition
  kind: callable
  ns: lxml.builder
  description: |-
    Partition the string into three parts using the given separator.

    This will search for the separator in the string, starting at the end. If
    the separator is found, returns a 3-tuple containing the part before the
    separator, the separator itself, and the part after it.

    If the separator is not found, returns a 3-tuple containing two empty strings
    and the original string.
  summary: Partition the string into three parts using the given separator
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sep
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.rsplit
  kind: callable
  ns: lxml.builder
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the end of the string and works to the front.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sep
    default: None
    rest: false
  - kind: positional
    name: maxsplit
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.rstrip
  kind: callable
  ns: lxml.builder
  description: |-
    Return a copy of the string with trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with trailing whitespace removed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: chars
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.split
  kind: callable
  ns: lxml.builder
  description: |-
    Return a list of the substrings in the string, using sep as the separator string.

      sep
        The separator used to split the string.

        When set to None (the default value), will split on any whitespace
        character (including \n \r \t \f and spaces) and will discard
        empty strings from the result.
      maxsplit
        Maximum number of splits.
        -1 (the default value) means no limit.

    Splitting starts at the front of the string and works to the end.

    Note, str.split() is mainly useful for data that has been intentionally
    delimited.  With natural text that includes punctuation, consider using
    the regular expression module.
  summary: Return a list of the substrings in the string, using sep as the separator string
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sep
    default: None
    rest: false
  - kind: positional
    name: maxsplit
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.splitlines
  kind: callable
  ns: lxml.builder
  description: |-
    Return a list of the lines in the string, breaking at line boundaries.

    Line breaks are not included in the resulting list unless keepends is given and
    true.
  summary: Return a list of the lines in the string, breaking at line boundaries
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keepends
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.startswith
  kind: callable
  ns: lxml.builder
  description: |-
    S.startswith(prefix[, start[, end]]) -> bool

    Return True if S starts with the specified prefix, False otherwise.
    With optional start, test S beginning at that position.
    With optional end, stop comparing S at that position.
    prefix can also be a tuple of strings to try.
  summary: S
  signatures: null
  inherits_from: null
- name: basestring.strip
  kind: callable
  ns: lxml.builder
  description: |-
    Return a copy of the string with leading and trailing whitespace removed.

    If chars is given and not None, remove characters in chars instead.
  summary: Return a copy of the string with leading and trailing whitespace removed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: chars
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.swapcase
  kind: callable
  ns: lxml.builder
  description: Convert uppercase characters to lowercase and lowercase characters to uppercase.
  summary: Convert uppercase characters to lowercase and lowercase characters to uppercase
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.title
  kind: callable
  ns: lxml.builder
  description: |-
    Return a version of the string where each word is titlecased.

    More specifically, words start with uppercased characters and all remaining
    cased characters have lower case.
  summary: Return a version of the string where each word is titlecased
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.translate
  kind: callable
  ns: lxml.builder
  description: |-
    Replace each character in the string using the given translation table.

      table
        Translation table, which must be a mapping of Unicode ordinals to
        Unicode ordinals, strings, or None.

    The table must implement lookup/indexing via __getitem__, for instance a
    dictionary or list.  If this operation raises LookupError, the character is
    left untouched.  Characters mapped to None are deleted.
  summary: Replace each character in the string using the given translation table
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: table
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.upper
  kind: callable
  ns: lxml.builder
  description: Return a copy of the string converted to uppercase.
  summary: Return a copy of the string converted to uppercase
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: basestring.zfill
  kind: callable
  ns: lxml.builder
  description: |-
    Pad a numeric string with zeros on the left, to fill a field of the given width.

    The string is never truncated.
  summary: Pad a numeric string with zeros on the left, to fill a field of the given width
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: width
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: lxml.cssselect
  kind: module
  ns: null
  description: |-
    CSS Selectors based on XPath.

    This module supports selecting XML/HTML tags based on CSS selectors.
    See the `CSSSelector` class for details.

    This is a thin wrapper around cssselect 0.7 or later.
  summary: CSS Selectors based on XPath
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError
  kind: class
  ns: lxml.cssselect
  description: Parsing a selector that does not match the grammar.
  summary: Parsing a selector that does not match the grammar
  signatures: null
  inherits_from:
  - <class 'cssselect.parser.SelectorError'>
  - <class 'SyntaxError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SelectorSyntaxError.add_note
  kind: callable
  ns: lxml.cssselect
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.args
  kind: property
  ns: lxml.cssselect
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.end_lineno
  kind: property
  ns: lxml.cssselect
  description: exception end lineno
  summary: exception end lineno
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.end_offset
  kind: property
  ns: lxml.cssselect
  description: exception end offset
  summary: exception end offset
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.filename
  kind: property
  ns: lxml.cssselect
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.lineno
  kind: property
  ns: lxml.cssselect
  description: exception lineno
  summary: exception lineno
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.msg
  kind: property
  ns: lxml.cssselect
  description: exception msg
  summary: exception msg
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.offset
  kind: property
  ns: lxml.cssselect
  description: exception offset
  summary: exception offset
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.print_file_and_line
  kind: property
  ns: lxml.cssselect
  description: exception print_file_and_line
  summary: exception print_file_and_line
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.text
  kind: property
  ns: lxml.cssselect
  description: exception text
  summary: exception text
  signatures: null
  inherits_from: null
- name: SelectorSyntaxError.with_traceback
  kind: callable
  ns: lxml.cssselect
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ExpressionError
  kind: class
  ns: lxml.cssselect
  description: Unknown or unsupported selector (eg. pseudo-class).
  summary: Unknown or unsupported selector (eg
  signatures: null
  inherits_from:
  - <class 'cssselect.parser.SelectorError'>
  - <class 'RuntimeError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ExpressionError.add_note
  kind: callable
  ns: lxml.cssselect
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ExpressionError.args
  kind: property
  ns: lxml.cssselect
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ExpressionError.with_traceback
  kind: callable
  ns: lxml.cssselect
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SelectorError
  kind: class
  ns: lxml.cssselect
  description: |-
    Common parent for :class:`SelectorSyntaxError` and
    :class:`ExpressionError`.

    You can just use ``except SelectorError:`` when calling
    :meth:`~GenericTranslator.css_to_xpath` and handle both exceptions types.
  summary: Common parent for :class:`SelectorSyntaxError` and
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SelectorError.add_note
  kind: callable
  ns: lxml.cssselect
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SelectorError.args
  kind: property
  ns: lxml.cssselect
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SelectorError.with_traceback
  kind: callable
  ns: lxml.cssselect
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: CSSSelector
  kind: class
  ns: lxml.cssselect
  description: |-
    A CSS selector.

    Usage::

        >>> from lxml import etree, cssselect
        >>> select = cssselect.CSSSelector("a tag > child")

        >>> root = etree.XML("<a><b><c/><tag><child>TEXT</child></tag></b></a>")
        >>> [ el.tag for el in select(root) ]
        ['child']

    To use CSS namespaces, you need to pass a prefix-to-namespace
    mapping as ``namespaces`` keyword argument::

        >>> rdfns = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'
        >>> select_ns = cssselect.CSSSelector('root > rdf|Description',
        ...                                   namespaces={'rdf': rdfns})

        >>> rdf = etree.XML((
        ...     '<root xmlns:rdf="%s">'
        ...       '<rdf:Description>blah</rdf:Description>'
        ...     '</root>') % rdfns)
        >>> [(el.tag, el.text) for el in select_ns(rdf)]
        [('{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Description', 'blah')]
  summary: A CSS selector
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: css
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - kind: positional
    name: translator
    default: xml
    rest: false
  - type: CSSSelector
  inherits_from:
  - <class 'lxml.etree.XPath'>
  - <class 'lxml.etree._XPathEvaluatorBase'>
- name: CSSSelector.error_log
  kind: property
  ns: lxml.cssselect
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CSSSelector.path
  kind: property
  ns: lxml.cssselect
  description: "The literal XPath expression.\n        "
  summary: The literal XPath expression
  signatures: null
  inherits_from: null
- name: lxml.doctestcompare
  kind: module
  ns: null
  description: |-
    lxml-based doctest output comparison.

    Note: normally, you should just import the `lxml.usedoctest` and
    `lxml.html.usedoctest` modules from within a doctest, instead of this
    one::

        >>> import lxml.usedoctest # for XML output

        >>> import lxml.html.usedoctest # for HTML output

    To use this module directly, you must call ``lxmldoctest.install()``,
    which will cause doctest to use this in all subsequent calls.

    This changes the way output is checked and comparisons are made for
    XML or HTML-like content.

    XML or HTML content is noticed because the example starts with ``<``
    (it's HTML if it starts with ``<html``).  You can also use the
    ``PARSE_HTML`` and ``PARSE_XML`` flags to force parsing.

    Some rough wildcard-like things are allowed.  Whitespace is generally
    ignored (except in attributes).  In text (attributes and text in the
    body) you can use ``...`` as a wildcard.  In an example it also
    matches any trailing tags in the element, though it does not match
    leading tags.  You may create a tag ``<any>`` or include an ``any``
    attribute in the tag.  An ``any`` tag matches any tag, while the
    attribute matches any and all attributes.

    When a match fails, the reformatted example and gotten text is
    displayed (indented), and a rough diff-like output is given.  Anything
    marked with ``+`` is in the output but wasn't supposed to be, and
    similarly ``-`` means its in the example but wasn't in the output.

    You can disable parsing on one line with ``# doctest:+NOPARSE_MARKUP``
  summary: lxml-based doctest output comparison
  signatures: null
  inherits_from: null
- name: PARSE_HTML
  kind: const
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PARSE_XML
  kind: const
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NOPARSE_MARKUP
  kind: const
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LXMLOutputChecker
  kind: class
  ns: lxml.doctestcompare
  description: |-
    A class used to check the whether the actual output from a doctest
    example matches the expected output.  `OutputChecker` defines two
    methods: `check_output`, which compares a given pair of outputs,
    and returns true if they match; and `output_difference`, which
    returns a string describing the differences between two outputs.
  summary: A class used to check the whether the actual output from a doctest
  signatures:
  - type: LXMLOutputChecker
  inherits_from:
  - <class 'doctest.OutputChecker'>
- name: LXMLOutputChecker.check_output
  kind: method
  ns: lxml.doctestcompare
  description: |-
    Return True iff the actual output from an example (`got`)
    matches the expected output (`want`).  These strings are
    always considered to match if they are identical; but
    depending on what option flags the test runner is using,
    several non-exact match types are also possible.  See the
    documentation for `TestRunner` for more information about
    option flags.
  summary: Return True iff the actual output from an example (`got`)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: optionflags
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.collect_diff
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: html
    default: null
    rest: false
  - kind: positional
    name: indent
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.collect_diff_end_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.collect_diff_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.collect_diff_text
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: strip
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.compare_docs
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.empty_tags
  kind: property
  ns: lxml.doctestcompare
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: LXMLOutputChecker.format_doc
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - kind: positional
    name: html
    default: null
    rest: false
  - kind: positional
    name: indent
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.format_end_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: el
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.format_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: el
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.format_text
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: strip
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.get_default_parser
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.get_parser
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: optionflags
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.html_empty_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: el
    default: null
    rest: false
  - kind: positional
    name: html
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.output_difference
  kind: method
  ns: lxml.doctestcompare
  description: |-
    Return a string describing the differences between the
    expected output for a given example (`example`) and the actual
    output (`got`).  `optionflags` is the set of option flags used
    to compare `want` and `got`.
  summary: Return a string describing the differences between the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: example
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: optionflags
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.tag_compare
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LXMLOutputChecker.text_compare
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: strip
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker
  kind: class
  ns: lxml.doctestcompare
  description: |-
    A class used to check the whether the actual output from a doctest
    example matches the expected output.  `OutputChecker` defines two
    methods: `check_output`, which compares a given pair of outputs,
    and returns true if they match; and `output_difference`, which
    returns a string describing the differences between two outputs.
  summary: A class used to check the whether the actual output from a doctest
  signatures:
  - type: LHTMLOutputChecker
  inherits_from:
  - <class 'lxml.doctestcompare.LXMLOutputChecker'>
  - <class 'doctest.OutputChecker'>
- name: LHTMLOutputChecker.check_output
  kind: method
  ns: lxml.doctestcompare
  description: |-
    Return True iff the actual output from an example (`got`)
    matches the expected output (`want`).  These strings are
    always considered to match if they are identical; but
    depending on what option flags the test runner is using,
    several non-exact match types are also possible.  See the
    documentation for `TestRunner` for more information about
    option flags.
  summary: Return True iff the actual output from an example (`got`)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: optionflags
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.collect_diff
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: html
    default: null
    rest: false
  - kind: positional
    name: indent
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.collect_diff_end_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.collect_diff_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.collect_diff_text
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: strip
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.compare_docs
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.empty_tags
  kind: property
  ns: lxml.doctestcompare
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: LHTMLOutputChecker.format_doc
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - kind: positional
    name: html
    default: null
    rest: false
  - kind: positional
    name: indent
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.format_end_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: el
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.format_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: el
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.format_text
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: strip
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.get_default_parser
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.get_parser
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: optionflags
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.html_empty_tag
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: el
    default: null
    rest: false
  - kind: positional
    name: html
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.output_difference
  kind: method
  ns: lxml.doctestcompare
  description: |-
    Return a string describing the differences between the
    expected output for a given example (`example`) and the actual
    output (`got`).  `optionflags` is the set of option flags used
    to compare `want` and `got`.
  summary: Return a string describing the differences between the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: example
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: optionflags
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.tag_compare
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LHTMLOutputChecker.text_compare
  kind: method
  ns: lxml.doctestcompare
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: want
    default: null
    rest: false
  - kind: positional
    name: got
    default: null
    rest: false
  - kind: positional
    name: strip
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: install
  kind: function
  ns: lxml.doctestcompare
  description: |-
    Install doctestcompare for all future doctests.

    If html is true, then by default the HTML parser will be used;
    otherwise the XML parser is used.
  summary: Install doctestcompare for all future doctests
  signatures:
  - kind: positional
    name: html
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: temp_install
  kind: function
  ns: lxml.doctestcompare
  description: |-
    Use this *inside* a doctest to enable this checker for this
    doctest only.

    If html is true, then by default the HTML parser will be used;
    otherwise the XML parser is used.
  summary: Use this *inside* a doctest to enable this checker for this
  signatures:
  - kind: positional
    name: html
    default: 'False'
    rest: false
  - kind: positional
    name: del_module
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: lxml.etree
  kind: module
  ns: null
  description: The ``lxml.etree`` module implements the extended ElementTree API for XML.
  summary: The ``lxml
  signatures: null
  inherits_from: null
- name: AttributeBasedElementClassLookup
  kind: class
  ns: lxml.etree
  description: |-
    AttributeBasedElementClassLookup(self, attribute_name, class_mapping, fallback=None)
    Checks an attribute of an Element and looks up the value in a
    class dictionary.

    Arguments:
      - attribute name - '{ns}name' style string
      - class mapping  - Python dict mapping attribute values to Element classes
      - fallback       - optional fallback lookup mechanism

    A None key in the class mapping will be checked if the attribute is
    missing.
  summary: AttributeBasedElementClassLookup(self, attribute_name, class_mapping, fallback=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.FallbackElementClassLookup'>
  - <class 'lxml.etree.ElementClassLookup'>
- name: AttributeBasedElementClassLookup.fallback
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: AttributeBasedElementClassLookup.set_fallback
  kind: callable
  ns: lxml.etree
  description: |-
    set_fallback(self, lookup)

    Sets the fallback scheme for this lookup method.
  summary: set_fallback(self, lookup)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: C14NError
  kind: class
  ns: lxml.etree
  description: "Error during C14N serialisation.\n    "
  summary: Error during C14N serialisation
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: C14NError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: C14NError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: C14NError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: C14NWriterTarget
  kind: class
  ns: lxml.etree
  description: |-
    Canonicalization writer target for the XMLParser.

    Serialises parse events to XML C14N 2.0.

    Configuration options:

    - *with_comments*: set to true to include comments
    - *strip_text*: set to true to strip whitespace before and after text content
    - *rewrite_prefixes*: set to true to replace namespace prefixes by "n{number}"
    - *qname_aware_tags*: a set of qname aware tag names in which prefixes
                          should be replaced in text content
    - *qname_aware_attrs*: a set of qname aware attribute names in which prefixes
                           should be replaced in text content
    - *exclude_attrs*: a set of attribute names that should not be serialised
    - *exclude_tags*: a set of tag names that should not be serialised
  summary: Canonicalization writer target for the XMLParser
  signatures: null
  inherits_from: null
- name: C14NWriterTarget.close
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: C14NWriterTarget.comment
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: text
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: C14NWriterTarget.data
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: C14NWriterTarget.end
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: C14NWriterTarget.pi
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: C14NWriterTarget.start
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: attrs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: C14NWriterTarget.start_ns
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: null
    rest: false
  - kind: positional
    name: uri
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CDATA
  kind: class
  ns: lxml.etree
  description: |-
    CDATA(data)

    CDATA factory.  This factory creates an opaque data object that
    can be used to set Element text.  The usual way to use it is::

        >>> el = Element('content')
        >>> el.text = CDATA('a string')

        >>> print(el.text)
        a string
        >>> print(tostring(el, encoding="unicode"))
        <content><![CDATA[a string]]></content>
  summary: CDATA(data)
  signatures: null
  inherits_from: null
- name: Comment
  kind: callable
  ns: lxml.etree
  description: |-
    Comment(text=None)

    Comment element factory. This factory function creates a special element that will
    be serialized as an XML comment.
  summary: Comment(text=None)
  signatures:
  - kind: positional
    name: text
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase
  kind: class
  ns: lxml.etree
  description: |-
    All custom Comment classes must inherit from this one.

    To create an XML Comment instance, use the ``Comment()`` factory.

    Subclasses *must not* override __init__ or __new__ as it is
    absolutely undefined when these objects will be created or
    destroyed.  All persistent state of Comments must be stored in the
    underlying XML.  If you really need to initialize the object after
    creation, you can implement an ``_init(self)`` method that will be
    called after object creation.
  summary: All custom Comment classes must inherit from this one
  signatures: null
  inherits_from:
  - <class 'lxml.etree._Comment'>
  - <class 'lxml.etree.__ContentOnlyElement'>
  - <class 'lxml.etree._Element'>
- name: CommentBase.addnext
  kind: callable
  ns: lxml.etree
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.addprevious
  kind: callable
  ns: lxml.etree
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.append
  kind: callable
  ns: lxml.etree
  description: append(self, value)
  summary: append(self, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.attrib
  kind: property
  ns: lxml.etree
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: CommentBase.base
  kind: property
  ns: lxml.etree
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: CommentBase.clear
  kind: callable
  ns: lxml.etree
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.cssselect
  kind: callable
  ns: lxml.etree
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: CommentBase.extend
  kind: callable
  ns: lxml.etree
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.find
  kind: callable
  ns: lxml.etree
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.findall
  kind: callable
  ns: lxml.etree
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.findtext
  kind: callable
  ns: lxml.etree
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.get
  kind: callable
  ns: lxml.etree
  description: get(self, key, default=None)
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.getchildren
  kind: callable
  ns: lxml.etree
  description: |-
    getchildren(self)

    Returns all direct children.  The elements are returned in document
    order.

    :deprecated: Note that this method has been deprecated as of
      ElementTree 1.3 and lxml 2.0.  New code should use
      ``list(element)`` or simply iterate over elements.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.getiterator
  kind: callable
  ns: lxml.etree
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.getnext
  kind: callable
  ns: lxml.etree
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.getparent
  kind: callable
  ns: lxml.etree
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.getprevious
  kind: callable
  ns: lxml.etree
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.getroottree
  kind: callable
  ns: lxml.etree
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.index
  kind: callable
  ns: lxml.etree
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.insert
  kind: callable
  ns: lxml.etree
  description: insert(self, index, value)
  summary: insert(self, index, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.items
  kind: callable
  ns: lxml.etree
  description: items(self)
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.iter
  kind: callable
  ns: lxml.etree
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.iterancestors
  kind: callable
  ns: lxml.etree
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.iterchildren
  kind: callable
  ns: lxml.etree
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: CommentBase.iterdescendants
  kind: callable
  ns: lxml.etree
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.iterfind
  kind: callable
  ns: lxml.etree
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.itersiblings
  kind: callable
  ns: lxml.etree
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: CommentBase.itertext
  kind: callable
  ns: lxml.etree
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: CommentBase.keys
  kind: callable
  ns: lxml.etree
  description: keys(self)
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.makeelement
  kind: callable
  ns: lxml.etree
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.nsmap
  kind: property
  ns: lxml.etree
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: CommentBase.prefix
  kind: property
  ns: lxml.etree
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: CommentBase.remove
  kind: callable
  ns: lxml.etree
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.replace
  kind: callable
  ns: lxml.etree
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.set
  kind: callable
  ns: lxml.etree
  description: set(self, key, value)
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.sourceline
  kind: property
  ns: lxml.etree
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: CommentBase.tag
  kind: property
  ns: lxml.etree
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: CommentBase.tail
  kind: property
  ns: lxml.etree
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: CommentBase.text
  kind: property
  ns: lxml.etree
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: CommentBase.values
  kind: callable
  ns: lxml.etree
  description: values(self)
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommentBase.xpath
  kind: callable
  ns: lxml.etree
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: CustomElementClassLookup
  kind: class
  ns: lxml.etree
  description: |-
    CustomElementClassLookup(self, fallback=None)
    Element class lookup based on a subclass method.

    You can inherit from this class and override the method::

        lookup(self, type, doc, namespace, name)

    to lookup the element class for a node. Arguments of the method:
    * type:      one of 'element', 'comment', 'PI', 'entity'
    * doc:       document that the node is in
    * namespace: namespace URI of the node (or None for comments/PIs/entities)
    * name:      name of the element/entity, None for comments, target for PIs

    If you return None from this method, the fallback will be called.
  summary: CustomElementClassLookup(self, fallback=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.FallbackElementClassLookup'>
  - <class 'lxml.etree.ElementClassLookup'>
- name: CustomElementClassLookup.fallback
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CustomElementClassLookup.lookup
  kind: callable
  ns: lxml.etree
  description: lookup(self, type, doc, namespace, name)
  summary: lookup(self, type, doc, namespace, name)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: type
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - kind: positional
    name: namespace
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CustomElementClassLookup.set_fallback
  kind: callable
  ns: lxml.etree
  description: |-
    set_fallback(self, lookup)

    Sets the fallback scheme for this lookup method.
  summary: set_fallback(self, lookup)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DEBUG
  kind: const
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DTD
  kind: class
  ns: lxml.etree
  description: |-
    DTD(self, file=None, external_id=None)
    A DTD validator.

    Can load from filesystem directly given a filename or file-like object.
    Alternatively, pass the keyword parameter ``external_id`` to load from a
    catalog.
  summary: DTD(self, file=None, external_id=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree._Validator'>
- name: DTD.assertValid
  kind: callable
  ns: lxml.etree
  description: |-
    assertValid(self, etree)

    Raises `DocumentInvalid` if the document does not comply with the schema.
  summary: assertValid(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DTD.assert_
  kind: callable
  ns: lxml.etree
  description: |-
    assert_(self, etree)

    Raises `AssertionError` if the document does not comply with the schema.
  summary: assert_(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DTD.elements
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DTD.entities
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DTD.error_log
  kind: property
  ns: lxml.etree
  description: The log of validation errors and warnings.
  summary: The log of validation errors and warnings
  signatures: null
  inherits_from: null
- name: DTD.external_id
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DTD.iterelements
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DTD.iterentities
  kind: callable
  ns: lxml.etree
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DTD.name
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DTD.system_url
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DTD.validate
  kind: callable
  ns: lxml.etree
  description: |-
    validate(self, etree)

    Validate the document using this schema.

    Returns true if document is valid, false if not.
  summary: validate(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DTDError
  kind: class
  ns: lxml.etree
  description: "Base class for DTD errors.\n    "
  summary: Base class for DTD errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DTDError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DTDError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DTDError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DTDParseError
  kind: class
  ns: lxml.etree
  description: "Error while parsing a DTD.\n    "
  summary: Error while parsing a DTD
  signatures: null
  inherits_from:
  - <class 'lxml.etree.DTDError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DTDParseError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DTDParseError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DTDParseError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DTDValidateError
  kind: class
  ns: lxml.etree
  description: "Error while validating an XML document with a DTD.\n    "
  summary: Error while validating an XML document with a DTD
  signatures: null
  inherits_from:
  - <class 'lxml.etree.DTDError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DTDValidateError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DTDValidateError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DTDValidateError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DocumentInvalid
  kind: class
  ns: lxml.etree
  description: |-
    Validation error.

    Raised by all document validators when their ``assertValid(tree)``
    method fails.
  summary: Validation error
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DocumentInvalid.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DocumentInvalid.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DocumentInvalid.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ETCompatXMLParser
  kind: class
  ns: lxml.etree
  description: |-
    ETCompatXMLParser(self, encoding=None, attribute_defaults=False,                  dtd_validation=False, load_dtd=False, no_network=True,                  ns_clean=False, recover=False, schema=None,                  huge_tree=False, remove_blank_text=False, resolve_entities=True,                  remove_comments=True, remove_pis=True, strip_cdata=True,                  target=None, compact=True)

    An XML parser with an ElementTree compatible default setup.

    See the XMLParser class for details.

    This parser has ``remove_comments`` and ``remove_pis`` enabled by default
    and thus ignores comments and processing instructions.
  summary: ETCompatXMLParser(self, encoding=None, attribute_defaults=False,         dtd_validation=False, load_dtd=False, no_network=True,         ns_clean=False, recover=False, schema=None,         huge_tree=False, remove_blank_text=False, resolve_entities=True,         remove_comments=True, remove_pis=True, strip_cdata=True,         target=None, compact=True)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XMLParser'>
  - <class 'lxml.etree._FeedParser'>
  - <class 'lxml.etree._BaseParser'>
- name: ETCompatXMLParser.close
  kind: callable
  ns: lxml.etree
  description: |-
    close(self)

    Terminates feeding data to this parser.  This tells the parser to
    process any remaining data in the feed buffer, and then returns the
    root Element of the tree that was parsed.

    This method must be called after passing the last chunk of data into
    the ``feed()`` method.  It should only be called when using the feed
    parser interface, all other usage is undefined.
  summary: close(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ETCompatXMLParser.copy
  kind: callable
  ns: lxml.etree
  description: |-
    copy(self)

    Create a new parser with the same configuration.
  summary: copy(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ETCompatXMLParser.error_log
  kind: property
  ns: lxml.etree
  description: "The error log of the last parser run.\n        "
  summary: The error log of the last parser run
  signatures: null
  inherits_from: null
- name: ETCompatXMLParser.feed
  kind: callable
  ns: lxml.etree
  description: |-
    feed(self, data)

    Feeds data to the parser.  The argument should be an 8-bit string
    buffer containing encoded data, although Unicode is supported as long
    as both string types are not mixed.

    This is the main entry point to the consumer interface of a
    parser.  The parser will parse as much of the XML stream as it
    can on each call.  To finish parsing or to reset the parser,
    call the ``close()`` method.  Both methods may raise
    ParseError if errors occur in the input data.  If an error is
    raised, there is no longer a need to call ``close()``.

    The feed parser interface is independent of the normal parser
    usage.  You can use the same parser as a feed parser and in
    the ``parse()`` function concurrently.
  summary: feed(self, data)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ETCompatXMLParser.feed_error_log
  kind: property
  ns: lxml.etree
  description: |-
    The error log of the last (or current) run of the feed parser.

    Note that this is local to the feed parser and thus is
    different from what the ``error_log`` property returns.
  summary: The error log of the last (or current) run of the feed parser
  signatures: null
  inherits_from: null
- name: ETCompatXMLParser.makeelement
  kind: callable
  ns: lxml.etree
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with this parser.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ETCompatXMLParser.resolvers
  kind: property
  ns: lxml.etree
  description: The custom resolver registry of this parser.
  summary: The custom resolver registry of this parser
  signatures: null
  inherits_from: null
- name: ETCompatXMLParser.set_element_class_lookup
  kind: callable
  ns: lxml.etree
  description: |-
    set_element_class_lookup(self, lookup = None)

    Set a lookup scheme for element classes generated from this parser.

    Reset it by passing None or nothing.
  summary: set_element_class_lookup(self, lookup = None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ETCompatXMLParser.target
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ETCompatXMLParser.version
  kind: property
  ns: lxml.etree
  description: The version of the underlying XML parser.
  summary: The version of the underlying XML parser
  signatures: null
  inherits_from: null
- name: ETXPath
  kind: class
  ns: lxml.etree
  description: |-
    ETXPath(self, path, extensions=None, regexp=True, smart_strings=True)
    Special XPath class that supports the ElementTree {uri} notation for namespaces.

    Note that this class does not accept the ``namespace`` keyword
    argument. All namespaces must be passed as part of the path
    string.  Smart strings will be returned for string results unless
    you pass ``smart_strings=False``.
  summary: ETXPath(self, path, extensions=None, regexp=True, smart_strings=True)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XPath'>
  - <class 'lxml.etree._XPathEvaluatorBase'>
- name: ETXPath.error_log
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ETXPath.path
  kind: property
  ns: lxml.etree
  description: "The literal XPath expression.\n        "
  summary: The literal XPath expression
  signatures: null
  inherits_from: null
- name: Element
  kind: callable
  ns: lxml.etree
  description: |-
    Element(_tag, attrib=None, nsmap=None, **_extra)

    Element factory.  This function returns an object implementing the
    Element interface.

    Also look at the `_Element.makeelement()` and
    `_BaseParser.makeelement()` methods, which provide a faster way to
    create an Element within a specific document or parser context.
  summary: Element(_tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase
  kind: class
  ns: lxml.etree
  description: |-
    ElementBase(*children, attrib=None, nsmap=None, **_extra)

    The public Element class.  All custom Element classes must inherit
    from this one.  To create an Element, use the `Element()` factory.

    BIG FAT WARNING: Subclasses *must not* override __init__ or
    __new__ as it is absolutely undefined when these objects will be
    created or destroyed.  All persistent state of Elements must be
    stored in the underlying XML.  If you really need to initialize
    the object after creation, you can implement an ``_init(self)``
    method that will be called directly after object creation.

    Subclasses of this class can be instantiated to create a new
    Element.  By default, the tag name will be the class name and the
    namespace will be empty.  You can modify this with the following
    class attributes:

    * TAG - the tag name, possibly containing a namespace in Clark
      notation

    * NAMESPACE - the default namespace URI, unless provided as part
      of the TAG attribute.

    * HTML - flag if the class is an HTML tag, as opposed to an XML
      tag.  This only applies to un-namespaced tags and defaults to
      false (i.e. XML).

    * PARSER - the parser that provides the configuration for the
      newly created document.  Providing an HTML parser here will
      default to creating an HTML element.

    In user code, the latter three are commonly inherited in class
    hierarchies that implement a common namespace.
  summary: ElementBase(*children, attrib=None, nsmap=None, **_extra)
  signatures: null
  inherits_from:
  - <class 'lxml.etree._Element'>
- name: ElementBase.addnext
  kind: callable
  ns: lxml.etree
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.addprevious
  kind: callable
  ns: lxml.etree
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.append
  kind: callable
  ns: lxml.etree
  description: |-
    append(self, element)

    Adds a subelement to the end of this element.
  summary: append(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.attrib
  kind: property
  ns: lxml.etree
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: ElementBase.base
  kind: property
  ns: lxml.etree
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: ElementBase.clear
  kind: callable
  ns: lxml.etree
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.cssselect
  kind: callable
  ns: lxml.etree
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ElementBase.extend
  kind: callable
  ns: lxml.etree
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.find
  kind: callable
  ns: lxml.etree
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.findall
  kind: callable
  ns: lxml.etree
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.findtext
  kind: callable
  ns: lxml.etree
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.get
  kind: callable
  ns: lxml.etree
  description: |-
    get(self, key, default=None)

    Gets an element attribute.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.getchildren
  kind: callable
  ns: lxml.etree
  description: |-
    getchildren(self)

    Returns all direct children.  The elements are returned in document
    order.

    :deprecated: Note that this method has been deprecated as of
      ElementTree 1.3 and lxml 2.0.  New code should use
      ``list(element)`` or simply iterate over elements.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.getiterator
  kind: callable
  ns: lxml.etree
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.getnext
  kind: callable
  ns: lxml.etree
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.getparent
  kind: callable
  ns: lxml.etree
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.getprevious
  kind: callable
  ns: lxml.etree
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.getroottree
  kind: callable
  ns: lxml.etree
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.index
  kind: callable
  ns: lxml.etree
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.insert
  kind: callable
  ns: lxml.etree
  description: |-
    insert(self, index, element)

    Inserts a subelement at the given position in this element
  summary: insert(self, index, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.items
  kind: callable
  ns: lxml.etree
  description: |-
    items(self)

    Gets element attributes, as a sequence. The attributes are returned in
    an arbitrary order.
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.iter
  kind: callable
  ns: lxml.etree
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.iterancestors
  kind: callable
  ns: lxml.etree
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.iterchildren
  kind: callable
  ns: lxml.etree
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ElementBase.iterdescendants
  kind: callable
  ns: lxml.etree
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.iterfind
  kind: callable
  ns: lxml.etree
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.itersiblings
  kind: callable
  ns: lxml.etree
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ElementBase.itertext
  kind: callable
  ns: lxml.etree
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ElementBase.keys
  kind: callable
  ns: lxml.etree
  description: |-
    keys(self)

    Gets a list of attribute names.  The names are returned in an
    arbitrary order (just like for an ordinary Python dictionary).
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.makeelement
  kind: callable
  ns: lxml.etree
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.nsmap
  kind: property
  ns: lxml.etree
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: ElementBase.prefix
  kind: property
  ns: lxml.etree
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: ElementBase.remove
  kind: callable
  ns: lxml.etree
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.replace
  kind: callable
  ns: lxml.etree
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.set
  kind: callable
  ns: lxml.etree
  description: |-
    set(self, key, value)

    Sets an element attribute.
    In HTML documents (not XML or XHTML), the value None is allowed and creates
    an attribute without value (just the attribute name).
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.sourceline
  kind: property
  ns: lxml.etree
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: ElementBase.tag
  kind: property
  ns: lxml.etree
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: ElementBase.tail
  kind: property
  ns: lxml.etree
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: ElementBase.text
  kind: property
  ns: lxml.etree
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: ElementBase.values
  kind: callable
  ns: lxml.etree
  description: |-
    values(self)

    Gets element attribute values as a sequence of strings.  The
    attributes are returned in an arbitrary order.
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementBase.xpath
  kind: callable
  ns: lxml.etree
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ElementClassLookup
  kind: class
  ns: lxml.etree
  description: |-
    ElementClassLookup(self)
    Superclass of Element class lookups.
  summary: ElementClassLookup(self)
  signatures: null
  inherits_from: null
- name: ElementDefaultClassLookup
  kind: class
  ns: lxml.etree
  description: |-
    ElementDefaultClassLookup(self, element=None, comment=None, pi=None, entity=None)
    Element class lookup scheme that always returns the default Element
    class.

    The keyword arguments ``element``, ``comment``, ``pi`` and ``entity``
    accept the respective Element classes.
  summary: ElementDefaultClassLookup(self, element=None, comment=None, pi=None, entity=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.ElementClassLookup'>
- name: ElementDefaultClassLookup.comment_class
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ElementDefaultClassLookup.element_class
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ElementDefaultClassLookup.entity_class
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ElementDefaultClassLookup.pi_class
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ElementNamespaceClassLookup
  kind: class
  ns: lxml.etree
  description: |-
    ElementNamespaceClassLookup(self, fallback=None)

    Element class lookup scheme that searches the Element class in the
    Namespace registry.

    Usage:

    >>> lookup = ElementNamespaceClassLookup()
    >>> ns_elements = lookup.get_namespace("http://schema.org/Movie")

    >>> @ns_elements
    ... class movie(ElementBase):
    ...     "Element implementation for 'movie' tag (using class name) in schema namespace."

    >>> @ns_elements("movie")
    ... class MovieElement(ElementBase):
    ...     "Element implementation for 'movie' tag (explicit tag name) in schema namespace."
  summary: ElementNamespaceClassLookup(self, fallback=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.FallbackElementClassLookup'>
  - <class 'lxml.etree.ElementClassLookup'>
- name: ElementNamespaceClassLookup.fallback
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ElementNamespaceClassLookup.get_namespace
  kind: callable
  ns: lxml.etree
  description: |-
    get_namespace(self, ns_uri)

    Retrieve the namespace object associated with the given URI.
    Pass None for the empty namespace.

    Creates a new namespace object if it does not yet exist.
  summary: get_namespace(self, ns_uri)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ns_uri
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementNamespaceClassLookup.set_fallback
  kind: callable
  ns: lxml.etree
  description: |-
    set_fallback(self, lookup)

    Sets the fallback scheme for this lookup method.
  summary: set_fallback(self, lookup)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTree
  kind: callable
  ns: lxml.etree
  description: |-
    ElementTree(element=None, file=None, parser=None)

    ElementTree wrapper class.
  summary: ElementTree(element=None, file=None, parser=None)
  signatures:
  - kind: positional
    name: element
    default: None
    rest: false
  - name: file
    default: None
    rest: false
    kind: kw-only
  - name: parser
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: Entity
  kind: callable
  ns: lxml.etree
  description: |-
    Entity(name)

    Entity factory.  This factory function creates a special element
    that will be serialized as an XML entity reference or character
    reference.  Note, however, that entities will not be automatically
    declared in the document.  A document that uses entity references
    requires a DTD to define the entities.
  summary: Entity(name)
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase
  kind: class
  ns: lxml.etree
  description: |-
    All custom Entity classes must inherit from this one.

    To create an XML Entity instance, use the ``Entity()`` factory.

    Subclasses *must not* override __init__ or __new__ as it is
    absolutely undefined when these objects will be created or
    destroyed.  All persistent state of Entities must be stored in the
    underlying XML.  If you really need to initialize the object after
    creation, you can implement an ``_init(self)`` method that will be
    called after object creation.
  summary: All custom Entity classes must inherit from this one
  signatures: null
  inherits_from:
  - <class 'lxml.etree._Entity'>
  - <class 'lxml.etree.__ContentOnlyElement'>
  - <class 'lxml.etree._Element'>
- name: EntityBase.addnext
  kind: callable
  ns: lxml.etree
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.addprevious
  kind: callable
  ns: lxml.etree
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.append
  kind: callable
  ns: lxml.etree
  description: append(self, value)
  summary: append(self, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.attrib
  kind: property
  ns: lxml.etree
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: EntityBase.base
  kind: property
  ns: lxml.etree
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: EntityBase.clear
  kind: callable
  ns: lxml.etree
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.cssselect
  kind: callable
  ns: lxml.etree
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: EntityBase.extend
  kind: callable
  ns: lxml.etree
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.find
  kind: callable
  ns: lxml.etree
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.findall
  kind: callable
  ns: lxml.etree
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.findtext
  kind: callable
  ns: lxml.etree
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.get
  kind: callable
  ns: lxml.etree
  description: get(self, key, default=None)
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.getchildren
  kind: callable
  ns: lxml.etree
  description: |-
    getchildren(self)

    Returns all direct children.  The elements are returned in document
    order.

    :deprecated: Note that this method has been deprecated as of
      ElementTree 1.3 and lxml 2.0.  New code should use
      ``list(element)`` or simply iterate over elements.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.getiterator
  kind: callable
  ns: lxml.etree
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.getnext
  kind: callable
  ns: lxml.etree
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.getparent
  kind: callable
  ns: lxml.etree
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.getprevious
  kind: callable
  ns: lxml.etree
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.getroottree
  kind: callable
  ns: lxml.etree
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.index
  kind: callable
  ns: lxml.etree
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.insert
  kind: callable
  ns: lxml.etree
  description: insert(self, index, value)
  summary: insert(self, index, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.items
  kind: callable
  ns: lxml.etree
  description: items(self)
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.iter
  kind: callable
  ns: lxml.etree
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.iterancestors
  kind: callable
  ns: lxml.etree
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.iterchildren
  kind: callable
  ns: lxml.etree
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: EntityBase.iterdescendants
  kind: callable
  ns: lxml.etree
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.iterfind
  kind: callable
  ns: lxml.etree
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.itersiblings
  kind: callable
  ns: lxml.etree
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: EntityBase.itertext
  kind: callable
  ns: lxml.etree
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: EntityBase.keys
  kind: callable
  ns: lxml.etree
  description: keys(self)
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.makeelement
  kind: callable
  ns: lxml.etree
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.name
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: EntityBase.nsmap
  kind: property
  ns: lxml.etree
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: EntityBase.prefix
  kind: property
  ns: lxml.etree
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: EntityBase.remove
  kind: callable
  ns: lxml.etree
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.replace
  kind: callable
  ns: lxml.etree
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.set
  kind: callable
  ns: lxml.etree
  description: set(self, key, value)
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.sourceline
  kind: property
  ns: lxml.etree
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: EntityBase.tag
  kind: property
  ns: lxml.etree
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: EntityBase.tail
  kind: property
  ns: lxml.etree
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: EntityBase.text
  kind: property
  ns: lxml.etree
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: EntityBase.values
  kind: callable
  ns: lxml.etree
  description: values(self)
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: EntityBase.xpath
  kind: callable
  ns: lxml.etree
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: Error
  kind: class
  ns: lxml.etree
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Error.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Error.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Error.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ErrorDomains
  kind: class
  ns: lxml.etree
  description: Libxml2 error domains
  summary: Libxml2 error domains
  signatures:
  - type: ErrorDomains
  inherits_from: null
- name: ErrorDomains.BUFFER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.C14N
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.CATALOG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.CHECK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.DATATYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.DTD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.FTP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.HTML
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.HTTP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.I18N
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.IO
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.MEMORY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.MODULE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.NAMESPACE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.NONE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.OUTPUT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.PARSER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.REGEXP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.RELAXNGP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.RELAXNGV
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.SCHEMASP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.SCHEMASV
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.SCHEMATRONV
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.TREE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.URI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.WRITER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.XINCLUDE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.XPATH
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.XPOINTER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorDomains.XSLT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorLevels
  kind: class
  ns: lxml.etree
  description: Libxml2 error levels
  summary: Libxml2 error levels
  signatures:
  - type: ErrorLevels
  inherits_from: null
- name: ErrorLevels.ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorLevels.FATAL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorLevels.NONE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorLevels.WARNING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes
  kind: class
  ns: lxml.etree
  description: Libxml2 error types
  summary: Libxml2 error types
  signatures:
  - type: ErrorTypes
  inherits_from: null
- name: ErrorTypes.BUF_OVERFLOW
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.C14N_CREATE_CTXT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.C14N_CREATE_STACK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.C14N_INVALID_NODE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.C14N_RELATIVE_NAMESPACE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.C14N_REQUIRES_UTF8
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.C14N_UNKNOW_NODE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CATALOG_ENTRY_BROKEN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CATALOG_MISSING_ATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CATALOG_NOT_CATALOG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CATALOG_PREFER_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CATALOG_RECURSION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_ENTITY_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_ATTRIBUTE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_CDATA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_COMMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_DOCTYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_ELEMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_ENTITY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_ENTITYREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_FRAGMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_NOTATION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_PI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_FOUND_TEXT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NAME_NOT_NULL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NOT_ATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NOT_ATTR_DECL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NOT_DTD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NOT_ELEM_DECL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NOT_ENTITY_DECL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NOT_NCNAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NOT_NS_DECL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NOT_UTF8
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NO_DICT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NO_DOC
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NO_ELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NO_HREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NO_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NO_NEXT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NO_PARENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NO_PREV
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NS_ANCESTOR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_NS_SCOPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_OUTSIDE_DICT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_UNKNOWN_NODE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_WRONG_DOC
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_WRONG_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_WRONG_NEXT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_WRONG_PARENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.CHECK_WRONG_PREV
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ATTRIBUTE_DEFAULT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ATTRIBUTE_REDEFINED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ATTRIBUTE_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_CONTENT_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_CONTENT_MODEL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_CONTENT_NOT_DETERMINIST
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_DIFFERENT_PREFIX
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_DUP_TOKEN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ELEM_DEFAULT_NAMESPACE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ELEM_NAMESPACE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ELEM_REDEFINED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_EMPTY_NOTATION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ENTITY_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ID_FIXED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ID_REDEFINED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ID_SUBSET
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_INVALID_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_INVALID_DEFAULT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_LOAD_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_MISSING_ATTRIBUTE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_MIXED_CORRUPT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_MULTIPLE_ID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NOTATION_REDEFINED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NOTATION_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NOT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NOT_PCDATA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NOT_STANDALONE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NO_DOC
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NO_DTD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NO_ELEM_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NO_PREFIX
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_NO_ROOT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_ROOT_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_STANDALONE_DEFAULTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_STANDALONE_WHITE_SPACE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_UNKNOWN_ATTRIBUTE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_UNKNOWN_ELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_UNKNOWN_ENTITY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_UNKNOWN_ID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_UNKNOWN_NOTATION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_XMLID_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.DTD_XMLID_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ATTLIST_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ATTLIST_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ATTRIBUTE_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ATTRIBUTE_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ATTRIBUTE_REDEFINED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ATTRIBUTE_WITHOUT_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_CDATA_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_CHARREF_AT_EOF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_CHARREF_IN_DTD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_CHARREF_IN_EPILOG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_CHARREF_IN_PROLOG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_COMMENT_ABRUPTLY_ENDED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_COMMENT_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_CONDSEC_INVALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_CONDSEC_INVALID_KEYWORD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_CONDSEC_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_CONDSEC_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_DOCTYPE_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_DOCUMENT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_DOCUMENT_END
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_DOCUMENT_START
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ELEMCONTENT_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ELEMCONTENT_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENCODING_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITYREF_AT_EOF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITYREF_IN_DTD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITYREF_IN_EPILOG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITYREF_IN_PROLOG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITYREF_NO_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITYREF_SEMICOL_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITY_BOUNDARY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITY_CHAR_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITY_IS_EXTERNAL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITY_IS_PARAMETER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITY_LOOP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITY_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITY_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITY_PE_INTERNAL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_ENTITY_PROCESSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_EQUAL_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_EXTRA_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_EXT_ENTITY_STANDALONE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_EXT_SUBSET_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_GT_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_HYPHEN_IN_COMMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_INTERNAL_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_INVALID_CHAR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_INVALID_CHARREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_INVALID_DEC_CHARREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_INVALID_ENCODING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_INVALID_HEX_CHARREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_INVALID_URI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_LITERAL_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_LITERAL_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_LTSLASH_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_LT_IN_ATTRIBUTE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_LT_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_MISPLACED_CDATA_END
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_MISSING_ENCODING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_MIXED_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_MIXED_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NAME_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NAME_TOO_LONG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NMTOKEN_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NOTATION_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NOTATION_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NOTATION_PROCESSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NOT_STANDALONE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NOT_WELL_BALANCED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NO_DTD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NO_MEMORY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_NS_DECL_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_OK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PCDATA_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PEREF_AT_EOF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PEREF_IN_EPILOG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PEREF_IN_INT_SUBSET
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PEREF_IN_PROLOG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PEREF_NO_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PEREF_SEMICOL_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PI_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PI_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_PUBID_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_RESERVED_XML_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_SEPARATOR_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_SPACE_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_STANDALONE_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_STRING_NOT_CLOSED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_STRING_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_TAG_NAME_MISMATCH
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_TAG_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_UNDECLARED_ENTITY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_UNKNOWN_ENCODING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_UNKNOWN_VERSION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_UNPARSED_ENTITY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_UNSUPPORTED_ENCODING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_URI_FRAGMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_URI_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_USER_STOP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_VALUE_REQUIRED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_VERSION_MISMATCH
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_VERSION_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_XMLDECL_NOT_FINISHED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.ERR_XMLDECL_NOT_STARTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.FTP_ACCNT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.FTP_EPSV_ANSWER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.FTP_PASV_ANSWER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.FTP_URL_SYNTAX
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.HTML_STRUCURE_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.HTML_UNKNOWN_TAG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.HTTP_UNKNOWN_HOST
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.HTTP_URL_SYNTAX
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.HTTP_USE_IP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.I18N_CONV_FAILED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.I18N_EXCESS_HANDLER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.I18N_NO_HANDLER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.I18N_NO_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.I18N_NO_OUTPUT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_BUFFER_FULL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EACCES
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EADDRINUSE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EAFNOSUPPORT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EAGAIN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EALREADY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EBADF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EBADMSG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EBUSY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ECANCELED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ECHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ECONNREFUSED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EDEADLK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EDOM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EEXIST
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EFAULT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EFBIG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EINPROGRESS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EINTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EINVAL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EIO
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EISCONN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EISDIR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EMFILE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EMLINK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EMSGSIZE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENAMETOOLONG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENCODER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENETUNREACH
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENFILE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENODEV
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOEXEC
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOLCK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOMEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOSPC
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOSYS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOTDIR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOTEMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOTSOCK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOTSUP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENOTTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ENXIO
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EPERM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EPIPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ERANGE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EROFS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ESPIPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ESRCH
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_ETIMEDOUT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_EXDEV
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_FLUSH
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_LOAD_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_NETWORK_ATTEMPT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_NO_INPUT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_UNKNOWN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.IO_WRITE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.MODULE_CLOSE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.MODULE_OPEN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.NS_ERR_ATTRIBUTE_REDEFINED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.NS_ERR_COLON
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.NS_ERR_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.NS_ERR_QNAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.NS_ERR_UNDEFINED_NAMESPACE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.NS_ERR_XML_NAMESPACE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.REGEXP_COMPILE_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ANYNAME_ATTR_ANCESTOR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ATTRIBUTE_CHILDREN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ATTRIBUTE_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ATTRIBUTE_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ATTRIBUTE_NOOP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ATTR_CONFLICT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_CHOICE_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_CHOICE_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_CREATE_FAILURE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_DATA_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_DEFINE_CREATE_FAILED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_DEFINE_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_DEFINE_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_DEFINE_NAME_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_DEF_CHOICE_AND_INTERLEAVE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ELEMENT_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ELEMENT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ELEMENT_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ELEMENT_NO_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ELEM_CONTENT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ELEM_CONTENT_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ELEM_TEXT_CONFLICT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EMPTY_CONSTRUCT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EMPTY_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EMPTY_NOT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_ERROR_TYPE_LIB
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EXCEPT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EXCEPT_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EXCEPT_MULTIPLE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EXCEPT_NO_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EXTERNALREF_EMTPY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EXTERNALREF_RECURSE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_EXTERNAL_REF_FAILURE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_FORBIDDEN_ATTRIBUTE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_FOREIGN_ELEMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_GRAMMAR_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_GRAMMAR_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_GRAMMAR_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_GRAMMAR_NO_START
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_GROUP_ATTR_CONFLICT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_HREF_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INCLUDE_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INCLUDE_FAILURE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INCLUDE_RECURSE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INTERLEAVE_ADD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INTERLEAVE_CREATE_FAILED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INTERLEAVE_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INTERLEAVE_NO_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INVALID_DEFINE_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INVALID_URI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_INVALID_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_MISSING_HREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_NAME_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_NEED_COMBINE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_NOTALLOWED_NOT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_NSNAME_ATTR_ANCESTOR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_NSNAME_NO_NS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PARAM_FORBIDDEN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PARAM_NAME_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PARENTREF_CREATE_FAILED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PARENTREF_NAME_INVALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PARENTREF_NOT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PARENTREF_NO_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PARENTREF_NO_PARENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PARSE_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_ANYNAME_EXCEPT_ANYNAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_ATTR_ATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_ATTR_ELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_DATA_EXCEPT_ATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_DATA_EXCEPT_ELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_DATA_EXCEPT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_DATA_EXCEPT_GROUP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_DATA_EXCEPT_INTERLEAVE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_DATA_EXCEPT_LIST
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_DATA_EXCEPT_ONEMORE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_DATA_EXCEPT_REF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_DATA_EXCEPT_TEXT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_LIST_ATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_LIST_ELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_LIST_INTERLEAVE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_LIST_LIST
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_LIST_REF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_LIST_TEXT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_NSNAME_EXCEPT_ANYNAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_NSNAME_EXCEPT_NSNAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_ONEMORE_GROUP_ATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_ONEMORE_INTERLEAVE_ATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_START_ATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_START_DATA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_START_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_START_GROUP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_START_INTERLEAVE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_START_LIST
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_START_ONEMORE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_START_TEXT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PAT_START_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_PREFIX_UNDEFINED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_REF_CREATE_FAILED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_REF_CYCLE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_REF_NAME_INVALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_REF_NOT_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_REF_NO_DEF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_REF_NO_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_START_CHOICE_AND_INTERLEAVE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_START_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_START_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_START_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_TEXT_EXPECTED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_TEXT_HAS_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_TYPE_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_TYPE_NOT_FOUND
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_TYPE_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_UNKNOWN_ATTRIBUTE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_UNKNOWN_COMBINE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_UNKNOWN_CONSTRUCT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_UNKNOWN_TYPE_LIB
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_URI_FRAGMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_URI_NOT_ABSOLUTE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_VALUE_EMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_VALUE_NO_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_XMLNS_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.RNGP_XML_NS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SAVE_CHAR_INVALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SAVE_NOT_UTF8
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SAVE_NO_DOCTYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SAVE_UNKNOWN_ENCODING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_AG_PROPS_CORRECT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_ATTRFORMDEFAULT_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_ATTRGRP_NONAME_NOREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_ATTR_NONAME_NOREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_AU_PROPS_CORRECT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_AU_PROPS_CORRECT_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_A_PROPS_CORRECT_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_A_PROPS_CORRECT_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COMPLEXTYPE_NONAME_NOREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ALL_LIMITED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_CT_EXTENDS_1_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_CT_EXTENDS_1_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_CT_EXTENDS_1_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_DERIVED_OK_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_DERIVED_OK_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_1_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_1_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_1_3_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_1_3_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_2_3_1_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_2_3_1_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_2_3_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_2_3_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_2_3_2_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_2_3_2_4
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_2_3_2_5
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_3_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_3_3_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_3_3_1_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_3_3_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_3_3_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_3_3_2_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_3_3_2_4
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_ST_RESTRICTS_3_3_2_5
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_VALID_DEFAULT_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_VALID_DEFAULT_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_VALID_DEFAULT_2_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_COS_VALID_DEFAULT_2_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_CT_PROPS_CORRECT_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_CT_PROPS_CORRECT_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_CT_PROPS_CORRECT_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_CT_PROPS_CORRECT_4
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_CT_PROPS_CORRECT_5
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_CVC_SIMPLE_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_C_PROPS_CORRECT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DEF_AND_PREFIX
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DERIVATION_OK_RESTRICTION_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DERIVATION_OK_RESTRICTION_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DERIVATION_OK_RESTRICTION_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DERIVATION_OK_RESTRICTION_4_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DERIVATION_OK_RESTRICTION_4_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_DERIVATION_OK_RESTRICTION_4_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_ELEMFORMDEFAULT_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_ELEM_DEFAULT_FIXED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_ELEM_NONAME_NOREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_EXTENSION_NO_BASE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_E_PROPS_CORRECT_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_E_PROPS_CORRECT_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_E_PROPS_CORRECT_4
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_E_PROPS_CORRECT_5
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_E_PROPS_CORRECT_6
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_FACET_NO_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_FAILED_BUILD_IMPORT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_FAILED_LOAD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_FAILED_PARSE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_GROUP_NONAME_NOREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_IMPORT_NAMESPACE_NOT_URI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_IMPORT_REDEFINE_NSNAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_IMPORT_SCHEMA_NOT_URI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INCLUDE_SCHEMA_NOT_URI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INCLUDE_SCHEMA_NO_URI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INTERNAL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_ATTR_COMBINATION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_ATTR_INLINE_COMBINATION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_ATTR_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_ATTR_USE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_BOOLEAN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_ENUM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_FACET
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_FACET_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_MAXOCCURS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_MINOCCURS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_REF_AND_SUBTYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_INVALID_WHITE_SPACE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_MG_PROPS_CORRECT_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_MG_PROPS_CORRECT_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_MISSING_SIMPLETYPE_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_NOATTR_NOREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_NOROOT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_NOTATION_NO_NAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_NOTHING_TO_PARSE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_NOTYPE_NOREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_NOT_DETERMINISTIC
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_NOT_SCHEMA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_NO_XMLNS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_NO_XSI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_PREFIX_UNDEFINED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_P_PROPS_CORRECT_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_P_PROPS_CORRECT_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_P_PROPS_CORRECT_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_RECURSIVE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_REDEFINED_ATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_REDEFINED_ATTRGROUP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_REDEFINED_ELEMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_REDEFINED_GROUP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_REDEFINED_NOTATION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_REDEFINED_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_REF_AND_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_REF_AND_SUBTYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_REGEXP_INVALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_RESTRICTION_NONAME_NOREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_S4S_ATTR_INVALID_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_S4S_ATTR_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_S4S_ATTR_NOT_ALLOWED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_S4S_ELEM_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_S4S_ELEM_NOT_ALLOWED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SIMPLETYPE_NONAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ATTRIBUTE_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ATTRIBUTE_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ATTRIBUTE_3_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ATTRIBUTE_3_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ATTRIBUTE_4
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ATTRIBUTE_GROUP_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ATTRIBUTE_GROUP_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ATTRIBUTE_GROUP_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_CT_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ELEMENT_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ELEMENT_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ELEMENT_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_ELEMENT_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_IMPORT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_IMPORT_1_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_IMPORT_1_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_IMPORT_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_IMPORT_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_IMPORT_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_IMPORT_3_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_IMPORT_3_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_INCLUDE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_REDEFINE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_RESOLVE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_SIMPLE_TYPE_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_SIMPLE_TYPE_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_SIMPLE_TYPE_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_SIMPLE_TYPE_4
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_ST_PROPS_CORRECT_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_ST_PROPS_CORRECT_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_ST_PROPS_CORRECT_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_TYPE_AND_SUBTYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNION_NOT_EXPRESSIBLE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_ALL_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_ATTRGRP_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_ATTR_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_BASE_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_CHOICE_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_ELEM_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_EXTENSION_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_FACET_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_FACET_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_GROUP_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_IMPORT_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_INCLUDE_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_LIST_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_MEMBER_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_NOTATION_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_PREFIX
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_REF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_RESTRICTION_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_SCHEMAS_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_SEQUENCE_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_UNKNOWN_UNION_CHILD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_WARN_ATTR_POINTLESS_PROH
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_WARN_ATTR_REDECL_PROH
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_WARN_SKIP_SCHEMA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_WARN_UNLOCATED_SCHEMA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAP_WILDCARD_INVALID_NS_MEMBER
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMATRONV_ASSERT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMATRONV_REPORT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_ATTRINVALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_ATTRUNKNOWN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CONSTRUCT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ATTRIBUTE_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ATTRIBUTE_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ATTRIBUTE_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ATTRIBUTE_4
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_AU
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_2_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_2_4
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_3_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_3_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_3_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_4
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_5_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_COMPLEX_TYPE_5_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_DATATYPE_VALID_1_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_DATATYPE_VALID_1_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_DATATYPE_VALID_1_2_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_3_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_3_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_3_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_4_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_4_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_4_3
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_5_1_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_5_1_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_5_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_5_2_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_5_2_2_2_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_5_2_2_2_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_6
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ELT_7
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_ENUMERATION_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_FACET_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_FRACTIONDIGITS_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_IDC
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_LENGTH_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_MAXEXCLUSIVE_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_MAXINCLUSIVE_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_MAXLENGTH_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_MINEXCLUSIVE_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_MININCLUSIVE_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_MINLENGTH_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_PATTERN_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_TOTALDIGITS_VALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_TYPE_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_TYPE_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_TYPE_3_1_1
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_TYPE_3_1_2
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_CVC_WILDCARD
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_DOCUMENT_ELEMENT_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_ELEMCONT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_ELEMENT_CONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_EXTRACONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_FACET
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_HAVEDEFAULT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_INTERNAL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_INVALIDATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_INVALIDELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_ISABSTRACT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_MISC
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_MISSING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_NOROLLBACK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_NOROOT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_NOTDETERMINIST
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_NOTEMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_NOTNILLABLE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_NOTSIMPLE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_NOTTOPLEVEL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_NOTYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_UNDECLAREDELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.SCHEMAV_WRONGELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.TREE_INVALID_DEC
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.TREE_INVALID_HEX
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.TREE_NOT_UTF8
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.TREE_UNTERMINATED_ENTITY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.WAR_CATALOG_PI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.WAR_ENTITY_REDEFINED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.WAR_LANG_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.WAR_NS_COLUMN
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.WAR_NS_URI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.WAR_NS_URI_RELATIVE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.WAR_SPACE_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.WAR_UNDECLARED_ENTITY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.WAR_UNKNOWN_VERSION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_BUILD_FAILED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_DEPRECATED_NS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_ENTITY_DEF_MISMATCH
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_FALLBACKS_IN_INCLUDE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_FALLBACK_NOT_IN_INCLUDE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_FRAGMENT_ID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_HREF_URI
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_INCLUDE_IN_INCLUDE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_INVALID_CHAR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_MULTIPLE_ROOT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_NO_FALLBACK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_NO_HREF
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_PARSE_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_RECURSION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_TEXT_DOCUMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_TEXT_FRAGMENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_UNKNOWN_ENCODING
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_XPTR_FAILED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XINCLUDE_XPTR_RESULT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_ENCODING_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_EXPRESSION_OK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_EXPR_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_INVALID_ARITY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_INVALID_CHAR_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_INVALID_CTXT_POSITION
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_INVALID_CTXT_SIZE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_INVALID_OPERAND
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_INVALID_PREDICATE_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_INVALID_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_MEMORY_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_NUMBER_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_START_LITERAL_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_UNCLOSED_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_UNDEF_PREFIX_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_UNDEF_VARIABLE_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_UNFINISHED_LITERAL_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_UNKNOWN_FUNC_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPATH_VARIABLE_REF_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPTR_CHILDSEQ_START
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPTR_EVAL_FAILED
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPTR_EXTRA_OBJECTS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPTR_RESOURCE_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPTR_SUB_RESOURCE_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPTR_SYNTAX_ERROR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ErrorTypes.XPTR_UNKNOWN_SCHEME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Extension
  kind: callable
  ns: lxml.etree
  description: |-
    Extension(module, function_mapping=None, ns=None)

    Build a dictionary of extension functions from the functions
    defined in a module or the methods of an object.

    As second argument, you can pass an additional mapping of
    attribute names to XPath function names, or a list of function
    names that should be taken.

    The ``ns`` keyword argument accepts a namespace URI for the XPath
    functions.
  summary: Extension(module, function_mapping=None, ns=None)
  signatures:
  - kind: positional
    name: module
    default: null
    rest: false
  - kind: positional
    name: function_mapping
    default: None
    rest: false
  - name: ns
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: FallbackElementClassLookup
  kind: class
  ns: lxml.etree
  description: |-
    FallbackElementClassLookup(self, fallback=None)

    Superclass of Element class lookups with additional fallback.
  summary: FallbackElementClassLookup(self, fallback=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.ElementClassLookup'>
- name: FallbackElementClassLookup.fallback
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FallbackElementClassLookup.set_fallback
  kind: callable
  ns: lxml.etree
  description: |-
    set_fallback(self, lookup)

    Sets the fallback scheme for this lookup method.
  summary: set_fallback(self, lookup)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FunctionNamespace
  kind: callable
  ns: lxml.etree
  description: |-
    FunctionNamespace(ns_uri)

    Retrieve the function namespace object associated with the given
    URI.

    Creates a new one if it does not yet exist. A function namespace
    can only be used to register extension functions.

    Usage:

    >>> ns_functions = FunctionNamespace("http://schema.org/Movie")

    >>> @ns_functions  # uses function name
    ... def add2(x):
    ...     return x + 2

    >>> @ns_functions("add3")  # uses explicit name
    ... def add_three(x):
    ...     return x + 3
  summary: FunctionNamespace(ns_uri)
  signatures:
  - kind: positional
    name: ns_uri
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTML
  kind: callable
  ns: lxml.etree
  description: |-
    HTML(text, parser=None, base_url=None)

    Parses an HTML document from a string constant.  Returns the root
    node (or the result returned by a parser target).  This function
    can be used to embed "HTML literals" in Python code.

    To override the parser with a different ``HTMLParser`` you can pass it to
    the ``parser`` keyword argument.

    The ``base_url`` keyword argument allows to set the original base URL of
    the document to support relative Paths when looking up external entities
    (DTD, XInclude, ...).
  summary: HTML(text, parser=None, base_url=None)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: HTMLParser
  kind: class
  ns: lxml.etree
  description: |-
    HTMLParser(self, encoding=None, remove_blank_text=False,                    remove_comments=False, remove_pis=False, strip_cdata=True,                    no_network=True, target=None, schema: XMLSchema =None,                    recover=True, compact=True, collect_ids=True, huge_tree=False)

    The HTML parser.

    This parser allows reading HTML into a normal XML tree.  By
    default, it can read broken (non well-formed) HTML, depending on
    the capabilities of libxml2.  Use the 'recover' option to switch
    this off.

    Available boolean keyword arguments:

    - recover            - try hard to parse through broken HTML (default: True)
    - no_network         - prevent network access for related files (default: True)
    - remove_blank_text  - discard empty text nodes that are ignorable (i.e. not actual text content)
    - remove_comments    - discard comments
    - remove_pis         - discard processing instructions
    - strip_cdata        - replace CDATA sections by normal text content (default: True)
    - compact            - save memory for short text content (default: True)
    - default_doctype    - add a default doctype even if it is not found in the HTML (default: True)
    - collect_ids        - use a hash table of XML IDs for fast access (default: True)
    - huge_tree          - disable security restrictions and support very deep trees
                           and very long text content (only affects libxml2 2.7+)

    Other keyword arguments:

    - encoding - override the document encoding (note: libiconv encoding name)
    - target   - a parser target object that will receive the parse events
    - schema   - an XMLSchema to validate against

    Note that you should avoid sharing parsers between threads for performance
    reasons.
  summary: 'HTMLParser(self, encoding=None, remove_blank_text=False,          remove_comments=False, remove_pis=False, strip_cdata=True,          no_network=True, target=None, schema: XMLSchema =None,          recover=True, compact=True, collect_ids=True, huge_tree=False)'
  signatures: null
  inherits_from:
  - <class 'lxml.etree._FeedParser'>
  - <class 'lxml.etree._BaseParser'>
- name: HTMLParser.close
  kind: callable
  ns: lxml.etree
  description: |-
    close(self)

    Terminates feeding data to this parser.  This tells the parser to
    process any remaining data in the feed buffer, and then returns the
    root Element of the tree that was parsed.

    This method must be called after passing the last chunk of data into
    the ``feed()`` method.  It should only be called when using the feed
    parser interface, all other usage is undefined.
  summary: close(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTMLParser.copy
  kind: callable
  ns: lxml.etree
  description: |-
    copy(self)

    Create a new parser with the same configuration.
  summary: copy(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTMLParser.error_log
  kind: property
  ns: lxml.etree
  description: "The error log of the last parser run.\n        "
  summary: The error log of the last parser run
  signatures: null
  inherits_from: null
- name: HTMLParser.feed
  kind: callable
  ns: lxml.etree
  description: |-
    feed(self, data)

    Feeds data to the parser.  The argument should be an 8-bit string
    buffer containing encoded data, although Unicode is supported as long
    as both string types are not mixed.

    This is the main entry point to the consumer interface of a
    parser.  The parser will parse as much of the XML stream as it
    can on each call.  To finish parsing or to reset the parser,
    call the ``close()`` method.  Both methods may raise
    ParseError if errors occur in the input data.  If an error is
    raised, there is no longer a need to call ``close()``.

    The feed parser interface is independent of the normal parser
    usage.  You can use the same parser as a feed parser and in
    the ``parse()`` function concurrently.
  summary: feed(self, data)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTMLParser.feed_error_log
  kind: property
  ns: lxml.etree
  description: |-
    The error log of the last (or current) run of the feed parser.

    Note that this is local to the feed parser and thus is
    different from what the ``error_log`` property returns.
  summary: The error log of the last (or current) run of the feed parser
  signatures: null
  inherits_from: null
- name: HTMLParser.makeelement
  kind: callable
  ns: lxml.etree
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with this parser.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTMLParser.resolvers
  kind: property
  ns: lxml.etree
  description: The custom resolver registry of this parser.
  summary: The custom resolver registry of this parser
  signatures: null
  inherits_from: null
- name: HTMLParser.set_element_class_lookup
  kind: callable
  ns: lxml.etree
  description: |-
    set_element_class_lookup(self, lookup = None)

    Set a lookup scheme for element classes generated from this parser.

    Reset it by passing None or nothing.
  summary: set_element_class_lookup(self, lookup = None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTMLParser.target
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTMLParser.version
  kind: property
  ns: lxml.etree
  description: The version of the underlying XML parser.
  summary: The version of the underlying XML parser
  signatures: null
  inherits_from: null
- name: LIBXML_COMPILED_VERSION
  kind: const
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LIBXML_VERSION
  kind: const
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LIBXSLT_COMPILED_VERSION
  kind: const
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LIBXSLT_VERSION
  kind: const
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LXML_VERSION
  kind: const
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LxmlError
  kind: class
  ns: lxml.etree
  description: |-
    Main exception base class for lxml.  All other exceptions inherit from
    this one.
  summary: Main exception base class for lxml
  signatures: null
  inherits_from:
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: LxmlError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: LxmlError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LxmlError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: LxmlRegistryError
  kind: class
  ns: lxml.etree
  description: "Base class of lxml registry errors.\n    "
  summary: Base class of lxml registry errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: LxmlRegistryError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: LxmlRegistryError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LxmlRegistryError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError
  kind: class
  ns: lxml.etree
  description: "Base class for all syntax errors.\n    "
  summary: Base class for all syntax errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'SyntaxError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: LxmlSyntaxError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.end_lineno
  kind: property
  ns: lxml.etree
  description: exception end lineno
  summary: exception end lineno
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.end_offset
  kind: property
  ns: lxml.etree
  description: exception end offset
  summary: exception end offset
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.filename
  kind: property
  ns: lxml.etree
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.lineno
  kind: property
  ns: lxml.etree
  description: exception lineno
  summary: exception lineno
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.msg
  kind: property
  ns: lxml.etree
  description: exception msg
  summary: exception msg
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.offset
  kind: property
  ns: lxml.etree
  description: exception offset
  summary: exception offset
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.print_file_and_line
  kind: property
  ns: lxml.etree
  description: exception print_file_and_line
  summary: exception print_file_and_line
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.text
  kind: property
  ns: lxml.etree
  description: exception text
  summary: exception text
  signatures: null
  inherits_from: null
- name: LxmlSyntaxError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: NamespaceRegistryError
  kind: class
  ns: lxml.etree
  description: "Error registering a namespace extension.\n    "
  summary: Error registering a namespace extension
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlRegistryError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NamespaceRegistryError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NamespaceRegistryError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NamespaceRegistryError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PI
  kind: callable
  ns: lxml.etree
  description: |-
    ProcessingInstruction(target, text=None)

    ProcessingInstruction element factory. This factory function creates a
    special element that will be serialized as an XML processing instruction.
  summary: ProcessingInstruction(target, text=None)
  signatures:
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: text
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase
  kind: class
  ns: lxml.etree
  description: |-
    All custom Processing Instruction classes must inherit from this one.

    To create an XML ProcessingInstruction instance, use the ``PI()``
    factory.

    Subclasses *must not* override __init__ or __new__ as it is
    absolutely undefined when these objects will be created or
    destroyed.  All persistent state of PIs must be stored in the
    underlying XML.  If you really need to initialize the object after
    creation, you can implement an ``_init(self)`` method that will be
    called after object creation.
  summary: All custom Processing Instruction classes must inherit from this one
  signatures: null
  inherits_from:
  - <class 'lxml.etree._ProcessingInstruction'>
  - <class 'lxml.etree.__ContentOnlyElement'>
  - <class 'lxml.etree._Element'>
- name: PIBase.addnext
  kind: callable
  ns: lxml.etree
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.addprevious
  kind: callable
  ns: lxml.etree
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.append
  kind: callable
  ns: lxml.etree
  description: append(self, value)
  summary: append(self, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.attrib
  kind: property
  ns: lxml.etree
  description: |-
    Returns a dict containing all pseudo-attributes that can be
    parsed from the text content of this processing instruction.
    Note that modifying the dict currently has no effect on the
    XML node, although this is not guaranteed to stay this way.
  summary: Returns a dict containing all pseudo-attributes that can be
  signatures: null
  inherits_from: null
- name: PIBase.base
  kind: property
  ns: lxml.etree
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: PIBase.clear
  kind: callable
  ns: lxml.etree
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.cssselect
  kind: callable
  ns: lxml.etree
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: PIBase.extend
  kind: callable
  ns: lxml.etree
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.find
  kind: callable
  ns: lxml.etree
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.findall
  kind: callable
  ns: lxml.etree
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.findtext
  kind: callable
  ns: lxml.etree
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.get
  kind: callable
  ns: lxml.etree
  description: |-
    get(self, key, default=None)

    Try to parse pseudo-attributes from the text content of the
    processing instruction, search for one with the given key as
    name and return its associated value.

    Note that this is only a convenience method for the most
    common case that all text content is structured in
    attribute-like name-value pairs with properly quoted values.
    It is not guaranteed to work for all possible text content.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.getchildren
  kind: callable
  ns: lxml.etree
  description: |-
    getchildren(self)

    Returns all direct children.  The elements are returned in document
    order.

    :deprecated: Note that this method has been deprecated as of
      ElementTree 1.3 and lxml 2.0.  New code should use
      ``list(element)`` or simply iterate over elements.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.getiterator
  kind: callable
  ns: lxml.etree
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.getnext
  kind: callable
  ns: lxml.etree
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.getparent
  kind: callable
  ns: lxml.etree
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.getprevious
  kind: callable
  ns: lxml.etree
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.getroottree
  kind: callable
  ns: lxml.etree
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.index
  kind: callable
  ns: lxml.etree
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.insert
  kind: callable
  ns: lxml.etree
  description: insert(self, index, value)
  summary: insert(self, index, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.items
  kind: callable
  ns: lxml.etree
  description: items(self)
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.iter
  kind: callable
  ns: lxml.etree
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.iterancestors
  kind: callable
  ns: lxml.etree
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.iterchildren
  kind: callable
  ns: lxml.etree
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: PIBase.iterdescendants
  kind: callable
  ns: lxml.etree
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.iterfind
  kind: callable
  ns: lxml.etree
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.itersiblings
  kind: callable
  ns: lxml.etree
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: PIBase.itertext
  kind: callable
  ns: lxml.etree
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: PIBase.keys
  kind: callable
  ns: lxml.etree
  description: keys(self)
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.makeelement
  kind: callable
  ns: lxml.etree
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.nsmap
  kind: property
  ns: lxml.etree
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: PIBase.prefix
  kind: property
  ns: lxml.etree
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: PIBase.remove
  kind: callable
  ns: lxml.etree
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.replace
  kind: callable
  ns: lxml.etree
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.set
  kind: callable
  ns: lxml.etree
  description: set(self, key, value)
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.sourceline
  kind: property
  ns: lxml.etree
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: PIBase.tag
  kind: property
  ns: lxml.etree
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: PIBase.tail
  kind: property
  ns: lxml.etree
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: PIBase.target
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PIBase.text
  kind: property
  ns: lxml.etree
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: PIBase.values
  kind: callable
  ns: lxml.etree
  description: values(self)
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PIBase.xpath
  kind: callable
  ns: lxml.etree
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ParseError
  kind: class
  ns: lxml.etree
  description: |-
    Syntax error while parsing an XML document.

    For compatibility with ElementTree 1.3 and later.
  summary: Syntax error while parsing an XML document
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: code
    default: null
    rest: false
  - kind: positional
    name: line
    default: null
    rest: false
  - kind: positional
    name: column
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: ParseError
  inherits_from:
  - <class 'lxml.etree.LxmlSyntaxError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'SyntaxError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ParseError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ParseError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ParseError.end_lineno
  kind: property
  ns: lxml.etree
  description: exception end lineno
  summary: exception end lineno
  signatures: null
  inherits_from: null
- name: ParseError.end_offset
  kind: property
  ns: lxml.etree
  description: exception end offset
  summary: exception end offset
  signatures: null
  inherits_from: null
- name: ParseError.filename
  kind: property
  ns: lxml.etree
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: ParseError.lineno
  kind: property
  ns: lxml.etree
  description: exception lineno
  summary: exception lineno
  signatures: null
  inherits_from: null
- name: ParseError.msg
  kind: property
  ns: lxml.etree
  description: exception msg
  summary: exception msg
  signatures: null
  inherits_from: null
- name: ParseError.offset
  kind: property
  ns: lxml.etree
  description: exception offset
  summary: exception offset
  signatures: null
  inherits_from: null
- name: ParseError.position
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ParseError.print_file_and_line
  kind: property
  ns: lxml.etree
  description: exception print_file_and_line
  summary: exception print_file_and_line
  signatures: null
  inherits_from: null
- name: ParseError.text
  kind: property
  ns: lxml.etree
  description: exception text
  summary: exception text
  signatures: null
  inherits_from: null
- name: ParseError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ParserBasedElementClassLookup
  kind: class
  ns: lxml.etree
  description: |-
    ParserBasedElementClassLookup(self, fallback=None)
    Element class lookup based on the XML parser.
  summary: ParserBasedElementClassLookup(self, fallback=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.FallbackElementClassLookup'>
  - <class 'lxml.etree.ElementClassLookup'>
- name: ParserBasedElementClassLookup.fallback
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ParserBasedElementClassLookup.set_fallback
  kind: callable
  ns: lxml.etree
  description: |-
    set_fallback(self, lookup)

    Sets the fallback scheme for this lookup method.
  summary: set_fallback(self, lookup)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ParserError
  kind: class
  ns: lxml.etree
  description: "Internal lxml parser error.\n    "
  summary: Internal lxml parser error
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ParserError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ParserError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ParserError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProcessingInstruction
  kind: callable
  ns: lxml.etree
  description: |-
    ProcessingInstruction(target, text=None)

    ProcessingInstruction element factory. This factory function creates a
    special element that will be serialized as an XML processing instruction.
  summary: ProcessingInstruction(target, text=None)
  signatures:
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: text
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PyErrorLog
  kind: class
  ns: lxml.etree
  description: |-
    PyErrorLog(self, logger_name=None, logger=None)
    A global error log that connects to the Python stdlib logging package.

    The constructor accepts an optional logger name or a readily
    instantiated logger instance.

    If you want to change the mapping between libxml2's ErrorLevels and Python
    logging levels, you can modify the level_map dictionary from a subclass.

    The default mapping is::

            ErrorLevels.WARNING = logging.WARNING
            ErrorLevels.ERROR   = logging.ERROR
            ErrorLevels.FATAL   = logging.CRITICAL

    You can also override the method ``receive()`` that takes a LogEntry
    object and calls ``self.log(log_entry, format_string, arg1, arg2, ...)``
    with appropriate data.
  summary: PyErrorLog(self, logger_name=None, logger=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree._BaseErrorLog'>
- name: PyErrorLog.copy
  kind: callable
  ns: lxml.etree
  description: "Dummy method that returns an empty error log.\n        "
  summary: Dummy method that returns an empty error log
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PyErrorLog.last_error
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PyErrorLog.level_map
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PyErrorLog.log
  kind: callable
  ns: lxml.etree
  description: |-
    log(self, log_entry, message, *args)

    Called by the .receive() method to log a _LogEntry instance to
    the Python logging system.  This handles the error level
    mapping.

    In the default implementation, the ``message`` argument
    receives a complete log line, and there are no further
    ``args``.  To change the message format, it is best to
    override the .receive() method instead of this one.
  summary: log(self, log_entry, message, *args)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: log_entry
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PyErrorLog.receive
  kind: callable
  ns: lxml.etree
  description: |-
    receive(self, log_entry)

    Receive a _LogEntry instance from the logging system.  Calls
    the .log() method with appropriate parameters::

        self.log(log_entry, repr(log_entry))

    You can override this method to provide your own log output
    format.
  summary: receive(self, log_entry)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: log_entry
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PythonElementClassLookup
  kind: class
  ns: lxml.etree
  description: |-
    PythonElementClassLookup(self, fallback=None)
    Element class lookup based on a subclass method.

    This class lookup scheme allows access to the entire XML tree in
    read-only mode.  To use it, re-implement the ``lookup(self, doc,
    root)`` method in a subclass::

        from lxml import etree, pyclasslookup

        class MyElementClass(etree.ElementBase):
            honkey = True

        class MyLookup(pyclasslookup.PythonElementClassLookup):
            def lookup(self, doc, root):
                if root.tag == "sometag":
                    return MyElementClass
                else:
                    for child in root:
                        if child.tag == "someothertag":
                            return MyElementClass
                # delegate to default
                return None

    If you return None from this method, the fallback will be called.

    The first argument is the opaque document instance that contains
    the Element.  The second argument is a lightweight Element proxy
    implementation that is only valid during the lookup.  Do not try
    to keep a reference to it.  Once the lookup is done, the proxy
    will be invalid.

    Also, you cannot wrap such a read-only Element in an ElementTree,
    and you must take care not to keep a reference to them outside of
    the `lookup()` method.

    Note that the API of the Element objects is not complete.  It is
    purely read-only and does not support all features of the normal
    `lxml.etree` API (such as XPath, extended slicing or some
    iteration methods).

    See https://lxml.de/element_classes.html
  summary: PythonElementClassLookup(self, fallback=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.FallbackElementClassLookup'>
  - <class 'lxml.etree.ElementClassLookup'>
- name: PythonElementClassLookup.fallback
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PythonElementClassLookup.lookup
  kind: callable
  ns: lxml.etree
  description: |-
    lookup(self, doc, element)

    Override this method to implement your own lookup scheme.
  summary: lookup(self, doc, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PythonElementClassLookup.set_fallback
  kind: callable
  ns: lxml.etree
  description: |-
    set_fallback(self, lookup)

    Sets the fallback scheme for this lookup method.
  summary: set_fallback(self, lookup)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: QName
  kind: class
  ns: lxml.etree
  description: |-
    QName(text_or_uri_or_element, tag=None)

    QName wrapper for qualified XML names.

    Pass a tag name by itself or a namespace URI and a tag name to
    create a qualified name.  Alternatively, pass an Element to
    extract its tag name.  ``None`` as first argument is ignored in
    order to allow for generic 2-argument usage.

    The ``text`` property holds the qualified name in
    ``{namespace}tagname`` notation.  The ``namespace`` and
    ``localname`` properties hold the respective parts of the tag
    name.

    You can pass QName objects wherever a tag name is expected.  Also,
    setting Element text from a QName will resolve the namespace prefix
    on assignment and set a qualified text value.  This is helpful in XML
    languages like SOAP or XML-Schema that use prefixed tag names in
    their text content.
  summary: QName(text_or_uri_or_element, tag=None)
  signatures: null
  inherits_from: null
- name: QName.localname
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: QName.namespace
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: QName.text
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RelaxNG
  kind: class
  ns: lxml.etree
  description: |-
    RelaxNG(self, etree=None, file=None)
    Turn a document into a Relax NG validator.

    Either pass a schema as Element or ElementTree, or pass a file or
    filename through the ``file`` keyword argument.
  summary: RelaxNG(self, etree=None, file=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree._Validator'>
- name: RelaxNG.assertValid
  kind: callable
  ns: lxml.etree
  description: |-
    assertValid(self, etree)

    Raises `DocumentInvalid` if the document does not comply with the schema.
  summary: assertValid(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RelaxNG.assert_
  kind: callable
  ns: lxml.etree
  description: |-
    assert_(self, etree)

    Raises `AssertionError` if the document does not comply with the schema.
  summary: assert_(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RelaxNG.error_log
  kind: property
  ns: lxml.etree
  description: The log of validation errors and warnings.
  summary: The log of validation errors and warnings
  signatures: null
  inherits_from: null
- name: RelaxNG.from_rnc_string
  kind: function
  ns: lxml.etree
  description: |-
    Parse a RelaxNG schema in compact syntax from a text string

    Requires the rnc2rng package to be installed.

    Passing the source URL or file path of the source as 'base_url'
    will enable resolving resource references relative to the source.
  summary: Parse a RelaxNG schema in compact syntax from a text string
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: src
    default: null
    rest: false
  - kind: positional
    name: base_url
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: RelaxNG.validate
  kind: callable
  ns: lxml.etree
  description: |-
    validate(self, etree)

    Validate the document using this schema.

    Returns true if document is valid, false if not.
  summary: validate(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: RelaxNGError
  kind: class
  ns: lxml.etree
  description: "Base class for RelaxNG errors.\n    "
  summary: Base class for RelaxNG errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: RelaxNGError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RelaxNGError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RelaxNGError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes
  kind: class
  ns: lxml.etree
  description: Libxml2 RelaxNG error types
  summary: Libxml2 RelaxNG error types
  signatures:
  - type: RelaxNGErrorTypes
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ATTREXTRANS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ATTRNAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ATTRNONS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ATTRVALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ATTRWRONGNS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_CONTENTVALID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_DATAELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_DATATYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_DUPID
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ELEMEXTRANS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ELEMNAME
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ELEMNONS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ELEMNOTEMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ELEMWRONG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_ELEMWRONGNS
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_EXTRACONTENT
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_EXTRADATA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_INTEREXTRA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_INTERNAL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_INTERNODATA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_INTERSEQ
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_INVALIDATTR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_LACKDATA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_LIST
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_LISTELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_LISTEMPTY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_LISTEXTRA
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_MEMORY
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_NODEFINE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_NOELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_NOGRAMMAR
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_NOSTATE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_NOTELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_TEXTWRONG
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_TYPE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_TYPECMP
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_TYPEVAL
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_VALELEM
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_ERR_VALUE
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGErrorTypes.RELAXNG_OK
  kind: property
  ns: lxml.etree
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: RelaxNGParseError
  kind: class
  ns: lxml.etree
  description: "Error while parsing an XML document as RelaxNG.\n    "
  summary: Error while parsing an XML document as RelaxNG
  signatures: null
  inherits_from:
  - <class 'lxml.etree.RelaxNGError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: RelaxNGParseError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RelaxNGParseError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RelaxNGParseError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: RelaxNGValidateError
  kind: class
  ns: lxml.etree
  description: "Error while validating an XML document with a RelaxNG schema.\n    "
  summary: Error while validating an XML document with a RelaxNG schema
  signatures: null
  inherits_from:
  - <class 'lxml.etree.RelaxNGError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: RelaxNGValidateError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RelaxNGValidateError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RelaxNGValidateError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Resolver
  kind: class
  ns: lxml.etree
  description: This is the base class of all resolvers.
  summary: This is the base class of all resolvers
  signatures: null
  inherits_from: null
- name: Resolver.resolve
  kind: callable
  ns: lxml.etree
  description: |-
    resolve(self, system_url, public_id, context)

    Override this method to resolve an external source by
    ``system_url`` and ``public_id``.  The third argument is an
    opaque context object.

    Return the result of one of the ``resolve_*()`` methods.
  summary: resolve(self, system_url, public_id, context)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: system_url
    default: null
    rest: false
  - kind: positional
    name: public_id
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Resolver.resolve_empty
  kind: callable
  ns: lxml.etree
  description: |-
    resolve_empty(self, context)

    Return an empty input document.

    Pass context as parameter.
  summary: resolve_empty(self, context)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Resolver.resolve_file
  kind: callable
  ns: lxml.etree
  description: |-
    resolve_file(self, f, context, base_url=None, close=True)

    Return an open file-like object as input document.

    Pass open file and context as parameters.  You can pass the
    base URL or filename of the file through the ``base_url``
    keyword argument.  If the ``close`` flag is True (the
    default), the file will be closed after reading.

    Note that using ``.resolve_filename()`` is more efficient,
    especially in threaded environments.
  summary: resolve_file(self, f, context, base_url=None, close=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: f
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - name: close
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: Resolver.resolve_filename
  kind: callable
  ns: lxml.etree
  description: |-
    resolve_filename(self, filename, context)

    Return the name of a parsable file as input document.

    Pass filename and context as parameters.  You can also pass a
    URL with an HTTP, FTP or file target.
  summary: resolve_filename(self, filename, context)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Resolver.resolve_string
  kind: callable
  ns: lxml.etree
  description: |-
    resolve_string(self, string, context, base_url=None)

    Return a parsable string as input document.

    Pass data string and context as parameters.  You can pass the
    source URL or filename through the ``base_url`` keyword
    argument.
  summary: resolve_string(self, string, context, base_url=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: string
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: Schematron
  kind: class
  ns: lxml.etree
  description: |-
    Schematron(self, etree=None, file=None)
    A Schematron validator.

    Pass a root Element or an ElementTree to turn it into a validator.
    Alternatively, pass a filename as keyword argument 'file' to parse from
    the file system.

    Schematron is a less well known, but very powerful schema language.  The main
    idea is to use the capabilities of XPath to put restrictions on the structure
    and the content of XML documents.  Here is a simple example::

      >>> schematron = Schematron(XML('''
      ... <schema xmlns="http://www.ascc.net/xml/schematron" >
      ...   <pattern name="id is the only permitted attribute name">
      ...     <rule context="*">
      ...       <report test="@*[not(name()='id')]">Attribute
      ...         <name path="@*[not(name()='id')]"/> is forbidden<name/>
      ...       </report>
      ...     </rule>
      ...   </pattern>
      ... </schema>
      ... '''))

      >>> xml = XML('''
      ... <AAA name="aaa">
      ...   <BBB id="bbb"/>
      ...   <CCC color="ccc"/>
      ... </AAA>
      ... ''')

      >>> schematron.validate(xml)
      0

      >>> xml = XML('''
      ... <AAA id="aaa">
      ...   <BBB id="bbb"/>
      ...   <CCC/>
      ... </AAA>
      ... ''')

      >>> schematron.validate(xml)
      1

    Schematron was added to libxml2 in version 2.6.21.  Before version 2.6.32,
    however, Schematron lacked support for error reporting other than to stderr.
    This version is therefore required to retrieve validation warnings and
    errors in lxml.
  summary: Schematron(self, etree=None, file=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree._Validator'>
- name: Schematron.assertValid
  kind: callable
  ns: lxml.etree
  description: |-
    assertValid(self, etree)

    Raises `DocumentInvalid` if the document does not comply with the schema.
  summary: assertValid(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Schematron.assert_
  kind: callable
  ns: lxml.etree
  description: |-
    assert_(self, etree)

    Raises `AssertionError` if the document does not comply with the schema.
  summary: assert_(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Schematron.error_log
  kind: property
  ns: lxml.etree
  description: The log of validation errors and warnings.
  summary: The log of validation errors and warnings
  signatures: null
  inherits_from: null
- name: Schematron.validate
  kind: callable
  ns: lxml.etree
  description: |-
    validate(self, etree)

    Validate the document using this schema.

    Returns true if document is valid, false if not.
  summary: validate(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SchematronError
  kind: class
  ns: lxml.etree
  description: "Base class of all Schematron errors.\n    "
  summary: Base class of all Schematron errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SchematronError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SchematronError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SchematronError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SchematronParseError
  kind: class
  ns: lxml.etree
  description: "Error while parsing an XML document as Schematron schema.\n    "
  summary: Error while parsing an XML document as Schematron schema
  signatures: null
  inherits_from:
  - <class 'lxml.etree.SchematronError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SchematronParseError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SchematronParseError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SchematronParseError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SchematronValidateError
  kind: class
  ns: lxml.etree
  description: "Error while validating an XML document with a Schematron schema.\n    "
  summary: Error while validating an XML document with a Schematron schema
  signatures: null
  inherits_from:
  - <class 'lxml.etree.SchematronError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SchematronValidateError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SchematronValidateError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SchematronValidateError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SerialisationError
  kind: class
  ns: lxml.etree
  description: "A libxml2 error that occurred during serialisation.\n    "
  summary: A libxml2 error that occurred during serialisation
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SerialisationError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SerialisationError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SerialisationError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SubElement
  kind: callable
  ns: lxml.etree
  description: |-
    SubElement(_parent, _tag, attrib=None, nsmap=None, **_extra)

    Subelement factory.  This function creates an element instance, and
    appends it to an existing element.
  summary: SubElement(_parent, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: _parent
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TreeBuilder
  kind: class
  ns: lxml.etree
  description: |-
    TreeBuilder(self, element_factory=None, parser=None,
                    comment_factory=None, pi_factory=None,
                    insert_comments=True, insert_pis=True)

    Parser target that builds a tree from parse event callbacks.

    The factory arguments can be used to influence the creation of
    elements, comments and processing instructions.

    By default, comments and processing instructions are inserted into
    the tree, but they can be ignored by passing the respective flags.

    The final tree is returned by the ``close()`` method.
  summary: TreeBuilder(self, element_factory=None, parser=None,
  signatures: null
  inherits_from:
  - <class 'lxml.etree._SaxParserTarget'>
- name: TreeBuilder.close
  kind: callable
  ns: lxml.etree
  description: |-
    close(self)

    Flushes the builder buffers, and returns the toplevel document
    element.  Raises XMLSyntaxError on inconsistencies.
  summary: close(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TreeBuilder.comment
  kind: callable
  ns: lxml.etree
  description: |-
    comment(self, comment)

    Creates a comment using the factory, appends it (unless disabled)
    and returns it.
  summary: comment(self, comment)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: comment
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TreeBuilder.data
  kind: callable
  ns: lxml.etree
  description: |-
    data(self, data)

    Adds text to the current element.  The value should be either an
    8-bit string containing ASCII text, or a Unicode string.
  summary: data(self, data)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TreeBuilder.end
  kind: callable
  ns: lxml.etree
  description: |-
    end(self, tag)

    Closes the current element.
  summary: end(self, tag)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: TreeBuilder.pi
  kind: callable
  ns: lxml.etree
  description: |-
    pi(self, target, data=None)

    Creates a processing instruction using the factory, appends it
    (unless disabled) and returns it.
  summary: pi(self, target, data=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: data
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: TreeBuilder.start
  kind: callable
  ns: lxml.etree
  description: |-
    start(self, tag, attrs, nsmap=None)

    Opens a new element.
  summary: start(self, tag, attrs, nsmap=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: attrs
    default: null
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: XInclude
  kind: class
  ns: lxml.etree
  description: |-
    XInclude(self)
    XInclude processor.

    Create an instance and call it on an Element to run XInclude
    processing.
  summary: XInclude(self)
  signatures: null
  inherits_from: null
- name: XInclude.error_log
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XIncludeError
  kind: class
  ns: lxml.etree
  description: "Error during XInclude processing.\n    "
  summary: Error during XInclude processing
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XIncludeError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XIncludeError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XIncludeError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XML
  kind: callable
  ns: lxml.etree
  description: |-
    XML(text, parser=None, base_url=None)

    Parses an XML document or fragment from a string constant.
    Returns the root node (or the result returned by a parser target).
    This function can be used to embed "XML literals" in Python code,
    like in

       >>> root = XML("<root><test/></root>")
       >>> print(root.tag)
       root

    To override the parser with a different ``XMLParser`` you can pass it to
    the ``parser`` keyword argument.

    The ``base_url`` keyword argument allows to set the original base URL of
    the document to support relative Paths when looking up external entities
    (DTD, XInclude, ...).
  summary: XML(text, parser=None, base_url=None)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: XMLDTDID
  kind: callable
  ns: lxml.etree
  description: |-
    XMLDTDID(text, parser=None, base_url=None)

    Parse the text and return a tuple (root node, ID dictionary).  The root
    node is the same as returned by the XML() function.  The dictionary
    contains string-element pairs.  The dictionary keys are the values of ID
    attributes as defined by the DTD.  The elements referenced by the ID are
    stored as dictionary values.

    Note that you must not modify the XML tree if you use the ID dictionary.
    The results are undefined.
  summary: XMLDTDID(text, parser=None, base_url=None)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: XMLID
  kind: callable
  ns: lxml.etree
  description: |-
    XMLID(text, parser=None, base_url=None)

    Parse the text and return a tuple (root node, ID dictionary).  The root
    node is the same as returned by the XML() function.  The dictionary
    contains string-element pairs.  The dictionary keys are the values of 'id'
    attributes.  The elements referenced by the ID are stored as dictionary
    values.
  summary: XMLID(text, parser=None, base_url=None)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: XMLParser
  kind: class
  ns: lxml.etree
  description: |-
    XMLParser(self, encoding=None, attribute_defaults=False, dtd_validation=False, load_dtd=False, no_network=True, ns_clean=False, recover=False, schema: XMLSchema =None, huge_tree=False, remove_blank_text=False, resolve_entities=True, remove_comments=False, remove_pis=False, strip_cdata=True, collect_ids=True, target=None, compact=True)

    The XML parser.

    Parsers can be supplied as additional argument to various parse
    functions of the lxml API.  A default parser is always available
    and can be replaced by a call to the global function
    'set_default_parser'.  New parsers can be created at any time
    without a major run-time overhead.

    The keyword arguments in the constructor are mainly based on the
    libxml2 parser configuration.  A DTD will also be loaded if DTD
    validation or attribute default values are requested (unless you
    additionally provide an XMLSchema from which the default
    attributes can be read).

    Available boolean keyword arguments:

    - attribute_defaults - inject default attributes from DTD or XMLSchema
    - dtd_validation     - validate against a DTD referenced by the document
    - load_dtd           - use DTD for parsing
    - no_network         - prevent network access for related files (default: True)
    - ns_clean           - clean up redundant namespace declarations
    - recover            - try hard to parse through broken XML
    - remove_blank_text  - discard blank text nodes that appear ignorable
    - remove_comments    - discard comments
    - remove_pis         - discard processing instructions
    - strip_cdata        - replace CDATA sections by normal text content (default: True)
    - compact            - save memory for short text content (default: True)
    - collect_ids        - use a hash table of XML IDs for fast access (default: True, always True with DTD validation)
    - huge_tree          - disable security restrictions and support very deep trees
                           and very long text content (only affects libxml2 2.7+)

    Other keyword arguments:

    - resolve_entities - replace entities by their text value: False for keeping the
          entity references, True for resolving them, and 'internal' for resolving
          internal definitions only (no external file/URL access).
          The default used to be True and was changed to 'internal' in lxml 5.0.
    - encoding - override the document encoding (note: libiconv encoding name)
    - target   - a parser target object that will receive the parse events
    - schema   - an XMLSchema to validate against

    Note that you should avoid sharing parsers between threads.  While this is
    not harmful, it is more efficient to use separate parsers.  This does not
    apply to the default parser.
  summary: 'XMLParser(self, encoding=None, attribute_defaults=False, dtd_validation=False, load_dtd=False, no_network=True, ns_clean=False, recover=False, schema: XMLSchema =None, huge_tree=False, remove_blank_text=False, resolve_entities=True, remove_comments=False, remove_pis=False, strip_cdata=True, collect_ids=True, target=None, compact=True)'
  signatures: null
  inherits_from:
  - <class 'lxml.etree._FeedParser'>
  - <class 'lxml.etree._BaseParser'>
- name: XMLParser.close
  kind: callable
  ns: lxml.etree
  description: |-
    close(self)

    Terminates feeding data to this parser.  This tells the parser to
    process any remaining data in the feed buffer, and then returns the
    root Element of the tree that was parsed.

    This method must be called after passing the last chunk of data into
    the ``feed()`` method.  It should only be called when using the feed
    parser interface, all other usage is undefined.
  summary: close(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XMLParser.copy
  kind: callable
  ns: lxml.etree
  description: |-
    copy(self)

    Create a new parser with the same configuration.
  summary: copy(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XMLParser.error_log
  kind: property
  ns: lxml.etree
  description: "The error log of the last parser run.\n        "
  summary: The error log of the last parser run
  signatures: null
  inherits_from: null
- name: XMLParser.feed
  kind: callable
  ns: lxml.etree
  description: |-
    feed(self, data)

    Feeds data to the parser.  The argument should be an 8-bit string
    buffer containing encoded data, although Unicode is supported as long
    as both string types are not mixed.

    This is the main entry point to the consumer interface of a
    parser.  The parser will parse as much of the XML stream as it
    can on each call.  To finish parsing or to reset the parser,
    call the ``close()`` method.  Both methods may raise
    ParseError if errors occur in the input data.  If an error is
    raised, there is no longer a need to call ``close()``.

    The feed parser interface is independent of the normal parser
    usage.  You can use the same parser as a feed parser and in
    the ``parse()`` function concurrently.
  summary: feed(self, data)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XMLParser.feed_error_log
  kind: property
  ns: lxml.etree
  description: |-
    The error log of the last (or current) run of the feed parser.

    Note that this is local to the feed parser and thus is
    different from what the ``error_log`` property returns.
  summary: The error log of the last (or current) run of the feed parser
  signatures: null
  inherits_from: null
- name: XMLParser.makeelement
  kind: callable
  ns: lxml.etree
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with this parser.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: XMLParser.resolvers
  kind: property
  ns: lxml.etree
  description: The custom resolver registry of this parser.
  summary: The custom resolver registry of this parser
  signatures: null
  inherits_from: null
- name: XMLParser.set_element_class_lookup
  kind: callable
  ns: lxml.etree
  description: |-
    set_element_class_lookup(self, lookup = None)

    Set a lookup scheme for element classes generated from this parser.

    Reset it by passing None or nothing.
  summary: set_element_class_lookup(self, lookup = None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: XMLParser.target
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XMLParser.version
  kind: property
  ns: lxml.etree
  description: The version of the underlying XML parser.
  summary: The version of the underlying XML parser
  signatures: null
  inherits_from: null
- name: XMLSchema
  kind: class
  ns: lxml.etree
  description: |-
    XMLSchema(self, etree=None, file=None)
    Turn a document into an XML Schema validator.

    Either pass a schema as Element or ElementTree, or pass a file or
    filename through the ``file`` keyword argument.

    Passing the ``attribute_defaults`` boolean option will make the
    schema insert default/fixed attributes into validated documents.
  summary: XMLSchema(self, etree=None, file=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree._Validator'>
- name: XMLSchema.assertValid
  kind: callable
  ns: lxml.etree
  description: |-
    assertValid(self, etree)

    Raises `DocumentInvalid` if the document does not comply with the schema.
  summary: assertValid(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XMLSchema.assert_
  kind: callable
  ns: lxml.etree
  description: |-
    assert_(self, etree)

    Raises `AssertionError` if the document does not comply with the schema.
  summary: assert_(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XMLSchema.error_log
  kind: property
  ns: lxml.etree
  description: The log of validation errors and warnings.
  summary: The log of validation errors and warnings
  signatures: null
  inherits_from: null
- name: XMLSchema.validate
  kind: callable
  ns: lxml.etree
  description: |-
    validate(self, etree)

    Validate the document using this schema.

    Returns true if document is valid, false if not.
  summary: validate(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XMLSchemaError
  kind: class
  ns: lxml.etree
  description: "Base class of all XML Schema errors\n    "
  summary: Base class of all XML Schema errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XMLSchemaError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XMLSchemaError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XMLSchemaError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XMLSchemaParseError
  kind: class
  ns: lxml.etree
  description: "Error while parsing an XML document as XML Schema.\n    "
  summary: Error while parsing an XML document as XML Schema
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XMLSchemaError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XMLSchemaParseError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XMLSchemaParseError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XMLSchemaParseError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XMLSchemaValidateError
  kind: class
  ns: lxml.etree
  description: "Error while validating an XML document with an XML Schema.\n    "
  summary: Error while validating an XML document with an XML Schema
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XMLSchemaError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XMLSchemaValidateError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XMLSchemaValidateError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XMLSchemaValidateError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XMLSyntaxError
  kind: class
  ns: lxml.etree
  description: "Syntax error while parsing an XML document.\n    "
  summary: Syntax error while parsing an XML document
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: code
    default: null
    rest: false
  - kind: positional
    name: line
    default: null
    rest: false
  - kind: positional
    name: column
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: XMLSyntaxError
  inherits_from:
  - <class 'lxml.etree.ParseError'>
  - <class 'lxml.etree.LxmlSyntaxError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'SyntaxError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XMLSyntaxError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.end_lineno
  kind: property
  ns: lxml.etree
  description: exception end lineno
  summary: exception end lineno
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.end_offset
  kind: property
  ns: lxml.etree
  description: exception end offset
  summary: exception end offset
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.filename
  kind: property
  ns: lxml.etree
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.lineno
  kind: property
  ns: lxml.etree
  description: exception lineno
  summary: exception lineno
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.msg
  kind: property
  ns: lxml.etree
  description: exception msg
  summary: exception msg
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.offset
  kind: property
  ns: lxml.etree
  description: exception offset
  summary: exception offset
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.position
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.print_file_and_line
  kind: property
  ns: lxml.etree
  description: exception print_file_and_line
  summary: exception print_file_and_line
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.text
  kind: property
  ns: lxml.etree
  description: exception text
  summary: exception text
  signatures: null
  inherits_from: null
- name: XMLSyntaxError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPath
  kind: class
  ns: lxml.etree
  description: |-
    XPath(self, path, namespaces=None, extensions=None, regexp=True, smart_strings=True)
    A compiled XPath expression that can be called on Elements and ElementTrees.

    Besides the XPath expression, you can pass prefix-namespace
    mappings and extension functions to the constructor through the
    keyword arguments ``namespaces`` and ``extensions``.  EXSLT
    regular expression support can be disabled with the 'regexp'
    boolean keyword (defaults to True).  Smart strings will be
    returned for string results unless you pass
    ``smart_strings=False``.
  summary: XPath(self, path, namespaces=None, extensions=None, regexp=True, smart_strings=True)
  signatures: null
  inherits_from:
  - <class 'lxml.etree._XPathEvaluatorBase'>
- name: XPath.error_log
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XPath.path
  kind: property
  ns: lxml.etree
  description: "The literal XPath expression.\n        "
  summary: The literal XPath expression
  signatures: null
  inherits_from: null
- name: XPathDocumentEvaluator
  kind: class
  ns: lxml.etree
  description: |-
    XPathDocumentEvaluator(self, etree, namespaces=None, extensions=None, regexp=True, smart_strings=True)
    Create an XPath evaluator for an ElementTree.

    Additional namespace declarations can be passed with the
    'namespace' keyword argument.  EXSLT regular expression support
    can be disabled with the 'regexp' boolean keyword (defaults to
    True).  Smart strings will be returned for string results unless
    you pass ``smart_strings=False``.
  summary: XPathDocumentEvaluator(self, etree, namespaces=None, extensions=None, regexp=True, smart_strings=True)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XPathElementEvaluator'>
  - <class 'lxml.etree._XPathEvaluatorBase'>
- name: XPathDocumentEvaluator.error_log
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XPathDocumentEvaluator.register_namespace
  kind: callable
  ns: lxml.etree
  description: "Register a namespace with the XPath context.\n        "
  summary: Register a namespace with the XPath context
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: null
    rest: false
  - kind: positional
    name: uri
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XPathDocumentEvaluator.register_namespaces
  kind: callable
  ns: lxml.etree
  description: "Register a prefix -> uri dict.\n        "
  summary: Register a prefix -> uri dict
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XPathError
  kind: class
  ns: lxml.etree
  description: "Base class of all XPath errors.\n    "
  summary: Base class of all XPath errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XPathError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPathError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XPathError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPathEvalError
  kind: class
  ns: lxml.etree
  description: "Error during XPath evaluation.\n    "
  summary: Error during XPath evaluation
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XPathError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XPathEvalError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPathEvalError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XPathEvalError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPathEvaluator
  kind: callable
  ns: lxml.etree
  description: |-
    XPathEvaluator(etree_or_element, namespaces=None, extensions=None, regexp=True, smart_strings=True)

    Creates an XPath evaluator for an ElementTree or an Element.

    The resulting object can be called with an XPath expression as argument
    and XPath variables provided as keyword arguments.

    Additional namespace declarations can be passed with the
    'namespace' keyword argument.  EXSLT regular expression support
    can be disabled with the 'regexp' boolean keyword (defaults to
    True).  Smart strings will be returned for string results unless
    you pass ``smart_strings=False``.
  summary: XPathEvaluator(etree_or_element, namespaces=None, extensions=None, regexp=True, smart_strings=True)
  signatures:
  - kind: positional
    name: etree_or_element
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: regexp
    default: 'True'
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: XPathFunctionError
  kind: class
  ns: lxml.etree
  description: "Internal error looking up an XPath extension function.\n    "
  summary: Internal error looking up an XPath extension function
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XPathEvalError'>
  - <class 'lxml.etree.XPathError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XPathFunctionError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPathFunctionError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XPathFunctionError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPathResultError
  kind: class
  ns: lxml.etree
  description: "Error handling an XPath result.\n    "
  summary: Error handling an XPath result
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XPathEvalError'>
  - <class 'lxml.etree.XPathError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XPathResultError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPathResultError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XPathResultError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPathSyntaxError
  kind: class
  ns: lxml.etree
  description: "Base class for all syntax errors.\n    "
  summary: Base class for all syntax errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlSyntaxError'>
  - <class 'lxml.etree.XPathError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'SyntaxError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XPathSyntaxError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.end_lineno
  kind: property
  ns: lxml.etree
  description: exception end lineno
  summary: exception end lineno
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.end_offset
  kind: property
  ns: lxml.etree
  description: exception end offset
  summary: exception end offset
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.filename
  kind: property
  ns: lxml.etree
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.lineno
  kind: property
  ns: lxml.etree
  description: exception lineno
  summary: exception lineno
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.msg
  kind: property
  ns: lxml.etree
  description: exception msg
  summary: exception msg
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.offset
  kind: property
  ns: lxml.etree
  description: exception offset
  summary: exception offset
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.print_file_and_line
  kind: property
  ns: lxml.etree
  description: exception print_file_and_line
  summary: exception print_file_and_line
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.text
  kind: property
  ns: lxml.etree
  description: exception text
  summary: exception text
  signatures: null
  inherits_from: null
- name: XPathSyntaxError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLT
  kind: class
  ns: lxml.etree
  description: |-
    XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)

    Turn an XSL document into an XSLT object.

    Calling this object on a tree or Element will execute the XSLT::

        transform = etree.XSLT(xsl_tree)
        result = transform(xml_tree)

    Keyword arguments of the constructor:

    - extensions: a dict mapping ``(namespace, name)`` pairs to
      extension functions or extension elements
    - regexp: enable exslt regular expression support in XPath
      (default: True)
    - access_control: access restrictions for network or file
      system (see `XSLTAccessControl`)

    Keyword arguments of the XSLT call:

    - profile_run: enable XSLT profiling and make the profile available
      as XML document in ``result.xslt_profile`` (default: False)

    Other keyword arguments of the call are passed to the stylesheet
    as parameters.
  summary: XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)
  signatures: null
  inherits_from: null
- name: XSLT.error_log
  kind: property
  ns: lxml.etree
  description: The log of errors and warnings of an XSLT execution.
  summary: The log of errors and warnings of an XSLT execution
  signatures: null
  inherits_from: null
- name: XSLT.set_global_max_depth
  kind: callable
  ns: lxml.etree
  description: |-
    set_global_max_depth(max_depth)

    The maximum traversal depth that the stylesheet engine will allow.
    This does not only count the template recursion depth but also takes
    the number of variables/parameters into account.  The required setting
    for a run depends on both the stylesheet and the input data.

    Example::

        XSLT.set_global_max_depth(5000)

    Note that this is currently a global, module-wide setting because
    libxslt does not support it at a per-stylesheet level.
  summary: set_global_max_depth(max_depth)
  signatures:
  - kind: positional
    name: max_depth
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XSLT.strparam
  kind: callable
  ns: lxml.etree
  description: |-
    strparam(strval)

    Mark an XSLT string parameter that requires quote escaping
    before passing it into the transformation.  Use it like this::

        result = transform(doc, some_strval = XSLT.strparam(
            '''it's "Monty Python's" ...'''))

    Escaped string parameters can be reused without restriction.
  summary: strparam(strval)
  signatures:
  - kind: positional
    name: strval
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XSLT.tostring
  kind: callable
  ns: lxml.etree
  description: |-
    tostring(self, result_tree)

    Save result doc to string based on stylesheet output method.

    :deprecated: use str(result_tree) instead.
  summary: tostring(self, result_tree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: result_tree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XSLTAccessControl
  kind: class
  ns: lxml.etree
  description: |-
    XSLTAccessControl(self, read_file=True, write_file=True, create_dir=True, read_network=True, write_network=True)

    Access control for XSLT: reading/writing files, directories and
    network I/O.  Access to a type of resource is granted or denied by
    passing any of the following boolean keyword arguments.  All of
    them default to True to allow access.

    - read_file
    - write_file
    - create_dir
    - read_network
    - write_network

    For convenience, there is also a class member `DENY_ALL` that
    provides an XSLTAccessControl instance that is readily configured
    to deny everything, and a `DENY_WRITE` member that denies all
    write access but allows read access.

    See `XSLT`.
  summary: XSLTAccessControl(self, read_file=True, write_file=True, create_dir=True, read_network=True, write_network=True)
  signatures: null
  inherits_from: null
- name: XSLTAccessControl.DENY_ALL
  kind: property
  ns: lxml.etree
  description: |-
    XSLTAccessControl(self, read_file=True, write_file=True, create_dir=True, read_network=True, write_network=True)

    Access control for XSLT: reading/writing files, directories and
    network I/O.  Access to a type of resource is granted or denied by
    passing any of the following boolean keyword arguments.  All of
    them default to True to allow access.

    - read_file
    - write_file
    - create_dir
    - read_network
    - write_network

    For convenience, there is also a class member `DENY_ALL` that
    provides an XSLTAccessControl instance that is readily configured
    to deny everything, and a `DENY_WRITE` member that denies all
    write access but allows read access.

    See `XSLT`.
  summary: XSLTAccessControl(self, read_file=True, write_file=True, create_dir=True, read_network=True, write_network=True)
  signatures: null
  inherits_from: null
- name: XSLTAccessControl.DENY_WRITE
  kind: property
  ns: lxml.etree
  description: |-
    XSLTAccessControl(self, read_file=True, write_file=True, create_dir=True, read_network=True, write_network=True)

    Access control for XSLT: reading/writing files, directories and
    network I/O.  Access to a type of resource is granted or denied by
    passing any of the following boolean keyword arguments.  All of
    them default to True to allow access.

    - read_file
    - write_file
    - create_dir
    - read_network
    - write_network

    For convenience, there is also a class member `DENY_ALL` that
    provides an XSLTAccessControl instance that is readily configured
    to deny everything, and a `DENY_WRITE` member that denies all
    write access but allows read access.

    See `XSLT`.
  summary: XSLTAccessControl(self, read_file=True, write_file=True, create_dir=True, read_network=True, write_network=True)
  signatures: null
  inherits_from: null
- name: XSLTAccessControl.options
  kind: property
  ns: lxml.etree
  description: The access control configuration as a map of options.
  summary: The access control configuration as a map of options
  signatures: null
  inherits_from: null
- name: XSLTApplyError
  kind: class
  ns: lxml.etree
  description: "Error running an XSL transformation.\n    "
  summary: Error running an XSL transformation
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XSLTError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XSLTApplyError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLTApplyError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XSLTApplyError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLTError
  kind: class
  ns: lxml.etree
  description: "Base class of all XSLT errors.\n    "
  summary: Base class of all XSLT errors
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XSLTError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLTError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XSLTError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLTExtension
  kind: class
  ns: lxml.etree
  description: "Base class of an XSLT extension element.\n    "
  summary: Base class of an XSLT extension element
  signatures: null
  inherits_from: null
- name: XSLTExtension.apply_templates
  kind: callable
  ns: lxml.etree
  description: |-
    apply_templates(self, context, node, output_parent=None, elements_only=False, remove_blank_text=False)

    Call this method to retrieve the result of applying templates
    to an element.

    The return value is a list of elements or text strings that
    were generated by the XSLT processor.  If you pass
    ``elements_only=True``, strings will be discarded from the result
    list.  The option ``remove_blank_text=True`` will only discard
    strings that consist entirely of whitespace (e.g. formatting).
    These options do not apply to Elements, only to bare string results.

    If you pass an Element as `output_parent` parameter, the result
    will instead be appended to the element (including attributes
    etc.) and the return value will be `None`.  This is a safe way
    to generate content into the output document directly, without
    having to take care of special values like text or attributes.
    Note that the string discarding options will be ignored in this
    case.
  summary: apply_templates(self, context, node, output_parent=None, elements_only=False, remove_blank_text=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: node
    default: null
    rest: false
  - kind: positional
    name: output_parent
    default: None
    rest: false
  - name: elements_only
    default: 'False'
    rest: false
    kind: kw-only
  - name: remove_blank_text
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: XSLTExtension.execute
  kind: callable
  ns: lxml.etree
  description: |-
    execute(self, context, self_node, input_node, output_parent)
    Execute this extension element.

    Subclasses must override this method.  They may append
    elements to the `output_parent` element here, or set its text
    content.  To this end, the `input_node` provides read-only
    access to the current node in the input document, and the
    `self_node` points to the extension element in the stylesheet.

    Note that the `output_parent` parameter may be `None` if there
    is no parent element in the current context (e.g. no content
    was added to the output tree yet).
  summary: execute(self, context, self_node, input_node, output_parent)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: self_node
    default: null
    rest: false
  - kind: positional
    name: input_node
    default: null
    rest: false
  - kind: positional
    name: output_parent
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: XSLTExtension.process_children
  kind: callable
  ns: lxml.etree
  description: |-
    process_children(self, context, output_parent=None, elements_only=False, remove_blank_text=False)

    Call this method to process the XSLT content of the extension
    element itself.

    The return value is a list of elements or text strings that
    were generated by the XSLT processor.  If you pass
    ``elements_only=True``, strings will be discarded from the result
    list.  The option ``remove_blank_text=True`` will only discard
    strings that consist entirely of whitespace (e.g. formatting).
    These options do not apply to Elements, only to bare string results.

    If you pass an Element as `output_parent` parameter, the result
    will instead be appended to the element (including attributes
    etc.) and the return value will be `None`.  This is a safe way
    to generate content into the output document directly, without
    having to take care of special values like text or attributes.
    Note that the string discarding options will be ignored in this
    case.
  summary: process_children(self, context, output_parent=None, elements_only=False, remove_blank_text=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context
    default: null
    rest: false
  - kind: positional
    name: output_parent
    default: None
    rest: false
  - name: elements_only
    default: 'False'
    rest: false
    kind: kw-only
  - name: remove_blank_text
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: XSLTExtensionError
  kind: class
  ns: lxml.etree
  description: "Error registering an XSLT extension.\n    "
  summary: Error registering an XSLT extension
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XSLTError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XSLTExtensionError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLTExtensionError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XSLTExtensionError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLTParseError
  kind: class
  ns: lxml.etree
  description: "Error parsing a stylesheet document.\n    "
  summary: Error parsing a stylesheet document
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XSLTError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XSLTParseError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLTParseError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XSLTParseError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLTSaveError
  kind: class
  ns: lxml.etree
  description: "Error serialising an XSLT result.\n    "
  summary: Error serialising an XSLT result
  signatures: null
  inherits_from:
  - <class 'lxml.etree.XSLTError'>
  - <class 'lxml.etree.SerialisationError'>
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: XSLTSaveError.add_note
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: XSLTSaveError.args
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: XSLTSaveError.with_traceback
  kind: callable
  ns: lxml.etree
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: canonicalize
  kind: callable
  ns: lxml.etree
  description: |-
    Convert XML to its C14N 2.0 serialised form.

    If *out* is provided, it must be a file or file-like object that receives
    the serialised canonical XML output (text, not bytes) through its ``.write()``
    method.  To write to a file, open it in text mode with encoding "utf-8".
    If *out* is not provided, this function returns the output as text string.

    Either *xml_data* (an XML string, tree or Element) or *file*
    (a file path or file-like object) must be provided as input.

    The configuration options are the same as for the ``C14NWriterTarget``.
  summary: Convert XML to its C14N 2
  signatures:
  - kind: positional
    name: xml_data
    default: None
    rest: false
  - name: out
    default: None
    rest: false
    kind: kw-only
  - name: from_file
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: cleanup_namespaces
  kind: callable
  ns: lxml.etree
  description: |-
    cleanup_namespaces(tree_or_element, top_nsmap=None, keep_ns_prefixes=None)

    Remove all namespace declarations from a subtree that are not used
    by any of the elements or attributes in that tree.

    If a 'top_nsmap' is provided, it must be a mapping from prefixes
    to namespace URIs.  These namespaces will be declared on the top
    element of the subtree before running the cleanup, which allows
    moving namespace declarations to the top of the tree.

    If a 'keep_ns_prefixes' is provided, it must be a list of prefixes.
    These prefixes will not be removed as part of the cleanup.
  summary: cleanup_namespaces(tree_or_element, top_nsmap=None, keep_ns_prefixes=None)
  signatures:
  - kind: positional
    name: tree_or_element
    default: null
    rest: false
  - kind: positional
    name: top_nsmap
    default: None
    rest: false
  - kind: positional
    name: keep_ns_prefixes
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: clear_error_log
  kind: callable
  ns: lxml.etree
  description: |-
    clear_error_log()

    Clear the global error log.  Note that this log is already bound to a
    fixed size.

    Note: since lxml 2.2, the global error log is local to a thread
    and this function will only clear the global error log of the
    current thread.
  summary: clear_error_log()
  signatures:
  - type: '?'
  inherits_from: null
- name: dump
  kind: callable
  ns: lxml.etree
  description: |-
    dump(elem, pretty_print=True, with_tail=True)

    Writes an element tree or element structure to sys.stdout. This function
    should be used for debugging only.
  summary: dump(elem, pretty_print=True, with_tail=True)
  signatures:
  - kind: positional
    name: elem
    default: null
    rest: false
  - name: pretty_print
    default: 'True'
    rest: false
    kind: kw-only
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: fromstring
  kind: callable
  ns: lxml.etree
  description: |-
    fromstring(text, parser=None, base_url=None)

    Parses an XML document or fragment from a string.  Returns the
    root node (or the result returned by a parser target).

    To override the default parser with a different parser you can pass it to
    the ``parser`` keyword argument.

    The ``base_url`` keyword argument allows to set the original base URL of
    the document to support relative Paths when looking up external entities
    (DTD, XInclude, ...).
  summary: fromstring(text, parser=None, base_url=None)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: fromstringlist
  kind: callable
  ns: lxml.etree
  description: |-
    fromstringlist(strings, parser=None)

    Parses an XML document from a sequence of strings.  Returns the
    root node (or the result returned by a parser target).

    To override the default parser with a different parser you can pass it to
    the ``parser`` keyword argument.
  summary: fromstringlist(strings, parser=None)
  signatures:
  - kind: positional
    name: strings
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: get_default_parser
  kind: callable
  ns: lxml.etree
  description: get_default_parser()
  summary: get_default_parser()
  signatures:
  - type: '?'
  inherits_from: null
- name: iselement
  kind: callable
  ns: lxml.etree
  description: |-
    iselement(element)

    Checks if an object appears to be a valid element object.
  summary: iselement(element)
  signatures:
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: iterparse
  kind: class
  ns: lxml.etree
  description: |-
    iterparse(self, source, events=("end",), tag=None,                   attribute_defaults=False, dtd_validation=False,                   load_dtd=False, no_network=True, remove_blank_text=False,                   remove_comments=False, remove_pis=False, encoding=None,                   html=False, recover=None, huge_tree=False, schema=None)

    Incremental parser.

    Parses XML into a tree and generates tuples (event, element) in a
    SAX-like fashion. ``event`` is any of 'start', 'end', 'start-ns',
    'end-ns'.

    For 'start' and 'end', ``element`` is the Element that the parser just
    found opening or closing.  For 'start-ns', it is a tuple (prefix, URI) of
    a new namespace declaration.  For 'end-ns', it is simply None.  Note that
    all start and end events are guaranteed to be properly nested.

    The keyword argument ``events`` specifies a sequence of event type names
    that should be generated.  By default, only 'end' events will be
    generated.

    The additional ``tag`` argument restricts the 'start' and 'end' events to
    those elements that match the given tag.  The ``tag`` argument can also be
    a sequence of tags to allow matching more than one tag.  By default,
    events are generated for all elements.  Note that the 'start-ns' and
    'end-ns' events are not impacted by this restriction.

    The other keyword arguments in the constructor are mainly based on the
    libxml2 parser configuration.  A DTD will also be loaded if validation or
    attribute default values are requested.

    Available boolean keyword arguments:
     - attribute_defaults: read default attributes from DTD
     - dtd_validation: validate (if DTD is available)
     - load_dtd: use DTD for parsing
     - no_network: prevent network access for related files
     - remove_blank_text: discard blank text nodes
     - remove_comments: discard comments
     - remove_pis: discard processing instructions
     - strip_cdata: replace CDATA sections by normal text content (default: True)
     - compact: safe memory for short text content (default: True)
     - resolve_entities: replace entities by their text value (default: True)
     - huge_tree: disable security restrictions and support very deep trees
                  and very long text content (only affects libxml2 2.7+)
     - html: parse input as HTML (default: XML)
     - recover: try hard to parse through broken input (default: True for HTML,
                False otherwise)

    Other keyword arguments:
     - encoding: override the document encoding
     - schema: an XMLSchema to validate against
  summary: iterparse(self, source, events=("end",), tag=None,          attribute_defaults=False, dtd_validation=False,          load_dtd=False, no_network=True, remove_blank_text=False,          remove_comments=False, remove_pis=False, encoding=None,          html=False, recover=None, huge_tree=False, schema=None)
  signatures: null
  inherits_from: null
- name: iterparse.error_log
  kind: property
  ns: lxml.etree
  description: "The error log of the last (or current) parser run.\n        "
  summary: The error log of the last (or current) parser run
  signatures: null
  inherits_from: null
- name: iterparse.makeelement
  kind: callable
  ns: lxml.etree
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with this parser.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: iterparse.resolvers
  kind: property
  ns: lxml.etree
  description: "The custom resolver registry of the last (or current) parser run.\n        "
  summary: The custom resolver registry of the last (or current) parser run
  signatures: null
  inherits_from: null
- name: iterparse.root
  kind: property
  ns: lxml.etree
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: iterparse.set_element_class_lookup
  kind: callable
  ns: lxml.etree
  description: |-
    set_element_class_lookup(self, lookup = None)

    Set a lookup scheme for element classes generated from this parser.

    Reset it by passing None or nothing.
  summary: set_element_class_lookup(self, lookup = None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lookup
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: iterparse.version
  kind: property
  ns: lxml.etree
  description: The version of the underlying XML parser.
  summary: The version of the underlying XML parser
  signatures: null
  inherits_from: null
- name: iterwalk
  kind: class
  ns: lxml.etree
  description: |-
    iterwalk(self, element_or_tree, events=("end",), tag=None)

    A tree walker that generates events from an existing tree as if it
    was parsing XML data with ``iterparse()``.

    Just as for ``iterparse()``, the ``tag`` argument can be a single tag or a
    sequence of tags.

    After receiving a 'start' or 'start-ns' event, the children and
    descendants of the current element can be excluded from iteration
    by calling the ``skip_subtree()`` method.
  summary: iterwalk(self, element_or_tree, events=("end",), tag=None)
  signatures: null
  inherits_from: null
- name: iterwalk.skip_subtree
  kind: callable
  ns: lxml.etree
  description: |-
    Prevent descending into the current subtree.
    Instead, the next returned event will be the 'end' event of the current element
    (if included), ignoring any children or descendants.

    This has no effect right after an 'end' or 'end-ns' event.
  summary: Prevent descending into the current subtree
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: parse
  kind: callable
  ns: lxml.etree
  description: |-
    parse(source, parser=None, base_url=None)

    Return an ElementTree object loaded with source elements.  If no parser
    is provided as second argument, the default parser is used.

    The ``source`` can be any of the following:

    - a file name/path
    - a file object
    - a file-like object
    - a URL using the HTTP or FTP protocol

    To parse from a string, use the ``fromstring()`` function instead.

    Note that it is generally faster to parse from a file path or URL
    than from an open file object or file-like object.  Transparent
    decompression from gzip compressed sources is supported (unless
    explicitly disabled in libxml2).

    The ``base_url`` keyword allows setting a URL for the document
    when parsing from a file-like object.  This is needed when looking
    up external entities (DTD, XInclude, ...) with relative paths.
  summary: parse(source, parser=None, base_url=None)
  signatures:
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: parseid
  kind: callable
  ns: lxml.etree
  description: |-
    parseid(source, parser=None)

    Parses the source into a tuple containing an ElementTree object and an
    ID dictionary.  If no parser is provided as second argument, the default
    parser is used.

    Note that you must not modify the XML tree if you use the ID dictionary.
    The results are undefined.
  summary: parseid(source, parser=None)
  signatures:
  - kind: positional
    name: source
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: register_namespace
  kind: callable
  ns: lxml.etree
  description: |-
    Registers a namespace prefix that newly created Elements in that
    namespace will use.  The registry is global, and any existing
    mapping for either the given prefix or the namespace URI will be
    removed.
  summary: Registers a namespace prefix that newly created Elements in that
  signatures:
  - kind: positional
    name: prefix
    default: null
    rest: false
  - kind: positional
    name: uri
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: set_default_parser
  kind: callable
  ns: lxml.etree
  description: |-
    set_default_parser(parser=None)

    Set a default parser for the current thread.  This parser is used
    globally whenever no parser is supplied to the various parse functions of
    the lxml API.  If this function is called without a parser (or if it is
    None), the default parser is reset to the original configuration.

    Note that the pre-installed default parser is not thread-safe.  Avoid the
    default parser in multi-threaded environments.  You can create a separate
    parser for each thread explicitly or use a parser pool.
  summary: set_default_parser(parser=None)
  signatures:
  - kind: positional
    name: parser
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: set_element_class_lookup
  kind: callable
  ns: lxml.etree
  description: "set_element_class_lookup(lookup = None)\n\nSet the global element class lookup method.\n\nThis defines the main entry point for looking up element implementations.\nThe standard implementation uses the :class:`ParserBasedElementClassLookup`\nto delegate to different lookup schemes for each parser. \n\n.. warning::\n\n    This should only be changed by applications, not by library packages.\n    In most cases, parser specific lookups should be preferred,\n    which can be configured via\n    :meth:`~lxml.etree.XMLParser.set_element_class_lookup`\n    (and the same for HTML parsers).\n\n    Globally replacing the element class lookup by something other than a\n    :class:`ParserBasedElementClassLookup` will prevent parser specific lookup\n    schemes from working. Several tools rely on parser specific lookups,\n    including :mod:`lxml.html` and :mod:`lxml.objectify`."
  summary: set_element_class_lookup(lookup = None)
  signatures:
  - kind: positional
    name: lookup
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: strip_attributes
  kind: callable
  ns: lxml.etree
  description: |-
    strip_attributes(tree_or_element, *attribute_names)

    Delete all attributes with the provided attribute names from an
    Element (or ElementTree) and its descendants.

    Attribute names can contain wildcards as in `_Element.iter`.

    Example usage::

        strip_attributes(root_element,
                         'simpleattr',
                         '{http://some/ns}attrname',
                         '{http://other/ns}*')
  summary: strip_attributes(tree_or_element, *attribute_names)
  signatures:
  - kind: positional
    name: tree_or_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: strip_elements
  kind: callable
  ns: lxml.etree
  description: |-
    strip_elements(tree_or_element, *tag_names, with_tail=True)

    Delete all elements with the provided tag names from a tree or
    subtree.  This will remove the elements and their entire subtree,
    including all their attributes, text content and descendants.  It
    will also remove the tail text of the element unless you
    explicitly set the ``with_tail`` keyword argument option to False.

    Tag names can contain wildcards as in `_Element.iter`.

    Note that this will not delete the element (or ElementTree root
    element) that you passed even if it matches.  It will only treat
    its descendants.  If you want to include the root element, check
    its tag name directly before even calling this function.

    Example usage::

        strip_elements(some_element,
            'simpletagname',             # non-namespaced tag
            '{http://some/ns}tagname',   # namespaced tag
            '{http://some/other/ns}*'    # any tag from a namespace
            lxml.etree.Comment           # comments
            )
  summary: strip_elements(tree_or_element, *tag_names, with_tail=True)
  signatures:
  - kind: positional
    name: tree_or_element
    default: null
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: strip_tags
  kind: callable
  ns: lxml.etree
  description: |-
    strip_tags(tree_or_element, *tag_names)

    Delete all elements with the provided tag names from a tree or
    subtree.  This will remove the elements and their attributes, but
    *not* their text/tail content or descendants.  Instead, it will
    merge the text content and children of the element into its
    parent.

    Tag names can contain wildcards as in `_Element.iter`.

    Note that this will not delete the element (or ElementTree root
    element) that you passed even if it matches.  It will only treat
    its descendants.

    Example usage::

        strip_tags(some_element,
            'simpletagname',             # non-namespaced tag
            '{http://some/ns}tagname',   # namespaced tag
            '{http://some/other/ns}*'    # any tag from a namespace
            Comment                      # comments (including their text!)
            )
  summary: strip_tags(tree_or_element, *tag_names)
  signatures:
  - kind: positional
    name: tree_or_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: tostring
  kind: callable
  ns: lxml.etree
  description: |-
    tostring(element_or_tree, encoding=None, method="xml",
                 xml_declaration=None, pretty_print=False, with_tail=True,
                 standalone=None, doctype=None,
                 exclusive=False, inclusive_ns_prefixes=None,
                 with_comments=True, strip_text=False,
                 )

    Serialize an element to an encoded string representation of its XML
    tree.

    Defaults to ASCII encoding without XML declaration.  This
    behaviour can be configured with the keyword arguments 'encoding'
    (string) and 'xml_declaration' (bool).  Note that changing the
    encoding to a non UTF-8 compatible encoding will enable a
    declaration by default.

    You can also serialise to a Unicode string without declaration by
    passing the name ``'unicode'`` as encoding (or the ``str`` function
    in Py3 or ``unicode`` in Py2).  This changes the return value from
    a byte string to an unencoded unicode string.

    The keyword argument 'pretty_print' (bool) enables formatted XML.

    The keyword argument 'method' selects the output method: 'xml',
    'html', plain 'text' (text content without tags), 'c14n' or 'c14n2'.
    Default is 'xml'.

    With ``method="c14n"`` (C14N version 1), the options ``exclusive``,
    ``with_comments`` and ``inclusive_ns_prefixes`` request exclusive
    C14N, include comments, and list the inclusive prefixes respectively.

    With ``method="c14n2"`` (C14N version 2), the ``with_comments`` and
    ``strip_text`` options control the output of comments and text space
    according to C14N 2.0.

    Passing a boolean value to the ``standalone`` option will output
    an XML declaration with the corresponding ``standalone`` flag.

    The ``doctype`` option allows passing in a plain string that will
    be serialised before the XML tree.  Note that passing in non
    well-formed content here will make the XML output non well-formed.
    Also, an existing doctype in the document tree will not be removed
    when serialising an ElementTree instance.

    You can prevent the tail text of the element from being serialised
    by passing the boolean ``with_tail`` option.  This has no impact
    on the tail text of children, which will always be serialised.
  summary: tostring(element_or_tree, encoding=None, method="xml",
  signatures:
  - kind: positional
    name: element_or_tree
    default: null
    rest: false
  - name: encoding
    default: None
    rest: false
    kind: kw-only
  - name: method
    default: xml
    rest: false
    kind: kw-only
  - name: xml_declaration
    default: None
    rest: false
    kind: kw-only
  - name: pretty_print
    default: 'False'
    rest: false
    kind: kw-only
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - name: standalone
    default: None
    rest: false
    kind: kw-only
  - name: doctype
    default: None
    rest: false
    kind: kw-only
  - name: exclusive
    default: 'False'
    rest: false
    kind: kw-only
  - name: inclusive_ns_prefixes
    default: None
    rest: false
    kind: kw-only
  - name: with_comments
    default: 'True'
    rest: false
    kind: kw-only
  - name: strip_text
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: tostringlist
  kind: callable
  ns: lxml.etree
  description: |-
    tostringlist(element_or_tree, *args, **kwargs)

    Serialize an element to an encoded string representation of its XML
    tree, stored in a list of partial strings.

    This is purely for ElementTree 1.3 compatibility.  The result is a
    single string wrapped in a list.
  summary: tostringlist(element_or_tree, *args, **kwargs)
  signatures:
  - kind: positional
    name: element_or_tree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: tounicode
  kind: callable
  ns: lxml.etree
  description: |-
    tounicode(element_or_tree, method="xml", pretty_print=False,
                  with_tail=True, doctype=None)

    Serialize an element to the Python unicode representation of its XML
    tree.

    :deprecated: use ``tostring(el, encoding='unicode')`` instead.

    Note that the result does not carry an XML encoding declaration and is
    therefore not necessarily suited for serialization to byte streams without
    further treatment.

    The boolean keyword argument 'pretty_print' enables formatted XML.

    The keyword argument 'method' selects the output method: 'xml',
    'html' or plain 'text'.

    You can prevent the tail text of the element from being serialised
    by passing the boolean ``with_tail`` option.  This has no impact
    on the tail text of children, which will always be serialised.
  summary: tounicode(element_or_tree, method="xml", pretty_print=False,
  signatures:
  - kind: positional
    name: element_or_tree
    default: null
    rest: false
  - name: method
    default: xml
    rest: false
    kind: kw-only
  - name: pretty_print
    default: 'False'
    rest: false
    kind: kw-only
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - name: doctype
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: use_global_python_log
  kind: callable
  ns: lxml.etree
  description: |-
    use_global_python_log(log)

    Replace the global error log by an etree.PyErrorLog that uses the
    standard Python logging package.

    Note that this disables access to the global error log from exceptions.
    Parsers, XSLT etc. will continue to provide their normal local error log.

    Note: prior to lxml 2.2, this changed the error log globally.
    Since lxml 2.2, the global error log is local to a thread and this
    function will only set the global error log of the current thread.
  summary: use_global_python_log(log)
  signatures:
  - kind: positional
    name: log
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: lxml.html
  kind: module
  ns: null
  description: The ``lxml.html`` tool set for HTML handling.
  summary: The ``lxml
  signatures: null
  inherits_from: null
- name: document_fromstring
  kind: function
  ns: lxml.html
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: html
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - kind: positional
    name: ensure_head_body
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: fragment_fromstring
  kind: function
  ns: lxml.html
  description: |-
    Parses a single HTML element; it is an error if there is more than
    one element, or if anything but whitespace precedes or follows the
    element.

    If ``create_parent`` is true (or is a tag name) then a parent node
    will be created to encapsulate the HTML in a single element.  In this
    case, leading or trailing text is also allowed, as are multiple elements
    as result of the parsing.

    Passing a ``base_url`` will set the document's ``base_url`` attribute
    (and the tree's docinfo.URL).
  summary: Parses a single HTML element; it is an error if there is more than
  signatures:
  - kind: positional
    name: html
    default: null
    rest: false
  - kind: positional
    name: create_parent
    default: 'False'
    rest: false
  - kind: positional
    name: base_url
    default: None
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: fragments_fromstring
  kind: function
  ns: lxml.html
  description: |-
    Parses several HTML elements, returning a list of elements.

    The first item in the list may be a string.
    If no_leading_text is true, then it will be an error if there is
    leading text, and it will always be a list of only elements.

    base_url will set the document's base_url attribute
    (and the tree's docinfo.URL).
  summary: Parses several HTML elements, returning a list of elements
  signatures:
  - kind: positional
    name: html
    default: null
    rest: false
  - kind: positional
    name: no_leading_text
    default: 'False'
    rest: false
  - kind: positional
    name: base_url
    default: None
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: fromstring
  kind: function
  ns: lxml.html
  description: |-
    Parse the html, returning a single element/document.

    This tries to minimally parse the chunk of text, without knowing if it
    is a fragment or a document.

    base_url will set the document's base_url attribute (and the tree's docinfo.URL)
  summary: Parse the html, returning a single element/document
  signatures:
  - kind: positional
    name: html
    default: null
    rest: false
  - kind: positional
    name: base_url
    default: None
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: tostring
  kind: function
  ns: lxml.html
  description: |-
    Return an HTML string representation of the document.

    Note: if include_meta_content_type is true this will create a
    ``<meta http-equiv="Content-Type" ...>`` tag in the head;
    regardless of the value of include_meta_content_type any existing
    ``<meta http-equiv="Content-Type" ...>`` tag will be removed

    The ``encoding`` argument controls the output encoding (defaults to
    ASCII, with &#...; character references for any characters outside
    of ASCII).  Note that you can pass the name ``'unicode'`` as
    ``encoding`` argument to serialise to a Unicode string.

    The ``method`` argument defines the output method.  It defaults to
    'html', but can also be 'xml' for xhtml output, or 'text' to
    serialise to plain text without markup.

    To leave out the tail text of the top-level element that is being
    serialised, pass ``with_tail=False``.

    The ``doctype`` option allows passing in a plain string that will
    be serialised before the XML tree.  Note that passing in non
    well-formed content here will make the XML output non well-formed.
    Also, an existing doctype in the document tree will not be removed
    when serialising an ElementTree instance.

    Example::

        >>> from lxml import html
        >>> root = html.fragment_fromstring('<p>Hello<br>world!</p>')

        >>> html.tostring(root)
        b'<p>Hello<br>world!</p>'
        >>> html.tostring(root, method='html')
        b'<p>Hello<br>world!</p>'

        >>> html.tostring(root, method='xml')
        b'<p>Hello<br/>world!</p>'

        >>> html.tostring(root, method='text')
        b'Helloworld!'

        >>> html.tostring(root, method='text', encoding='unicode')
        'Helloworld!'

        >>> root = html.fragment_fromstring('<div><p>Hello<br>world!</p>TAIL</div>')
        >>> html.tostring(root[0], method='text', encoding='unicode')
        'Helloworld!TAIL'

        >>> html.tostring(root[0], method='text', encoding='unicode', with_tail=False)
        'Helloworld!'

        >>> doc = html.document_fromstring('<p>Hello<br>world!</p>')
        >>> html.tostring(doc, method='html', encoding='unicode')
        '<html><body><p>Hello<br>world!</p></body></html>'

        >>> print(html.tostring(doc, method='html', encoding='unicode',
        ...          doctype='<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"'
        ...                  ' "http://www.w3.org/TR/html4/strict.dtd">'))
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
        <html><body><p>Hello<br>world!</p></body></html>
  summary: Return an HTML string representation of the document
  signatures:
  - kind: positional
    name: doc
    default: null
    rest: false
  - kind: positional
    name: pretty_print
    default: 'False'
    rest: false
  - kind: positional
    name: include_meta_content_type
    default: 'False'
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: method
    default: html
    rest: false
  - kind: positional
    name: with_tail
    default: 'True'
    rest: false
  - kind: positional
    name: doctype
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Element
  kind: function
  ns: lxml.html
  description: |-
    Create a new HTML Element.

    This can also be used for XHTML documents.
  summary: Create a new HTML Element
  signatures:
  - type: '?'
  inherits_from: null
- name: defs
  kind: module
  ns: lxml.html
  description: |-
    Data taken from https://www.w3.org/TR/html401/index/elements.html
    and https://www.w3.org/community/webed/wiki/HTML/New_HTML5_Elements
    for html5_tags.
  summary: Data taken from https://www
  signatures: null
  inherits_from: null
- name: block_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: deprecated_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: empty_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: event_attrs
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: font_style_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: form_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: frame_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: general_block_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: head_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: html5_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: link_attrs
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: list_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: nonstandard_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: phrase_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: safe_attrs
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: special_inline_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: table_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: top_level_tags
  kind: const
  ns: lxml.html
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: open_in_browser
  kind: function
  ns: lxml.html
  description: |-
    Open the HTML document in a web browser, saving it to a temporary
    file to open it.  Note that this does not delete the file after
    use.  This is mainly meant for debugging.
  summary: Open the HTML document in a web browser, saving it to a temporary
  signatures:
  - kind: positional
    name: doc
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: submit_form
  kind: function
  ns: lxml.html
  description: |-
    Helper function to submit a form.  Returns a file-like object, as from
    ``urllib.urlopen()``.  This object also has a ``.geturl()`` function,
    which shows the URL if there were any redirects.

    You can use this like::

        form = doc.forms[0]
        form.inputs['foo'].value = 'bar' # etc
        response = form.submit()
        doc = parse(response)
        doc.make_links_absolute(response.geturl())

    To change the HTTP requester, pass a function as ``open_http`` keyword
    argument that opens the URL for you.  The function must have the following
    signature::

        open_http(method, URL, values)

    The action is one of 'GET' or 'POST', the URL is the target URL as a
    string, and the values are a sequence of ``(name, value)`` tuples with the
    form data.
  summary: Helper function to submit a form
  signatures:
  - kind: positional
    name: form
    default: null
    rest: false
  - kind: positional
    name: extra_values
    default: None
    rest: false
  - kind: positional
    name: open_http
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: find_rel_links
  kind: callable
  ns: lxml.html
  description: Find any links like ``<a rel="{rel}">...</a>``; returns a list of elements.
  summary: Find any links like ``<a rel="{rel}">
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: find_class
  kind: callable
  ns: lxml.html
  description: Find any elements with the given class name.
  summary: Find any elements with the given class name
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: make_links_absolute
  kind: callable
  ns: lxml.html
  description: |-
    Make all links in the document absolute, given the
    ``base_url`` for the document (the full URL where the document
    came from), or if no ``base_url`` is given, then the ``.base_url``
    of the document.

    If ``resolve_base_href`` is true, then any ``<base href>``
    tags in the document are used *and* removed from the document.
    If it is false then any such tag is ignored.

    If ``handle_failures`` is None (default), a failure to process
    a URL will abort the processing.  If set to 'ignore', errors
    are ignored.  If set to 'discard', failing URLs will be removed.
  summary: Make all links in the document absolute, given the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: resolve_base_href
  kind: callable
  ns: lxml.html
  description: |-
    Find any ``<base href>`` tag in the document, and apply its
    values to all links found in the document.  Also remove the
    tag once it has been applied.

    If ``handle_failures`` is None (default), a failure to process
    a URL will abort the processing.  If set to 'ignore', errors
    are ignored.  If set to 'discard', failing URLs will be removed.
  summary: Find any ``<base href>`` tag in the document, and apply its
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: iterlinks
  kind: callable
  ns: lxml.html
  description: |-
    Yield (element, attribute, link, pos), where attribute may be None
    (indicating the link is in the text).  ``pos`` is the position
    where the link occurs; often 0, but sometimes something else in
    the case of links in stylesheets or style tags.

    Note: <base href> is *not* taken into account in any way.  The
    link you get is exactly the link in the document.

    Note: multiple links inside of a single text string or
    attribute value are returned in reversed order.  This makes it
    possible to replace or delete them from the text string value
    based on their reported text positions.  Otherwise, a
    modification at one text position can change the positions of
    links reported later on.
  summary: Yield (element, attribute, link, pos), where attribute may be None
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: rewrite_links
  kind: callable
  ns: lxml.html
  description: |-
    Rewrite all the links in the document.  For each link
    ``link_repl_func(link)`` will be called, and the return value
    will replace the old link.

    Note that links may not be absolute (unless you first called
    ``make_links_absolute()``), and may be internal (e.g.,
    ``'#anchor'``).  They can also be values like
    ``'mailto:email'`` or ``'javascript:expr'``.

    If you give ``base_href`` then all links passed to
    ``link_repl_func()`` will take that into account.

    If the ``link_repl_func`` returns None, the attribute or
    tag text will be removed completely.
  summary: Rewrite all the links in the document
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: doc
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: parse
  kind: function
  ns: lxml.html
  description: |-
    Parse a filename, URL, or file-like object into an HTML document
    tree.  Note: this returns a tree, not an element.  Use
    ``parse(...).getroot()`` to get the document root.

    You can override the base URL with the ``base_url`` keyword.  This
    is most useful when parsing from a file-like object.
  summary: Parse a filename, URL, or file-like object into an HTML document
  signatures:
  - kind: positional
    name: filename_or_url
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - kind: positional
    name: base_url
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: lxml.includes
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: lxml.isoschematron
  kind: module
  ns: null
  description: |-
    The ``lxml.isoschematron`` package implements ISO Schematron support on top
    of the pure-xslt 'skeleton' implementation.
  summary: The ``lxml
  signatures: null
  inherits_from: null
- name: extract_xsd
  kind: callable
  ns: lxml.isoschematron
  description: |-
    XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)

    Turn an XSL document into an XSLT object.

    Calling this object on a tree or Element will execute the XSLT::

        transform = etree.XSLT(xsl_tree)
        result = transform(xml_tree)

    Keyword arguments of the constructor:

    - extensions: a dict mapping ``(namespace, name)`` pairs to
      extension functions or extension elements
    - regexp: enable exslt regular expression support in XPath
      (default: True)
    - access_control: access restrictions for network or file
      system (see `XSLTAccessControl`)

    Keyword arguments of the XSLT call:

    - profile_run: enable XSLT profiling and make the profile available
      as XML document in ``result.xslt_profile`` (default: False)

    Other keyword arguments of the call are passed to the stylesheet
    as parameters.
  summary: XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)
  signatures: null
  inherits_from: null
- name: extract_rng
  kind: callable
  ns: lxml.isoschematron
  description: |-
    XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)

    Turn an XSL document into an XSLT object.

    Calling this object on a tree or Element will execute the XSLT::

        transform = etree.XSLT(xsl_tree)
        result = transform(xml_tree)

    Keyword arguments of the constructor:

    - extensions: a dict mapping ``(namespace, name)`` pairs to
      extension functions or extension elements
    - regexp: enable exslt regular expression support in XPath
      (default: True)
    - access_control: access restrictions for network or file
      system (see `XSLTAccessControl`)

    Keyword arguments of the XSLT call:

    - profile_run: enable XSLT profiling and make the profile available
      as XML document in ``result.xslt_profile`` (default: False)

    Other keyword arguments of the call are passed to the stylesheet
    as parameters.
  summary: XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)
  signatures: null
  inherits_from: null
- name: iso_dsdl_include
  kind: callable
  ns: lxml.isoschematron
  description: |-
    XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)

    Turn an XSL document into an XSLT object.

    Calling this object on a tree or Element will execute the XSLT::

        transform = etree.XSLT(xsl_tree)
        result = transform(xml_tree)

    Keyword arguments of the constructor:

    - extensions: a dict mapping ``(namespace, name)`` pairs to
      extension functions or extension elements
    - regexp: enable exslt regular expression support in XPath
      (default: True)
    - access_control: access restrictions for network or file
      system (see `XSLTAccessControl`)

    Keyword arguments of the XSLT call:

    - profile_run: enable XSLT profiling and make the profile available
      as XML document in ``result.xslt_profile`` (default: False)

    Other keyword arguments of the call are passed to the stylesheet
    as parameters.
  summary: XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)
  signatures: null
  inherits_from: null
- name: iso_abstract_expand
  kind: callable
  ns: lxml.isoschematron
  description: |-
    XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)

    Turn an XSL document into an XSLT object.

    Calling this object on a tree or Element will execute the XSLT::

        transform = etree.XSLT(xsl_tree)
        result = transform(xml_tree)

    Keyword arguments of the constructor:

    - extensions: a dict mapping ``(namespace, name)`` pairs to
      extension functions or extension elements
    - regexp: enable exslt regular expression support in XPath
      (default: True)
    - access_control: access restrictions for network or file
      system (see `XSLTAccessControl`)

    Keyword arguments of the XSLT call:

    - profile_run: enable XSLT profiling and make the profile available
      as XML document in ``result.xslt_profile`` (default: False)

    Other keyword arguments of the call are passed to the stylesheet
    as parameters.
  summary: XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)
  signatures: null
  inherits_from: null
- name: iso_svrl_for_xslt1
  kind: callable
  ns: lxml.isoschematron
  description: |-
    XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)

    Turn an XSL document into an XSLT object.

    Calling this object on a tree or Element will execute the XSLT::

        transform = etree.XSLT(xsl_tree)
        result = transform(xml_tree)

    Keyword arguments of the constructor:

    - extensions: a dict mapping ``(namespace, name)`` pairs to
      extension functions or extension elements
    - regexp: enable exslt regular expression support in XPath
      (default: True)
    - access_control: access restrictions for network or file
      system (see `XSLTAccessControl`)

    Keyword arguments of the XSLT call:

    - profile_run: enable XSLT profiling and make the profile available
      as XML document in ``result.xslt_profile`` (default: False)

    Other keyword arguments of the call are passed to the stylesheet
    as parameters.
  summary: XSLT(self, xslt_input, extensions=None, regexp=True, access_control=None)
  signatures: null
  inherits_from: null
- name: svrl_validation_errors
  kind: callable
  ns: lxml.isoschematron
  description: |-
    XPath(self, path, namespaces=None, extensions=None, regexp=True, smart_strings=True)
    A compiled XPath expression that can be called on Elements and ElementTrees.

    Besides the XPath expression, you can pass prefix-namespace
    mappings and extension functions to the constructor through the
    keyword arguments ``namespaces`` and ``extensions``.  EXSLT
    regular expression support can be disabled with the 'regexp'
    boolean keyword (defaults to True).  Smart strings will be
    returned for string results unless you pass
    ``smart_strings=False``.
  summary: XPath(self, path, namespaces=None, extensions=None, regexp=True, smart_strings=True)
  signatures: null
  inherits_from: null
- name: schematron_schema_valid
  kind: callable
  ns: lxml.isoschematron
  description: |-
    RelaxNG(self, etree=None, file=None)
    Turn a document into a Relax NG validator.

    Either pass a schema as Element or ElementTree, or pass a file or
    filename through the ``file`` keyword argument.
  summary: RelaxNG(self, etree=None, file=None)
  signatures: null
  inherits_from: null
- name: stylesheet_params
  kind: function
  ns: lxml.isoschematron
  description: |-
    Convert keyword args to a dictionary of stylesheet parameters.
    XSL stylesheet parameters must be XPath expressions, i.e.:

    * string expressions, like "'5'"
    * simple (number) expressions, like "5"
    * valid XPath expressions, like "/a/b/text()"

    This function converts native Python keyword arguments to stylesheet
    parameters following these rules:
    If an arg is a string wrap it with XSLT.strparam().
    If an arg is an XPath object use its path string.
    If arg is None raise TypeError.
    Else convert arg to string.
  summary: Convert keyword args to a dictionary of stylesheet parameters
  signatures:
  - type: '?'
  inherits_from: null
- name: Schematron
  kind: class
  ns: lxml.isoschematron
  description: |-
    An ISO Schematron validator.

    Pass a root Element or an ElementTree to turn it into a validator.
    Alternatively, pass a filename as keyword argument 'file' to parse from
    the file system.

    Schematron is a less well known, but very powerful schema language.
    The main idea is to use the capabilities of XPath to put restrictions on
    the structure and the content of XML documents.

    The standard behaviour is to fail on ``failed-assert`` findings only
    (``ASSERTS_ONLY``).  To change this, you can either pass a report filter
    function to the ``error_finder`` parameter (e.g. ``ASSERTS_AND_REPORTS``
    or a custom ``XPath`` object), or subclass isoschematron.Schematron for
    complete control of the validation process.

    Built on the Schematron language 'reference' skeleton pure-xslt
    implementation, the validator is created as an XSLT 1.0 stylesheet using
    these steps:

     0) (Extract from XML Schema or RelaxNG schema)
     1) Process inclusions
     2) Process abstract patterns
     3) Compile the schematron schema to XSLT

    The ``include`` and ``expand`` keyword arguments can be used to switch off
    steps 1) and 2).
    To set parameters for steps 1), 2) and 3) hand parameter dictionaries to the
    keyword arguments ``include_params``, ``expand_params`` or
    ``compile_params``.
    For convenience, the compile-step parameter ``phase`` is also exposed as a
    keyword argument ``phase``. This takes precedence if the parameter is also
    given in the parameter dictionary.

    If ``store_schematron`` is set to True, the (included-and-expanded)
    schematron document tree is stored and available through the ``schematron``
    property.
    If ``store_xslt`` is set to True, the validation XSLT document tree will be
    stored and can be retrieved through the ``validator_xslt`` property.
    With ``store_report`` set to True (default: False), the resulting validation
    report document gets stored and can be accessed as the ``validation_report``
    property.

    If ``validate_schema`` is set to False, the validation of the schema file
    itself is disabled.  Validation happens by default after building the full
    schema, unless the schema validation file cannot be found at import time,
    in which case the validation gets disabled.  Some lxml distributions exclude
    this file due to licensing issues.  ISO-Schematron validation can then still
    be used normally, but the schemas themselves cannot be validated.

    Here is a usage example::

      >>> from lxml import etree
      >>> from lxml.isoschematron import Schematron

      >>> schematron = Schematron(etree.XML('''
      ... <schema xmlns="http://purl.oclc.org/dsdl/schematron" >
      ...   <pattern id="id_only_attribute">
      ...     <title>id is the only permitted attribute name</title>
      ...     <rule context="*">
      ...       <report test="@*[not(name()='id')]">Attribute
      ...         <name path="@*[not(name()='id')]"/> is forbidden<name/>
      ...       </report>
      ...     </rule>
      ...   </pattern>
      ... </schema>'''),
      ... error_finder=Schematron.ASSERTS_AND_REPORTS)

      >>> xml = etree.XML('''
      ... <AAA name="aaa">
      ...   <BBB id="bbb"/>
      ...   <CCC color="ccc"/>
      ... </AAA>
      ... ''')

      >>> schematron.validate(xml)
      False

      >>> xml = etree.XML('''
      ... <AAA id="aaa">
      ...   <BBB id="bbb"/>
      ...   <CCC/>
      ... </AAA>
      ... ''')

      >>> schematron.validate(xml)
      True
  summary: An ISO Schematron validator
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: include
    default: 'True'
    rest: false
  - kind: positional
    name: expand
    default: 'True'
    rest: false
  - kind: positional
    name: include_params
    default: '{}'
    rest: false
  - kind: positional
    name: expand_params
    default: '{}'
    rest: false
  - kind: positional
    name: compile_params
    default: '{}'
    rest: false
  - kind: positional
    name: store_schematron
    default: 'False'
    rest: false
  - kind: positional
    name: store_xslt
    default: 'False'
    rest: false
  - kind: positional
    name: store_report
    default: 'False'
    rest: false
  - kind: positional
    name: phase
    default: None
    rest: false
  - kind: positional
    name: error_finder
    default: //svrl:failed-assert
    rest: false
  - kind: positional
    name: validate_schema
    default: 'True'
    rest: false
  - type: Schematron
  inherits_from:
  - <class 'lxml.etree._Validator'>
- name: Schematron.ASSERTS_AND_REPORTS
  kind: callable
  ns: lxml.isoschematron
  description: |-
    XPath(self, path, namespaces=None, extensions=None, regexp=True, smart_strings=True)
    A compiled XPath expression that can be called on Elements and ElementTrees.

    Besides the XPath expression, you can pass prefix-namespace
    mappings and extension functions to the constructor through the
    keyword arguments ``namespaces`` and ``extensions``.  EXSLT
    regular expression support can be disabled with the 'regexp'
    boolean keyword (defaults to True).  Smart strings will be
    returned for string results unless you pass
    ``smart_strings=False``.
  summary: XPath(self, path, namespaces=None, extensions=None, regexp=True, smart_strings=True)
  signatures: null
  inherits_from: null
- name: Schematron.ASSERTS_ONLY
  kind: callable
  ns: lxml.isoschematron
  description: |-
    XPath(self, path, namespaces=None, extensions=None, regexp=True, smart_strings=True)
    A compiled XPath expression that can be called on Elements and ElementTrees.

    Besides the XPath expression, you can pass prefix-namespace
    mappings and extension functions to the constructor through the
    keyword arguments ``namespaces`` and ``extensions``.  EXSLT
    regular expression support can be disabled with the 'regexp'
    boolean keyword (defaults to True).  Smart strings will be
    returned for string results unless you pass
    ``smart_strings=False``.
  summary: XPath(self, path, namespaces=None, extensions=None, regexp=True, smart_strings=True)
  signatures: null
  inherits_from: null
- name: Schematron.assertValid
  kind: callable
  ns: lxml.isoschematron
  description: |-
    assertValid(self, etree)

    Raises `DocumentInvalid` if the document does not comply with the schema.
  summary: assertValid(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Schematron.assert_
  kind: callable
  ns: lxml.isoschematron
  description: |-
    assert_(self, etree)

    Raises `AssertionError` if the document does not comply with the schema.
  summary: assert_(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Schematron.error_log
  kind: property
  ns: lxml.isoschematron
  description: The log of validation errors and warnings.
  summary: The log of validation errors and warnings
  signatures: null
  inherits_from: null
- name: Schematron.schematron
  kind: property
  ns: lxml.isoschematron
  description: |-
    ISO-schematron schema document (None if object has been initialized
    with store_schematron=False).
  summary: ISO-schematron schema document (None if object has been initialized
  signatures: null
  inherits_from: null
- name: Schematron.validate
  kind: callable
  ns: lxml.isoschematron
  description: |-
    validate(self, etree)

    Validate the document using this schema.

    Returns true if document is valid, false if not.
  summary: validate(self, etree)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: etree
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Schematron.validation_report
  kind: property
  ns: lxml.isoschematron
  description: |-
    ISO-schematron validation result report (None if result-storing has
    been turned off).
  summary: ISO-schematron validation result report (None if result-storing has
  signatures: null
  inherits_from: null
- name: Schematron.validator_xslt
  kind: property
  ns: lxml.isoschematron
  description: |-
    ISO-schematron skeleton implementation XSLT validator document (None
    if object has been initialized with store_xslt=False).
  summary: ISO-schematron skeleton implementation XSLT validator document (None
  signatures: null
  inherits_from: null
- name: lxml.objectify
  kind: module
  ns: null
  description: |-
    The ``lxml.objectify`` module implements a Python object API for XML.
    It is based on `lxml.etree`.
  summary: The ``lxml
  signatures: null
  inherits_from: null
- name: BoolElement
  kind: class
  ns: lxml.objectify
  description: |-
    Boolean type base on string values: 'true' or 'false'.

    Note that this inherits from IntElement to mimic the behaviour of
    Python's bool type.
  summary: 'Boolean type base on string values: ''true'' or ''false'''
  signatures: null
  inherits_from:
  - <class 'lxml.objectify.IntElement'>
  - <class 'lxml.objectify.NumberElement'>
  - <class 'lxml.objectify.ObjectifiedDataElement'>
  - <class 'lxml.objectify.ObjectifiedElement'>
  - <class 'lxml.etree.ElementBase'>
  - <class 'lxml.etree._Element'>
- name: BoolElement.addattr
  kind: callable
  ns: lxml.objectify
  description: |-
    addattr(self, tag, value)

    Add a child value to the element.

    As opposed to append(), it sets a data value, not an element.
  summary: addattr(self, tag, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.addnext
  kind: callable
  ns: lxml.objectify
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.addprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.append
  kind: callable
  ns: lxml.objectify
  description: |-
    append(self, element)

    Adds a subelement to the end of this element.
  summary: append(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.attrib
  kind: property
  ns: lxml.objectify
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: BoolElement.base
  kind: property
  ns: lxml.objectify
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: BoolElement.clear
  kind: callable
  ns: lxml.objectify
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.countchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    countchildren(self)

    Return the number of children of this element, regardless of their
    name.
  summary: countchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.cssselect
  kind: callable
  ns: lxml.objectify
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: BoolElement.descendantpaths
  kind: callable
  ns: lxml.objectify
  description: |-
    descendantpaths(self, prefix=None)

    Returns a list of object path expressions for all descendants.
  summary: descendantpaths(self, prefix=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.extend
  kind: callable
  ns: lxml.objectify
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.find
  kind: callable
  ns: lxml.objectify
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.findall
  kind: callable
  ns: lxml.objectify
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.findtext
  kind: callable
  ns: lxml.objectify
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.get
  kind: callable
  ns: lxml.objectify
  description: |-
    get(self, key, default=None)

    Gets an element attribute.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.getchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    getchildren(self)

    Returns a sequence of all direct children.  The elements are
    returned in document order.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.getiterator
  kind: callable
  ns: lxml.objectify
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.getnext
  kind: callable
  ns: lxml.objectify
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.getparent
  kind: callable
  ns: lxml.objectify
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.getprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.getroottree
  kind: callable
  ns: lxml.objectify
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.index
  kind: callable
  ns: lxml.objectify
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.insert
  kind: callable
  ns: lxml.objectify
  description: |-
    insert(self, index, element)

    Inserts a subelement at the given position in this element
  summary: insert(self, index, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.items
  kind: callable
  ns: lxml.objectify
  description: |-
    items(self)

    Gets element attributes, as a sequence. The attributes are returned in
    an arbitrary order.
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.iter
  kind: callable
  ns: lxml.objectify
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.iterancestors
  kind: callable
  ns: lxml.objectify
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.iterchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: BoolElement.iterdescendants
  kind: callable
  ns: lxml.objectify
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.iterfind
  kind: callable
  ns: lxml.objectify
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.itersiblings
  kind: callable
  ns: lxml.objectify
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: BoolElement.itertext
  kind: callable
  ns: lxml.objectify
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: BoolElement.keys
  kind: callable
  ns: lxml.objectify
  description: |-
    keys(self)

    Gets a list of attribute names.  The names are returned in an
    arbitrary order (just like for an ordinary Python dictionary).
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.makeelement
  kind: callable
  ns: lxml.objectify
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.nsmap
  kind: property
  ns: lxml.objectify
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: BoolElement.prefix
  kind: property
  ns: lxml.objectify
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: BoolElement.pyval
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BoolElement.remove
  kind: callable
  ns: lxml.objectify
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.replace
  kind: callable
  ns: lxml.objectify
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.set
  kind: callable
  ns: lxml.objectify
  description: |-
    set(self, key, value)

    Sets an element attribute.
    In HTML documents (not XML or XHTML), the value None is allowed and creates
    an attribute without value (just the attribute name).
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.sourceline
  kind: property
  ns: lxml.objectify
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: BoolElement.tag
  kind: property
  ns: lxml.objectify
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: BoolElement.tail
  kind: property
  ns: lxml.objectify
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: BoolElement.text
  kind: property
  ns: lxml.objectify
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: BoolElement.values
  kind: callable
  ns: lxml.objectify
  description: |-
    values(self)

    Gets element attribute values as a sequence of strings.  The
    attributes are returned in an arbitrary order.
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolElement.xpath
  kind: callable
  ns: lxml.objectify
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: DataElement
  kind: callable
  ns: lxml.objectify
  description: |-
    DataElement(_value, attrib=None, nsmap=None, _pytype=None, _xsi=None, **_attributes)

    Create a new element from a Python value and XML attributes taken from
    keyword arguments or a dictionary passed as second argument.

    Automatically adds a 'pytype' attribute for the Python type of the value,
    if the type can be identified.  If '_pytype' or '_xsi' are among the
    keyword arguments, they will be used instead.

    If the _value argument is an ObjectifiedDataElement instance, its py:pytype,
    xsi:type and other attributes and nsmap are reused unless they are redefined
    in attrib and/or keyword arguments.
  summary: DataElement(_value, attrib=None, nsmap=None, _pytype=None, _xsi=None, **_attributes)
  signatures:
  - kind: positional
    name: _value
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - name: _pytype
    default: None
    rest: false
    kind: kw-only
  - name: _xsi
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: E
  kind: callable
  ns: lxml.objectify
  description: |-
    ElementMaker(self, namespace=None, nsmap=None, annotate=True, makeelement=None)

    An ElementMaker that can be used for constructing trees.

    Example::

      >>> M = ElementMaker(annotate=False)
      >>> attributes = {'class': 'par'}
      >>> html = M.html( M.body( M.p('hello', attributes, M.br, 'objectify', style="font-weight: bold") ) )

      >>> from lxml.etree import tostring
      >>> print(tostring(html, method='html').decode('ascii'))
      <html><body><p style="font-weight: bold" class="par">hello<br>objectify</p></body></html>

    To create tags that are not valid Python identifiers, call the factory
    directly and pass the tag name as first argument::

      >>> root = M('tricky-tag', 'some text')
      >>> print(root.tag)
      tricky-tag
      >>> print(root.text)
      some text

    Note that this module has a predefined ElementMaker instance called ``E``.
  summary: ElementMaker(self, namespace=None, nsmap=None, annotate=True, makeelement=None)
  signatures: null
  inherits_from: null
- name: Element
  kind: callable
  ns: lxml.objectify
  description: |-
    Element(_tag, attrib=None, nsmap=None, _pytype=None, **_attributes)

    Objectify specific version of the lxml.etree Element() factory that
    always creates a structural (tree) element.

    NOTE: requires parser based element class lookup activated in lxml.etree!
  summary: Element(_tag, attrib=None, nsmap=None, _pytype=None, **_attributes)
  signatures:
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - name: _pytype
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ElementMaker
  kind: class
  ns: lxml.objectify
  description: |-
    ElementMaker(self, namespace=None, nsmap=None, annotate=True, makeelement=None)

    An ElementMaker that can be used for constructing trees.

    Example::

      >>> M = ElementMaker(annotate=False)
      >>> attributes = {'class': 'par'}
      >>> html = M.html( M.body( M.p('hello', attributes, M.br, 'objectify', style="font-weight: bold") ) )

      >>> from lxml.etree import tostring
      >>> print(tostring(html, method='html').decode('ascii'))
      <html><body><p style="font-weight: bold" class="par">hello<br>objectify</p></body></html>

    To create tags that are not valid Python identifiers, call the factory
    directly and pass the tag name as first argument::

      >>> root = M('tricky-tag', 'some text')
      >>> print(root.tag)
      tricky-tag
      >>> print(root.text)
      some text

    Note that this module has a predefined ElementMaker instance called ``E``.
  summary: ElementMaker(self, namespace=None, nsmap=None, annotate=True, makeelement=None)
  signatures: null
  inherits_from: null
- name: FloatElement
  kind: class
  ns: lxml.objectify
  description: |-
    This is the base class for all data type Elements.  Subclasses should
    override the 'pyval' property and possibly the __str__ method.
  summary: This is the base class for all data type Elements
  signatures: null
  inherits_from:
  - <class 'lxml.objectify.NumberElement'>
  - <class 'lxml.objectify.ObjectifiedDataElement'>
  - <class 'lxml.objectify.ObjectifiedElement'>
  - <class 'lxml.etree.ElementBase'>
  - <class 'lxml.etree._Element'>
- name: FloatElement.addattr
  kind: callable
  ns: lxml.objectify
  description: |-
    addattr(self, tag, value)

    Add a child value to the element.

    As opposed to append(), it sets a data value, not an element.
  summary: addattr(self, tag, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.addnext
  kind: callable
  ns: lxml.objectify
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.addprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.append
  kind: callable
  ns: lxml.objectify
  description: |-
    append(self, element)

    Adds a subelement to the end of this element.
  summary: append(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.attrib
  kind: property
  ns: lxml.objectify
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: FloatElement.base
  kind: property
  ns: lxml.objectify
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: FloatElement.clear
  kind: callable
  ns: lxml.objectify
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.countchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    countchildren(self)

    Return the number of children of this element, regardless of their
    name.
  summary: countchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.cssselect
  kind: callable
  ns: lxml.objectify
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: FloatElement.descendantpaths
  kind: callable
  ns: lxml.objectify
  description: |-
    descendantpaths(self, prefix=None)

    Returns a list of object path expressions for all descendants.
  summary: descendantpaths(self, prefix=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.extend
  kind: callable
  ns: lxml.objectify
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.find
  kind: callable
  ns: lxml.objectify
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.findall
  kind: callable
  ns: lxml.objectify
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.findtext
  kind: callable
  ns: lxml.objectify
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.get
  kind: callable
  ns: lxml.objectify
  description: |-
    get(self, key, default=None)

    Gets an element attribute.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.getchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    getchildren(self)

    Returns a sequence of all direct children.  The elements are
    returned in document order.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.getiterator
  kind: callable
  ns: lxml.objectify
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.getnext
  kind: callable
  ns: lxml.objectify
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.getparent
  kind: callable
  ns: lxml.objectify
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.getprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.getroottree
  kind: callable
  ns: lxml.objectify
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.index
  kind: callable
  ns: lxml.objectify
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.insert
  kind: callable
  ns: lxml.objectify
  description: |-
    insert(self, index, element)

    Inserts a subelement at the given position in this element
  summary: insert(self, index, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.items
  kind: callable
  ns: lxml.objectify
  description: |-
    items(self)

    Gets element attributes, as a sequence. The attributes are returned in
    an arbitrary order.
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.iter
  kind: callable
  ns: lxml.objectify
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.iterancestors
  kind: callable
  ns: lxml.objectify
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.iterchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: FloatElement.iterdescendants
  kind: callable
  ns: lxml.objectify
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.iterfind
  kind: callable
  ns: lxml.objectify
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.itersiblings
  kind: callable
  ns: lxml.objectify
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: FloatElement.itertext
  kind: callable
  ns: lxml.objectify
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: FloatElement.keys
  kind: callable
  ns: lxml.objectify
  description: |-
    keys(self)

    Gets a list of attribute names.  The names are returned in an
    arbitrary order (just like for an ordinary Python dictionary).
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.makeelement
  kind: callable
  ns: lxml.objectify
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.nsmap
  kind: property
  ns: lxml.objectify
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: FloatElement.prefix
  kind: property
  ns: lxml.objectify
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: FloatElement.pyval
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FloatElement.remove
  kind: callable
  ns: lxml.objectify
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.replace
  kind: callable
  ns: lxml.objectify
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.set
  kind: callable
  ns: lxml.objectify
  description: |-
    set(self, key, value)

    Sets an element attribute.
    In HTML documents (not XML or XHTML), the value None is allowed and creates
    an attribute without value (just the attribute name).
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.sourceline
  kind: property
  ns: lxml.objectify
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: FloatElement.tag
  kind: property
  ns: lxml.objectify
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: FloatElement.tail
  kind: property
  ns: lxml.objectify
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: FloatElement.text
  kind: property
  ns: lxml.objectify
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: FloatElement.values
  kind: callable
  ns: lxml.objectify
  description: |-
    values(self)

    Gets element attribute values as a sequence of strings.  The
    attributes are returned in an arbitrary order.
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatElement.xpath
  kind: callable
  ns: lxml.objectify
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: IntElement
  kind: class
  ns: lxml.objectify
  description: |-
    This is the base class for all data type Elements.  Subclasses should
    override the 'pyval' property and possibly the __str__ method.
  summary: This is the base class for all data type Elements
  signatures: null
  inherits_from:
  - <class 'lxml.objectify.NumberElement'>
  - <class 'lxml.objectify.ObjectifiedDataElement'>
  - <class 'lxml.objectify.ObjectifiedElement'>
  - <class 'lxml.etree.ElementBase'>
  - <class 'lxml.etree._Element'>
- name: IntElement.addattr
  kind: callable
  ns: lxml.objectify
  description: |-
    addattr(self, tag, value)

    Add a child value to the element.

    As opposed to append(), it sets a data value, not an element.
  summary: addattr(self, tag, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.addnext
  kind: callable
  ns: lxml.objectify
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.addprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.append
  kind: callable
  ns: lxml.objectify
  description: |-
    append(self, element)

    Adds a subelement to the end of this element.
  summary: append(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.attrib
  kind: property
  ns: lxml.objectify
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: IntElement.base
  kind: property
  ns: lxml.objectify
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: IntElement.clear
  kind: callable
  ns: lxml.objectify
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.countchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    countchildren(self)

    Return the number of children of this element, regardless of their
    name.
  summary: countchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.cssselect
  kind: callable
  ns: lxml.objectify
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: IntElement.descendantpaths
  kind: callable
  ns: lxml.objectify
  description: |-
    descendantpaths(self, prefix=None)

    Returns a list of object path expressions for all descendants.
  summary: descendantpaths(self, prefix=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.extend
  kind: callable
  ns: lxml.objectify
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.find
  kind: callable
  ns: lxml.objectify
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.findall
  kind: callable
  ns: lxml.objectify
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.findtext
  kind: callable
  ns: lxml.objectify
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.get
  kind: callable
  ns: lxml.objectify
  description: |-
    get(self, key, default=None)

    Gets an element attribute.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.getchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    getchildren(self)

    Returns a sequence of all direct children.  The elements are
    returned in document order.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.getiterator
  kind: callable
  ns: lxml.objectify
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.getnext
  kind: callable
  ns: lxml.objectify
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.getparent
  kind: callable
  ns: lxml.objectify
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.getprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.getroottree
  kind: callable
  ns: lxml.objectify
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.index
  kind: callable
  ns: lxml.objectify
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.insert
  kind: callable
  ns: lxml.objectify
  description: |-
    insert(self, index, element)

    Inserts a subelement at the given position in this element
  summary: insert(self, index, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.items
  kind: callable
  ns: lxml.objectify
  description: |-
    items(self)

    Gets element attributes, as a sequence. The attributes are returned in
    an arbitrary order.
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.iter
  kind: callable
  ns: lxml.objectify
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.iterancestors
  kind: callable
  ns: lxml.objectify
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.iterchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: IntElement.iterdescendants
  kind: callable
  ns: lxml.objectify
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.iterfind
  kind: callable
  ns: lxml.objectify
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.itersiblings
  kind: callable
  ns: lxml.objectify
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: IntElement.itertext
  kind: callable
  ns: lxml.objectify
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: IntElement.keys
  kind: callable
  ns: lxml.objectify
  description: |-
    keys(self)

    Gets a list of attribute names.  The names are returned in an
    arbitrary order (just like for an ordinary Python dictionary).
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.makeelement
  kind: callable
  ns: lxml.objectify
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.nsmap
  kind: property
  ns: lxml.objectify
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: IntElement.prefix
  kind: property
  ns: lxml.objectify
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: IntElement.pyval
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: IntElement.remove
  kind: callable
  ns: lxml.objectify
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.replace
  kind: callable
  ns: lxml.objectify
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.set
  kind: callable
  ns: lxml.objectify
  description: |-
    set(self, key, value)

    Sets an element attribute.
    In HTML documents (not XML or XHTML), the value None is allowed and creates
    an attribute without value (just the attribute name).
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.sourceline
  kind: property
  ns: lxml.objectify
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: IntElement.tag
  kind: property
  ns: lxml.objectify
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: IntElement.tail
  kind: property
  ns: lxml.objectify
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: IntElement.text
  kind: property
  ns: lxml.objectify
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: IntElement.values
  kind: callable
  ns: lxml.objectify
  description: |-
    values(self)

    Gets element attribute values as a sequence of strings.  The
    attributes are returned in an arbitrary order.
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntElement.xpath
  kind: callable
  ns: lxml.objectify
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NoneElement
  kind: class
  ns: lxml.objectify
  description: |-
    This is the base class for all data type Elements.  Subclasses should
    override the 'pyval' property and possibly the __str__ method.
  summary: This is the base class for all data type Elements
  signatures: null
  inherits_from:
  - <class 'lxml.objectify.ObjectifiedDataElement'>
  - <class 'lxml.objectify.ObjectifiedElement'>
  - <class 'lxml.etree.ElementBase'>
  - <class 'lxml.etree._Element'>
- name: NoneElement.addattr
  kind: callable
  ns: lxml.objectify
  description: |-
    addattr(self, tag, value)

    Add a child value to the element.

    As opposed to append(), it sets a data value, not an element.
  summary: addattr(self, tag, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.addnext
  kind: callable
  ns: lxml.objectify
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.addprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.append
  kind: callable
  ns: lxml.objectify
  description: |-
    append(self, element)

    Adds a subelement to the end of this element.
  summary: append(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.attrib
  kind: property
  ns: lxml.objectify
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: NoneElement.base
  kind: property
  ns: lxml.objectify
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: NoneElement.clear
  kind: callable
  ns: lxml.objectify
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.countchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    countchildren(self)

    Return the number of children of this element, regardless of their
    name.
  summary: countchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.cssselect
  kind: callable
  ns: lxml.objectify
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NoneElement.descendantpaths
  kind: callable
  ns: lxml.objectify
  description: |-
    descendantpaths(self, prefix=None)

    Returns a list of object path expressions for all descendants.
  summary: descendantpaths(self, prefix=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.extend
  kind: callable
  ns: lxml.objectify
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.find
  kind: callable
  ns: lxml.objectify
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.findall
  kind: callable
  ns: lxml.objectify
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.findtext
  kind: callable
  ns: lxml.objectify
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.get
  kind: callable
  ns: lxml.objectify
  description: |-
    get(self, key, default=None)

    Gets an element attribute.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.getchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    getchildren(self)

    Returns a sequence of all direct children.  The elements are
    returned in document order.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.getiterator
  kind: callable
  ns: lxml.objectify
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.getnext
  kind: callable
  ns: lxml.objectify
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.getparent
  kind: callable
  ns: lxml.objectify
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.getprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.getroottree
  kind: callable
  ns: lxml.objectify
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.index
  kind: callable
  ns: lxml.objectify
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.insert
  kind: callable
  ns: lxml.objectify
  description: |-
    insert(self, index, element)

    Inserts a subelement at the given position in this element
  summary: insert(self, index, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.items
  kind: callable
  ns: lxml.objectify
  description: |-
    items(self)

    Gets element attributes, as a sequence. The attributes are returned in
    an arbitrary order.
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.iter
  kind: callable
  ns: lxml.objectify
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.iterancestors
  kind: callable
  ns: lxml.objectify
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.iterchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NoneElement.iterdescendants
  kind: callable
  ns: lxml.objectify
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.iterfind
  kind: callable
  ns: lxml.objectify
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.itersiblings
  kind: callable
  ns: lxml.objectify
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NoneElement.itertext
  kind: callable
  ns: lxml.objectify
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NoneElement.keys
  kind: callable
  ns: lxml.objectify
  description: |-
    keys(self)

    Gets a list of attribute names.  The names are returned in an
    arbitrary order (just like for an ordinary Python dictionary).
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.makeelement
  kind: callable
  ns: lxml.objectify
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.nsmap
  kind: property
  ns: lxml.objectify
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: NoneElement.prefix
  kind: property
  ns: lxml.objectify
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: NoneElement.pyval
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NoneElement.remove
  kind: callable
  ns: lxml.objectify
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.replace
  kind: callable
  ns: lxml.objectify
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.set
  kind: callable
  ns: lxml.objectify
  description: |-
    set(self, key, value)

    Sets an element attribute.
    In HTML documents (not XML or XHTML), the value None is allowed and creates
    an attribute without value (just the attribute name).
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.sourceline
  kind: property
  ns: lxml.objectify
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: NoneElement.tag
  kind: property
  ns: lxml.objectify
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: NoneElement.tail
  kind: property
  ns: lxml.objectify
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: NoneElement.text
  kind: property
  ns: lxml.objectify
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: NoneElement.values
  kind: callable
  ns: lxml.objectify
  description: |-
    values(self)

    Gets element attribute values as a sequence of strings.  The
    attributes are returned in an arbitrary order.
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoneElement.xpath
  kind: callable
  ns: lxml.objectify
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NumberElement
  kind: class
  ns: lxml.objectify
  description: |-
    This is the base class for all data type Elements.  Subclasses should
    override the 'pyval' property and possibly the __str__ method.
  summary: This is the base class for all data type Elements
  signatures: null
  inherits_from:
  - <class 'lxml.objectify.ObjectifiedDataElement'>
  - <class 'lxml.objectify.ObjectifiedElement'>
  - <class 'lxml.etree.ElementBase'>
  - <class 'lxml.etree._Element'>
- name: NumberElement.addattr
  kind: callable
  ns: lxml.objectify
  description: |-
    addattr(self, tag, value)

    Add a child value to the element.

    As opposed to append(), it sets a data value, not an element.
  summary: addattr(self, tag, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.addnext
  kind: callable
  ns: lxml.objectify
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.addprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.append
  kind: callable
  ns: lxml.objectify
  description: |-
    append(self, element)

    Adds a subelement to the end of this element.
  summary: append(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.attrib
  kind: property
  ns: lxml.objectify
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: NumberElement.base
  kind: property
  ns: lxml.objectify
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: NumberElement.clear
  kind: callable
  ns: lxml.objectify
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.countchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    countchildren(self)

    Return the number of children of this element, regardless of their
    name.
  summary: countchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.cssselect
  kind: callable
  ns: lxml.objectify
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NumberElement.descendantpaths
  kind: callable
  ns: lxml.objectify
  description: |-
    descendantpaths(self, prefix=None)

    Returns a list of object path expressions for all descendants.
  summary: descendantpaths(self, prefix=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.extend
  kind: callable
  ns: lxml.objectify
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.find
  kind: callable
  ns: lxml.objectify
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.findall
  kind: callable
  ns: lxml.objectify
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.findtext
  kind: callable
  ns: lxml.objectify
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.get
  kind: callable
  ns: lxml.objectify
  description: |-
    get(self, key, default=None)

    Gets an element attribute.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.getchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    getchildren(self)

    Returns a sequence of all direct children.  The elements are
    returned in document order.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.getiterator
  kind: callable
  ns: lxml.objectify
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.getnext
  kind: callable
  ns: lxml.objectify
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.getparent
  kind: callable
  ns: lxml.objectify
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.getprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.getroottree
  kind: callable
  ns: lxml.objectify
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.index
  kind: callable
  ns: lxml.objectify
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.insert
  kind: callable
  ns: lxml.objectify
  description: |-
    insert(self, index, element)

    Inserts a subelement at the given position in this element
  summary: insert(self, index, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.items
  kind: callable
  ns: lxml.objectify
  description: |-
    items(self)

    Gets element attributes, as a sequence. The attributes are returned in
    an arbitrary order.
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.iter
  kind: callable
  ns: lxml.objectify
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.iterancestors
  kind: callable
  ns: lxml.objectify
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.iterchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NumberElement.iterdescendants
  kind: callable
  ns: lxml.objectify
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.iterfind
  kind: callable
  ns: lxml.objectify
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.itersiblings
  kind: callable
  ns: lxml.objectify
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NumberElement.itertext
  kind: callable
  ns: lxml.objectify
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: NumberElement.keys
  kind: callable
  ns: lxml.objectify
  description: |-
    keys(self)

    Gets a list of attribute names.  The names are returned in an
    arbitrary order (just like for an ordinary Python dictionary).
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.makeelement
  kind: callable
  ns: lxml.objectify
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.nsmap
  kind: property
  ns: lxml.objectify
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: NumberElement.prefix
  kind: property
  ns: lxml.objectify
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: NumberElement.pyval
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NumberElement.remove
  kind: callable
  ns: lxml.objectify
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.replace
  kind: callable
  ns: lxml.objectify
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.set
  kind: callable
  ns: lxml.objectify
  description: |-
    set(self, key, value)

    Sets an element attribute.
    In HTML documents (not XML or XHTML), the value None is allowed and creates
    an attribute without value (just the attribute name).
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.sourceline
  kind: property
  ns: lxml.objectify
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: NumberElement.tag
  kind: property
  ns: lxml.objectify
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: NumberElement.tail
  kind: property
  ns: lxml.objectify
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: NumberElement.text
  kind: property
  ns: lxml.objectify
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: NumberElement.values
  kind: callable
  ns: lxml.objectify
  description: |-
    values(self)

    Gets element attribute values as a sequence of strings.  The
    attributes are returned in an arbitrary order.
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NumberElement.xpath
  kind: callable
  ns: lxml.objectify
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectPath
  kind: class
  ns: lxml.objectify
  description: |-
    ObjectPath(path)
    Immutable object that represents a compiled object path.

    Example for a path: 'root.child[1].{other}child[25]'
  summary: ObjectPath(path)
  signatures: null
  inherits_from: null
- name: ObjectPath.addattr
  kind: callable
  ns: lxml.objectify
  description: |-
    addattr(self, root, value)

    Append a value to the target element in a subtree.

    If any of the children on the path does not exist, it is created.
  summary: addattr(self, root, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: root
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectPath.find
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ObjectPath.hasattr
  kind: callable
  ns: lxml.objectify
  description: hasattr(self, root)
  summary: hasattr(self, root)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: root
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectPath.setattr
  kind: callable
  ns: lxml.objectify
  description: |-
    setattr(self, root, value)

    Set the value of the target element in a subtree.

    If any of the children on the path does not exist, it is created.
  summary: setattr(self, root, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: root
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement
  kind: class
  ns: lxml.objectify
  description: |-
    This is the base class for all data type Elements.  Subclasses should
    override the 'pyval' property and possibly the __str__ method.
  summary: This is the base class for all data type Elements
  signatures: null
  inherits_from:
  - <class 'lxml.objectify.ObjectifiedElement'>
  - <class 'lxml.etree.ElementBase'>
  - <class 'lxml.etree._Element'>
- name: ObjectifiedDataElement.addattr
  kind: callable
  ns: lxml.objectify
  description: |-
    addattr(self, tag, value)

    Add a child value to the element.

    As opposed to append(), it sets a data value, not an element.
  summary: addattr(self, tag, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.addnext
  kind: callable
  ns: lxml.objectify
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.addprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.append
  kind: callable
  ns: lxml.objectify
  description: |-
    append(self, element)

    Adds a subelement to the end of this element.
  summary: append(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.attrib
  kind: property
  ns: lxml.objectify
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: ObjectifiedDataElement.base
  kind: property
  ns: lxml.objectify
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: ObjectifiedDataElement.clear
  kind: callable
  ns: lxml.objectify
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.countchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    countchildren(self)

    Return the number of children of this element, regardless of their
    name.
  summary: countchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.cssselect
  kind: callable
  ns: lxml.objectify
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.descendantpaths
  kind: callable
  ns: lxml.objectify
  description: |-
    descendantpaths(self, prefix=None)

    Returns a list of object path expressions for all descendants.
  summary: descendantpaths(self, prefix=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.extend
  kind: callable
  ns: lxml.objectify
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.find
  kind: callable
  ns: lxml.objectify
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.findall
  kind: callable
  ns: lxml.objectify
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.findtext
  kind: callable
  ns: lxml.objectify
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.get
  kind: callable
  ns: lxml.objectify
  description: |-
    get(self, key, default=None)

    Gets an element attribute.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.getchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    getchildren(self)

    Returns a sequence of all direct children.  The elements are
    returned in document order.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.getiterator
  kind: callable
  ns: lxml.objectify
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.getnext
  kind: callable
  ns: lxml.objectify
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.getparent
  kind: callable
  ns: lxml.objectify
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.getprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.getroottree
  kind: callable
  ns: lxml.objectify
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.index
  kind: callable
  ns: lxml.objectify
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.insert
  kind: callable
  ns: lxml.objectify
  description: |-
    insert(self, index, element)

    Inserts a subelement at the given position in this element
  summary: insert(self, index, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.items
  kind: callable
  ns: lxml.objectify
  description: |-
    items(self)

    Gets element attributes, as a sequence. The attributes are returned in
    an arbitrary order.
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.iter
  kind: callable
  ns: lxml.objectify
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.iterancestors
  kind: callable
  ns: lxml.objectify
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.iterchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.iterdescendants
  kind: callable
  ns: lxml.objectify
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.iterfind
  kind: callable
  ns: lxml.objectify
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.itersiblings
  kind: callable
  ns: lxml.objectify
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.itertext
  kind: callable
  ns: lxml.objectify
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.keys
  kind: callable
  ns: lxml.objectify
  description: |-
    keys(self)

    Gets a list of attribute names.  The names are returned in an
    arbitrary order (just like for an ordinary Python dictionary).
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.makeelement
  kind: callable
  ns: lxml.objectify
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.nsmap
  kind: property
  ns: lxml.objectify
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: ObjectifiedDataElement.prefix
  kind: property
  ns: lxml.objectify
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: ObjectifiedDataElement.pyval
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ObjectifiedDataElement.remove
  kind: callable
  ns: lxml.objectify
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.replace
  kind: callable
  ns: lxml.objectify
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.set
  kind: callable
  ns: lxml.objectify
  description: |-
    set(self, key, value)

    Sets an element attribute.
    In HTML documents (not XML or XHTML), the value None is allowed and creates
    an attribute without value (just the attribute name).
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.sourceline
  kind: property
  ns: lxml.objectify
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: ObjectifiedDataElement.tag
  kind: property
  ns: lxml.objectify
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: ObjectifiedDataElement.tail
  kind: property
  ns: lxml.objectify
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: ObjectifiedDataElement.text
  kind: property
  ns: lxml.objectify
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: ObjectifiedDataElement.values
  kind: callable
  ns: lxml.objectify
  description: |-
    values(self)

    Gets element attribute values as a sequence of strings.  The
    attributes are returned in an arbitrary order.
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedDataElement.xpath
  kind: callable
  ns: lxml.objectify
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement
  kind: class
  ns: lxml.objectify
  description: |-
    Main XML Element class.

    Element children are accessed as object attributes.  Multiple children
    with the same name are available through a list index.  Example::

       >>> root = XML("<root><c1><c2>0</c2><c2>1</c2></c1></root>")
       >>> second_c2 = root.c1.c2[1]
       >>> print(second_c2.text)
       1

    Note that you cannot (and must not) instantiate this class or its
    subclasses.
  summary: Main XML Element class
  signatures: null
  inherits_from:
  - <class 'lxml.etree.ElementBase'>
  - <class 'lxml.etree._Element'>
- name: ObjectifiedElement.addattr
  kind: callable
  ns: lxml.objectify
  description: |-
    addattr(self, tag, value)

    Add a child value to the element.

    As opposed to append(), it sets a data value, not an element.
  summary: addattr(self, tag, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.addnext
  kind: callable
  ns: lxml.objectify
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.addprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.append
  kind: callable
  ns: lxml.objectify
  description: |-
    append(self, element)

    Adds a subelement to the end of this element.
  summary: append(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.attrib
  kind: property
  ns: lxml.objectify
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: ObjectifiedElement.base
  kind: property
  ns: lxml.objectify
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: ObjectifiedElement.clear
  kind: callable
  ns: lxml.objectify
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.countchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    countchildren(self)

    Return the number of children of this element, regardless of their
    name.
  summary: countchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.cssselect
  kind: callable
  ns: lxml.objectify
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.descendantpaths
  kind: callable
  ns: lxml.objectify
  description: |-
    descendantpaths(self, prefix=None)

    Returns a list of object path expressions for all descendants.
  summary: descendantpaths(self, prefix=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.extend
  kind: callable
  ns: lxml.objectify
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.find
  kind: callable
  ns: lxml.objectify
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.findall
  kind: callable
  ns: lxml.objectify
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.findtext
  kind: callable
  ns: lxml.objectify
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.get
  kind: callable
  ns: lxml.objectify
  description: |-
    get(self, key, default=None)

    Gets an element attribute.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.getchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    getchildren(self)

    Returns a sequence of all direct children.  The elements are
    returned in document order.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.getiterator
  kind: callable
  ns: lxml.objectify
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.getnext
  kind: callable
  ns: lxml.objectify
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.getparent
  kind: callable
  ns: lxml.objectify
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.getprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.getroottree
  kind: callable
  ns: lxml.objectify
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.index
  kind: callable
  ns: lxml.objectify
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.insert
  kind: callable
  ns: lxml.objectify
  description: |-
    insert(self, index, element)

    Inserts a subelement at the given position in this element
  summary: insert(self, index, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.items
  kind: callable
  ns: lxml.objectify
  description: |-
    items(self)

    Gets element attributes, as a sequence. The attributes are returned in
    an arbitrary order.
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.iter
  kind: callable
  ns: lxml.objectify
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.iterancestors
  kind: callable
  ns: lxml.objectify
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.iterchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.iterdescendants
  kind: callable
  ns: lxml.objectify
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.iterfind
  kind: callable
  ns: lxml.objectify
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.itersiblings
  kind: callable
  ns: lxml.objectify
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.itertext
  kind: callable
  ns: lxml.objectify
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.keys
  kind: callable
  ns: lxml.objectify
  description: |-
    keys(self)

    Gets a list of attribute names.  The names are returned in an
    arbitrary order (just like for an ordinary Python dictionary).
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.makeelement
  kind: callable
  ns: lxml.objectify
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.nsmap
  kind: property
  ns: lxml.objectify
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: ObjectifiedElement.prefix
  kind: property
  ns: lxml.objectify
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: ObjectifiedElement.remove
  kind: callable
  ns: lxml.objectify
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.replace
  kind: callable
  ns: lxml.objectify
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.set
  kind: callable
  ns: lxml.objectify
  description: |-
    set(self, key, value)

    Sets an element attribute.
    In HTML documents (not XML or XHTML), the value None is allowed and creates
    an attribute without value (just the attribute name).
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.sourceline
  kind: property
  ns: lxml.objectify
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: ObjectifiedElement.tag
  kind: property
  ns: lxml.objectify
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: ObjectifiedElement.tail
  kind: property
  ns: lxml.objectify
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: ObjectifiedElement.text
  kind: property
  ns: lxml.objectify
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: ObjectifiedElement.values
  kind: callable
  ns: lxml.objectify
  description: |-
    values(self)

    Gets element attribute values as a sequence of strings.  The
    attributes are returned in an arbitrary order.
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ObjectifiedElement.xpath
  kind: callable
  ns: lxml.objectify
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ObjectifyElementClassLookup
  kind: class
  ns: lxml.objectify
  description: |-
    ObjectifyElementClassLookup(self, tree_class=None, empty_data_class=None)
    Element class lookup method that uses the objectify classes.
  summary: ObjectifyElementClassLookup(self, tree_class=None, empty_data_class=None)
  signatures: null
  inherits_from:
  - <class 'lxml.etree.ElementClassLookup'>
- name: PYTYPE_ATTRIBUTE
  kind: const
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PyType
  kind: class
  ns: lxml.objectify
  description: |-
    PyType(self, name, type_check, type_class, stringify=None)
    User defined type.

    Named type that contains a type check function, a type class that
    inherits from ObjectifiedDataElement and an optional "stringification"
    function.  The type check must take a string as argument and raise
    ValueError or TypeError if it cannot handle the string value.  It may be
    None in which case it is not considered for type guessing.  For registered
    named types, the 'stringify' function (or unicode() if None) is used to
    convert a Python object with type name 'name' to the string representation
    stored in the XML tree.

    Example::

        PyType('int', int, MyIntClass).register()

    Note that the order in which types are registered matters.  The first
    matching type will be used.
  summary: PyType(self, name, type_check, type_class, stringify=None)
  signatures: null
  inherits_from: null
- name: PyType.name
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PyType.register
  kind: callable
  ns: lxml.objectify
  description: |-
    register(self, before=None, after=None)

    Register the type.

    The additional keyword arguments 'before' and 'after' accept a
    sequence of type names that must appear before/after the new type in
    the type list.  If any of them is not currently known, it is simply
    ignored.  Raises ValueError if the dependencies cannot be fulfilled.
  summary: register(self, before=None, after=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: before
    default: None
    rest: false
  - kind: positional
    name: after
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PyType.stringify
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PyType.type_check
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PyType.unregister
  kind: callable
  ns: lxml.objectify
  description: unregister(self)
  summary: unregister(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PyType.xmlSchemaTypes
  kind: property
  ns: lxml.objectify
  description: |-
    The list of XML Schema datatypes this Python type maps to.

    Note that this must be set before registering the type!
  summary: The list of XML Schema datatypes this Python type maps to
  signatures: null
  inherits_from: null
- name: StringElement
  kind: class
  ns: lxml.objectify
  description: |-
    String data class.

    Note that this class does *not* support the sequence protocol of strings:
    len(), iter(), str_attr[0], str_attr[0:1], etc. are *not* supported.
    Instead, use the .text attribute to get a 'real' string.
  summary: String data class
  signatures: null
  inherits_from:
  - <class 'lxml.objectify.ObjectifiedDataElement'>
  - <class 'lxml.objectify.ObjectifiedElement'>
  - <class 'lxml.etree.ElementBase'>
  - <class 'lxml.etree._Element'>
- name: StringElement.addattr
  kind: callable
  ns: lxml.objectify
  description: |-
    addattr(self, tag, value)

    Add a child value to the element.

    As opposed to append(), it sets a data value, not an element.
  summary: addattr(self, tag, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.addnext
  kind: callable
  ns: lxml.objectify
  description: |-
    addnext(self, element)

    Adds the element as a following sibling directly after this
    element.

    This is normally used to set a processing instruction or comment after
    the root node of a document.  Note that tail text is automatically
    discarded when adding at the root level.
  summary: addnext(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.addprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    addprevious(self, element)

    Adds the element as a preceding sibling directly before this
    element.

    This is normally used to set a processing instruction or comment
    before the root node of a document.  Note that tail text is
    automatically discarded when adding at the root level.
  summary: addprevious(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.append
  kind: callable
  ns: lxml.objectify
  description: |-
    append(self, element)

    Adds a subelement to the end of this element.
  summary: append(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.attrib
  kind: property
  ns: lxml.objectify
  description: |-
    Element attribute dictionary. Where possible, use get(), set(),
    keys(), values() and items() to access element attributes.
  summary: Element attribute dictionary
  signatures: null
  inherits_from: null
- name: StringElement.base
  kind: property
  ns: lxml.objectify
  description: |-
    The base URI of the Element (xml:base or HTML base URL).
    None if the base URI is unknown.

    Note that the value depends on the URL of the document that
    holds the Element if there is no xml:base attribute on the
    Element or its ancestors.

    Setting this property will set an xml:base attribute on the
    Element, regardless of the document type (XML or HTML).
  summary: The base URI of the Element (xml:base or HTML base URL)
  signatures: null
  inherits_from: null
- name: StringElement.clear
  kind: callable
  ns: lxml.objectify
  description: |-
    clear(self, keep_tail=False)

    Resets an element.  This function removes all subelements, clears
    all attributes and sets the text and tail properties to None.

    Pass ``keep_tail=True`` to leave the tail text untouched.
  summary: clear(self, keep_tail=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: keep_tail
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.countchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    countchildren(self)

    Return the number of children of this element, regardless of their
    name.
  summary: countchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.cssselect
  kind: callable
  ns: lxml.objectify
  description: |-
    Run the CSS expression on this element and its children,
    returning a list of the results.

    Equivalent to lxml.cssselect.CSSSelect(expr)(self) -- note
    that pre-compiling the expression can provide a substantial
    speedup.
  summary: Run the CSS expression on this element and its children,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: expr
    default: null
    rest: false
  - name: translator
    default: xml
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: StringElement.descendantpaths
  kind: callable
  ns: lxml.objectify
  description: |-
    descendantpaths(self, prefix=None)

    Returns a list of object path expressions for all descendants.
  summary: descendantpaths(self, prefix=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.extend
  kind: callable
  ns: lxml.objectify
  description: |-
    extend(self, elements)

    Extends the current children by the elements in the iterable.
  summary: extend(self, elements)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: elements
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.find
  kind: callable
  ns: lxml.objectify
  description: |-
    find(self, path, namespaces=None)

    Finds the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: find(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.findall
  kind: callable
  ns: lxml.objectify
  description: |-
    findall(self, path, namespaces=None)

    Finds all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findall(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.findtext
  kind: callable
  ns: lxml.objectify
  description: |-
    findtext(self, path, default=None, namespaces=None)

    Finds text for the first matching subelement, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: findtext(self, path, default=None, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.get
  kind: callable
  ns: lxml.objectify
  description: |-
    get(self, key, default=None)

    Gets an element attribute.
  summary: get(self, key, default=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.getchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    getchildren(self)

    Returns a sequence of all direct children.  The elements are
    returned in document order.
  summary: getchildren(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.getiterator
  kind: callable
  ns: lxml.objectify
  description: |-
    getiterator(self, tag=None, *tags)

    Returns a sequence or iterator of all elements in the subtree in
    document order (depth first pre-order), starting with this
    element.

    Can be restricted to find only elements with specific tags,
    see `iter`.

    :deprecated: Note that this method is deprecated as of
      ElementTree 1.3 and lxml 2.0.  It returns an iterator in
      lxml, which diverges from the original ElementTree
      behaviour.  If you want an efficient iterator, use the
      ``element.iter()`` method instead.  You should only use this
      method in new code if you require backwards compatibility
      with older versions of lxml or ElementTree.
  summary: getiterator(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.getnext
  kind: callable
  ns: lxml.objectify
  description: |-
    getnext(self)

    Returns the following sibling of this element or None.
  summary: getnext(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.getparent
  kind: callable
  ns: lxml.objectify
  description: |-
    getparent(self)

    Returns the parent of this element or None for the root element.
  summary: getparent(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.getprevious
  kind: callable
  ns: lxml.objectify
  description: |-
    getprevious(self)

    Returns the preceding sibling of this element or None.
  summary: getprevious(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.getroottree
  kind: callable
  ns: lxml.objectify
  description: |-
    getroottree(self)

    Return an ElementTree for the root node of the document that
    contains this element.

    This is the same as following element.getparent() up the tree until it
    returns None (for the root element) and then build an ElementTree for
    the last parent that was returned.
  summary: getroottree(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.index
  kind: callable
  ns: lxml.objectify
  description: |-
    index(self, child, start=None, stop=None)

    Find the position of the child within the parent.

    This method is not part of the original ElementTree API.
  summary: index(self, child, start=None, stop=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: child
    default: null
    rest: false
  - kind: positional
    name: start
    default: None
    rest: false
  - kind: positional
    name: stop
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.insert
  kind: callable
  ns: lxml.objectify
  description: |-
    insert(self, index, element)

    Inserts a subelement at the given position in this element
  summary: insert(self, index, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: index
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.items
  kind: callable
  ns: lxml.objectify
  description: |-
    items(self)

    Gets element attributes, as a sequence. The attributes are returned in
    an arbitrary order.
  summary: items(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.iter
  kind: callable
  ns: lxml.objectify
  description: |-
    iter(self, tag=None, *tags)

    Iterate over all elements in the subtree in document order (depth
    first pre-order), starting with this element.

    Can be restricted to find only elements with specific tags:
    pass ``"{ns}localname"`` as tag. Either or both of ``ns`` and
    ``localname`` can be ``*`` for a wildcard; ``ns`` can be empty
    for no namespace. ``"localname"`` is equivalent to ``"{}localname"``
    (i.e. no namespace) but ``"*"`` is ``"{*}*"`` (any or no namespace),
    not ``"{}*"``.

    You can also pass the Element, Comment, ProcessingInstruction and
    Entity factory functions to look only for the specific element type.

    Passing multiple tags (or a sequence of tags) instead of a single tag
    will let the iterator return all elements matching any of these tags,
    in document order.
  summary: iter(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.iterancestors
  kind: callable
  ns: lxml.objectify
  description: |-
    iterancestors(self, tag=None, *tags)

    Iterate over the ancestors of this element (from parent to parent).

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: iterancestors(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.iterchildren
  kind: callable
  ns: lxml.objectify
  description: |-
    iterchildren(self, tag=None, *tags, reversed=False)

    Iterate over the children of this element.

    As opposed to using normal iteration on this element, the returned
    elements can be reversed with the 'reversed' keyword and restricted
    to find only elements with specific tags, see `iter`.
  summary: iterchildren(self, tag=None, *tags, reversed=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: reversed
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: StringElement.iterdescendants
  kind: callable
  ns: lxml.objectify
  description: |-
    iterdescendants(self, tag=None, *tags)

    Iterate over the descendants of this element in document order.

    As opposed to ``el.iter()``, this iterator does not yield the element
    itself.  The returned elements can be restricted to find only elements
    with specific tags, see `iter`.
  summary: iterdescendants(self, tag=None, *tags)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.iterfind
  kind: callable
  ns: lxml.objectify
  description: |-
    iterfind(self, path, namespaces=None)

    Iterates over all matching subelements, by tag name or path.

    The optional ``namespaces`` argument accepts a
    prefix-to-namespace mapping that allows the usage of XPath
    prefixes in the path expression.
  summary: iterfind(self, path, namespaces=None)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - kind: positional
    name: namespaces
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.itersiblings
  kind: callable
  ns: lxml.objectify
  description: |-
    itersiblings(self, tag=None, *tags, preceding=False)

    Iterate over the following or preceding siblings of this element.

    The direction is determined by the 'preceding' keyword which
    defaults to False, i.e. forward iteration over the following
    siblings.  When True, the iterator yields the preceding
    siblings in reverse document order, i.e. starting right before
    the current element and going backwards.

    Can be restricted to find only elements with specific tags,
    see `iter`.
  summary: itersiblings(self, tag=None, *tags, preceding=False)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: preceding
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: StringElement.itertext
  kind: callable
  ns: lxml.objectify
  description: |-
    itertext(self, tag=None, *tags, with_tail=True)

    Iterates over the text content of a subtree.

    You can pass tag names to restrict text content to specific elements,
    see `iter`.

    You can set the ``with_tail`` keyword argument to ``False`` to skip
    over tail text.
  summary: itertext(self, tag=None, *tags, with_tail=True)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: tag
    default: None
    rest: false
  - name: with_tail
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: StringElement.keys
  kind: callable
  ns: lxml.objectify
  description: |-
    keys(self)

    Gets a list of attribute names.  The names are returned in an
    arbitrary order (just like for an ordinary Python dictionary).
  summary: keys(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.makeelement
  kind: callable
  ns: lxml.objectify
  description: |-
    makeelement(self, _tag, attrib=None, nsmap=None, **_extra)

    Creates a new element associated with the same document.
  summary: makeelement(self, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.nsmap
  kind: property
  ns: lxml.objectify
  description: |-
    Namespace prefix->URI mapping known in the context of this
    Element.  This includes all namespace declarations of the
    parents.

    Note that changing the returned dict has no effect on the Element.
  summary: Namespace prefix->URI mapping known in the context of this
  signatures: null
  inherits_from: null
- name: StringElement.prefix
  kind: property
  ns: lxml.objectify
  description: "Namespace prefix or None.\n        "
  summary: Namespace prefix or None
  signatures: null
  inherits_from: null
- name: StringElement.pyval
  kind: property
  ns: lxml.objectify
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StringElement.remove
  kind: callable
  ns: lxml.objectify
  description: |-
    remove(self, element)

    Removes a matching subelement. Unlike the find methods, this
    method compares elements based on identity, not on tag value
    or contents.
  summary: remove(self, element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.replace
  kind: callable
  ns: lxml.objectify
  description: |-
    replace(self, old_element, new_element)

    Replaces a subelement with the element passed as second argument.
  summary: replace(self, old_element, new_element)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: old_element
    default: null
    rest: false
  - kind: positional
    name: new_element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.set
  kind: callable
  ns: lxml.objectify
  description: |-
    set(self, key, value)

    Sets an element attribute.
    In HTML documents (not XML or XHTML), the value None is allowed and creates
    an attribute without value (just the attribute name).
  summary: set(self, key, value)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.sourceline
  kind: property
  ns: lxml.objectify
  description: "Original line number as found by the parser or None if unknown.\n        "
  summary: Original line number as found by the parser or None if unknown
  signatures: null
  inherits_from: null
- name: StringElement.strlen
  kind: callable
  ns: lxml.objectify
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.tag
  kind: property
  ns: lxml.objectify
  description: "Element tag\n        "
  summary: Element tag
  signatures: null
  inherits_from: null
- name: StringElement.tail
  kind: property
  ns: lxml.objectify
  description: |-
    Text after this element's end tag, but before the next sibling
    element's start tag. This is either a string or the value None, if
    there was no text.
  summary: Text after this element's end tag, but before the next sibling
  signatures: null
  inherits_from: null
- name: StringElement.text
  kind: property
  ns: lxml.objectify
  description: |-
    Text before the first subelement. This is either a string or
    the value None, if there was no text.
  summary: Text before the first subelement
  signatures: null
  inherits_from: null
- name: StringElement.values
  kind: callable
  ns: lxml.objectify
  description: |-
    values(self)

    Gets element attribute values as a sequence of strings.  The
    attributes are returned in an arbitrary order.
  summary: values(self)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringElement.xpath
  kind: callable
  ns: lxml.objectify
  description: |-
    xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)

    Evaluate an xpath expression using the element as context node.
  summary: xpath(self, _path, namespaces=None, extensions=None, smart_strings=True, **_variables)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: _path
    default: null
    rest: false
  - name: namespaces
    default: None
    rest: false
    kind: kw-only
  - name: extensions
    default: None
    rest: false
    kind: kw-only
  - name: smart_strings
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: SubElement
  kind: callable
  ns: lxml.objectify
  description: |-
    SubElement(_parent, _tag, attrib=None, nsmap=None, **_extra)

    Subelement factory.  This function creates an element instance, and
    appends it to an existing element.
  summary: SubElement(_parent, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: _parent
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: XML
  kind: callable
  ns: lxml.objectify
  description: |-
    XML(xml, parser=None, base_url=None)

    Objectify specific version of the lxml.etree XML() literal factory
    that uses the objectify parser.

    You can pass a different parser as second argument.

    The ``base_url`` keyword argument allows to set the original base URL of
    the document to support relative Paths when looking up external entities
    (DTD, XInclude, ...).
  summary: XML(xml, parser=None, base_url=None)
  signatures:
  - kind: positional
    name: xml
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: annotate
  kind: callable
  ns: lxml.objectify
  description: "annotate(element_or_tree, ignore_old=True, ignore_xsi=False, empty_pytype=None, empty_type=None, annotate_xsi=0, annotate_pytype=1)\n\nRecursively annotates the elements of an XML tree with 'xsi:type'\nand/or 'py:pytype' attributes.\n\nIf the 'ignore_old' keyword argument is True (the default), current\n'py:pytype' attributes will be ignored for the type annotation. Set to False\nif you want reuse existing 'py:pytype' information (iff appropriate for the\nelement text value).\n\nIf the 'ignore_xsi' keyword argument is False (the default), existing\n'xsi:type' attributes will be used for the type annotation, if they fit the\nelement text values. \n\nNote that the mapping from Python types to XSI types is usually ambiguous.\nCurrently, only the first XSI type name in the corresponding PyType\ndefinition will be used for annotation.  Thus, you should consider naming\nthe widest type first if you define additional types.\n\nThe default 'py:pytype' annotation of empty elements can be set with the\n``empty_pytype`` keyword argument. Pass 'str', for example, to make\nstring values the default.\n\nThe default 'xsi:type' annotation of empty elements can be set with the\n``empty_type`` keyword argument.  The default is not to annotate empty\nelements.  Pass 'string', for example, to make string values the default.\n\nThe keyword arguments 'annotate_xsi' (default: 0) and 'annotate_pytype'\n(default: 1) control which kind(s) of annotation to use. "
  summary: annotate(element_or_tree, ignore_old=True, ignore_xsi=False, empty_pytype=None, empty_type=None, annotate_xsi=0, annotate_pytype=1)
  signatures:
  - kind: positional
    name: element_or_tree
    default: null
    rest: false
  - name: ignore_old
    default: 'True'
    rest: false
    kind: kw-only
  - name: ignore_xsi
    default: 'False'
    rest: false
    kind: kw-only
  - name: empty_pytype
    default: None
    rest: false
    kind: kw-only
  - name: empty_type
    default: None
    rest: false
    kind: kw-only
  - name: annotate_xsi
    default: '0'
    rest: false
    kind: kw-only
  - name: annotate_pytype
    default: '1'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: deannotate
  kind: callable
  ns: lxml.objectify
  description: "deannotate(element_or_tree, pytype=True, xsi=True, xsi_nil=False, cleanup_namespaces=False)\n\nRecursively de-annotate the elements of an XML tree by removing 'py:pytype'\nand/or 'xsi:type' attributes and/or 'xsi:nil' attributes.\n\nIf the 'pytype' keyword argument is True (the default), 'py:pytype'\nattributes will be removed. If the 'xsi' keyword argument is True (the \ndefault), 'xsi:type' attributes will be removed.\nIf the 'xsi_nil' keyword argument is True (default: False), 'xsi:nil'\nattributes will be removed.\n\nNote that this does not touch the namespace declarations by\ndefault.  If you want to remove unused namespace declarations from\nthe tree, pass the option ``cleanup_namespaces=True``."
  summary: deannotate(element_or_tree, pytype=True, xsi=True, xsi_nil=False, cleanup_namespaces=False)
  signatures:
  - kind: positional
    name: element_or_tree
    default: null
    rest: false
  - name: pytype
    default: 'True'
    rest: false
    kind: kw-only
  - name: xsi
    default: 'True'
    rest: false
    kind: kw-only
  - name: xsi_nil
    default: 'False'
    rest: false
    kind: kw-only
  - name: cleanup_namespaces
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: dump
  kind: callable
  ns: lxml.objectify
  description: |-
    dump(_Element element not None)

    Return a recursively generated string representation of an element.
  summary: dump(_Element element not None)
  signatures:
  - kind: positional
    name: element
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: enable_recursive_str
  kind: callable
  ns: lxml.objectify
  description: |-
    enable_recursive_str(on=True)

    Enable a recursively generated tree representation for str(element),
    based on objectify.dump(element).
  summary: enable_recursive_str(on=True)
  signatures:
  - kind: positional
    name: on
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: fromstring
  kind: callable
  ns: lxml.objectify
  description: |-
    fromstring(xml, parser=None, base_url=None)

    Objectify specific version of the lxml.etree fromstring() function
    that uses the objectify parser.

    You can pass a different parser as second argument.

    The ``base_url`` keyword argument allows to set the original base URL of
    the document to support relative Paths when looking up external entities
    (DTD, XInclude, ...).
  summary: fromstring(xml, parser=None, base_url=None)
  signatures:
  - kind: positional
    name: xml
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: getRegisteredTypes
  kind: callable
  ns: lxml.objectify
  description: |-
    getRegisteredTypes()

    Returns a list of the currently registered PyType objects.

    To add a new type, retrieve this list and call unregister() for all
    entries.  Then add the new type at a suitable position (possibly replacing
    an existing one) and call register() for all entries.

    This is necessary if the new type interferes with the type check functions
    of existing ones (normally only int/float/bool) and must the tried before
    other types.  To add a type that is not yet parsable by the current type
    check functions, you can simply register() it, which will append it to the
    end of the type list.
  summary: getRegisteredTypes()
  signatures:
  - type: '?'
  inherits_from: null
- name: makeparser
  kind: callable
  ns: lxml.objectify
  description: |-
    makeparser(remove_blank_text=True, **kw)

    Create a new XML parser for objectify trees.

    You can pass all keyword arguments that are supported by
    ``etree.XMLParser()``.  Note that this parser defaults to removing
    blank text.  You can disable this by passing the
    ``remove_blank_text`` boolean keyword option yourself.
  summary: makeparser(remove_blank_text=True, **kw)
  signatures:
  - type: '?'
  inherits_from: null
- name: parse
  kind: callable
  ns: lxml.objectify
  description: |-
    parse(f, parser=None, base_url=None)

    Parse a file or file-like object with the objectify parser.

    You can pass a different parser as second argument.

    The ``base_url`` keyword allows setting a URL for the document
    when parsing from a file-like object.  This is needed when looking
    up external entities (DTD, XInclude, ...) with relative paths.
  summary: parse(f, parser=None, base_url=None)
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - kind: positional
    name: parser
    default: None
    rest: false
  - name: base_url
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: pyannotate
  kind: callable
  ns: lxml.objectify
  description: |-
    pyannotate(element_or_tree, ignore_old=False, ignore_xsi=False, empty_pytype=None)

    Recursively annotates the elements of an XML tree with 'pytype'
    attributes.

    If the 'ignore_old' keyword argument is True (the default), current 'pytype'
    attributes will be ignored and replaced.  Otherwise, they will be checked
    and only replaced if they no longer fit the current text value.

    Setting the keyword argument ``ignore_xsi`` to True makes the function
    additionally ignore existing ``xsi:type`` annotations.  The default is to
    use them as a type hint.

    The default annotation of empty elements can be set with the
    ``empty_pytype`` keyword argument.  The default is not to annotate empty
    elements.  Pass 'str', for example, to make string values the default.
  summary: pyannotate(element_or_tree, ignore_old=False, ignore_xsi=False, empty_pytype=None)
  signatures:
  - kind: positional
    name: element_or_tree
    default: null
    rest: false
  - name: ignore_old
    default: 'False'
    rest: false
    kind: kw-only
  - name: ignore_xsi
    default: 'False'
    rest: false
    kind: kw-only
  - name: empty_pytype
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: pytypename
  kind: callable
  ns: lxml.objectify
  description: |-
    pytypename(obj)

    Find the name of the corresponding PyType for a Python object.
  summary: pytypename(obj)
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: set_default_parser
  kind: callable
  ns: lxml.objectify
  description: |-
    set_default_parser(new_parser = None)

    Replace the default parser used by objectify's Element() and
    fromstring() functions.

    The new parser must be an etree.XMLParser.

    Call without arguments to reset to the original parser.
  summary: set_default_parser(new_parser = None)
  signatures:
  - kind: positional
    name: new_parser
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: set_pytype_attribute_tag
  kind: callable
  ns: lxml.objectify
  description: |-
    set_pytype_attribute_tag(attribute_tag=None)
    Change name and namespace of the XML attribute that holds Python type
    information.

    Do not use this unless you know what you are doing.

    Reset by calling without argument.

    Default: "{http://codespeak.net/lxml/objectify/pytype}pytype"
  summary: set_pytype_attribute_tag(attribute_tag=None)
  signatures:
  - kind: positional
    name: attribute_tag
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: xsiannotate
  kind: callable
  ns: lxml.objectify
  description: |-
    xsiannotate(element_or_tree, ignore_old=False, ignore_pytype=False, empty_type=None)

    Recursively annotates the elements of an XML tree with 'xsi:type'
    attributes.

    If the 'ignore_old' keyword argument is True (the default), current
    'xsi:type' attributes will be ignored and replaced.  Otherwise, they will be
    checked and only replaced if they no longer fit the current text value.

    Note that the mapping from Python types to XSI types is usually ambiguous.
    Currently, only the first XSI type name in the corresponding PyType
    definition will be used for annotation.  Thus, you should consider naming
    the widest type first if you define additional types.

    Setting the keyword argument ``ignore_pytype`` to True makes the function
    additionally ignore existing ``pytype`` annotations.  The default is to
    use them as a type hint.

    The default annotation of empty elements can be set with the
    ``empty_type`` keyword argument.  The default is not to annotate empty
    elements.  Pass 'string', for example, to make string values the default.
  summary: xsiannotate(element_or_tree, ignore_old=False, ignore_pytype=False, empty_type=None)
  signatures:
  - kind: positional
    name: element_or_tree
    default: null
    rest: false
  - name: ignore_old
    default: 'False'
    rest: false
    kind: kw-only
  - name: ignore_pytype
    default: 'False'
    rest: false
    kind: kw-only
  - name: empty_type
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: lxml.pyclasslookup
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: lxml.sax
  kind: module
  ns: null
  description: |-
    SAX-based adapter to copy trees from/to the Python standard library.

    Use the `ElementTreeContentHandler` class to build an ElementTree from
    SAX events.

    Use the `ElementTreeProducer` class or the `saxify()` function to fire
    the SAX events of an ElementTree against a SAX ContentHandler.

    See https://lxml.de/sax.html
  summary: SAX-based adapter to copy trees from/to the Python standard library
  signatures: null
  inherits_from: null
- name: Comment
  kind: callable
  ns: lxml.sax
  description: |-
    Comment(text=None)

    Comment element factory. This factory function creates a special element that will
    be serialized as an XML comment.
  summary: Comment(text=None)
  signatures:
  - kind: positional
    name: text
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler
  kind: class
  ns: lxml.sax
  description: |-
    Interface for receiving logical document content events.

    This is the main callback interface in SAX, and the one most
    important to applications. The order of events in this interface
    mirrors the order of the information in the document.
  summary: Interface for receiving logical document content events
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: ContentHandler
  inherits_from: null
- name: ContentHandler.characters
  kind: method
  ns: lxml.sax
  description: |-
    Receive notification of character data.

    The Parser will call this method to report each chunk of
    character data. SAX parsers may return all contiguous
    character data in a single chunk, or they may split it into
    several chunks; however, all of the characters in any single
    event must come from the same external entity so that the
    Locator provides useful information.
  summary: Receive notification of character data
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: content
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.endDocument
  kind: method
  ns: lxml.sax
  description: |-
    Receive notification of the end of a document.

    The SAX parser will invoke this method only once, and it will
    be the last method invoked during the parse. The parser shall
    not invoke this method until it has either abandoned parsing
    (because of an unrecoverable error) or reached the end of
    input.
  summary: Receive notification of the end of a document
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.endElement
  kind: method
  ns: lxml.sax
  description: |-
    Signals the end of an element in non-namespace mode.

    The name parameter contains the name of the element type, just
    as with the startElement event.
  summary: Signals the end of an element in non-namespace mode
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.endElementNS
  kind: method
  ns: lxml.sax
  description: |-
    Signals the end of an element in namespace mode.

    The name parameter contains the name of the element type, just
    as with the startElementNS event.
  summary: Signals the end of an element in namespace mode
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: qname
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.endPrefixMapping
  kind: method
  ns: lxml.sax
  description: |-
    End the scope of a prefix-URI mapping.

    See startPrefixMapping for details. This event will always
    occur after the corresponding endElement event, but the order
    of endPrefixMapping events is not otherwise guaranteed.
  summary: End the scope of a prefix-URI mapping
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.ignorableWhitespace
  kind: method
  ns: lxml.sax
  description: |-
    Receive notification of ignorable whitespace in element content.

    Validating Parsers must use this method to report each chunk
    of ignorable whitespace (see the W3C XML 1.0 recommendation,
    section 2.10): non-validating parsers may also use this method
    if they are capable of parsing and using content models.

    SAX parsers may return all contiguous whitespace in a single
    chunk, or they may split it into several chunks; however, all
    of the characters in any single event must come from the same
    external entity, so that the Locator provides useful
    information.
  summary: Receive notification of ignorable whitespace in element content
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: whitespace
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.processingInstruction
  kind: method
  ns: lxml.sax
  description: |-
    Receive notification of a processing instruction.

    The Parser will invoke this method once for each processing
    instruction found: note that processing instructions may occur
    before or after the main document element.

    A SAX parser should never report an XML declaration (XML 1.0,
    section 2.8) or a text declaration (XML 1.0, section 4.3.1)
    using this method.
  summary: Receive notification of a processing instruction
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.setDocumentLocator
  kind: method
  ns: lxml.sax
  description: |-
    Called by the parser to give the application a locator for
    locating the origin of document events.

    SAX parsers are strongly encouraged (though not absolutely
    required) to supply a locator: if it does so, it must supply
    the locator to the application by invoking this method before
    invoking any of the other methods in the DocumentHandler
    interface.

    The locator allows the application to determine the end
    position of any document-related event, even if the parser is
    not reporting an error. Typically, the application will use
    this information for reporting its own errors (such as
    character content that does not match an application's
    business rules). The information returned by the locator is
    probably not sufficient for use with a search engine.

    Note that the locator will return correct information only
    during the invocation of the events in this interface. The
    application should not attempt to use it at any other time.
  summary: Called by the parser to give the application a locator for
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: locator
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.skippedEntity
  kind: method
  ns: lxml.sax
  description: |-
    Receive notification of a skipped entity.

    The Parser will invoke this method once for each entity
    skipped. Non-validating processors may skip entities if they
    have not seen the declarations (because, for example, the
    entity was declared in an external DTD subset). All processors
    may skip external entities, depending on the values of the
    http://xml.org/sax/features/external-general-entities and the
    http://xml.org/sax/features/external-parameter-entities
    properties.
  summary: Receive notification of a skipped entity
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.startDocument
  kind: method
  ns: lxml.sax
  description: |-
    Receive notification of the beginning of a document.

    The SAX parser will invoke this method only once, before any
    other methods in this interface or in DTDHandler (except for
    setDocumentLocator).
  summary: Receive notification of the beginning of a document
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.startElement
  kind: method
  ns: lxml.sax
  description: |-
    Signals the start of an element in non-namespace mode.

    The name parameter contains the raw XML 1.0 name of the
    element type as a string and the attrs parameter holds an
    instance of the Attributes class containing the attributes of
    the element.
  summary: Signals the start of an element in non-namespace mode
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: attrs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.startElementNS
  kind: method
  ns: lxml.sax
  description: |-
    Signals the start of an element in namespace mode.

    The name parameter contains the name of the element type as a
    (uri, localname) tuple, the qname parameter the raw XML 1.0
    name used in the source document, and the attrs parameter
    holds an instance of the Attributes class containing the
    attributes of the element.

    The uri part of the name tuple is None for elements which have
    no namespace.
  summary: Signals the start of an element in namespace mode
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: qname
    default: null
    rest: false
  - kind: positional
    name: attrs
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentHandler.startPrefixMapping
  kind: method
  ns: lxml.sax
  description: |-
    Begin the scope of a prefix-URI Namespace mapping.

    The information from this event is not necessary for normal
    Namespace processing: the SAX XML reader will automatically
    replace prefixes for element and attribute names when the
    http://xml.org/sax/features/namespaces feature is true (the
    default).

    There are cases, however, when applications need to use
    prefixes in character data or in attribute values, where they
    cannot safely be expanded automatically; the
    start/endPrefixMapping event supplies the information to the
    application to expand prefixes in those contexts itself, if
    necessary.

    Note that start/endPrefixMapping events are not guaranteed to
    be properly nested relative to each-other: all
    startPrefixMapping events will occur before the corresponding
    startElement event, and all endPrefixMapping events will occur
    after the corresponding endElement event, but their order is
    not guaranteed.
  summary: Begin the scope of a prefix-URI Namespace mapping
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: null
    rest: false
  - kind: positional
    name: uri
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTree
  kind: callable
  ns: lxml.sax
  description: |-
    ElementTree(element=None, file=None, parser=None)

    ElementTree wrapper class.
  summary: ElementTree(element=None, file=None, parser=None)
  signatures:
  - kind: positional
    name: element
    default: None
    rest: false
  - name: file
    default: None
    rest: false
    kind: kw-only
  - name: parser
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler
  kind: class
  ns: lxml.sax
  description: "Build an lxml ElementTree from SAX events.\n    "
  summary: Build an lxml ElementTree from SAX events
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: makeelement
    default: None
    rest: false
  - type: ElementTreeContentHandler
  inherits_from:
  - <class 'xml.sax.handler.ContentHandler'>
- name: ElementTreeContentHandler.characters
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.endDocument
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.endElement
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.endElementNS
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ns_name
    default: null
    rest: false
  - kind: positional
    name: qname
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.endPrefixMapping
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.etree
  kind: property
  ns: lxml.sax
  description: Contains the generated ElementTree after parsing is finished.
  summary: Contains the generated ElementTree after parsing is finished
  signatures: null
  inherits_from: null
- name: ElementTreeContentHandler.ignorableWhitespace
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.processingInstruction
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.setDocumentLocator
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: locator
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.skippedEntity
  kind: method
  ns: lxml.sax
  description: |-
    Receive notification of a skipped entity.

    The Parser will invoke this method once for each entity
    skipped. Non-validating processors may skip entities if they
    have not seen the declarations (because, for example, the
    entity was declared in an external DTD subset). All processors
    may skip external entities, depending on the values of the
    http://xml.org/sax/features/external-general-entities and the
    http://xml.org/sax/features/external-parameter-entities
    properties.
  summary: Receive notification of a skipped entity
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.startDocument
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.startElement
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: attributes
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.startElementNS
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ns_name
    default: null
    rest: false
  - kind: positional
    name: qname
    default: null
    rest: false
  - kind: positional
    name: attributes
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeContentHandler.startPrefixMapping
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: null
    rest: false
  - kind: positional
    name: uri
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ElementTreeProducer
  kind: class
  ns: lxml.sax
  description: "Produces SAX events for an element and children.\n    "
  summary: Produces SAX events for an element and children
  signatures: null
  inherits_from: null
- name: ElementTreeProducer.saxify
  kind: callable
  ns: lxml.sax
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ProcessingInstruction
  kind: callable
  ns: lxml.sax
  description: |-
    ProcessingInstruction(target, text=None)

    ProcessingInstruction element factory. This factory function creates a
    special element that will be serialized as an XML processing instruction.
  summary: ProcessingInstruction(target, text=None)
  signatures:
  - kind: positional
    name: target
    default: null
    rest: false
  - kind: positional
    name: text
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SaxError
  kind: class
  ns: lxml.sax
  description: "General SAX error.\n    "
  summary: General SAX error
  signatures: null
  inherits_from:
  - <class 'lxml.etree.LxmlError'>
  - <class 'lxml.etree.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SaxError.add_note
  kind: callable
  ns: lxml.sax
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SaxError.args
  kind: property
  ns: lxml.sax
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SaxError.with_traceback
  kind: callable
  ns: lxml.sax
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SubElement
  kind: callable
  ns: lxml.sax
  description: |-
    SubElement(_parent, _tag, attrib=None, nsmap=None, **_extra)

    Subelement factory.  This function creates an element instance, and
    appends it to an existing element.
  summary: SubElement(_parent, _tag, attrib=None, nsmap=None, **_extra)
  signatures:
  - kind: positional
    name: _parent
    default: null
    rest: false
  - kind: positional
    name: _tag
    default: null
    rest: false
  - kind: positional
    name: attrib
    default: None
    rest: false
  - kind: positional
    name: nsmap
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: saxify
  kind: callable
  ns: lxml.sax
  description: |-
    One-shot helper to generate SAX events from an XML tree and fire
    them against a SAX ContentHandler.
  summary: One-shot helper to generate SAX events from an XML tree and fire
  signatures:
  - kind: positional
    name: element_or_tree
    default: null
    rest: false
  - kind: positional
    name: content_handler
    default: null
    rest: false
  - type: '?'
  inherits_from: null
