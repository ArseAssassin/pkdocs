---
name: urllib3
text_format: rst
generator: src:python
generator_command: src:python use "urllib3"
version: 2.2.1
description: |
  <h1 align="center">

  ![urllib3](https://github.com/urllib3/urllib3/raw/main/docs/_static/banner_github.svg)

  </h1>

  <p align="center">
    <a href="https://pypi.org/project/urllib3"><img alt="PyPI Version" src="https://img.shields.io/pypi/v/urllib3.svg?maxAge=86400" /></a>
    <a href="https://pypi.org/project/urllib3"><img alt="Python Versions" src="https://img.shields.io/pypi/pyversions/urllib3.svg?maxAge=86400" /></a>
    <a href="https://discord.gg/urllib3"><img alt="Join our Discord" src="https://img.shields.io/discord/756342717725933608?color=%237289da&label=discord" /></a>
    <a href="https://github.com/urllib3/urllib3/actions?query=workflow%3ACI"><img alt="Coverage Status" src="https://img.shields.io/badge/coverage-100%25-success" /></a>
    <a href="https://github.com/urllib3/urllib3/actions?query=workflow%3ACI"><img alt="Build Status on GitHub" src="https://github.com/urllib3/urllib3/workflows/CI/badge.svg" /></a>
    <a href="https://urllib3.readthedocs.io"><img alt="Documentation Status" src="https://readthedocs.org/projects/urllib3/badge/?version=latest" /></a><br>
    <a href="https://deps.dev/pypi/urllib3"><img alt="OpenSSF Scorecard" src="https://api.securityscorecards.dev/projects/github.com/urllib3/urllib3/badge" /></a>
    <a href="https://slsa.dev"><img alt="SLSA 3" src="https://slsa.dev/images/gh-badge-level3.svg" /></a>
    <a href="https://bestpractices.coreinfrastructure.org/projects/6227"><img alt="CII Best Practices" src="https://bestpractices.coreinfrastructure.org/projects/6227/badge" /></a>
  </p>

  urllib3 is a powerful, *user-friendly* HTTP client for Python. Much of the
  Python ecosystem already uses urllib3 and you should too.
  urllib3 brings many critical features that are missing from the Python
  standard libraries:

  - Thread safety.
  - Connection pooling.
  - Client-side SSL/TLS verification.
  - File uploads with multipart encoding.
  - Helpers for retrying requests and dealing with HTTP redirects.
  - Support for gzip, deflate, brotli, and zstd encoding.
  - Proxy support for HTTP and SOCKS.
  - 100% test coverage.

  urllib3 is powerful and easy to use:

  ```python3
  >>> import urllib3
  >>> resp = urllib3.request("GET", "http://httpbin.org/robots.txt")
  >>> resp.status
  200
  >>> resp.data
  b"User-agent: *\nDisallow: /deny\n"
  ```

  ## Installing

  urllib3 can be installed with [pip](https://pip.pypa.io):

  ```bash
  $ python -m pip install urllib3
  ```

  Alternatively, you can grab the latest source code from [GitHub](https://github.com/urllib3/urllib3):

  ```bash
  $ git clone https://github.com/urllib3/urllib3.git
  $ cd urllib3
  $ pip install .
  ```


  ## Documentation

  urllib3 has usage and reference documentation at [urllib3.readthedocs.io](https://urllib3.readthedocs.io).


  ## Community

  urllib3 has a [community Discord channel](https://discord.gg/urllib3) for asking questions and
  collaborating with other contributors. Drop by and say hello ðŸ‘‹


  ## Contributing

  urllib3 happily accepts contributions. Please see our
  [contributing documentation](https://urllib3.readthedocs.io/en/latest/contributing.html)
  for some tips on getting started.


  ## Security Disclosures

  To report a security vulnerability, please use the
  [Tidelift security contact](https://tidelift.com/security).
  Tidelift will coordinate the fix and disclosure with maintainers.


  ## Maintainers

  - [@sethmlarson](https://github.com/sethmlarson) (Seth M. Larson)
  - [@pquentin](https://github.com/pquentin) (Quentin Pradet)
  - [@illia-v](https://github.com/illia-v) (Illia Volochii)
  - [@theacodes](https://github.com/theacodes) (Thea Flowers)
  - [@haikuginger](https://github.com/haikuginger) (Jess Shapiro)
  - [@lukasa](https://github.com/lukasa) (Cory Benfield)
  - [@sigmavirus24](https://github.com/sigmavirus24) (Ian Stapleton Cordasco)
  - [@shazow](https://github.com/shazow) (Andrey Petrov)

  ðŸ‘‹


  ## Sponsorship

  If your company benefits from this library, please consider [sponsoring its
  development](https://urllib3.readthedocs.io/en/latest/sponsors.html).


  ## For Enterprise

  Professional support for urllib3 is available as part of the [Tidelift
  Subscription][1].  Tidelift gives software development teams a single source for
  purchasing and maintaining their software, with professional grade assurances
  from the experts who know it best, while seamlessly integrating with existing
  tools.

  [1]: https://tidelift.com/subscription/pkg/pypi-urllib3?utm_source=pypi-urllib3&utm_medium=referral&utm_campaign=readme
homepage: null
license: MIT

---
- name: urllib3
  kind: module
  ns: null
  description: Python HTTP library with thread-safe connection pooling, file post support, user friendly, and more
  summary: Python HTTP library with thread-safe connection pooling, file post support, user friendly, and more
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool
  kind: class
  ns: urllib3
  description: |-
    Thread-safe connection pool for one host.

    :param host:
        Host used for this HTTP Connection (e.g. "localhost"), passed into
        :class:`http.client.HTTPConnection`.

    :param port:
        Port used for this HTTP Connection (None is equivalent to 80), passed
        into :class:`http.client.HTTPConnection`.

    :param timeout:
        Socket timeout in seconds for each individual connection. This can
        be a float or integer, which sets the timeout for the HTTP request,
        or an instance of :class:`urllib3.util.Timeout` which gives you more
        fine-grained control over request timeouts. After the constructor has
        been parsed, this is always a `urllib3.util.Timeout` object.

    :param maxsize:
        Number of connections to save that can be reused. More than 1 is useful
        in multithreaded situations. If ``block`` is set to False, more
        connections will be created but they will not be saved once they've
        been used.

    :param block:
        If set to True, no more than ``maxsize`` connections will be used at
        a time. When no free connections are available, the call will block
        until a connection has been released. This is a useful side effect for
        particular multithreaded situations where one does not want to use more
        than maxsize connections per host to prevent flooding.

    :param headers:
        Headers to include with all requests, unless other headers are given
        explicitly.

    :param retries:
        Retry configuration to use by default with requests in this pool.

    :param _proxy:
        Parsed proxy URL, should not be used directly, instead, see
        :class:`urllib3.ProxyManager`

    :param _proxy_headers:
        A dictionary with proxy headers, should not be used directly,
        instead, see :class:`urllib3.ProxyManager`

    :param \**conn_kw:
        Additional parameters are used to create fresh :class:`urllib3.connection.HTTPConnection`,
        :class:`urllib3.connection.HTTPSConnection` instances.
  summary: Thread-safe connection pool for one host
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - kind: positional
    name: timeout
    default: _TYPE_DEFAULT.token
    rest: false
  - kind: positional
    name: maxsize
    default: '1'
    rest: false
  - kind: positional
    name: block
    default: 'False'
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: retries
    default: None
    rest: false
  - kind: positional
    name: _proxy
    default: None
    rest: false
  - kind: positional
    name: _proxy_headers
    default: None
    rest: false
  - kind: positional
    name: _proxy_config
    default: None
    rest: false
  - type: HTTPConnectionPool
  inherits_from:
  - <class 'urllib3.connectionpool.ConnectionPool'>
  - <class 'urllib3._request_methods.RequestMethods'>
- name: HTTPConnectionPool.ConnectionCls
  kind: class
  ns: urllib3
  description: |-
    Based on :class:`http.client.HTTPConnection` but provides an extra constructor
    backwards-compatibility layer between older and newer Pythons.

    Additional keyword parameters are used to configure attributes of the connection.
    Accepted parameters include:

    - ``source_address``: Set the source address for the current connection.
    - ``socket_options``: Set specific options on the underlying socket. If not specified, then
      defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling
      Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.

      For example, if you wish to enable TCP Keep Alive in addition to the defaults,
      you might pass:

      .. code-block:: python

         HTTPConnection.default_socket_options + [
             (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
         ]

      Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).
  summary: Based on :class:`http
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - name: timeout
    default: _TYPE_DEFAULT.token
    rest: false
    kind: kw-only
  - name: source_address
    default: None
    rest: false
    kind: kw-only
  - name: blocksize
    default: '16384'
    rest: false
    kind: kw-only
  - name: socket_options
    default: '[(6, 1, 1)]'
    rest: false
    kind: kw-only
  - name: proxy
    default: None
    rest: false
    kind: kw-only
  - name: proxy_config
    default: None
    rest: false
    kind: kw-only
  - type: HTTPConnection
  inherits_from:
  - <class 'http.client.HTTPConnection'>
- name: HTTPConnectionPool.ConnectionCls.auto_open
  kind: property
  ns: urllib3
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.close
  kind: method
  ns: urllib3
  description: Close the connection to the HTTP server.
  summary: Close the connection to the HTTP server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.connect
  kind: method
  ns: urllib3
  description: Connect to the host and port specified in __init__.
  summary: Connect to the host and port specified in __init__
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.debuglevel
  kind: property
  ns: urllib3
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.default_port
  kind: property
  ns: urllib3
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.default_socket_options
  kind: property
  ns: urllib3
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.endheaders
  kind: method
  ns: urllib3
  description: |-
    Indicate that the last header line has been sent to the server.

    This method sends the request to the server.  The optional message_body
    argument can be used to pass a message body associated with the
    request.
  summary: Indicate that the last header line has been sent to the server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message_body
    default: None
    rest: false
  - name: encode_chunked
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.getresponse
  kind: method
  ns: urllib3
  description: |-
    Get the response from the server.

    If the HTTPConnection is in the correct state, returns an instance of HTTPResponse or of whatever object is returned by the response_class variable.

    If a request has not been sent or if a previous response has not be handled, ResponseNotReady is raised. If the HTTP response indicates that the connection should be closed, then it will be closed before the response is returned. When the connection is closed, the underlying socket is closed.
  summary: Get the response from the server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.has_connected_to_proxy
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.host
  kind: property
  ns: urllib3
  description: |-
    Getter method to remove any trailing dots that indicate the hostname is an FQDN.

    In general, SSL certificates don't include the trailing dot indicating a
    fully-qualified domain name, and thus, they don't validate properly when
    checked against a domain name that includes the dot. In addition, some
    servers may not expect to receive the trailing dot when provided.

    However, the hostname with trailing dot is critical to DNS resolution; doing a
    lookup with the trailing dot will properly only resolve the appropriate FQDN,
    whereas a lookup without a trailing dot will search the system's search domain
    list. Thus, it's important to keep the original host around for use only in
    those cases where it's appropriate (i.e., when doing DNS lookup to establish the
    actual TCP connection across which we're going to send HTTP requests).
  summary: Getter method to remove any trailing dots that indicate the hostname is an FQDN
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.is_closed
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.is_connected
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.is_verified
  kind: property
  ns: urllib3
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.proxy_is_forwarding
  kind: property
  ns: urllib3
  description: Return True if a forwarding proxy is configured, else return False
  summary: Return True if a forwarding proxy is configured, else return False
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.proxy_is_verified
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.putheader
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: header
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.putrequest
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: skip_host
    default: 'False'
    rest: false
  - kind: positional
    name: skip_accept_encoding
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.request
  kind: method
  ns: urllib3
  description: Send a complete request to the server.
  summary: Send a complete request to the server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - name: chunked
    default: 'False'
    rest: false
    kind: kw-only
  - name: preload_content
    default: 'True'
    rest: false
    kind: kw-only
  - name: decode_content
    default: 'True'
    rest: false
    kind: kw-only
  - name: enforce_content_length
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.request_chunked
  kind: method
  ns: urllib3
  description: |-
    Alternative to the common request method, which sends the
    body with chunked encoding and not as one block
  summary: Alternative to the common request method, which sends the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class
  kind: class
  ns: urllib3
  description: |-
    Base class for buffered IO objects.

    The main difference with RawIOBase is that the read() method
    supports omitting the size argument, and does not have a default
    implementation that defers to readinto().

    In addition, read(), readinto() and write() may raise
    BlockingIOError if the underlying raw stream is in non-blocking
    mode and not ready; unlike their raw counterparts, they will never
    return None.

    A typical implementation should not inherit from a RawIOBase
    implementation, but wrap one.
  summary: Base class for buffered IO objects
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sock
    default: null
    rest: false
  - kind: positional
    name: debuglevel
    default: '0'
    rest: false
  - kind: positional
    name: method
    default: None
    rest: false
  - kind: positional
    name: url
    default: None
    rest: false
  - type: HTTPResponse
  inherits_from:
  - <class 'io.BufferedIOBase'>
  - <class '_io._BufferedIOBase'>
  - <class 'io.IOBase'>
  - <class '_io._IOBase'>
- name: HTTPConnectionPool.ConnectionCls.response_class.begin
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.close
  kind: method
  ns: urllib3
  description: |-
    Flush and close the IO object.

    This method has no effect if the file is already closed.
  summary: Flush and close the IO object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.closed
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.detach
  kind: callable
  ns: urllib3
  description: |-
    Disconnect this buffer from its underlying raw stream and return it.

    After the raw stream has been detached, the buffer is in an unusable
    state.
  summary: Disconnect this buffer from its underlying raw stream and return it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.fileno
  kind: method
  ns: urllib3
  description: |-
    Returns underlying file descriptor if one exists.

    OSError is raised if the IO object does not use a file descriptor.
  summary: Returns underlying file descriptor if one exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.flush
  kind: method
  ns: urllib3
  description: |-
    Flush write buffers, if applicable.

    This is not implemented for read-only and non-blocking streams.
  summary: Flush write buffers, if applicable
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.getcode
  kind: method
  ns: urllib3
  description: |-
    Return the HTTP status code that was sent with the response,
    or None if the URL is not an HTTP URL.
  summary: Return the HTTP status code that was sent with the response,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.getheader
  kind: method
  ns: urllib3
  description: |-
    Returns the value of the header matching *name*.

    If there are multiple matching headers, the values are
    combined into a single string separated by commas and spaces.

    If no matching header is found, returns *default* or None if
    the *default* is not specified.

    If the headers are unknown, raises http.client.ResponseNotReady.
  summary: Returns the value of the header matching *name*
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.getheaders
  kind: method
  ns: urllib3
  description: Return list of (header, value) tuples.
  summary: Return list of (header, value) tuples
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.geturl
  kind: method
  ns: urllib3
  description: |-
    Return the real URL of the page.

    In some cases, the HTTP server redirects a client to another
    URL. The urlopen() function handles this transparently, but in
    some cases the caller needs to know which URL the client was
    redirected to. The geturl() method can be used to get at this
    redirected URL.
  summary: Return the real URL of the page
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.info
  kind: method
  ns: urllib3
  description: |-
    Returns an instance of the class mimetools.Message containing
    meta-information associated with the URL.

    When the method is HTTP, these headers are those returned by
    the server at the head of the retrieved HTML page (including
    Content-Length and Content-Type).

    When the method is FTP, a Content-Length header will be
    present if (as is now usual) the server passed back a file
    length in response to the FTP retrieval request. A
    Content-Type header will be present if the MIME type can be
    guessed.

    When the method is local-file, returned headers will include
    a Date representing the file's last-modified time, a
    Content-Length giving file size, and a Content-Type
    containing a guess at the file's type. See also the
    description of the mimetools module.
  summary: Returns an instance of the class mimetools
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.isatty
  kind: callable
  ns: urllib3
  description: |-
    Return whether this is an 'interactive' stream.

    Return False if it can't be determined.
  summary: Return whether this is an 'interactive' stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.isclosed
  kind: method
  ns: urllib3
  description: True if the connection is closed.
  summary: True if the connection is closed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.peek
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.read
  kind: method
  ns: urllib3
  description: Read and return the response body, or up to the next amt bytes.
  summary: Read and return the response body, or up to the next amt bytes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: amt
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.read1
  kind: method
  ns: urllib3
  description: |-
    Read with at most one underlying system call.  If at least one
    byte is buffered, return that instead.
  summary: Read with at most one underlying system call
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.readable
  kind: method
  ns: urllib3
  description: Always returns True
  summary: Always returns True
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.readinto
  kind: method
  ns: urllib3
  description: |-
    Read up to len(b) bytes into bytearray b and return the number
    of bytes read.
  summary: Read up to len(b) bytes into bytearray b and return the number
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: b
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.readinto1
  kind: callable
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: buffer
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.readline
  kind: method
  ns: urllib3
  description: |-
    Read and return a line from the stream.

    If size is specified, at most size bytes will be read.

    The line terminator is always b'\n' for binary files; for text
    files, the newlines argument to open can be used to select the line
    terminator(s) recognized.
  summary: Read and return a line from the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: limit
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.readlines
  kind: callable
  ns: urllib3
  description: |-
    Return a list of lines from the stream.

    hint can be specified to control the number of lines read: no more
    lines will be read if the total size (in bytes/characters) of all
    lines so far exceeds hint.
  summary: Return a list of lines from the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: hint
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.seek
  kind: callable
  ns: urllib3
  description: |-
    Change the stream position to the given byte offset.

      offset
        The stream position, relative to 'whence'.
      whence
        The relative position to seek from.

    The offset is interpreted relative to the position indicated by whence.
    Values for whence are:

    * os.SEEK_SET or 0 -- start of stream (the default); offset should be zero or positive
    * os.SEEK_CUR or 1 -- current stream position; offset may be negative
    * os.SEEK_END or 2 -- end of stream; offset is usually negative

    Return the new absolute position.
  summary: Change the stream position to the given byte offset
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: offset
    default: null
    rest: false
  - kind: positional
    name: whence
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.seekable
  kind: callable
  ns: urllib3
  description: |-
    Return whether object supports random access.

    If False, seek(), tell() and truncate() will raise OSError.
    This method may need to do a test seek().
  summary: Return whether object supports random access
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.tell
  kind: callable
  ns: urllib3
  description: Return current stream position.
  summary: Return current stream position
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.truncate
  kind: callable
  ns: urllib3
  description: |-
    Truncate file to size bytes.

    File pointer is left unchanged.  Size defaults to the current IO
    position as reported by tell().  Returns the new size.
  summary: Truncate file to size bytes
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.writable
  kind: callable
  ns: urllib3
  description: |-
    Return whether object was opened for writing.

    If False, write() will raise OSError.
  summary: Return whether object was opened for writing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.write
  kind: callable
  ns: urllib3
  description: |-
    Write the given buffer to the IO stream.

    Returns the number of bytes written, which is always the length of b
    in bytes.

    Raises BlockingIOError if the buffer is full and the
    underlying raw stream cannot accept more data at the moment.
  summary: Write the given buffer to the IO stream
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.response_class.writelines
  kind: callable
  ns: urllib3
  description: |-
    Write a list of lines to stream.

    Line separators are not added, so it is usual for each of the
    lines provided to have a line separator at the end.
  summary: Write a list of lines to stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lines
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.send
  kind: method
  ns: urllib3
  description: |-
    Send `data' to the server.
    ``data`` can be a string object, a bytes object, an array object, a
    file-like object that supports a .read() method, or an iterable object.
  summary: Send `data' to the server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.set_debuglevel
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: level
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.ConnectionCls.set_tunnel
  kind: method
  ns: urllib3
  description: |-
    Set up host and port for HTTP CONNECT tunnelling.

    In a connection that uses HTTP CONNECT tunneling, the host passed to the
    constructor is used as a proxy server that relays all communication to
    the endpoint passed to `set_tunnel`. This done by sending an HTTP
    CONNECT request to the proxy server when the connection is established.

    This method must be called before the HTTP connection has been
    established.

    The headers argument should be a mapping of extra HTTP headers to send
    with the CONNECT request.
  summary: Set up host and port for HTTP CONNECT tunnelling
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: scheme
    default: http
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.QueueCls
  kind: class
  ns: urllib3
  description: Variant of Queue that retrieves most recently added entries first.
  summary: Variant of Queue that retrieves most recently added entries first
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: maxsize
    default: '0'
    rest: false
  - type: LifoQueue
  inherits_from:
  - <class 'queue.Queue'>
- name: HTTPConnectionPool.QueueCls.empty
  kind: method
  ns: urllib3
  description: |-
    Return True if the queue is empty, False otherwise (not reliable!).

    This method is likely to be removed at some point.  Use qsize() == 0
    as a direct substitute, but be aware that either approach risks a race
    condition where a queue can grow before the result of empty() or
    qsize() can be used.

    To create code that needs to wait for all queued tasks to be
    completed, the preferred technique is to use the join() method.
  summary: Return True if the queue is empty, False otherwise (not reliable!)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.QueueCls.full
  kind: method
  ns: urllib3
  description: |-
    Return True if the queue is full, False otherwise (not reliable!).

    This method is likely to be removed at some point.  Use qsize() >= n
    as a direct substitute, but be aware that either approach risks a race
    condition where a queue can shrink before the result of full() or
    qsize() can be used.
  summary: Return True if the queue is full, False otherwise (not reliable!)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.QueueCls.get
  kind: method
  ns: urllib3
  description: |-
    Remove and return an item from the queue.

    If optional args 'block' is true and 'timeout' is None (the default),
    block if necessary until an item is available. If 'timeout' is
    a non-negative number, it blocks at most 'timeout' seconds and raises
    the Empty exception if no item was available within that time.
    Otherwise ('block' is false), return an item if one is immediately
    available, else raise the Empty exception ('timeout' is ignored
    in that case).
  summary: Remove and return an item from the queue
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: block
    default: 'True'
    rest: false
  - kind: positional
    name: timeout
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.QueueCls.get_nowait
  kind: method
  ns: urllib3
  description: |-
    Remove and return an item from the queue without blocking.

    Only get an item if one is immediately available. Otherwise
    raise the Empty exception.
  summary: Remove and return an item from the queue without blocking
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.QueueCls.join
  kind: method
  ns: urllib3
  description: |-
    Blocks until all items in the Queue have been gotten and processed.

    The count of unfinished tasks goes up whenever an item is added to the
    queue. The count goes down whenever a consumer thread calls task_done()
    to indicate the item was retrieved and all work on it is complete.

    When the count of unfinished tasks drops to zero, join() unblocks.
  summary: Blocks until all items in the Queue have been gotten and processed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.QueueCls.put
  kind: method
  ns: urllib3
  description: |-
    Put an item into the queue.

    If optional args 'block' is true and 'timeout' is None (the default),
    block if necessary until a free slot is available. If 'timeout' is
    a non-negative number, it blocks at most 'timeout' seconds and raises
    the Full exception if no free slot was available within that time.
    Otherwise ('block' is false), put an item on the queue if a free slot
    is immediately available, else raise the Full exception ('timeout'
    is ignored in that case).
  summary: Put an item into the queue
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: item
    default: null
    rest: false
  - kind: positional
    name: block
    default: 'True'
    rest: false
  - kind: positional
    name: timeout
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.QueueCls.put_nowait
  kind: method
  ns: urllib3
  description: |-
    Put an item into the queue without blocking.

    Only enqueue the item if a free slot is immediately available.
    Otherwise raise the Full exception.
  summary: Put an item into the queue without blocking
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: item
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.QueueCls.qsize
  kind: method
  ns: urllib3
  description: Return the approximate size of the queue (not reliable!).
  summary: Return the approximate size of the queue (not reliable!)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.QueueCls.task_done
  kind: method
  ns: urllib3
  description: |-
    Indicate that a formerly enqueued task is complete.

    Used by Queue consumer threads.  For each get() used to fetch a task,
    a subsequent call to task_done() tells the queue that the processing
    on the task is complete.

    If a join() is currently blocking, it will resume when all items
    have been processed (meaning that a task_done() call was received
    for every item that had been put() into the queue).

    Raises a ValueError if called more times than there were items
    placed in the queue.
  summary: Indicate that a formerly enqueued task is complete
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.close
  kind: method
  ns: urllib3
  description: Close all pooled connections and disable the pool.
  summary: Close all pooled connections and disable the pool
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.is_same_host
  kind: method
  ns: urllib3
  description: |-
    Check if the given ``url`` is a member of the same host as this
    connection pool.
  summary: Check if the given ``url`` is a member of the same host as this
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.request
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the appropriate encoding of
    ``fields`` based on the ``method`` used.

    This is a convenience method that requires the least amount of manual
    effort. It can be used in most situations, while still having the
    option to drop down to more specific methods when necessary, such as
    :meth:`request_encode_url`, :meth:`request_encode_body`,
    or even the lowest level :meth:`urlopen`.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param body:
        Data to send in the request body, either :class:`str`, :class:`bytes`,
        an iterable of :class:`str`/:class:`bytes`, or a file-like object.

    :param fields:
        Data to encode and send in the request body.  Values are processed
        by :func:`urllib.parse.urlencode`.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param json:
        Data to encode and send as JSON with UTF-encoded in the request body.
        The ``"Content-Type"`` header will be set to ``"application/json"``
        unless specified otherwise.
  summary: Make a request using :meth:`urlopen` with the appropriate encoding of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: json
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.request_encode_body
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the body. This is useful for request methods like POST, PUT, PATCH, etc.

    When ``encode_multipart=True`` (default), then
    :func:`urllib3.encode_multipart_formdata` is used to encode
    the payload with the appropriate content type. Otherwise
    :func:`urllib.parse.urlencode` is used with the
    'application/x-www-form-urlencoded' content type.

    Multipart encoding must be used when posting files, and it's reasonably
    safe to use it in other times too. However, it may break request
    signing, such as with OAuth.

    Supports an optional ``fields`` parameter of key/value strings AND
    key/filetuple. A filetuple is a (filename, data, MIME type) tuple where
    the MIME type is optional. For example::

        fields = {
            'foo': 'bar',
            'fakefile': ('foofile.txt', 'contents of foofile'),
            'realfile': ('barfile.txt', open('realfile').read()),
            'typedfile': ('bazfile.bin', open('bazfile').read(),
                          'image/jpeg'),
            'nonamefile': 'contents of nonamefile field',
        }

    When uploading a file, providing a filename (the first parameter of the
    tuple) is optional but recommended to best mimic behavior of browsers.

    Note that if ``headers`` are supplied, the 'Content-Type' header will
    be overwritten because it depends on the dynamic random boundary string
    which is used to compose the body of the request. The random boundary
    string can be explicitly set with the ``multipart_boundary`` parameter.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param encode_multipart:
        If True, encode the ``fields`` using the multipart/form-data MIME
        format.

    :param multipart_boundary:
        If not specified, then a random boundary will be generated using
        :func:`urllib3.filepost.choose_boundary`.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: encode_multipart
    default: 'True'
    rest: false
  - kind: positional
    name: multipart_boundary
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.request_encode_url
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the url. This is useful for request methods like GET, HEAD, DELETE, etc.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPConnectionPool.scheme
  kind: property
  ns: urllib3
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: HTTPConnectionPool.urlopen
  kind: method
  ns: urllib3
  description: |-
    Get a connection from the pool and perform an HTTP request. This is the
    lowest level call for making a request, so you'll need to specify all
    the raw details.

    .. note::

       More commonly, it's appropriate to use a convenience method
       such as :meth:`request`.

    .. note::

       `release_conn` will only behave as expected if
       `preload_content=False` because we want to make
       `preload_content=False` the default behaviour someday soon without
       breaking backwards compatibility.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param body:
        Data to send in the request body, either :class:`str`, :class:`bytes`,
        an iterable of :class:`str`/:class:`bytes`, or a file-like object.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param retries:
        Configure the number of retries to allow before raising a
        :class:`~urllib3.exceptions.MaxRetryError` exception.

        If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a
        :class:`~urllib3.util.retry.Retry` object for fine-grained control
        over different types of retries.
        Pass an integer number to retry connection errors that many times,
        but no other types of errors. Pass zero to never retry.

        If ``False``, then retries are disabled and any exception is raised
        immediately. Also, instead of raising a MaxRetryError on redirects,
        the redirect response will be returned.

    :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.

    :param redirect:
        If True, automatically handle redirects (status codes 301, 302,
        303, 307, 308). Each redirect counts as a retry. Disabling retries
        will disable redirect, too.

    :param assert_same_host:
        If ``True``, will make sure that the host of the pool requests is
        consistent else will raise HostChangedError. When ``False``, you can
        use the pool on an HTTP proxy and request foreign hosts.

    :param timeout:
        If specified, overrides the default timeout for this one
        request. It may be a float (in seconds) or an instance of
        :class:`urllib3.util.Timeout`.

    :param pool_timeout:
        If set and the pool is set to block=True, then this method will
        block for ``pool_timeout`` seconds and raise EmptyPoolError if no
        connection is available within the time period.

    :param bool preload_content:
        If True, the response's body will be preloaded into memory.

    :param bool decode_content:
        If True, will attempt to decode the body based on the
        'content-encoding' header.

    :param release_conn:
        If False, then the urlopen call will not release the connection
        back into the pool once a response is received (but will release if
        you read the entire contents of the response such as when
        `preload_content=True`). This is useful if you're not preloading
        the response's content immediately. You will need to call
        ``r.release_conn()`` on the response ``r`` to return the connection
        back into the pool. If None, it takes the value of ``preload_content``
        which defaults to ``True``.

    :param bool chunked:
        If True, urllib3 will send the body using chunked transfer
        encoding. Otherwise, urllib3 will send the body using the standard
        content-length form. Defaults to False.

    :param int body_pos:
        Position to seek to in file-like body in the event of a retry or
        redirect. Typically this won't need to be set because urllib3 will
        auto-populate the value when needed.
  summary: Get a connection from the pool and perform an HTTP request
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: retries
    default: None
    rest: false
  - kind: positional
    name: redirect
    default: 'True'
    rest: false
  - kind: positional
    name: assert_same_host
    default: 'True'
    rest: false
  - kind: positional
    name: timeout
    default: _TYPE_DEFAULT.token
    rest: false
  - kind: positional
    name: pool_timeout
    default: None
    rest: false
  - kind: positional
    name: release_conn
    default: None
    rest: false
  - kind: positional
    name: chunked
    default: 'False'
    rest: false
  - kind: positional
    name: body_pos
    default: None
    rest: false
  - kind: positional
    name: preload_content
    default: 'True'
    rest: false
  - kind: positional
    name: decode_content
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict
  kind: class
  ns: urllib3
  description: |-
    :param headers:
        An iterable of field-value pairs. Must not contain multiple field names
        when compared case-insensitively.

    :param kwargs:
        Additional field-value pairs to pass in to ``dict.update``.

    A ``dict`` like container for storing HTTP Headers.

    Field names are stored and compared case-insensitively in compliance with
    RFC 7230. Iteration provides the first case-sensitive key seen for each
    case-insensitive pair.

    Using ``__setitem__`` syntax overwrites fields that compare equal
    case-insensitively in order to maintain ``dict``'s api. For fields that
    compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``
    in a loop.

    If multiple fields that are equal case-insensitively are passed to the
    constructor or ``.update``, the behavior is undefined and some will be
    lost.

    >>> headers = HTTPHeaderDict()
    >>> headers.add('Set-Cookie', 'foo=bar')
    >>> headers.add('set-cookie', 'baz=quxx')
    >>> headers['content-length'] = '7'
    >>> headers['SET-cookie']
    'foo=bar, baz=quxx'
    >>> headers['Content-Length']
    '7'
  summary: ':param headers:'
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: HTTPHeaderDict
  inherits_from:
  - <class 'collections.abc.MutableMapping'>
  - <class 'collections.abc.Mapping'>
  - <class 'collections.abc.Collection'>
  - <class 'collections.abc.Sized'>
  - <class 'collections.abc.Iterable'>
  - <class 'collections.abc.Container'>
  - <class 'typing.Generic'>
- name: HTTPHeaderDict.add
  kind: method
  ns: urllib3
  description: |-
    Adds a (name, value) pair, doesn't overwrite the value if it already
    exists.

    If this is called with combine=True, instead of adding a new header value
    as a distinct item during iteration, this will instead append the value to
    any existing header value with a comma. If no existing header value exists
    for the key, then the value will simply be added, ignoring the combine parameter.

    >>> headers = HTTPHeaderDict(foo='bar')
    >>> headers.add('Foo', 'baz')
    >>> headers['foo']
    'bar, baz'
    >>> list(headers.items())
    [('foo', 'bar'), ('foo', 'baz')]
    >>> headers.add('foo', 'quz', combine=True)
    >>> list(headers.items())
    [('foo', 'bar, baz, quz')]
  summary: Adds a (name, value) pair, doesn't overwrite the value if it already
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: val
    default: null
    rest: false
  - name: combine
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.clear
  kind: method
  ns: urllib3
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.copy
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.discard
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.extend
  kind: method
  ns: urllib3
  description: |-
    Generic import function for any type of header-like object.
    Adapted version of MutableMapping.update in order to insert items
    with self.add instead of self.__setitem__
  summary: Generic import function for any type of header-like object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.get
  kind: method
  ns: urllib3
  description: D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.get_all
  kind: method
  ns: urllib3
  description: |-
    Returns a list of all the values for the named field. Returns an
    empty list if the key doesn't exist.
  summary: Returns a list of all the values for the named field
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: _Sentinel.not_passed
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.getallmatchingheaders
  kind: method
  ns: urllib3
  description: |-
    Returns a list of all the values for the named field. Returns an
    empty list if the key doesn't exist.
  summary: Returns a list of all the values for the named field
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: _Sentinel.not_passed
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.getheaders
  kind: method
  ns: urllib3
  description: |-
    Returns a list of all the values for the named field. Returns an
    empty list if the key doesn't exist.
  summary: Returns a list of all the values for the named field
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: _Sentinel.not_passed
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.getlist
  kind: method
  ns: urllib3
  description: |-
    Returns a list of all the values for the named field. Returns an
    empty list if the key doesn't exist.
  summary: Returns a list of all the values for the named field
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: _Sentinel.not_passed
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.iget
  kind: method
  ns: urllib3
  description: |-
    Returns a list of all the values for the named field. Returns an
    empty list if the key doesn't exist.
  summary: Returns a list of all the values for the named field
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: _Sentinel.not_passed
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.items
  kind: method
  ns: urllib3
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.iteritems
  kind: method
  ns: urllib3
  description: Iterate over all header lines, including duplicate ones.
  summary: Iterate over all header lines, including duplicate ones
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.itermerged
  kind: method
  ns: urllib3
  description: Iterate over all headers, merging duplicate ones together.
  summary: Iterate over all headers, merging duplicate ones together
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.keys
  kind: method
  ns: urllib3
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.pop
  kind: method
  ns: urllib3
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
    If key is not found, d is returned if given, otherwise KeyError is raised.
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: <object object at 0x7f675533c160>
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.popitem
  kind: method
  ns: urllib3
  description: |-
    D.popitem() -> (k, v), remove and return some (key, value) pair
    as a 2-tuple; but raise KeyError if D is empty.
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.setdefault
  kind: method
  ns: urllib3
  description: D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key
    default: null
    rest: false
  - kind: positional
    name: default
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.update
  kind: method
  ns: urllib3
  description: |-
    D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
    If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
    If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
    In either case, this is followed by: for k, v in F.items(): D[k] = v
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: other
    default: ()
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPHeaderDict.values
  kind: method
  ns: urllib3
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool
  kind: class
  ns: urllib3
  description: |-
    Same as :class:`.HTTPConnectionPool`, but HTTPS.

    :class:`.HTTPSConnection` uses one of ``assert_fingerprint``,
    ``assert_hostname`` and ``host`` in this order to verify connections.
    If ``assert_hostname`` is False, no verification is done.

    The ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs``,
    ``ca_cert_dir``, ``ssl_version``, ``key_password`` are only used if :mod:`ssl`
    is available and are fed into :meth:`urllib3.util.ssl_wrap_socket` to upgrade
    the connection socket into an SSL socket.
  summary: Same as :class:`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - kind: positional
    name: timeout
    default: _TYPE_DEFAULT.token
    rest: false
  - kind: positional
    name: maxsize
    default: '1'
    rest: false
  - kind: positional
    name: block
    default: 'False'
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: retries
    default: None
    rest: false
  - kind: positional
    name: _proxy
    default: None
    rest: false
  - kind: positional
    name: _proxy_headers
    default: None
    rest: false
  - kind: positional
    name: key_file
    default: None
    rest: false
  - kind: positional
    name: cert_file
    default: None
    rest: false
  - kind: positional
    name: cert_reqs
    default: None
    rest: false
  - kind: positional
    name: key_password
    default: None
    rest: false
  - kind: positional
    name: ca_certs
    default: None
    rest: false
  - kind: positional
    name: ssl_version
    default: None
    rest: false
  - kind: positional
    name: ssl_minimum_version
    default: None
    rest: false
  - kind: positional
    name: ssl_maximum_version
    default: None
    rest: false
  - kind: positional
    name: assert_hostname
    default: None
    rest: false
  - kind: positional
    name: assert_fingerprint
    default: None
    rest: false
  - kind: positional
    name: ca_cert_dir
    default: None
    rest: false
  - type: HTTPSConnectionPool
  inherits_from:
  - <class 'urllib3.connectionpool.HTTPConnectionPool'>
  - <class 'urllib3.connectionpool.ConnectionPool'>
  - <class 'urllib3._request_methods.RequestMethods'>
- name: HTTPSConnectionPool.ConnectionCls
  kind: class
  ns: urllib3
  description: |-
    Many of the parameters to this constructor are passed to the underlying SSL
    socket by means of :py:func:`urllib3.util.ssl_wrap_socket`.
  summary: Many of the parameters to this constructor are passed to the underlying SSL
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - name: timeout
    default: _TYPE_DEFAULT.token
    rest: false
    kind: kw-only
  - name: source_address
    default: None
    rest: false
    kind: kw-only
  - name: blocksize
    default: '16384'
    rest: false
    kind: kw-only
  - name: socket_options
    default: '[(6, 1, 1)]'
    rest: false
    kind: kw-only
  - name: proxy
    default: None
    rest: false
    kind: kw-only
  - name: proxy_config
    default: None
    rest: false
    kind: kw-only
  - name: cert_reqs
    default: None
    rest: false
    kind: kw-only
  - name: assert_hostname
    default: None
    rest: false
    kind: kw-only
  - name: assert_fingerprint
    default: None
    rest: false
    kind: kw-only
  - name: server_hostname
    default: None
    rest: false
    kind: kw-only
  - name: ssl_context
    default: None
    rest: false
    kind: kw-only
  - name: ca_certs
    default: None
    rest: false
    kind: kw-only
  - name: ca_cert_dir
    default: None
    rest: false
    kind: kw-only
  - name: ca_cert_data
    default: None
    rest: false
    kind: kw-only
  - name: ssl_minimum_version
    default: None
    rest: false
    kind: kw-only
  - name: ssl_maximum_version
    default: None
    rest: false
    kind: kw-only
  - name: ssl_version
    default: None
    rest: false
    kind: kw-only
  - name: cert_file
    default: None
    rest: false
    kind: kw-only
  - name: key_file
    default: None
    rest: false
    kind: kw-only
  - name: key_password
    default: None
    rest: false
    kind: kw-only
  - type: HTTPSConnection
  inherits_from:
  - <class 'urllib3.connection.HTTPConnection'>
  - <class 'http.client.HTTPConnection'>
- name: HTTPSConnectionPool.ConnectionCls.assert_fingerprint
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.auto_open
  kind: property
  ns: urllib3
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.ca_cert_data
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.ca_cert_dir
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.ca_certs
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.cert_reqs
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.close
  kind: method
  ns: urllib3
  description: Close the connection to the HTTP server.
  summary: Close the connection to the HTTP server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.connect
  kind: method
  ns: urllib3
  description: Connect to the host and port specified in __init__.
  summary: Connect to the host and port specified in __init__
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.debuglevel
  kind: property
  ns: urllib3
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.default_port
  kind: property
  ns: urllib3
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.default_socket_options
  kind: property
  ns: urllib3
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.endheaders
  kind: method
  ns: urllib3
  description: |-
    Indicate that the last header line has been sent to the server.

    This method sends the request to the server.  The optional message_body
    argument can be used to pass a message body associated with the
    request.
  summary: Indicate that the last header line has been sent to the server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message_body
    default: None
    rest: false
  - name: encode_chunked
    default: 'False'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.getresponse
  kind: method
  ns: urllib3
  description: |-
    Get the response from the server.

    If the HTTPConnection is in the correct state, returns an instance of HTTPResponse or of whatever object is returned by the response_class variable.

    If a request has not been sent or if a previous response has not be handled, ResponseNotReady is raised. If the HTTP response indicates that the connection should be closed, then it will be closed before the response is returned. When the connection is closed, the underlying socket is closed.
  summary: Get the response from the server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.has_connected_to_proxy
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.host
  kind: property
  ns: urllib3
  description: |-
    Getter method to remove any trailing dots that indicate the hostname is an FQDN.

    In general, SSL certificates don't include the trailing dot indicating a
    fully-qualified domain name, and thus, they don't validate properly when
    checked against a domain name that includes the dot. In addition, some
    servers may not expect to receive the trailing dot when provided.

    However, the hostname with trailing dot is critical to DNS resolution; doing a
    lookup with the trailing dot will properly only resolve the appropriate FQDN,
    whereas a lookup without a trailing dot will search the system's search domain
    list. Thus, it's important to keep the original host around for use only in
    those cases where it's appropriate (i.e., when doing DNS lookup to establish the
    actual TCP connection across which we're going to send HTTP requests).
  summary: Getter method to remove any trailing dots that indicate the hostname is an FQDN
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.is_closed
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.is_connected
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.is_verified
  kind: property
  ns: urllib3
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.proxy_is_forwarding
  kind: property
  ns: urllib3
  description: Return True if a forwarding proxy is configured, else return False
  summary: Return True if a forwarding proxy is configured, else return False
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.proxy_is_verified
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.putheader
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: header
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.putrequest
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: skip_host
    default: 'False'
    rest: false
  - kind: positional
    name: skip_accept_encoding
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.request
  kind: method
  ns: urllib3
  description: Send a complete request to the server.
  summary: Send a complete request to the server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - name: chunked
    default: 'False'
    rest: false
    kind: kw-only
  - name: preload_content
    default: 'True'
    rest: false
    kind: kw-only
  - name: decode_content
    default: 'True'
    rest: false
    kind: kw-only
  - name: enforce_content_length
    default: 'True'
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.request_chunked
  kind: method
  ns: urllib3
  description: |-
    Alternative to the common request method, which sends the
    body with chunked encoding and not as one block
  summary: Alternative to the common request method, which sends the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.send
  kind: method
  ns: urllib3
  description: |-
    Send `data' to the server.
    ``data`` can be a string object, a bytes object, an array object, a
    file-like object that supports a .read() method, or an iterable object.
  summary: Send `data' to the server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.set_cert
  kind: method
  ns: urllib3
  description: This method should only be called once, before the connection is used.
  summary: This method should only be called once, before the connection is used
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: key_file
    default: None
    rest: false
  - kind: positional
    name: cert_file
    default: None
    rest: false
  - kind: positional
    name: cert_reqs
    default: None
    rest: false
  - kind: positional
    name: key_password
    default: None
    rest: false
  - kind: positional
    name: ca_certs
    default: None
    rest: false
  - kind: positional
    name: assert_hostname
    default: None
    rest: false
  - kind: positional
    name: assert_fingerprint
    default: None
    rest: false
  - kind: positional
    name: ca_cert_dir
    default: None
    rest: false
  - kind: positional
    name: ca_cert_data
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.set_debuglevel
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: level
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.set_tunnel
  kind: method
  ns: urllib3
  description: |-
    Set up host and port for HTTP CONNECT tunnelling.

    In a connection that uses HTTP CONNECT tunneling, the host passed to the
    constructor is used as a proxy server that relays all communication to
    the endpoint passed to `set_tunnel`. This done by sending an HTTP
    CONNECT request to the proxy server when the connection is established.

    This method must be called before the HTTP connection has been
    established.

    The headers argument should be a mapping of extra HTTP headers to send
    with the CONNECT request.
  summary: Set up host and port for HTTP CONNECT tunnelling
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: scheme
    default: http
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.ssl_maximum_version
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.ssl_minimum_version
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.ConnectionCls.ssl_version
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.close
  kind: method
  ns: urllib3
  description: Close all pooled connections and disable the pool.
  summary: Close all pooled connections and disable the pool
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.is_same_host
  kind: method
  ns: urllib3
  description: |-
    Check if the given ``url`` is a member of the same host as this
    connection pool.
  summary: Check if the given ``url`` is a member of the same host as this
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.request
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the appropriate encoding of
    ``fields`` based on the ``method`` used.

    This is a convenience method that requires the least amount of manual
    effort. It can be used in most situations, while still having the
    option to drop down to more specific methods when necessary, such as
    :meth:`request_encode_url`, :meth:`request_encode_body`,
    or even the lowest level :meth:`urlopen`.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param body:
        Data to send in the request body, either :class:`str`, :class:`bytes`,
        an iterable of :class:`str`/:class:`bytes`, or a file-like object.

    :param fields:
        Data to encode and send in the request body.  Values are processed
        by :func:`urllib.parse.urlencode`.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param json:
        Data to encode and send as JSON with UTF-encoded in the request body.
        The ``"Content-Type"`` header will be set to ``"application/json"``
        unless specified otherwise.
  summary: Make a request using :meth:`urlopen` with the appropriate encoding of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: json
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.request_encode_body
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the body. This is useful for request methods like POST, PUT, PATCH, etc.

    When ``encode_multipart=True`` (default), then
    :func:`urllib3.encode_multipart_formdata` is used to encode
    the payload with the appropriate content type. Otherwise
    :func:`urllib.parse.urlencode` is used with the
    'application/x-www-form-urlencoded' content type.

    Multipart encoding must be used when posting files, and it's reasonably
    safe to use it in other times too. However, it may break request
    signing, such as with OAuth.

    Supports an optional ``fields`` parameter of key/value strings AND
    key/filetuple. A filetuple is a (filename, data, MIME type) tuple where
    the MIME type is optional. For example::

        fields = {
            'foo': 'bar',
            'fakefile': ('foofile.txt', 'contents of foofile'),
            'realfile': ('barfile.txt', open('realfile').read()),
            'typedfile': ('bazfile.bin', open('bazfile').read(),
                          'image/jpeg'),
            'nonamefile': 'contents of nonamefile field',
        }

    When uploading a file, providing a filename (the first parameter of the
    tuple) is optional but recommended to best mimic behavior of browsers.

    Note that if ``headers`` are supplied, the 'Content-Type' header will
    be overwritten because it depends on the dynamic random boundary string
    which is used to compose the body of the request. The random boundary
    string can be explicitly set with the ``multipart_boundary`` parameter.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param encode_multipart:
        If True, encode the ``fields`` using the multipart/form-data MIME
        format.

    :param multipart_boundary:
        If not specified, then a random boundary will be generated using
        :func:`urllib3.filepost.choose_boundary`.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: encode_multipart
    default: 'True'
    rest: false
  - kind: positional
    name: multipart_boundary
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.request_encode_url
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the url. This is useful for request methods like GET, HEAD, DELETE, etc.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPSConnectionPool.scheme
  kind: property
  ns: urllib3
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: HTTPSConnectionPool.urlopen
  kind: method
  ns: urllib3
  description: |-
    Get a connection from the pool and perform an HTTP request. This is the
    lowest level call for making a request, so you'll need to specify all
    the raw details.

    .. note::

       More commonly, it's appropriate to use a convenience method
       such as :meth:`request`.

    .. note::

       `release_conn` will only behave as expected if
       `preload_content=False` because we want to make
       `preload_content=False` the default behaviour someday soon without
       breaking backwards compatibility.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param body:
        Data to send in the request body, either :class:`str`, :class:`bytes`,
        an iterable of :class:`str`/:class:`bytes`, or a file-like object.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param retries:
        Configure the number of retries to allow before raising a
        :class:`~urllib3.exceptions.MaxRetryError` exception.

        If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a
        :class:`~urllib3.util.retry.Retry` object for fine-grained control
        over different types of retries.
        Pass an integer number to retry connection errors that many times,
        but no other types of errors. Pass zero to never retry.

        If ``False``, then retries are disabled and any exception is raised
        immediately. Also, instead of raising a MaxRetryError on redirects,
        the redirect response will be returned.

    :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.

    :param redirect:
        If True, automatically handle redirects (status codes 301, 302,
        303, 307, 308). Each redirect counts as a retry. Disabling retries
        will disable redirect, too.

    :param assert_same_host:
        If ``True``, will make sure that the host of the pool requests is
        consistent else will raise HostChangedError. When ``False``, you can
        use the pool on an HTTP proxy and request foreign hosts.

    :param timeout:
        If specified, overrides the default timeout for this one
        request. It may be a float (in seconds) or an instance of
        :class:`urllib3.util.Timeout`.

    :param pool_timeout:
        If set and the pool is set to block=True, then this method will
        block for ``pool_timeout`` seconds and raise EmptyPoolError if no
        connection is available within the time period.

    :param bool preload_content:
        If True, the response's body will be preloaded into memory.

    :param bool decode_content:
        If True, will attempt to decode the body based on the
        'content-encoding' header.

    :param release_conn:
        If False, then the urlopen call will not release the connection
        back into the pool once a response is received (but will release if
        you read the entire contents of the response such as when
        `preload_content=True`). This is useful if you're not preloading
        the response's content immediately. You will need to call
        ``r.release_conn()`` on the response ``r`` to return the connection
        back into the pool. If None, it takes the value of ``preload_content``
        which defaults to ``True``.

    :param bool chunked:
        If True, urllib3 will send the body using chunked transfer
        encoding. Otherwise, urllib3 will send the body using the standard
        content-length form. Defaults to False.

    :param int body_pos:
        Position to seek to in file-like body in the event of a retry or
        redirect. Typically this won't need to be set because urllib3 will
        auto-populate the value when needed.
  summary: Get a connection from the pool and perform an HTTP request
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: retries
    default: None
    rest: false
  - kind: positional
    name: redirect
    default: 'True'
    rest: false
  - kind: positional
    name: assert_same_host
    default: 'True'
    rest: false
  - kind: positional
    name: timeout
    default: _TYPE_DEFAULT.token
    rest: false
  - kind: positional
    name: pool_timeout
    default: None
    rest: false
  - kind: positional
    name: release_conn
    default: None
    rest: false
  - kind: positional
    name: chunked
    default: 'False'
    rest: false
  - kind: positional
    name: body_pos
    default: None
    rest: false
  - kind: positional
    name: preload_content
    default: 'True'
    rest: false
  - kind: positional
    name: decode_content
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: PoolManager
  kind: class
  ns: urllib3
  description: |-
    Allows for arbitrary requests while transparently keeping track of
    necessary connection pools for you.

    :param num_pools:
        Number of connection pools to cache before discarding the least
        recently used pool.

    :param headers:
        Headers to include with all requests, unless other headers are given
        explicitly.

    :param \**connection_pool_kw:
        Additional parameters are used to create fresh
        :class:`urllib3.connectionpool.ConnectionPool` instances.

    Example:

    .. code-block:: python

        import urllib3

        http = urllib3.PoolManager(num_pools=2)

        resp1 = http.request("GET", "https://google.com/")
        resp2 = http.request("GET", "https://google.com/mail")
        resp3 = http.request("GET", "https://yahoo.com/")

        print(len(http.pools))
        # 2
  summary: Allows for arbitrary requests while transparently keeping track of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: num_pools
    default: '10'
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: PoolManager
  inherits_from:
  - <class 'urllib3._request_methods.RequestMethods'>
- name: PoolManager.clear
  kind: method
  ns: urllib3
  description: |-
    Empty our store of pools and direct them all to close.

    This will not affect in-flight connections, but they will not be
    re-used after completion.
  summary: Empty our store of pools and direct them all to close
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PoolManager.connection_from_context
  kind: method
  ns: urllib3
  description: |-
    Get a :class:`urllib3.connectionpool.ConnectionPool` based on the request context.

    ``request_context`` must at least contain the ``scheme`` key and its
    value must be a key in ``key_fn_by_scheme`` instance variable.
  summary: Get a :class:`urllib3
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: request_context
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PoolManager.connection_from_host
  kind: method
  ns: urllib3
  description: |-
    Get a :class:`urllib3.connectionpool.ConnectionPool` based on the host, port, and scheme.

    If ``port`` isn't given, it will be derived from the ``scheme`` using
    ``urllib3.connectionpool.port_by_scheme``. If ``pool_kwargs`` is
    provided, it is merged with the instance's ``connection_pool_kw``
    variable and used to create the new connection pool, if one is
    needed.
  summary: Get a :class:`urllib3
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - kind: positional
    name: scheme
    default: http
    rest: false
  - kind: positional
    name: pool_kwargs
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PoolManager.connection_from_pool_key
  kind: method
  ns: urllib3
  description: |-
    Get a :class:`urllib3.connectionpool.ConnectionPool` based on the provided pool key.

    ``pool_key`` should be a namedtuple that only contains immutable
    objects. At a minimum it must have the ``scheme``, ``host``, and
    ``port`` fields.
  summary: Get a :class:`urllib3
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool_key
    default: null
    rest: false
  - kind: positional
    name: request_context
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: PoolManager.connection_from_url
  kind: method
  ns: urllib3
  description: |-
    Similar to :func:`urllib3.connectionpool.connection_from_url`.

    If ``pool_kwargs`` is not provided and a new pool needs to be
    constructed, ``self.connection_pool_kw`` is used to initialize
    the :class:`urllib3.connectionpool.ConnectionPool`. If ``pool_kwargs``
    is provided, it is used instead. Note that if a new pool does not
    need to be created for the request, the provided ``pool_kwargs`` are
    not used.
  summary: Similar to :func:`urllib3
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: pool_kwargs
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PoolManager.proxy
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PoolManager.proxy_config
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PoolManager.request
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the appropriate encoding of
    ``fields`` based on the ``method`` used.

    This is a convenience method that requires the least amount of manual
    effort. It can be used in most situations, while still having the
    option to drop down to more specific methods when necessary, such as
    :meth:`request_encode_url`, :meth:`request_encode_body`,
    or even the lowest level :meth:`urlopen`.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param body:
        Data to send in the request body, either :class:`str`, :class:`bytes`,
        an iterable of :class:`str`/:class:`bytes`, or a file-like object.

    :param fields:
        Data to encode and send in the request body.  Values are processed
        by :func:`urllib.parse.urlencode`.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param json:
        Data to encode and send as JSON with UTF-encoded in the request body.
        The ``"Content-Type"`` header will be set to ``"application/json"``
        unless specified otherwise.
  summary: Make a request using :meth:`urlopen` with the appropriate encoding of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: json
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PoolManager.request_encode_body
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the body. This is useful for request methods like POST, PUT, PATCH, etc.

    When ``encode_multipart=True`` (default), then
    :func:`urllib3.encode_multipart_formdata` is used to encode
    the payload with the appropriate content type. Otherwise
    :func:`urllib.parse.urlencode` is used with the
    'application/x-www-form-urlencoded' content type.

    Multipart encoding must be used when posting files, and it's reasonably
    safe to use it in other times too. However, it may break request
    signing, such as with OAuth.

    Supports an optional ``fields`` parameter of key/value strings AND
    key/filetuple. A filetuple is a (filename, data, MIME type) tuple where
    the MIME type is optional. For example::

        fields = {
            'foo': 'bar',
            'fakefile': ('foofile.txt', 'contents of foofile'),
            'realfile': ('barfile.txt', open('realfile').read()),
            'typedfile': ('bazfile.bin', open('bazfile').read(),
                          'image/jpeg'),
            'nonamefile': 'contents of nonamefile field',
        }

    When uploading a file, providing a filename (the first parameter of the
    tuple) is optional but recommended to best mimic behavior of browsers.

    Note that if ``headers`` are supplied, the 'Content-Type' header will
    be overwritten because it depends on the dynamic random boundary string
    which is used to compose the body of the request. The random boundary
    string can be explicitly set with the ``multipart_boundary`` parameter.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param encode_multipart:
        If True, encode the ``fields`` using the multipart/form-data MIME
        format.

    :param multipart_boundary:
        If not specified, then a random boundary will be generated using
        :func:`urllib3.filepost.choose_boundary`.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: encode_multipart
    default: 'True'
    rest: false
  - kind: positional
    name: multipart_boundary
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PoolManager.request_encode_url
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the url. This is useful for request methods like GET, HEAD, DELETE, etc.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: PoolManager.urlopen
  kind: method
  ns: urllib3
  description: |-
    Same as :meth:`urllib3.HTTPConnectionPool.urlopen`
    with custom cross-host redirect logic and only sends the request-uri
    portion of the ``url``.

    The given ``url`` parameter must be absolute, such that an appropriate
    :class:`urllib3.connectionpool.ConnectionPool` can be chosen for it.
  summary: Same as :meth:`urllib3
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: redirect
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyManager
  kind: class
  ns: urllib3
  description: |-
    Behaves just like :class:`PoolManager`, but sends all requests through
    the defined proxy, using the CONNECT method for HTTPS URLs.

    :param proxy_url:
        The URL of the proxy to be used.

    :param proxy_headers:
        A dictionary containing headers that will be sent to the proxy. In case
        of HTTP they are being sent with each request, while in the
        HTTPS/CONNECT case they are sent only once. Could be used for proxy
        authentication.

    :param proxy_ssl_context:
        The proxy SSL context is used to establish the TLS connection to the
        proxy when using HTTPS proxies.

    :param use_forwarding_for_https:
        (Defaults to False) If set to True will forward requests to the HTTPS
        proxy to be made on behalf of the client instead of creating a TLS
        tunnel via the CONNECT method. **Enabling this flag means that request
        and response headers and content will be visible from the HTTPS proxy**
        whereas tunneling keeps request and response headers and content
        private.  IP address, target hostname, SNI, and port are always visible
        to an HTTPS proxy even when this flag is disabled.

    :param proxy_assert_hostname:
        The hostname of the certificate to verify against.

    :param proxy_assert_fingerprint:
        The fingerprint of the certificate to verify against.

    Example:

    .. code-block:: python

        import urllib3

        proxy = urllib3.ProxyManager("https://localhost:3128/")

        resp1 = proxy.request("GET", "https://google.com/")
        resp2 = proxy.request("GET", "https://httpbin.org/")

        print(len(proxy.pools))
        # 1

        resp3 = proxy.request("GET", "https://httpbin.org/")
        resp4 = proxy.request("GET", "https://twitter.com/")

        print(len(proxy.pools))
        # 3
  summary: Behaves just like :class:`PoolManager`, but sends all requests through
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: proxy_url
    default: null
    rest: false
  - kind: positional
    name: num_pools
    default: '10'
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: proxy_headers
    default: None
    rest: false
  - kind: positional
    name: proxy_ssl_context
    default: None
    rest: false
  - kind: positional
    name: use_forwarding_for_https
    default: 'False'
    rest: false
  - kind: positional
    name: proxy_assert_hostname
    default: None
    rest: false
  - kind: positional
    name: proxy_assert_fingerprint
    default: None
    rest: false
  - type: ProxyManager
  inherits_from:
  - <class 'urllib3.poolmanager.PoolManager'>
  - <class 'urllib3._request_methods.RequestMethods'>
- name: ProxyManager.clear
  kind: method
  ns: urllib3
  description: |-
    Empty our store of pools and direct them all to close.

    This will not affect in-flight connections, but they will not be
    re-used after completion.
  summary: Empty our store of pools and direct them all to close
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyManager.connection_from_context
  kind: method
  ns: urllib3
  description: |-
    Get a :class:`urllib3.connectionpool.ConnectionPool` based on the request context.

    ``request_context`` must at least contain the ``scheme`` key and its
    value must be a key in ``key_fn_by_scheme`` instance variable.
  summary: Get a :class:`urllib3
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: request_context
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyManager.connection_from_host
  kind: method
  ns: urllib3
  description: |-
    Get a :class:`urllib3.connectionpool.ConnectionPool` based on the host, port, and scheme.

    If ``port`` isn't given, it will be derived from the ``scheme`` using
    ``urllib3.connectionpool.port_by_scheme``. If ``pool_kwargs`` is
    provided, it is merged with the instance's ``connection_pool_kw``
    variable and used to create the new connection pool, if one is
    needed.
  summary: Get a :class:`urllib3
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - kind: positional
    name: scheme
    default: http
    rest: false
  - kind: positional
    name: pool_kwargs
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyManager.connection_from_pool_key
  kind: method
  ns: urllib3
  description: |-
    Get a :class:`urllib3.connectionpool.ConnectionPool` based on the provided pool key.

    ``pool_key`` should be a namedtuple that only contains immutable
    objects. At a minimum it must have the ``scheme``, ``host``, and
    ``port`` fields.
  summary: Get a :class:`urllib3
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool_key
    default: null
    rest: false
  - kind: positional
    name: request_context
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyManager.connection_from_url
  kind: method
  ns: urllib3
  description: |-
    Similar to :func:`urllib3.connectionpool.connection_from_url`.

    If ``pool_kwargs`` is not provided and a new pool needs to be
    constructed, ``self.connection_pool_kw`` is used to initialize
    the :class:`urllib3.connectionpool.ConnectionPool`. If ``pool_kwargs``
    is provided, it is used instead. Note that if a new pool does not
    need to be created for the request, the provided ``pool_kwargs`` are
    not used.
  summary: Similar to :func:`urllib3
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: pool_kwargs
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyManager.proxy
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProxyManager.proxy_config
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProxyManager.request
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the appropriate encoding of
    ``fields`` based on the ``method`` used.

    This is a convenience method that requires the least amount of manual
    effort. It can be used in most situations, while still having the
    option to drop down to more specific methods when necessary, such as
    :meth:`request_encode_url`, :meth:`request_encode_body`,
    or even the lowest level :meth:`urlopen`.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param body:
        Data to send in the request body, either :class:`str`, :class:`bytes`,
        an iterable of :class:`str`/:class:`bytes`, or a file-like object.

    :param fields:
        Data to encode and send in the request body.  Values are processed
        by :func:`urllib.parse.urlencode`.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param json:
        Data to encode and send as JSON with UTF-encoded in the request body.
        The ``"Content-Type"`` header will be set to ``"application/json"``
        unless specified otherwise.
  summary: Make a request using :meth:`urlopen` with the appropriate encoding of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: json
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyManager.request_encode_body
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the body. This is useful for request methods like POST, PUT, PATCH, etc.

    When ``encode_multipart=True`` (default), then
    :func:`urllib3.encode_multipart_formdata` is used to encode
    the payload with the appropriate content type. Otherwise
    :func:`urllib.parse.urlencode` is used with the
    'application/x-www-form-urlencoded' content type.

    Multipart encoding must be used when posting files, and it's reasonably
    safe to use it in other times too. However, it may break request
    signing, such as with OAuth.

    Supports an optional ``fields`` parameter of key/value strings AND
    key/filetuple. A filetuple is a (filename, data, MIME type) tuple where
    the MIME type is optional. For example::

        fields = {
            'foo': 'bar',
            'fakefile': ('foofile.txt', 'contents of foofile'),
            'realfile': ('barfile.txt', open('realfile').read()),
            'typedfile': ('bazfile.bin', open('bazfile').read(),
                          'image/jpeg'),
            'nonamefile': 'contents of nonamefile field',
        }

    When uploading a file, providing a filename (the first parameter of the
    tuple) is optional but recommended to best mimic behavior of browsers.

    Note that if ``headers`` are supplied, the 'Content-Type' header will
    be overwritten because it depends on the dynamic random boundary string
    which is used to compose the body of the request. The random boundary
    string can be explicitly set with the ``multipart_boundary`` parameter.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param encode_multipart:
        If True, encode the ``fields`` using the multipart/form-data MIME
        format.

    :param multipart_boundary:
        If not specified, then a random boundary will be generated using
        :func:`urllib3.filepost.choose_boundary`.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: encode_multipart
    default: 'True'
    rest: false
  - kind: positional
    name: multipart_boundary
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyManager.request_encode_url
  kind: method
  ns: urllib3
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the url. This is useful for request methods like GET, HEAD, DELETE, etc.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyManager.urlopen
  kind: method
  ns: urllib3
  description: Same as HTTP(S)ConnectionPool.urlopen, ``url`` must be absolute.
  summary: Same as HTTP(S)ConnectionPool
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: redirect
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse
  kind: class
  ns: urllib3
  description: |-
    HTTP Response container.

    Backwards-compatible with :class:`http.client.HTTPResponse` but the response ``body`` is
    loaded and decoded on-demand when the ``data`` property is accessed.  This
    class is also compatible with the Python standard library's :mod:`io`
    module, and can hence be treated as a readable object in the context of that
    framework.

    Extra parameters for behaviour not present in :class:`http.client.HTTPResponse`:

    :param preload_content:
        If True, the response's body will be preloaded during construction.

    :param decode_content:
        If True, will attempt to decode the body based on the
        'content-encoding' header.

    :param original_response:
        When this HTTPResponse wrapper is generated from an :class:`http.client.HTTPResponse`
        object, it's convenient to include the original for debug purposes. It's
        otherwise unused.

    :param retries:
        The retries contains the last :class:`~urllib3.util.retry.Retry` that
        was used during the request.

    :param enforce_content_length:
        Enforce content length checking. Body returned by server must match
        value of Content-Length header, if present. Otherwise, raise error.
  summary: HTTP Response container
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: body
    default: null
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: status
    default: '0'
    rest: false
  - kind: positional
    name: version
    default: '0'
    rest: false
  - kind: positional
    name: reason
    default: None
    rest: false
  - kind: positional
    name: preload_content
    default: 'True'
    rest: false
  - kind: positional
    name: decode_content
    default: 'True'
    rest: false
  - kind: positional
    name: original_response
    default: None
    rest: false
  - kind: positional
    name: pool
    default: None
    rest: false
  - kind: positional
    name: connection
    default: None
    rest: false
  - kind: positional
    name: msg
    default: None
    rest: false
  - kind: positional
    name: retries
    default: None
    rest: false
  - kind: positional
    name: enforce_content_length
    default: 'True'
    rest: false
  - kind: positional
    name: request_method
    default: None
    rest: false
  - kind: positional
    name: request_url
    default: None
    rest: false
  - kind: positional
    name: auto_close
    default: 'True'
    rest: false
  - type: HTTPResponse
  inherits_from:
  - <class 'urllib3.response.BaseHTTPResponse'>
  - <class 'io.IOBase'>
  - <class '_io._IOBase'>
- name: HTTPResponse.CONTENT_DECODERS
  kind: property
  ns: urllib3
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: HTTPResponse.DECODER_ERROR_CLASSES
  kind: property
  ns: urllib3
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: HTTPResponse.REDIRECT_STATUSES
  kind: property
  ns: urllib3
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: HTTPResponse.close
  kind: method
  ns: urllib3
  description: |-
    Flush and close the IO object.

    This method has no effect if the file is already closed.
  summary: Flush and close the IO object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.closed
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPResponse.connection
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPResponse.data
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPResponse.drain_conn
  kind: method
  ns: urllib3
  description: |-
    Read and discard any remaining HTTP response data in the response connection.

    Unread data in the HTTPResponse connection blocks the connection from being released back to the pool.
  summary: Read and discard any remaining HTTP response data in the response connection
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.fileno
  kind: method
  ns: urllib3
  description: |-
    Returns underlying file descriptor if one exists.

    OSError is raised if the IO object does not use a file descriptor.
  summary: Returns underlying file descriptor if one exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.flush
  kind: method
  ns: urllib3
  description: |-
    Flush write buffers, if applicable.

    This is not implemented for read-only and non-blocking streams.
  summary: Flush write buffers, if applicable
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.get_redirect_location
  kind: method
  ns: urllib3
  description: |-
    Should we redirect and where to?

    :returns: Truthy redirect location string if we got a redirect status
        code and valid location. ``None`` if redirect status and no
        location. ``False`` if not a redirect status code.
  summary: Should we redirect and where to?
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.getheader
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.getheaders
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.geturl
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.info
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.isatty
  kind: callable
  ns: urllib3
  description: |-
    Return whether this is an 'interactive' stream.

    Return False if it can't be determined.
  summary: Return whether this is an 'interactive' stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.isclosed
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.json
  kind: method
  ns: urllib3
  description: |-
    Parses the body of the HTTP response as JSON.

    To use a custom JSON decoder pass the result of :attr:`HTTPResponse.data` to the decoder.

    This method can raise either `UnicodeDecodeError` or `json.JSONDecodeError`.

    Read more :ref:`here <json>`.
  summary: Parses the body of the HTTP response as JSON
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.read
  kind: method
  ns: urllib3
  description: |-
    Similar to :meth:`http.client.HTTPResponse.read`, but with two additional
    parameters: ``decode_content`` and ``cache_content``.

    :param amt:
        How much of the content to read. If specified, caching is skipped
        because it doesn't make sense to cache partial content as the full
        response.

    :param decode_content:
        If True, will attempt to decode the body based on the
        'content-encoding' header.

    :param cache_content:
        If True, will save the returned data such that the same result is
        returned despite of the state of the underlying file object. This
        is useful if you want the ``.data`` property to continue working
        after having ``.read()`` the file object. (Overridden if ``amt`` is
        set.)
  summary: Similar to :meth:`http
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: amt
    default: None
    rest: false
  - kind: positional
    name: decode_content
    default: None
    rest: false
  - kind: positional
    name: cache_content
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.read1
  kind: method
  ns: urllib3
  description: |-
    Similar to ``http.client.HTTPResponse.read1`` and documented
    in :meth:`io.BufferedReader.read1`, but with an additional parameter:
    ``decode_content``.

    :param amt:
        How much of the content to read.

    :param decode_content:
        If True, will attempt to decode the body based on the
        'content-encoding' header.
  summary: Similar to ``http
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: amt
    default: None
    rest: false
  - kind: positional
    name: decode_content
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.read_chunked
  kind: method
  ns: urllib3
  description: |-
    Similar to :meth:`HTTPResponse.read`, but with an additional
    parameter: ``decode_content``.

    :param amt:
        How much of the content to read. If specified, caching is skipped
        because it doesn't make sense to cache partial content as the full
        response.

    :param decode_content:
        If True, will attempt to decode the body based on the
        'content-encoding' header.
  summary: Similar to :meth:`HTTPResponse
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: amt
    default: None
    rest: false
  - kind: positional
    name: decode_content
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.readable
  kind: method
  ns: urllib3
  description: |-
    Return whether object was opened for reading.

    If False, read() will raise OSError.
  summary: Return whether object was opened for reading
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.readinto
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: b
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.readline
  kind: callable
  ns: urllib3
  description: |-
    Read and return a line from the stream.

    If size is specified, at most size bytes will be read.

    The line terminator is always b'\n' for binary files; for text
    files, the newlines argument to open can be used to select the line
    terminator(s) recognized.
  summary: Read and return a line from the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.readlines
  kind: callable
  ns: urllib3
  description: |-
    Return a list of lines from the stream.

    hint can be specified to control the number of lines read: no more
    lines will be read if the total size (in bytes/characters) of all
    lines so far exceeds hint.
  summary: Return a list of lines from the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: hint
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.release_conn
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.retries
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPResponse.seek
  kind: callable
  ns: urllib3
  description: |-
    Change the stream position to the given byte offset.

      offset
        The stream position, relative to 'whence'.
      whence
        The relative position to seek from.

    The offset is interpreted relative to the position indicated by whence.
    Values for whence are:

    * os.SEEK_SET or 0 -- start of stream (the default); offset should be zero or positive
    * os.SEEK_CUR or 1 -- current stream position; offset may be negative
    * os.SEEK_END or 2 -- end of stream; offset is usually negative

    Return the new absolute position.
  summary: Change the stream position to the given byte offset
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: offset
    default: null
    rest: false
  - kind: positional
    name: whence
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.seekable
  kind: callable
  ns: urllib3
  description: |-
    Return whether object supports random access.

    If False, seek(), tell() and truncate() will raise OSError.
    This method may need to do a test seek().
  summary: Return whether object supports random access
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.stream
  kind: method
  ns: urllib3
  description: |-
    A generator wrapper for the read() method. A call will block until
    ``amt`` bytes have been read from the connection or until the
    connection is closed.

    :param amt:
        How much of the content to read. The generator will return up to
        much data per iteration, but may return less. This is particularly
        likely when using compressed data. However, the empty string will
        never be returned.

    :param decode_content:
        If True, will attempt to decode the body based on the
        'content-encoding' header.
  summary: A generator wrapper for the read() method
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: amt
    default: '65536'
    rest: false
  - kind: positional
    name: decode_content
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.supports_chunked_reads
  kind: method
  ns: urllib3
  description: |-
    Checks if the underlying file-like object looks like a
    :class:`http.client.HTTPResponse` object. We do this by testing for
    the fp attribute. If it is present we assume it returns raw chunks as
    processed by read_chunked().
  summary: Checks if the underlying file-like object looks like a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.tell
  kind: method
  ns: urllib3
  description: |-
    Obtain the number of bytes pulled over the wire so far. May differ from
    the amount of content returned by :meth:``urllib3.response.HTTPResponse.read``
    if bytes are encoded on the wire (e.g, compressed).
  summary: Obtain the number of bytes pulled over the wire so far
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.truncate
  kind: callable
  ns: urllib3
  description: |-
    Truncate file to size bytes.

    File pointer is left unchanged.  Size defaults to the current IO
    position as reported by tell().  Returns the new size.
  summary: Truncate file to size bytes
  signatures: null
  inherits_from: null
- name: HTTPResponse.url
  kind: property
  ns: urllib3
  description: |-
    Returns the URL that was the source of this response.
    If the request that generated this response redirected, this method
    will return the final redirect location.
  summary: Returns the URL that was the source of this response
  signatures: null
  inherits_from: null
- name: HTTPResponse.writable
  kind: callable
  ns: urllib3
  description: |-
    Return whether object was opened for writing.

    If False, write() will raise OSError.
  summary: Return whether object was opened for writing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: HTTPResponse.writelines
  kind: callable
  ns: urllib3
  description: |-
    Write a list of lines to stream.

    Line separators are not added, so it is usual for each of the
    lines provided to have a line separator at the end.
  summary: Write a list of lines to stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lines
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry
  kind: class
  ns: urllib3
  description: |-
    Retry configuration.

    Each retry attempt will create a new Retry object with updated values, so
    they can be safely reused.

    Retries can be defined as a default for a pool:

    .. code-block:: python

        retries = Retry(connect=5, read=2, redirect=5)
        http = PoolManager(retries=retries)
        response = http.request("GET", "https://example.com/")

    Or per-request (which overrides the default for the pool):

    .. code-block:: python

        response = http.request("GET", "https://example.com/", retries=Retry(10))

    Retries can be disabled by passing ``False``:

    .. code-block:: python

        response = http.request("GET", "https://example.com/", retries=False)

    Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless
    retries are disabled, in which case the causing exception will be raised.

    :param int total:
        Total number of retries to allow. Takes precedence over other counts.

        Set to ``None`` to remove this constraint and fall back on other
        counts.

        Set to ``0`` to fail on the first retry.

        Set to ``False`` to disable and imply ``raise_on_redirect=False``.

    :param int connect:
        How many connection-related errors to retry on.

        These are errors raised before the request is sent to the remote server,
        which we assume has not triggered the server to process the request.

        Set to ``0`` to fail on the first retry of this type.

    :param int read:
        How many times to retry on read errors.

        These errors are raised after the request was sent to the server, so the
        request may have side-effects.

        Set to ``0`` to fail on the first retry of this type.

    :param int redirect:
        How many redirects to perform. Limit this to avoid infinite redirect
        loops.

        A redirect is a HTTP response with a status code 301, 302, 303, 307 or
        308.

        Set to ``0`` to fail on the first retry of this type.

        Set to ``False`` to disable and imply ``raise_on_redirect=False``.

    :param int status:
        How many times to retry on bad status codes.

        These are retries made on responses, where status code matches
        ``status_forcelist``.

        Set to ``0`` to fail on the first retry of this type.

    :param int other:
        How many times to retry on other errors.

        Other errors are errors that are not connect, read, redirect or status errors.
        These errors might be raised after the request was sent to the server, so the
        request might have side-effects.

        Set to ``0`` to fail on the first retry of this type.

        If ``total`` is not set, it's a good idea to set this to 0 to account
        for unexpected edge cases and avoid infinite retry loops.

    :param Collection allowed_methods:
        Set of uppercased HTTP method verbs that we should retry on.

        By default, we only retry on methods which are considered to be
        idempotent (multiple requests with the same parameters end with the
        same state). See :attr:`Retry.DEFAULT_ALLOWED_METHODS`.

        Set to a ``None`` value to retry on any verb.

    :param Collection status_forcelist:
        A set of integer HTTP status codes that we should force a retry on.
        A retry is initiated if the request method is in ``allowed_methods``
        and the response status code is in ``status_forcelist``.

        By default, this is disabled with ``None``.

    :param float backoff_factor:
        A backoff factor to apply between attempts after the second try
        (most errors are resolved immediately by a second try without a
        delay). urllib3 will sleep for::

            {backoff factor} * (2 ** ({number of previous retries}))

        seconds. If `backoff_jitter` is non-zero, this sleep is extended by::

            random.uniform(0, {backoff jitter})

        seconds. For example, if the backoff_factor is 0.1, then :func:`Retry.sleep` will
        sleep for [0.0s, 0.2s, 0.4s, 0.8s, ...] between retries. No backoff will ever
        be longer than `backoff_max`.

        By default, backoff is disabled (factor set to 0).

    :param bool raise_on_redirect: Whether, if the number of redirects is
        exhausted, to raise a MaxRetryError, or to return a response with a
        response code in the 3xx range.

    :param bool raise_on_status: Similar meaning to ``raise_on_redirect``:
        whether we should raise an exception, or return a response,
        if status falls in ``status_forcelist`` range and retries have
        been exhausted.

    :param tuple history: The history of the request encountered during
        each call to :meth:`~Retry.increment`. The list is in the order
        the requests occurred. Each list item is of class :class:`RequestHistory`.

    :param bool respect_retry_after_header:
        Whether to respect Retry-After header on status codes defined as
        :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.

    :param Collection remove_headers_on_redirect:
        Sequence of headers to remove from the request when a response
        indicating a redirect is returned before firing off the redirected
        request.
  summary: Retry configuration
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: total
    default: '10'
    rest: false
  - kind: positional
    name: connect
    default: None
    rest: false
  - kind: positional
    name: read
    default: None
    rest: false
  - kind: positional
    name: redirect
    default: None
    rest: false
  - kind: positional
    name: status
    default: None
    rest: false
  - kind: positional
    name: other
    default: None
    rest: false
  - kind: positional
    name: allowed_methods
    default: frozenset({'GET', 'DELETE', 'PUT', 'HEAD', 'TRACE', 'OPTIONS'})
    rest: false
  - kind: positional
    name: status_forcelist
    default: None
    rest: false
  - kind: positional
    name: backoff_factor
    default: '0'
    rest: false
  - kind: positional
    name: backoff_max
    default: '120'
    rest: false
  - kind: positional
    name: raise_on_redirect
    default: 'True'
    rest: false
  - kind: positional
    name: raise_on_status
    default: 'True'
    rest: false
  - kind: positional
    name: history
    default: None
    rest: false
  - kind: positional
    name: respect_retry_after_header
    default: 'True'
    rest: false
  - kind: positional
    name: remove_headers_on_redirect
    default: frozenset({'Authorization', 'Cookie'})
    rest: false
  - kind: positional
    name: backoff_jitter
    default: '0.0'
    rest: false
  - type: Retry
  inherits_from: null
- name: Retry.DEFAULT
  kind: property
  ns: urllib3
  description: |-
    Retry configuration.

    Each retry attempt will create a new Retry object with updated values, so
    they can be safely reused.

    Retries can be defined as a default for a pool:

    .. code-block:: python

        retries = Retry(connect=5, read=2, redirect=5)
        http = PoolManager(retries=retries)
        response = http.request("GET", "https://example.com/")

    Or per-request (which overrides the default for the pool):

    .. code-block:: python

        response = http.request("GET", "https://example.com/", retries=Retry(10))

    Retries can be disabled by passing ``False``:

    .. code-block:: python

        response = http.request("GET", "https://example.com/", retries=False)

    Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless
    retries are disabled, in which case the causing exception will be raised.

    :param int total:
        Total number of retries to allow. Takes precedence over other counts.

        Set to ``None`` to remove this constraint and fall back on other
        counts.

        Set to ``0`` to fail on the first retry.

        Set to ``False`` to disable and imply ``raise_on_redirect=False``.

    :param int connect:
        How many connection-related errors to retry on.

        These are errors raised before the request is sent to the remote server,
        which we assume has not triggered the server to process the request.

        Set to ``0`` to fail on the first retry of this type.

    :param int read:
        How many times to retry on read errors.

        These errors are raised after the request was sent to the server, so the
        request may have side-effects.

        Set to ``0`` to fail on the first retry of this type.

    :param int redirect:
        How many redirects to perform. Limit this to avoid infinite redirect
        loops.

        A redirect is a HTTP response with a status code 301, 302, 303, 307 or
        308.

        Set to ``0`` to fail on the first retry of this type.

        Set to ``False`` to disable and imply ``raise_on_redirect=False``.

    :param int status:
        How many times to retry on bad status codes.

        These are retries made on responses, where status code matches
        ``status_forcelist``.

        Set to ``0`` to fail on the first retry of this type.

    :param int other:
        How many times to retry on other errors.

        Other errors are errors that are not connect, read, redirect or status errors.
        These errors might be raised after the request was sent to the server, so the
        request might have side-effects.

        Set to ``0`` to fail on the first retry of this type.

        If ``total`` is not set, it's a good idea to set this to 0 to account
        for unexpected edge cases and avoid infinite retry loops.

    :param Collection allowed_methods:
        Set of uppercased HTTP method verbs that we should retry on.

        By default, we only retry on methods which are considered to be
        idempotent (multiple requests with the same parameters end with the
        same state). See :attr:`Retry.DEFAULT_ALLOWED_METHODS`.

        Set to a ``None`` value to retry on any verb.

    :param Collection status_forcelist:
        A set of integer HTTP status codes that we should force a retry on.
        A retry is initiated if the request method is in ``allowed_methods``
        and the response status code is in ``status_forcelist``.

        By default, this is disabled with ``None``.

    :param float backoff_factor:
        A backoff factor to apply between attempts after the second try
        (most errors are resolved immediately by a second try without a
        delay). urllib3 will sleep for::

            {backoff factor} * (2 ** ({number of previous retries}))

        seconds. If `backoff_jitter` is non-zero, this sleep is extended by::

            random.uniform(0, {backoff jitter})

        seconds. For example, if the backoff_factor is 0.1, then :func:`Retry.sleep` will
        sleep for [0.0s, 0.2s, 0.4s, 0.8s, ...] between retries. No backoff will ever
        be longer than `backoff_max`.

        By default, backoff is disabled (factor set to 0).

    :param bool raise_on_redirect: Whether, if the number of redirects is
        exhausted, to raise a MaxRetryError, or to return a response with a
        response code in the 3xx range.

    :param bool raise_on_status: Similar meaning to ``raise_on_redirect``:
        whether we should raise an exception, or return a response,
        if status falls in ``status_forcelist`` range and retries have
        been exhausted.

    :param tuple history: The history of the request encountered during
        each call to :meth:`~Retry.increment`. The list is in the order
        the requests occurred. Each list item is of class :class:`RequestHistory`.

    :param bool respect_retry_after_header:
        Whether to respect Retry-After header on status codes defined as
        :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.

    :param Collection remove_headers_on_redirect:
        Sequence of headers to remove from the request when a response
        indicating a redirect is returned before firing off the redirected
        request.
  summary: Retry configuration
  signatures: null
  inherits_from: null
- name: Retry.DEFAULT_ALLOWED_METHODS
  kind: property
  ns: urllib3
  description: |-
    frozenset() -> empty frozenset object
    frozenset(iterable) -> frozenset object

    Build an immutable unordered collection of unique elements.
  summary: frozenset() -> empty frozenset object
  signatures: null
  inherits_from: null
- name: Retry.DEFAULT_BACKOFF_MAX
  kind: property
  ns: urllib3
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Retry.DEFAULT_REMOVE_HEADERS_ON_REDIRECT
  kind: property
  ns: urllib3
  description: |-
    frozenset() -> empty frozenset object
    frozenset(iterable) -> frozenset object

    Build an immutable unordered collection of unique elements.
  summary: frozenset() -> empty frozenset object
  signatures: null
  inherits_from: null
- name: Retry.RETRY_AFTER_STATUS_CODES
  kind: property
  ns: urllib3
  description: |-
    frozenset() -> empty frozenset object
    frozenset(iterable) -> frozenset object

    Build an immutable unordered collection of unique elements.
  summary: frozenset() -> empty frozenset object
  signatures: null
  inherits_from: null
- name: Retry.from_int
  kind: function
  ns: urllib3
  description: Backwards-compatibility for the old retries format.
  summary: Backwards-compatibility for the old retries format
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: retries
    default: null
    rest: false
  - kind: positional
    name: redirect
    default: 'True'
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry.get_backoff_time
  kind: method
  ns: urllib3
  description: |-
    Formula for computing the current backoff

    :rtype: float
  summary: Formula for computing the current backoff
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry.get_retry_after
  kind: method
  ns: urllib3
  description: Get the value of Retry-After in seconds.
  summary: Get the value of Retry-After in seconds
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: response
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry.increment
  kind: method
  ns: urllib3
  description: |-
    Return a new Retry object with incremented retry counters.

    :param response: A response object, or None, if the server did not
        return a response.
    :type response: :class:`~urllib3.response.BaseHTTPResponse`
    :param Exception error: An error encountered during the request, or
        None if the response was received successfully.

    :return: A new ``Retry`` object.
  summary: Return a new Retry object with incremented retry counters
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: None
    rest: false
  - kind: positional
    name: url
    default: None
    rest: false
  - kind: positional
    name: response
    default: None
    rest: false
  - kind: positional
    name: error
    default: None
    rest: false
  - kind: positional
    name: _pool
    default: None
    rest: false
  - kind: positional
    name: _stacktrace
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry.is_exhausted
  kind: method
  ns: urllib3
  description: Are we out of retries?
  summary: Are we out of retries?
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry.is_retry
  kind: method
  ns: urllib3
  description: |-
    Is this method/status code retryable? (Based on allowlists and control
    variables such as the number of total retries to allow, whether to
    respect the Retry-After header, whether this header is present, and
    whether the returned status code is on the list of status codes to
    be retried upon on the presence of the aforementioned header)
  summary: Is this method/status code retryable? (Based on allowlists and control
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: status_code
    default: null
    rest: false
  - kind: positional
    name: has_retry_after
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry.new
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry.parse_retry_after
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: retry_after
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry.sleep
  kind: method
  ns: urllib3
  description: |-
    Sleep between retry attempts.

    This method will respect a server's ``Retry-After`` response header
    and sleep the duration of the time requested. If that is not present, it
    will use an exponential backoff. By default, the backoff factor is 0 and
    this method will return immediately.
  summary: Sleep between retry attempts
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: response
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Retry.sleep_for_retry
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: response
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Timeout
  kind: class
  ns: urllib3
  description: |-
    Timeout configuration.

    Timeouts can be defined as a default for a pool:

    .. code-block:: python

        import urllib3

        timeout = urllib3.util.Timeout(connect=2.0, read=7.0)

        http = urllib3.PoolManager(timeout=timeout)

        resp = http.request("GET", "https://example.com/")

        print(resp.status)

    Or per-request (which overrides the default for the pool):

    .. code-block:: python

       response = http.request("GET", "https://example.com/", timeout=Timeout(10))

    Timeouts can be disabled by setting all the parameters to ``None``:

    .. code-block:: python

       no_timeout = Timeout(connect=None, read=None)
       response = http.request("GET", "https://example.com/", timeout=no_timeout)


    :param total:
        This combines the connect and read timeouts into one; the read timeout
        will be set to the time leftover from the connect attempt. In the
        event that both a connect timeout and a total are specified, or a read
        timeout and a total are specified, the shorter timeout will be applied.

        Defaults to None.

    :type total: int, float, or None

    :param connect:
        The maximum amount of time (in seconds) to wait for a connection
        attempt to a server to succeed. Omitting the parameter will default the
        connect timeout to the system default, probably `the global default
        timeout in socket.py
        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
        None will set an infinite timeout for connection attempts.

    :type connect: int, float, or None

    :param read:
        The maximum amount of time (in seconds) to wait between consecutive
        read operations for a response from the server. Omitting the parameter
        will default the read timeout to the system default, probably `the
        global default timeout in socket.py
        <http://hg.python.org/cpython/file/603b4d593758/Lib/socket.py#l535>`_.
        None will set an infinite timeout.

    :type read: int, float, or None

    .. note::

        Many factors can affect the total amount of time for urllib3 to return
        an HTTP response.

        For example, Python's DNS resolver does not obey the timeout specified
        on the socket. Other factors that can affect total request time include
        high CPU load, high swap, the program running at a low priority level,
        or other behaviors.

        In addition, the read and total timeouts only measure the time between
        read operations on the socket connecting the client and the server,
        not the total amount of time for the request to return a complete
        response. For most requests, the timeout is raised because the server
        has not sent the first byte in the specified time. This is not always
        the case; if a server streams one byte every fifteen seconds, a timeout
        of 20 seconds will not trigger, even though the request will take
        several minutes to complete.
  summary: Timeout configuration
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: total
    default: None
    rest: false
  - kind: positional
    name: connect
    default: _TYPE_DEFAULT.token
    rest: false
  - kind: positional
    name: read
    default: _TYPE_DEFAULT.token
    rest: false
  - type: Timeout
  inherits_from: null
- name: Timeout.DEFAULT_TIMEOUT
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Timeout.clone
  kind: method
  ns: urllib3
  description: |-
    Create a copy of the timeout object

    Timeout properties are stored per-pool but each request needs a fresh
    Timeout object to ensure each one has its own start/stop configured.

    :return: a copy of the timeout object
    :rtype: :class:`Timeout`
  summary: Create a copy of the timeout object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Timeout.connect_timeout
  kind: property
  ns: urllib3
  description: |-
    Get the value to use when setting a connection timeout.

    This will be a positive float or integer, the value None
    (never timeout), or the default system timeout.

    :return: Connect timeout.
    :rtype: int, float, :attr:`Timeout.DEFAULT_TIMEOUT` or None
  summary: Get the value to use when setting a connection timeout
  signatures: null
  inherits_from: null
- name: Timeout.from_float
  kind: function
  ns: urllib3
  description: |-
    Create a new Timeout from a legacy timeout value.

    The timeout value used by httplib.py sets the same timeout on the
    connect(), and recv() socket requests. This creates a :class:`Timeout`
    object that sets the individual timeouts to the ``timeout`` value
    passed to this function.

    :param timeout: The legacy timeout value.
    :type timeout: integer, float, :attr:`urllib3.util.Timeout.DEFAULT_TIMEOUT`, or None
    :return: Timeout object
    :rtype: :class:`Timeout`
  summary: Create a new Timeout from a legacy timeout value
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: timeout
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Timeout.get_connect_duration
  kind: method
  ns: urllib3
  description: |-
    Gets the time elapsed since the call to :meth:`start_connect`.

    :return: Elapsed time in seconds.
    :rtype: float
    :raises urllib3.exceptions.TimeoutStateError: if you attempt
        to get duration for a timer that hasn't been started.
  summary: Gets the time elapsed since the call to :meth:`start_connect`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Timeout.read_timeout
  kind: property
  ns: urllib3
  description: |-
    Get the value for the read timeout.

    This assumes some time has elapsed in the connection timeout and
    computes the read timeout appropriately.

    If self.total is set, the read timeout is dependent on the amount of
    time taken by the connect timeout. If the connection time has not been
    established, a :exc:`~urllib3.exceptions.TimeoutStateError` will be
    raised.

    :return: Value to use for the read timeout.
    :rtype: int, float or None
    :raises urllib3.exceptions.TimeoutStateError: If :meth:`start_connect`
        has not yet been called on this object.
  summary: Get the value for the read timeout
  signatures: null
  inherits_from: null
- name: Timeout.resolve_default_timeout
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: timeout
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Timeout.start_connect
  kind: method
  ns: urllib3
  description: |-
    Start the timeout clock, used during a connect() attempt

    :raises urllib3.exceptions.TimeoutStateError: if you attempt
        to start a timer that has been started already.
  summary: Start the timeout clock, used during a connect() attempt
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: add_stderr_logger
  kind: function
  ns: urllib3
  description: |-
    Helper for quickly adding a StreamHandler to the logger. Useful for
    debugging.

    Returns the handler after adding it.
  summary: Helper for quickly adding a StreamHandler to the logger
  signatures:
  - kind: positional
    name: level
    default: '10'
    rest: false
  - type: '?'
  inherits_from: null
- name: connection_from_url
  kind: function
  ns: urllib3
  description: |-
    Given a url, return an :class:`.ConnectionPool` instance of its host.

    This is a shortcut for not having to parse out the scheme, host, and port
    of the url before creating an :class:`.ConnectionPool` instance.

    :param url:
        Absolute URL string that must include the scheme. Port is optional.

    :param \**kw:
        Passes additional parameters to the constructor of the appropriate
        :class:`.ConnectionPool`. Useful for specifying things like
        timeout, maxsize, headers, etc.

    Example::

        >>> conn = connection_from_url('http://google.com/')
        >>> r = conn.request('GET', '/')
  summary: Given a url, return an :class:`
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: disable_warnings
  kind: function
  ns: urllib3
  description: Helper for quickly disabling all urllib3 warnings.
  summary: Helper for quickly disabling all urllib3 warnings
  signatures:
  - kind: positional
    name: category
    default: <class 'urllib3.exceptions.HTTPWarning'>
    rest: false
  - type: '?'
  inherits_from: null
- name: encode_multipart_formdata
  kind: function
  ns: urllib3
  description: |-
    Encode a dictionary of ``fields`` using the multipart/form-data MIME format.

    :param fields:
        Dictionary of fields or list of (key, :class:`~urllib3.fields.RequestField`).
        Values are processed by :func:`urllib3.fields.RequestField.from_tuples`.

    :param boundary:
        If not specified, then a random boundary will be generated using
        :func:`urllib3.filepost.choose_boundary`.
  summary: Encode a dictionary of ``fields`` using the multipart/form-data MIME format
  signatures:
  - kind: positional
    name: fields
    default: null
    rest: false
  - kind: positional
    name: boundary
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: make_headers
  kind: function
  ns: urllib3
  description: |-
    Shortcuts for generating request headers.

    :param keep_alive:
        If ``True``, adds 'connection: keep-alive' header.

    :param accept_encoding:
        Can be a boolean, list, or string.
        ``True`` translates to 'gzip,deflate'.  If either the ``brotli`` or
        ``brotlicffi`` package is installed 'gzip,deflate,br' is used instead.
        List will get joined by comma.
        String will be used as provided.

    :param user_agent:
        String representing the user-agent you want, such as
        "python-urllib3/0.6"

    :param basic_auth:
        Colon-separated username:password string for 'authorization: basic ...'
        auth header.

    :param proxy_basic_auth:
        Colon-separated username:password string for 'proxy-authorization: basic ...'
        auth header.

    :param disable_cache:
        If ``True``, adds 'cache-control: no-cache' header.

    Example:

    .. code-block:: python

        import urllib3

        print(urllib3.util.make_headers(keep_alive=True, user_agent="Batman/1.0"))
        # {'connection': 'keep-alive', 'user-agent': 'Batman/1.0'}
        print(urllib3.util.make_headers(accept_encoding=True))
        # {'accept-encoding': 'gzip,deflate'}
  summary: Shortcuts for generating request headers
  signatures:
  - kind: positional
    name: keep_alive
    default: None
    rest: false
  - kind: positional
    name: accept_encoding
    default: None
    rest: false
  - kind: positional
    name: user_agent
    default: None
    rest: false
  - kind: positional
    name: basic_auth
    default: None
    rest: false
  - kind: positional
    name: proxy_basic_auth
    default: None
    rest: false
  - kind: positional
    name: disable_cache
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: proxy_from_url
  kind: function
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: request
  kind: function
  ns: urllib3
  description: |-
    A convenience, top-level request method. It uses a module-global ``PoolManager`` instance.
    Therefore, its side effects could be shared across dependencies relying on it.
    To avoid side effects create a new ``PoolManager`` instance and use it instead.
    The method does not accept low-level ``**urlopen_kw`` keyword arguments.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param body:
        Data to send in the request body, either :class:`str`, :class:`bytes`,
        an iterable of :class:`str`/:class:`bytes`, or a file-like object.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc.

    :param bool preload_content:
        If True, the response's body will be preloaded into memory.

    :param bool decode_content:
        If True, will attempt to decode the body based on the
        'content-encoding' header.

    :param redirect:
        If True, automatically handle redirects (status codes 301, 302,
        303, 307, 308). Each redirect counts as a retry. Disabling retries
        will disable redirect, too.

    :param retries:
        Configure the number of retries to allow before raising a
        :class:`~urllib3.exceptions.MaxRetryError` exception.

        If ``None`` (default) will retry 3 times, see ``Retry.DEFAULT``. Pass a
        :class:`~urllib3.util.retry.Retry` object for fine-grained control
        over different types of retries.
        Pass an integer number to retry connection errors that many times,
        but no other types of errors. Pass zero to never retry.

        If ``False``, then retries are disabled and any exception is raised
        immediately. Also, instead of raising a MaxRetryError on redirects,
        the redirect response will be returned.

    :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.

    :param timeout:
        If specified, overrides the default timeout for this one
        request. It may be a float (in seconds) or an instance of
        :class:`urllib3.util.Timeout`.

    :param json:
        Data to encode and send as JSON with UTF-encoded in the request body.
        The ``"Content-Type"`` header will be set to ``"application/json"``
        unless specified otherwise.
  summary: A convenience, top-level request method
  signatures:
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - name: body
    default: None
    rest: false
    kind: kw-only
  - name: fields
    default: None
    rest: false
    kind: kw-only
  - name: headers
    default: None
    rest: false
    kind: kw-only
  - name: preload_content
    default: 'True'
    rest: false
    kind: kw-only
  - name: decode_content
    default: 'True'
    rest: false
    kind: kw-only
  - name: redirect
    default: 'True'
    rest: false
    kind: kw-only
  - name: retries
    default: None
    rest: false
    kind: kw-only
  - name: timeout
    default: '3'
    rest: false
    kind: kw-only
  - name: json
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse
  kind: class
  ns: urllib3
  description: |-
    The abstract base class for all I/O classes.

    This class provides dummy implementations for many methods that
    derived classes can override selectively; the default implementations
    represent a file that cannot be read, written or seeked.

    Even though IOBase does not declare read, readinto, or write because
    their signatures will vary, implementations and clients should
    consider those methods part of the interface. Also, implementations
    may raise UnsupportedOperation when operations they do not support are
    called.

    The basic type used for binary data read from or written to a file is
    bytes. Other bytes-like objects are accepted as method arguments too.
    In some cases (such as readinto), a writable object is required. Text
    I/O classes work with str data.

    Note that calling any method (except additional calls to close(),
    which are ignored) on a closed stream should raise a ValueError.

    IOBase (and its subclasses) support the iterator protocol, meaning
    that an IOBase object can be iterated over yielding the lines in a
    stream.

    IOBase also supports the :keyword:`with` statement. In this example,
    fp is closed after the suite of the with statement is complete:

    with open('spam.txt', 'r') as fp:
        fp.write('Spam and eggs!')
  summary: The abstract base class for all I/O classes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - name: headers
    default: None
    rest: false
    kind: kw-only
  - name: status
    default: null
    rest: false
    kind: kw-only
  - name: version
    default: null
    rest: false
    kind: kw-only
  - name: reason
    default: null
    rest: false
    kind: kw-only
  - name: decode_content
    default: null
    rest: false
    kind: kw-only
  - name: request_url
    default: null
    rest: false
    kind: kw-only
  - name: retries
    default: None
    rest: false
    kind: kw-only
  - type: BaseHTTPResponse
  inherits_from:
  - <class 'io.IOBase'>
  - <class '_io._IOBase'>
- name: BaseHTTPResponse.CONTENT_DECODERS
  kind: property
  ns: urllib3
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.DECODER_ERROR_CLASSES
  kind: property
  ns: urllib3
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.REDIRECT_STATUSES
  kind: property
  ns: urllib3
  description: |-
    Built-in mutable sequence.

    If no argument is given, the constructor creates a new empty list.
    The argument must be an iterable if specified.
  summary: Built-in mutable sequence
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.close
  kind: method
  ns: urllib3
  description: |-
    Flush and close the IO object.

    This method has no effect if the file is already closed.
  summary: Flush and close the IO object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.closed
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.connection
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.data
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.drain_conn
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.fileno
  kind: callable
  ns: urllib3
  description: |-
    Returns underlying file descriptor if one exists.

    OSError is raised if the IO object does not use a file descriptor.
  summary: Returns underlying file descriptor if one exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.flush
  kind: callable
  ns: urllib3
  description: |-
    Flush write buffers, if applicable.

    This is not implemented for read-only and non-blocking streams.
  summary: Flush write buffers, if applicable
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.get_redirect_location
  kind: method
  ns: urllib3
  description: |-
    Should we redirect and where to?

    :returns: Truthy redirect location string if we got a redirect status
        code and valid location. ``None`` if redirect status and no
        location. ``False`` if not a redirect status code.
  summary: Should we redirect and where to?
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.getheader
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.getheaders
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.geturl
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.info
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.isatty
  kind: callable
  ns: urllib3
  description: |-
    Return whether this is an 'interactive' stream.

    Return False if it can't be determined.
  summary: Return whether this is an 'interactive' stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.json
  kind: method
  ns: urllib3
  description: |-
    Parses the body of the HTTP response as JSON.

    To use a custom JSON decoder pass the result of :attr:`HTTPResponse.data` to the decoder.

    This method can raise either `UnicodeDecodeError` or `json.JSONDecodeError`.

    Read more :ref:`here <json>`.
  summary: Parses the body of the HTTP response as JSON
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.read
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: amt
    default: None
    rest: false
  - kind: positional
    name: decode_content
    default: None
    rest: false
  - kind: positional
    name: cache_content
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.read1
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: amt
    default: None
    rest: false
  - kind: positional
    name: decode_content
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.read_chunked
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: amt
    default: None
    rest: false
  - kind: positional
    name: decode_content
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.readable
  kind: callable
  ns: urllib3
  description: |-
    Return whether object was opened for reading.

    If False, read() will raise OSError.
  summary: Return whether object was opened for reading
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.readinto
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: b
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.readline
  kind: callable
  ns: urllib3
  description: |-
    Read and return a line from the stream.

    If size is specified, at most size bytes will be read.

    The line terminator is always b'\n' for binary files; for text
    files, the newlines argument to open can be used to select the line
    terminator(s) recognized.
  summary: Read and return a line from the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.readlines
  kind: callable
  ns: urllib3
  description: |-
    Return a list of lines from the stream.

    hint can be specified to control the number of lines read: no more
    lines will be read if the total size (in bytes/characters) of all
    lines so far exceeds hint.
  summary: Return a list of lines from the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: hint
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.release_conn
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.retries
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.seek
  kind: callable
  ns: urllib3
  description: |-
    Change the stream position to the given byte offset.

      offset
        The stream position, relative to 'whence'.
      whence
        The relative position to seek from.

    The offset is interpreted relative to the position indicated by whence.
    Values for whence are:

    * os.SEEK_SET or 0 -- start of stream (the default); offset should be zero or positive
    * os.SEEK_CUR or 1 -- current stream position; offset may be negative
    * os.SEEK_END or 2 -- end of stream; offset is usually negative

    Return the new absolute position.
  summary: Change the stream position to the given byte offset
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: offset
    default: null
    rest: false
  - kind: positional
    name: whence
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.seekable
  kind: callable
  ns: urllib3
  description: |-
    Return whether object supports random access.

    If False, seek(), tell() and truncate() will raise OSError.
    This method may need to do a test seek().
  summary: Return whether object supports random access
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.stream
  kind: method
  ns: urllib3
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: amt
    default: '65536'
    rest: false
  - kind: positional
    name: decode_content
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.tell
  kind: callable
  ns: urllib3
  description: Return current stream position.
  summary: Return current stream position
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.truncate
  kind: callable
  ns: urllib3
  description: |-
    Truncate file to size bytes.

    File pointer is left unchanged.  Size defaults to the current IO
    position as reported by tell().  Returns the new size.
  summary: Truncate file to size bytes
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.url
  kind: property
  ns: urllib3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseHTTPResponse.writable
  kind: callable
  ns: urllib3
  description: |-
    Return whether object was opened for writing.

    If False, write() will raise OSError.
  summary: Return whether object was opened for writing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseHTTPResponse.writelines
  kind: callable
  ns: urllib3
  description: |-
    Write a list of lines to stream.

    Line separators are not added, so it is usual for each of the
    lines provided to have a line separator at the end.
  summary: Write a list of lines to stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lines
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: urllib3.connection
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseSSLError
  kind: class
  ns: urllib3.connection
  description: An error occurred in the SSL implementation.
  summary: An error occurred in the SSL implementation
  signatures: null
  inherits_from:
  - <class 'OSError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BaseSSLError.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseSSLError.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseSSLError.characters_written
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BaseSSLError.errno
  kind: property
  ns: urllib3.connection
  description: POSIX exception code
  summary: POSIX exception code
  signatures: null
  inherits_from: null
- name: BaseSSLError.filename
  kind: property
  ns: urllib3.connection
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: BaseSSLError.filename2
  kind: property
  ns: urllib3.connection
  description: second exception filename
  summary: second exception filename
  signatures: null
  inherits_from: null
- name: BaseSSLError.strerror
  kind: property
  ns: urllib3.connection
  description: exception strerror
  summary: exception strerror
  signatures: null
  inherits_from: null
- name: BaseSSLError.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BrokenPipeError
  kind: class
  ns: urllib3.connection
  description: Broken pipe.
  summary: Broken pipe
  signatures: null
  inherits_from:
  - <class 'ConnectionError'>
  - <class 'OSError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BrokenPipeError.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BrokenPipeError.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BrokenPipeError.characters_written
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BrokenPipeError.errno
  kind: property
  ns: urllib3.connection
  description: POSIX exception code
  summary: POSIX exception code
  signatures: null
  inherits_from: null
- name: BrokenPipeError.filename
  kind: property
  ns: urllib3.connection
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: BrokenPipeError.filename2
  kind: property
  ns: urllib3.connection
  description: second exception filename
  summary: second exception filename
  signatures: null
  inherits_from: null
- name: BrokenPipeError.strerror
  kind: property
  ns: urllib3.connection
  description: exception strerror
  summary: exception strerror
  signatures: null
  inherits_from: null
- name: BrokenPipeError.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: CertificateError
  kind: class
  ns: urllib3.connection
  description: Inappropriate argument value (of correct type).
  summary: Inappropriate argument value (of correct type)
  signatures: null
  inherits_from:
  - <class 'ValueError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: CertificateError.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: CertificateError.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CertificateError.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ConnectTimeoutError
  kind: class
  ns: urllib3.connection
  description: Raised when a socket timeout occurs while connecting to a server
  summary: Raised when a socket timeout occurs while connecting to a server
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.TimeoutError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ConnectTimeoutError.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ConnectTimeoutError.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnectTimeoutError.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ConnectionError
  kind: class
  ns: urllib3.connection
  description: Connection error.
  summary: Connection error
  signatures: null
  inherits_from:
  - <class 'OSError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ConnectionError.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ConnectionError.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnectionError.characters_written
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ConnectionError.errno
  kind: property
  ns: urllib3.connection
  description: POSIX exception code
  summary: POSIX exception code
  signatures: null
  inherits_from: null
- name: ConnectionError.filename
  kind: property
  ns: urllib3.connection
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: ConnectionError.filename2
  kind: property
  ns: urllib3.connection
  description: second exception filename
  summary: second exception filename
  signatures: null
  inherits_from: null
- name: ConnectionError.strerror
  kind: property
  ns: urllib3.connection
  description: exception strerror
  summary: exception strerror
  signatures: null
  inherits_from: null
- name: ConnectionError.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DummyConnection
  kind: class
  ns: urllib3.connection
  description: Used to detect a failed ConnectionCls import.
  summary: Used to detect a failed ConnectionCls import
  signatures:
  - type: DummyConnection
  inherits_from: null
- name: HTTPException
  kind: class
  ns: urllib3.connection
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: HTTPException.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: HTTPException.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPException.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: HeaderParsingError
  kind: class
  ns: urllib3.connection
  description: Raised by assert_header_parsing, but we convert it to a log.warning statement.
  summary: Raised by assert_header_parsing, but we convert it to a log
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: defects
    default: null
    rest: false
  - kind: positional
    name: unparsed_data
    default: null
    rest: false
  - type: HeaderParsingError
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: HeaderParsingError.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: HeaderParsingError.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HeaderParsingError.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: NameResolutionError
  kind: class
  ns: urllib3.connection
  description: Raised when host name resolution fails.
  summary: Raised when host name resolution fails
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: conn
    default: null
    rest: false
  - kind: positional
    name: reason
    default: null
    rest: false
  - type: NameResolutionError
  inherits_from:
  - <class 'urllib3.exceptions.NewConnectionError'>
  - <class 'urllib3.exceptions.ConnectTimeoutError'>
  - <class 'urllib3.exceptions.TimeoutError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NameResolutionError.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NameResolutionError.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NameResolutionError.pool
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NameResolutionError.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: NewConnectionError
  kind: class
  ns: urllib3.connection
  description: Raised when we fail to establish a new connection. Usually ECONNREFUSED.
  summary: Raised when we fail to establish a new connection
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: conn
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: NewConnectionError
  inherits_from:
  - <class 'urllib3.exceptions.ConnectTimeoutError'>
  - <class 'urllib3.exceptions.TimeoutError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NewConnectionError.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NewConnectionError.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NewConnectionError.pool
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NewConnectionError.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProxyConfig
  kind: class
  ns: urllib3.connection
  description: ProxyConfig(ssl_context, use_forwarding_for_https, assert_hostname, assert_fingerprint)
  summary: ProxyConfig(ssl_context, use_forwarding_for_https, assert_hostname, assert_fingerprint)
  signatures:
  - kind: positional
    name: _cls
    default: null
    rest: false
  - kind: positional
    name: ssl_context
    default: null
    rest: false
  - kind: positional
    name: use_forwarding_for_https
    default: null
    rest: false
  - kind: positional
    name: assert_hostname
    default: null
    rest: false
  - kind: positional
    name: assert_fingerprint
    default: null
    rest: false
  - type: ProxyConfig
  inherits_from:
  - <class 'tuple'>
- name: ProxyConfig.assert_fingerprint
  kind: property
  ns: urllib3.connection
  description: Alias for field number 3
  summary: Alias for field number 3
  signatures: null
  inherits_from: null
- name: ProxyConfig.assert_hostname
  kind: property
  ns: urllib3.connection
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: ProxyConfig.count
  kind: callable
  ns: urllib3.connection
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyConfig.index
  kind: callable
  ns: urllib3.connection
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: start
    default: '0'
    rest: false
  - kind: positional
    name: stop
    default: '9223372036854775807'
    rest: false
  - type: '?'
  inherits_from: null
- name: ProxyConfig.ssl_context
  kind: property
  ns: urllib3.connection
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: ProxyConfig.use_forwarding_for_https
  kind: property
  ns: urllib3.connection
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: ProxyError
  kind: class
  ns: urllib3.connection
  description: Raised when the connection to a proxy fails.
  summary: Raised when the connection to a proxy fails
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: error
    default: null
    rest: false
  - type: ProxyError
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ProxyError.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProxyError.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProxyError.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: RECENT_DATE
  kind: const
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseNotReady
  kind: class
  ns: urllib3.connection
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures: null
  inherits_from:
  - <class 'http.client.ImproperConnectionState'>
  - <class 'http.client.HTTPException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ResponseNotReady.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ResponseNotReady.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseNotReady.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SKIPPABLE_HEADERS
  kind: const
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SKIP_HEADER
  kind: const
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SocketTimeout
  kind: class
  ns: urllib3.connection
  description: Timeout expired.
  summary: Timeout expired
  signatures: null
  inherits_from:
  - <class 'OSError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SocketTimeout.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SocketTimeout.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SocketTimeout.characters_written
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SocketTimeout.errno
  kind: property
  ns: urllib3.connection
  description: POSIX exception code
  summary: POSIX exception code
  signatures: null
  inherits_from: null
- name: SocketTimeout.filename
  kind: property
  ns: urllib3.connection
  description: exception filename
  summary: exception filename
  signatures: null
  inherits_from: null
- name: SocketTimeout.filename2
  kind: property
  ns: urllib3.connection
  description: second exception filename
  summary: second exception filename
  signatures: null
  inherits_from: null
- name: SocketTimeout.strerror
  kind: property
  ns: urllib3.connection
  description: exception strerror
  summary: exception strerror
  signatures: null
  inherits_from: null
- name: SocketTimeout.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SystemTimeWarning
  kind: class
  ns: urllib3.connection
  description: Warned when system time is suspected to be wrong
  summary: Warned when system time is suspected to be wrong
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.SecurityWarning'>
  - <class 'urllib3.exceptions.HTTPWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SystemTimeWarning.add_note
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SystemTimeWarning.args
  kind: property
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SystemTimeWarning.with_traceback
  kind: callable
  ns: urllib3.connection
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Url
  kind: class
  ns: urllib3.connection
  description: |-
    Data structure for representing an HTTP URL. Used as a return value for
    :func:`parse_url`. Both the scheme and host are normalized as they are
    both case-insensitive according to RFC 3986.
  summary: Data structure for representing an HTTP URL
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: scheme
    default: None
    rest: false
  - kind: positional
    name: auth
    default: None
    rest: false
  - kind: positional
    name: host
    default: None
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - kind: positional
    name: path
    default: None
    rest: false
  - kind: positional
    name: query
    default: None
    rest: false
  - kind: positional
    name: fragment
    default: None
    rest: false
  - type: Url
  inherits_from:
  - <class 'urllib3.util.url.Url'>
  - <class 'tuple'>
- name: Url.auth
  kind: property
  ns: urllib3.connection
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: Url.authority
  kind: property
  ns: urllib3.connection
  description: |-
    Authority component as defined in RFC 3986 3.2.
    This includes userinfo (auth), host and port.

    i.e.
        userinfo@host:port
  summary: Authority component as defined in RFC 3986 3
  signatures: null
  inherits_from: null
- name: Url.count
  kind: callable
  ns: urllib3.connection
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Url.fragment
  kind: property
  ns: urllib3.connection
  description: Alias for field number 6
  summary: Alias for field number 6
  signatures: null
  inherits_from: null
- name: Url.host
  kind: property
  ns: urllib3.connection
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: Url.hostname
  kind: property
  ns: urllib3.connection
  description: For backwards-compatibility with urlparse. We're nice like that.
  summary: For backwards-compatibility with urlparse
  signatures: null
  inherits_from: null
- name: Url.index
  kind: callable
  ns: urllib3.connection
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: start
    default: '0'
    rest: false
  - kind: positional
    name: stop
    default: '9223372036854775807'
    rest: false
  - type: '?'
  inherits_from: null
- name: Url.netloc
  kind: property
  ns: urllib3.connection
  description: |-
    Network location including host and port.

    If you need the equivalent of urllib.parse's ``netloc``,
    use the ``authority`` property instead.
  summary: Network location including host and port
  signatures: null
  inherits_from: null
- name: Url.path
  kind: property
  ns: urllib3.connection
  description: Alias for field number 4
  summary: Alias for field number 4
  signatures: null
  inherits_from: null
- name: Url.port
  kind: property
  ns: urllib3.connection
  description: Alias for field number 3
  summary: Alias for field number 3
  signatures: null
  inherits_from: null
- name: Url.query
  kind: property
  ns: urllib3.connection
  description: Alias for field number 5
  summary: Alias for field number 5
  signatures: null
  inherits_from: null
- name: Url.request_uri
  kind: property
  ns: urllib3.connection
  description: Absolute path including the query string.
  summary: Absolute path including the query string
  signatures: null
  inherits_from: null
- name: Url.scheme
  kind: property
  ns: urllib3.connection
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: Url.url
  kind: property
  ns: urllib3.connection
  description: |-
    Convert self into a url

    This function should more or less round-trip with :func:`.parse_url`. The
    returned url may not be exactly the same as the url inputted to
    :func:`.parse_url`, but it should be equivalent by the RFC (e.g., urls
    with a blank port will have : removed).

    Example:

    .. code-block:: python

        import urllib3

        U = urllib3.util.parse_url("https://google.com/mail/")

        print(U.url)
        # "https://google.com/mail/"

        print( urllib3.util.Url("https", "username:password",
                                "host.com", 80, "/path", "query", "fragment"
                                ).url
            )
        # "https://username:password@host.com:80/path?query#fragment"
  summary: Convert self into a url
  signatures: null
  inherits_from: null
- name: annotations
  kind: const
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: assert_header_parsing
  kind: function
  ns: urllib3.connection
  description: |-
    Asserts whether all headers have been successfully parsed.
    Extracts encountered errors from the result of parsing headers.

    Only works on Python 3.

    :param http.client.HTTPMessage headers: Headers to verify.

    :raises urllib3.exceptions.HeaderParsingError:
        If parsing errors are found.
  summary: Asserts whether all headers have been successfully parsed
  signatures:
  - kind: positional
    name: headers
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: body_to_chunks
  kind: function
  ns: urllib3.connection
  description: |-
    Takes the HTTP request method, body, and blocksize and
    transforms them into an iterable of chunks to pass to
    socket.sendall() and an optional 'Content-Length' header.

    A 'Content-Length' of 'None' indicates the length of the body
    can't be determined so should use 'Transfer-Encoding: chunked'
    for framing instead.
  summary: Takes the HTTP request method, body, and blocksize and
  signatures:
  - kind: positional
    name: body
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: blocksize
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: create_urllib3_context
  kind: function
  ns: urllib3.connection
  description: |-
    Creates and configures an :class:`ssl.SSLContext` instance for use with urllib3.

    :param ssl_version:
        The desired protocol version to use. This will default to
        PROTOCOL_SSLv23 which will negotiate the highest protocol that both
        the server and your installation of OpenSSL support.

        This parameter is deprecated instead use 'ssl_minimum_version'.
    :param ssl_minimum_version:
        The minimum version of TLS to be used. Use the 'ssl.TLSVersion' enum for specifying the value.
    :param ssl_maximum_version:
        The maximum version of TLS to be used. Use the 'ssl.TLSVersion' enum for specifying the value.
        Not recommended to set to anything other than 'ssl.TLSVersion.MAXIMUM_SUPPORTED' which is the
        default value.
    :param cert_reqs:
        Whether to require the certificate verification. This defaults to
        ``ssl.CERT_REQUIRED``.
    :param options:
        Specific OpenSSL options. These default to ``ssl.OP_NO_SSLv2``,
        ``ssl.OP_NO_SSLv3``, ``ssl.OP_NO_COMPRESSION``, and ``ssl.OP_NO_TICKET``.
    :param ciphers:
        Which cipher suites to allow the server to select. Defaults to either system configured
        ciphers if OpenSSL 1.1.1+, otherwise uses a secure default set of ciphers.
    :returns:
        Constructed SSLContext object with specified options
    :rtype: SSLContext
  summary: Creates and configures an :class:`ssl
  signatures:
  - kind: positional
    name: ssl_version
    default: None
    rest: false
  - kind: positional
    name: cert_reqs
    default: None
    rest: false
  - kind: positional
    name: options
    default: None
    rest: false
  - kind: positional
    name: ciphers
    default: None
    rest: false
  - kind: positional
    name: ssl_minimum_version
    default: None
    rest: false
  - kind: positional
    name: ssl_maximum_version
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: is_ipaddress
  kind: function
  ns: urllib3.connection
  description: |-
    Detects whether the hostname given is an IPv4 or IPv6 address.
    Also detects IPv6 addresses with Zone IDs.

    :param str hostname: Hostname to examine.
    :return: True if the hostname is an IP address, False otherwise.
  summary: Detects whether the hostname given is an IPv4 or IPv6 address
  signatures:
  - kind: positional
    name: hostname
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: log
  kind: const
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: match_hostname
  kind: function
  ns: urllib3.connection
  description: |-
    Verify that *cert* (in decoded format as returned by
    SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125
    rules are followed, but IP addresses are not accepted for *hostname*.

    CertificateError is raised on failure. On success, the function
    returns nothing.
  summary: Verify that *cert* (in decoded format as returned by
  signatures:
  - kind: positional
    name: cert
    default: null
    rest: false
  - kind: positional
    name: hostname
    default: null
    rest: false
  - kind: positional
    name: hostname_checks_common_name
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: port_by_scheme
  kind: const
  ns: urllib3.connection
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: resolve_cert_reqs
  kind: function
  ns: urllib3.connection
  description: |-
    Resolves the argument to a numeric constant, which can be passed to
    the wrap_socket function/method from the ssl module.
    Defaults to :data:`ssl.CERT_REQUIRED`.
    If given a string it is assumed to be the name of the constant in the
    :mod:`ssl` module or its abbreviation.
    (So you can specify `REQUIRED` instead of `CERT_REQUIRED`.
    If it's neither `None` nor a string we assume it is already the numeric
    constant which can directly be passed to wrap_socket.
  summary: Resolves the argument to a numeric constant, which can be passed to
  signatures:
  - kind: positional
    name: candidate
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: resolve_ssl_version
  kind: function
  ns: urllib3.connection
  description: like resolve_cert_reqs
  summary: like resolve_cert_reqs
  signatures:
  - kind: positional
    name: candidate
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ssl_wrap_socket
  kind: function
  ns: urllib3.connection
  description: |-
    All arguments except for server_hostname, ssl_context, tls_in_tls, ca_cert_data and
    ca_cert_dir have the same meaning as they do when using
    :func:`ssl.create_default_context`, :meth:`ssl.SSLContext.load_cert_chain`,
    :meth:`ssl.SSLContext.set_ciphers` and :meth:`ssl.SSLContext.wrap_socket`.

    :param server_hostname:
        When SNI is supported, the expected hostname of the certificate
    :param ssl_context:
        A pre-made :class:`SSLContext` object. If none is provided, one will
        be created using :func:`create_urllib3_context`.
    :param ciphers:
        A string of ciphers we wish the client to support.
    :param ca_cert_dir:
        A directory containing CA certificates in multiple separate files, as
        supported by OpenSSL's -CApath flag or the capath argument to
        SSLContext.load_verify_locations().
    :param key_password:
        Optional password if the keyfile is encrypted.
    :param ca_cert_data:
        Optional string containing CA certificates in PEM format suitable for
        passing as the cadata parameter to SSLContext.load_verify_locations()
    :param tls_in_tls:
        Use SSLTransport to wrap the existing socket.
  summary: All arguments except for server_hostname, ssl_context, tls_in_tls, ca_cert_data and
  signatures:
  - kind: positional
    name: sock
    default: null
    rest: false
  - kind: positional
    name: keyfile
    default: None
    rest: false
  - kind: positional
    name: certfile
    default: None
    rest: false
  - kind: positional
    name: cert_reqs
    default: None
    rest: false
  - kind: positional
    name: ca_certs
    default: None
    rest: false
  - kind: positional
    name: server_hostname
    default: None
    rest: false
  - kind: positional
    name: ssl_version
    default: None
    rest: false
  - kind: positional
    name: ciphers
    default: None
    rest: false
  - kind: positional
    name: ssl_context
    default: None
    rest: false
  - kind: positional
    name: ca_cert_dir
    default: None
    rest: false
  - kind: positional
    name: key_password
    default: None
    rest: false
  - kind: positional
    name: ca_cert_data
    default: None
    rest: false
  - kind: positional
    name: tls_in_tls
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: to_str
  kind: function
  ns: urllib3.connection
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: x
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: wait_for_read
  kind: function
  ns: urllib3.connection
  description: |-
    Waits for reading to be available on a given socket.
    Returns True if the socket is readable, or False if the timeout expired.
  summary: Waits for reading to be available on a given socket
  signatures:
  - kind: positional
    name: sock
    default: null
    rest: false
  - kind: positional
    name: timeout
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: urllib3.connectionpool
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ClosedPoolError
  kind: class
  ns: urllib3.connectionpool
  description: Raised when a request enters a pool after the pool has been closed.
  summary: Raised when a request enters a pool after the pool has been closed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: ClosedPoolError
  inherits_from:
  - <class 'urllib3.exceptions.PoolError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ClosedPoolError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ClosedPoolError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ClosedPoolError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ConnectionPool
  kind: class
  ns: urllib3.connectionpool
  description: |-
    Base class for all connection pools, such as
    :class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.

    .. note::
       ConnectionPool.urlopen() does not normalize or percent-encode target URIs
       which is useful if your target server doesn't support percent-encoded
       target URIs.
  summary: Base class for all connection pools, such as
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: port
    default: None
    rest: false
  - type: ConnectionPool
  inherits_from: null
- name: ConnectionPool.close
  kind: method
  ns: urllib3.connectionpool
  description: Close all pooled connections and disable the pool.
  summary: Close all pooled connections and disable the pool
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ConnectionPool.scheme
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: EmptyPoolError
  kind: class
  ns: urllib3.connectionpool
  description: Raised when a pool runs out of connections and no more are allowed.
  summary: Raised when a pool runs out of connections and no more are allowed
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: EmptyPoolError
  inherits_from:
  - <class 'urllib3.exceptions.PoolError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: EmptyPoolError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: EmptyPoolError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: EmptyPoolError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: FullPoolError
  kind: class
  ns: urllib3.connectionpool
  description: Raised when we try to add a connection to a full pool in blocking mode.
  summary: Raised when we try to add a connection to a full pool in blocking mode
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: FullPoolError
  inherits_from:
  - <class 'urllib3.exceptions.PoolError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FullPoolError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FullPoolError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FullPoolError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: HostChangedError
  kind: class
  ns: urllib3.connectionpool
  description: Raised when an existing pool gets a request for a foreign host.
  summary: Raised when an existing pool gets a request for a foreign host
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: retries
    default: '3'
    rest: false
  - type: HostChangedError
  inherits_from:
  - <class 'urllib3.exceptions.RequestError'>
  - <class 'urllib3.exceptions.PoolError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: HostChangedError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: HostChangedError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HostChangedError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InsecureRequestWarning
  kind: class
  ns: urllib3.connectionpool
  description: Warned when making an unverified HTTPS request.
  summary: Warned when making an unverified HTTPS request
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.SecurityWarning'>
  - <class 'urllib3.exceptions.HTTPWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InsecureRequestWarning.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InsecureRequestWarning.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InsecureRequestWarning.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: LocationValueError
  kind: class
  ns: urllib3.connectionpool
  description: Raised when there is something wrong with a given URL input.
  summary: Raised when there is something wrong with a given URL input
  signatures: null
  inherits_from:
  - <class 'ValueError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: LocationValueError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: LocationValueError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LocationValueError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: MaxRetryError
  kind: class
  ns: urllib3.connectionpool
  description: |-
    Raised when the maximum number of retries is exceeded.

    :param pool: The connection pool
    :type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`
    :param str url: The requested Url
    :param reason: The underlying error
    :type reason: :class:`Exception`
  summary: Raised when the maximum number of retries is exceeded
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: reason
    default: None
    rest: false
  - type: MaxRetryError
  inherits_from:
  - <class 'urllib3.exceptions.RequestError'>
  - <class 'urllib3.exceptions.PoolError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: MaxRetryError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: MaxRetryError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MaxRetryError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProtocolError
  kind: class
  ns: urllib3.connectionpool
  description: Raised when something unexpected happens mid-request/response.
  summary: Raised when something unexpected happens mid-request/response
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ProtocolError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProtocolError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProtocolError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ReadTimeoutError
  kind: class
  ns: urllib3.connectionpool
  description: Raised when a socket timeout occurs while receiving data from a server
  summary: Raised when a socket timeout occurs while receiving data from a server
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: ReadTimeoutError
  inherits_from:
  - <class 'urllib3.exceptions.TimeoutError'>
  - <class 'urllib3.exceptions.RequestError'>
  - <class 'urllib3.exceptions.PoolError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ReadTimeoutError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ReadTimeoutError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ReadTimeoutError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestMethods
  kind: class
  ns: urllib3.connectionpool
  description: |-
    Convenience mixin for classes who implement a :meth:`urlopen` method, such
    as :class:`urllib3.HTTPConnectionPool` and
    :class:`urllib3.PoolManager`.

    Provides behavior for making common types of HTTP request methods and
    decides which type of request field encoding to use.

    Specifically,

    :meth:`.request_encode_url` is for sending requests whose fields are
    encoded in the URL (such as GET, HEAD, DELETE).

    :meth:`.request_encode_body` is for sending requests whose fields are
    encoded in the *body* of the request using multipart or www-form-urlencoded
    (such as for POST, PUT, PATCH).

    :meth:`.request` is for making any kind of request, it will look up the
    appropriate encoding format and use one of the above two methods to make
    the request.

    Initializer parameters:

    :param headers:
        Headers to include with all requests, unless other headers are given
        explicitly.
  summary: Convenience mixin for classes who implement a :meth:`urlopen` method, such
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: RequestMethods
  inherits_from: null
- name: RequestMethods.request
  kind: method
  ns: urllib3.connectionpool
  description: |-
    Make a request using :meth:`urlopen` with the appropriate encoding of
    ``fields`` based on the ``method`` used.

    This is a convenience method that requires the least amount of manual
    effort. It can be used in most situations, while still having the
    option to drop down to more specific methods when necessary, such as
    :meth:`request_encode_url`, :meth:`request_encode_body`,
    or even the lowest level :meth:`urlopen`.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param body:
        Data to send in the request body, either :class:`str`, :class:`bytes`,
        an iterable of :class:`str`/:class:`bytes`, or a file-like object.

    :param fields:
        Data to encode and send in the request body.  Values are processed
        by :func:`urllib.parse.urlencode`.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param json:
        Data to encode and send as JSON with UTF-encoded in the request body.
        The ``"Content-Type"`` header will be set to ``"application/json"``
        unless specified otherwise.
  summary: Make a request using :meth:`urlopen` with the appropriate encoding of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: json
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: RequestMethods.request_encode_body
  kind: method
  ns: urllib3.connectionpool
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the body. This is useful for request methods like POST, PUT, PATCH, etc.

    When ``encode_multipart=True`` (default), then
    :func:`urllib3.encode_multipart_formdata` is used to encode
    the payload with the appropriate content type. Otherwise
    :func:`urllib.parse.urlencode` is used with the
    'application/x-www-form-urlencoded' content type.

    Multipart encoding must be used when posting files, and it's reasonably
    safe to use it in other times too. However, it may break request
    signing, such as with OAuth.

    Supports an optional ``fields`` parameter of key/value strings AND
    key/filetuple. A filetuple is a (filename, data, MIME type) tuple where
    the MIME type is optional. For example::

        fields = {
            'foo': 'bar',
            'fakefile': ('foofile.txt', 'contents of foofile'),
            'realfile': ('barfile.txt', open('realfile').read()),
            'typedfile': ('bazfile.bin', open('bazfile').read(),
                          'image/jpeg'),
            'nonamefile': 'contents of nonamefile field',
        }

    When uploading a file, providing a filename (the first parameter of the
    tuple) is optional but recommended to best mimic behavior of browsers.

    Note that if ``headers`` are supplied, the 'Content-Type' header will
    be overwritten because it depends on the dynamic random boundary string
    which is used to compose the body of the request. The random boundary
    string can be explicitly set with the ``multipart_boundary`` parameter.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.

    :param encode_multipart:
        If True, encode the ``fields`` using the multipart/form-data MIME
        format.

    :param multipart_boundary:
        If not specified, then a random boundary will be generated using
        :func:`urllib3.filepost.choose_boundary`.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: encode_multipart
    default: 'True'
    rest: false
  - kind: positional
    name: multipart_boundary
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: RequestMethods.request_encode_url
  kind: method
  ns: urllib3.connectionpool
  description: |-
    Make a request using :meth:`urlopen` with the ``fields`` encoded in
    the url. This is useful for request methods like GET, HEAD, DELETE, etc.

    :param method:
        HTTP request method (such as GET, POST, PUT, etc.)

    :param url:
        The URL to perform the request on.

    :param fields:
        Data to encode and send in the request body.

    :param headers:
        Dictionary of custom headers to send, such as User-Agent,
        If-None-Match, etc. If None, pool headers are used. If provided,
        these headers completely replace any pool-specific headers.
  summary: Make a request using :meth:`urlopen` with the ``fields`` encoded in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: fields
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: RequestMethods.urlopen
  kind: method
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: method
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: body
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: encode_multipart
    default: 'True'
    rest: false
  - kind: positional
    name: multipart_boundary
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLError
  kind: class
  ns: urllib3.connectionpool
  description: Raised when SSL certificate fails in an HTTPS connection.
  summary: Raised when SSL certificate fails in an HTTPS connection
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SSLError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SSLError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TimeoutError
  kind: class
  ns: urllib3.connectionpool
  description: |-
    Raised when a socket timeout error occurs.

    Catching this error will catch both :exc:`ReadTimeoutErrors
    <ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.
  summary: Raised when a socket timeout error occurs
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TimeoutError.add_note
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TimeoutError.args
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TimeoutError.with_traceback
  kind: callable
  ns: urllib3.connectionpool
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TracebackType
  kind: class
  ns: urllib3.connectionpool
  description: |-
    TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
    --

    Create a new traceback object.
  summary: TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
  signatures: null
  inherits_from: null
- name: TracebackType.tb_frame
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType.tb_lasti
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType.tb_lineno
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType.tb_next
  kind: property
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: annotations
  kind: const
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: connection_from_url
  kind: function
  ns: urllib3.connectionpool
  description: |-
    Given a url, return an :class:`.ConnectionPool` instance of its host.

    This is a shortcut for not having to parse out the scheme, host, and port
    of the url before creating an :class:`.ConnectionPool` instance.

    :param url:
        Absolute URL string that must include the scheme. Port is optional.

    :param \**kw:
        Passes additional parameters to the constructor of the appropriate
        :class:`.ConnectionPool`. Useful for specifying things like
        timeout, maxsize, headers, etc.

    Example::

        >>> conn = connection_from_url('http://google.com/')
        >>> r = conn.request('GET', '/')
  summary: Given a url, return an :class:`
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: connection_requires_http_tunnel
  kind: function
  ns: urllib3.connectionpool
  description: |-
    Returns True if the connection requires an HTTP CONNECT through the proxy.

    :param URL proxy_url:
        URL of the proxy.
    :param ProxyConfig proxy_config:
        Proxy configuration from poolmanager.py
    :param str destination_scheme:
        The scheme of the destination. (i.e https, http, etc)
  summary: Returns True if the connection requires an HTTP CONNECT through the proxy
  signatures:
  - kind: positional
    name: proxy_url
    default: None
    rest: false
  - kind: positional
    name: proxy_config
    default: None
    rest: false
  - kind: positional
    name: destination_scheme
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: is_connection_dropped
  kind: function
  ns: urllib3.connectionpool
  description: |-
    Returns True if the connection is dropped and should be closed.
    :param conn: :class:`urllib3.connection.HTTPConnection` object.
  summary: Returns True if the connection is dropped and should be closed
  signatures:
  - kind: positional
    name: conn
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: log
  kind: const
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: normalize_host
  kind: function
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: host
    default: null
    rest: false
  - kind: positional
    name: scheme
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: parse_url
  kind: function
  ns: urllib3.connectionpool
  description: |-
    Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is
    performed to parse incomplete urls. Fields not provided will be None.
    This parser is RFC 3986 and RFC 6874 compliant.

    The parser logic and helper functions are based heavily on
    work done in the ``rfc3986`` module.

    :param str url: URL to parse into a :class:`.Url` namedtuple.

    Partly backwards-compatible with :mod:`urllib.parse`.

    Example:

    .. code-block:: python

        import urllib3

        print( urllib3.util.parse_url('http://google.com/mail/'))
        # Url(scheme='http', host='google.com', port=None, path='/mail/', ...)

        print( urllib3.util.parse_url('google.com:80'))
        # Url(scheme=None, host='google.com', port=80, path=None, ...)

        print( urllib3.util.parse_url('/foo?bar'))
        # Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)
  summary: Given a url, return a parsed :class:`
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: port_by_scheme
  kind: const
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: set_file_position
  kind: function
  ns: urllib3.connectionpool
  description: |-
    If a position is provided, move file to that point.
    Otherwise, we'll attempt to record a position for future use.
  summary: If a position is provided, move file to that point
  signatures:
  - kind: positional
    name: body
    default: null
    rest: false
  - kind: positional
    name: pos
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: to_str
  kind: function
  ns: urllib3.connectionpool
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: x
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: urllib3.contrib
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: urllib3.exceptions
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BodyNotHttplibCompatible
  kind: class
  ns: urllib3.exceptions
  description: |-
    Body should be :class:`http.client.HTTPResponse` like
    (have an fp attribute which returns raw chunks) for read_chunked().
  summary: Body should be :class:`http
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BodyNotHttplibCompatible.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BodyNotHttplibCompatible.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BodyNotHttplibCompatible.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DecodeError
  kind: class
  ns: urllib3.exceptions
  description: Raised when automatic decoding based on Content-Type fails.
  summary: Raised when automatic decoding based on Content-Type fails
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DecodeError.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DecodeError.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DecodeError.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: DependencyWarning
  kind: class
  ns: urllib3.exceptions
  description: |-
    Warned when an attempt is made to import a module with missing optional
    dependencies.
  summary: Warned when an attempt is made to import a module with missing optional
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: DependencyWarning.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: DependencyWarning.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DependencyWarning.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: HTTPError
  kind: class
  ns: urllib3.exceptions
  description: Base exception used by this module.
  summary: Base exception used by this module
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: HTTPError.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: HTTPError.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPError.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: HTTPWarning
  kind: class
  ns: urllib3.exceptions
  description: Base warning used by this module.
  summary: Base warning used by this module
  signatures: null
  inherits_from:
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: HTTPWarning.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: HTTPWarning.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: HTTPWarning.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: IncompleteRead
  kind: class
  ns: urllib3.exceptions
  description: |-
    Response length doesn't match expected Content-Length

    Subclass of :class:`http.client.IncompleteRead` to allow int value
    for ``partial`` to avoid creating large objects on streamed reads.
  summary: Response length doesn't match expected Content-Length
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: partial
    default: null
    rest: false
  - kind: positional
    name: expected
    default: null
    rest: false
  - type: IncompleteRead
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'http.client.IncompleteRead'>
  - <class 'http.client.HTTPException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: IncompleteRead.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: IncompleteRead.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: IncompleteRead.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InsecurePlatformWarning
  kind: class
  ns: urllib3.exceptions
  description: Warned when certain TLS/SSL configuration is not available on a platform.
  summary: Warned when certain TLS/SSL configuration is not available on a platform
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.SecurityWarning'>
  - <class 'urllib3.exceptions.HTTPWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InsecurePlatformWarning.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InsecurePlatformWarning.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InsecurePlatformWarning.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidChunkLength
  kind: class
  ns: urllib3.exceptions
  description: Invalid chunk length in a chunked response.
  summary: Invalid chunk length in a chunked response
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: response
    default: null
    rest: false
  - kind: positional
    name: length
    default: null
    rest: false
  - type: InvalidChunkLength
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'http.client.IncompleteRead'>
  - <class 'http.client.HTTPException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InvalidChunkLength.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidChunkLength.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InvalidChunkLength.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidHeader
  kind: class
  ns: urllib3.exceptions
  description: The header provided was somehow invalid.
  summary: The header provided was somehow invalid
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InvalidHeader.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidHeader.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InvalidHeader.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: LocationParseError
  kind: class
  ns: urllib3.exceptions
  description: Raised when get_host or similar fails to parse the URL input.
  summary: Raised when get_host or similar fails to parse the URL input
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: location
    default: null
    rest: false
  - type: LocationParseError
  inherits_from:
  - <class 'urllib3.exceptions.LocationValueError'>
  - <class 'ValueError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: LocationParseError.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: LocationParseError.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: LocationParseError.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: MessageDefect
  kind: class
  ns: urllib3.exceptions
  description: Base class for a message defect.
  summary: Base class for a message defect
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: line
    default: None
    rest: false
  - type: MessageDefect
  inherits_from:
  - <class 'ValueError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: MessageDefect.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: MessageDefect.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MessageDefect.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: NotOpenSSLWarning
  kind: class
  ns: urllib3.exceptions
  description: Warned when using unsupported SSL library
  summary: Warned when using unsupported SSL library
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.SecurityWarning'>
  - <class 'urllib3.exceptions.HTTPWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NotOpenSSLWarning.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NotOpenSSLWarning.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NotOpenSSLWarning.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: PoolError
  kind: class
  ns: urllib3.exceptions
  description: Base exception for errors caused within a pool.
  summary: Base exception for errors caused within a pool
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: PoolError
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: PoolError.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: PoolError.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PoolError.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProxySchemeUnknown
  kind: class
  ns: urllib3.exceptions
  description: ProxyManager does not support the supplied scheme
  summary: ProxyManager does not support the supplied scheme
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: scheme
    default: null
    rest: false
  - type: ProxySchemeUnknown
  inherits_from:
  - <class 'AssertionError'>
  - <class 'urllib3.exceptions.URLSchemeUnknown'>
  - <class 'urllib3.exceptions.LocationValueError'>
  - <class 'ValueError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ProxySchemeUnknown.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProxySchemeUnknown.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProxySchemeUnknown.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProxySchemeUnsupported
  kind: class
  ns: urllib3.exceptions
  description: Fetching HTTPS resources through HTTPS proxies is unsupported
  summary: Fetching HTTPS resources through HTTPS proxies is unsupported
  signatures: null
  inherits_from:
  - <class 'ValueError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ProxySchemeUnsupported.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ProxySchemeUnsupported.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProxySchemeUnsupported.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestError
  kind: class
  ns: urllib3.exceptions
  description: Base exception for PoolErrors that have associated URLs.
  summary: Base exception for PoolErrors that have associated URLs
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pool
    default: null
    rest: false
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: RequestError
  inherits_from:
  - <class 'urllib3.exceptions.PoolError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: RequestError.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: RequestError.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RequestError.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ResponseError
  kind: class
  ns: urllib3.exceptions
  description: Used as a container for an error reason supplied in a MaxRetryError.
  summary: Used as a container for an error reason supplied in a MaxRetryError
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ResponseError.GENERIC_ERROR
  kind: property
  ns: urllib3.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ResponseError.SPECIFIC_ERROR
  kind: property
  ns: urllib3.exceptions
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ResponseError.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ResponseError.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseError.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ResponseNotChunked
  kind: class
  ns: urllib3.exceptions
  description: Response needs to be chunked in order to read it as chunks.
  summary: Response needs to be chunked in order to read it as chunks
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.ProtocolError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'ValueError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ResponseNotChunked.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ResponseNotChunked.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ResponseNotChunked.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: SecurityWarning
  kind: class
  ns: urllib3.exceptions
  description: Warned when performing security reducing actions
  summary: Warned when performing security reducing actions
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPWarning'>
  - <class 'Warning'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: SecurityWarning.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: SecurityWarning.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SecurityWarning.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: TimeoutStateError
  kind: class
  ns: urllib3.exceptions
  description: Raised when passing an invalid state to a timeout
  summary: Raised when passing an invalid state to a timeout
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: TimeoutStateError.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: TimeoutStateError.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TimeoutStateError.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: URLSchemeUnknown
  kind: class
  ns: urllib3.exceptions
  description: Raised when a URL input has an unsupported scheme.
  summary: Raised when a URL input has an unsupported scheme
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: scheme
    default: null
    rest: false
  - type: URLSchemeUnknown
  inherits_from:
  - <class 'urllib3.exceptions.LocationValueError'>
  - <class 'ValueError'>
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: URLSchemeUnknown.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: URLSchemeUnknown.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: URLSchemeUnknown.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: UnrewindableBodyError
  kind: class
  ns: urllib3.exceptions
  description: urllib3 encountered an error when trying to rewind a body
  summary: urllib3 encountered an error when trying to rewind a body
  signatures: null
  inherits_from:
  - <class 'urllib3.exceptions.HTTPError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: UnrewindableBodyError.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: UnrewindableBodyError.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UnrewindableBodyError.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: annotations
  kind: const
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: httplib_IncompleteRead
  kind: class
  ns: urllib3.exceptions
  description: Common base class for all non-exit exceptions.
  summary: Common base class for all non-exit exceptions
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: partial
    default: null
    rest: false
  - kind: positional
    name: expected
    default: None
    rest: false
  - type: IncompleteRead
  inherits_from:
  - <class 'http.client.HTTPException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: httplib_IncompleteRead.add_note
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: httplib_IncompleteRead.args
  kind: property
  ns: urllib3.exceptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: httplib_IncompleteRead.with_traceback
  kind: callable
  ns: urllib3.exceptions
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: urllib3.fields
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: RequestField
  kind: class
  ns: urllib3.fields
  description: |-
    A data container for request body parameters.

    :param name:
        The name of this request field. Must be unicode.
    :param data:
        The data/value body.
    :param filename:
        An optional filename of the request field. Must be unicode.
    :param headers:
        An optional dict-like object of headers to initially use for the field.

    .. versionchanged:: 2.0.0
        The ``header_formatter`` parameter is deprecated and will
        be removed in urllib3 v2.1.0.
  summary: A data container for request body parameters
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - kind: positional
    name: headers
    default: None
    rest: false
  - kind: positional
    name: header_formatter
    default: None
    rest: false
  - type: RequestField
  inherits_from: null
- name: RequestField.from_tuples
  kind: function
  ns: urllib3.fields
  description: |-
    A :class:`~urllib3.fields.RequestField` factory from old-style tuple parameters.

    Supports constructing :class:`~urllib3.fields.RequestField` from
    parameter of key/value strings AND key/filetuple. A filetuple is a
    (filename, data, MIME type) tuple where the MIME type is optional.
    For example::

        'foo': 'bar',
        'fakefile': ('foofile.txt', 'contents of foofile'),
        'realfile': ('barfile.txt', open('realfile').read()),
        'typedfile': ('bazfile.bin', open('bazfile').read(), 'image/jpeg'),
        'nonamefile': 'contents of nonamefile field',

    Field names and filenames must be unicode.
  summary: A :class:`~urllib3
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: fieldname
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: header_formatter
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: RequestField.make_multipart
  kind: method
  ns: urllib3.fields
  description: |-
    Makes this request field into a multipart request field.

    This method overrides "Content-Disposition", "Content-Type" and
    "Content-Location" headers to the request parameter.

    :param content_disposition:
        The 'Content-Disposition' of the request body. Defaults to 'form-data'
    :param content_type:
        The 'Content-Type' of the request body.
    :param content_location:
        The 'Content-Location' of the request body.
  summary: Makes this request field into a multipart request field
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: content_disposition
    default: None
    rest: false
  - kind: positional
    name: content_type
    default: None
    rest: false
  - kind: positional
    name: content_location
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: RequestField.render_headers
  kind: method
  ns: urllib3.fields
  description: Renders the headers for this request field.
  summary: Renders the headers for this request field
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: annotations
  kind: const
  ns: urllib3.fields
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: format_header_param
  kind: function
  ns: urllib3.fields
  description: |-
    .. deprecated:: 2.0.0
    Renamed to :func:`format_multipart_header_param`. Will be
    removed in urllib3 v2.1.0.
  summary: ''
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: format_header_param_html5
  kind: function
  ns: urllib3.fields
  description: |-
    .. deprecated:: 2.0.0
    Renamed to :func:`format_multipart_header_param`. Will be
    removed in urllib3 v2.1.0.
  summary: ''
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: format_header_param_rfc2231
  kind: function
  ns: urllib3.fields
  description: |-
    Helper function to format and quote a single header parameter using the
    strategy defined in RFC 2231.

    Particularly useful for header parameters which might contain
    non-ASCII values, like file names. This follows
    `RFC 2388 Section 4.4 <https://tools.ietf.org/html/rfc2388#section-4.4>`_.

    :param name:
        The name of the parameter, a string expected to be ASCII only.
    :param value:
        The value of the parameter, provided as ``bytes`` or `str``.
    :returns:
        An RFC-2231-formatted unicode string.

    .. deprecated:: 2.0.0
        Will be removed in urllib3 v2.1.0. This is not valid for
        ``multipart/form-data`` header parameters.
  summary: Helper function to format and quote a single header parameter using the
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: format_multipart_header_param
  kind: function
  ns: urllib3.fields
  description: |-
    Format and quote a single multipart header parameter.

    This follows the `WHATWG HTML Standard`_ as of 2021/06/10, matching
    the behavior of current browser and curl versions. Values are
    assumed to be UTF-8. The ``\n``, ``\r``, and ``"`` characters are
    percent encoded.

    .. _WHATWG HTML Standard:
        https://html.spec.whatwg.org/multipage/
        form-control-infrastructure.html#multipart-form-data

    :param name:
        The name of the parameter, an ASCII-only ``str``.
    :param value:
        The value of the parameter, a ``str`` or UTF-8 encoded
        ``bytes``.
    :returns:
        A string ``name="value"`` with the escaped value.

    .. versionchanged:: 2.0.0
        Matches the WHATWG HTML Standard as of 2021/06/10. Control
        characters are no longer percent encoded.

    .. versionchanged:: 2.0.0
        Renamed from ``format_header_param_html5`` and
        ``format_header_param``. The old names will be removed in
        urllib3 v2.1.0.
  summary: Format and quote a single multipart header parameter
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: guess_content_type
  kind: function
  ns: urllib3.fields
  description: |-
    Guess the "Content-Type" of a file.

    :param filename:
        The filename to guess the "Content-Type" of using :mod:`mimetypes`.
    :param default:
        If no "Content-Type" can be guessed, default to `default`.
  summary: Guess the "Content-Type" of a file
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: default
    default: application/octet-stream
    rest: false
  - type: '?'
  inherits_from: null
- name: urllib3.filepost
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BytesIO
  kind: class
  ns: urllib3.filepost
  description: Buffered I/O implementation using an in-memory bytes buffer.
  summary: Buffered I/O implementation using an in-memory bytes buffer
  signatures:
  - kind: positional
    name: initial_bytes
    default: b''
    rest: false
  - type: BytesIO
  inherits_from:
  - <class '_io._BufferedIOBase'>
  - <class '_io._IOBase'>
- name: BytesIO.close
  kind: callable
  ns: urllib3.filepost
  description: Disable all I/O operations.
  summary: Disable all I/O operations
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.closed
  kind: property
  ns: urllib3.filepost
  description: True if the file is closed.
  summary: True if the file is closed
  signatures: null
  inherits_from: null
- name: BytesIO.detach
  kind: callable
  ns: urllib3.filepost
  description: |-
    Disconnect this buffer from its underlying raw stream and return it.

    After the raw stream has been detached, the buffer is in an unusable
    state.
  summary: Disconnect this buffer from its underlying raw stream and return it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.fileno
  kind: callable
  ns: urllib3.filepost
  description: |-
    Returns underlying file descriptor if one exists.

    OSError is raised if the IO object does not use a file descriptor.
  summary: Returns underlying file descriptor if one exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.flush
  kind: callable
  ns: urllib3.filepost
  description: Does nothing.
  summary: Does nothing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.getbuffer
  kind: callable
  ns: urllib3.filepost
  description: Get a read-write view over the contents of the BytesIO object.
  summary: Get a read-write view over the contents of the BytesIO object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.getvalue
  kind: callable
  ns: urllib3.filepost
  description: Retrieve the entire contents of the BytesIO object.
  summary: Retrieve the entire contents of the BytesIO object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.isatty
  kind: callable
  ns: urllib3.filepost
  description: |-
    Always returns False.

    BytesIO objects are not connected to a TTY-like device.
  summary: Always returns False
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.read
  kind: callable
  ns: urllib3.filepost
  description: |-
    Read at most size bytes, returned as a bytes object.

    If the size argument is negative, read until EOF is reached.
    Return an empty bytes object at EOF.
  summary: Read at most size bytes, returned as a bytes object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.read1
  kind: callable
  ns: urllib3.filepost
  description: |-
    Read at most size bytes, returned as a bytes object.

    If the size argument is negative or omitted, read until EOF is reached.
    Return an empty bytes object at EOF.
  summary: Read at most size bytes, returned as a bytes object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readable
  kind: callable
  ns: urllib3.filepost
  description: Returns True if the IO object can be read.
  summary: Returns True if the IO object can be read
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readinto
  kind: callable
  ns: urllib3.filepost
  description: |-
    Read bytes into buffer.

    Returns number of bytes read (0 for EOF), or None if the object
    is set not to block and has no data to read.
  summary: Read bytes into buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: buffer
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readinto1
  kind: callable
  ns: urllib3.filepost
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: buffer
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readline
  kind: callable
  ns: urllib3.filepost
  description: |-
    Next line from the file, as a bytes object.

    Retain newline.  A non-negative size argument limits the maximum
    number of bytes to return (an incomplete line may be returned then).
    Return an empty bytes object at EOF.
  summary: Next line from the file, as a bytes object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.readlines
  kind: callable
  ns: urllib3.filepost
  description: |-
    List of bytes objects, each a line from the file.

    Call readline() repeatedly and return a list of the lines so read.
    The optional size argument, if given, is an approximate bound on the
    total number of bytes in the lines returned.
  summary: List of bytes objects, each a line from the file
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.seek
  kind: callable
  ns: urllib3.filepost
  description: |-
    Change stream position.

    Seek to byte offset pos relative to position indicated by whence:
         0  Start of stream (the default).  pos should be >= 0;
         1  Current position - pos may be negative;
         2  End of stream - pos usually negative.
    Returns the new absolute position.
  summary: Change stream position
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: pos
    default: null
    rest: false
  - kind: positional
    name: whence
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.seekable
  kind: callable
  ns: urllib3.filepost
  description: Returns True if the IO object can be seeked.
  summary: Returns True if the IO object can be seeked
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.tell
  kind: callable
  ns: urllib3.filepost
  description: Current file position, an integer.
  summary: Current file position, an integer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.truncate
  kind: callable
  ns: urllib3.filepost
  description: |-
    Truncate the file to at most size bytes.

    Size defaults to the current file position, as returned by tell().
    The current file position is unchanged.  Returns the new size.
  summary: Truncate the file to at most size bytes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: size
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.writable
  kind: callable
  ns: urllib3.filepost
  description: Returns True if the IO object can be written.
  summary: Returns True if the IO object can be written
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.write
  kind: callable
  ns: urllib3.filepost
  description: |-
    Write bytes to file.

    Return the number of bytes written.
  summary: Write bytes to file
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: b
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesIO.writelines
  kind: callable
  ns: urllib3.filepost
  description: |-
    Write lines to the file.

    Note that newlines are not added.  lines can be any iterable object
    producing bytes-like objects. This is equivalent to calling write() for
    each element.
  summary: Write lines to the file
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: lines
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: annotations
  kind: const
  ns: urllib3.filepost
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: choose_boundary
  kind: function
  ns: urllib3.filepost
  description: Our embarrassingly-simple replacement for mimetools.choose_boundary.
  summary: Our embarrassingly-simple replacement for mimetools
  signatures:
  - type: '?'
  inherits_from: null
- name: encode_multipart_formdata
  kind: function
  ns: urllib3.filepost
  description: |-
    Encode a dictionary of ``fields`` using the multipart/form-data MIME format.

    :param fields:
        Dictionary of fields or list of (key, :class:`~urllib3.fields.RequestField`).
        Values are processed by :func:`urllib3.fields.RequestField.from_tuples`.

    :param boundary:
        If not specified, then a random boundary will be generated using
        :func:`urllib3.filepost.choose_boundary`.
  summary: Encode a dictionary of ``fields`` using the multipart/form-data MIME format
  signatures:
  - kind: positional
    name: fields
    default: null
    rest: false
  - kind: positional
    name: boundary
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: iter_field_objects
  kind: function
  ns: urllib3.filepost
  description: |-
    Iterate over fields.

    Supports list of (k, v) tuples and dicts, and lists of
    :class:`~urllib3.fields.RequestField`.
  summary: Iterate over fields
  signatures:
  - kind: positional
    name: fields
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: writer
  kind: class
  ns: urllib3.filepost
  description: |-
    Defines the interface for stateless encoders/decoders.

    The .encode()/.decode() methods may use different error
    handling schemes by providing the errors argument. These
    string values are predefined:

     'strict' - raise a ValueError error (or a subclass)
     'ignore' - ignore the character and continue with the next
     'replace' - replace with a suitable replacement character;
                Python will use the official U+FFFD REPLACEMENT
                CHARACTER for the builtin Unicode codecs on
                decoding and '?' on encoding.
     'surrogateescape' - replace with private code points U+DCnn.
     'xmlcharrefreplace' - Replace with the appropriate XML
                           character reference (only for encoding).
     'backslashreplace'  - Replace with backslashed escape sequences.
     'namereplace'       - Replace with \N{...} escape sequences
                           (only for encoding).

    The set of allowed values can be extended via register_error.
  summary: Defines the interface for stateless encoders/decoders
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: stream
    default: null
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - type: StreamWriter
  inherits_from:
  - <class 'codecs.StreamWriter'>
  - <class 'codecs.Codec'>
- name: writer.decode
  kind: method
  ns: urllib3.filepost
  description: |-
    Decodes the object input and returns a tuple (output
    object, length consumed).

    input must be an object which provides the bf_getreadbuf
    buffer slot. Python strings, buffer objects and memory
    mapped files are examples of objects providing this slot.

    errors defines the error handling to apply. It defaults to
    'strict' handling.

    The method may not store state in the Codec instance. Use
    StreamReader for codecs which have to keep state in order to
    make decoding efficient.

    The decoder must be able to handle zero length input and
    return an empty object of the output object type in this
    situation.
  summary: Decodes the object input and returns a tuple (output
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: input
    default: null
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - type: '?'
  inherits_from: null
- name: writer.reset
  kind: method
  ns: urllib3.filepost
  description: |-
    Resets the codec buffers used for keeping internal state.

    Calling this method should ensure that the data on the
    output is put into a clean state, that allows appending
    of new fresh data without having to rescan the whole
    stream to recover state.
  summary: Resets the codec buffers used for keeping internal state
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: writer.seek
  kind: method
  ns: urllib3.filepost
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: offset
    default: null
    rest: false
  - kind: positional
    name: whence
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: writer.write
  kind: method
  ns: urllib3.filepost
  description: "Writes the object's contents encoded to self.stream.\n        "
  summary: Writes the object's contents encoded to self
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: object
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: writer.writelines
  kind: method
  ns: urllib3.filepost
  description: |-
    Writes the concatenated list of strings to the stream
    using .write().
  summary: Writes the concatenated list of strings to the stream
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: list
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: urllib3.poolmanager
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: proxy_from_url
  kind: function
  ns: urllib3.poolmanager
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: urllib3.response
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BrotliDecoder
  kind: class
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: BrotliDecoder
  inherits_from:
  - <class 'urllib3.response.ContentDecoder'>
- name: BrotliDecoder.decompress
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BrotliDecoder.flush
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesQueueBuffer
  kind: class
  ns: urllib3.response
  description: |-
    Memory-efficient bytes buffer

    To return decoded data in read() and still follow the BufferedIOBase API, we need a
    buffer to always return the correct amount of bytes.

    This buffer should be filled using calls to put()

    Our maximum memory usage is determined by the sum of the size of:

     * self.buffer, which contains the full data
     * the largest chunk that we will copy in get()

    The worst case scenario is a single chunk, in which case we'll make a full copy of
    the data inside get().
  summary: Memory-efficient bytes buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: BytesQueueBuffer
  inherits_from: null
- name: BytesQueueBuffer.get
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesQueueBuffer.get_all
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BytesQueueBuffer.put
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentDecoder
  kind: class
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - type: ContentDecoder
  inherits_from: null
- name: ContentDecoder.decompress
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ContentDecoder.flush
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DeflateDecoder
  kind: class
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: DeflateDecoder
  inherits_from:
  - <class 'urllib3.response.ContentDecoder'>
- name: DeflateDecoder.decompress
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DeflateDecoder.flush
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: GzipDecoder
  kind: class
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: GzipDecoder
  inherits_from:
  - <class 'urllib3.response.ContentDecoder'>
- name: GzipDecoder.decompress
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: GzipDecoder.flush
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: GzipDecoderState
  kind: class
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - type: GzipDecoderState
  inherits_from: null
- name: GzipDecoderState.FIRST_MEMBER
  kind: property
  ns: urllib3.response
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: GzipDecoderState.OTHER_MEMBERS
  kind: property
  ns: urllib3.response
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: GzipDecoderState.SWALLOW_DATA
  kind: property
  ns: urllib3.response
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: MultiDecoder
  kind: class
  ns: urllib3.response
  description: |-
    From RFC7231:
    If one or more encodings have been applied to a representation, the
    sender that applied the encodings MUST generate a Content-Encoding
    header field that lists the content codings in the order in which
    they were applied.
  summary: 'From RFC7231:'
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: modes
    default: null
    rest: false
  - type: MultiDecoder
  inherits_from:
  - <class 'urllib3.response.ContentDecoder'>
- name: MultiDecoder.decompress
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiDecoder.flush
  kind: method
  ns: urllib3.response
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: annotations
  kind: const
  ns: urllib3.response
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: contextmanager
  kind: function
  ns: urllib3.response
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: is_fp_closed
  kind: function
  ns: urllib3.response
  description: |-
    Checks whether a given file-like object is closed.

    :param obj:
        The file-like object to check.
  summary: Checks whether a given file-like object is closed
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: is_response_to_head
  kind: function
  ns: urllib3.response
  description: |-
    Checks whether the request of a response has been a HEAD-request.

    :param http.client.HTTPResponse response:
        Response to check if the originating request
        used 'HEAD' as a method.
  summary: Checks whether the request of a response has been a HEAD-request
  signatures:
  - kind: positional
    name: response
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: log
  kind: const
  ns: urllib3.response
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: zstd
  kind: const
  ns: urllib3.response
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: urllib3.util
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: IS_PYOPENSSL
  kind: const
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext
  kind: class
  ns: urllib3.util
  description: |-
    An SSLContext holds various SSL-related configuration options and
    data, such as certificates and possibly a private key.
  summary: An SSLContext holds various SSL-related configuration options and
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: protocol
    default: None
    rest: false
  - type: SSLContext
  inherits_from:
  - <class '_ssl._SSLContext'>
- name: SSLContext.cert_store_stats
  kind: callable
  ns: urllib3.util
  description: |-
    Returns quantities of loaded X.509 certificates.

    X.509 certificates with a CA extension and certificate revocation lists
    inside the context's cert store.

    NOTE: Certificates in a capath directory aren't loaded unless they have
    been used at least once.
  summary: Returns quantities of loaded X
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.check_hostname
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.get_ca_certs
  kind: callable
  ns: urllib3.util
  description: |-
    Returns a list of dicts with information of loaded CA certs.

    If the optional argument is True, returns a DER-encoded copy of the CA
    certificate.

    NOTE: Certificates in a capath directory aren't loaded unless they have
    been used at least once.
  summary: Returns a list of dicts with information of loaded CA certs
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: binary_form
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.get_ciphers
  kind: callable
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.hostname_checks_common_name
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.keylog_filename
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.load_cert_chain
  kind: callable
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: certfile
    default: null
    rest: false
  - kind: positional
    name: keyfile
    default: None
    rest: false
  - kind: positional
    name: password
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.load_default_certs
  kind: method
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: purpose
    default: Purpose.SERVER_AUTH
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.load_dh_params
  kind: callable
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: path
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.load_verify_locations
  kind: callable
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cafile
    default: None
    rest: false
  - kind: positional
    name: capath
    default: None
    rest: false
  - kind: positional
    name: cadata
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.maximum_version
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.minimum_version
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.num_tickets
  kind: property
  ns: urllib3.util
  description: Control the number of TLSv1.3 session tickets
  summary: Control the number of TLSv1
  signatures: null
  inherits_from: null
- name: SSLContext.options
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.post_handshake_auth
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.protocol
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.security_level
  kind: property
  ns: urllib3.util
  description: The current security level
  summary: The current security level
  signatures: null
  inherits_from: null
- name: SSLContext.session_stats
  kind: callable
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.set_alpn_protocols
  kind: method
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: alpn_protocols
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.set_ciphers
  kind: callable
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cipherlist
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.set_default_verify_paths
  kind: callable
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.set_ecdh_curve
  kind: callable
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.set_npn_protocols
  kind: method
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: npn_protocols
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.set_servername_callback
  kind: method
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: server_name_callback
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sni_callback
  kind: property
  ns: urllib3.util
  description: |-
    Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension.

    If the argument is None then the callback is disabled. The method is called
    with the SSLSocket, the server name as a string, and the SSLContext object.
    See RFC 6066 for details of the SNI extension.
  summary: Set a callback that will be called when a server name is provided by the SSL/TLS client in the SNI extension
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class
  kind: class
  ns: urllib3.util
  description: |-
    This class implements an interface on top of a low-level SSL object as
    implemented by OpenSSL. This object captures the state of an SSL connection
    but does not provide any network IO itself. IO needs to be performed
    through separate "BIO" objects which are OpenSSL's IO abstraction layer.

    This class does not have a public constructor. Instances are returned by
    ``SSLContext.wrap_bio``. This class is typically used by framework authors
    that want to implement asynchronous IO for SSL through memory buffers.

    When compared to ``SSLSocket``, this object lacks the following features:

     * Any form of network IO, including methods such as ``recv`` and ``send``.
     * The ``do_handshake_on_connect`` and ``suppress_ragged_eofs`` machinery.
  summary: This class implements an interface on top of a low-level SSL object as
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: SSLObject
  inherits_from: null
- name: SSLContext.sslobject_class.cipher
  kind: method
  ns: urllib3.util
  description: |-
    Return the currently selected cipher as a 3-tuple ``(name,
    ssl_version, secret_bits)``.
  summary: Return the currently selected cipher as a 3-tuple ``(name,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.compression
  kind: method
  ns: urllib3.util
  description: |-
    Return the current compression algorithm in use, or ``None`` if
    compression was not negotiated or not supported by one of the peers.
  summary: Return the current compression algorithm in use, or ``None`` if
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.context
  kind: property
  ns: urllib3.util
  description: The SSLContext that is currently in use.
  summary: The SSLContext that is currently in use
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.do_handshake
  kind: method
  ns: urllib3.util
  description: Start the SSL/TLS handshake.
  summary: Start the SSL/TLS handshake
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.get_channel_binding
  kind: method
  ns: urllib3.util
  description: |-
    Get channel binding data for current connection.  Raise ValueError
    if the requested `cb_type` is not supported.  Return bytes of the data
    or None if the data is not available (e.g. before the handshake).
  summary: Get channel binding data for current connection
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cb_type
    default: tls-unique
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.getpeercert
  kind: method
  ns: urllib3.util
  description: |-
    Returns a formatted version of the data in the certificate provided
    by the other end of the SSL channel.

    Return None if no certificate was provided, {} if a certificate was
    provided, but not validated.
  summary: Returns a formatted version of the data in the certificate provided
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: binary_form
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.pending
  kind: method
  ns: urllib3.util
  description: Return the number of bytes that can be read immediately.
  summary: Return the number of bytes that can be read immediately
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.read
  kind: method
  ns: urllib3.util
  description: |-
    Read up to 'len' bytes from the SSL object and return them.

    If 'buffer' is provided, read into this buffer and return the number of
    bytes read.
  summary: Read up to 'len' bytes from the SSL object and return them
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: len
    default: '1024'
    rest: false
  - kind: positional
    name: buffer
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.selected_alpn_protocol
  kind: method
  ns: urllib3.util
  description: |-
    Return the currently selected ALPN protocol as a string, or ``None``
    if a next protocol was not negotiated or if ALPN is not supported by one
    of the peers.
  summary: Return the currently selected ALPN protocol as a string, or ``None``
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.selected_npn_protocol
  kind: method
  ns: urllib3.util
  description: |-
    Return the currently selected NPN protocol as a string, or ``None``
    if a next protocol was not negotiated or if NPN is not supported by one
    of the peers.
  summary: Return the currently selected NPN protocol as a string, or ``None``
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.server_hostname
  kind: property
  ns: urllib3.util
  description: |-
    The currently set server hostname (for SNI), or ``None`` if no
    server hostname is set.
  summary: The currently set server hostname (for SNI), or ``None`` if no
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.server_side
  kind: property
  ns: urllib3.util
  description: Whether this is a server-side socket.
  summary: Whether this is a server-side socket
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.session
  kind: property
  ns: urllib3.util
  description: The SSLSession for client socket.
  summary: The SSLSession for client socket
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.session_reused
  kind: property
  ns: urllib3.util
  description: Was the client session reused during handshake
  summary: Was the client session reused during handshake
  signatures: null
  inherits_from: null
- name: SSLContext.sslobject_class.shared_ciphers
  kind: method
  ns: urllib3.util
  description: |-
    Return a list of ciphers shared by the client during the handshake or
    None if this is not a valid server connection.
  summary: Return a list of ciphers shared by the client during the handshake or
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.unwrap
  kind: method
  ns: urllib3.util
  description: Start the SSL shutdown handshake.
  summary: Start the SSL shutdown handshake
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.verify_client_post_handshake
  kind: method
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.version
  kind: method
  ns: urllib3.util
  description: "Return a string identifying the protocol version used by the\ncurrent SSL channel. "
  summary: Return a string identifying the protocol version used by the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslobject_class.write
  kind: method
  ns: urllib3.util
  description: |-
    Write 'data' to the SSL object and return the number of bytes
    written.

    The 'data' argument must support the buffer interface.
  summary: Write 'data' to the SSL object and return the number of bytes
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class
  kind: class
  ns: urllib3.util
  description: "This class implements a subtype of socket.socket that wraps\nthe underlying OS socket in an SSL context when necessary, and\nprovides read and write methods over that channel. "
  summary: This class implements a subtype of socket
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: SSLSocket
  inherits_from:
  - <class 'socket.socket'>
  - <class '_socket.socket'>
- name: SSLContext.sslsocket_class.accept
  kind: method
  ns: urllib3.util
  description: |-
    Accepts a new connection from a remote client, and returns
    a tuple containing that new connection wrapped with a server-side
    SSL channel, and the address of the remote client.
  summary: Accepts a new connection from a remote client, and returns
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.bind
  kind: callable
  ns: urllib3.util
  description: |-
    bind(address)

    Bind the socket to a local address.  For IP sockets, the address is a
    pair (host, port); the host must refer to the local host. For raw packet
    sockets the address is a tuple (ifname, proto [,pkttype [,hatype [,addr]]])
  summary: bind(address)
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.cipher
  kind: method
  ns: urllib3.util
  description: |-
    Return the currently selected cipher as a 3-tuple ``(name,
    ssl_version, secret_bits)``.
  summary: Return the currently selected cipher as a 3-tuple ``(name,
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.close
  kind: method
  ns: urllib3.util
  description: |-
    close()

    Close the socket.  It cannot be used after this call.
  summary: close()
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.compression
  kind: method
  ns: urllib3.util
  description: |-
    Return the current compression algorithm in use, or ``None`` if
    compression was not negotiated or not supported by one of the peers.
  summary: Return the current compression algorithm in use, or ``None`` if
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.connect
  kind: method
  ns: urllib3.util
  description: |-
    Connects to remote ADDR, and then wraps the connection in
    an SSL channel.
  summary: Connects to remote ADDR, and then wraps the connection in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: addr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.connect_ex
  kind: method
  ns: urllib3.util
  description: |-
    Connects to remote ADDR, and then wraps the connection in
    an SSL channel.
  summary: Connects to remote ADDR, and then wraps the connection in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: addr
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.context
  kind: property
  ns: urllib3.util
  description: The SSLContext that is currently in use.
  summary: The SSLContext that is currently in use
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.detach
  kind: method
  ns: urllib3.util
  description: |-
    detach() -> file descriptor

    Close the socket object without closing the underlying file descriptor.
    The object cannot be used after this call, but the file descriptor
    can be reused for other purposes.  The file descriptor is returned.
  summary: detach() -> file descriptor
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.do_handshake
  kind: method
  ns: urllib3.util
  description: Start the SSL/TLS handshake.
  summary: Start the SSL/TLS handshake
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: block
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.dup
  kind: method
  ns: urllib3.util
  description: |-
    dup() -> socket object

    Duplicate the socket. Return a new socket object connected to the same
    system resource. The new socket is non-inheritable.
  summary: dup() -> socket object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.family
  kind: property
  ns: urllib3.util
  description: "Read-only access to the address family for this socket.\n        "
  summary: Read-only access to the address family for this socket
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.fileno
  kind: callable
  ns: urllib3.util
  description: |-
    fileno() -> integer

    Return the integer file descriptor of the socket.
  summary: fileno() -> integer
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.get_channel_binding
  kind: method
  ns: urllib3.util
  description: |-
    Get channel binding data for current connection.  Raise ValueError
    if the requested `cb_type` is not supported.  Return bytes of the data
    or None if the data is not available (e.g. before the handshake).
  summary: Get channel binding data for current connection
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cb_type
    default: tls-unique
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.get_inheritable
  kind: method
  ns: urllib3.util
  description: Get the inheritable flag of the socket
  summary: Get the inheritable flag of the socket
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.getblocking
  kind: callable
  ns: urllib3.util
  description: |-
    getblocking()

    Returns True if socket is in blocking mode, or False if it
    is in non-blocking mode.
  summary: getblocking()
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.getpeercert
  kind: method
  ns: urllib3.util
  description: |-
    Returns a formatted version of the data in the certificate provided
    by the other end of the SSL channel.

    Return None if no certificate was provided, {} if a certificate was
    provided, but not validated.
  summary: Returns a formatted version of the data in the certificate provided
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: binary_form
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.getpeername
  kind: callable
  ns: urllib3.util
  description: |-
    getpeername() -> address info

    Return the address of the remote endpoint.  For IP sockets, the address
    info is a pair (hostaddr, port).
  summary: getpeername() -> address info
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.getsockname
  kind: callable
  ns: urllib3.util
  description: |-
    getsockname() -> address info

    Return the address of the local endpoint. The format depends on the
    address family. For IPv4 sockets, the address info is a pair
    (hostaddr, port). For IPv6 sockets, the address info is a 4-tuple
    (hostaddr, port, flowinfo, scope_id).
  summary: getsockname() -> address info
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.getsockopt
  kind: callable
  ns: urllib3.util
  description: |-
    getsockopt(level, option[, buffersize]) -> value

    Get a socket option.  See the Unix manual for level and option.
    If a nonzero buffersize argument is given, the return value is a
    string of that length; otherwise it is an integer.
  summary: getsockopt(level, option[, buffersize]) -> value
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.gettimeout
  kind: callable
  ns: urllib3.util
  description: |-
    gettimeout() -> timeout

    Returns the timeout in seconds (float) associated with socket
    operations. A timeout of None indicates that timeouts on socket
    operations are disabled.
  summary: gettimeout() -> timeout
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.listen
  kind: callable
  ns: urllib3.util
  description: |-
    listen([backlog])

    Enable a server to accept connections.  If backlog is specified, it must be
    at least 0 (if it is lower, it is set to 0); it specifies the number of
    unaccepted connections that the system will allow before refusing new
    connections. If not specified, a default reasonable value is chosen.
  summary: listen([backlog])
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.makefile
  kind: method
  ns: urllib3.util
  description: |-
    makefile(...) -> an I/O stream connected to the socket

    The arguments are as for io.open() after the filename, except the only
    supported mode values are 'r' (default), 'w' and 'b'.
  summary: makefile(
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: buffering
    default: None
    rest: false
  - name: encoding
    default: None
    rest: false
    kind: kw-only
  - name: errors
    default: None
    rest: false
    kind: kw-only
  - name: newline
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.pending
  kind: method
  ns: urllib3.util
  description: Return the number of bytes that can be read immediately.
  summary: Return the number of bytes that can be read immediately
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.proto
  kind: property
  ns: urllib3.util
  description: the socket protocol
  summary: the socket protocol
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.read
  kind: method
  ns: urllib3.util
  description: |-
    Read up to LEN bytes and return them.
    Return zero-length string on EOF.
  summary: Read up to LEN bytes and return them
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: len
    default: '1024'
    rest: false
  - kind: positional
    name: buffer
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.recv
  kind: method
  ns: urllib3.util
  description: |-
    recv(buffersize[, flags]) -> data

    Receive up to buffersize bytes from the socket.  For the optional flags
    argument, see the Unix manual.  When no data is available, block until
    at least one byte is available or until the remote end is closed.  When
    the remote end is closed and all data is read, return the empty string.
  summary: recv(buffersize[, flags]) -> data
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: buflen
    default: '1024'
    rest: false
  - kind: positional
    name: flags
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.recv_into
  kind: method
  ns: urllib3.util
  description: |-
    recv_into(buffer, [nbytes[, flags]]) -> nbytes_read

    A version of recv() that stores its data into a buffer rather than creating
    a new string.  Receive up to buffersize bytes from the socket.  If buffersize
    is not specified (or 0), receive up to the size available in the given buffer.

    See recv() for documentation about the flags.
  summary: recv_into(buffer, [nbytes[, flags]]) -> nbytes_read
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: buffer
    default: null
    rest: false
  - kind: positional
    name: nbytes
    default: None
    rest: false
  - kind: positional
    name: flags
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.recvfrom
  kind: method
  ns: urllib3.util
  description: |-
    recvfrom(buffersize[, flags]) -> (data, address info)

    Like recv(buffersize, flags) but also return the sender's address info.
  summary: recvfrom(buffersize[, flags]) -> (data, address info)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: buflen
    default: '1024'
    rest: false
  - kind: positional
    name: flags
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.recvfrom_into
  kind: method
  ns: urllib3.util
  description: |-
    recvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)

    Like recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.
  summary: recvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: buffer
    default: null
    rest: false
  - kind: positional
    name: nbytes
    default: None
    rest: false
  - kind: positional
    name: flags
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.recvmsg
  kind: method
  ns: urllib3.util
  description: |-
    recvmsg(bufsize[, ancbufsize[, flags]]) -> (data, ancdata, msg_flags, address)

    Receive normal data (up to bufsize bytes) and ancillary data from the
    socket.  The ancbufsize argument sets the size in bytes of the
    internal buffer used to receive the ancillary data; it defaults to 0,
    meaning that no ancillary data will be received.  Appropriate buffer
    sizes for ancillary data can be calculated using CMSG_SPACE() or
    CMSG_LEN(), and items which do not fit into the buffer might be
    truncated or discarded.  The flags argument defaults to 0 and has the
    same meaning as for recv().

    The return value is a 4-tuple: (data, ancdata, msg_flags, address).
    The data item is a bytes object holding the non-ancillary data
    received.  The ancdata item is a list of zero or more tuples
    (cmsg_level, cmsg_type, cmsg_data) representing the ancillary data
    (control messages) received: cmsg_level and cmsg_type are integers
    specifying the protocol level and protocol-specific type respectively,
    and cmsg_data is a bytes object holding the associated data.  The
    msg_flags item is the bitwise OR of various flags indicating
    conditions on the received message; see your system documentation for
    details.  If the receiving socket is unconnected, address is the
    address of the sending socket, if available; otherwise, its value is
    unspecified.

    If recvmsg() raises an exception after the system call returns, it
    will first attempt to close any file descriptors received via the
    SCM_RIGHTS mechanism.
  summary: recvmsg(bufsize[, ancbufsize[, flags]]) -> (data, ancdata, msg_flags, address)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.recvmsg_into
  kind: method
  ns: urllib3.util
  description: |-
    recvmsg_into(buffers[, ancbufsize[, flags]]) -> (nbytes, ancdata, msg_flags, address)

    Receive normal data and ancillary data from the socket, scattering the
    non-ancillary data into a series of buffers.  The buffers argument
    must be an iterable of objects that export writable buffers
    (e.g. bytearray objects); these will be filled with successive chunks
    of the non-ancillary data until it has all been written or there are
    no more buffers.  The ancbufsize argument sets the size in bytes of
    the internal buffer used to receive the ancillary data; it defaults to
    0, meaning that no ancillary data will be received.  Appropriate
    buffer sizes for ancillary data can be calculated using CMSG_SPACE()
    or CMSG_LEN(), and items which do not fit into the buffer might be
    truncated or discarded.  The flags argument defaults to 0 and has the
    same meaning as for recv().

    The return value is a 4-tuple: (nbytes, ancdata, msg_flags, address).
    The nbytes item is the total number of bytes of non-ancillary data
    written into the buffers.  The ancdata item is a list of zero or more
    tuples (cmsg_level, cmsg_type, cmsg_data) representing the ancillary
    data (control messages) received: cmsg_level and cmsg_type are
    integers specifying the protocol level and protocol-specific type
    respectively, and cmsg_data is a bytes object holding the associated
    data.  The msg_flags item is the bitwise OR of various flags
    indicating conditions on the received message; see your system
    documentation for details.  If the receiving socket is unconnected,
    address is the address of the sending socket, if available; otherwise,
    its value is unspecified.

    If recvmsg_into() raises an exception after the system call returns,
    it will first attempt to close any file descriptors received via the
    SCM_RIGHTS mechanism.
  summary: recvmsg_into(buffers[, ancbufsize[, flags]]) -> (nbytes, ancdata, msg_flags, address)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.selected_alpn_protocol
  kind: method
  ns: urllib3.util
  description: |-
    Return the currently selected ALPN protocol as a string, or ``None``
    if a next protocol was not negotiated or if ALPN is not supported by one
    of the peers.
  summary: Return the currently selected ALPN protocol as a string, or ``None``
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.selected_npn_protocol
  kind: method
  ns: urllib3.util
  description: |-
    Return the currently selected NPN protocol as a string, or ``None``
    if a next protocol was not negotiated or if NPN is not supported by one
    of the peers.
  summary: Return the currently selected NPN protocol as a string, or ``None``
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.send
  kind: method
  ns: urllib3.util
  description: |-
    send(data[, flags]) -> count

    Send a data string to the socket.  For the optional flags
    argument, see the Unix manual.  Return the number of bytes
    sent; this may be less than len(data) if the network is busy.
  summary: send(data[, flags]) -> count
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - kind: positional
    name: flags
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.sendall
  kind: method
  ns: urllib3.util
  description: |-
    sendall(data[, flags])

    Send a data string to the socket.  For the optional flags
    argument, see the Unix manual.  This calls send() repeatedly
    until all data is sent.  If an error occurs, it's impossible
    to tell how much data has been sent.
  summary: sendall(data[, flags])
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - kind: positional
    name: flags
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.sendfile
  kind: method
  ns: urllib3.util
  description: |-
    Send a file, possibly by using os.sendfile() if this is a
    clear-text socket.  Return the total number of bytes sent.
  summary: Send a file, possibly by using os
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: null
    rest: false
  - kind: positional
    name: offset
    default: '0'
    rest: false
  - kind: positional
    name: count
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.sendmsg
  kind: method
  ns: urllib3.util
  description: |-
    sendmsg(buffers[, ancdata[, flags[, address]]]) -> count

    Send normal and ancillary data to the socket, gathering the
    non-ancillary data from a series of buffers and concatenating it into
    a single message.  The buffers argument specifies the non-ancillary
    data as an iterable of bytes-like objects (e.g. bytes objects).
    The ancdata argument specifies the ancillary data (control messages)
    as an iterable of zero or more tuples (cmsg_level, cmsg_type,
    cmsg_data), where cmsg_level and cmsg_type are integers specifying the
    protocol level and protocol-specific type respectively, and cmsg_data
    is a bytes-like object holding the associated data.  The flags
    argument defaults to 0 and has the same meaning as for send().  If
    address is supplied and not None, it sets a destination address for
    the message.  The return value is the number of bytes of non-ancillary
    data sent.
  summary: sendmsg(buffers[, ancdata[, flags[, address]]]) -> count
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.sendmsg_afalg
  kind: callable
  ns: urllib3.util
  description: |-
    sendmsg_afalg([msg], *, op[, iv[, assoclen[, flags=MSG_MORE]]])

    Set operation mode, IV and length of associated data for an AF_ALG
    operation socket.
  summary: sendmsg_afalg([msg], *, op[, iv[, assoclen[, flags=MSG_MORE]]])
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.sendto
  kind: method
  ns: urllib3.util
  description: |-
    sendto(data[, flags], address) -> count

    Like send(data, flags) but allows specifying the destination address.
    For IP sockets, the address is a pair (hostaddr, port).
  summary: sendto(data[, flags], address) -> count
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - kind: positional
    name: flags_or_addr
    default: null
    rest: false
  - kind: positional
    name: addr
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.session
  kind: property
  ns: urllib3.util
  description: The SSLSession for client socket.
  summary: The SSLSession for client socket
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.session_reused
  kind: property
  ns: urllib3.util
  description: Was the client session reused during handshake
  summary: Was the client session reused during handshake
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.set_inheritable
  kind: method
  ns: urllib3.util
  description: Set the inheritable flag of the socket
  summary: Set the inheritable flag of the socket
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: inheritable
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.setblocking
  kind: callable
  ns: urllib3.util
  description: |-
    setblocking(flag)

    Set the socket to blocking (flag is true) or non-blocking (false).
    setblocking(True) is equivalent to settimeout(None);
    setblocking(False) is equivalent to settimeout(0.0).
  summary: setblocking(flag)
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.setsockopt
  kind: callable
  ns: urllib3.util
  description: |-
    setsockopt(level, option, value: int)
    setsockopt(level, option, value: buffer)
    setsockopt(level, option, None, optlen: int)

    Set a socket option.  See the Unix manual for level and option.
    The value argument can either be an integer, a string buffer, or
    None, optlen.
  summary: 'setsockopt(level, option, value: int)'
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.settimeout
  kind: callable
  ns: urllib3.util
  description: |-
    settimeout(timeout)

    Set a timeout on socket operations.  'timeout' can be a float,
    giving in seconds, or None.  Setting a timeout of None disables
    the timeout feature and is equivalent to setblocking(1).
    Setting a timeout of zero is the same as setblocking(0).
  summary: settimeout(timeout)
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.shared_ciphers
  kind: method
  ns: urllib3.util
  description: |-
    Return a list of ciphers shared by the client during the handshake or
    None if this is not a valid server connection.
  summary: Return a list of ciphers shared by the client during the handshake or
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.shutdown
  kind: method
  ns: urllib3.util
  description: |-
    shutdown(flag)

    Shut down the reading side of the socket (flag == SHUT_RD), the writing side
    of the socket (flag == SHUT_WR), or both ends (flag == SHUT_RDWR).
  summary: shutdown(flag)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: how
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.timeout
  kind: property
  ns: urllib3.util
  description: the socket timeout
  summary: the socket timeout
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.type
  kind: property
  ns: urllib3.util
  description: "Read-only access to the socket type.\n        "
  summary: Read-only access to the socket type
  signatures: null
  inherits_from: null
- name: SSLContext.sslsocket_class.unwrap
  kind: method
  ns: urllib3.util
  description: Start the SSL shutdown handshake.
  summary: Start the SSL shutdown handshake
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.verify_client_post_handshake
  kind: method
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.version
  kind: method
  ns: urllib3.util
  description: "Return a string identifying the protocol version used by the\ncurrent SSL channel. "
  summary: Return a string identifying the protocol version used by the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.sslsocket_class.write
  kind: method
  ns: urllib3.util
  description: |-
    Write DATA to the underlying SSL channel.  Returns
    number of bytes of DATA actually transmitted.
  summary: Write DATA to the underlying SSL channel
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: data
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.verify_flags
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.verify_mode
  kind: property
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SSLContext.wrap_bio
  kind: method
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: incoming
    default: null
    rest: false
  - kind: positional
    name: outgoing
    default: null
    rest: false
  - kind: positional
    name: server_side
    default: 'False'
    rest: false
  - kind: positional
    name: server_hostname
    default: None
    rest: false
  - kind: positional
    name: session
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SSLContext.wrap_socket
  kind: method
  ns: urllib3.util
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: sock
    default: null
    rest: false
  - kind: positional
    name: server_side
    default: 'False'
    rest: false
  - kind: positional
    name: do_handshake_on_connect
    default: 'True'
    rest: false
  - kind: positional
    name: suppress_ragged_eofs
    default: 'True'
    rest: false
  - kind: positional
    name: server_hostname
    default: None
    rest: false
  - kind: positional
    name: session
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ALPN_PROTOCOLS
  kind: const
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: assert_fingerprint
  kind: function
  ns: urllib3.util
  description: |-
    Checks if given fingerprint matches the supplied certificate.

    :param cert:
        Certificate as bytes object.
    :param fingerprint:
        Fingerprint as string of hexdigits, can be interspersed by colons.
  summary: Checks if given fingerprint matches the supplied certificate
  signatures:
  - kind: positional
    name: cert
    default: null
    rest: false
  - kind: positional
    name: fingerprint
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: create_urllib3_context
  kind: function
  ns: urllib3.util
  description: |-
    Creates and configures an :class:`ssl.SSLContext` instance for use with urllib3.

    :param ssl_version:
        The desired protocol version to use. This will default to
        PROTOCOL_SSLv23 which will negotiate the highest protocol that both
        the server and your installation of OpenSSL support.

        This parameter is deprecated instead use 'ssl_minimum_version'.
    :param ssl_minimum_version:
        The minimum version of TLS to be used. Use the 'ssl.TLSVersion' enum for specifying the value.
    :param ssl_maximum_version:
        The maximum version of TLS to be used. Use the 'ssl.TLSVersion' enum for specifying the value.
        Not recommended to set to anything other than 'ssl.TLSVersion.MAXIMUM_SUPPORTED' which is the
        default value.
    :param cert_reqs:
        Whether to require the certificate verification. This defaults to
        ``ssl.CERT_REQUIRED``.
    :param options:
        Specific OpenSSL options. These default to ``ssl.OP_NO_SSLv2``,
        ``ssl.OP_NO_SSLv3``, ``ssl.OP_NO_COMPRESSION``, and ``ssl.OP_NO_TICKET``.
    :param ciphers:
        Which cipher suites to allow the server to select. Defaults to either system configured
        ciphers if OpenSSL 1.1.1+, otherwise uses a secure default set of ciphers.
    :returns:
        Constructed SSLContext object with specified options
    :rtype: SSLContext
  summary: Creates and configures an :class:`ssl
  signatures:
  - kind: positional
    name: ssl_version
    default: None
    rest: false
  - kind: positional
    name: cert_reqs
    default: None
    rest: false
  - kind: positional
    name: options
    default: None
    rest: false
  - kind: positional
    name: ciphers
    default: None
    rest: false
  - kind: positional
    name: ssl_minimum_version
    default: None
    rest: false
  - kind: positional
    name: ssl_maximum_version
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: is_connection_dropped
  kind: function
  ns: urllib3.util
  description: |-
    Returns True if the connection is dropped and should be closed.
    :param conn: :class:`urllib3.connection.HTTPConnection` object.
  summary: Returns True if the connection is dropped and should be closed
  signatures:
  - kind: positional
    name: conn
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: is_fp_closed
  kind: function
  ns: urllib3.util
  description: |-
    Checks whether a given file-like object is closed.

    :param obj:
        The file-like object to check.
  summary: Checks whether a given file-like object is closed
  signatures:
  - kind: positional
    name: obj
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: parse_url
  kind: function
  ns: urllib3.util
  description: |-
    Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is
    performed to parse incomplete urls. Fields not provided will be None.
    This parser is RFC 3986 and RFC 6874 compliant.

    The parser logic and helper functions are based heavily on
    work done in the ``rfc3986`` module.

    :param str url: URL to parse into a :class:`.Url` namedtuple.

    Partly backwards-compatible with :mod:`urllib.parse`.

    Example:

    .. code-block:: python

        import urllib3

        print( urllib3.util.parse_url('http://google.com/mail/'))
        # Url(scheme='http', host='google.com', port=None, path='/mail/', ...)

        print( urllib3.util.parse_url('google.com:80'))
        # Url(scheme=None, host='google.com', port=80, path=None, ...)

        print( urllib3.util.parse_url('/foo?bar'))
        # Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)
  summary: Given a url, return a parsed :class:`
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: make_headers
  kind: function
  ns: urllib3.util
  description: |-
    Shortcuts for generating request headers.

    :param keep_alive:
        If ``True``, adds 'connection: keep-alive' header.

    :param accept_encoding:
        Can be a boolean, list, or string.
        ``True`` translates to 'gzip,deflate'.  If either the ``brotli`` or
        ``brotlicffi`` package is installed 'gzip,deflate,br' is used instead.
        List will get joined by comma.
        String will be used as provided.

    :param user_agent:
        String representing the user-agent you want, such as
        "python-urllib3/0.6"

    :param basic_auth:
        Colon-separated username:password string for 'authorization: basic ...'
        auth header.

    :param proxy_basic_auth:
        Colon-separated username:password string for 'proxy-authorization: basic ...'
        auth header.

    :param disable_cache:
        If ``True``, adds 'cache-control: no-cache' header.

    Example:

    .. code-block:: python

        import urllib3

        print(urllib3.util.make_headers(keep_alive=True, user_agent="Batman/1.0"))
        # {'connection': 'keep-alive', 'user-agent': 'Batman/1.0'}
        print(urllib3.util.make_headers(accept_encoding=True))
        # {'accept-encoding': 'gzip,deflate'}
  summary: Shortcuts for generating request headers
  signatures:
  - kind: positional
    name: keep_alive
    default: None
    rest: false
  - kind: positional
    name: accept_encoding
    default: None
    rest: false
  - kind: positional
    name: user_agent
    default: None
    rest: false
  - kind: positional
    name: basic_auth
    default: None
    rest: false
  - kind: positional
    name: proxy_basic_auth
    default: None
    rest: false
  - kind: positional
    name: disable_cache
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: resolve_cert_reqs
  kind: function
  ns: urllib3.util
  description: |-
    Resolves the argument to a numeric constant, which can be passed to
    the wrap_socket function/method from the ssl module.
    Defaults to :data:`ssl.CERT_REQUIRED`.
    If given a string it is assumed to be the name of the constant in the
    :mod:`ssl` module or its abbreviation.
    (So you can specify `REQUIRED` instead of `CERT_REQUIRED`.
    If it's neither `None` nor a string we assume it is already the numeric
    constant which can directly be passed to wrap_socket.
  summary: Resolves the argument to a numeric constant, which can be passed to
  signatures:
  - kind: positional
    name: candidate
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: resolve_ssl_version
  kind: function
  ns: urllib3.util
  description: like resolve_cert_reqs
  summary: like resolve_cert_reqs
  signatures:
  - kind: positional
    name: candidate
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ssl_wrap_socket
  kind: function
  ns: urllib3.util
  description: |-
    All arguments except for server_hostname, ssl_context, tls_in_tls, ca_cert_data and
    ca_cert_dir have the same meaning as they do when using
    :func:`ssl.create_default_context`, :meth:`ssl.SSLContext.load_cert_chain`,
    :meth:`ssl.SSLContext.set_ciphers` and :meth:`ssl.SSLContext.wrap_socket`.

    :param server_hostname:
        When SNI is supported, the expected hostname of the certificate
    :param ssl_context:
        A pre-made :class:`SSLContext` object. If none is provided, one will
        be created using :func:`create_urllib3_context`.
    :param ciphers:
        A string of ciphers we wish the client to support.
    :param ca_cert_dir:
        A directory containing CA certificates in multiple separate files, as
        supported by OpenSSL's -CApath flag or the capath argument to
        SSLContext.load_verify_locations().
    :param key_password:
        Optional password if the keyfile is encrypted.
    :param ca_cert_data:
        Optional string containing CA certificates in PEM format suitable for
        passing as the cadata parameter to SSLContext.load_verify_locations()
    :param tls_in_tls:
        Use SSLTransport to wrap the existing socket.
  summary: All arguments except for server_hostname, ssl_context, tls_in_tls, ca_cert_data and
  signatures:
  - kind: positional
    name: sock
    default: null
    rest: false
  - kind: positional
    name: keyfile
    default: None
    rest: false
  - kind: positional
    name: certfile
    default: None
    rest: false
  - kind: positional
    name: cert_reqs
    default: None
    rest: false
  - kind: positional
    name: ca_certs
    default: None
    rest: false
  - kind: positional
    name: server_hostname
    default: None
    rest: false
  - kind: positional
    name: ssl_version
    default: None
    rest: false
  - kind: positional
    name: ciphers
    default: None
    rest: false
  - kind: positional
    name: ssl_context
    default: None
    rest: false
  - kind: positional
    name: ca_cert_dir
    default: None
    rest: false
  - kind: positional
    name: key_password
    default: None
    rest: false
  - kind: positional
    name: ca_cert_data
    default: None
    rest: false
  - kind: positional
    name: tls_in_tls
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: wait_for_read
  kind: function
  ns: urllib3.util
  description: |-
    Waits for reading to be available on a given socket.
    Returns True if the socket is readable, or False if the timeout expired.
  summary: Waits for reading to be available on a given socket
  signatures:
  - kind: positional
    name: sock
    default: null
    rest: false
  - kind: positional
    name: timeout
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: wait_for_write
  kind: function
  ns: urllib3.util
  description: |-
    Waits for writing to be available on a given socket.
    Returns True if the socket is readable, or False if the timeout expired.
  summary: Waits for writing to be available on a given socket
  signatures:
  - kind: positional
    name: sock
    default: null
    rest: false
  - kind: positional
    name: timeout
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: SKIP_HEADER
  kind: const
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SKIPPABLE_HEADERS
  kind: const
  ns: urllib3.util
  description: null
  summary: ''
  signatures: null
  inherits_from: null
