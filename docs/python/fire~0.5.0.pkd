---
name: fire
text_format: rst
generator: src:python
generator_command: src:python use "fire"
language: python
version: 0.5.0
summary: A library for automatically generating command line interfaces.
description: |
  Python Fire is a library for automatically generating command line interfaces
  (CLIs) with a single line of code.

  It will turn any Python module, class, object, function, etc. (any Python
  component will work!) into a CLI. It's called Fire because when you call Fire(),
  it fires off your command.
homepage: https://github.com/google/python-fire
license: Apache Software License

---
- name: fire
  kind: module
  ns: null
  description: The Python Fire module.
  summary: The Python Fire module
  signatures: null
  inherits_from: null
- name: Fire
  kind: function
  ns: fire
  description: |-
    This function, Fire, is the main entrypoint for Python Fire.

    Executes a command either from the `command` argument or from sys.argv by
    recursively traversing the target object `component`'s members consuming
    arguments, evaluating functions, and instantiating classes as it goes.

    When building a CLI with Fire, your main method should call this function.

    Args:
      component: The initial target component.
      command: Optional. If supplied, this is the command executed. If not
          supplied, then the command is taken from sys.argv instead. This can be
          a string or a list of strings; a list of strings is preferred.
      name: Optional. The name of the command as entered at the command line.
          Used in interactive mode and for generating the completion script.
    Returns:
      The result of executing the Fire command. Execution begins with the initial
      target component. The component is updated by using the command arguments
      to either access a member of the current component, call the current
      component (if it's a function), or instantiate the current component (if
      it's a class). When all arguments are consumed and there's no function left
      to call or class left to instantiate, the resulting current component is
      the final result.
    Raises:
      ValueError: If the command argument is supplied, but not a string or a
          sequence of arguments.
      FireExit: When Fire encounters a FireError, Fire will raise a FireExit with
          code 2. When used with the help or trace flags, Fire will raise a
          FireExit with code 0 if successful.
  summary: This function, Fire, is the main entrypoint for Python Fire
  signatures:
  - - kind: positional
      name: component
      default: None
      rest: false
    - kind: positional
      name: command
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: serialize
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: fire.completion
  kind: module
  ns: null
  description: Provides tab completion functionality for CLIs built with Fire.
  summary: Provides tab completion functionality for CLIs built with Fire
  signatures: null
  inherits_from: null
- name: Completions
  kind: function
  ns: fire.completion
  description: |-
    Gives possible Fire command completions for the component.

    A completion is a string that can be appended to a command to continue that
    command. These are used for TAB-completions in Bash for Fire CLIs.

    Args:
      component: The component whose completions to list.
      verbose: Whether to include all completions, even private members.
    Returns:
      A list of completions for a command that would so far return the component.
  summary: Gives possible Fire command completions for the component
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - kind: positional
      name: verbose
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MemberVisible
  kind: function
  ns: fire.completion
  description: |-
    Returns whether a member should be included in auto-completion or help.

    Determines whether a member of an object with the specified name should be
    included in auto-completion or help text(both usage and detailed help).

    If the member name starts with '__', it will always be excluded. If it
    starts with only one '_', it will be included for all non-string types. If
    verbose is True, the members, including the private members, are included.

    When not in verbose mode, some modules and functions are excluded as well.

    Args:
      component: The component containing the member.
      name: The name of the member.
      member: The member itself.
      class_attrs: (optional) If component is a class, provide this as:
        inspectutils.GetClassAttrsDict(component). If not provided, it will be
        computed.
      verbose: Whether to include private members.
    Returns
      A boolean value indicating whether the member should be included.
  summary: Returns whether a member should be included in auto-completion or help
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: member
      default: null
      rest: false
    - kind: positional
      name: class_attrs
      default: None
      rest: false
    - kind: positional
      name: verbose
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Script
  kind: function
  ns: fire.completion
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: component
      default: null
      rest: false
    - kind: positional
      name: default_options
      default: None
      rest: false
    - kind: positional
      name: shell
      default: bash
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: VisibleMembers
  kind: function
  ns: fire.completion
  description: |-
    Returns a list of the members of the given component.

    If verbose is True, then members starting with _ (normally ignored) are
    included.

    Args:
      component: The component whose members to list.
      class_attrs: (optional) If component is a class, you may provide this as:
        inspectutils.GetClassAttrsDict(component). If not provided, it will be
        computed. If provided, this determines how class members will be treated
        for visibility. In particular, methods are generally hidden for
        non-instantiated classes, but if you wish them to be shown (e.g. for
        completion scripts) then pass in a different class_attr for them.
      verbose: Whether to include private members.
    Returns:
      A list of tuples (member_name, member) of all members of the component.
  summary: Returns a list of the members of the given component
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - kind: positional
      name: class_attrs
      default: None
      rest: false
    - kind: positional
      name: verbose
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.completion
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.completion
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.completion
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.console
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: console_attr
  kind: module
  ns: fire.console
  description: |-
    A module for console attributes, special characters and functions.

    The target architectures {linux, macos, windows} support inline encoding for
    all attributes except color. Windows requires win32 calls to manipulate the
    console color state.

    Usage:

      # Get the console attribute state.
      out = log.out
      con = console_attr.GetConsoleAttr(out=out)

      # Get the ISO 8879:1986//ENTITIES Box and Line Drawing characters.
      box = con.GetBoxLineCharacters()
      # Print an X inside a box.
      out.write(box.dr)
      out.write(box.h)
      out.write(box.dl)
      out.write('\n')
      out.write(box.v)
      out.write('X')
      out.write(box.v)
      out.write('\n')
      out.write(box.ur)
      out.write(box.h)
      out.write(box.ul)
      out.write('\n')

      # Print the bullet characters.
      for c in con.GetBullets():
        out.write(c)
      out.write('\n')

      # Print FAIL in red.
      out.write('Epic ')
      con.Colorize('FAIL', 'red')
      out.write(', my first.')

      # Print italic and bold text.
      bold = con.GetFontCode(bold=True)
      italic = con.GetFontCode(italic=True)
      normal = con.GetFontCode()
      out.write('This is {bold}bold{normal}, this is {italic}italic{normal},'
                ' and this is normal.\n'.format(bold=bold, italic=italic,
                                                normal=normal))

      # Read one character from stdin with echo disabled.
      c = con.GetRawKey()
      if c is None:
        print 'EOF\n'

      # Return the display width of a string that may contain FontCode() chars.
      display_width = con.DisplayWidth(string)

      # Reset the memoized state.
      con = console_attr.ResetConsoleAttr()

      # Print the console width and height in characters.
      width, height = con.GetTermSize()
      print 'width={width}, height={height}'.format(width=width, height=height)

      # Colorize table data cells.
      fail = console_attr.Colorizer('FAIL', 'red')
      pass = console_attr.Colorizer('PASS', 'green')
      cells = ['label', fail, 'more text', pass, 'end']
      for cell in cells;
        if isinstance(cell, console_attr.Colorizer):
          cell.Render()
        else:
          out.write(cell)
  summary: A module for console attributes, special characters and functions
  signatures: null
  inherits_from: null
- name: BoxLineCharacters
  kind: class
  ns: fire.console
  description: |-
    Box/line drawing characters.

    The element names are from ISO 8879:1986//ENTITIES Box and Line Drawing//EN:
      http://www.w3.org/2003/entities/iso8879doc/isobox.html
  summary: Box/line drawing characters
  signatures:
  - - type: BoxLineCharacters
      kind: return
  inherits_from: null
- name: BoxLineCharactersAscii
  kind: class
  ns: fire.console
  description: ASCII Box/line drawing characters.
  summary: ASCII Box/line drawing characters
  signatures:
  - - type: BoxLineCharactersAscii
      kind: return
  inherits_from:
  - <class 'fire.console.console_attr.BoxLineCharacters'>
- name: BoxLineCharactersAscii.d_dl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_dr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_h
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_hd
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_hu
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_ul
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_ur
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_v
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_vh
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_vl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.d_vr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.dl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.dr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.h
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.hd
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.hu
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.ul
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.ur
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.v
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.vh
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.vl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersAscii.vr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader
  kind: class
  ns: fire.console
  description: ASCII Box/line drawing characters.
  summary: ASCII Box/line drawing characters
  signatures:
  - - type: BoxLineCharactersScreenReader
      kind: return
  inherits_from:
  - <class 'fire.console.console_attr.BoxLineCharactersAscii'>
  - <class 'fire.console.console_attr.BoxLineCharacters'>
- name: BoxLineCharactersScreenReader.d_dl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_dr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_h
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_hd
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_hu
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_ul
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_ur
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_v
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_vh
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_vl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.d_vr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.dl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.dr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.h
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.hd
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.hu
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.ul
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.ur
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.v
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.vh
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.vl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersScreenReader.vr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode
  kind: class
  ns: fire.console
  description: unicode Box/line drawing characters (cp437 compatible unicode).
  summary: unicode Box/line drawing characters (cp437 compatible unicode)
  signatures:
  - - type: BoxLineCharactersUnicode
      kind: return
  inherits_from:
  - <class 'fire.console.console_attr.BoxLineCharacters'>
- name: BoxLineCharactersUnicode.d_dl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_dr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_h
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_hd
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_hu
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_ul
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_ur
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_v
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_vh
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_vl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.d_vr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.dl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.dr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.h
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.hd
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.hu
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.ul
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.ur
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.v
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.vh
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.vl
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoxLineCharactersUnicode.vr
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Colorizer
  kind: class
  ns: fire.console
  description: |-
    Resource string colorizer.

    Attributes:
      _con: ConsoleAttr object.
      _color: Color name.
      _string: The string to colorize.
      _justify: The justification function, no justification if None. For example,
        justify=lambda s: s.center(10)
  summary: Resource string colorizer
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: string
      default: null
      rest: false
    - kind: positional
      name: color
      default: null
      rest: false
    - kind: positional
      name: justify
      default: None
      rest: false
    - type: Colorizer
      kind: return
  inherits_from: null
- name: Colorizer.Render
  kind: method
  ns: fire.console
  description: |-
    Renders the string as self._color on the console.

    Args:
      stream: The stream to render the string to. The stream given here *must*
        have the same encoding as sys.stdout for this to work properly.
      justify: The justification function, self._justify if None.
  summary: Renders the string as self
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: stream
      default: null
      rest: false
    - kind: positional
      name: justify
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr
  kind: class
  ns: fire.console
  description: |-
    Console attribute and special drawing characters and functions accessor.

    Use GetConsoleAttr() to get a global ConsoleAttr object shared by all callers.
    Use ConsoleAttr() for abstracting multiple consoles.

    If _out is not associated with a console, or if the console properties cannot
    be determined, the default behavior is ASCII art with no attributes.

    Attributes:
      _ANSI_COLOR: The ANSI color control sequence dict.
      _ANSI_COLOR_RESET: The ANSI color reset control sequence string.
      _csi: The ANSI Control Sequence indicator string, '' if not supported.
      _encoding: The character encoding.
          ascii: ASCII art. This is the default.
          utf8: UTF-8 unicode.
          win: Windows code page 437.
      _font_bold: The ANSI bold font embellishment code string.
      _font_italic: The ANSI italic font embellishment code string.
      _get_raw_key: A function that reads one keypress from stdin with no echo.
      _out: The console output file stream.
      _term: TERM environment variable value.
      _term_size: The terminal (x, y) dimensions in characters.
  summary: Console attribute and special drawing characters and functions accessor
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - kind: positional
      name: suppress_output
      default: 'False'
      rest: false
    - type: ConsoleAttr
      kind: return
  inherits_from: null
- name: ConsoleAttr.Colorize
  kind: method
  ns: fire.console
  description: |-
    Generates a colorized string, optionally justified.

    Args:
      string: The string to write.
      color: The color name -- must be in _ANSI_COLOR.
      justify: The justification function, no justification if None. For
        example, justify=lambda s: s.center(10)

    Returns:
      str, The colorized string that can be printed to the console.
  summary: Generates a colorized string, optionally justified
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: string
      default: null
      rest: false
    - kind: positional
      name: color
      default: null
      rest: false
    - kind: positional
      name: justify
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.ConvertOutputToUnicode
  kind: method
  ns: fire.console
  description: |-
    Converts a console output string buf to unicode.

    Mainly used for testing. Allows test comparisons in unicode while ensuring
    that unicode => encoding => unicode works.

    Args:
      buf: The console output string to convert.

    Returns:
      The console output string buf converted to unicode.
  summary: Converts a console output string buf to unicode
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buf
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.DisplayWidth
  kind: method
  ns: fire.console
  description: |-
    Returns the display width of buf, handling unicode and ANSI controls.

    Args:
      buf: The string to count from.

    Returns:
      The display width of buf, handling unicode and ANSI controls.
  summary: Returns the display width of buf, handling unicode and ANSI controls
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buf
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetBoxLineCharacters
  kind: method
  ns: fire.console
  description: |-
    Returns the box/line drawing characters object.

    The element names are from ISO 8879:1986//ENTITIES Box and Line Drawing//EN:
      http://www.w3.org/2003/entities/iso8879doc/isobox.html

    Returns:
      A BoxLineCharacters object for the console output device.
  summary: Returns the box/line drawing characters object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetBullets
  kind: method
  ns: fire.console
  description: |-
    Returns the bullet characters list.

    Use the list elements in order for best appearance in nested bullet lists,
    wrapping back to the first element for deep nesting. The list size depends
    on the console implementation.

    Returns:
      A tuple of bullet characters.
  summary: Returns the bullet characters list
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetControlSequenceIndicator
  kind: method
  ns: fire.console
  description: |-
    Returns the control sequence indicator string.

    Returns:
      The conrol sequence indicator string or None if control sequences are not
      supported.
  summary: Returns the control sequence indicator string
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetControlSequenceLen
  kind: method
  ns: fire.console
  description: |-
    Returns the control sequence length at the beginning of buf.

    Used in display width computations. Control sequences have display width 0.

    Args:
      buf: The string to check for a control sequence.

    Returns:
      The conrol sequence length at the beginning of buf or 0 if buf does not
      start with a control sequence.
  summary: Returns the control sequence length at the beginning of buf
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buf
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetEncoding
  kind: method
  ns: fire.console
  description: Returns the current encoding.
  summary: Returns the current encoding
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetFontCode
  kind: method
  ns: fire.console
  description: |-
    Returns a font code string for 0 or more embellishments.

    GetFontCode() with no args returns the default font code string.

    Args:
      bold: True for bold embellishment.
      italic: True for italic embellishment.

    Returns:
      The font code string for the requested embellishments. Write this string
        to the console output to control the font settings.
  summary: Returns a font code string for 0 or more embellishments
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: bold
      default: 'False'
      rest: false
    - kind: positional
      name: italic
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetProgressTrackerSymbols
  kind: method
  ns: fire.console
  description: |-
    Returns the progress tracker characters object.

    Returns:
      A ProgressTrackerSymbols object for the console output device.
  summary: Returns the progress tracker characters object
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetRawKey
  kind: method
  ns: fire.console
  description: |-
    Reads one key press from stdin with no echo.

    Returns:
      The key name, None for EOF, <KEY-*> for function keys, otherwise a
      character.
  summary: Reads one key press from stdin with no echo
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetTermIdentifier
  kind: method
  ns: fire.console
  description: |-
    Returns the TERM environment variable for the console.

    Returns:
      str: A str that describes the console's text capabilities
  summary: Returns the TERM environment variable for the console
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.GetTermSize
  kind: method
  ns: fire.console
  description: |-
    Returns the terminal (x, y) dimensions in characters.

    Returns:
      (x, y): A tuple of the terminal x and y dimensions.
  summary: Returns the terminal (x, y) dimensions in characters
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.SplitIntoNormalAndControl
  kind: method
  ns: fire.console
  description: |-
    Returns a list of (normal_string, control_sequence) tuples from buf.

    Args:
      buf: The input string containing one or more control sequences
        interspersed with normal strings.

    Returns:
      A list of (normal_string, control_sequence) tuples.
  summary: Returns a list of (normal_string, control_sequence) tuples from buf
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: buf
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.SplitLine
  kind: method
  ns: fire.console
  description: |-
    Splits line into width length chunks.

    Args:
      line: The line to split.
      width: The width of each chunk except the last which could be smaller than
        width.

    Returns:
      A list of chunks, all but the last with display width == width.
  summary: Splits line into width length chunks
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: line
      default: null
      rest: false
    - kind: positional
      name: width
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ConsoleAttr.SupportsAnsi
  kind: method
  ns: fire.console
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Decode
  kind: function
  ns: fire.console
  description: |-
    Converts the given string, bytes, or object to a text string.

    Args:
      data: Any bytes, string, or object that has str() or unicode() methods.
      encoding: A suggesting encoding used to decode. If this encoding doesn't
        work, other defaults are tried. Defaults to
        GetConsoleAttr().GetEncoding().

    Returns:
      A text string representation of the data.
  summary: Converts the given string, bytes, or object to a text string
  signatures:
  - - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: EncodeToBytes
  kind: function
  ns: fire.console
  description: |-
    Encode data to bytes.

    The primary use case is for base64/mime style 7-bit ascii encoding where the
    encoder input must be bytes. "safe" means that the conversion always returns
    bytes and will not raise codec exceptions.

    If data is text then an 8-bit ascii encoding is attempted, then the console
    encoding, and finally utf-8.

    Args:
      data: Any bytes, string, or object that has str() or unicode() methods.

    Returns:
      A bytes string representation of the data.
  summary: Encode data to bytes
  signatures:
  - - kind: positional
      name: data
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GetCharacterDisplayWidth
  kind: function
  ns: fire.console
  description: |-
    Returns the monospaced terminal display width of char.

    Assumptions:
      - monospaced display
      - ambiguous or unknown chars default to width 1
      - ASCII control char width is 1 => don't use this for control chars

    Args:
      char: The character to determine the display width of.

    Returns:
      The monospaced terminal display width of char: either 0, 1, or 2.
  summary: Returns the monospaced terminal display width of char
  signatures:
  - - kind: positional
      name: char
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GetConsoleAttr
  kind: function
  ns: fire.console
  description: |-
    Gets the console attribute state.

    If this is the first call or reset is True or encoding is not None and does
    not match the current encoding or out is not None and does not match the
    current out then the state is (re)initialized. Otherwise the current state
    is returned.

    This call associates the out file stream with the console. All console related
    output should go to the same stream.

    Args:
      encoding: Encoding override.
        ascii -- ASCII. This is the default.
        utf8 -- UTF-8 unicode.
        win -- Windows code page 437.
      reset: Force re-initialization if True.

    Returns:
      The global ConsoleAttr state object.
  summary: Gets the console attribute state
  signatures:
  - - kind: positional
      name: encoding
      default: None
      rest: false
    - kind: positional
      name: reset
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ProgressTrackerSymbols
  kind: class
  ns: fire.console
  description: Characters used by progress trackers.
  summary: Characters used by progress trackers
  signatures:
  - - type: ProgressTrackerSymbols
      kind: return
  inherits_from: null
- name: ProgressTrackerSymbolsAscii
  kind: class
  ns: fire.console
  description: Characters used by progress trackers.
  summary: Characters used by progress trackers
  signatures:
  - - type: ProgressTrackerSymbolsAscii
      kind: return
  inherits_from:
  - <class 'fire.console.console_attr.ProgressTrackerSymbols'>
- name: ProgressTrackerSymbolsAscii.failed
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsAscii.interrupted
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsAscii.not_started
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsAscii.prefix_length
  kind: property
  ns: fire.console
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsAscii.spin_marks
  kind: property
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsAscii.success
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsUnicode
  kind: class
  ns: fire.console
  description: Characters used by progress trackers.
  summary: Characters used by progress trackers
  signatures:
  - - type: ProgressTrackerSymbolsUnicode
      kind: return
  inherits_from:
  - <class 'fire.console.console_attr.ProgressTrackerSymbols'>
- name: ProgressTrackerSymbolsUnicode.failed
  kind: property
  ns: fire.console
  description: Text with a semantic type that will be used for styling.
  summary: Text with a semantic type that will be used for styling
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsUnicode.interrupted
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsUnicode.not_started
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsUnicode.prefix_length
  kind: property
  ns: fire.console
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsUnicode.spin_marks
  kind: property
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ProgressTrackerSymbolsUnicode.success
  kind: property
  ns: fire.console
  description: Text with a semantic type that will be used for styling.
  summary: Text with a semantic type that will be used for styling
  signatures: null
  inherits_from: null
- name: ResetConsoleAttr
  kind: function
  ns: fire.console
  description: |-
    Resets the console attribute state to the console default.

    Args:
      encoding: Reset to this encoding instead of the default.
        ascii -- ASCII. This is the default.
        utf8 -- UTF-8 unicode.
        win -- Windows code page 437.

    Returns:
      The global ConsoleAttr state object.
  summary: Resets the console attribute state to the console default
  signatures:
  - - kind: positional
      name: encoding
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SafeText
  kind: function
  ns: fire.console
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - kind: positional
      name: escape
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: console_attr_os
  kind: module
  ns: fire.console
  description: OS specific console_attr helper functions.
  summary: OS specific console_attr helper functions
  signatures: null
  inherits_from: null
- name: GetRawKeyFunction
  kind: function
  ns: fire.console
  description: |-
    Returns a function that reads one keypress from stdin with no echo.

    Returns:
      A function that reads one keypress from stdin with no echo or a function
      that always returns None if stdin does not support it.
  summary: Returns a function that reads one keypress from stdin with no echo
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: GetTermSize
  kind: function
  ns: fire.console
  description: |-
    Gets the terminal x and y dimensions in characters.

    _GetTermSize*() helper functions taken from:
      http://stackoverflow.com/questions/263890/

    Returns:
      (columns, lines): A tuple containing the terminal x and y dimensions.
  summary: Gets the terminal x and y dimensions in characters
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: encoding
  kind: module
  ns: fire.console
  description: A module for dealing with unknown string and environment encodings.
  summary: A module for dealing with unknown string and environment encodings
  signatures: null
  inherits_from: null
- name: Decode
  kind: function
  ns: fire.console
  description: |-
    Returns string with non-ascii characters decoded to UNICODE.

    UTF-8, the suggested encoding, and the usual suspects will be attempted in
    order.

    Args:
      data: A string or object that has str() and unicode() methods that may
        contain an encoding incompatible with the standard output encoding.
      encoding: The suggested encoding if known.

    Returns:
      A text string representing the decoded byte string.
  summary: Returns string with non-ascii characters decoded to UNICODE
  signatures:
  - - kind: positional
      name: data
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Encode
  kind: function
  ns: fire.console
  description: |-
    Encode the text string to a byte string.

    Args:
      string: str, The text string to encode.
      encoding: The suggested encoding if known.

    Returns:
      str, The binary string.
  summary: Encode the text string to a byte string
  signatures:
  - - kind: positional
      name: string
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: EncodeEnv
  kind: function
  ns: fire.console
  description: |-
    Encodes all the key value pairs in env in preparation for subprocess.

    Args:
      env: {str: str}, The environment you are going to pass to subprocess.
      encoding: str, The encoding to use or None to use the default.

    Returns:
      {bytes: bytes}, The environment to pass to subprocess.
  summary: Encodes all the key value pairs in env in preparation for subprocess
  signatures:
  - - kind: positional
      name: env
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GetEncodedValue
  kind: function
  ns: fire.console
  description: |-
    Returns the decoded value of the env var name.

    Args:
      env: {str: str}, The env dict.
      name: str, The env var name.
      default: The value to return if name is not in env.

    Returns:
      The decoded value of the env var name.
  summary: Returns the decoded value of the env var name
  signatures:
  - - kind: positional
      name: env
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SetEncodedValue
  kind: function
  ns: fire.console
  description: |-
    Sets the value of name in env to an encoded value.

    Args:
      env: {str: str}, The env dict.
      name: str, The env var name.
      value: str or unicode, The value for name. If None then name is removed from
        env.
      encoding: str, The encoding to use or None to try to infer it.
  summary: Sets the value of name in env to an encoded value
  signatures:
  - - kind: positional
      name: env
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: encoding
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: unicode_literals
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: unicode_literals
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: text
  kind: module
  ns: fire.console
  description: Semantic text objects that are used for styled outputting.
  summary: Semantic text objects that are used for styled outputting
  signatures: null
  inherits_from: null
- name: TextAttributes
  kind: class
  ns: fire.console
  description: Attributes to use to style text with.
  summary: Attributes to use to style text with
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: format_str
      default: None
      rest: false
    - kind: positional
      name: color
      default: None
      rest: false
    - kind: positional
      name: attrs
      default: None
      rest: false
    - type: TextAttributes
      kind: return
  inherits_from: null
- name: TextAttributes.attrs
  kind: property
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TextAttributes.color
  kind: property
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TextAttributes.format_str
  kind: property
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TextTypes
  kind: class
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: TextTypes
      kind: return
  inherits_from:
  - <enum '_TextTypes'>
  - <enum 'Enum'>
- name: TextTypes.COMMAND
  kind: callable
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextTypes.INFO
  kind: callable
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextTypes.OUTPUT
  kind: callable
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextTypes.PT_FAILURE
  kind: callable
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextTypes.PT_SUCCESS
  kind: callable
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextTypes.RESOURCE_NAME
  kind: callable
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextTypes.URI
  kind: callable
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextTypes.URL
  kind: callable
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TextTypes.USER_INPUT
  kind: callable
  ns: fire.console
  description: Defines text types that can be used for styling text.
  summary: Defines text types that can be used for styling text
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: TypedText
  kind: class
  ns: fire.console
  description: Text with a semantic type that will be used for styling.
  summary: Text with a semantic type that will be used for styling
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: texts
      default: null
      rest: false
    - kind: positional
      name: text_type
      default: None
      rest: false
    - type: TypedText
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: unicode_literals
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: unicode_literals
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: console_io
  kind: module
  ns: fire.console
  description: General console printing utilities used by the Cloud SDK.
  summary: General console printing utilities used by the Cloud SDK
  signatures: null
  inherits_from: null
- name: IsInteractive
  kind: function
  ns: fire.console
  description: |-
    Determines if the current terminal session is interactive.

    sys.stdin must be a terminal input stream.

    Args:
      output: If True then sys.stdout must also be a terminal output stream.
      error: If True then sys.stderr must also be a terminal output stream.
      heuristic: If True then we also do some additional heuristics to check if
                 we are in an interactive context. Checking home path for example.

    Returns:
      True if the current terminal session is interactive.
  summary: Determines if the current terminal session is interactive
  signatures:
  - - kind: positional
      name: output
      default: 'False'
      rest: false
    - kind: positional
      name: error
      default: 'False'
      rest: false
    - kind: positional
      name: heuristic
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: More
  kind: function
  ns: fire.console
  description: |-
    Run a user specified pager or fall back to the internal pager.

    Args:
      contents: The entire contents of the text lines to page.
      out: The output stream.
      prompt: The page break prompt.
      check_pager: Checks the PAGER env var and uses it if True.
  summary: Run a user specified pager or fall back to the internal pager
  signatures:
  - - kind: positional
      name: contents
      default: null
      rest: false
    - kind: positional
      name: out
      default: null
      rest: false
    - kind: positional
      name: prompt
      default: None
      rest: false
    - kind: positional
      name: check_pager
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: console_pager
  kind: module
  ns: fire.console
  description: Simple console pager.
  summary: Simple console pager
  signatures: null
  inherits_from: null
- name: Pager
  kind: class
  ns: fire.console
  description: |-
    A simple console text pager.

    This pager requires the entire contents to be available. The contents are
    written one page of lines at a time. The prompt is written after each page of
    lines. A one character response is expected. See HELP_TEXT below for more
    info.

    The contents are written as is. For example, ANSI control codes will be in
    effect. This is different from pagers like more(1) which is ANSI control code
    agnostic and miscalculates line lengths, and less(1) which displays control
    character names by default.

    Attributes:
      _attr: The current ConsoleAttr handle.
      _clear: A string that clears the prompt when written to _out.
      _contents: The entire contents of the text lines to page.
      _height: The terminal height in characters.
      _out: The output stream, log.out (effectively) if None.
      _prompt: The page break prompt.
      _search_direction: The search direction command, n:forward, N:reverse.
      _search_pattern: The current forward/reverse search compiled RE.
      _width: The termonal width in characters.
  summary: A simple console text pager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: contents
      default: null
      rest: false
    - kind: positional
      name: out
      default: None
      rest: false
    - kind: positional
      name: prompt
      default: None
      rest: false
    - type: Pager
      kind: return
  inherits_from: null
- name: Pager.HELP_TEXT
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Pager.PREV_POS_NXT_REPRINT
  kind: property
  ns: fire.console
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: Pager.Run
  kind: method
  ns: fire.console
  description: Run the pager.
  summary: Run the pager
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: unicode_literals
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: files
  kind: module
  ns: fire.console
  description: Some general file utilities used that can be used by the Cloud SDK.
  summary: Some general file utilities used that can be used by the Cloud SDK
  signatures: null
  inherits_from: null
- name: FindExecutableOnPath
  kind: function
  ns: fire.console
  description: |-
    Searches for `executable` in the directories listed in `path` or $PATH.

    Executable must not contain a directory or an extension.

    Args:
      executable: The name of the executable to find.
      path: A list of directories to search separated by 'os.pathsep'.  If None
        then the system PATH is used.
      pathext: An iterable of file name extensions to use.  If None then
        platform specific extensions are used.
      allow_extensions: A boolean flag indicating whether extensions in the
        executable are allowed.

    Returns:
      The path of 'executable' (possibly with a platform-specific extension) if
      found and executable, None if not found.

    Raises:
      ValueError: if executable has a path or an extension, and extensions are
        not allowed, or if there's an internal error.
  summary: Searches for `executable` in the directories listed in `path` or $PATH
  signatures:
  - - kind: positional
      name: executable
      default: null
      rest: false
    - kind: positional
      name: path
      default: None
      rest: false
    - kind: positional
      name: pathext
      default: None
      rest: false
    - kind: positional
      name: allow_extensions
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: platforms
  kind: module
  ns: fire.console
  description: Utilities for determining the current platform and architecture.
  summary: Utilities for determining the current platform and architecture
  signatures: null
  inherits_from: null
- name: Architecture
  kind: class
  ns: fire.console
  description: An enum representing the system architecture you are running on.
  summary: An enum representing the system architecture you are running on
  signatures:
  - - type: Architecture
      kind: return
  inherits_from: null
- name: Architecture.AllValues
  kind: method
  ns: fire.console
  description: |-
    Gets all possible enum values.

    Returns:
      list, All the enum values.
  summary: Gets all possible enum values
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Architecture.Current
  kind: method
  ns: fire.console
  description: |-
    Determines the current system architecture.

    Returns:
      ArchitectureTuple, One of the Architecture constants or None if it cannot
      be determined.
  summary: Determines the current system architecture
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: Architecture.FromId
  kind: method
  ns: fire.console
  description: |-
    Gets the enum corresponding to the given architecture id.

    Args:
      architecture_id: str, The architecture id to parse
      error_on_unknown: bool, True to raise an exception if the id is unknown,
        False to just return None.

    Raises:
      InvalidEnumValue: If the given value cannot be parsed.

    Returns:
      ArchitectureTuple, One of the Architecture constants or None if the input
      is None.
  summary: Gets the enum corresponding to the given architecture id
  signatures:
  - - kind: positional
      name: architecture_id
      default: null
      rest: false
    - kind: positional
      name: error_on_unknown
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Architecture.arm
  kind: property
  ns: fire.console
  description: A single architecture.
  summary: A single architecture
  signatures: null
  inherits_from: null
- name: Architecture.ppc
  kind: property
  ns: fire.console
  description: A single architecture.
  summary: A single architecture
  signatures: null
  inherits_from: null
- name: Architecture.x86
  kind: property
  ns: fire.console
  description: A single architecture.
  summary: A single architecture
  signatures: null
  inherits_from: null
- name: Architecture.x86_64
  kind: property
  ns: fire.console
  description: A single architecture.
  summary: A single architecture
  signatures: null
  inherits_from: null
- name: Error
  kind: class
  ns: fire.console
  description: Base class for exceptions in the platforms module.
  summary: Base class for exceptions in the platforms module
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Error.add_note
  kind: callable
  ns: fire.console
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Error.args
  kind: property
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Error.with_traceback
  kind: callable
  ns: fire.console
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidEnumValue
  kind: class
  ns: fire.console
  description: Exception for when a string could not be parsed to a valid enum value.
  summary: Exception for when a string could not be parsed to a valid enum value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: given
      default: null
      rest: false
    - kind: positional
      name: enum_type
      default: null
      rest: false
    - kind: positional
      name: options
      default: null
      rest: false
    - type: InvalidEnumValue
      kind: return
  inherits_from:
  - <class 'fire.console.platforms.Error'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: InvalidEnumValue.add_note
  kind: callable
  ns: fire.console
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: InvalidEnumValue.args
  kind: property
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: InvalidEnumValue.with_traceback
  kind: callable
  ns: fire.console
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: OperatingSystem
  kind: class
  ns: fire.console
  description: An enum representing the operating system you are running on.
  summary: An enum representing the operating system you are running on
  signatures:
  - - type: OperatingSystem
      kind: return
  inherits_from: null
- name: OperatingSystem.AllValues
  kind: method
  ns: fire.console
  description: |-
    Gets all possible enum values.

    Returns:
      list, All the enum values.
  summary: Gets all possible enum values
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: OperatingSystem.CYGWIN
  kind: property
  ns: fire.console
  description: A single operating system.
  summary: A single operating system
  signatures: null
  inherits_from: null
- name: OperatingSystem.Current
  kind: method
  ns: fire.console
  description: |-
    Determines the current operating system.

    Returns:
      OperatingSystemTuple, One of the OperatingSystem constants or None if it
      cannot be determined.
  summary: Determines the current operating system
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: OperatingSystem.FromId
  kind: method
  ns: fire.console
  description: |-
    Gets the enum corresponding to the given operating system id.

    Args:
      os_id: str, The operating system id to parse
      error_on_unknown: bool, True to raise an exception if the id is unknown,
        False to just return None.

    Raises:
      InvalidEnumValue: If the given value cannot be parsed.

    Returns:
      OperatingSystemTuple, One of the OperatingSystem constants or None if the
      input is None.
  summary: Gets the enum corresponding to the given operating system id
  signatures:
  - - kind: positional
      name: os_id
      default: null
      rest: false
    - kind: positional
      name: error_on_unknown
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: OperatingSystem.IsWindows
  kind: method
  ns: fire.console
  description: Returns True if the current operating system is Windows.
  summary: Returns True if the current operating system is Windows
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: OperatingSystem.LINUX
  kind: property
  ns: fire.console
  description: A single operating system.
  summary: A single operating system
  signatures: null
  inherits_from: null
- name: OperatingSystem.MACOSX
  kind: property
  ns: fire.console
  description: A single operating system.
  summary: A single operating system
  signatures: null
  inherits_from: null
- name: OperatingSystem.MSYS
  kind: property
  ns: fire.console
  description: A single operating system.
  summary: A single operating system
  signatures: null
  inherits_from: null
- name: OperatingSystem.WINDOWS
  kind: property
  ns: fire.console
  description: A single operating system.
  summary: A single operating system
  signatures: null
  inherits_from: null
- name: Platform
  kind: class
  ns: fire.console
  description: Holds an operating system and architecture.
  summary: Holds an operating system and architecture
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: operating_system
      default: null
      rest: false
    - kind: positional
      name: architecture
      default: null
      rest: false
    - type: Platform
      kind: return
  inherits_from: null
- name: Platform.AsyncPopenArgs
  kind: method
  ns: fire.console
  description: |-
    Returns the args for spawning an async process using Popen on this OS.

    Make sure the main process does not wait for the new process. On windows
    this means setting the 0x8 creation flag to detach the process.

    Killing a group leader kills the whole group. Setting creation flag 0x200 on
    Windows or running setsid on *nix makes sure the new process is in a new
    session with the new process the group leader. This means it can't be killed
    if the parent is killed.

    Finally, all file descriptors (FD) need to be closed so that waiting for the
    output of the main process does not inadvertently wait for the output of the
    new process, which means waiting for the termination of the new process.
    If the new process wants to write to a file, it can open new FDs.

    Returns:
      {str:}, The args for spawning an async process using Popen on this OS.
  summary: Returns the args for spawning an async process using Popen on this OS
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Platform.Current
  kind: method
  ns: fire.console
  description: |-
    Determines the current platform you are running on.

    Args:
      os_override: OperatingSystem, A value to use instead of the current.
      arch_override: Architecture, A value to use instead of the current.

    Returns:
      Platform, The platform tuple of operating system and architecture.  Either
      can be None if it could not be determined.
  summary: Determines the current platform you are running on
  signatures:
  - - kind: positional
      name: os_override
      default: None
      rest: false
    - kind: positional
      name: arch_override
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Platform.UserAgentFragment
  kind: method
  ns: fire.console
  description: |-
    Generates the fragment of the User-Agent that represents the OS.

    Examples:
      (Linux 3.2.5-gg1236)
      (Windows NT 6.1.7601)
      (Macintosh; PPC Mac OS X 12.4.0)
      (Macintosh; Intel Mac OS X 12.4.0)

    Returns:
      str, The fragment of the User-Agent string.
  summary: Generates the fragment of the User-Agent that represents the OS
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PythonVersion
  kind: class
  ns: fire.console
  description: |-
    Class to validate the Python version we are using.

    The Cloud SDK officially supports Python 2.7.

    However, many commands do work with Python 2.6, so we don't error out when
    users are using this (we consider it sometimes "compatible" but not
    "supported").
  summary: Class to validate the Python version we are using
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: version
      default: None
      rest: false
    - type: PythonVersion
      kind: return
  inherits_from: null
- name: PythonVersion.ENV_VAR_MESSAGE
  kind: property
  ns: fire.console
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: PythonVersion.IsCompatible
  kind: method
  ns: fire.console
  description: |-
    Ensure that the Python version we are using is compatible.

    This will print an error message if not compatible.

    Compatible versions are 2.6 and 2.7 and > 3.4 if allow_py3 is True.
    We don't guarantee support for 2.6 so we want to warn about it.

    Args:
      allow_py3: bool, True if we should allow a Python 3 interpreter to run
        gcloud. If False, this returns an error for Python 3.
      raise_exception: bool, True to raise an exception rather than printing
        the error and exiting.

    Raises:
      Error: If not compatible and raise_exception is True.

    Returns:
      bool, True if the version is valid, False otherwise.
  summary: Ensure that the Python version we are using is compatible
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: allow_py3
      default: 'False'
      rest: false
    - kind: positional
      name: raise_exception
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: PythonVersion.MIN_REQUIRED_PY2_VERSION
  kind: property
  ns: fire.console
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: PythonVersion.MIN_SUPPORTED_PY2_VERSION
  kind: property
  ns: fire.console
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: PythonVersion.MIN_SUPPORTED_PY3_VERSION
  kind: property
  ns: fire.console
  description: |-
    Built-in immutable sequence.

    If no argument is given, the constructor returns an empty tuple.
    If iterable is specified the tuple is initialized from iterable's items.

    If the argument is a tuple, the return value is the same object.
  summary: Built-in immutable sequence
  signatures: null
  inherits_from: null
- name: PythonVersion.SupportedVersionMessage
  kind: method
  ns: fire.console
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: allow_py3
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: unicode_literals
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: unicode_literals
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.console
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.core
  kind: module
  ns: null
  description: |-
    Python Fire is a library for creating CLIs from absolutely any Python object.

    You can call Fire on any Python object:
    functions, classes, modules, objects, dictionaries, lists, tuples, etc.
    They all work!

    Python Fire turns any Python object into a command line interface.
    Simply call the Fire function as your main method to create a CLI.

    When using Fire to build a CLI, your main method includes a call to Fire. Eg:

    def main(argv):
      fire.Fire(Component)

    A Fire CLI command is run by consuming the arguments in the command in order to
    access a member of current component, call the current component (if it's a
    function), or instantiate the current component (if it's a class). The target
    component begins as Component, and at each operation the component becomes the
    result of the preceding operation.

    For example "command fn arg1 arg2" might access the "fn" property of the initial
    target component, and then call that function with arguments 'arg1' and 'arg2'.
    Additional examples are available in the examples directory.

    Fire Flags, common to all Fire CLIs, must go after a separating "--". For
    example, to get help for a command you might run: `command -- --help`.

    The available flags for all Fire CLIs are:
      -v --verbose: Include private members in help and usage information.
      -h --help: Provide help and usage information for the command.
      -i --interactive: Drop into a Python REPL after running the command.
      --completion: Write the Bash completion script for the tool to stdout.
      --completion fish: Write the Fish completion script for the tool to stdout.
      --separator SEPARATOR: Use SEPARATOR in place of the default separator, '-'.
      --trace: Get the Fire Trace for the command.
  summary: Python Fire is a library for creating CLIs from absolutely any Python object
  signatures: null
  inherits_from: null
- name: CompletionScript
  kind: function
  ns: fire.core
  description: Returns the text of the completion script for a Fire CLI.
  summary: Returns the text of the completion script for a Fire CLI
  signatures:
  - - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: component
      default: null
      rest: false
    - kind: positional
      name: shell
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Display
  kind: function
  ns: fire.core
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: lines
      default: null
      rest: false
    - kind: positional
      name: out
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Fire
  kind: function
  ns: fire.core
  description: |-
    This function, Fire, is the main entrypoint for Python Fire.

    Executes a command either from the `command` argument or from sys.argv by
    recursively traversing the target object `component`'s members consuming
    arguments, evaluating functions, and instantiating classes as it goes.

    When building a CLI with Fire, your main method should call this function.

    Args:
      component: The initial target component.
      command: Optional. If supplied, this is the command executed. If not
          supplied, then the command is taken from sys.argv instead. This can be
          a string or a list of strings; a list of strings is preferred.
      name: Optional. The name of the command as entered at the command line.
          Used in interactive mode and for generating the completion script.
    Returns:
      The result of executing the Fire command. Execution begins with the initial
      target component. The component is updated by using the command arguments
      to either access a member of the current component, call the current
      component (if it's a function), or instantiate the current component (if
      it's a class). When all arguments are consumed and there's no function left
      to call or class left to instantiate, the resulting current component is
      the final result.
    Raises:
      ValueError: If the command argument is supplied, but not a string or a
          sequence of arguments.
      FireExit: When Fire encounters a FireError, Fire will raise a FireExit with
          code 2. When used with the help or trace flags, Fire will raise a
          FireExit with code 0 if successful.
  summary: This function, Fire, is the main entrypoint for Python Fire
  signatures:
  - - kind: positional
      name: component
      default: None
      rest: false
    - kind: positional
      name: command
      default: None
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: serialize
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireError
  kind: class
  ns: fire.core
  description: |-
    Exception used by Fire when a Fire command cannot be executed.

    These exceptions are not raised by the Fire function, but rather are caught
    and added to the FireTrace.
  summary: Exception used by Fire when a Fire command cannot be executed
  signatures: null
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FireError.add_note
  kind: callable
  ns: fire.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FireError.args
  kind: property
  ns: fire.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FireError.with_traceback
  kind: callable
  ns: fire.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: FireExit
  kind: class
  ns: fire.core
  description: |-
    An exception raised by Fire to the client in the case of a FireError.

    The trace of the Fire program is available on the `trace` property.

    This exception inherits from SystemExit, so clients may explicitly catch it
    with `except SystemExit` or `except FireExit`. If not caught, this exception
    will cause the client program to exit without a stacktrace.
  summary: An exception raised by Fire to the client in the case of a FireError
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: code
      default: null
      rest: false
    - kind: positional
      name: component_trace
      default: null
      rest: false
    - type: FireExit
      kind: return
  inherits_from:
  - <class 'SystemExit'>
  - <class 'BaseException'>
- name: FireExit.add_note
  kind: callable
  ns: fire.core
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FireExit.args
  kind: property
  ns: fire.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FireExit.code
  kind: property
  ns: fire.core
  description: exception code
  summary: exception code
  signatures: null
  inherits_from: null
- name: FireExit.with_traceback
  kind: callable
  ns: fire.core
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.custom_descriptions
  kind: module
  ns: null
  description: |-
    Custom descriptions and summaries for the builtin types.

    The docstrings for objects of primitive types reflect the type of the object,
    rather than the object itself. For example, the docstring for any dict is this:

    > print({'key': 'value'}.__doc__)
    dict() -> new empty dictionary
    dict(mapping) -> new dictionary initialized from a mapping object's
        (key, value) pairs
    dict(iterable) -> new dictionary initialized as if via:
        d = {}
        for k, v in iterable:
            d[k] = v
    dict(**kwargs) -> new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)

    As you can see, this docstring is more pertinent to the function `dict` and
    would be suitable as the result of `dict.__doc__`, but is wholely unsuitable
    as a description for the dict `{'key': 'value'}`.

    This modules aims to resolve that problem, providing custom summaries and
    descriptions for primitive typed values.
  summary: Custom descriptions and summaries for the builtin types
  signatures: null
  inherits_from: null
- name: CUSTOM_DESC_SUM_FN_DICT
  kind: const
  ns: fire.custom_descriptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: GetDescription
  kind: function
  ns: fire.custom_descriptions
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: available_space
      default: null
      rest: false
    - kind: positional
      name: line_length
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GetStringTypeDescription
  kind: function
  ns: fire.custom_descriptions
  description: |-
    Returns the predefined description for string obj.

    This function constructs a description for string type objects in the format
    of 'The string "<string_value>"'. <string_value> could be potentially
    truncated depending on whether it has enough space available to show the full
    string value.

    Args:
      obj: The object to generate description for.
      available_space: Number of character spaces available.
      line_length: The full width of the terminal, default if 80.

    Returns:
      A description for input object.
  summary: Returns the predefined description for string obj
  signatures:
  - - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: available_space
      default: null
      rest: false
    - kind: positional
      name: line_length
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GetStringTypeSummary
  kind: function
  ns: fire.custom_descriptions
  description: |-
    Returns a custom summary for string type objects.

    This function constructs a summary for string type objects by double quoting
    the string value. The double quoted string value will be potentially truncated
    with ellipsis depending on whether it has enough space available to show the
    full string value.

    Args:
      obj: The object to generate summary for.
      available_space: Number of character spaces available.
      line_length: The full width of the terminal, default is 80.

    Returns:
      A summary for the input object.
  summary: Returns a custom summary for string type objects
  signatures:
  - - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: available_space
      default: null
      rest: false
    - kind: positional
      name: line_length
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GetSummary
  kind: function
  ns: fire.custom_descriptions
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: obj
      default: null
      rest: false
    - kind: positional
      name: available_space
      default: null
      rest: false
    - kind: positional
      name: line_length
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NeedsCustomDescription
  kind: function
  ns: fire.custom_descriptions
  description: |-
    Whether the component should use a custom description and summary.

    Components of primitive type, such as ints, floats, dicts, lists, and others
    have messy builtin docstrings. These are inappropriate for display as
    descriptions and summaries in a CLI. This function determines whether the
    provided component has one of these docstrings.

    Note that an object such as `int` has the same docstring as an int like `3`.
    The docstring is OK for `int`, but is inappropriate as a docstring for `3`.

    Args:
      component: The component of interest.
    Returns:
      Whether the component should use a custom description and summary.
  summary: Whether the component should use a custom description and summary
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: STRING_DESC_PREFIX
  kind: const
  ns: fire.custom_descriptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TWO_DOUBLE_QUOTES
  kind: const
  ns: fire.custom_descriptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.custom_descriptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.custom_descriptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.custom_descriptions
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.decorators
  kind: module
  ns: null
  description: |-
    These decorators provide function metadata to Python Fire.

    SetParseFn and SetParseFns allow you to set the functions Fire uses for parsing
    command line arguments to client code.
  summary: These decorators provide function metadata to Python Fire
  signatures: null
  inherits_from: null
- name: ACCEPTS_POSITIONAL_ARGS
  kind: const
  ns: fire.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FIRE_METADATA
  kind: const
  ns: fire.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FIRE_PARSE_FNS
  kind: const
  ns: fire.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: GetMetadata
  kind: function
  ns: fire.decorators
  description: |-
    Gets metadata attached to the function `fn` as an attribute.

    Args:
      fn: The function from which to retrieve the function metadata.
    Returns:
      A dictionary mapping property strings to their value.
  summary: Gets metadata attached to the function `fn` as an attribute
  signatures:
  - - kind: positional
      name: fn
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GetParseFns
  kind: function
  ns: fire.decorators
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: fn
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SetParseFn
  kind: function
  ns: fire.decorators
  description: |-
    Sets the fn for Fire to use to parse args when calling the decorated fn.

    Args:
      fn: The function to be used for parsing arguments.
      *arguments: The arguments for which to use the parse fn. If none are listed,
        then this will set the default parse function.
    Returns:
      The decorated function, which now has metadata telling Fire how to perform.
  summary: Sets the fn for Fire to use to parse args when calling the decorated fn
  signatures:
  - - kind: positional
      name: fn
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SetParseFns
  kind: function
  ns: fire.decorators
  description: |-
    Set the fns for Fire to use to parse args when calling the decorated fn.

    Returns a decorator, which when applied to a function adds metadata to the
    function telling Fire how to turn string command line arguments into proper
    Python arguments with which to call the function.

    A parse function should accept a single string argument and return a value to
    be used in its place when calling the decorated function.

    Args:
      *positional: The functions to be used for parsing positional arguments.
      **named: The functions to be used for parsing named arguments.
    Returns:
      The decorated function, which now has metadata telling Fire how to perform.
  summary: Set the fns for Fire to use to parse args when calling the decorated fn
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.docstrings
  kind: module
  ns: null
  description: |-
    Docstring parsing module for Python Fire.

    The following features of docstrings are not supported.
    TODO(dbieber): Support these features.
    - numpy docstrings may begin with the function signature.
    - whitespace may be important for proper structuring of a docstring
    - I've seen `argname` (with single backticks) as a style of documenting
      arguments. The `argname` appears on one line, and the description on the next.
    - .. Sphinx directives such as .. note:: are not understood.
    - After a section ends, future contents may be included in the section. E.g.
      :returns: This is what is returned.
      Example: An example goes here.
    - @param is sometimes used.  E.g.
      @param argname (type) Description
      @return (type) Description
    - The true signature of a function is not used by the docstring parser. It could
      be useful for determining whether something is a section header or an argument
      for example.
    - This example confuses types as part of the docstrings.
      Parameters
      argname : argtype
      Arg description
    - If there's no blank line after the summary, the description will be slurped
      up into the summary.
    - "Examples" should be its own section type. aka "Usage".
    - "Notes" should be a section type.
    - Some people put parenthesis around their types in RST format, e.g.
      :param (type) paramname:
    - :rtype: directive (return type)
    - Also ":rtype str" with no closing ":" has come up.
    - Return types are not supported.
    - "# Returns" as a section title style
    - ":raises ExceptionType: Description" ignores the ExceptionType currently.
    - "Defaults to X" occurs sometimes.
    - "True | False" indicates bool type.
  summary: Docstring parsing module for Python Fire
  signatures: null
  inherits_from: null
- name: ArgInfo
  kind: class
  ns: fire.docstrings
  description: ArgInfo(name, type, description)
  summary: ArgInfo(name, type, description)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: type
      default: None
      rest: false
    - kind: positional
      name: description
      default: None
      rest: false
    - type: ArgInfo
      kind: return
  inherits_from:
  - <class 'fire.docstrings.ArgInfo'>
  - <class 'tuple'>
- name: ArgInfo.count
  kind: callable
  ns: fire.docstrings
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ArgInfo.description
  kind: property
  ns: fire.docstrings
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: ArgInfo.index
  kind: callable
  ns: fire.docstrings
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ArgInfo.name
  kind: property
  ns: fire.docstrings
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: ArgInfo.type
  kind: property
  ns: fire.docstrings
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: DocstringInfo
  kind: class
  ns: fire.docstrings
  description: DocstringInfo(summary, description, args, returns, yields, raises)
  summary: DocstringInfo(summary, description, args, returns, yields, raises)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: summary
      default: None
      rest: false
    - kind: positional
      name: description
      default: None
      rest: false
    - kind: positional
      name: args
      default: None
      rest: false
    - kind: positional
      name: returns
      default: None
      rest: false
    - kind: positional
      name: yields
      default: None
      rest: false
    - kind: positional
      name: raises
      default: None
      rest: false
    - type: DocstringInfo
      kind: return
  inherits_from:
  - <class 'fire.docstrings.DocstringInfo'>
  - <class 'tuple'>
- name: DocstringInfo.args
  kind: property
  ns: fire.docstrings
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: DocstringInfo.count
  kind: callable
  ns: fire.docstrings
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DocstringInfo.description
  kind: property
  ns: fire.docstrings
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: DocstringInfo.index
  kind: callable
  ns: fire.docstrings
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DocstringInfo.raises
  kind: property
  ns: fire.docstrings
  description: Alias for field number 5
  summary: Alias for field number 5
  signatures: null
  inherits_from: null
- name: DocstringInfo.returns
  kind: property
  ns: fire.docstrings
  description: Alias for field number 3
  summary: Alias for field number 3
  signatures: null
  inherits_from: null
- name: DocstringInfo.summary
  kind: property
  ns: fire.docstrings
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: DocstringInfo.yields
  kind: property
  ns: fire.docstrings
  description: Alias for field number 4
  summary: Alias for field number 4
  signatures: null
  inherits_from: null
- name: Formats
  kind: class
  ns: fire.docstrings
  description: |-
    Create a collection of name/value pairs.

    Example enumeration:

    >>> class Color(Enum):
    ...     RED = 1
    ...     BLUE = 2
    ...     GREEN = 3

    Access them by:

    - attribute access::

    >>> Color.RED
    <Color.RED: 1>

    - value lookup:

    >>> Color(1)
    <Color.RED: 1>

    - name lookup:

    >>> Color['RED']
    <Color.RED: 1>

    Enumerations can be iterated over, and know how many members they have:

    >>> len(Color)
    3

    >>> list(Color)
    [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

    Methods can be added to enumerations, and members can have their own
    attributes -- see the documentation for details.
  summary: Create a collection of name/value pairs
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Formats
      kind: return
  inherits_from:
  - <enum 'Enum'>
- name: Formats.GOOGLE
  kind: property
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Formats.NUMPY
  kind: property
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Formats.RST
  kind: property
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Formats.name
  kind: property
  ns: fire.docstrings
  description: The name of the Enum member.
  summary: The name of the Enum member
  signatures: null
  inherits_from: null
- name: Formats.value
  kind: property
  ns: fire.docstrings
  description: The value of the Enum member.
  summary: The value of the Enum member
  signatures: null
  inherits_from: null
- name: KwargInfo
  kind: class
  ns: fire.docstrings
  description: ArgInfo(name, type, description)
  summary: ArgInfo(name, type, description)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: type
      default: None
      rest: false
    - kind: positional
      name: description
      default: None
      rest: false
    - type: KwargInfo
      kind: return
  inherits_from:
  - <class 'fire.docstrings.ArgInfo'>
  - <class 'fire.docstrings.ArgInfo'>
  - <class 'tuple'>
- name: KwargInfo.count
  kind: callable
  ns: fire.docstrings
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: KwargInfo.description
  kind: property
  ns: fire.docstrings
  description: Alias for field number 2
  summary: Alias for field number 2
  signatures: null
  inherits_from: null
- name: KwargInfo.index
  kind: callable
  ns: fire.docstrings
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: KwargInfo.name
  kind: property
  ns: fire.docstrings
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: KwargInfo.type
  kind: property
  ns: fire.docstrings
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: Namespace
  kind: class
  ns: fire.docstrings
  description: A dict with attribute (dot-notation) access enabled.
  summary: A dict with attribute (dot-notation) access enabled
  signatures: null
  inherits_from:
  - <class 'dict'>
- name: Namespace.clear
  kind: callable
  ns: fire.docstrings
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: Namespace.copy
  kind: callable
  ns: fire.docstrings
  description: D.copy() -> a shallow copy of D
  summary: D
  signatures: null
  inherits_from: null
- name: Namespace.get
  kind: callable
  ns: fire.docstrings
  description: Return the value for key if key is in the dictionary, else default.
  summary: Return the value for key if key is in the dictionary, else default
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Namespace.items
  kind: callable
  ns: fire.docstrings
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures: null
  inherits_from: null
- name: Namespace.keys
  kind: callable
  ns: fire.docstrings
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: Namespace.pop
  kind: callable
  ns: fire.docstrings
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures: null
  inherits_from: null
- name: Namespace.popitem
  kind: callable
  ns: fire.docstrings
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Namespace.setdefault
  kind: callable
  ns: fire.docstrings
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Namespace.update
  kind: callable
  ns: fire.docstrings
  description: |-
    D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]
  summary: D
  signatures: null
  inherits_from: null
- name: Namespace.values
  kind: callable
  ns: fire.docstrings
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures: null
  inherits_from: null
- name: SECTION_TITLES
  kind: const
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sections
  kind: class
  ns: fire.docstrings
  description: |-
    Create a collection of name/value pairs.

    Example enumeration:

    >>> class Color(Enum):
    ...     RED = 1
    ...     BLUE = 2
    ...     GREEN = 3

    Access them by:

    - attribute access::

    >>> Color.RED
    <Color.RED: 1>

    - value lookup:

    >>> Color(1)
    <Color.RED: 1>

    - name lookup:

    >>> Color['RED']
    <Color.RED: 1>

    Enumerations can be iterated over, and know how many members they have:

    >>> len(Color)
    3

    >>> list(Color)
    [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

    Methods can be added to enumerations, and members can have their own
    attributes -- see the documentation for details.
  summary: Create a collection of name/value pairs
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Sections
      kind: return
  inherits_from:
  - <enum 'Enum'>
- name: Sections.ARGS
  kind: property
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sections.RAISES
  kind: property
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sections.RETURNS
  kind: property
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sections.TYPE
  kind: property
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sections.YIELDS
  kind: property
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Sections.name
  kind: property
  ns: fire.docstrings
  description: The name of the Enum member.
  summary: The name of the Enum member
  signatures: null
  inherits_from: null
- name: Sections.value
  kind: property
  ns: fire.docstrings
  description: The value of the Enum member.
  summary: The value of the Enum member
  signatures: null
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: parse
  kind: function
  ns: fire.docstrings
  description: |-
    Returns DocstringInfo about the given docstring.

    This parser aims to parse Google, numpy, and rst formatted docstrings. These
    are the three most common docstring styles at the time of this writing.

    This parser aims to be permissive, working even when the docstring deviates
    from the strict recommendations of these styles.

    This parser does not aim to fully extract all structured information from a
    docstring, since there are simply too many ways to structure information in a
    docstring. Sometimes content will remain as unstructured text and simply gets
    included in the description.

    The Google docstring style guide is available at:
    https://github.com/google/styleguide/blob/gh-pages/pyguide.md

    The numpy docstring style guide is available at:
    https://numpydoc.readthedocs.io/en/latest/format.html

    Information about the rST docstring format is available at:
    https://www.python.org/dev/peps/pep-0287/
    The full set of directives such as param and type for rST docstrings are at:
    http://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html

    Note: This function does not claim to handle all docstrings well. A list of
    limitations is available at the top of the file. It does aim to run without
    crashing in O(n) time on all strings on length n. If you find a string that
    causes this to crash or run unacceptably slowly, please consider submitting
    a pull request.

    Args:
      docstring: The docstring to parse.

    Returns:
      A DocstringInfo containing information about the docstring.
  summary: Returns DocstringInfo about the given docstring
  signatures:
  - - kind: positional
      name: docstring
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.docstrings
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.formatting
  kind: module
  ns: null
  description: Formatting utilities for use in creating help text.
  summary: Formatting utilities for use in creating help text
  signatures: null
  inherits_from: null
- name: Bold
  kind: function
  ns: fire.formatting
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BoldUnderline
  kind: function
  ns: fire.formatting
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: DoubleQuote
  kind: function
  ns: fire.formatting
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ELLIPSIS
  kind: const
  ns: fire.formatting
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: EllipsisMiddleTruncate
  kind: function
  ns: fire.formatting
  description: Truncates text from the middle with ellipsis.
  summary: Truncates text from the middle with ellipsis
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: available_space
      default: null
      rest: false
    - kind: positional
      name: line_length
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: EllipsisTruncate
  kind: function
  ns: fire.formatting
  description: Truncate text from the end with ellipsis.
  summary: Truncate text from the end with ellipsis
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: available_space
      default: null
      rest: false
    - kind: positional
      name: line_length
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Error
  kind: function
  ns: fire.formatting
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Indent
  kind: function
  ns: fire.formatting
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - kind: positional
      name: spaces
      default: '2'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Underline
  kind: function
  ns: fire.formatting
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: text
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WrappedJoin
  kind: function
  ns: fire.formatting
  description: Joins the items by the separator, wrapping lines at the given width.
  summary: Joins the items by the separator, wrapping lines at the given width
  signatures:
  - - kind: positional
      name: items
      default: null
      rest: false
    - kind: positional
      name: separator
      default: ' | '
      rest: false
    - kind: positional
      name: width
      default: '80'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.formatting
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.formatting
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: formatting_windows
  kind: module
  ns: fire.formatting
  description: This module is used for enabling formatting on Windows.
  summary: This module is used for enabling formatting on Windows
  signatures: null
  inherits_from: null
- name: HAS_COLORAMA
  kind: const
  ns: fire.formatting
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.formatting
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.formatting
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: initialize_or_disable
  kind: function
  ns: fire.formatting
  description: Enables ANSI processing on Windows or disables it as needed.
  summary: Enables ANSI processing on Windows or disables it as needed
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.formatting
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.formatting
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.formatting_windows
  kind: module
  ns: null
  description: This module is used for enabling formatting on Windows.
  summary: This module is used for enabling formatting on Windows
  signatures: null
  inherits_from: null
- name: HAS_COLORAMA
  kind: const
  ns: fire.formatting_windows
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.formatting_windows
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.formatting_windows
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: initialize_or_disable
  kind: function
  ns: fire.formatting_windows
  description: Enables ANSI processing on Windows or disables it as needed.
  summary: Enables ANSI processing on Windows or disables it as needed
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.formatting_windows
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.helptext
  kind: module
  ns: null
  description: |-
    Utilities for producing help strings for use in Fire CLIs.

    Can produce help strings suitable for display in Fire CLIs for any type of
    Python object, module, class, or function.

    There are two types of informative strings: Usage and Help screens.

    Usage screens are shown when the user accesses a group or accesses a command
    without calling it. A Usage screen shows information about how to use that group
    or command. Usage screens are typically short and show the minimal information
    necessary for the user to determine how to proceed.

    Help screens are shown when the user requests help with the help flag (--help).
    Help screens are shown in a less-style console view, and contain detailed help
    information.
  summary: Utilities for producing help strings for use in Fire CLIs
  signatures: null
  inherits_from: null
- name: ActionGroup
  kind: class
  ns: fire.helptext
  description: A group of actions of the same kind.
  summary: A group of actions of the same kind
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: plural
      default: null
      rest: false
    - type: ActionGroup
      kind: return
  inherits_from: null
- name: ActionGroup.Add
  kind: method
  ns: fire.helptext
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: name
      default: null
      rest: false
    - kind: positional
      name: member
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ActionGroup.GetItems
  kind: method
  ns: fire.helptext
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HelpText
  kind: function
  ns: fire.helptext
  description: |-
    Gets the help string for the current component, suitable for a help screen.

    Args:
      component: The component to construct the help string for.
      trace: The Fire trace of the command so far. The command executed so far
        can be extracted from this trace.
      verbose: Whether to include private members in the help screen.

    Returns:
      The full help screen as a string.
  summary: Gets the help string for the current component, suitable for a help screen
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - kind: positional
      name: trace
      default: None
      rest: false
    - kind: positional
      name: verbose
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: LINE_LENGTH
  kind: const
  ns: fire.helptext
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SECTION_INDENTATION
  kind: const
  ns: fire.helptext
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SUBSECTION_INDENTATION
  kind: const
  ns: fire.helptext
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UsageText
  kind: function
  ns: fire.helptext
  description: |-
    Returns usage text for the given component.

    Args:
      component: The component to determine the usage text for.
      trace: The Fire trace object containing all metadata of current execution.
      verbose: Whether to display the usage text in verbose mode.

    Returns:
      String suitable for display in an error screen.
  summary: Returns usage text for the given component
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - kind: positional
      name: trace
      default: None
      rest: false
    - kind: positional
      name: verbose
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.helptext
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.helptext
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.helptext
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.inspectutils
  kind: module
  ns: null
  description: Inspection utility functions for Python Fire.
  summary: Inspection utility functions for Python Fire
  signatures: null
  inherits_from: null
- name: FullArgSpec
  kind: class
  ns: fire.inspectutils
  description: The arguments of a function, as in Python 3's inspect.FullArgSpec.
  summary: The arguments of a function, as in Python 3's inspect
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: args
      default: None
      rest: false
    - kind: positional
      name: varargs
      default: None
      rest: false
    - kind: positional
      name: varkw
      default: None
      rest: false
    - kind: positional
      name: defaults
      default: None
      rest: false
    - kind: positional
      name: kwonlyargs
      default: None
      rest: false
    - kind: positional
      name: kwonlydefaults
      default: None
      rest: false
    - kind: positional
      name: annotations
      default: None
      rest: false
    - type: FullArgSpec
      kind: return
  inherits_from: null
- name: GetClassAttrsDict
  kind: function
  ns: fire.inspectutils
  description: Gets the attributes of the component class, as a dict with name keys.
  summary: Gets the attributes of the component class, as a dict with name keys
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GetFileAndLine
  kind: function
  ns: fire.inspectutils
  description: |-
    Returns the filename and line number of component.

    Args:
      component: A component to find the source information for, usually a class
          or routine.
    Returns:
      filename: The name of the file where component is defined.
      lineno: The line number where component is defined.
  summary: Returns the filename and line number of component
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: GetFullArgSpec
  kind: function
  ns: fire.inspectutils
  description: Returns a FullArgSpec describing the given callable.
  summary: Returns a FullArgSpec describing the given callable
  signatures:
  - - kind: positional
      name: fn
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Info
  kind: function
  ns: fire.inspectutils
  description: |-
    Returns a dict with information about the given component.

    The dict will have at least some of the following fields.
      type_name: The type of `component`.
      string_form: A string representation of `component`.
      file: The file in which `component` is defined.
      line: The line number at which `component` is defined.
      docstring: The docstring of `component`.
      init_docstring: The init docstring of `component`.
      class_docstring: The class docstring of `component`.
      call_docstring: The call docstring of `component`.
      length: The length of `component`.

    Args:
      component: The component to analyze.
    Returns:
      A dict with information about the component.
  summary: Returns a dict with information about the given component
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: IsCoroutineFunction
  kind: function
  ns: fire.inspectutils
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: fn
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: IsNamedTuple
  kind: function
  ns: fire.inspectutils
  description: |-
    Return true if the component is a namedtuple.

    Unfortunately, Python offers no native way to check for a namedtuple type.
    Instead, we need to use a simple hack which should suffice for our case.
    namedtuples are internally implemented as tuples, therefore we need to:
      1. Check if the component is an instance of tuple.
      2. Check if the component has a _fields attribute which regular tuples do
         not have.

    Args:
      component: The component to analyze.
    Returns:
      True if the component is a namedtuple or False otherwise.
  summary: Return true if the component is a namedtuple
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Py2GetArgSpec
  kind: function
  ns: fire.inspectutils
  description: A wrapper around getargspec that tries both fn and fn.__call__.
  summary: A wrapper around getargspec that tries both fn and fn
  signatures:
  - - kind: positional
      name: fn
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Py3GetFullArgSpec
  kind: function
  ns: fire.inspectutils
  description: |-
    A alternative to the builtin getfullargspec.

    The builtin inspect.getfullargspec uses:
    `skip_bound_args=False, follow_wrapped_chains=False`
    in order to be backwards compatible.

    This function instead skips bound args (self) and follows wrapped chains.

    Args:
      fn: The function or class of interest.
    Returns:
      An inspect.FullArgSpec namedtuple with the full arg spec of the function.
  summary: A alternative to the builtin getfullargspec
  signatures:
  - - kind: positional
      name: fn
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.inspectutils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.inspectutils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.inspectutils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.interact
  kind: module
  ns: null
  description: |-
    This module enables interactive mode in Python Fire.

    It uses IPython as an optional dependency. When IPython is installed, the
    interactive flag will use IPython's REPL. When IPython is not installed, the
    interactive flag will start a Python REPL with the builtin `code` module's
    InteractiveConsole class.
  summary: This module enables interactive mode in Python Fire
  signatures: null
  inherits_from: null
- name: Embed
  kind: function
  ns: fire.interact
  description: |-
    Drops into a Python REPL with variables available as local variables.

    Args:
      variables: A dict of variables to make available. Keys are variable names.
          Values are variable values.
      verbose: Whether to include 'hidden' members, those keys starting with _.
  summary: Drops into a Python REPL with variables available as local variables
  signatures:
  - - kind: positional
      name: variables
      default: null
      rest: false
    - kind: positional
      name: verbose
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.interact
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.interact
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.interact
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.parser
  kind: module
  ns: null
  description: Provides parsing functionality used by Python Fire.
  summary: Provides parsing functionality used by Python Fire
  signatures: null
  inherits_from: null
- name: CreateParser
  kind: function
  ns: fire.parser
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: DefaultParseValue
  kind: function
  ns: fire.parser
  description: |-
    The default argument parsing function used by Fire CLIs.

    If the value is made of only Python literals and containers, then the value
    is parsed as it's Python value. Otherwise, provided the value contains no
    quote, escape, or parenthetical characters, the value is treated as a string.

    Args:
      value: A string from the command line to be parsed for use in a Fire CLI.
    Returns:
      The parsed value, of the type determined most appropriate.
  summary: The default argument parsing function used by Fire CLIs
  signatures:
  - - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SeparateFlagArgs
  kind: function
  ns: fire.parser
  description: |-
    Splits a list of args into those for Flags and those for Fire.

    If an isolated '--' arg is not present in the arg list, then all of the args
    are for Fire. If there is an isolated '--', then the args after the final '--'
    are flag args, and the rest of the args are fire args.

    Args:
      args: The list of arguments received by the Fire command.
    Returns:
      A tuple with the Fire args (a list), followed by the Flag args (a list).
  summary: Splits a list of args into those for Flags and those for Fire
  signatures:
  - - kind: positional
      name: args
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.parser
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.parser
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.parser
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.test_components
  kind: module
  ns: null
  description: This module has components that are used for testing Python Fire.
  summary: This module has components that are used for testing Python Fire
  signatures: null
  inherits_from: null
- name: Annotations
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: Annotations
      kind: return
  inherits_from: null
- name: Annotations.double
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Annotations.triple
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BinaryCanvas
  kind: class
  ns: fire.test_components
  description: A canvas with which to make binary art, one bit at a time.
  summary: A canvas with which to make binary art, one bit at a time
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: size
      default: '10'
      rest: false
    - type: BinaryCanvas
      kind: return
  inherits_from: null
- name: BinaryCanvas.move
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: row
      default: null
      rest: false
    - kind: positional
      name: col
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BinaryCanvas.off
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BinaryCanvas.on
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BinaryCanvas.set
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BinaryCanvas.show
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: BoolConverter
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: BoolConverter
      kind: return
  inherits_from: null
- name: BoolConverter.as_bool
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: arg
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CALLABLE_WITH_KEYWORD_ARGUMENT
  kind: callable
  ns: fire.test_components
  description: Test class for supporting callable.
  summary: Test class for supporting callable
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CallableWithKeywordArgument
  kind: class
  ns: fire.test_components
  description: Test class for supporting callable.
  summary: Test class for supporting callable
  signatures:
  - - type: CallableWithKeywordArgument
      kind: return
  inherits_from: null
- name: CallableWithKeywordArgument.print_msg
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: msg
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CallableWithPositionalArgs
  kind: class
  ns: fire.test_components
  description: Test class for supporting callable.
  summary: Test class for supporting callable
  signatures:
  - - type: CallableWithPositionalArgs
      kind: return
  inherits_from: null
- name: CallableWithPositionalArgs.TEST
  kind: property
  ns: fire.test_components
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: CallableWithPositionalArgs.fn
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: x
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CapitalizedArgNames
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: CapitalizedArgNames
      kind: return
  inherits_from: null
- name: CapitalizedArgNames.sum
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: Delta
      default: '1.0'
      rest: false
    - kind: positional
      name: Gamma
      default: '2.0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: CircularReference
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: CircularReference
      kind: return
  inherits_from: null
- name: CircularReference.create
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ClassWithDocstring
  kind: class
  ns: fire.test_components
  description: |-
    Test class for testing help text output.

    This is some detail description of this test class.
  summary: Test class for testing help text output
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: message
      default: Hello!
      rest: false
    - type: ClassWithDocstring
      kind: return
  inherits_from: null
- name: ClassWithDocstring.print_msg
  kind: method
  ns: fire.test_components
  description: Prints a message.
  summary: Prints a message
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: msg
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ClassWithMultilineDocstring
  kind: class
  ns: fire.test_components
  description: |-
    Test class for testing help text output with multiline docstring.

    This is a test class that has a long docstring description that spans across
    multiple lines for testing line breaking in help text.
  summary: Test class for testing help text output with multiline docstring
  signatures:
  - - type: ClassWithMultilineDocstring
      kind: return
  inherits_from: null
- name: ClassWithMultilineDocstring.example_generator
  kind: method
  ns: fire.test_components
  description: |-
    Generators have a ``Yields`` section instead of a ``Returns`` section.

    Args:
        n (int): The upper limit of the range to generate, from 0 to `n` - 1.

    Yields:
        int: The next number in the range of 0 to `n` - 1.

    Examples:
        Examples should be written in doctest format, and should illustrate how
        to use the function.

        >>> print([i for i in example_generator(4)])
        [0, 1, 2, 3]
  summary: Generators have a ``Yields`` section instead of a ``Returns`` section
  signatures:
  - - kind: positional
      name: n
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Color
  kind: class
  ns: fire.test_components
  description: |-
    Create a collection of name/value pairs.

    Example enumeration:

    >>> class Color(Enum):
    ...     RED = 1
    ...     BLUE = 2
    ...     GREEN = 3

    Access them by:

    - attribute access::

    >>> Color.RED
    <Color.RED: 1>

    - value lookup:

    >>> Color(1)
    <Color.RED: 1>

    - name lookup:

    >>> Color['RED']
    <Color.RED: 1>

    Enumerations can be iterated over, and know how many members they have:

    >>> len(Color)
    3

    >>> list(Color)
    [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

    Methods can be added to enumerations, and members can have their own
    attributes -- see the documentation for details.
  summary: Create a collection of name/value pairs
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: names
      default: None
      rest: false
    - name: module
      default: None
      rest: false
      kind: kw-only
    - name: qualname
      default: None
      rest: false
      kind: kw-only
    - name: type
      default: None
      rest: false
      kind: kw-only
    - name: start
      default: '1'
      rest: false
      kind: kw-only
    - name: boundary
      default: None
      rest: false
      kind: kw-only
    - type: Color
      kind: return
  inherits_from:
  - <enum 'Enum'>
- name: Color.BLUE
  kind: property
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Color.GREEN
  kind: property
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Color.RED
  kind: property
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Color.name
  kind: property
  ns: fire.test_components
  description: The name of the Enum member.
  summary: The name of the Enum member
  signatures: null
  inherits_from: null
- name: Color.value
  kind: property
  ns: fire.test_components
  description: The value of the Enum member.
  summary: The value of the Enum member
  signatures: null
  inherits_from: null
- name: DefaultMethod
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: DefaultMethod
      kind: return
  inherits_from: null
- name: DefaultMethod.double
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: number
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Empty
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: Empty
      kind: return
  inherits_from: null
- name: EmptyDictOutput
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: EmptyDictOutput
      kind: return
  inherits_from: null
- name: EmptyDictOutput.nothing_printable
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: EmptyDictOutput.totally_empty
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ErrorInConstructor
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: value
      rest: false
    - type: ErrorInConstructor
      kind: return
  inherits_from: null
- name: ErrorRaiser
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: ErrorRaiser
      kind: return
  inherits_from: null
- name: ErrorRaiser.fail
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HasStaticAndClassMethods
  kind: class
  ns: fire.test_components
  description: A class with a static method and a class method.
  summary: A class with a static method and a class method
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: instance_state
      default: null
      rest: false
    - type: HasStaticAndClassMethods
      kind: return
  inherits_from: null
- name: HasStaticAndClassMethods.CLASS_STATE
  kind: property
  ns: fire.test_components
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: HasStaticAndClassMethods.class_fn
  kind: function
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: cls
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: HasStaticAndClassMethods.static_fn
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: args
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: InstanceVars
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: arg1
      default: null
      rest: false
    - kind: positional
      name: arg2
      default: null
      rest: false
    - type: InstanceVars
      kind: return
  inherits_from: null
- name: InstanceVars.run
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: arg1
      default: null
      rest: false
    - kind: positional
      name: arg2
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: InvalidProperty
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: InvalidProperty
      kind: return
  inherits_from: null
- name: InvalidProperty.double
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: number
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: InvalidProperty.prop
  kind: property
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Kwargs
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: Kwargs
      kind: return
  inherits_from: null
- name: Kwargs.props
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Kwargs.run
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: positional
      default: null
      rest: false
    - kind: positional
      name: named
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Kwargs.upper
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MixedDefaults
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: MixedDefaults
      kind: return
  inherits_from: null
- name: MixedDefaults.identity
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: alpha
      default: null
      rest: false
    - kind: positional
      name: beta
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MixedDefaults.sum
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: alpha
      default: '0'
      rest: false
    - kind: positional
      name: beta
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: MixedDefaults.ten
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NamedTuple
  kind: class
  ns: fire.test_components
  description: Functions returning named tuples used for testing.
  summary: Functions returning named tuples used for testing
  signatures:
  - - type: NamedTuple
      kind: return
  inherits_from: null
- name: NamedTuple.matching_names
  kind: method
  ns: fire.test_components
  description: Field name equals value.
  summary: Field name equals value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NamedTuple.point
  kind: method
  ns: fire.test_components
  description: Point example straight from Python docs.
  summary: Point example straight from Python docs
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NamedTuplePoint
  kind: class
  ns: fire.test_components
  description: NamedTuplePoint(x, y)
  summary: NamedTuplePoint(x, y)
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: x
      default: null
      rest: false
    - kind: positional
      name: y
      default: null
      rest: false
    - type: NamedTuplePoint
      kind: return
  inherits_from:
  - <class 'tuple'>
- name: NamedTuplePoint.count
  kind: callable
  ns: fire.test_components
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NamedTuplePoint.index
  kind: callable
  ns: fire.test_components
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NamedTuplePoint.x
  kind: property
  ns: fire.test_components
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: NamedTuplePoint.y
  kind: property
  ns: fire.test_components
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: NoDefaults
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: NoDefaults
      kind: return
  inherits_from: null
- name: NoDefaults.double
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NoDefaults.triple
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NonComparable
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: NonComparable
      kind: return
  inherits_from: null
- name: NumberDefaults
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: NumberDefaults
      kind: return
  inherits_from: null
- name: NumberDefaults.integer_reciprocal
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: divisor
      default: '10'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: NumberDefaults.reciprocal
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: divisor
      default: '10.0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: OldStyleEmpty
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: OldStyleEmpty
      kind: return
  inherits_from: null
- name: OldStyleWithDefaults
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: OldStyleWithDefaults
      kind: return
  inherits_from: null
- name: OldStyleWithDefaults.double
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: OldStyleWithDefaults.triple
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: OrderedDictionary
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: OrderedDictionary
      kind: return
  inherits_from: null
- name: OrderedDictionary.empty
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: OrderedDictionary.non_empty
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: ReturnsObj
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: ReturnsObj
      kind: return
  inherits_from: null
- name: ReturnsObj.get_obj
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SUBDICT
  kind: const
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: SimilarArgNames
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: SimilarArgNames
      kind: return
  inherits_from: null
- name: SimilarArgNames.identity
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: bool_one
      default: 'False'
      rest: false
    - kind: positional
      name: bool_two
      default: 'False'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SimilarArgNames.identity2
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: a
      default: None
      rest: false
    - kind: positional
      name: alpha
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SubPoint
  kind: class
  ns: fire.test_components
  description: Used for verifying subclasses of namedtuples behave as intended.
  summary: Used for verifying subclasses of namedtuples behave as intended
  signatures:
  - - kind: positional
      name: _cls
      default: null
      rest: false
    - kind: positional
      name: x
      default: null
      rest: false
    - kind: positional
      name: y
      default: null
      rest: false
    - type: SubPoint
      kind: return
  inherits_from:
  - <class 'fire.test_components.NamedTuplePoint'>
  - <class 'tuple'>
- name: SubPoint.coordinate_sum
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SubPoint.count
  kind: callable
  ns: fire.test_components
  description: Return number of occurrences of value.
  summary: Return number of occurrences of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SubPoint.index
  kind: callable
  ns: fire.test_components
  description: |-
    Return first index of value.

    Raises ValueError if the value is not present.
  summary: Return first index of value
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: null
      rest: false
    - kind: positional
      name: start
      default: '0'
      rest: false
    - kind: positional
      name: stop
      default: '9223372036854775807'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: SubPoint.x
  kind: property
  ns: fire.test_components
  description: Alias for field number 0
  summary: Alias for field number 0
  signatures: null
  inherits_from: null
- name: SubPoint.y
  kind: property
  ns: fire.test_components
  description: Alias for field number 1
  summary: Alias for field number 1
  signatures: null
  inherits_from: null
- name: Subdict
  kind: class
  ns: fire.test_components
  description: A subclass of dict, for testing purposes.
  summary: A subclass of dict, for testing purposes
  signatures: null
  inherits_from:
  - <class 'dict'>
- name: Subdict.clear
  kind: callable
  ns: fire.test_components
  description: D.clear() -> None.  Remove all items from D.
  summary: D
  signatures: null
  inherits_from: null
- name: Subdict.copy
  kind: callable
  ns: fire.test_components
  description: D.copy() -> a shallow copy of D
  summary: D
  signatures: null
  inherits_from: null
- name: Subdict.get
  kind: callable
  ns: fire.test_components
  description: Return the value for key if key is in the dictionary, else default.
  summary: Return the value for key if key is in the dictionary, else default
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Subdict.items
  kind: callable
  ns: fire.test_components
  description: D.items() -> a set-like object providing a view on D's items
  summary: D
  signatures: null
  inherits_from: null
- name: Subdict.keys
  kind: callable
  ns: fire.test_components
  description: D.keys() -> a set-like object providing a view on D's keys
  summary: D
  signatures: null
  inherits_from: null
- name: Subdict.pop
  kind: callable
  ns: fire.test_components
  description: |-
    D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

    If the key is not found, return the default if given; otherwise,
    raise a KeyError.
  summary: D
  signatures: null
  inherits_from: null
- name: Subdict.popitem
  kind: callable
  ns: fire.test_components
  description: |-
    Remove and return a (key, value) pair as a 2-tuple.

    Pairs are returned in LIFO (last-in, first-out) order.
    Raises KeyError if the dict is empty.
  summary: Remove and return a (key, value) pair as a 2-tuple
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Subdict.setdefault
  kind: callable
  ns: fire.test_components
  description: |-
    Insert key with a value of default if key is not in the dictionary.

    Return the value for key if key is in the dictionary, else default.
  summary: Insert key with a value of default if key is not in the dictionary
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: key
      default: null
      rest: false
    - kind: positional
      name: default
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: Subdict.update
  kind: callable
  ns: fire.test_components
  description: |-
    D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
    If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
    If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
    In either case, this is followed by: for k in F:  D[k] = F[k]
  summary: D
  signatures: null
  inherits_from: null
- name: Subdict.values
  kind: callable
  ns: fire.test_components
  description: D.values() -> an object providing a view on D's values
  summary: D
  signatures: null
  inherits_from: null
- name: TypedProperties
  kind: class
  ns: fire.test_components
  description: Test class for testing Python Fire with properties of various types.
  summary: Test class for testing Python Fire with properties of various types
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: TypedProperties
      kind: return
  inherits_from: null
- name: Underscores
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: Underscores
      kind: return
  inherits_from: null
- name: Underscores.underscore_function
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: underscore_arg
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: VarArgs
  kind: class
  ns: fire.test_components
  description: Test class for testing Python Fire with a property with varargs.
  summary: Test class for testing Python Fire with a property with varargs
  signatures:
  - - type: VarArgs
      kind: return
  inherits_from: null
- name: VarArgs.cumsums
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: VarArgs.varchars
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: alpha
      default: '0'
      rest: false
    - kind: positional
      name: beta
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WithDefaults
  kind: class
  ns: fire.test_components
  description: Class with functions that have default arguments.
  summary: Class with functions that have default arguments
  signatures:
  - - type: WithDefaults
      kind: return
  inherits_from: null
- name: WithDefaults.double
  kind: method
  ns: fire.test_components
  description: |-
    Returns the input multiplied by 2.

    Args:
      count: Input number that you want to double.

    Returns:
      A number that is the double of count.
  summary: Returns the input multiplied by 2
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WithDefaults.text
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: string
      default: '00010203040506070809101112131415161718192021222324252627282930313233343536373839'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WithDefaults.triple
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WithHelpArg
  kind: class
  ns: fire.test_components
  description: Test class for testing when class has a help= arg.
  summary: Test class for testing when class has a help= arg
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: help
      default: 'True'
      rest: false
    - type: WithHelpArg
      kind: return
  inherits_from: null
- name: WithInit
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: WithInit
      kind: return
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: decorated_method
  kind: function
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: division
  kind: const
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fn_with_code_in_docstring
  kind: function
  ns: fire.test_components
  description: |-
    This has code in the docstring.



    Example:
      x = fn_with_code_in_docstring()
      indentation_matters = True



    Returns:
      True.
  summary: This has code in the docstring
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: fn_with_kwarg
  kind: function
  ns: fire.test_components
  description: |-
    Function with kwarg.

    :param arg1: Description of arg1.
    :param arg2: Description of arg2.
    :key arg3: Description of arg3.
  summary: Function with kwarg
  signatures:
  - - kind: positional
      name: arg1
      default: null
      rest: false
    - kind: positional
      name: arg2
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: fn_with_kwarg_and_defaults
  kind: function
  ns: fire.test_components
  description: |-
    Function with kwarg and defaults.

    :param arg1: Description of arg1.
    :param arg2: Description of arg2.
    :key arg3: Description of arg3.
  summary: Function with kwarg and defaults
  signatures:
  - - kind: positional
      name: arg1
      default: null
      rest: false
    - kind: positional
      name: arg2
      default: null
      rest: false
    - kind: positional
      name: opt
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: fn_with_multiple_defaults
  kind: function
  ns: fire.test_components
  description: |-
    Function with kwarg and defaults.

    :key first: Description of first.
    :key last: Description of last.
    :key late: Description of late.
  summary: Function with kwarg and defaults
  signatures:
  - - kind: positional
      name: first
      default: first
      rest: false
    - kind: positional
      name: last
      default: last
      rest: false
    - kind: positional
      name: late
      default: late
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: function_with_help
  kind: function
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: help
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: function_with_keyword_arguments
  kind: function
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: arg1
      default: null
      rest: false
    - kind: positional
      name: arg2
      default: '3'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: function_with_varargs
  kind: function
  ns: fire.test_components
  description: |-
    Function with varargs.

    Args:
      arg1: Position arg docstring.
      arg2: Position arg docstring.
      arg3: Flags docstring.
      *varargs: Accepts unlimited positional args.
    Returns:
      The unlimited positional args.
  summary: Function with varargs
  signatures:
  - - kind: positional
      name: arg1
      default: null
      rest: false
    - kind: positional
      name: arg2
      default: null
      rest: false
    - kind: positional
      name: arg3
      default: '1'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: identity
  kind: function
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: arg1
      default: null
      rest: false
    - kind: positional
      name: arg2
      default: null
      rest: false
    - kind: positional
      name: arg3
      default: '10'
      rest: false
    - kind: positional
      name: arg4
      default: '20'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: multiplier_with_docstring
  kind: function
  ns: fire.test_components
  description: |-
    Multiplies num by rate.

    Args:
      num (int): the num you want to multiply
      rate (int): the rate for multiplication
    Returns:
      Multiplication of num by rate
  summary: Multiplies num by rate
  signatures:
  - - kind: positional
      name: num
      default: null
      rest: false
    - kind: positional
      name: rate
      default: '2'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: py3
  kind: module
  ns: fire.test_components
  description: This module has components that use Python 3 specific syntax.
  summary: This module has components that use Python 3 specific syntax
  signatures: null
  inherits_from: null
- name: HelpTextComponent
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: HelpTextComponent
      kind: return
  inherits_from: null
- name: HelpTextComponent.identity
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: alpha
      default: null
      rest: false
      kind: kw-only
    - name: beta
      default: '0'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: KeywordOnly
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: KeywordOnly
      kind: return
  inherits_from: null
- name: KeywordOnly.double
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: count
      default: null
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: KeywordOnly.triple
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: count
      default: null
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: KeywordOnly.with_default
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - name: x
      default: x
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: LruCacheDecoratedMethod
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: LruCacheDecoratedMethod
      kind: return
  inherits_from: null
- name: LruCacheDecoratedMethod.lru_cache_in_class
  kind: callable
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Tuple
  kind: callable
  ns: fire.test_components
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WithAsyncio
  kind: class
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: WithAsyncio
      kind: return
  inherits_from: null
- name: WithAsyncio.double
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WithDefaultsAndTypes
  kind: class
  ns: fire.test_components
  description: Class with functions that have default arguments and types.
  summary: Class with functions that have default arguments and types
  signatures:
  - - type: WithDefaultsAndTypes
      kind: return
  inherits_from: null
- name: WithDefaultsAndTypes.double
  kind: method
  ns: fire.test_components
  description: |-
    Returns the input multiplied by 2.

    Args:
      count: Input number that you want to double.

    Returns:
      A number that is the double of count.
  summary: Returns the input multiplied by 2
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: '0'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WithDefaultsAndTypes.get_int
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: value
      default: None
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WithTypes
  kind: class
  ns: fire.test_components
  description: Class with functions that have default arguments and types.
  summary: Class with functions that have default arguments and types
  signatures:
  - - type: WithTypes
      kind: return
  inherits_from: null
- name: WithTypes.double
  kind: method
  ns: fire.test_components
  description: |-
    Returns the input multiplied by 2.

    Args:
      count: Input number that you want to double.

    Returns:
      A number that is the double of count.
  summary: Returns the input multiplied by 2
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: count
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: WithTypes.long_type
  kind: method
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: long_obj
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: identity
  kind: function
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: arg1
      default: null
      rest: false
    - kind: positional
      name: arg2
      default: null
      rest: false
    - kind: positional
      name: arg3
      default: '10'
      rest: false
    - kind: positional
      name: arg4
      default: '20'
      rest: false
    - name: arg6
      default: null
      rest: false
      kind: kw-only
    - name: arg7
      default: null
      rest: false
      kind: kw-only
    - name: arg8
      default: '30'
      rest: false
      kind: kw-only
    - name: arg9
      default: '40'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: lru_cache_decorated
  kind: callable
  ns: fire.test_components
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: simple_decorator
  kind: function
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: f
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: simple_frozenset
  kind: function
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: simple_set
  kind: function
  ns: fire.test_components
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: fire.test_components_bin
  kind: module
  ns: null
  description: |-
    Python Fire test components Fire CLI.

    This file is useful for replicating test results manually.
  summary: Python Fire test components Fire CLI
  signatures: null
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.test_components_bin
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.test_components_bin
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: main
  kind: function
  ns: fire.test_components_bin
  description: null
  summary: ''
  signatures:
  - - type: '?'
      kind: return
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.test_components_bin
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.test_components_py3
  kind: module
  ns: null
  description: This module has components that use Python 3 specific syntax.
  summary: This module has components that use Python 3 specific syntax
  signatures: null
  inherits_from: null
- name: Tuple
  kind: callable
  ns: fire.test_components_py3
  description: |-
    Deprecated alias to builtins.tuple.

    Tuple[X, Y] is the cross-product type of X and Y.

    Example: Tuple[T1, T2] is a tuple of two elements corresponding
    to type variables T1 and T2.  Tuple[int, float, str] is a tuple
    of an int, a float and a string.

    To specify a variable-length tuple of homogeneous type, use Tuple[T, ...].
  summary: Deprecated alias to builtins
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: identity
  kind: function
  ns: fire.test_components_py3
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: arg1
      default: null
      rest: false
    - kind: positional
      name: arg2
      default: null
      rest: false
    - kind: positional
      name: arg3
      default: '10'
      rest: false
    - kind: positional
      name: arg4
      default: '20'
      rest: false
    - name: arg6
      default: null
      rest: false
      kind: kw-only
    - name: arg7
      default: null
      rest: false
      kind: kw-only
    - name: arg8
      default: '30'
      rest: false
      kind: kw-only
    - name: arg9
      default: '40'
      rest: false
      kind: kw-only
    - type: '?'
      kind: return
  inherits_from: null
- name: lru_cache_decorated
  kind: callable
  ns: fire.test_components_py3
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.trace
  kind: module
  ns: null
  description: |-
    This module has classes for tracing the execution of a Fire execution.

    A FireTrace consists of a sequence of FireTraceElement objects. Each element
    represents an action taken by Fire during a single Fire execution. An action may
    be instantiating a class, calling a routine, or accessing a property.

    Each action consumes args and results in a new component. The final component
    is serialized to stdout by Fire as well as returned by the Fire method. If
    a Fire usage error occurs, such as insufficient arguments being provided to call
    a function, then that error will be captured in the trace and the final
    component will be None.
  summary: This module has classes for tracing the execution of a Fire execution
  signatures: null
  inherits_from: null
- name: ACCESSED_PROPERTY
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CALLED_CALLABLE
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CALLED_ROUTINE
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: COMPLETION_SCRIPT
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FireTrace
  kind: class
  ns: fire.trace
  description: |-
    A FireTrace represents the steps taken during a single Fire execution.

    A FireTrace consists of a sequence of FireTraceElement objects. Each element
    represents an action taken by Fire during a single Fire execution. An action
    may be instantiating a class, calling a routine, or accessing a property.
  summary: A FireTrace represents the steps taken during a single Fire execution
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: initial_component
      default: null
      rest: false
    - kind: positional
      name: name
      default: None
      rest: false
    - kind: positional
      name: separator
      default: '-'
      rest: false
    - kind: positional
      name: verbose
      default: 'False'
      rest: false
    - kind: positional
      name: show_help
      default: 'False'
      rest: false
    - kind: positional
      name: show_trace
      default: 'False'
      rest: false
    - type: FireTrace
      kind: return
  inherits_from: null
- name: FireTrace.AddAccessedProperty
  kind: method
  ns: fire.trace
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: component
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - kind: positional
      name: filename
      default: null
      rest: false
    - kind: positional
      name: lineno
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.AddCalledComponent
  kind: method
  ns: fire.trace
  description: |-
    Adds an element to the trace indicating that a component was called.

    Also applies to instantiating a class.

    Args:
      component: The result of calling the callable.
      target: The name of the callable.
      args: The args consumed in order to call this callable.
      filename: The file in which the callable is defined, or None if N/A.
      lineno: The line number on which the callable is defined, or None if N/A.
      capacity: (bool) Whether the callable could have accepted additional args.
      action: The value to include as the action in the FireTraceElement.
  summary: Adds an element to the trace indicating that a component was called
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: component
      default: null
      rest: false
    - kind: positional
      name: target
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - kind: positional
      name: filename
      default: null
      rest: false
    - kind: positional
      name: lineno
      default: null
      rest: false
    - kind: positional
      name: capacity
      default: null
      rest: false
    - kind: positional
      name: action
      default: Called callable
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.AddCompletionScript
  kind: method
  ns: fire.trace
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: script
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.AddError
  kind: method
  ns: fire.trace
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: error
      default: null
      rest: false
    - kind: positional
      name: args
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.AddInteractiveMode
  kind: method
  ns: fire.trace
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.AddSeparator
  kind: method
  ns: fire.trace
  description: |-
    Marks that the most recent element of the trace used  a separator.

    A separator is an argument you can pass to a Fire CLI to separate args left
    of the separator from args right of the separator.

    Here's an example to demonstrate the separator. Let's say you have a
    function that takes a variable number of args, and you want to call that
    function, and then upper case the result. Here's how to do it:

    # in Python
    def display(arg1, arg2='!'):
      return arg1 + arg2

    # from Bash (the default separator is the hyphen -)
    display hello   # hello!
    display hello upper # helloupper
    display hello - upper # HELLO!

    Note how the separator caused the display function to be called with the
    default value for arg2.
  summary: Marks that the most recent element of the trace used a separator
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.GetCommand
  kind: method
  ns: fire.trace
  description: |-
    Returns the command representing the trace up to this point.

    Args:
      include_separators: Whether or not to include separators in the command.

    Returns:
      A string representing a Fire CLI command that would produce this trace.
  summary: Returns the command representing the trace up to this point
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: include_separators
      default: 'True'
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.GetLastHealthyElement
  kind: method
  ns: fire.trace
  description: |-
    Returns the last element of the trace that is not an error.

    This element will contain the final component indicated by the trace.

    Returns:
      The last element of the trace that is not an error.
  summary: Returns the last element of the trace that is not an error
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.GetResult
  kind: method
  ns: fire.trace
  description: Returns the component from the last element of the trace.
  summary: Returns the component from the last element of the trace
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.HasError
  kind: method
  ns: fire.trace
  description: Returns whether the Fire execution encountered a Fire usage error.
  summary: Returns whether the Fire execution encountered a Fire usage error
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.NeedsSeparatingHyphenHyphen
  kind: method
  ns: fire.trace
  description: |-
    Returns whether a the trace need '--' before '--help'.

    '--' is needed when the component takes keyword arguments, when the value of
    flag matches one of the argument of the component, or the component takes in
    keyword-only arguments(e.g. argument with default value).

    Args:
      flag: the flag available for the trace

    Returns:
      True for needed '--', False otherwise.
  summary: Returns whether a the trace need '--' before '--help'
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: flag
      default: help
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTrace.NeedsSeparator
  kind: method
  ns: fire.trace
  description: |-
    Returns whether a separator should be added to the command.

    If the command is a function call, then adding an additional argument to the
    command sometimes would add an extra arg to the function call, and sometimes
    would add an arg acting on the result of the function call.

    This function tells us whether we should add a separator to the command
    before adding additional arguments in order to make sure the arg is applied
    to the result of the function call, and not the function call itself.

    Returns:
      Whether a separator should be added to the command if order to keep the
      component referred to by the command the same when adding additional args.
  summary: Returns whether a separator should be added to the command
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTraceElement
  kind: class
  ns: fire.trace
  description: |-
    A FireTraceElement represents a single step taken by a Fire execution.

    Examples of a FireTraceElement are the instantiation of a class or the
    accessing of an object member.
  summary: A FireTraceElement represents a single step taken by a Fire execution
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - kind: positional
      name: component
      default: None
      rest: false
    - kind: positional
      name: action
      default: None
      rest: false
    - kind: positional
      name: target
      default: None
      rest: false
    - kind: positional
      name: args
      default: None
      rest: false
    - kind: positional
      name: filename
      default: None
      rest: false
    - kind: positional
      name: lineno
      default: None
      rest: false
    - kind: positional
      name: error
      default: None
      rest: false
    - kind: positional
      name: capacity
      default: None
      rest: false
    - type: FireTraceElement
      kind: return
  inherits_from: null
- name: FireTraceElement.AddSeparator
  kind: method
  ns: fire.trace
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTraceElement.ErrorAsStr
  kind: method
  ns: fire.trace
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTraceElement.HasCapacity
  kind: method
  ns: fire.trace
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTraceElement.HasError
  kind: method
  ns: fire.trace
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: FireTraceElement.HasSeparator
  kind: method
  ns: fire.trace
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: self
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: INITIAL_COMPONENT
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: INSTANTIATED_CLASS
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: INTERACTIVE_MODE
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.trace
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: fire.value_types
  kind: module
  ns: null
  description: Types of values.
  summary: Types of values
  signatures: null
  inherits_from: null
- name: HasCustomStr
  kind: function
  ns: fire.value_types
  description: |-
    Determines if a component has a custom __str__ method.

    Uses inspect.classify_class_attrs to determine the origin of the object's
    __str__ method, if one is present. If it defined by `object` itself, then
    it is not considered custom. Otherwise it is. This means that the __str__
    methods of primitives like ints and floats are considered custom.

    Objects with custom __str__ methods are treated as values and can be
    serialized in places where more complex objects would have their help screen
    shown instead.

    Args:
      component: The object to check for a custom __str__ method.
    Returns:
      Whether `component` has a custom __str__ method.
  summary: Determines if a component has a custom __str__ method
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: IsCommand
  kind: function
  ns: fire.value_types
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: IsGroup
  kind: function
  ns: fire.value_types
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: IsSimpleGroup
  kind: function
  ns: fire.value_types
  description: |-
    If a group is simple enough, then we treat it as a value in PrintResult.

    Only if a group contains all value types do we consider it simple enough to
    print as a value.

    Args:
      component: The group to check for value-group status.
    Returns:
      A boolean indicating if the group should be treated as a value for printing
      purposes.
  summary: If a group is simple enough, then we treat it as a value in PrintResult
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: IsValue
  kind: function
  ns: fire.value_types
  description: null
  summary: ''
  signatures:
  - - kind: positional
      name: component
      default: null
      rest: false
    - type: '?'
      kind: return
  inherits_from: null
- name: VALUE_TYPES
  kind: const
  ns: fire.value_types
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: absolute_import
  kind: const
  ns: fire.value_types
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: division
  kind: const
  ns: fire.value_types
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: print_function
  kind: const
  ns: fire.value_types
  description: null
  summary: ''
  signatures: null
  inherits_from: null
