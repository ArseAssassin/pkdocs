---
name: click
text_format: rst
generator: src:python
generator_command: src:python use "click"
version: 8.1.7
description: |
  \$ click\_
  ==========

  Click is a Python package for creating beautiful command line interfaces
  in a composable way with as little code as necessary. It's the "Command
  Line Interface Creation Kit". It's highly configurable but comes with
  sensible defaults out of the box.

  It aims to make the process of writing command line tools quick and fun
  while also preventing any frustration caused by the inability to
  implement an intended CLI API.

  Click in three points:

  -   Arbitrary nesting of commands
  -   Automatic help page generation
  -   Supports lazy loading of subcommands at runtime


  Installing
  ----------

  Install and update using `pip`_:

  .. code-block:: text

      $ pip install -U click

  .. _pip: https://pip.pypa.io/en/stable/getting-started/


  A Simple Example
  ----------------

  .. code-block:: python

      import click

      @click.command()
      @click.option("--count", default=1, help="Number of greetings.")
      @click.option("--name", prompt="Your name", help="The person to greet.")
      def hello(count, name):
          """Simple program that greets NAME for a total of COUNT times."""
          for _ in range(count):
              click.echo(f"Hello, {name}!")

      if __name__ == '__main__':
          hello()

  .. code-block:: text

      $ python hello.py --count=3
      Your name: Click
      Hello, Click!
      Hello, Click!
      Hello, Click!


  Donate
  ------

  The Pallets organization develops and supports Click and other popular
  packages. In order to grow the community of contributors and users, and
  allow the maintainers to devote more time to the projects, `please
  donate today`_.

  .. _please donate today: https://palletsprojects.com/donate


  Links
  -----

  -   Documentation: https://click.palletsprojects.com/
  -   Changes: https://click.palletsprojects.com/changes/
  -   PyPI Releases: https://pypi.org/project/click/
  -   Source Code: https://github.com/pallets/click
  -   Issue Tracker: https://github.com/pallets/click/issues
  -   Chat: https://discord.gg/pallets
homepage: https://palletsprojects.com/p/click/
license: BSD-3-Clause

---
- name: click
  kind: module
  ns: null
  description: |-
    Click is a simple Python module inspired by the stdlib optparse to make
    writing command line scripts fun. Unlike other modules, it's based
    around a simple API that does not come with too much magic and is
    composable.
  summary: Click is a simple Python module inspired by the stdlib optparse to make
  signatures: null
  inherits_from: null
- name: Abort
  kind: class
  ns: click
  description: An internal signalling exception that signals Click to abort.
  summary: An internal signalling exception that signals Click to abort
  signatures: null
  inherits_from:
  - <class 'RuntimeError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Abort.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Abort.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Abort.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Argument
  kind: class
  ns: click
  description: |-
    Arguments are positional parameters to a command.  They generally
    provide fewer features than options but can have infinite ``nargs``
    and are required by default.

    All parameters are passed onwards to the constructor of :class:`Parameter`.
  summary: Arguments are positional parameters to a command
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param_decls
    default: null
    rest: false
  - kind: positional
    name: required
    default: None
    rest: false
  - type: Argument
  inherits_from:
  - <class 'click.core.Parameter'>
- name: Argument.add_to_parser
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: parser
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.consume_value
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: opts
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.get_default
  kind: method
  ns: click
  description: |-
    Get the default for the parameter. Tries
    :meth:`Context.lookup_default` first, then the local default.

    :param ctx: Current context.
    :param call: If the default is a callable, call it. Disable to
        return the callable instead.

    .. versionchanged:: 8.0.2
        Type casting is no longer performed when getting a default.

    .. versionchanged:: 8.0.1
        Type casting can fail in resilient parsing mode. Invalid
        defaults will not prevent showing help text.

    .. versionchanged:: 8.0
        Looks at ``ctx.default_map`` first.

    .. versionchanged:: 8.0
        Added the ``call`` parameter.
  summary: Get the default for the parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: call
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.get_error_hint
  kind: method
  ns: click
  description: |-
    Get a stringified version of the param for use in error messages to
    indicate which param caused the error.
  summary: Get a stringified version of the param for use in error messages to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.get_help_record
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.get_usage_pieces
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.handle_parse_result
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: opts
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.human_readable_name
  kind: property
  ns: click
  description: |-
    Returns the human readable name of this parameter.  This is the
    same as the name for options, but the metavar for arguments.
  summary: Returns the human readable name of this parameter
  signatures: null
  inherits_from: null
- name: Argument.make_metavar
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.param_type_name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Argument.process_value
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.resolve_envvar_value
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of completions for the incomplete value. If a
    ``shell_complete`` function was given during init, it is used.
    Otherwise, the :attr:`type`
    :meth:`~click.types.ParamType.shell_complete` function is used.

    :param ctx: Invocation context for this command.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of completions for the incomplete value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.type_cast_value
  kind: method
  ns: click
  description: |-
    Convert and validate a value against the option's
    :attr:`type`, :attr:`multiple`, and :attr:`nargs`.
  summary: Convert and validate a value against the option's
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.value_from_envvar
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Argument.value_is_missing
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BOOL
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BadArgumentUsage
  kind: class
  ns: click
  description: |-
    Raised if an argument is generally supplied but the use of the argument
    was incorrect.  This is for instance raised if the number of values
    for an argument is not correct.

    .. versionadded:: 6.0
  summary: Raised if an argument is generally supplied but the use of the argument
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: BadArgumentUsage
  inherits_from:
  - <class 'click.exceptions.UsageError'>
  - <class 'click.exceptions.ClickException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BadArgumentUsage.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadArgumentUsage.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BadArgumentUsage.exit_code
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: BadArgumentUsage.format_message
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BadArgumentUsage.show
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BadArgumentUsage.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadOptionUsage
  kind: class
  ns: click
  description: |-
    Raised if an option is generally supplied but the use of the option
    was incorrect.  This is for instance raised if the number of arguments
    for an option is not correct.

    .. versionadded:: 4.0

    :param option_name: the name of the option being used incorrectly.
  summary: Raised if an option is generally supplied but the use of the option
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: option_name
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: BadOptionUsage
  inherits_from:
  - <class 'click.exceptions.UsageError'>
  - <class 'click.exceptions.ClickException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BadOptionUsage.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadOptionUsage.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BadOptionUsage.exit_code
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: BadOptionUsage.format_message
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BadOptionUsage.show
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BadOptionUsage.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadParameter
  kind: class
  ns: click
  description: |-
    An exception that formats out a standardized error message for a
    bad parameter.  This is useful when thrown from a callback or type as
    Click will attach contextual information to it (for instance, which
    parameter it is).

    .. versionadded:: 2.0

    :param param: the parameter object that caused this error.  This can
                  be left out, and Click will attach this info itself
                  if possible.
    :param param_hint: a string that shows up as parameter name.  This
                       can be used as alternative to `param` in cases
                       where custom validation should happen.  If it is
                       a string it's used as such, if it's a list then
                       each item is quoted and separated.
  summary: An exception that formats out a standardized error message for a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: param_hint
    default: None
    rest: false
  - type: BadParameter
  inherits_from:
  - <class 'click.exceptions.UsageError'>
  - <class 'click.exceptions.ClickException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: BadParameter.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: BadParameter.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BadParameter.exit_code
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: BadParameter.format_message
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BadParameter.show
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BadParameter.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: BaseCommand
  kind: class
  ns: click
  description: |-
    The base command implements the minimal API contract of commands.
    Most code will never use this as it does not implement a lot of useful
    functionality but it can act as the direct subclass of alternative
    parsing methods that do not depend on the Click parser.

    For instance, this can be used to bridge Click and other systems like
    argparse or docopt.

    Because base commands do not implement a lot of the API that other
    parts of Click take for granted, they are not supported for all
    operations.  For instance, they cannot be used with the decorators
    usually and they have no built-in callback system.

    .. versionchanged:: 2.0
       Added the `context_settings` parameter.

    :param name: the name of the command to use unless a group overrides it.
    :param context_settings: an optional dictionary with defaults that are
                             passed to the context object.
  summary: The base command implements the minimal API contract of commands
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: context_settings
    default: None
    rest: false
  - type: BaseCommand
  inherits_from: null
- name: BaseCommand.allow_extra_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: BaseCommand.allow_interspersed_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: BaseCommand.context_class
  kind: class
  ns: click
  description: |-
    The context is a special internal object that holds state relevant
    for the script execution at every single level.  It's normally invisible
    to commands unless they opt-in to getting access to it.

    The context is useful as it can pass internal objects around and can
    control special execution features such as reading data from
    environment variables.

    A context can be used as context manager in which case it will call
    :meth:`close` on teardown.

    :param command: the command class for this context.
    :param parent: the parent context.
    :param info_name: the info name for this invocation.  Generally this
                      is the most descriptive name for the script or
                      command.  For the toplevel script it is usually
                      the name of the script, for commands below it it's
                      the name of the script.
    :param obj: an arbitrary object of user data.
    :param auto_envvar_prefix: the prefix to use for automatic environment
                               variables.  If this is `None` then reading
                               from environment variables is disabled.  This
                               does not affect manually set environment
                               variables which are always read.
    :param default_map: a dictionary (like object) with default values
                        for parameters.
    :param terminal_width: the width of the terminal.  The default is
                           inherit from parent context.  If no context
                           defines the terminal width then auto
                           detection will be applied.
    :param max_content_width: the maximum width for content rendered by
                              Click (this currently only affects help
                              pages).  This defaults to 80 characters if
                              not overridden.  In other words: even if the
                              terminal is larger than that, Click will not
                              format things wider than 80 characters by
                              default.  In addition to that, formatters might
                              add some safety mapping on the right.
    :param resilient_parsing: if this flag is enabled then Click will
                              parse without any interactivity or callback
                              invocation.  Default values will also be
                              ignored.  This is useful for implementing
                              things such as completion support.
    :param allow_extra_args: if this is set to `True` then extra arguments
                             at the end will not raise an error and will be
                             kept on the context.  The default is to inherit
                             from the command.
    :param allow_interspersed_args: if this is set to `False` then options
                                    and arguments cannot be mixed.  The
                                    default is to inherit from the command.
    :param ignore_unknown_options: instructs click to ignore options it does
                                   not know and keeps them for later
                                   processing.
    :param help_option_names: optionally a list of strings that define how
                              the default help parameter is named.  The
                              default is ``['--help']``.
    :param token_normalize_func: an optional function that is used to
                                 normalize tokens (options, choices,
                                 etc.).  This for instance can be used to
                                 implement case insensitive behavior.
    :param color: controls if the terminal supports ANSI colors or not.  The
                  default is autodetection.  This is only needed if ANSI
                  codes are used in texts that Click prints which is by
                  default not the case.  This for instance would affect
                  help output.
    :param show_default: Show the default value for commands. If this
        value is not set, it defaults to the value from the parent
        context. ``Command.show_default`` overrides this default for the
        specific command.

    .. versionchanged:: 8.1
        The ``show_default`` parameter is overridden by
        ``Command.show_default``, instead of the other way around.

    .. versionchanged:: 8.0
        The ``show_default`` parameter defaults to the value from the
        parent context.

    .. versionchanged:: 7.1
       Added the ``show_default`` parameter.

    .. versionchanged:: 4.0
        Added the ``color``, ``ignore_unknown_options``, and
        ``max_content_width`` parameters.

    .. versionchanged:: 3.0
        Added the ``allow_extra_args`` and ``allow_interspersed_args``
        parameters.

    .. versionchanged:: 2.0
        Added the ``resilient_parsing``, ``help_option_names``, and
        ``token_normalize_func`` parameters.
  summary: The context is a special internal object that holds state relevant
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: command
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - kind: positional
    name: info_name
    default: None
    rest: false
  - kind: positional
    name: obj
    default: None
    rest: false
  - kind: positional
    name: auto_envvar_prefix
    default: None
    rest: false
  - kind: positional
    name: default_map
    default: None
    rest: false
  - kind: positional
    name: terminal_width
    default: None
    rest: false
  - kind: positional
    name: max_content_width
    default: None
    rest: false
  - kind: positional
    name: resilient_parsing
    default: 'False'
    rest: false
  - kind: positional
    name: allow_extra_args
    default: None
    rest: false
  - kind: positional
    name: allow_interspersed_args
    default: None
    rest: false
  - kind: positional
    name: ignore_unknown_options
    default: None
    rest: false
  - kind: positional
    name: help_option_names
    default: None
    rest: false
  - kind: positional
    name: token_normalize_func
    default: None
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - kind: positional
    name: show_default
    default: None
    rest: false
  - type: Context
  inherits_from: null
- name: BaseCommand.context_class.abort
  kind: method
  ns: click
  description: Aborts the script.
  summary: Aborts the script
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.call_on_close
  kind: method
  ns: click
  description: |-
    Register a function to be called when the context tears down.

    This can be used to close resources opened during the script
    execution. Resources that support Python's context manager
    protocol which would be used in a ``with`` statement should be
    registered with :meth:`with_resource` instead.

    :param f: The function to execute on teardown.
  summary: Register a function to be called when the context tears down
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.close
  kind: method
  ns: click
  description: |-
    Invoke all close callbacks registered with
    :meth:`call_on_close`, and exit all context managers entered
    with :meth:`with_resource`.
  summary: Invoke all close callbacks registered with
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.command_path
  kind: property
  ns: click
  description: |-
    The computed command path.  This is used for the ``usage``
    information on the help page.  It's automatically created by
    combining the info names of the chain of contexts to the root.
  summary: The computed command path
  signatures: null
  inherits_from: null
- name: BaseCommand.context_class.ensure_object
  kind: method
  ns: click
  description: |-
    Like :meth:`find_object` but sets the innermost object to a
    new instance of `object_type` if it does not exist.
  summary: Like :meth:`find_object` but sets the innermost object to a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: object_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.exit
  kind: method
  ns: click
  description: Exits the application with a given exit code.
  summary: Exits the application with a given exit code
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: code
    default: '0'
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.fail
  kind: method
  ns: click
  description: |-
    Aborts the execution of the program with a specific error
    message.

    :param message: the error message to fail with.
  summary: Aborts the execution of the program with a specific error
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.find_object
  kind: method
  ns: click
  description: Finds the closest object of a given type.
  summary: Finds the closest object of a given type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: object_type
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.find_root
  kind: method
  ns: click
  description: Finds the outermost context.
  summary: Finds the outermost context
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class
  kind: class
  ns: click
  description: |-
    This class helps with formatting text-based help pages.  It's
    usually just needed for very special internal cases, but it's also
    exposed so that developers can write their own fancy outputs.

    At present, it always writes into memory.

    :param indent_increment: the additional increment for each level.
    :param width: the width for the text.  This defaults to the terminal
                  width clamped to a maximum of 78.
  summary: This class helps with formatting text-based help pages
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: indent_increment
    default: '2'
    rest: false
  - kind: positional
    name: width
    default: None
    rest: false
  - kind: positional
    name: max_width
    default: None
    rest: false
  - type: HelpFormatter
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.dedent
  kind: method
  ns: click
  description: Decreases the indentation.
  summary: Decreases the indentation
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.getvalue
  kind: method
  ns: click
  description: Returns the buffer contents.
  summary: Returns the buffer contents
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.indent
  kind: method
  ns: click
  description: Increases the indentation.
  summary: Increases the indentation
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.indentation
  kind: method
  ns: click
  description: A context manager that increases the indentation.
  summary: A context manager that increases the indentation
  signatures:
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.section
  kind: method
  ns: click
  description: |-
    Helpful context manager that writes a paragraph, a heading,
    and the indents.

    :param name: the section name that is written as heading.
  summary: Helpful context manager that writes a paragraph, a heading,
  signatures:
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.write
  kind: method
  ns: click
  description: Writes a unicode string into the internal buffer.
  summary: Writes a unicode string into the internal buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.write_dl
  kind: method
  ns: click
  description: |-
    Writes a definition list into the buffer.  This is how options
    and commands are usually formatted.

    :param rows: a list of two item tuples for the terms and values.
    :param col_max: the maximum width of the first column.
    :param col_spacing: the number of spaces between the first and
                        second column.
  summary: Writes a definition list into the buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rows
    default: null
    rest: false
  - kind: positional
    name: col_max
    default: '30'
    rest: false
  - kind: positional
    name: col_spacing
    default: '2'
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.write_heading
  kind: method
  ns: click
  description: Writes a heading into the buffer.
  summary: Writes a heading into the buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: heading
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.write_paragraph
  kind: method
  ns: click
  description: Writes a paragraph into the buffer.
  summary: Writes a paragraph into the buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.write_text
  kind: method
  ns: click
  description: |-
    Writes re-indented text into the buffer.  This rewraps and
    preserves paragraphs.
  summary: Writes re-indented text into the buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: text
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.formatter_class.write_usage
  kind: method
  ns: click
  description: |-
    Writes a usage line into the buffer.

    :param prog: the program name.
    :param args: whitespace separated list of arguments.
    :param prefix: The prefix for the first line. Defaults to
        ``"Usage: "``.
  summary: Writes a usage line into the buffer
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: prog
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: prefix
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.forward
  kind: method
  ns: click
  description: |-
    Similar to :meth:`invoke` but fills in default keyword
    arguments from the current context if the other command expects
    it.  This cannot invoke callbacks directly, only other commands.

    .. versionchanged:: 8.0
        All ``kwargs`` are tracked in :attr:`params` so they will be
        passed if ``forward`` is called at multiple levels.
  summary: Similar to :meth:`invoke` but fills in default keyword
  signatures:
  - kind: positional
    name: _Context__self
    default: null
    rest: false
  - kind: positional
    name: _Context__cmd
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.get_help
  kind: method
  ns: click
  description: |-
    Helper method to get formatted help page for the current
    context and command.
  summary: Helper method to get formatted help page for the current
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.get_parameter_source
  kind: method
  ns: click
  description: |-
    Get the source of a parameter. This indicates the location
    from which the value of the parameter was obtained.

    This can be useful for determining when a user specified a value
    on the command line that is the same as the default value. It
    will be :attr:`~click.core.ParameterSource.DEFAULT` only if the
    value was actually taken from the default.

    :param name: The name of the parameter.
    :rtype: ParameterSource

    .. versionchanged:: 8.0
        Returns ``None`` if the parameter was not provided from any
        source.
  summary: Get the source of a parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.get_usage
  kind: method
  ns: click
  description: |-
    Helper method to get formatted usage string for the current
    context and command.
  summary: Helper method to get formatted usage string for the current
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.invoke
  kind: method
  ns: click
  description: |-
    Invokes a command callback in exactly the way it expects.  There
    are two ways to invoke this method:

    1.  the first argument can be a callback and all other arguments and
        keyword arguments are forwarded directly to the function.
    2.  the first argument is a click command object.  In that case all
        arguments are forwarded as well but proper click parameters
        (options and click arguments) must be keyword arguments and Click
        will fill in defaults.

    Note that before Click 3.2 keyword arguments were not properly filled
    in against the intention of this code and no context was created.  For
    more information about this change and why it was done in a bugfix
    release see :ref:`upgrade-to-3.2`.

    .. versionchanged:: 8.0
        All ``kwargs`` are tracked in :attr:`params` so they will be
        passed if :meth:`forward` is called at multiple levels.
  summary: Invokes a command callback in exactly the way it expects
  signatures:
  - kind: positional
    name: _Context__self
    default: null
    rest: false
  - kind: positional
    name: _Context__callback
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.lookup_default
  kind: method
  ns: click
  description: |-
    Get the default for a parameter from :attr:`default_map`.

    :param name: Name of the parameter.
    :param call: If the default is a callable, call it. Disable to
        return the callable instead.

    .. versionchanged:: 8.0
        Added the ``call`` parameter.
  summary: Get the default for a parameter from :attr:`default_map`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: call
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.make_formatter
  kind: method
  ns: click
  description: |-
    Creates the :class:`~click.HelpFormatter` for the help and
    usage output.

    To quickly customize the formatter class used without overriding
    this method, set the :attr:`formatter_class` attribute.

    .. versionchanged:: 8.0
        Added the :attr:`formatter_class` attribute.
  summary: Creates the :class:`~click
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.meta
  kind: property
  ns: click
  description: |-
    This is a dictionary which is shared with all the contexts
    that are nested.  It exists so that click utilities can store some
    state here if they need to.  It is however the responsibility of
    that code to manage this dictionary well.

    The keys are supposed to be unique dotted strings.  For instance
    module paths are a good choice for it.  What is stored in there is
    irrelevant for the operation of click.  However what is important is
    that code that places data here adheres to the general semantics of
    the system.

    Example usage::

        LANG_KEY = f'{__name__}.lang'

        def set_language(value):
            ctx = get_current_context()
            ctx.meta[LANG_KEY] = value

        def get_language():
            return get_current_context().meta.get(LANG_KEY, 'en_US')

    .. versionadded:: 5.0
  summary: This is a dictionary which is shared with all the contexts
  signatures: null
  inherits_from: null
- name: BaseCommand.context_class.scope
  kind: method
  ns: click
  description: |-
    This helper method can be used with the context object to promote
    it to the current thread local (see :func:`get_current_context`).
    The default behavior of this is to invoke the cleanup functions which
    can be disabled by setting `cleanup` to `False`.  The cleanup
    functions are typically used for things such as closing file handles.

    If the cleanup is intended the context object can also be directly
    used as a context manager.

    Example usage::

        with ctx.scope():
            assert get_current_context() is ctx

    This is equivalent::

        with ctx:
            assert get_current_context() is ctx

    .. versionadded:: 5.0

    :param cleanup: controls if the cleanup functions should be run or
                    not.  The default is to run these functions.  In
                    some situations the context only wants to be
                    temporarily pushed in which case this can be disabled.
                    Nested pushes automatically defer the cleanup.
  summary: This helper method can be used with the context object to promote
  signatures:
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.set_parameter_source
  kind: method
  ns: click
  description: |-
    Set the source of a parameter. This indicates the location
    from which the value of the parameter was obtained.

    :param name: The name of the parameter.
    :param source: A member of :class:`~click.core.ParameterSource`.
  summary: Set the source of a parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: source
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation. This traverses the entire CLI
    structure.

    .. code-block:: python

        with Context(cli) as ctx:
            info = ctx.to_info_dict()

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.context_class.with_resource
  kind: method
  ns: click
  description: |-
    Register a resource as if it were used in a ``with``
    statement. The resource will be cleaned up when the context is
    popped.

    Uses :meth:`contextlib.ExitStack.enter_context`. It calls the
    resource's ``__enter__()`` method and returns the result. When
    the context is popped, it closes the stack, which calls the
    resource's ``__exit__()`` method.

    To register a cleanup function for something that isn't a
    context manager, use :meth:`call_on_close`. Or use something
    from :mod:`contextlib` to turn it into a context manager first.

    .. code-block:: python

        @click.group()
        @click.option("--name")
        @click.pass_context
        def cli(ctx):
            ctx.obj = ctx.with_resource(connect_db(name))

    :param context_manager: The context manager to enter.
    :return: Whatever ``context_manager.__enter__()`` returns.

    .. versionadded:: 8.0
  summary: Register a resource as if it were used in a ``with``
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: context_manager
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.get_help
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.get_usage
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.ignore_unknown_options
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: BaseCommand.invoke
  kind: method
  ns: click
  description: |-
    Given a context, this invokes the command.  The default
    implementation is raising a not implemented error.
  summary: Given a context, this invokes the command
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.main
  kind: method
  ns: click
  description: |-
    This is the way to invoke a script with all the bells and
    whistles as a command line application.  This will always terminate
    the application after a call.  If this is not wanted, ``SystemExit``
    needs to be caught.

    This method is also available by directly calling the instance of
    a :class:`Command`.

    :param args: the arguments that should be used for parsing.  If not
                 provided, ``sys.argv[1:]`` is used.
    :param prog_name: the program name that should be used.  By default
                      the program name is constructed by taking the file
                      name from ``sys.argv[0]``.
    :param complete_var: the environment variable that controls the
                         bash completion support.  The default is
                         ``"_<prog_name>_COMPLETE"`` with prog_name in
                         uppercase.
    :param standalone_mode: the default behavior is to invoke the script
                            in standalone mode.  Click will then
                            handle exceptions and convert them into
                            error messages and the function will never
                            return but shut down the interpreter.  If
                            this is set to `False` they will be
                            propagated to the caller and the return
                            value of this function is the return value
                            of :meth:`invoke`.
    :param windows_expand_args: Expand glob patterns, user dir, and
        env vars in command line args on Windows.
    :param extra: extra keyword arguments are forwarded to the context
                  constructor.  See :class:`Context` for more information.

    .. versionchanged:: 8.0.1
        Added the ``windows_expand_args`` parameter to allow
        disabling command line arg expansion on Windows.

    .. versionchanged:: 8.0
        When taking arguments from ``sys.argv`` on Windows, glob
        patterns, user dir, and env vars are expanded.

    .. versionchanged:: 3.0
       Added the ``standalone_mode`` parameter.
  summary: This is the way to invoke a script with all the bells and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: prog_name
    default: None
    rest: false
  - kind: positional
    name: complete_var
    default: None
    rest: false
  - kind: positional
    name: standalone_mode
    default: 'True'
    rest: false
  - kind: positional
    name: windows_expand_args
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.make_context
  kind: method
  ns: click
  description: |-
    This function when given an info name and arguments will kick
    off the parsing and create a new :class:`Context`.  It does not
    invoke the actual command callback though.

    To quickly customize the context class used without overriding
    this method, set the :attr:`context_class` attribute.

    :param info_name: the info name for this invocation.  Generally this
                      is the most descriptive name for the script or
                      command.  For the toplevel script it's usually
                      the name of the script, for commands below it's
                      the name of the command.
    :param args: the arguments to parse as list of strings.
    :param parent: the parent context if available.
    :param extra: extra keyword arguments forwarded to the context
                  constructor.

    .. versionchanged:: 8.0
        Added the :attr:`context_class` attribute.
  summary: This function when given an info name and arguments will kick
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: info_name
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.parse_args
  kind: method
  ns: click
  description: |-
    Given a context and a list of arguments this creates the parser
    and parses the arguments, then modifies the context as necessary.
    This is automatically invoked by :meth:`make_context`.
  summary: Given a context and a list of arguments this creates the parser
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of completions for the incomplete value. Looks
    at the names of chained multi-commands.

    Any command could be part of a chained multi-command, so sibling
    commands are valid at any point during command completion. Other
    command classes will return more completions.

    :param ctx: Invocation context for this command.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of completions for the incomplete value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BaseCommand.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation. This traverses the entire structure
    below this command.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    :param ctx: A :class:`Context` representing this command.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Choice
  kind: class
  ns: click
  description: |-
    The choice type allows a value to be checked against a fixed set
    of supported values. All of these values have to be strings.

    You should only pass a list or tuple of choices. Other iterables
    (like generators) may lead to surprising results.

    The resulting value will always be one of the originally passed choices
    regardless of ``case_sensitive`` or any ``ctx.token_normalize_func``
    being specified.

    See :ref:`choice-opts` for an example.

    :param case_sensitive: Set to false to make choices case
        insensitive. Defaults to true.
  summary: The choice type allows a value to be checked against a fixed set
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: choices
    default: null
    rest: false
  - kind: positional
    name: case_sensitive
    default: 'True'
    rest: false
  - type: Choice
  inherits_from:
  - <class 'click.types.ParamType'>
- name: Choice.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Choice.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Choice.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Choice.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Choice.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Choice.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Choice.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Choice.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Choice.shell_complete
  kind: method
  ns: click
  description: |-
    Complete choices that start with the incomplete value.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Complete choices that start with the incomplete value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Choice.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Choice.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ClickException
  kind: class
  ns: click
  description: An exception that Click can handle and show to the user.
  summary: An exception that Click can handle and show to the user
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - type: ClickException
  inherits_from:
  - <class 'Exception'>
  - <class 'BaseException'>
- name: ClickException.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: ClickException.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ClickException.exit_code
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ClickException.format_message
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ClickException.show
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ClickException.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Command
  kind: class
  ns: click
  description: |-
    Commands are the basic building block of command line interfaces in
    Click.  A basic command handles command line parsing and might dispatch
    more parsing to commands nested below it.

    :param name: the name of the command to use unless a group overrides it.
    :param context_settings: an optional dictionary with defaults that are
                             passed to the context object.
    :param callback: the callback to invoke.  This is optional.
    :param params: the parameters to register with this command.  This can
                   be either :class:`Option` or :class:`Argument` objects.
    :param help: the help string to use for this command.
    :param epilog: like the help string but it's printed at the end of the
                   help page after everything else.
    :param short_help: the short help to use for this command.  This is
                       shown on the command listing of the parent command.
    :param add_help_option: by default each command registers a ``--help``
                            option.  This can be disabled by this parameter.
    :param no_args_is_help: this controls what happens if no arguments are
                            provided.  This option is disabled by default.
                            If enabled this will add ``--help`` as argument
                            if no arguments are passed
    :param hidden: hide this command from help outputs.

    :param deprecated: issues a message indicating that
                             the command is deprecated.

    .. versionchanged:: 8.1
        ``help``, ``epilog``, and ``short_help`` are stored unprocessed,
        all formatting is done when outputting help text, not at init,
        and is done even if not using the ``@command`` decorator.

    .. versionchanged:: 8.0
        Added a ``repr`` showing the command name.

    .. versionchanged:: 7.1
        Added the ``no_args_is_help`` parameter.

    .. versionchanged:: 2.0
        Added the ``context_settings`` parameter.
  summary: Commands are the basic building block of command line interfaces in
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: context_settings
    default: None
    rest: false
  - kind: positional
    name: callback
    default: None
    rest: false
  - kind: positional
    name: params
    default: None
    rest: false
  - kind: positional
    name: help
    default: None
    rest: false
  - kind: positional
    name: epilog
    default: None
    rest: false
  - kind: positional
    name: short_help
    default: None
    rest: false
  - kind: positional
    name: options_metavar
    default: '[OPTIONS]'
    rest: false
  - kind: positional
    name: add_help_option
    default: 'True'
    rest: false
  - kind: positional
    name: no_args_is_help
    default: 'False'
    rest: false
  - kind: positional
    name: hidden
    default: 'False'
    rest: false
  - kind: positional
    name: deprecated
    default: 'False'
    rest: false
  - type: Command
  inherits_from:
  - <class 'click.core.BaseCommand'>
- name: Command.allow_extra_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Command.allow_interspersed_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Command.collect_usage_pieces
  kind: method
  ns: click
  description: |-
    Returns all the pieces that go into the usage line and returns
    it as a list of strings.
  summary: Returns all the pieces that go into the usage line and returns
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.format_epilog
  kind: method
  ns: click
  description: Writes the epilog into the formatter if it exists.
  summary: Writes the epilog into the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.format_help
  kind: method
  ns: click
  description: |-
    Writes the help into the formatter if it exists.

    This is a low-level method called by :meth:`get_help`.

    This calls the following methods:

    -   :meth:`format_usage`
    -   :meth:`format_help_text`
    -   :meth:`format_options`
    -   :meth:`format_epilog`
  summary: Writes the help into the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.format_help_text
  kind: method
  ns: click
  description: Writes the help text to the formatter if it exists.
  summary: Writes the help text to the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.format_options
  kind: method
  ns: click
  description: Writes all the options into the formatter if they exist.
  summary: Writes all the options into the formatter if they exist
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.format_usage
  kind: method
  ns: click
  description: |-
    Writes the usage line into the formatter.

    This is a low-level method called by :meth:`get_usage`.
  summary: Writes the usage line into the formatter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.get_help
  kind: method
  ns: click
  description: |-
    Formats the help into a string and returns it.

    Calls :meth:`format_help` internally.
  summary: Formats the help into a string and returns it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.get_help_option
  kind: method
  ns: click
  description: Returns the help option object.
  summary: Returns the help option object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.get_help_option_names
  kind: method
  ns: click
  description: Returns the names for the help option.
  summary: Returns the names for the help option
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.get_params
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.get_short_help_str
  kind: method
  ns: click
  description: |-
    Gets short help for the command or makes it by shortening the
    long help string.
  summary: Gets short help for the command or makes it by shortening the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: limit
    default: '45'
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.get_usage
  kind: method
  ns: click
  description: |-
    Formats the usage line into a string and returns it.

    Calls :meth:`format_usage` internally.
  summary: Formats the usage line into a string and returns it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.ignore_unknown_options
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Command.invoke
  kind: method
  ns: click
  description: |-
    Given a context, this invokes the attached callback (if it exists)
    in the right way.
  summary: Given a context, this invokes the attached callback (if it exists)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.main
  kind: method
  ns: click
  description: |-
    This is the way to invoke a script with all the bells and
    whistles as a command line application.  This will always terminate
    the application after a call.  If this is not wanted, ``SystemExit``
    needs to be caught.

    This method is also available by directly calling the instance of
    a :class:`Command`.

    :param args: the arguments that should be used for parsing.  If not
                 provided, ``sys.argv[1:]`` is used.
    :param prog_name: the program name that should be used.  By default
                      the program name is constructed by taking the file
                      name from ``sys.argv[0]``.
    :param complete_var: the environment variable that controls the
                         bash completion support.  The default is
                         ``"_<prog_name>_COMPLETE"`` with prog_name in
                         uppercase.
    :param standalone_mode: the default behavior is to invoke the script
                            in standalone mode.  Click will then
                            handle exceptions and convert them into
                            error messages and the function will never
                            return but shut down the interpreter.  If
                            this is set to `False` they will be
                            propagated to the caller and the return
                            value of this function is the return value
                            of :meth:`invoke`.
    :param windows_expand_args: Expand glob patterns, user dir, and
        env vars in command line args on Windows.
    :param extra: extra keyword arguments are forwarded to the context
                  constructor.  See :class:`Context` for more information.

    .. versionchanged:: 8.0.1
        Added the ``windows_expand_args`` parameter to allow
        disabling command line arg expansion on Windows.

    .. versionchanged:: 8.0
        When taking arguments from ``sys.argv`` on Windows, glob
        patterns, user dir, and env vars are expanded.

    .. versionchanged:: 3.0
       Added the ``standalone_mode`` parameter.
  summary: This is the way to invoke a script with all the bells and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: prog_name
    default: None
    rest: false
  - kind: positional
    name: complete_var
    default: None
    rest: false
  - kind: positional
    name: standalone_mode
    default: 'True'
    rest: false
  - kind: positional
    name: windows_expand_args
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.make_context
  kind: method
  ns: click
  description: |-
    This function when given an info name and arguments will kick
    off the parsing and create a new :class:`Context`.  It does not
    invoke the actual command callback though.

    To quickly customize the context class used without overriding
    this method, set the :attr:`context_class` attribute.

    :param info_name: the info name for this invocation.  Generally this
                      is the most descriptive name for the script or
                      command.  For the toplevel script it's usually
                      the name of the script, for commands below it's
                      the name of the command.
    :param args: the arguments to parse as list of strings.
    :param parent: the parent context if available.
    :param extra: extra keyword arguments forwarded to the context
                  constructor.

    .. versionchanged:: 8.0
        Added the :attr:`context_class` attribute.
  summary: This function when given an info name and arguments will kick
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: info_name
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.make_parser
  kind: method
  ns: click
  description: Creates the underlying option parser for this command.
  summary: Creates the underlying option parser for this command
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.parse_args
  kind: method
  ns: click
  description: |-
    Given a context and a list of arguments this creates the parser
    and parses the arguments, then modifies the context as necessary.
    This is automatically invoked by :meth:`make_context`.
  summary: Given a context and a list of arguments this creates the parser
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of completions for the incomplete value. Looks
    at the names of options and chained multi-commands.

    :param ctx: Invocation context for this command.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of completions for the incomplete value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Command.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation. This traverses the entire structure
    below this command.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    :param ctx: A :class:`Context` representing this command.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection
  kind: class
  ns: click
  description: |-
    A command collection is a multi command that merges multiple multi
    commands together into one.  This is a straightforward implementation
    that accepts a list of different multi commands as sources and
    provides all the commands for each of them.

    See :class:`MultiCommand` and :class:`Command` for the description of
    ``name`` and ``attrs``.
  summary: A command collection is a multi command that merges multiple multi
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: sources
    default: None
    rest: false
  - type: CommandCollection
  inherits_from:
  - <class 'click.core.MultiCommand'>
  - <class 'click.core.Command'>
  - <class 'click.core.BaseCommand'>
- name: CommandCollection.add_source
  kind: method
  ns: click
  description: Adds a new multi command to the chain dispatcher.
  summary: Adds a new multi command to the chain dispatcher
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: multi_cmd
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.allow_extra_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: CommandCollection.allow_interspersed_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: CommandCollection.collect_usage_pieces
  kind: method
  ns: click
  description: |-
    Returns all the pieces that go into the usage line and returns
    it as a list of strings.
  summary: Returns all the pieces that go into the usage line and returns
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.format_commands
  kind: method
  ns: click
  description: |-
    Extra format methods for multi methods that adds all the commands
    after the options.
  summary: Extra format methods for multi methods that adds all the commands
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.format_epilog
  kind: method
  ns: click
  description: Writes the epilog into the formatter if it exists.
  summary: Writes the epilog into the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.format_help
  kind: method
  ns: click
  description: |-
    Writes the help into the formatter if it exists.

    This is a low-level method called by :meth:`get_help`.

    This calls the following methods:

    -   :meth:`format_usage`
    -   :meth:`format_help_text`
    -   :meth:`format_options`
    -   :meth:`format_epilog`
  summary: Writes the help into the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.format_help_text
  kind: method
  ns: click
  description: Writes the help text to the formatter if it exists.
  summary: Writes the help text to the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.format_options
  kind: method
  ns: click
  description: Writes all the options into the formatter if they exist.
  summary: Writes all the options into the formatter if they exist
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.format_usage
  kind: method
  ns: click
  description: |-
    Writes the usage line into the formatter.

    This is a low-level method called by :meth:`get_usage`.
  summary: Writes the usage line into the formatter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.get_command
  kind: method
  ns: click
  description: |-
    Given a context and a command name, this returns a
    :class:`Command` object if it exists or returns `None`.
  summary: Given a context and a command name, this returns a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: cmd_name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.get_help
  kind: method
  ns: click
  description: |-
    Formats the help into a string and returns it.

    Calls :meth:`format_help` internally.
  summary: Formats the help into a string and returns it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.get_help_option
  kind: method
  ns: click
  description: Returns the help option object.
  summary: Returns the help option object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.get_help_option_names
  kind: method
  ns: click
  description: Returns the names for the help option.
  summary: Returns the names for the help option
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.get_params
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.get_short_help_str
  kind: method
  ns: click
  description: |-
    Gets short help for the command or makes it by shortening the
    long help string.
  summary: Gets short help for the command or makes it by shortening the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: limit
    default: '45'
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.get_usage
  kind: method
  ns: click
  description: |-
    Formats the usage line into a string and returns it.

    Calls :meth:`format_usage` internally.
  summary: Formats the usage line into a string and returns it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.ignore_unknown_options
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: CommandCollection.invoke
  kind: method
  ns: click
  description: |-
    Given a context, this invokes the attached callback (if it exists)
    in the right way.
  summary: Given a context, this invokes the attached callback (if it exists)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.list_commands
  kind: method
  ns: click
  description: |-
    Returns a list of subcommand names in the order they should
    appear.
  summary: Returns a list of subcommand names in the order they should
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.main
  kind: method
  ns: click
  description: |-
    This is the way to invoke a script with all the bells and
    whistles as a command line application.  This will always terminate
    the application after a call.  If this is not wanted, ``SystemExit``
    needs to be caught.

    This method is also available by directly calling the instance of
    a :class:`Command`.

    :param args: the arguments that should be used for parsing.  If not
                 provided, ``sys.argv[1:]`` is used.
    :param prog_name: the program name that should be used.  By default
                      the program name is constructed by taking the file
                      name from ``sys.argv[0]``.
    :param complete_var: the environment variable that controls the
                         bash completion support.  The default is
                         ``"_<prog_name>_COMPLETE"`` with prog_name in
                         uppercase.
    :param standalone_mode: the default behavior is to invoke the script
                            in standalone mode.  Click will then
                            handle exceptions and convert them into
                            error messages and the function will never
                            return but shut down the interpreter.  If
                            this is set to `False` they will be
                            propagated to the caller and the return
                            value of this function is the return value
                            of :meth:`invoke`.
    :param windows_expand_args: Expand glob patterns, user dir, and
        env vars in command line args on Windows.
    :param extra: extra keyword arguments are forwarded to the context
                  constructor.  See :class:`Context` for more information.

    .. versionchanged:: 8.0.1
        Added the ``windows_expand_args`` parameter to allow
        disabling command line arg expansion on Windows.

    .. versionchanged:: 8.0
        When taking arguments from ``sys.argv`` on Windows, glob
        patterns, user dir, and env vars are expanded.

    .. versionchanged:: 3.0
       Added the ``standalone_mode`` parameter.
  summary: This is the way to invoke a script with all the bells and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: prog_name
    default: None
    rest: false
  - kind: positional
    name: complete_var
    default: None
    rest: false
  - kind: positional
    name: standalone_mode
    default: 'True'
    rest: false
  - kind: positional
    name: windows_expand_args
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.make_context
  kind: method
  ns: click
  description: |-
    This function when given an info name and arguments will kick
    off the parsing and create a new :class:`Context`.  It does not
    invoke the actual command callback though.

    To quickly customize the context class used without overriding
    this method, set the :attr:`context_class` attribute.

    :param info_name: the info name for this invocation.  Generally this
                      is the most descriptive name for the script or
                      command.  For the toplevel script it's usually
                      the name of the script, for commands below it's
                      the name of the command.
    :param args: the arguments to parse as list of strings.
    :param parent: the parent context if available.
    :param extra: extra keyword arguments forwarded to the context
                  constructor.

    .. versionchanged:: 8.0
        Added the :attr:`context_class` attribute.
  summary: This function when given an info name and arguments will kick
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: info_name
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.make_parser
  kind: method
  ns: click
  description: Creates the underlying option parser for this command.
  summary: Creates the underlying option parser for this command
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.parse_args
  kind: method
  ns: click
  description: |-
    Given a context and a list of arguments this creates the parser
    and parses the arguments, then modifies the context as necessary.
    This is automatically invoked by :meth:`make_context`.
  summary: Given a context and a list of arguments this creates the parser
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.resolve_command
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.result_callback
  kind: method
  ns: click
  description: |-
    Adds a result callback to the command.  By default if a
    result callback is already registered this will chain them but
    this can be disabled with the `replace` parameter.  The result
    callback is invoked with the return value of the subcommand
    (or the list of return values from all subcommands if chaining
    is enabled) as well as the parameters as they would be passed
    to the main callback.

    Example::

        @click.group()
        @click.option('-i', '--input', default=23)
        def cli(input):
            return 42

        @cli.result_callback()
        def process_result(result, input):
            return result + input

    :param replace: if set to `True` an already existing result
                    callback will be removed.

    .. versionchanged:: 8.0
        Renamed from ``resultcallback``.

    .. versionadded:: 3.0
  summary: Adds a result callback to the command
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: replace
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of completions for the incomplete value. Looks
    at the names of options, subcommands, and chained
    multi-commands.

    :param ctx: Invocation context for this command.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of completions for the incomplete value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CommandCollection.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation. This traverses the entire structure
    below this command.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    :param ctx: A :class:`Context` representing this command.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DateTime
  kind: class
  ns: click
  description: |-
    The DateTime type converts date strings into `datetime` objects.

    The format strings which are checked are configurable, but default to some
    common (non-timezone aware) ISO 8601 formats.

    When specifying *DateTime* formats, you should only pass a list or a tuple.
    Other iterables, like generators, may lead to surprising results.

    The format strings are processed using ``datetime.strptime``, and this
    consequently defines the format strings which are allowed.

    Parsing is tried using each format, in order, and the first format which
    parses successfully is used.

    :param formats: A list or tuple of date format strings, in the order in
                    which they should be tried. Defaults to
                    ``'%Y-%m-%d'``, ``'%Y-%m-%dT%H:%M:%S'``,
                    ``'%Y-%m-%d %H:%M:%S'``.
  summary: The DateTime type converts date strings into `datetime` objects
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: formats
    default: None
    rest: false
  - type: DateTime
  inherits_from:
  - <class 'click.types.ParamType'>
- name: DateTime.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: DateTime.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DateTime.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: DateTime.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: DateTime.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DateTime.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DateTime.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: DateTime.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: DateTime.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DateTime.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: DateTime.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FLOAT
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: File
  kind: class
  ns: click
  description: |-
    Declares a parameter to be a file for reading or writing.  The file
    is automatically closed once the context tears down (after the command
    finished working).

    Files can be opened for reading or writing.  The special value ``-``
    indicates stdin or stdout depending on the mode.

    By default, the file is opened for reading text data, but it can also be
    opened in binary mode or for writing.  The encoding parameter can be used
    to force a specific encoding.

    The `lazy` flag controls if the file should be opened immediately or upon
    first IO. The default is to be non-lazy for standard input and output
    streams as well as files opened for reading, `lazy` otherwise. When opening a
    file lazily for reading, it is still opened temporarily for validation, but
    will not be held open until first IO. lazy is mainly useful when opening
    for writing to avoid creating the file until it is needed.

    Starting with Click 2.0, files can also be opened atomically in which
    case all writes go into a separate file in the same folder and upon
    completion the file will be moved over to the original location.  This
    is useful if a file regularly read by other users is modified.

    See :ref:`file-args` for more information.
  summary: Declares a parameter to be a file for reading or writing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - kind: positional
    name: lazy
    default: None
    rest: false
  - kind: positional
    name: atomic
    default: 'False'
    rest: false
  - type: File
  inherits_from:
  - <class 'click.types.ParamType'>
- name: File.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: File.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: File.envvar_list_splitter
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: File.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: File.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: File.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: File.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: File.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: File.resolve_lazy_flag
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: File.shell_complete
  kind: method
  ns: click
  description: |-
    Return a special completion marker that tells the completion
    system to use the shell to provide file path completions.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a special completion marker that tells the completion
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: File.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: File.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileError
  kind: class
  ns: click
  description: Raised if a file cannot be opened.
  summary: Raised if a file cannot be opened
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: hint
    default: None
    rest: false
  - type: FileError
  inherits_from:
  - <class 'click.exceptions.ClickException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: FileError.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: FileError.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FileError.exit_code
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: FileError.format_message
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FileError.show
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FileError.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: FloatRange
  kind: class
  ns: click
  description: |-
    Restrict a :data:`click.FLOAT` value to a range of accepted
    values. See :ref:`ranges`.

    If ``min`` or ``max`` are not passed, any value is accepted in that
    direction. If ``min_open`` or ``max_open`` are enabled, the
    corresponding boundary is not included in the range.

    If ``clamp`` is enabled, a value outside the range is clamped to the
    boundary instead of failing. This is not supported if either
    boundary is marked ``open``.

    .. versionchanged:: 8.0
        Added the ``min_open`` and ``max_open`` parameters.
  summary: Restrict a :data:`click
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: min
    default: None
    rest: false
  - kind: positional
    name: max
    default: None
    rest: false
  - kind: positional
    name: min_open
    default: 'False'
    rest: false
  - kind: positional
    name: max_open
    default: 'False'
    rest: false
  - kind: positional
    name: clamp
    default: 'False'
    rest: false
  - type: FloatRange
  inherits_from:
  - <class 'click.types._NumberRangeBase'>
  - <class 'click.types.FloatParamType'>
  - <class 'click.types._NumberParamTypeBase'>
  - <class 'click.types.ParamType'>
- name: FloatRange.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: FloatRange.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatRange.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FloatRange.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatRange.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatRange.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatRange.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FloatRange.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: FloatRange.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatRange.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatRange.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group
  kind: class
  ns: click
  description: |-
    A group allows a command to have subcommands attached. This is
    the most common way to implement nesting in Click.

    :param name: The name of the group command.
    :param commands: A dict mapping names to :class:`Command` objects.
        Can also be a list of :class:`Command`, which will use
        :attr:`Command.name` to create the dict.
    :param attrs: Other command arguments described in
        :class:`MultiCommand`, :class:`Command`, and
        :class:`BaseCommand`.

    .. versionchanged:: 8.0
        The ``commands`` argument can be a list of command objects.
  summary: A group allows a command to have subcommands attached
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: commands
    default: None
    rest: false
  - type: Group
  inherits_from:
  - <class 'click.core.MultiCommand'>
  - <class 'click.core.Command'>
  - <class 'click.core.BaseCommand'>
- name: Group.add_command
  kind: method
  ns: click
  description: |-
    Registers another :class:`Command` with this group.  If the name
    is not provided, the name of the command is used.
  summary: Registers another :class:`Command` with this group
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cmd
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.allow_extra_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Group.allow_interspersed_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Group.collect_usage_pieces
  kind: method
  ns: click
  description: |-
    Returns all the pieces that go into the usage line and returns
    it as a list of strings.
  summary: Returns all the pieces that go into the usage line and returns
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.command
  kind: method
  ns: click
  description: |-
    A shortcut decorator for declaring and attaching a command to
    the group. This takes the same arguments as :func:`command` and
    immediately registers the created command with this group by
    calling :meth:`add_command`.

    To customize the command class used, set the
    :attr:`command_class` attribute.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.

    .. versionchanged:: 8.0
        Added the :attr:`command_class` attribute.
  summary: A shortcut decorator for declaring and attaching a command to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.command_class
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Group.format_commands
  kind: method
  ns: click
  description: |-
    Extra format methods for multi methods that adds all the commands
    after the options.
  summary: Extra format methods for multi methods that adds all the commands
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.format_epilog
  kind: method
  ns: click
  description: Writes the epilog into the formatter if it exists.
  summary: Writes the epilog into the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.format_help
  kind: method
  ns: click
  description: |-
    Writes the help into the formatter if it exists.

    This is a low-level method called by :meth:`get_help`.

    This calls the following methods:

    -   :meth:`format_usage`
    -   :meth:`format_help_text`
    -   :meth:`format_options`
    -   :meth:`format_epilog`
  summary: Writes the help into the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.format_help_text
  kind: method
  ns: click
  description: Writes the help text to the formatter if it exists.
  summary: Writes the help text to the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.format_options
  kind: method
  ns: click
  description: Writes all the options into the formatter if they exist.
  summary: Writes all the options into the formatter if they exist
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.format_usage
  kind: method
  ns: click
  description: |-
    Writes the usage line into the formatter.

    This is a low-level method called by :meth:`get_usage`.
  summary: Writes the usage line into the formatter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.get_command
  kind: method
  ns: click
  description: |-
    Given a context and a command name, this returns a
    :class:`Command` object if it exists or returns `None`.
  summary: Given a context and a command name, this returns a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: cmd_name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.get_help
  kind: method
  ns: click
  description: |-
    Formats the help into a string and returns it.

    Calls :meth:`format_help` internally.
  summary: Formats the help into a string and returns it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.get_help_option
  kind: method
  ns: click
  description: Returns the help option object.
  summary: Returns the help option object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.get_help_option_names
  kind: method
  ns: click
  description: Returns the names for the help option.
  summary: Returns the names for the help option
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.get_params
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.get_short_help_str
  kind: method
  ns: click
  description: |-
    Gets short help for the command or makes it by shortening the
    long help string.
  summary: Gets short help for the command or makes it by shortening the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: limit
    default: '45'
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.get_usage
  kind: method
  ns: click
  description: |-
    Formats the usage line into a string and returns it.

    Calls :meth:`format_usage` internally.
  summary: Formats the usage line into a string and returns it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.group
  kind: method
  ns: click
  description: |-
    A shortcut decorator for declaring and attaching a group to
    the group. This takes the same arguments as :func:`group` and
    immediately registers the created group with this group by
    calling :meth:`add_command`.

    To customize the group class used, set the :attr:`group_class`
    attribute.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.

    .. versionchanged:: 8.0
        Added the :attr:`group_class` attribute.
  summary: A shortcut decorator for declaring and attaching a group to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.group_class
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Group.ignore_unknown_options
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Group.invoke
  kind: method
  ns: click
  description: |-
    Given a context, this invokes the attached callback (if it exists)
    in the right way.
  summary: Given a context, this invokes the attached callback (if it exists)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.list_commands
  kind: method
  ns: click
  description: |-
    Returns a list of subcommand names in the order they should
    appear.
  summary: Returns a list of subcommand names in the order they should
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.main
  kind: method
  ns: click
  description: |-
    This is the way to invoke a script with all the bells and
    whistles as a command line application.  This will always terminate
    the application after a call.  If this is not wanted, ``SystemExit``
    needs to be caught.

    This method is also available by directly calling the instance of
    a :class:`Command`.

    :param args: the arguments that should be used for parsing.  If not
                 provided, ``sys.argv[1:]`` is used.
    :param prog_name: the program name that should be used.  By default
                      the program name is constructed by taking the file
                      name from ``sys.argv[0]``.
    :param complete_var: the environment variable that controls the
                         bash completion support.  The default is
                         ``"_<prog_name>_COMPLETE"`` with prog_name in
                         uppercase.
    :param standalone_mode: the default behavior is to invoke the script
                            in standalone mode.  Click will then
                            handle exceptions and convert them into
                            error messages and the function will never
                            return but shut down the interpreter.  If
                            this is set to `False` they will be
                            propagated to the caller and the return
                            value of this function is the return value
                            of :meth:`invoke`.
    :param windows_expand_args: Expand glob patterns, user dir, and
        env vars in command line args on Windows.
    :param extra: extra keyword arguments are forwarded to the context
                  constructor.  See :class:`Context` for more information.

    .. versionchanged:: 8.0.1
        Added the ``windows_expand_args`` parameter to allow
        disabling command line arg expansion on Windows.

    .. versionchanged:: 8.0
        When taking arguments from ``sys.argv`` on Windows, glob
        patterns, user dir, and env vars are expanded.

    .. versionchanged:: 3.0
       Added the ``standalone_mode`` parameter.
  summary: This is the way to invoke a script with all the bells and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: prog_name
    default: None
    rest: false
  - kind: positional
    name: complete_var
    default: None
    rest: false
  - kind: positional
    name: standalone_mode
    default: 'True'
    rest: false
  - kind: positional
    name: windows_expand_args
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.make_context
  kind: method
  ns: click
  description: |-
    This function when given an info name and arguments will kick
    off the parsing and create a new :class:`Context`.  It does not
    invoke the actual command callback though.

    To quickly customize the context class used without overriding
    this method, set the :attr:`context_class` attribute.

    :param info_name: the info name for this invocation.  Generally this
                      is the most descriptive name for the script or
                      command.  For the toplevel script it's usually
                      the name of the script, for commands below it's
                      the name of the command.
    :param args: the arguments to parse as list of strings.
    :param parent: the parent context if available.
    :param extra: extra keyword arguments forwarded to the context
                  constructor.

    .. versionchanged:: 8.0
        Added the :attr:`context_class` attribute.
  summary: This function when given an info name and arguments will kick
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: info_name
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.make_parser
  kind: method
  ns: click
  description: Creates the underlying option parser for this command.
  summary: Creates the underlying option parser for this command
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.parse_args
  kind: method
  ns: click
  description: |-
    Given a context and a list of arguments this creates the parser
    and parses the arguments, then modifies the context as necessary.
    This is automatically invoked by :meth:`make_context`.
  summary: Given a context and a list of arguments this creates the parser
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.resolve_command
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.result_callback
  kind: method
  ns: click
  description: |-
    Adds a result callback to the command.  By default if a
    result callback is already registered this will chain them but
    this can be disabled with the `replace` parameter.  The result
    callback is invoked with the return value of the subcommand
    (or the list of return values from all subcommands if chaining
    is enabled) as well as the parameters as they would be passed
    to the main callback.

    Example::

        @click.group()
        @click.option('-i', '--input', default=23)
        def cli(input):
            return 42

        @cli.result_callback()
        def process_result(result, input):
            return result + input

    :param replace: if set to `True` an already existing result
                    callback will be removed.

    .. versionchanged:: 8.0
        Renamed from ``resultcallback``.

    .. versionadded:: 3.0
  summary: Adds a result callback to the command
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: replace
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of completions for the incomplete value. Looks
    at the names of options, subcommands, and chained
    multi-commands.

    :param ctx: Invocation context for this command.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of completions for the incomplete value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Group.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation. This traverses the entire structure
    below this command.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    :param ctx: A :class:`Context` representing this command.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: INT
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntRange
  kind: class
  ns: click
  description: |-
    Restrict an :data:`click.INT` value to a range of accepted
    values. See :ref:`ranges`.

    If ``min`` or ``max`` are not passed, any value is accepted in that
    direction. If ``min_open`` or ``max_open`` are enabled, the
    corresponding boundary is not included in the range.

    If ``clamp`` is enabled, a value outside the range is clamped to the
    boundary instead of failing.

    .. versionchanged:: 8.0
        Added the ``min_open`` and ``max_open`` parameters.
  summary: Restrict an :data:`click
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: min
    default: None
    rest: false
  - kind: positional
    name: max
    default: None
    rest: false
  - kind: positional
    name: min_open
    default: 'False'
    rest: false
  - kind: positional
    name: max_open
    default: 'False'
    rest: false
  - kind: positional
    name: clamp
    default: 'False'
    rest: false
  - type: IntRange
  inherits_from:
  - <class 'click.types._NumberRangeBase'>
  - <class 'click.types.IntParamType'>
  - <class 'click.types._NumberParamTypeBase'>
  - <class 'click.types.ParamType'>
- name: IntRange.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: IntRange.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntRange.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: IntRange.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntRange.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntRange.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntRange.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: IntRange.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: IntRange.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntRange.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntRange.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MissingParameter
  kind: class
  ns: click
  description: |-
    Raised if click required an option or argument but it was not
    provided when invoking the script.

    .. versionadded:: 4.0

    :param param_type: a string that indicates the type of the parameter.
                       The default is to inherit the parameter type from
                       the given `param`.  Valid values are ``'parameter'``,
                       ``'option'`` or ``'argument'``.
  summary: Raised if click required an option or argument but it was not
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: param_hint
    default: None
    rest: false
  - kind: positional
    name: param_type
    default: None
    rest: false
  - type: MissingParameter
  inherits_from:
  - <class 'click.exceptions.BadParameter'>
  - <class 'click.exceptions.UsageError'>
  - <class 'click.exceptions.ClickException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: MissingParameter.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: MissingParameter.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: MissingParameter.exit_code
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: MissingParameter.format_message
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MissingParameter.show
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MissingParameter.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: MultiCommand
  kind: class
  ns: click
  description: |-
    A multi command is the basic implementation of a command that
    dispatches to subcommands.  The most common version is the
    :class:`Group`.

    :param invoke_without_command: this controls how the multi command itself
                                   is invoked.  By default it's only invoked
                                   if a subcommand is provided.
    :param no_args_is_help: this controls what happens if no arguments are
                            provided.  This option is enabled by default if
                            `invoke_without_command` is disabled or disabled
                            if it's enabled.  If enabled this will add
                            ``--help`` as argument if no arguments are
                            passed.
    :param subcommand_metavar: the string that is used in the documentation
                               to indicate the subcommand place.
    :param chain: if this is set to `True` chaining of multiple subcommands
                  is enabled.  This restricts the form of commands in that
                  they cannot have optional arguments but it allows
                  multiple commands to be chained together.
    :param result_callback: The result callback to attach to this multi
        command. This can be set or changed later with the
        :meth:`result_callback` decorator.
    :param attrs: Other command arguments described in :class:`Command`.
  summary: A multi command is the basic implementation of a command that
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: invoke_without_command
    default: 'False'
    rest: false
  - kind: positional
    name: no_args_is_help
    default: None
    rest: false
  - kind: positional
    name: subcommand_metavar
    default: None
    rest: false
  - kind: positional
    name: chain
    default: 'False'
    rest: false
  - kind: positional
    name: result_callback
    default: None
    rest: false
  - type: MultiCommand
  inherits_from:
  - <class 'click.core.Command'>
  - <class 'click.core.BaseCommand'>
- name: MultiCommand.allow_extra_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: MultiCommand.allow_interspersed_args
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: MultiCommand.collect_usage_pieces
  kind: method
  ns: click
  description: |-
    Returns all the pieces that go into the usage line and returns
    it as a list of strings.
  summary: Returns all the pieces that go into the usage line and returns
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.format_commands
  kind: method
  ns: click
  description: |-
    Extra format methods for multi methods that adds all the commands
    after the options.
  summary: Extra format methods for multi methods that adds all the commands
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.format_epilog
  kind: method
  ns: click
  description: Writes the epilog into the formatter if it exists.
  summary: Writes the epilog into the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.format_help
  kind: method
  ns: click
  description: |-
    Writes the help into the formatter if it exists.

    This is a low-level method called by :meth:`get_help`.

    This calls the following methods:

    -   :meth:`format_usage`
    -   :meth:`format_help_text`
    -   :meth:`format_options`
    -   :meth:`format_epilog`
  summary: Writes the help into the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.format_help_text
  kind: method
  ns: click
  description: Writes the help text to the formatter if it exists.
  summary: Writes the help text to the formatter if it exists
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.format_options
  kind: method
  ns: click
  description: Writes all the options into the formatter if they exist.
  summary: Writes all the options into the formatter if they exist
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.format_usage
  kind: method
  ns: click
  description: |-
    Writes the usage line into the formatter.

    This is a low-level method called by :meth:`get_usage`.
  summary: Writes the usage line into the formatter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: formatter
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.get_command
  kind: method
  ns: click
  description: |-
    Given a context and a command name, this returns a
    :class:`Command` object if it exists or returns `None`.
  summary: Given a context and a command name, this returns a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: cmd_name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.get_help
  kind: method
  ns: click
  description: |-
    Formats the help into a string and returns it.

    Calls :meth:`format_help` internally.
  summary: Formats the help into a string and returns it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.get_help_option
  kind: method
  ns: click
  description: Returns the help option object.
  summary: Returns the help option object
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.get_help_option_names
  kind: method
  ns: click
  description: Returns the names for the help option.
  summary: Returns the names for the help option
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.get_params
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.get_short_help_str
  kind: method
  ns: click
  description: |-
    Gets short help for the command or makes it by shortening the
    long help string.
  summary: Gets short help for the command or makes it by shortening the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: limit
    default: '45'
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.get_usage
  kind: method
  ns: click
  description: |-
    Formats the usage line into a string and returns it.

    Calls :meth:`format_usage` internally.
  summary: Formats the usage line into a string and returns it
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.ignore_unknown_options
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: MultiCommand.invoke
  kind: method
  ns: click
  description: |-
    Given a context, this invokes the attached callback (if it exists)
    in the right way.
  summary: Given a context, this invokes the attached callback (if it exists)
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.list_commands
  kind: method
  ns: click
  description: |-
    Returns a list of subcommand names in the order they should
    appear.
  summary: Returns a list of subcommand names in the order they should
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.main
  kind: method
  ns: click
  description: |-
    This is the way to invoke a script with all the bells and
    whistles as a command line application.  This will always terminate
    the application after a call.  If this is not wanted, ``SystemExit``
    needs to be caught.

    This method is also available by directly calling the instance of
    a :class:`Command`.

    :param args: the arguments that should be used for parsing.  If not
                 provided, ``sys.argv[1:]`` is used.
    :param prog_name: the program name that should be used.  By default
                      the program name is constructed by taking the file
                      name from ``sys.argv[0]``.
    :param complete_var: the environment variable that controls the
                         bash completion support.  The default is
                         ``"_<prog_name>_COMPLETE"`` with prog_name in
                         uppercase.
    :param standalone_mode: the default behavior is to invoke the script
                            in standalone mode.  Click will then
                            handle exceptions and convert them into
                            error messages and the function will never
                            return but shut down the interpreter.  If
                            this is set to `False` they will be
                            propagated to the caller and the return
                            value of this function is the return value
                            of :meth:`invoke`.
    :param windows_expand_args: Expand glob patterns, user dir, and
        env vars in command line args on Windows.
    :param extra: extra keyword arguments are forwarded to the context
                  constructor.  See :class:`Context` for more information.

    .. versionchanged:: 8.0.1
        Added the ``windows_expand_args`` parameter to allow
        disabling command line arg expansion on Windows.

    .. versionchanged:: 8.0
        When taking arguments from ``sys.argv`` on Windows, glob
        patterns, user dir, and env vars are expanded.

    .. versionchanged:: 3.0
       Added the ``standalone_mode`` parameter.
  summary: This is the way to invoke a script with all the bells and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: prog_name
    default: None
    rest: false
  - kind: positional
    name: complete_var
    default: None
    rest: false
  - kind: positional
    name: standalone_mode
    default: 'True'
    rest: false
  - kind: positional
    name: windows_expand_args
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.make_context
  kind: method
  ns: click
  description: |-
    This function when given an info name and arguments will kick
    off the parsing and create a new :class:`Context`.  It does not
    invoke the actual command callback though.

    To quickly customize the context class used without overriding
    this method, set the :attr:`context_class` attribute.

    :param info_name: the info name for this invocation.  Generally this
                      is the most descriptive name for the script or
                      command.  For the toplevel script it's usually
                      the name of the script, for commands below it's
                      the name of the command.
    :param args: the arguments to parse as list of strings.
    :param parent: the parent context if available.
    :param extra: extra keyword arguments forwarded to the context
                  constructor.

    .. versionchanged:: 8.0
        Added the :attr:`context_class` attribute.
  summary: This function when given an info name and arguments will kick
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: info_name
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: parent
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.make_parser
  kind: method
  ns: click
  description: Creates the underlying option parser for this command.
  summary: Creates the underlying option parser for this command
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.parse_args
  kind: method
  ns: click
  description: |-
    Given a context and a list of arguments this creates the parser
    and parses the arguments, then modifies the context as necessary.
    This is automatically invoked by :meth:`make_context`.
  summary: Given a context and a list of arguments this creates the parser
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.resolve_command
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.result_callback
  kind: method
  ns: click
  description: |-
    Adds a result callback to the command.  By default if a
    result callback is already registered this will chain them but
    this can be disabled with the `replace` parameter.  The result
    callback is invoked with the return value of the subcommand
    (or the list of return values from all subcommands if chaining
    is enabled) as well as the parameters as they would be passed
    to the main callback.

    Example::

        @click.group()
        @click.option('-i', '--input', default=23)
        def cli(input):
            return 42

        @cli.result_callback()
        def process_result(result, input):
            return result + input

    :param replace: if set to `True` an already existing result
                    callback will be removed.

    .. versionchanged:: 8.0
        Renamed from ``resultcallback``.

    .. versionadded:: 3.0
  summary: Adds a result callback to the command
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: replace
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of completions for the incomplete value. Looks
    at the names of options, subcommands, and chained
    multi-commands.

    :param ctx: Invocation context for this command.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of completions for the incomplete value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: MultiCommand.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation. This traverses the entire structure
    below this command.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    :param ctx: A :class:`Context` representing this command.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoSuchOption
  kind: class
  ns: click
  description: |-
    Raised if click attempted to handle an option that does not
    exist.

    .. versionadded:: 4.0
  summary: Raised if click attempted to handle an option that does not
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: option_name
    default: null
    rest: false
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: possibilities
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: NoSuchOption
  inherits_from:
  - <class 'click.exceptions.UsageError'>
  - <class 'click.exceptions.ClickException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: NoSuchOption.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: NoSuchOption.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: NoSuchOption.exit_code
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: NoSuchOption.format_message
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: NoSuchOption.show
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: NoSuchOption.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: Option
  kind: class
  ns: click
  description: |-
    Options are usually optional values on the command line and
    have some extra features that arguments don't have.

    All other parameters are passed onwards to the parameter constructor.

    :param show_default: Show the default value for this option in its
        help text. Values are not shown by default, unless
        :attr:`Context.show_default` is ``True``. If this value is a
        string, it shows that string in parentheses instead of the
        actual value. This is particularly useful for dynamic options.
        For single option boolean flags, the default remains hidden if
        its value is ``False``.
    :param show_envvar: Controls if an environment variable should be
        shown on the help page. Normally, environment variables are not
        shown.
    :param prompt: If set to ``True`` or a non empty string then the
        user will be prompted for input. If set to ``True`` the prompt
        will be the option name capitalized.
    :param confirmation_prompt: Prompt a second time to confirm the
        value if it was prompted for. Can be set to a string instead of
        ``True`` to customize the message.
    :param prompt_required: If set to ``False``, the user will be
        prompted for input only when the option was specified as a flag
        without a value.
    :param hide_input: If this is ``True`` then the input on the prompt
        will be hidden from the user. This is useful for password input.
    :param is_flag: forces this option to act as a flag.  The default is
                    auto detection.
    :param flag_value: which value should be used for this flag if it's
                       enabled.  This is set to a boolean automatically if
                       the option string contains a slash to mark two options.
    :param multiple: if this is set to `True` then the argument is accepted
                     multiple times and recorded.  This is similar to ``nargs``
                     in how it works but supports arbitrary number of
                     arguments.
    :param count: this flag makes an option increment an integer.
    :param allow_from_autoenv: if this is enabled then the value of this
                               parameter will be pulled from an environment
                               variable in case a prefix is defined on the
                               context.
    :param help: the help string.
    :param hidden: hide this option from help outputs.
    :param attrs: Other command arguments described in :class:`Parameter`.

    .. versionchanged:: 8.1.0
        Help text indentation is cleaned here instead of only in the
        ``@option`` decorator.

    .. versionchanged:: 8.1.0
        The ``show_default`` parameter overrides
        ``Context.show_default``.

    .. versionchanged:: 8.1.0
        The default of a single option boolean flag is not shown if the
        default value is ``False``.

    .. versionchanged:: 8.0.1
        ``type`` is detected from ``flag_value`` if given.
  summary: Options are usually optional values on the command line and
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param_decls
    default: None
    rest: false
  - kind: positional
    name: show_default
    default: None
    rest: false
  - kind: positional
    name: prompt
    default: 'False'
    rest: false
  - kind: positional
    name: confirmation_prompt
    default: 'False'
    rest: false
  - kind: positional
    name: prompt_required
    default: 'True'
    rest: false
  - kind: positional
    name: hide_input
    default: 'False'
    rest: false
  - kind: positional
    name: is_flag
    default: None
    rest: false
  - kind: positional
    name: flag_value
    default: None
    rest: false
  - kind: positional
    name: multiple
    default: 'False'
    rest: false
  - kind: positional
    name: count
    default: 'False'
    rest: false
  - kind: positional
    name: allow_from_autoenv
    default: 'True'
    rest: false
  - kind: positional
    name: type
    default: None
    rest: false
  - kind: positional
    name: help
    default: None
    rest: false
  - kind: positional
    name: hidden
    default: 'False'
    rest: false
  - kind: positional
    name: show_choices
    default: 'True'
    rest: false
  - kind: positional
    name: show_envvar
    default: 'False'
    rest: false
  - type: Option
  inherits_from:
  - <class 'click.core.Parameter'>
- name: Option.add_to_parser
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: parser
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.consume_value
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: opts
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.get_default
  kind: method
  ns: click
  description: |-
    Get the default for the parameter. Tries
    :meth:`Context.lookup_default` first, then the local default.

    :param ctx: Current context.
    :param call: If the default is a callable, call it. Disable to
        return the callable instead.

    .. versionchanged:: 8.0.2
        Type casting is no longer performed when getting a default.

    .. versionchanged:: 8.0.1
        Type casting can fail in resilient parsing mode. Invalid
        defaults will not prevent showing help text.

    .. versionchanged:: 8.0
        Looks at ``ctx.default_map`` first.

    .. versionchanged:: 8.0
        Added the ``call`` parameter.
  summary: Get the default for the parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: call
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.get_error_hint
  kind: method
  ns: click
  description: |-
    Get a stringified version of the param for use in error messages to
    indicate which param caused the error.
  summary: Get a stringified version of the param for use in error messages to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.get_help_record
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.get_usage_pieces
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.handle_parse_result
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: opts
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.human_readable_name
  kind: property
  ns: click
  description: |-
    Returns the human readable name of this parameter.  This is the
    same as the name for options, but the metavar for arguments.
  summary: Returns the human readable name of this parameter
  signatures: null
  inherits_from: null
- name: Option.make_metavar
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.param_type_name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Option.process_value
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.prompt_for_value
  kind: method
  ns: click
  description: |-
    This is an alternative flow that can be activated in the full
    value processing if a value does not exist.  It will prompt the
    user until a valid value exists and then returns the processed
    value as result.
  summary: This is an alternative flow that can be activated in the full
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.resolve_envvar_value
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of completions for the incomplete value. If a
    ``shell_complete`` function was given during init, it is used.
    Otherwise, the :attr:`type`
    :meth:`~click.types.ParamType.shell_complete` function is used.

    :param ctx: Invocation context for this command.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of completions for the incomplete value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.type_cast_value
  kind: method
  ns: click
  description: |-
    Convert and validate a value against the option's
    :attr:`type`, :attr:`multiple`, and :attr:`nargs`.
  summary: Convert and validate a value against the option's
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.value_from_envvar
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.value_is_missing
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: OptionParser
  kind: class
  ns: click
  description: |-
    The option parser is an internal class that is ultimately used to
    parse options and arguments.  It's modelled after optparse and brings
    a similar but vastly simplified API.  It should generally not be used
    directly as the high level Click classes wrap it for you.

    It's not nearly as extensible as optparse or argparse as it does not
    implement features that are implemented on a higher level (such as
    types or defaults).

    :param ctx: optionally the :class:`~click.Context` where this parser
                should go with.
  summary: The option parser is an internal class that is ultimately used to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: OptionParser
  inherits_from: null
- name: OptionParser.add_argument
  kind: method
  ns: click
  description: |-
    Adds a positional argument named `dest` to the parser.

    The `obj` can be used to identify the option in the order list
    that is returned from the parser.
  summary: Adds a positional argument named `dest` to the parser
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: dest
    default: null
    rest: false
  - kind: positional
    name: nargs
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: OptionParser.add_option
  kind: method
  ns: click
  description: |-
    Adds a new option named `dest` to the parser.  The destination
    is not inferred (unlike with optparse) and needs to be explicitly
    provided.  Action can be any of ``store``, ``store_const``,
    ``append``, ``append_const`` or ``count``.

    The `obj` can be used to identify the option in the order list
    that is returned from the parser.
  summary: Adds a new option named `dest` to the parser
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: opts
    default: null
    rest: false
  - kind: positional
    name: dest
    default: null
    rest: false
  - kind: positional
    name: action
    default: None
    rest: false
  - kind: positional
    name: nargs
    default: '1'
    rest: false
  - kind: positional
    name: const
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: OptionParser.parse_args
  kind: method
  ns: click
  description: |-
    Parses positional arguments and returns ``(values, args, order)``
    for the parsed options and arguments as well as the leftover
    arguments if there are any.  The order is a list of objects as they
    appear on the command line.  If arguments appear multiple times they
    will be memorized multiple times as well.
  summary: Parses positional arguments and returns ``(values, args, order)``
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ParamType
  kind: class
  ns: click
  description: |-
    Represents the type of a parameter. Validates and converts values
    from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the
    following:

    -   The :attr:`name` class attribute must be set.
    -   Calling an instance of the type with ``None`` must return
        ``None``. This is already implemented by default.
    -   :meth:`convert` must convert string values to the correct type.
    -   :meth:`convert` must accept values that are already the correct
        type.
    -   It must be able to convert a value if the ``ctx`` and ``param``
        arguments are ``None``. This can occur when converting prompt
        input.
  summary: Represents the type of a parameter
  signatures:
  - type: ParamType
  inherits_from: null
- name: ParamType.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: ParamType.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ParamType.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ParamType.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ParamType.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ParamType.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ParamType.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: ParamType.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ParamType.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ParamType.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter
  kind: class
  ns: click
  description: |-
    A parameter to a command comes in two versions: they are either
    :class:`Option`\s or :class:`Argument`\s.  Other subclasses are currently
    not supported by design as some of the internals for parsing are
    intentionally not finalized.

    Some settings are supported by both options and arguments.

    :param param_decls: the parameter declarations for this option or
                        argument.  This is a list of flags or argument
                        names.
    :param type: the type that should be used.  Either a :class:`ParamType`
                 or a Python type.  The latter is converted into the former
                 automatically if supported.
    :param required: controls if this is optional or not.
    :param default: the default value if omitted.  This can also be a callable,
                    in which case it's invoked when the default is needed
                    without any arguments.
    :param callback: A function to further process or validate the value
        after type conversion. It is called as ``f(ctx, param, value)``
        and must return the value. It is called for all sources,
        including prompts.
    :param nargs: the number of arguments to match.  If not ``1`` the return
                  value is a tuple instead of single value.  The default for
                  nargs is ``1`` (except if the type is a tuple, then it's
                  the arity of the tuple). If ``nargs=-1``, all remaining
                  parameters are collected.
    :param metavar: how the value is represented in the help page.
    :param expose_value: if this is `True` then the value is passed onwards
                         to the command callback and stored on the context,
                         otherwise it's skipped.
    :param is_eager: eager values are processed before non eager ones.  This
                     should not be set for arguments or it will inverse the
                     order of processing.
    :param envvar: a string or list of strings that are environment variables
                   that should be checked.
    :param shell_complete: A function that returns custom shell
        completions. Used instead of the param's type completion if
        given. Takes ``ctx, param, incomplete`` and must return a list
        of :class:`~click.shell_completion.CompletionItem` or a list of
        strings.

    .. versionchanged:: 8.0
        ``process_value`` validates required parameters and bounded
        ``nargs``, and invokes the parameter callback before returning
        the value. This allows the callback to validate prompts.
        ``full_process_value`` is removed.

    .. versionchanged:: 8.0
        ``autocompletion`` is renamed to ``shell_complete`` and has new
        semantics described above. The old name is deprecated and will
        be removed in 8.1, until then it will be wrapped to match the
        new requirements.

    .. versionchanged:: 8.0
        For ``multiple=True, nargs>1``, the default must be a list of
        tuples.

    .. versionchanged:: 8.0
        Setting a default is no longer required for ``nargs>1``, it will
        default to ``None``. ``multiple=True`` or ``nargs=-1`` will
        default to ``()``.

    .. versionchanged:: 7.1
        Empty environment variables are ignored rather than taking the
        empty string value. This makes it possible for scripts to clear
        variables if they can't unset them.

    .. versionchanged:: 2.0
        Changed signature for parameter callback to also be passed the
        parameter. The old callback format will still work, but it will
        raise a warning to give you a chance to migrate the code easier.
  summary: 'A parameter to a command comes in two versions: they are either'
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param_decls
    default: None
    rest: false
  - kind: positional
    name: type
    default: None
    rest: false
  - kind: positional
    name: required
    default: 'False'
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: callback
    default: None
    rest: false
  - kind: positional
    name: nargs
    default: None
    rest: false
  - kind: positional
    name: multiple
    default: 'False'
    rest: false
  - kind: positional
    name: metavar
    default: None
    rest: false
  - kind: positional
    name: expose_value
    default: 'True'
    rest: false
  - kind: positional
    name: is_eager
    default: 'False'
    rest: false
  - kind: positional
    name: envvar
    default: None
    rest: false
  - kind: positional
    name: shell_complete
    default: None
    rest: false
  - type: Parameter
  inherits_from: null
- name: Parameter.add_to_parser
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: parser
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.consume_value
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: opts
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.get_default
  kind: method
  ns: click
  description: |-
    Get the default for the parameter. Tries
    :meth:`Context.lookup_default` first, then the local default.

    :param ctx: Current context.
    :param call: If the default is a callable, call it. Disable to
        return the callable instead.

    .. versionchanged:: 8.0.2
        Type casting is no longer performed when getting a default.

    .. versionchanged:: 8.0.1
        Type casting can fail in resilient parsing mode. Invalid
        defaults will not prevent showing help text.

    .. versionchanged:: 8.0
        Looks at ``ctx.default_map`` first.

    .. versionchanged:: 8.0
        Added the ``call`` parameter.
  summary: Get the default for the parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: call
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.get_error_hint
  kind: method
  ns: click
  description: |-
    Get a stringified version of the param for use in error messages to
    indicate which param caused the error.
  summary: Get a stringified version of the param for use in error messages to
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.get_help_record
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.get_usage_pieces
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.handle_parse_result
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: opts
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.human_readable_name
  kind: property
  ns: click
  description: |-
    Returns the human readable name of this parameter.  This is the
    same as the name for options, but the metavar for arguments.
  summary: Returns the human readable name of this parameter
  signatures: null
  inherits_from: null
- name: Parameter.make_metavar
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.param_type_name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Parameter.process_value
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.resolve_envvar_value
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of completions for the incomplete value. If a
    ``shell_complete`` function was given during init, it is used.
    Otherwise, the :attr:`type`
    :meth:`~click.types.ParamType.shell_complete` function is used.

    :param ctx: Invocation context for this command.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of completions for the incomplete value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.type_cast_value
  kind: method
  ns: click
  description: |-
    Convert and validate a value against the option's
    :attr:`type`, :attr:`multiple`, and :attr:`nargs`.
  summary: Convert and validate a value against the option's
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.value_from_envvar
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Parameter.value_is_missing
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Path
  kind: class
  ns: click
  description: |-
    The ``Path`` type is similar to the :class:`File` type, but
    returns the filename instead of an open file. Various checks can be
    enabled to validate the type of file and permissions.

    :param exists: The file or directory needs to exist for the value to
        be valid. If this is not set to ``True``, and the file does not
        exist, then all further checks are silently skipped.
    :param file_okay: Allow a file as a value.
    :param dir_okay: Allow a directory as a value.
    :param readable: if true, a readable check is performed.
    :param writable: if true, a writable check is performed.
    :param executable: if true, an executable check is performed.
    :param resolve_path: Make the value absolute and resolve any
        symlinks. A ``~`` is not expanded, as this is supposed to be
        done by the shell only.
    :param allow_dash: Allow a single dash as a value, which indicates
        a standard stream (but does not open it). Use
        :func:`~click.open_file` to handle opening this value.
    :param path_type: Convert the incoming path value to this type. If
        ``None``, keep Python's default, which is ``str``. Useful to
        convert to :class:`pathlib.Path`.

    .. versionchanged:: 8.1
        Added the ``executable`` parameter.

    .. versionchanged:: 8.0
        Allow passing ``path_type=pathlib.Path``.

    .. versionchanged:: 6.0
        Added the ``allow_dash`` parameter.
  summary: The ``Path`` type is similar to the :class:`File` type, but
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exists
    default: 'False'
    rest: false
  - kind: positional
    name: file_okay
    default: 'True'
    rest: false
  - kind: positional
    name: dir_okay
    default: 'True'
    rest: false
  - kind: positional
    name: writable
    default: 'False'
    rest: false
  - kind: positional
    name: readable
    default: 'True'
    rest: false
  - kind: positional
    name: resolve_path
    default: 'False'
    rest: false
  - kind: positional
    name: allow_dash
    default: 'False'
    rest: false
  - kind: positional
    name: path_type
    default: None
    rest: false
  - kind: positional
    name: executable
    default: 'False'
    rest: false
  - type: Path
  inherits_from:
  - <class 'click.types.ParamType'>
- name: Path.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Path.coerce_path_result
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Path.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Path.envvar_list_splitter
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: Path.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Path.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Path.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Path.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Path.shell_complete
  kind: method
  ns: click
  description: |-
    Return a special completion marker that tells the completion
    system to use the shell to provide path completions for only
    directories or any paths.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a special completion marker that tells the completion
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Path.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Path.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: STRING
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple
  kind: class
  ns: click
  description: |-
    The default behavior of Click is to apply a type on a value directly.
    This works well in most cases, except for when `nargs` is set to a fixed
    count and different types should be used for different items.  In this
    case the :class:`Tuple` type can be used.  This type can only be used
    if `nargs` is set to a fixed number.

    For more information see :ref:`tuple-type`.

    This can be selected by using a Python tuple literal as a type.

    :param types: a list of types that should be used for the tuple items.
  summary: The default behavior of Click is to apply a type on a value directly
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: types
    default: null
    rest: false
  - type: Tuple
  inherits_from:
  - <class 'click.types.CompositeParamType'>
  - <class 'click.types.ParamType'>
- name: Tuple.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: Tuple.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Tuple.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: Tuple.name
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Tuple.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Tuple.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UNPROCESSED
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UUID
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UsageError
  kind: class
  ns: click
  description: |-
    An internal exception that signals a usage error.  This typically
    aborts any further handling.

    :param message: the error message to display.
    :param ctx: optionally the context that caused this error.  Click will
                fill in the context automatically in some situations.
  summary: An internal exception that signals a usage error
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: UsageError
  inherits_from:
  - <class 'click.exceptions.ClickException'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: UsageError.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: UsageError.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UsageError.exit_code
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: UsageError.format_message
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UsageError.show
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UsageError.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: argument
  kind: function
  ns: click
  description: |-
    Attaches an argument to the command.  All positional arguments are
    passed as parameter declarations to :class:`Argument`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Argument` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default argument class, refer to :class:`Argument` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the argument class to instantiate.  This defaults to
                :class:`Argument`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
  summary: Attaches an argument to the command
  signatures:
  - name: cls
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: clear
  kind: function
  ns: click
  description: |-
    Clears the terminal screen.  This will have the effect of clearing
    the whole visible space of the terminal and moving the cursor to the
    top left.  This does not do anything if not connected to a terminal.

    .. versionadded:: 2.0
  summary: Clears the terminal screen
  signatures:
  - type: '?'
  inherits_from: null
- name: command
  kind: function
  ns: click
  description: |-
    Creates a new :class:`Command` and uses the decorated function as
    callback.  This will also automatically attach all decorated
    :func:`option`\s and :func:`argument`\s as parameters to the command.

    The name of the command defaults to the name of the function with
    underscores replaced by dashes.  If you want to change that, you can
    pass the intended name as the first argument.

    All keyword arguments are forwarded to the underlying command class.
    For the ``params`` argument, any decorated params are appended to
    the end of the list.

    Once decorated the function turns into a :class:`Command` instance
    that can be invoked as a command line utility or be attached to a
    command :class:`Group`.

    :param name: the name of the command.  This defaults to the function
                 name with underscores replaced by dashes.
    :param cls: the command class to instantiate.  This defaults to
                :class:`Command`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.

    .. versionchanged:: 8.1
        The ``params`` argument can be used. Decorated params are
        appended to the end of the list.
  summary: Creates a new :class:`Command` and uses the decorated function as
  signatures:
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: cls
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: confirm
  kind: function
  ns: click
  description: |-
    Prompts for confirmation (yes/no question).

    If the user aborts the input by sending a interrupt signal this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the question to ask.
    :param default: The default value to use when no input is given. If
        ``None``, repeat until input is given.
    :param abort: if this is set to `True` a negative answer aborts the
                  exception by raising :exc:`Abort`.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.

    .. versionchanged:: 8.0
        Repeat until input is given if ``default`` is ``None``.

    .. versionadded:: 4.0
        Added the ``err`` parameter.
  summary: Prompts for confirmation (yes/no question)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: 'False'
    rest: false
  - kind: positional
    name: abort
    default: 'False'
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: confirmation_option
  kind: function
  ns: click
  description: |-
    Add a ``--yes`` option which shows a prompt before continuing if
    not passed. If the prompt is declined, the program will exit.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--yes"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
  summary: Add a ``--yes`` option which shows a prompt before continuing if
  signatures:
  - type: '?'
  inherits_from: null
- name: core
  kind: module
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Exit
  kind: class
  ns: click
  description: |-
    An exception that indicates that the application should exit with some
    status code.

    :param code: the status code to exit with.
  summary: An exception that indicates that the application should exit with some
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: code
    default: '0'
    rest: false
  - type: Exit
  inherits_from:
  - <class 'RuntimeError'>
  - <class 'Exception'>
  - <class 'BaseException'>
- name: Exit.add_note
  kind: callable
  ns: click
  description: |-
    Exception.add_note(note) --
    add a note to the exception
  summary: Exception
  signatures: null
  inherits_from: null
- name: Exit.args
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Exit.exit_code
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: Exit.with_traceback
  kind: callable
  ns: click
  description: |-
    Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.
  summary: Exception
  signatures: null
  inherits_from: null
- name: ExitStack
  kind: class
  ns: click
  description: |-
    Context manager for dynamic management of a stack of exit callbacks.

    For example:
        with ExitStack() as stack:
            files = [stack.enter_context(open(fname)) for fname in filenames]
            # All opened files will automatically be closed at the end of
            # the with statement, even if attempts to open files later
            # in the list raise an exception.
  summary: Context manager for dynamic management of a stack of exit callbacks
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: ExitStack
  inherits_from:
  - <class 'contextlib._BaseExitStack'>
  - <class 'contextlib.AbstractContextManager'>
  - <class 'abc.ABC'>
- name: ExitStack.callback
  kind: method
  ns: click
  description: |-
    Registers an arbitrary callback and arguments.

    Cannot suppress exceptions.
  summary: Registers an arbitrary callback and arguments
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: callback
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExitStack.close
  kind: method
  ns: click
  description: Immediately unwind the context stack.
  summary: Immediately unwind the context stack
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExitStack.enter_context
  kind: method
  ns: click
  description: |-
    Enters the supplied context manager.

    If successful, also pushes its __exit__ method as a callback and
    returns the result of the __enter__ method.
  summary: Enters the supplied context manager
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cm
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExitStack.pop_all
  kind: method
  ns: click
  description: Preserve the context stack by transferring it to a new instance.
  summary: Preserve the context stack by transferring it to a new instance
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ExitStack.push
  kind: method
  ns: click
  description: |-
    Registers a callback with the standard __exit__ method signature.

    Can suppress exceptions the same way __exit__ method can.
    Also accepts any object with an __exit__ method (registering a call
    to the method instead of the object itself).
  summary: Registers a callback with the standard __exit__ method signature
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: exit
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: F
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: PacifyFlushWrapper
  kind: class
  ns: click
  description: |-
    This wrapper is used to catch and suppress BrokenPipeErrors resulting
    from ``.flush()`` being called on broken pipe during the shutdown/final-GC
    of the Python interpreter. Notably ``.flush()`` is always called on
    ``sys.stdout`` and ``sys.stderr``. So as to have minimal impact on any
    other cleanup code, and the case where the underlying file is not a broken
    pipe, all calls and attributes are proxied.
  summary: This wrapper is used to catch and suppress BrokenPipeErrors resulting
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - type: PacifyFlushWrapper
  inherits_from: null
- name: PacifyFlushWrapper.flush
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ParameterSource
  kind: class
  ns: click
  description: |-
    This is an :class:`~enum.Enum` that indicates the source of a
    parameter's value.

    Use :meth:`click.Context.get_parameter_source` to get the
    source for a parameter by name.

    .. versionchanged:: 8.0
        Use :class:`~enum.Enum` and drop the ``validate`` method.

    .. versionchanged:: 8.0
        Added the ``PROMPT`` value.
  summary: This is an :class:`~enum
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: names
    default: None
    rest: false
  - name: module
    default: None
    rest: false
    kind: kw-only
  - name: qualname
    default: None
    rest: false
    kind: kw-only
  - name: type
    default: None
    rest: false
    kind: kw-only
  - name: start
    default: '1'
    rest: false
    kind: kw-only
  - name: boundary
    default: None
    rest: false
    kind: kw-only
  - type: ParameterSource
  inherits_from:
  - <enum 'Enum'>
- name: ParameterSource.COMMANDLINE
  kind: property
  ns: click
  description: |-
    This is an :class:`~enum.Enum` that indicates the source of a
    parameter's value.

    Use :meth:`click.Context.get_parameter_source` to get the
    source for a parameter by name.

    .. versionchanged:: 8.0
        Use :class:`~enum.Enum` and drop the ``validate`` method.

    .. versionchanged:: 8.0
        Added the ``PROMPT`` value.
  summary: This is an :class:`~enum
  signatures: null
  inherits_from: null
- name: ParameterSource.DEFAULT
  kind: property
  ns: click
  description: |-
    This is an :class:`~enum.Enum` that indicates the source of a
    parameter's value.

    Use :meth:`click.Context.get_parameter_source` to get the
    source for a parameter by name.

    .. versionchanged:: 8.0
        Use :class:`~enum.Enum` and drop the ``validate`` method.

    .. versionchanged:: 8.0
        Added the ``PROMPT`` value.
  summary: This is an :class:`~enum
  signatures: null
  inherits_from: null
- name: ParameterSource.DEFAULT_MAP
  kind: property
  ns: click
  description: |-
    This is an :class:`~enum.Enum` that indicates the source of a
    parameter's value.

    Use :meth:`click.Context.get_parameter_source` to get the
    source for a parameter by name.

    .. versionchanged:: 8.0
        Use :class:`~enum.Enum` and drop the ``validate`` method.

    .. versionchanged:: 8.0
        Added the ``PROMPT`` value.
  summary: This is an :class:`~enum
  signatures: null
  inherits_from: null
- name: ParameterSource.ENVIRONMENT
  kind: property
  ns: click
  description: |-
    This is an :class:`~enum.Enum` that indicates the source of a
    parameter's value.

    Use :meth:`click.Context.get_parameter_source` to get the
    source for a parameter by name.

    .. versionchanged:: 8.0
        Use :class:`~enum.Enum` and drop the ``validate`` method.

    .. versionchanged:: 8.0
        Added the ``PROMPT`` value.
  summary: This is an :class:`~enum
  signatures: null
  inherits_from: null
- name: ParameterSource.PROMPT
  kind: property
  ns: click
  description: |-
    This is an :class:`~enum.Enum` that indicates the source of a
    parameter's value.

    Use :meth:`click.Context.get_parameter_source` to get the
    source for a parameter by name.

    .. versionchanged:: 8.0
        Use :class:`~enum.Enum` and drop the ``validate`` method.

    .. versionchanged:: 8.0
        Added the ``PROMPT`` value.
  summary: This is an :class:`~enum
  signatures: null
  inherits_from: null
- name: ParameterSource.name
  kind: property
  ns: click
  description: The name of the Enum member.
  summary: The name of the Enum member
  signatures: null
  inherits_from: null
- name: ParameterSource.value
  kind: property
  ns: click
  description: The value of the Enum member.
  summary: The value of the Enum member
  signatures: null
  inherits_from: null
- name: TracebackType
  kind: class
  ns: click
  description: |-
    TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
    --

    Create a new traceback object.
  summary: TracebackType(tb_next, tb_frame, tb_lasti, tb_lineno)
  signatures: null
  inherits_from: null
- name: TracebackType.tb_frame
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType.tb_lasti
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType.tb_lineno
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: TracebackType.tb_next
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: augment_usage_errors
  kind: function
  ns: click
  description: Context manager that attaches extra information to exceptions.
  summary: Context manager that attaches extra information to exceptions
  signatures:
  - type: '?'
  inherits_from: null
- name: batch
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - kind: positional
    name: batch_size
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: confirm
  kind: function
  ns: click
  description: |-
    Prompts for confirmation (yes/no question).

    If the user aborts the input by sending a interrupt signal this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the question to ask.
    :param default: The default value to use when no input is given. If
        ``None``, repeat until input is given.
    :param abort: if this is set to `True` a negative answer aborts the
                  exception by raising :exc:`Abort`.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.

    .. versionchanged:: 8.0
        Repeat until input is given if ``default`` is ``None``.

    .. versionadded:: 4.0
        Added the ``err`` parameter.
  summary: Prompts for confirmation (yes/no question)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: 'False'
    rest: false
  - kind: positional
    name: abort
    default: 'False'
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: contextmanager
  kind: function
  ns: click
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: echo
  kind: function
  ns: click
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: iter_params_for_processing
  kind: function
  ns: click
  description: |-
    Given a sequence of parameters in the order as should be considered
    for processing and an iterable of parameters that exist, this returns
    a list in the correct order as they should be processed.
  summary: Given a sequence of parameters in the order as should be considered
  signatures:
  - kind: positional
    name: invocation_order
    default: null
    rest: false
  - kind: positional
    name: declaration_order
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: join_options
  kind: function
  ns: click
  description: |-
    Given a list of option strings this joins them in the most appropriate
    way and returns them in the form ``(formatted_string,
    any_prefix_is_slash)`` where the second item in the tuple is a flag that
    indicates if any of the option prefixes was a slash.
  summary: Given a list of option strings this joins them in the most appropriate
  signatures:
  - kind: positional
    name: options
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: make_default_short_help
  kind: function
  ns: click
  description: Returns a condensed version of help string.
  summary: Returns a condensed version of help string
  signatures:
  - kind: positional
    name: help
    default: null
    rest: false
  - kind: positional
    name: max_length
    default: '45'
    rest: false
  - type: '?'
  inherits_from: null
- name: make_str
  kind: function
  ns: click
  description: Converts a value into a valid string.
  summary: Converts a value into a valid string
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ngettext
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: msgid1
    default: null
    rest: false
  - kind: positional
    name: msgid2
    default: null
    rest: false
  - kind: positional
    name: n
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pop_context
  kind: function
  ns: click
  description: Removes the top level from the stack.
  summary: Removes the top level from the stack
  signatures:
  - type: '?'
  inherits_from: null
- name: prompt
  kind: function
  ns: click
  description: |-
    Prompts a user for input.  This is a convenience function that can
    be used to prompt a user for input later.

    If the user aborts the input by sending an interrupt signal, this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the text to show for the prompt.
    :param default: the default value to use if no input happens.  If this
                    is not given it will prompt until it's aborted.
    :param hide_input: if this is set to true then the input value will
                       be hidden.
    :param confirmation_prompt: Prompt a second time to confirm the
        value. Can be set to a string instead of ``True`` to customize
        the message.
    :param type: the type to use to check the value against.
    :param value_proc: if this parameter is provided it's a function that
                       is invoked instead of the type conversion to
                       convert a value.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.
    :param show_choices: Show or hide choices if the passed type is a Choice.
                         For example if type is a Choice of either day or week,
                         show_choices is true and text is "Group by" then the
                         prompt will be "Group by (day, week): ".

    .. versionadded:: 8.0
        ``confirmation_prompt`` can be a custom string.

    .. versionadded:: 7.0
        Added the ``show_choices`` parameter.

    .. versionadded:: 6.0
        Added unicode support for cmd.exe on Windows.

    .. versionadded:: 4.0
        Added the `err` parameter.
  summary: Prompts a user for input
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: hide_input
    default: 'False'
    rest: false
  - kind: positional
    name: confirmation_prompt
    default: 'False'
    rest: false
  - kind: positional
    name: type
    default: None
    rest: false
  - kind: positional
    name: value_proc
    default: None
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: show_choices
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: push_context
  kind: function
  ns: click
  description: Pushes a new context to the current stack.
  summary: Pushes a new context to the current stack
  signatures:
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: repeat
  kind: class
  ns: click
  description: |-
    repeat(object [,times]) -> create an iterator which returns the object
    for the specified number of times.  If not specified, returns the object
    endlessly.
  summary: repeat(object [,times]) -> create an iterator which returns the object
  signatures: null
  inherits_from: null
- name: split_opt
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: opt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: style
  kind: function
  ns: click
  description: |-
    Styles a text with ANSI styles and returns the new string.  By
    default the styling is self contained which means that at the end
    of the string a reset code is issued.  This can be prevented by
    passing ``reset=False``.

    Examples::

        click.echo(click.style('Hello World!', fg='green'))
        click.echo(click.style('ATTENTION!', blink=True))
        click.echo(click.style('Some things', reverse=True, fg='cyan'))
        click.echo(click.style('More colors', fg=(255, 12, 128), bg=117))

    Supported color names:

    * ``black`` (might be a gray)
    * ``red``
    * ``green``
    * ``yellow`` (might be an orange)
    * ``blue``
    * ``magenta``
    * ``cyan``
    * ``white`` (might be light gray)
    * ``bright_black``
    * ``bright_red``
    * ``bright_green``
    * ``bright_yellow``
    * ``bright_blue``
    * ``bright_magenta``
    * ``bright_cyan``
    * ``bright_white``
    * ``reset`` (reset the color code only)

    If the terminal supports it, color may also be specified as:

    -   An integer in the interval [0, 255]. The terminal must support
        8-bit/256-color mode.
    -   An RGB tuple of three integers in [0, 255]. The terminal must
        support 24-bit/true-color mode.

    See https://en.wikipedia.org/wiki/ANSI_color and
    https://gist.github.com/XVilka/8346728 for more information.

    :param text: the string to style with ansi codes.
    :param fg: if provided this will become the foreground color.
    :param bg: if provided this will become the background color.
    :param bold: if provided this will enable or disable bold mode.
    :param dim: if provided this will enable or disable dim mode.  This is
                badly supported.
    :param underline: if provided this will enable or disable underline.
    :param overline: if provided this will enable or disable overline.
    :param italic: if provided this will enable or disable italic.
    :param blink: if provided this will enable or disable blinking.
    :param reverse: if provided this will enable or disable inverse
                    rendering (foreground becomes background and the
                    other way round).
    :param strikethrough: if provided this will enable or disable
        striking through text.
    :param reset: by default a reset-all code is added at the end of the
                  string which means that styles do not carry over.  This
                  can be disabled to compose styles.

    .. versionchanged:: 8.0
        A non-string ``message`` is converted to a string.

    .. versionchanged:: 8.0
       Added support for 256 and RGB color codes.

    .. versionchanged:: 8.0
        Added the ``strikethrough``, ``italic``, and ``overline``
        parameters.

    .. versionchanged:: 7.0
        Added support for bright colors.

    .. versionadded:: 2.0
  summary: Styles a text with ANSI styles and returns the new string
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: fg
    default: None
    rest: false
  - kind: positional
    name: bg
    default: None
    rest: false
  - kind: positional
    name: bold
    default: None
    rest: false
  - kind: positional
    name: dim
    default: None
    rest: false
  - kind: positional
    name: underline
    default: None
    rest: false
  - kind: positional
    name: overline
    default: None
    rest: false
  - kind: positional
    name: italic
    default: None
    rest: false
  - kind: positional
    name: blink
    default: None
    rest: false
  - kind: positional
    name: reverse
    default: None
    rest: false
  - kind: positional
    name: strikethrough
    default: None
    rest: false
  - kind: positional
    name: reset
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: types
  kind: module
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BOOL
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolParamType
  kind: class
  ns: click
  description: |-
    Represents the type of a parameter. Validates and converts values
    from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the
    following:

    -   The :attr:`name` class attribute must be set.
    -   Calling an instance of the type with ``None`` must return
        ``None``. This is already implemented by default.
    -   :meth:`convert` must convert string values to the correct type.
    -   :meth:`convert` must accept values that are already the correct
        type.
    -   It must be able to convert a value if the ``ctx`` and ``param``
        arguments are ``None``. This can occur when converting prompt
        input.
  summary: Represents the type of a parameter
  signatures:
  - type: BoolParamType
  inherits_from:
  - <class 'click.types.ParamType'>
- name: BoolParamType.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: BoolParamType.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolParamType.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BoolParamType.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolParamType.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolParamType.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolParamType.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: BoolParamType.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BoolParamType.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolParamType.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BoolParamType.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CompositeParamType
  kind: class
  ns: click
  description: |-
    Represents the type of a parameter. Validates and converts values
    from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the
    following:

    -   The :attr:`name` class attribute must be set.
    -   Calling an instance of the type with ``None`` must return
        ``None``. This is already implemented by default.
    -   :meth:`convert` must convert string values to the correct type.
    -   :meth:`convert` must accept values that are already the correct
        type.
    -   It must be able to convert a value if the ``ctx`` and ``param``
        arguments are ``None``. This can occur when converting prompt
        input.
  summary: Represents the type of a parameter
  signatures:
  - type: CompositeParamType
  inherits_from:
  - <class 'click.types.ParamType'>
- name: CompositeParamType.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: CompositeParamType.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CompositeParamType.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CompositeParamType.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: CompositeParamType.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CompositeParamType.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CompositeParamType.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: CompositeParamType.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CompositeParamType.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CompositeParamType.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FLOAT
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatParamType
  kind: class
  ns: click
  description: |-
    Represents the type of a parameter. Validates and converts values
    from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the
    following:

    -   The :attr:`name` class attribute must be set.
    -   Calling an instance of the type with ``None`` must return
        ``None``. This is already implemented by default.
    -   :meth:`convert` must convert string values to the correct type.
    -   :meth:`convert` must accept values that are already the correct
        type.
    -   It must be able to convert a value if the ``ctx`` and ``param``
        arguments are ``None``. This can occur when converting prompt
        input.
  summary: Represents the type of a parameter
  signatures:
  - type: FloatParamType
  inherits_from:
  - <class 'click.types._NumberParamTypeBase'>
  - <class 'click.types.ParamType'>
- name: FloatParamType.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: FloatParamType.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatParamType.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FloatParamType.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatParamType.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatParamType.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatParamType.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FloatParamType.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: FloatParamType.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatParamType.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FloatParamType.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FuncParamType
  kind: class
  ns: click
  description: |-
    Represents the type of a parameter. Validates and converts values
    from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the
    following:

    -   The :attr:`name` class attribute must be set.
    -   Calling an instance of the type with ``None`` must return
        ``None``. This is already implemented by default.
    -   :meth:`convert` must convert string values to the correct type.
    -   :meth:`convert` must accept values that are already the correct
        type.
    -   It must be able to convert a value if the ``ctx`` and ``param``
        arguments are ``None``. This can occur when converting prompt
        input.
  summary: Represents the type of a parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: func
    default: null
    rest: false
  - type: FuncParamType
  inherits_from:
  - <class 'click.types.ParamType'>
- name: FuncParamType.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: FuncParamType.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FuncParamType.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FuncParamType.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FuncParamType.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FuncParamType.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FuncParamType.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: FuncParamType.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FuncParamType.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FuncParamType.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: INT
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntParamType
  kind: class
  ns: click
  description: |-
    Represents the type of a parameter. Validates and converts values
    from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the
    following:

    -   The :attr:`name` class attribute must be set.
    -   Calling an instance of the type with ``None`` must return
        ``None``. This is already implemented by default.
    -   :meth:`convert` must convert string values to the correct type.
    -   :meth:`convert` must accept values that are already the correct
        type.
    -   It must be able to convert a value if the ``ctx`` and ``param``
        arguments are ``None``. This can occur when converting prompt
        input.
  summary: Represents the type of a parameter
  signatures:
  - type: IntParamType
  inherits_from:
  - <class 'click.types._NumberParamTypeBase'>
  - <class 'click.types.ParamType'>
- name: IntParamType.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: IntParamType.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntParamType.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: IntParamType.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: IntParamType.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntParamType.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntParamType.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: IntParamType.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: IntParamType.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntParamType.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: IntParamType.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyFile
  kind: class
  ns: click
  description: |-
    A lazy file works like a regular file but it does not fully open
    the file but it does perform some basic checks early to see if the
    filename parameter does make sense.  This is useful for safely opening
    files for writing.
  summary: A lazy file works like a regular file but it does not fully open
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - kind: positional
    name: atomic
    default: 'False'
    rest: false
  - type: LazyFile
  inherits_from: null
- name: LazyFile.close
  kind: method
  ns: click
  description: Closes the underlying file, no matter what.
  summary: Closes the underlying file, no matter what
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyFile.close_intelligently
  kind: method
  ns: click
  description: |-
    This function only closes the file if it was opened by the lazy
    file wrapper.  For instance this will never close stdin.
  summary: This function only closes the file if it was opened by the lazy
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: LazyFile.open
  kind: method
  ns: click
  description: |-
    Opens the file if it's not yet open.  This call might fail with
    a :exc:`FileError`.  Not handling this error will produce an error
    that Click shows.
  summary: Opens the file if it's not yet open
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: STRING
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringParamType
  kind: class
  ns: click
  description: |-
    Represents the type of a parameter. Validates and converts values
    from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the
    following:

    -   The :attr:`name` class attribute must be set.
    -   Calling an instance of the type with ``None`` must return
        ``None``. This is already implemented by default.
    -   :meth:`convert` must convert string values to the correct type.
    -   :meth:`convert` must accept values that are already the correct
        type.
    -   It must be able to convert a value if the ``ctx`` and ``param``
        arguments are ``None``. This can occur when converting prompt
        input.
  summary: Represents the type of a parameter
  signatures:
  - type: StringParamType
  inherits_from:
  - <class 'click.types.ParamType'>
- name: StringParamType.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: StringParamType.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringParamType.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: StringParamType.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: StringParamType.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringParamType.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringParamType.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: StringParamType.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: StringParamType.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringParamType.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: StringParamType.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UNPROCESSED
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UUID
  kind: callable
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UUIDParameterType
  kind: class
  ns: click
  description: |-
    Represents the type of a parameter. Validates and converts values
    from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the
    following:

    -   The :attr:`name` class attribute must be set.
    -   Calling an instance of the type with ``None`` must return
        ``None``. This is already implemented by default.
    -   :meth:`convert` must convert string values to the correct type.
    -   :meth:`convert` must accept values that are already the correct
        type.
    -   It must be able to convert a value if the ``ctx`` and ``param``
        arguments are ``None``. This can occur when converting prompt
        input.
  summary: Represents the type of a parameter
  signatures:
  - type: UUIDParameterType
  inherits_from:
  - <class 'click.types.ParamType'>
- name: UUIDParameterType.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: UUIDParameterType.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UUIDParameterType.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UUIDParameterType.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UUIDParameterType.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UUIDParameterType.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UUIDParameterType.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: UUIDParameterType.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: UUIDParameterType.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UUIDParameterType.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UUIDParameterType.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnprocessedParamType
  kind: class
  ns: click
  description: |-
    Represents the type of a parameter. Validates and converts values
    from the command line or Python into the correct type.

    To implement a custom type, subclass and implement at least the
    following:

    -   The :attr:`name` class attribute must be set.
    -   Calling an instance of the type with ``None`` must return
        ``None``. This is already implemented by default.
    -   :meth:`convert` must convert string values to the correct type.
    -   :meth:`convert` must accept values that are already the correct
        type.
    -   It must be able to convert a value if the ``ctx`` and ``param``
        arguments are ``None``. This can occur when converting prompt
        input.
  summary: Represents the type of a parameter
  signatures:
  - type: UnprocessedParamType
  inherits_from:
  - <class 'click.types.ParamType'>
- name: UnprocessedParamType.arity
  kind: property
  ns: click
  description: |-
    int([x]) -> integer
    int(x, base=10) -> integer

    Convert a number or string to an integer, or return 0 if no arguments
    are given.  If x is a number, return x.__int__().  For floating point
    numbers, this truncates towards zero.

    If x is not a number or if base is given, then x must be a string,
    bytes, or bytearray instance representing an integer literal in the
    given base.  The literal can be preceded by '+' or '-' and be surrounded
    by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
    Base 0 means to interpret the base from the string as an integer literal.
    >>> int('0b100', base=0)
    4
  summary: int([x]) -> integer
  signatures: null
  inherits_from: null
- name: UnprocessedParamType.convert
  kind: method
  ns: click
  description: |-
    Convert the value to the correct type. This is not called if
    the value is ``None`` (the missing value).

    This must accept string values from the command line, as well as
    values that are already the correct type. It may also convert
    other compatible types.

    The ``param`` and ``ctx`` arguments may be ``None`` in certain
    situations, such as when converting prompt input.

    If the value cannot be converted, call :meth:`fail` with a
    descriptive message.

    :param value: The value to convert.
    :param param: The parameter that is using this type to convert
        its value. May be ``None``.
    :param ctx: The current context that arrived at this value. May
        be ``None``.
  summary: Convert the value to the correct type
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnprocessedParamType.envvar_list_splitter
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: UnprocessedParamType.fail
  kind: method
  ns: click
  description: Helper method to fail with an invalid value message.
  summary: Helper method to fail with an invalid value message
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: message
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UnprocessedParamType.get_metavar
  kind: method
  ns: click
  description: Returns the metavar default for this param if it provides one.
  summary: Returns the metavar default for this param if it provides one
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnprocessedParamType.get_missing_message
  kind: method
  ns: click
  description: |-
    Optionally might return extra information about a missing
    parameter.

    .. versionadded:: 2.0
  summary: Optionally might return extra information about a missing
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnprocessedParamType.is_composite
  kind: property
  ns: click
  description: |-
    bool(x) -> bool

    Returns True when the argument x is true, False otherwise.
    The builtins True and False are the only two instances of the class bool.
    The class bool is a subclass of the class int, and cannot be subclassed.
  summary: bool(x) -> bool
  signatures: null
  inherits_from: null
- name: UnprocessedParamType.name
  kind: property
  ns: click
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: UnprocessedParamType.shell_complete
  kind: method
  ns: click
  description: |-
    Return a list of
    :class:`~click.shell_completion.CompletionItem` objects for the
    incomplete value. Most types do not provide completions, but
    some do, and this allows custom types to provide custom
    completions as well.

    :param ctx: Invocation context for this command.
    :param param: The parameter that is requesting completion.
    :param incomplete: Value being completed. May be empty.

    .. versionadded:: 8.0
  summary: Return a list of
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - kind: positional
    name: param
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnprocessedParamType.split_envvar_value
  kind: method
  ns: click
  description: |-
    Given a value from an environment variable this splits it up
    into small chunks depending on the defined envvar list splitter.

    If the splitter is set to `None`, which means that whitespace splits,
    then leading and trailing whitespace is ignored.  Otherwise, leading
    and trailing splitters usually lead to empty items being included.
  summary: Given a value from an environment variable this splits it up
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rv
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: UnprocessedParamType.to_info_dict
  kind: method
  ns: click
  description: |-
    Gather information that could be useful for a tool generating
    user-facing documentation.

    Use :meth:`click.Context.to_info_dict` to traverse the entire
    CLI structure.

    .. versionadded:: 8.0
  summary: Gather information that could be useful for a tool generating
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: convert_type
  kind: function
  ns: click
  description: |-
    Find the most appropriate :class:`ParamType` for the given Python
    type. If the type isn't provided, it can be inferred from a default
    value.
  summary: Find the most appropriate :class:`ParamType` for the given Python
  signatures:
  - kind: positional
    name: ty
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: datetime
  kind: class
  ns: click
  description: |-
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
  summary: datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
  signatures: null
  inherits_from:
  - <class 'datetime.date'>
- name: datetime.astimezone
  kind: callable
  ns: click
  description: tz -> convert to local time in new timezone tz
  summary: tz -> convert to local time in new timezone tz
  signatures: null
  inherits_from: null
- name: datetime.ctime
  kind: callable
  ns: click
  description: Return ctime() style string.
  summary: Return ctime() style string
  signatures: null
  inherits_from: null
- name: datetime.date
  kind: callable
  ns: click
  description: Return date object with same year, month and day.
  summary: Return date object with same year, month and day
  signatures: null
  inherits_from: null
- name: datetime.day
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.dst
  kind: callable
  ns: click
  description: Return self.tzinfo.dst(self).
  summary: Return self
  signatures: null
  inherits_from: null
- name: datetime.fold
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.hour
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.isocalendar
  kind: callable
  ns: click
  description: Return a named tuple containing ISO year, week number, and weekday.
  summary: Return a named tuple containing ISO year, week number, and weekday
  signatures: null
  inherits_from: null
- name: datetime.isoformat
  kind: callable
  ns: click
  description: |-
    [sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].
    sep is used to separate the year from the time, and defaults to 'T'.
    The optional argument timespec specifies the number of additional terms
    of the time to include. Valid options are 'auto', 'hours', 'minutes',
    'seconds', 'milliseconds' and 'microseconds'.
  summary: '[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS['
  signatures: null
  inherits_from: null
- name: datetime.isoweekday
  kind: callable
  ns: click
  description: |-
    Return the day of the week represented by the date.
    Monday == 1 ... Sunday == 7
  summary: Return the day of the week represented by the date
  signatures: null
  inherits_from: null
- name: datetime.max
  kind: property
  ns: click
  description: |-
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
  summary: datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
  signatures: null
  inherits_from: null
- name: datetime.microsecond
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.min
  kind: property
  ns: click
  description: |-
    datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
  summary: datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
  signatures: null
  inherits_from: null
- name: datetime.minute
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.month
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.replace
  kind: callable
  ns: click
  description: Return datetime with new specified fields.
  summary: Return datetime with new specified fields
  signatures: null
  inherits_from: null
- name: datetime.resolution
  kind: property
  ns: click
  description: |-
    Difference between two datetime values.

    timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)

    All arguments are optional and default to 0.
    Arguments may be integers or floats, and may be positive or negative.
  summary: Difference between two datetime values
  signatures: null
  inherits_from: null
- name: datetime.second
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.strftime
  kind: callable
  ns: click
  description: format -> strftime() style string.
  summary: format -> strftime() style string
  signatures: null
  inherits_from: null
- name: datetime.time
  kind: callable
  ns: click
  description: Return time object with same time but with tzinfo=None.
  summary: Return time object with same time but with tzinfo=None
  signatures: null
  inherits_from: null
- name: datetime.timestamp
  kind: callable
  ns: click
  description: Return POSIX timestamp as float.
  summary: Return POSIX timestamp as float
  signatures: null
  inherits_from: null
- name: datetime.timetuple
  kind: callable
  ns: click
  description: Return time tuple, compatible with time.localtime().
  summary: Return time tuple, compatible with time
  signatures: null
  inherits_from: null
- name: datetime.timetz
  kind: callable
  ns: click
  description: Return time object with same time and tzinfo.
  summary: Return time object with same time and tzinfo
  signatures: null
  inherits_from: null
- name: datetime.toordinal
  kind: callable
  ns: click
  description: Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.
  summary: Return proleptic Gregorian ordinal
  signatures: null
  inherits_from: null
- name: datetime.tzinfo
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: datetime.tzname
  kind: callable
  ns: click
  description: Return self.tzinfo.tzname(self).
  summary: Return self
  signatures: null
  inherits_from: null
- name: datetime.utcoffset
  kind: callable
  ns: click
  description: Return self.tzinfo.utcoffset(self).
  summary: Return self
  signatures: null
  inherits_from: null
- name: datetime.utctimetuple
  kind: callable
  ns: click
  description: Return UTC time tuple, compatible with time.localtime().
  summary: Return UTC time tuple, compatible with time
  signatures: null
  inherits_from: null
- name: datetime.weekday
  kind: callable
  ns: click
  description: |-
    Return the day of the week represented by the date.
    Monday == 0 ... Sunday == 6
  summary: Return the day of the week represented by the date
  signatures: null
  inherits_from: null
- name: datetime.year
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: format_filename
  kind: function
  ns: click
  description: |-
    Format a filename as a string for display. Ensures the filename can be
    displayed by replacing any invalid bytes or surrogate escapes in the name
    with the replacement character ``�``.

    Invalid bytes or surrogate escapes will raise an error when written to a
    stream with ``errors="strict". This will typically happen with ``stdout``
    when the locale is something like ``en_GB.UTF-8``.

    Many scenarios *are* safe to write surrogates though, due to PEP 538 and
    PEP 540, including:

    -   Writing to ``stderr``, which uses ``errors="backslashreplace"``.
    -   The system has ``LANG=C.UTF-8``, ``C``, or ``POSIX``. Python opens
        stdout and stderr with ``errors="surrogateescape"``.
    -   None of ``LANG/LC_*`` are set. Python assumes ``LANG=C.UTF-8``.
    -   Python is started in UTF-8 mode  with  ``PYTHONUTF8=1`` or ``-X utf8``.
        Python opens stdout and stderr with ``errors="surrogateescape"``.

    :param filename: formats a filename for UI display.  This will also convert
                     the filename into unicode without failing.
    :param shorten: this optionally shortens the filename to strip of the
                    path that leads up to it.
  summary: Format a filename as a string for display
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: shorten
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ngettext
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: msgid1
    default: null
    rest: false
  - kind: positional
    name: msgid2
    default: null
    rest: false
  - kind: positional
    name: n
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: open_stream
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - kind: positional
    name: atomic
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: safecall
  kind: function
  ns: click
  description: Wraps a function so that it swallows exceptions.
  summary: Wraps a function so that it swallows exceptions
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: update_wrapper
  kind: function
  ns: click
  description: |-
    Update a wrapper function to look like the wrapped function

    wrapper is the function to be updated
    wrapped is the original function
    assigned is a tuple naming the attributes assigned directly
    from the wrapped function to the wrapper function (defaults to
    functools.WRAPPER_ASSIGNMENTS)
    updated is a tuple naming the attributes of the wrapper that
    are updated with the corresponding attribute from the wrapped
    function (defaults to functools.WRAPPER_UPDATES)
  summary: Update a wrapper function to look like the wrapped function
  signatures:
  - kind: positional
    name: wrapper
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
- name: decorators
  kind: module
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CmdType
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FC
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: GrpType
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: R
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: T
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: argument
  kind: function
  ns: click
  description: |-
    Attaches an argument to the command.  All positional arguments are
    passed as parameter declarations to :class:`Argument`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Argument` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default argument class, refer to :class:`Argument` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the argument class to instantiate.  This defaults to
                :class:`Argument`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
  summary: Attaches an argument to the command
  signatures:
  - name: cls
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: command
  kind: function
  ns: click
  description: |-
    Creates a new :class:`Command` and uses the decorated function as
    callback.  This will also automatically attach all decorated
    :func:`option`\s and :func:`argument`\s as parameters to the command.

    The name of the command defaults to the name of the function with
    underscores replaced by dashes.  If you want to change that, you can
    pass the intended name as the first argument.

    All keyword arguments are forwarded to the underlying command class.
    For the ``params`` argument, any decorated params are appended to
    the end of the list.

    Once decorated the function turns into a :class:`Command` instance
    that can be invoked as a command line utility or be attached to a
    command :class:`Group`.

    :param name: the name of the command.  This defaults to the function
                 name with underscores replaced by dashes.
    :param cls: the command class to instantiate.  This defaults to
                :class:`Command`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.

    .. versionchanged:: 8.1
        The ``params`` argument can be used. Decorated params are
        appended to the end of the list.
  summary: Creates a new :class:`Command` and uses the decorated function as
  signatures:
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: cls
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: confirmation_option
  kind: function
  ns: click
  description: |-
    Add a ``--yes`` option which shows a prompt before continuing if
    not passed. If the prompt is declined, the program will exit.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--yes"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
  summary: Add a ``--yes`` option which shows a prompt before continuing if
  signatures:
  - type: '?'
  inherits_from: null
- name: echo
  kind: function
  ns: click
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: get_current_context
  kind: function
  ns: click
  description: |-
    Returns the current click context.  This can be used as a way to
    access the current context object from anywhere.  This is a more implicit
    alternative to the :func:`pass_context` decorator.  This function is
    primarily useful for helpers such as :func:`echo` which might be
    interested in changing its behavior based on the current context.

    To push the current context, :meth:`Context.scope` can be used.

    .. versionadded:: 5.0

    :param silent: if set to `True` the return value is `None` if no context
                   is available.  The default behavior is to raise a
                   :exc:`RuntimeError`.
  summary: Returns the current click context
  signatures:
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: group
  kind: function
  ns: click
  description: |-
    Creates a new :class:`Group` with a function as callback.  This
    works otherwise the same as :func:`command` just that the `cls`
    parameter is set to :class:`Group`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.
  summary: Creates a new :class:`Group` with a function as callback
  signatures:
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: cls
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: help_option
  kind: function
  ns: click
  description: |-
    Add a ``--help`` option which immediately prints the help page
    and exits the program.

    This is usually unnecessary, as the ``--help`` option is added to
    each command automatically unless ``add_help_option=False`` is
    passed.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--help"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
  summary: Add a ``--help`` option which immediately prints the help page
  signatures:
  - type: '?'
  inherits_from: null
- name: make_pass_decorator
  kind: function
  ns: click
  description: |-
    Given an object type this creates a decorator that will work
    similar to :func:`pass_obj` but instead of passing the object of the
    current context, it will find the innermost context of type
    :func:`object_type`.

    This generates a decorator that works roughly like this::

        from functools import update_wrapper

        def decorator(f):
            @pass_context
            def new_func(ctx, *args, **kwargs):
                obj = ctx.find_object(object_type)
                return ctx.invoke(f, obj, *args, **kwargs)
            return update_wrapper(new_func, f)
        return decorator

    :param object_type: the type of the object to pass.
    :param ensure: if set to `True`, a new object will be created and
                   remembered on the context if it's not there yet.
  summary: Given an object type this creates a decorator that will work
  signatures:
  - kind: positional
    name: object_type
    default: null
    rest: false
  - kind: positional
    name: ensure
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: option
  kind: function
  ns: click
  description: |-
    Attaches an option to the command.  All positional arguments are
    passed as parameter declarations to :class:`Option`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Option` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default option class, refer to :class:`Option` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the option class to instantiate.  This defaults to
                :class:`Option`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
  summary: Attaches an option to the command
  signatures:
  - name: cls
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: pass_context
  kind: function
  ns: click
  description: |-
    Marks a callback as wanting to receive the current context
    object as first argument.
  summary: Marks a callback as wanting to receive the current context
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_meta_key
  kind: function
  ns: click
  description: |-
    Create a decorator that passes a key from
    :attr:`click.Context.meta` as the first argument to the decorated
    function.

    :param key: Key in ``Context.meta`` to pass.
    :param doc_description: Description of the object being passed,
        inserted into the decorator's docstring. Defaults to "the 'key'
        key from Context.meta".

    .. versionadded:: 8.0
  summary: Create a decorator that passes a key from
  signatures:
  - kind: positional
    name: key
    default: null
    rest: false
  - name: doc_description
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: pass_obj
  kind: function
  ns: click
  description: |-
    Similar to :func:`pass_context`, but only pass the object on the
    context onwards (:attr:`Context.obj`).  This is useful if that object
    represents the state of a nested system.
  summary: Similar to :func:`pass_context`, but only pass the object on the
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: password_option
  kind: function
  ns: click
  description: |-
    Add a ``--password`` option which prompts for a password, hiding
    input and asking to enter the value again for confirmation.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--password"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
  summary: Add a ``--password`` option which prompts for a password, hiding
  signatures:
  - type: '?'
  inherits_from: null
- name: update_wrapper
  kind: function
  ns: click
  description: |-
    Update a wrapper function to look like the wrapped function

    wrapper is the function to be updated
    wrapped is the original function
    assigned is a tuple naming the attributes assigned directly
    from the wrapped function to the wrapper function (defaults to
    functools.WRAPPER_ASSIGNMENTS)
    updated is a tuple naming the attributes of the wrapper that
    are updated with the corresponding attribute from the wrapped
    function (defaults to functools.WRAPPER_UPDATES)
  summary: Update a wrapper function to look like the wrapped function
  signatures:
  - kind: positional
    name: wrapper
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
- name: version_option
  kind: function
  ns: click
  description: |-
    Add a ``--version`` option which immediately prints the version
    number and exits the program.

    If ``version`` is not provided, Click will try to detect it using
    :func:`importlib.metadata.version` to get the version for the
    ``package_name``. On Python < 3.8, the ``importlib_metadata``
    backport must be installed.

    If ``package_name`` is not provided, Click will try to detect it by
    inspecting the stack frames. This will be used to detect the
    version, so it must match the name of the installed package.

    :param version: The version number to show. If not provided, Click
        will try to detect it.
    :param param_decls: One or more option names. Defaults to the single
        value ``"--version"``.
    :param package_name: The package name to detect the version from. If
        not provided, Click will try to detect it.
    :param prog_name: The name of the CLI to show in the message. If not
        provided, it will be detected from the command.
    :param message: The message to show. The values ``%(prog)s``,
        ``%(package)s``, and ``%(version)s`` are available. Defaults to
        ``"%(prog)s, version %(version)s"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    :raise RuntimeError: ``version`` could not be detected.

    .. versionchanged:: 8.0
        Add the ``package_name`` parameter, and the ``%(package)s``
        value for messages.

    .. versionchanged:: 8.0
        Use :mod:`importlib.metadata` instead of ``pkg_resources``. The
        version is detected based on the package name, not the entry
        point name. The Python package name must match the installed
        package name, or be passed with ``package_name=``.
  summary: Add a ``--version`` option which immediately prints the version
  signatures:
  - kind: positional
    name: version
    default: None
    rest: false
  - name: package_name
    default: None
    rest: false
    kind: kw-only
  - name: prog_name
    default: None
    rest: false
    kind: kw-only
  - name: message
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: echo
  kind: function
  ns: click
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: echo_via_pager
  kind: function
  ns: click
  description: |-
    This function takes a text and shows it via an environment specific
    pager on stdout.

    .. versionchanged:: 3.0
       Added the `color` flag.

    :param text_or_generator: the text to page, or alternatively, a
                              generator emitting the text to page.
    :param color: controls if the pager supports ANSI colors or not.  The
                  default is autodetection.
  summary: This function takes a text and shows it via an environment specific
  signatures:
  - kind: positional
    name: text_or_generator
    default: null
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: edit
  kind: function
  ns: click
  description: |-
    Edits the given text in the defined editor.  If an editor is given
    (should be the full path to the executable but the regular operating
    system search path is used for finding the executable) it overrides
    the detected editor.  Optionally, some environment variables can be
    used.  If the editor is closed without changes, `None` is returned.  In
    case a file is edited directly the return value is always `None` and
    `require_save` and `extension` are ignored.

    If the editor cannot be opened a :exc:`UsageError` is raised.

    Note for Windows: to simplify cross-platform usage, the newlines are
    automatically converted from POSIX to Windows and vice versa.  As such,
    the message here will have ``\n`` as newline markers.

    :param text: the text to edit.
    :param editor: optionally the editor to use.  Defaults to automatic
                   detection.
    :param env: environment variables to forward to the editor.
    :param require_save: if this is true, then not saving in the editor
                         will make the return value become `None`.
    :param extension: the extension to tell the editor about.  This defaults
                      to `.txt` but changing this might change syntax
                      highlighting.
    :param filename: if provided it will edit this file instead of the
                     provided text contents.  It will not use a temporary
                     file as an indirection in that case.
  summary: Edits the given text in the defined editor
  signatures:
  - kind: positional
    name: text
    default: None
    rest: false
  - kind: positional
    name: editor
    default: None
    rest: false
  - kind: positional
    name: env
    default: None
    rest: false
  - kind: positional
    name: require_save
    default: 'True'
    rest: false
  - kind: positional
    name: extension
    default: .txt
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: exceptions
  kind: module
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: echo
  kind: function
  ns: click
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: format_filename
  kind: function
  ns: click
  description: |-
    Format a filename as a string for display. Ensures the filename can be
    displayed by replacing any invalid bytes or surrogate escapes in the name
    with the replacement character ``�``.

    Invalid bytes or surrogate escapes will raise an error when written to a
    stream with ``errors="strict". This will typically happen with ``stdout``
    when the locale is something like ``en_GB.UTF-8``.

    Many scenarios *are* safe to write surrogates though, due to PEP 538 and
    PEP 540, including:

    -   Writing to ``stderr``, which uses ``errors="backslashreplace"``.
    -   The system has ``LANG=C.UTF-8``, ``C``, or ``POSIX``. Python opens
        stdout and stderr with ``errors="surrogateescape"``.
    -   None of ``LANG/LC_*`` are set. Python assumes ``LANG=C.UTF-8``.
    -   Python is started in UTF-8 mode  with  ``PYTHONUTF8=1`` or ``-X utf8``.
        Python opens stdout and stderr with ``errors="surrogateescape"``.

    :param filename: formats a filename for UI display.  This will also convert
                     the filename into unicode without failing.
    :param shorten: this optionally shortens the filename to strip of the
                    path that leads up to it.
  summary: Format a filename as a string for display
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: shorten
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_text_stderr
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ngettext
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: msgid1
    default: null
    rest: false
  - kind: positional
    name: msgid2
    default: null
    rest: false
  - kind: positional
    name: n
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: format_filename
  kind: function
  ns: click
  description: |-
    Format a filename as a string for display. Ensures the filename can be
    displayed by replacing any invalid bytes or surrogate escapes in the name
    with the replacement character ``�``.

    Invalid bytes or surrogate escapes will raise an error when written to a
    stream with ``errors="strict". This will typically happen with ``stdout``
    when the locale is something like ``en_GB.UTF-8``.

    Many scenarios *are* safe to write surrogates though, due to PEP 538 and
    PEP 540, including:

    -   Writing to ``stderr``, which uses ``errors="backslashreplace"``.
    -   The system has ``LANG=C.UTF-8``, ``C``, or ``POSIX``. Python opens
        stdout and stderr with ``errors="surrogateescape"``.
    -   None of ``LANG/LC_*`` are set. Python assumes ``LANG=C.UTF-8``.
    -   Python is started in UTF-8 mode  with  ``PYTHONUTF8=1`` or ``-X utf8``.
        Python opens stdout and stderr with ``errors="surrogateescape"``.

    :param filename: formats a filename for UI display.  This will also convert
                     the filename into unicode without failing.
    :param shorten: this optionally shortens the filename to strip of the
                    path that leads up to it.
  summary: Format a filename as a string for display
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: shorten
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: formatting
  kind: module
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FORCED_WIDTH
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: contextmanager
  kind: function
  ns: click
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: iter_rows
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: rows
    default: null
    rest: false
  - kind: positional
    name: col_count
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: join_options
  kind: function
  ns: click
  description: |-
    Given a list of option strings this joins them in the most appropriate
    way and returns them in the form ``(formatted_string,
    any_prefix_is_slash)`` where the second item in the tuple is a flag that
    indicates if any of the option prefixes was a slash.
  summary: Given a list of option strings this joins them in the most appropriate
  signatures:
  - kind: positional
    name: options
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: measure_table
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: rows
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_opt
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: opt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: term_len
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: x
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: wrap_text
  kind: function
  ns: click
  description: |-
    A helper function that intelligently wraps text.  By default, it
    assumes that it operates on a single paragraph of text but if the
    `preserve_paragraphs` parameter is provided it will intelligently
    handle paragraphs (defined by two empty lines).

    If paragraphs are handled, a paragraph can be prefixed with an empty
    line containing the ``\b`` character (``\x08``) to indicate that
    no rewrapping should happen in that block.

    :param text: the text that should be rewrapped.
    :param width: the maximum width for the text.
    :param initial_indent: the initial indent that should be placed on the
                           first line as a string.
    :param subsequent_indent: the indent string that should be placed on
                              each consecutive line.
    :param preserve_paragraphs: if this flag is set then the wrapping will
                                intelligently handle paragraphs.
  summary: A helper function that intelligently wraps text
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: width
    default: '78'
    rest: false
  - kind: positional
    name: initial_indent
    default: null
    rest: false
  - kind: positional
    name: subsequent_indent
    default: null
    rest: false
  - kind: positional
    name: preserve_paragraphs
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_app_dir
  kind: function
  ns: click
  description: |-
    Returns the config folder for the application.  The default behavior
    is to return whatever is most appropriate for the operating system.

    To give you an idea, for an app called ``"Foo Bar"``, something like
    the following folders could be returned:

    Mac OS X:
      ``~/Library/Application Support/Foo Bar``
    Mac OS X (POSIX):
      ``~/.foo-bar``
    Unix:
      ``~/.config/foo-bar``
    Unix (POSIX):
      ``~/.foo-bar``
    Windows (roaming):
      ``C:\Users\<user>\AppData\Roaming\Foo Bar``
    Windows (not roaming):
      ``C:\Users\<user>\AppData\Local\Foo Bar``

    .. versionadded:: 2.0

    :param app_name: the application name.  This should be properly capitalized
                     and can contain whitespace.
    :param roaming: controls if the folder should be roaming or not on Windows.
                    Has no effect otherwise.
    :param force_posix: if this is set to `True` then on any POSIX system the
                        folder will be stored in the home folder with a leading
                        dot instead of the XDG config home or darwin's
                        application support folder.
  summary: Returns the config folder for the application
  signatures:
  - kind: positional
    name: app_name
    default: null
    rest: false
  - kind: positional
    name: roaming
    default: 'True'
    rest: false
  - kind: positional
    name: force_posix
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_binary_stream
  kind: function
  ns: click
  description: |-
    Returns a system stream for byte processing.

    :param name: the name of the stream to open.  Valid names are ``'stdin'``,
                 ``'stdout'`` and ``'stderr'``
  summary: Returns a system stream for byte processing
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: get_current_context
  kind: function
  ns: click
  description: |-
    Returns the current click context.  This can be used as a way to
    access the current context object from anywhere.  This is a more implicit
    alternative to the :func:`pass_context` decorator.  This function is
    primarily useful for helpers such as :func:`echo` which might be
    interested in changing its behavior based on the current context.

    To push the current context, :meth:`Context.scope` can be used.

    .. versionadded:: 5.0

    :param silent: if set to `True` the return value is `None` if no context
                   is available.  The default behavior is to raise a
                   :exc:`RuntimeError`.
  summary: Returns the current click context
  signatures:
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_text_stream
  kind: function
  ns: click
  description: |-
    Returns a system stream for text processing.  This usually returns
    a wrapped stream around a binary stream returned from
    :func:`get_binary_stream` but it also can take shortcuts for already
    correctly configured streams.

    :param name: the name of the stream to open.  Valid names are ``'stdin'``,
                 ``'stdout'`` and ``'stderr'``
    :param encoding: overrides the detected default encoding.
    :param errors: overrides the default error mode.
  summary: Returns a system stream for text processing
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - type: '?'
  inherits_from: null
- name: getchar
  kind: function
  ns: click
  description: |-
    Fetches a single character from the terminal and returns it.  This
    will always return a unicode character and under certain rare
    circumstances this might return more than one character.  The
    situations which more than one character is returned is when for
    whatever reason multiple characters end up in the terminal buffer or
    standard input was not actually a terminal.

    Note that this will always read from the terminal, even if something
    is piped into the standard input.

    Note for Windows: in rare cases when typing non-ASCII characters, this
    function might wait for a second character and then return both at once.
    This is because certain Unicode characters look like special-key markers.

    .. versionadded:: 2.0

    :param echo: if set to `True`, the character read will also show up on
                 the terminal.  The default is to not show it.
  summary: Fetches a single character from the terminal and returns it
  signatures:
  - kind: positional
    name: echo
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: globals
  kind: module
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_current_context
  kind: function
  ns: click
  description: |-
    Returns the current click context.  This can be used as a way to
    access the current context object from anywhere.  This is a more implicit
    alternative to the :func:`pass_context` decorator.  This function is
    primarily useful for helpers such as :func:`echo` which might be
    interested in changing its behavior based on the current context.

    To push the current context, :meth:`Context.scope` can be used.

    .. versionadded:: 5.0

    :param silent: if set to `True` the return value is `None` if no context
                   is available.  The default behavior is to raise a
                   :exc:`RuntimeError`.
  summary: Returns the current click context
  signatures:
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: local
  kind: class
  ns: click
  description: Thread-local data
  summary: Thread-local data
  signatures: null
  inherits_from: null
- name: pop_context
  kind: function
  ns: click
  description: Removes the top level from the stack.
  summary: Removes the top level from the stack
  signatures:
  - type: '?'
  inherits_from: null
- name: push_context
  kind: function
  ns: click
  description: Pushes a new context to the current stack.
  summary: Pushes a new context to the current stack
  signatures:
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: resolve_color_default
  kind: function
  ns: click
  description: |-
    Internal helper to get the default value of the color flag.  If a
    value is passed it's returned unchanged, otherwise it's looked up from
    the current context.
  summary: Internal helper to get the default value of the color flag
  signatures:
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: group
  kind: function
  ns: click
  description: |-
    Creates a new :class:`Group` with a function as callback.  This
    works otherwise the same as :func:`command` just that the `cls`
    parameter is set to :class:`Group`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.
  summary: Creates a new :class:`Group` with a function as callback
  signatures:
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: cls
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: help_option
  kind: function
  ns: click
  description: |-
    Add a ``--help`` option which immediately prints the help page
    and exits the program.

    This is usually unnecessary, as the ``--help`` option is added to
    each command automatically unless ``add_help_option=False`` is
    passed.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--help"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
  summary: Add a ``--help`` option which immediately prints the help page
  signatures:
  - type: '?'
  inherits_from: null
- name: launch
  kind: function
  ns: click
  description: |-
    This function launches the given URL (or filename) in the default
    viewer application for this file type.  If this is an executable, it
    might launch the executable in a new session.  The return value is
    the exit code of the launched application.  Usually, ``0`` indicates
    success.

    Examples::

        click.launch('https://click.palletsprojects.com/')
        click.launch('/my/downloaded/file', locate=True)

    .. versionadded:: 2.0

    :param url: URL or filename of the thing to launch.
    :param wait: Wait for the program to exit before returning. This
        only works if the launched program blocks. In particular,
        ``xdg-open`` on Linux does not block.
    :param locate: if this is set to `True` then instead of launching the
                   application associated with the URL it will attempt to
                   launch a file manager with the file located.  This
                   might have weird effects if the URL does not point to
                   the filesystem.
  summary: This function launches the given URL (or filename) in the default
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: wait
    default: 'False'
    rest: false
  - kind: positional
    name: locate
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: make_pass_decorator
  kind: function
  ns: click
  description: |-
    Given an object type this creates a decorator that will work
    similar to :func:`pass_obj` but instead of passing the object of the
    current context, it will find the innermost context of type
    :func:`object_type`.

    This generates a decorator that works roughly like this::

        from functools import update_wrapper

        def decorator(f):
            @pass_context
            def new_func(ctx, *args, **kwargs):
                obj = ctx.find_object(object_type)
                return ctx.invoke(f, obj, *args, **kwargs)
            return update_wrapper(new_func, f)
        return decorator

    :param object_type: the type of the object to pass.
    :param ensure: if set to `True`, a new object will be created and
                   remembered on the context if it's not there yet.
  summary: Given an object type this creates a decorator that will work
  signatures:
  - kind: positional
    name: object_type
    default: null
    rest: false
  - kind: positional
    name: ensure
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: open_file
  kind: function
  ns: click
  description: |-
    Open a file, with extra behavior to handle ``'-'`` to indicate
    a standard stream, lazy open on write, and atomic write. Similar to
    the behavior of the :class:`~click.File` param type.

    If ``'-'`` is given to open ``stdout`` or ``stdin``, the stream is
    wrapped so that using it in a context manager will not close it.
    This makes it possible to use the function without accidentally
    closing a standard stream:

    .. code-block:: python

        with open_file(filename) as f:
            ...

    :param filename: The name of the file to open, or ``'-'`` for
        ``stdin``/``stdout``.
    :param mode: The mode in which to open the file.
    :param encoding: The encoding to decode or encode a file opened in
        text mode.
    :param errors: The error handling mode.
    :param lazy: Wait to open the file until it is accessed. For read
        mode, the file is temporarily opened to raise access errors
        early, then closed until it is read again.
    :param atomic: Write to a temporary file and replace the given file
        on close.

    .. versionadded:: 3.0
  summary: Open a file, with extra behavior to handle ``'-'`` to indicate
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - kind: positional
    name: lazy
    default: 'False'
    rest: false
  - kind: positional
    name: atomic
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: option
  kind: function
  ns: click
  description: |-
    Attaches an option to the command.  All positional arguments are
    passed as parameter declarations to :class:`Option`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Option` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default option class, refer to :class:`Option` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the option class to instantiate.  This defaults to
                :class:`Option`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
  summary: Attaches an option to the command
  signatures:
  - name: cls
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: parser
  kind: module
  ns: click
  description: |-
    This module started out as largely a copy paste from the stdlib's
    optparse module with the features removed that we do not need from
    optparse because we implement them in Click on a higher level (for
    instance type handling, help formatting and a lot more).

    The plan is to remove more and more from here over time.

    The reason this is a different module and not optparse from the stdlib
    is that there are differences in 2.x and 3.x about the error messages
    generated and optparse in the stdlib uses gettext for no good reason
    and might cause us issues.

    Click uses parts of optparse written by Gregory P. Ward and maintained
    by the Python Software Foundation. This is limited to code in parser.py.

    Copyright 2001-2006 Gregory P. Ward. All rights reserved.
    Copyright 2002-2006 Python Software Foundation. All rights reserved.
  summary: This module started out as largely a copy paste from the stdlib's
  signatures: null
  inherits_from: null
- name: Argument
  kind: class
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: dest
    default: null
    rest: false
  - kind: positional
    name: nargs
    default: '1'
    rest: false
  - type: Argument
  inherits_from: null
- name: Argument.process
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: state
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option
  kind: class
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: obj
    default: null
    rest: false
  - kind: positional
    name: opts
    default: null
    rest: false
  - kind: positional
    name: dest
    default: null
    rest: false
  - kind: positional
    name: action
    default: None
    rest: false
  - kind: positional
    name: nargs
    default: '1'
    rest: false
  - kind: positional
    name: const
    default: None
    rest: false
  - type: Option
  inherits_from: null
- name: Option.process
  kind: method
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: state
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Option.takes_value
  kind: property
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ParsingState
  kind: class
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: rargs
    default: null
    rest: false
  - type: ParsingState
  inherits_from: null
- name: V
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: deque
  kind: class
  ns: click
  description: |-
    deque([iterable[, maxlen]]) --> deque object

    A list-like sequence optimized for data accesses near its endpoints.
  summary: deque([iterable[, maxlen]]) --> deque object
  signatures: null
  inherits_from: null
- name: deque.append
  kind: callable
  ns: click
  description: Add an element to the right side of the deque.
  summary: Add an element to the right side of the deque
  signatures: null
  inherits_from: null
- name: deque.appendleft
  kind: callable
  ns: click
  description: Add an element to the left side of the deque.
  summary: Add an element to the left side of the deque
  signatures: null
  inherits_from: null
- name: deque.clear
  kind: callable
  ns: click
  description: Remove all elements from the deque.
  summary: Remove all elements from the deque
  signatures: null
  inherits_from: null
- name: deque.copy
  kind: callable
  ns: click
  description: Return a shallow copy of a deque.
  summary: Return a shallow copy of a deque
  signatures: null
  inherits_from: null
- name: deque.count
  kind: callable
  ns: click
  description: D.count(value) -- return number of occurrences of value
  summary: D
  signatures: null
  inherits_from: null
- name: deque.extend
  kind: callable
  ns: click
  description: Extend the right side of the deque with elements from the iterable
  summary: Extend the right side of the deque with elements from the iterable
  signatures: null
  inherits_from: null
- name: deque.extendleft
  kind: callable
  ns: click
  description: Extend the left side of the deque with elements from the iterable
  summary: Extend the left side of the deque with elements from the iterable
  signatures: null
  inherits_from: null
- name: deque.index
  kind: callable
  ns: click
  description: |-
    D.index(value, [start, [stop]]) -- return first index of value.
    Raises ValueError if the value is not present.
  summary: D
  signatures: null
  inherits_from: null
- name: deque.insert
  kind: callable
  ns: click
  description: D.insert(index, object) -- insert object before index
  summary: D
  signatures: null
  inherits_from: null
- name: deque.maxlen
  kind: property
  ns: click
  description: maximum size of a deque or None if unbounded
  summary: maximum size of a deque or None if unbounded
  signatures: null
  inherits_from: null
- name: deque.pop
  kind: callable
  ns: click
  description: Remove and return the rightmost element.
  summary: Remove and return the rightmost element
  signatures: null
  inherits_from: null
- name: deque.popleft
  kind: callable
  ns: click
  description: Remove and return the leftmost element.
  summary: Remove and return the leftmost element
  signatures: null
  inherits_from: null
- name: deque.remove
  kind: callable
  ns: click
  description: D.remove(value) -- remove first occurrence of value.
  summary: D
  signatures: null
  inherits_from: null
- name: deque.reverse
  kind: callable
  ns: click
  description: D.reverse() -- reverse *IN PLACE*
  summary: D
  signatures: null
  inherits_from: null
- name: deque.rotate
  kind: callable
  ns: click
  description: Rotate the deque n steps to the right (default n=1).  If n is negative, rotates left.
  summary: Rotate the deque n steps to the right (default n=1)
  signatures: null
  inherits_from: null
- name: ngettext
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: msgid1
    default: null
    rest: false
  - kind: positional
    name: msgid2
    default: null
    rest: false
  - kind: positional
    name: n
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: normalize_opt
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: opt
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_arg_string
  kind: function
  ns: click
  description: |-
    Split an argument string as with :func:`shlex.split`, but don't
    fail if the string is incomplete. Ignores a missing closing quote or
    incomplete escape sequence and uses the partial token as-is.

    .. code-block:: python

        split_arg_string("example 'my file")
        ["example", "my file"]

        split_arg_string("example my\")
        ["example", "my"]

    :param string: String to split.
  summary: Split an argument string as with :func:`shlex
  signatures:
  - kind: positional
    name: string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_opt
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: opt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_context
  kind: function
  ns: click
  description: |-
    Marks a callback as wanting to receive the current context
    object as first argument.
  summary: Marks a callback as wanting to receive the current context
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_obj
  kind: function
  ns: click
  description: |-
    Similar to :func:`pass_context`, but only pass the object on the
    context onwards (:attr:`Context.obj`).  This is useful if that object
    represents the state of a nested system.
  summary: Similar to :func:`pass_context`, but only pass the object on the
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: password_option
  kind: function
  ns: click
  description: |-
    Add a ``--password`` option which prompts for a password, hiding
    input and asking to enter the value again for confirmation.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--password"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
  summary: Add a ``--password`` option which prompts for a password, hiding
  signatures:
  - type: '?'
  inherits_from: null
- name: pause
  kind: function
  ns: click
  description: |-
    This command stops execution and waits for the user to press any
    key to continue.  This is similar to the Windows batch "pause"
    command.  If the program is not run through a terminal, this command
    will instead do nothing.

    .. versionadded:: 2.0

    .. versionadded:: 4.0
       Added the `err` parameter.

    :param info: The message to print before pausing. Defaults to
        ``"Press any key to continue..."``.
    :param err: if set to message goes to ``stderr`` instead of
                ``stdout``, the same as with echo.
  summary: This command stops execution and waits for the user to press any
  signatures:
  - kind: positional
    name: info
    default: None
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: progressbar
  kind: function
  ns: click
  description: |-
    This function creates an iterable context manager that can be used
    to iterate over something while showing a progress bar.  It will
    either iterate over the `iterable` or `length` items (that are counted
    up).  While iteration happens, this function will print a rendered
    progress bar to the given `file` (defaults to stdout) and will attempt
    to calculate remaining time and more.  By default, this progress bar
    will not be rendered if the file is not a terminal.

    The context manager creates the progress bar.  When the context
    manager is entered the progress bar is already created.  With every
    iteration over the progress bar, the iterable passed to the bar is
    advanced and the bar is updated.  When the context manager exits,
    a newline is printed and the progress bar is finalized on screen.

    Note: The progress bar is currently designed for use cases where the
    total progress can be expected to take at least several seconds.
    Because of this, the ProgressBar class object won't display
    progress that is considered too fast, and progress where the time
    between steps is less than a second.

    No printing must happen or the progress bar will be unintentionally
    destroyed.

    Example usage::

        with progressbar(items) as bar:
            for item in bar:
                do_something_with(item)

    Alternatively, if no iterable is specified, one can manually update the
    progress bar through the `update()` method instead of directly
    iterating over the progress bar.  The update method accepts the number
    of steps to increment the bar with::

        with progressbar(length=chunks.total_bytes) as bar:
            for chunk in chunks:
                process_chunk(chunk)
                bar.update(chunks.bytes)

    The ``update()`` method also takes an optional value specifying the
    ``current_item`` at the new position. This is useful when used
    together with ``item_show_func`` to customize the output for each
    manual step::

        with click.progressbar(
            length=total_size,
            label='Unzipping archive',
            item_show_func=lambda a: a.filename
        ) as bar:
            for archive in zip_file:
                archive.extract()
                bar.update(archive.size, archive)

    :param iterable: an iterable to iterate over.  If not provided the length
                     is required.
    :param length: the number of items to iterate over.  By default the
                   progressbar will attempt to ask the iterator about its
                   length, which might or might not work.  If an iterable is
                   also provided this parameter can be used to override the
                   length.  If an iterable is not provided the progress bar
                   will iterate over a range of that length.
    :param label: the label to show next to the progress bar.
    :param show_eta: enables or disables the estimated time display.  This is
                     automatically disabled if the length cannot be
                     determined.
    :param show_percent: enables or disables the percentage display.  The
                         default is `True` if the iterable has a length or
                         `False` if not.
    :param show_pos: enables or disables the absolute position display.  The
                     default is `False`.
    :param item_show_func: A function called with the current item which
        can return a string to show next to the progress bar. If the
        function returns ``None`` nothing is shown. The current item can
        be ``None``, such as when entering and exiting the bar.
    :param fill_char: the character to use to show the filled part of the
                      progress bar.
    :param empty_char: the character to use to show the non-filled part of
                       the progress bar.
    :param bar_template: the format string to use as template for the bar.
                         The parameters in it are ``label`` for the label,
                         ``bar`` for the progress bar and ``info`` for the
                         info section.
    :param info_sep: the separator between multiple info items (eta etc.)
    :param width: the width of the progress bar in characters, 0 means full
                  terminal width
    :param file: The file to write to. If this is not a terminal then
        only the label is printed.
    :param color: controls if the terminal supports ANSI colors or not.  The
                  default is autodetection.  This is only needed if ANSI
                  codes are included anywhere in the progress bar output
                  which is not the case by default.
    :param update_min_steps: Render only when this many updates have
        completed. This allows tuning for very fast iterators.

    .. versionchanged:: 8.0
        Output is shown even if execution time is less than 0.5 seconds.

    .. versionchanged:: 8.0
        ``item_show_func`` shows the current item, not the previous one.

    .. versionchanged:: 8.0
        Labels are echoed if the output is not a TTY. Reverts a change
        in 7.0 that removed all output.

    .. versionadded:: 8.0
       Added the ``update_min_steps`` parameter.

    .. versionchanged:: 4.0
        Added the ``color`` parameter. Added the ``update`` method to
        the object.

    .. versionadded:: 2.0
  summary: This function creates an iterable context manager that can be used
  signatures:
  - kind: positional
    name: iterable
    default: None
    rest: false
  - kind: positional
    name: length
    default: None
    rest: false
  - kind: positional
    name: label
    default: None
    rest: false
  - kind: positional
    name: show_eta
    default: 'True'
    rest: false
  - kind: positional
    name: show_percent
    default: None
    rest: false
  - kind: positional
    name: show_pos
    default: 'False'
    rest: false
  - kind: positional
    name: item_show_func
    default: None
    rest: false
  - kind: positional
    name: fill_char
    default: '#'
    rest: false
  - kind: positional
    name: empty_char
    default: '-'
    rest: false
  - kind: positional
    name: bar_template
    default: '%(label)s  [%(bar)s]  %(info)s'
    rest: false
  - kind: positional
    name: info_sep
    default: '  '
    rest: false
  - kind: positional
    name: width
    default: '36'
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - kind: positional
    name: update_min_steps
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: prompt
  kind: function
  ns: click
  description: |-
    Prompts a user for input.  This is a convenience function that can
    be used to prompt a user for input later.

    If the user aborts the input by sending an interrupt signal, this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the text to show for the prompt.
    :param default: the default value to use if no input happens.  If this
                    is not given it will prompt until it's aborted.
    :param hide_input: if this is set to true then the input value will
                       be hidden.
    :param confirmation_prompt: Prompt a second time to confirm the
        value. Can be set to a string instead of ``True`` to customize
        the message.
    :param type: the type to use to check the value against.
    :param value_proc: if this parameter is provided it's a function that
                       is invoked instead of the type conversion to
                       convert a value.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.
    :param show_choices: Show or hide choices if the passed type is a Choice.
                         For example if type is a Choice of either day or week,
                         show_choices is true and text is "Group by" then the
                         prompt will be "Group by (day, week): ".

    .. versionadded:: 8.0
        ``confirmation_prompt`` can be a custom string.

    .. versionadded:: 7.0
        Added the ``show_choices`` parameter.

    .. versionadded:: 6.0
        Added unicode support for cmd.exe on Windows.

    .. versionadded:: 4.0
        Added the `err` parameter.
  summary: Prompts a user for input
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: hide_input
    default: 'False'
    rest: false
  - kind: positional
    name: confirmation_prompt
    default: 'False'
    rest: false
  - kind: positional
    name: type
    default: None
    rest: false
  - kind: positional
    name: value_proc
    default: None
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: show_choices
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: secho
  kind: function
  ns: click
  description: |-
    This function combines :func:`echo` and :func:`style` into one
    call.  As such the following two calls are the same::

        click.secho('Hello World!', fg='green')
        click.echo(click.style('Hello World!', fg='green'))

    All keyword arguments are forwarded to the underlying functions
    depending on which one they go with.

    Non-string types will be converted to :class:`str`. However,
    :class:`bytes` are passed directly to :meth:`echo` without applying
    style. If you want to style bytes that represent text, call
    :meth:`bytes.decode` first.

    .. versionchanged:: 8.0
        A non-string ``message`` is converted to a string. Bytes are
        passed through without style applied.

    .. versionadded:: 2.0
  summary: This function combines :func:`echo` and :func:`style` into one
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: style
  kind: function
  ns: click
  description: |-
    Styles a text with ANSI styles and returns the new string.  By
    default the styling is self contained which means that at the end
    of the string a reset code is issued.  This can be prevented by
    passing ``reset=False``.

    Examples::

        click.echo(click.style('Hello World!', fg='green'))
        click.echo(click.style('ATTENTION!', blink=True))
        click.echo(click.style('Some things', reverse=True, fg='cyan'))
        click.echo(click.style('More colors', fg=(255, 12, 128), bg=117))

    Supported color names:

    * ``black`` (might be a gray)
    * ``red``
    * ``green``
    * ``yellow`` (might be an orange)
    * ``blue``
    * ``magenta``
    * ``cyan``
    * ``white`` (might be light gray)
    * ``bright_black``
    * ``bright_red``
    * ``bright_green``
    * ``bright_yellow``
    * ``bright_blue``
    * ``bright_magenta``
    * ``bright_cyan``
    * ``bright_white``
    * ``reset`` (reset the color code only)

    If the terminal supports it, color may also be specified as:

    -   An integer in the interval [0, 255]. The terminal must support
        8-bit/256-color mode.
    -   An RGB tuple of three integers in [0, 255]. The terminal must
        support 24-bit/true-color mode.

    See https://en.wikipedia.org/wiki/ANSI_color and
    https://gist.github.com/XVilka/8346728 for more information.

    :param text: the string to style with ansi codes.
    :param fg: if provided this will become the foreground color.
    :param bg: if provided this will become the background color.
    :param bold: if provided this will enable or disable bold mode.
    :param dim: if provided this will enable or disable dim mode.  This is
                badly supported.
    :param underline: if provided this will enable or disable underline.
    :param overline: if provided this will enable or disable overline.
    :param italic: if provided this will enable or disable italic.
    :param blink: if provided this will enable or disable blinking.
    :param reverse: if provided this will enable or disable inverse
                    rendering (foreground becomes background and the
                    other way round).
    :param strikethrough: if provided this will enable or disable
        striking through text.
    :param reset: by default a reset-all code is added at the end of the
                  string which means that styles do not carry over.  This
                  can be disabled to compose styles.

    .. versionchanged:: 8.0
        A non-string ``message`` is converted to a string.

    .. versionchanged:: 8.0
       Added support for 256 and RGB color codes.

    .. versionchanged:: 8.0
        Added the ``strikethrough``, ``italic``, and ``overline``
        parameters.

    .. versionchanged:: 7.0
        Added support for bright colors.

    .. versionadded:: 2.0
  summary: Styles a text with ANSI styles and returns the new string
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: fg
    default: None
    rest: false
  - kind: positional
    name: bg
    default: None
    rest: false
  - kind: positional
    name: bold
    default: None
    rest: false
  - kind: positional
    name: dim
    default: None
    rest: false
  - kind: positional
    name: underline
    default: None
    rest: false
  - kind: positional
    name: overline
    default: None
    rest: false
  - kind: positional
    name: italic
    default: None
    rest: false
  - kind: positional
    name: blink
    default: None
    rest: false
  - kind: positional
    name: reverse
    default: None
    rest: false
  - kind: positional
    name: strikethrough
    default: None
    rest: false
  - kind: positional
    name: reset
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: termui
  kind: module
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: clear
  kind: function
  ns: click
  description: |-
    Clears the terminal screen.  This will have the effect of clearing
    the whole visible space of the terminal and moving the cursor to the
    top left.  This does not do anything if not connected to a terminal.

    .. versionadded:: 2.0
  summary: Clears the terminal screen
  signatures:
  - type: '?'
  inherits_from: null
- name: confirm
  kind: function
  ns: click
  description: |-
    Prompts for confirmation (yes/no question).

    If the user aborts the input by sending a interrupt signal this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the question to ask.
    :param default: The default value to use when no input is given. If
        ``None``, repeat until input is given.
    :param abort: if this is set to `True` a negative answer aborts the
                  exception by raising :exc:`Abort`.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.

    .. versionchanged:: 8.0
        Repeat until input is given if ``default`` is ``None``.

    .. versionadded:: 4.0
        Added the ``err`` parameter.
  summary: Prompts for confirmation (yes/no question)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: 'False'
    rest: false
  - kind: positional
    name: abort
    default: 'False'
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: convert_type
  kind: function
  ns: click
  description: |-
    Find the most appropriate :class:`ParamType` for the given Python
    type. If the type isn't provided, it can be inferred from a default
    value.
  summary: Find the most appropriate :class:`ParamType` for the given Python
  signatures:
  - kind: positional
    name: ty
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: echo
  kind: function
  ns: click
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: echo_via_pager
  kind: function
  ns: click
  description: |-
    This function takes a text and shows it via an environment specific
    pager on stdout.

    .. versionchanged:: 3.0
       Added the `color` flag.

    :param text_or_generator: the text to page, or alternatively, a
                              generator emitting the text to page.
    :param color: controls if the pager supports ANSI colors or not.  The
                  default is autodetection.
  summary: This function takes a text and shows it via an environment specific
  signatures:
  - kind: positional
    name: text_or_generator
    default: null
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: edit
  kind: function
  ns: click
  description: |-
    Edits the given text in the defined editor.  If an editor is given
    (should be the full path to the executable but the regular operating
    system search path is used for finding the executable) it overrides
    the detected editor.  Optionally, some environment variables can be
    used.  If the editor is closed without changes, `None` is returned.  In
    case a file is edited directly the return value is always `None` and
    `require_save` and `extension` are ignored.

    If the editor cannot be opened a :exc:`UsageError` is raised.

    Note for Windows: to simplify cross-platform usage, the newlines are
    automatically converted from POSIX to Windows and vice versa.  As such,
    the message here will have ``\n`` as newline markers.

    :param text: the text to edit.
    :param editor: optionally the editor to use.  Defaults to automatic
                   detection.
    :param env: environment variables to forward to the editor.
    :param require_save: if this is true, then not saving in the editor
                         will make the return value become `None`.
    :param extension: the extension to tell the editor about.  This defaults
                      to `.txt` but changing this might change syntax
                      highlighting.
    :param filename: if provided it will edit this file instead of the
                     provided text contents.  It will not use a temporary
                     file as an indirection in that case.
  summary: Edits the given text in the defined editor
  signatures:
  - kind: positional
    name: text
    default: None
    rest: false
  - kind: positional
    name: editor
    default: None
    rest: false
  - kind: positional
    name: env
    default: None
    rest: false
  - kind: positional
    name: require_save
    default: 'True'
    rest: false
  - kind: positional
    name: extension
    default: .txt
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: getchar
  kind: function
  ns: click
  description: |-
    Fetches a single character from the terminal and returns it.  This
    will always return a unicode character and under certain rare
    circumstances this might return more than one character.  The
    situations which more than one character is returned is when for
    whatever reason multiple characters end up in the terminal buffer or
    standard input was not actually a terminal.

    Note that this will always read from the terminal, even if something
    is piped into the standard input.

    Note for Windows: in rare cases when typing non-ASCII characters, this
    function might wait for a second character and then return both at once.
    This is because certain Unicode characters look like special-key markers.

    .. versionadded:: 2.0

    :param echo: if set to `True`, the character read will also show up on
                 the terminal.  The default is to not show it.
  summary: Fetches a single character from the terminal and returns it
  signatures:
  - kind: positional
    name: echo
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: hidden_prompt_func
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: prompt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: isatty
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: stream
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: launch
  kind: function
  ns: click
  description: |-
    This function launches the given URL (or filename) in the default
    viewer application for this file type.  If this is an executable, it
    might launch the executable in a new session.  The return value is
    the exit code of the launched application.  Usually, ``0`` indicates
    success.

    Examples::

        click.launch('https://click.palletsprojects.com/')
        click.launch('/my/downloaded/file', locate=True)

    .. versionadded:: 2.0

    :param url: URL or filename of the thing to launch.
    :param wait: Wait for the program to exit before returning. This
        only works if the launched program blocks. In particular,
        ``xdg-open`` on Linux does not block.
    :param locate: if this is set to `True` then instead of launching the
                   application associated with the URL it will attempt to
                   launch a file manager with the file located.  This
                   might have weird effects if the URL does not point to
                   the filesystem.
  summary: This function launches the given URL (or filename) in the default
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: wait
    default: 'False'
    rest: false
  - kind: positional
    name: locate
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: pause
  kind: function
  ns: click
  description: |-
    This command stops execution and waits for the user to press any
    key to continue.  This is similar to the Windows batch "pause"
    command.  If the program is not run through a terminal, this command
    will instead do nothing.

    .. versionadded:: 2.0

    .. versionadded:: 4.0
       Added the `err` parameter.

    :param info: The message to print before pausing. Defaults to
        ``"Press any key to continue..."``.
    :param err: if set to message goes to ``stderr`` instead of
                ``stdout``, the same as with echo.
  summary: This command stops execution and waits for the user to press any
  signatures:
  - kind: positional
    name: info
    default: None
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: progressbar
  kind: function
  ns: click
  description: |-
    This function creates an iterable context manager that can be used
    to iterate over something while showing a progress bar.  It will
    either iterate over the `iterable` or `length` items (that are counted
    up).  While iteration happens, this function will print a rendered
    progress bar to the given `file` (defaults to stdout) and will attempt
    to calculate remaining time and more.  By default, this progress bar
    will not be rendered if the file is not a terminal.

    The context manager creates the progress bar.  When the context
    manager is entered the progress bar is already created.  With every
    iteration over the progress bar, the iterable passed to the bar is
    advanced and the bar is updated.  When the context manager exits,
    a newline is printed and the progress bar is finalized on screen.

    Note: The progress bar is currently designed for use cases where the
    total progress can be expected to take at least several seconds.
    Because of this, the ProgressBar class object won't display
    progress that is considered too fast, and progress where the time
    between steps is less than a second.

    No printing must happen or the progress bar will be unintentionally
    destroyed.

    Example usage::

        with progressbar(items) as bar:
            for item in bar:
                do_something_with(item)

    Alternatively, if no iterable is specified, one can manually update the
    progress bar through the `update()` method instead of directly
    iterating over the progress bar.  The update method accepts the number
    of steps to increment the bar with::

        with progressbar(length=chunks.total_bytes) as bar:
            for chunk in chunks:
                process_chunk(chunk)
                bar.update(chunks.bytes)

    The ``update()`` method also takes an optional value specifying the
    ``current_item`` at the new position. This is useful when used
    together with ``item_show_func`` to customize the output for each
    manual step::

        with click.progressbar(
            length=total_size,
            label='Unzipping archive',
            item_show_func=lambda a: a.filename
        ) as bar:
            for archive in zip_file:
                archive.extract()
                bar.update(archive.size, archive)

    :param iterable: an iterable to iterate over.  If not provided the length
                     is required.
    :param length: the number of items to iterate over.  By default the
                   progressbar will attempt to ask the iterator about its
                   length, which might or might not work.  If an iterable is
                   also provided this parameter can be used to override the
                   length.  If an iterable is not provided the progress bar
                   will iterate over a range of that length.
    :param label: the label to show next to the progress bar.
    :param show_eta: enables or disables the estimated time display.  This is
                     automatically disabled if the length cannot be
                     determined.
    :param show_percent: enables or disables the percentage display.  The
                         default is `True` if the iterable has a length or
                         `False` if not.
    :param show_pos: enables or disables the absolute position display.  The
                     default is `False`.
    :param item_show_func: A function called with the current item which
        can return a string to show next to the progress bar. If the
        function returns ``None`` nothing is shown. The current item can
        be ``None``, such as when entering and exiting the bar.
    :param fill_char: the character to use to show the filled part of the
                      progress bar.
    :param empty_char: the character to use to show the non-filled part of
                       the progress bar.
    :param bar_template: the format string to use as template for the bar.
                         The parameters in it are ``label`` for the label,
                         ``bar`` for the progress bar and ``info`` for the
                         info section.
    :param info_sep: the separator between multiple info items (eta etc.)
    :param width: the width of the progress bar in characters, 0 means full
                  terminal width
    :param file: The file to write to. If this is not a terminal then
        only the label is printed.
    :param color: controls if the terminal supports ANSI colors or not.  The
                  default is autodetection.  This is only needed if ANSI
                  codes are included anywhere in the progress bar output
                  which is not the case by default.
    :param update_min_steps: Render only when this many updates have
        completed. This allows tuning for very fast iterators.

    .. versionchanged:: 8.0
        Output is shown even if execution time is less than 0.5 seconds.

    .. versionchanged:: 8.0
        ``item_show_func`` shows the current item, not the previous one.

    .. versionchanged:: 8.0
        Labels are echoed if the output is not a TTY. Reverts a change
        in 7.0 that removed all output.

    .. versionadded:: 8.0
       Added the ``update_min_steps`` parameter.

    .. versionchanged:: 4.0
        Added the ``color`` parameter. Added the ``update`` method to
        the object.

    .. versionadded:: 2.0
  summary: This function creates an iterable context manager that can be used
  signatures:
  - kind: positional
    name: iterable
    default: None
    rest: false
  - kind: positional
    name: length
    default: None
    rest: false
  - kind: positional
    name: label
    default: None
    rest: false
  - kind: positional
    name: show_eta
    default: 'True'
    rest: false
  - kind: positional
    name: show_percent
    default: None
    rest: false
  - kind: positional
    name: show_pos
    default: 'False'
    rest: false
  - kind: positional
    name: item_show_func
    default: None
    rest: false
  - kind: positional
    name: fill_char
    default: '#'
    rest: false
  - kind: positional
    name: empty_char
    default: '-'
    rest: false
  - kind: positional
    name: bar_template
    default: '%(label)s  [%(bar)s]  %(info)s'
    rest: false
  - kind: positional
    name: info_sep
    default: '  '
    rest: false
  - kind: positional
    name: width
    default: '36'
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - kind: positional
    name: update_min_steps
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: prompt
  kind: function
  ns: click
  description: |-
    Prompts a user for input.  This is a convenience function that can
    be used to prompt a user for input later.

    If the user aborts the input by sending an interrupt signal, this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the text to show for the prompt.
    :param default: the default value to use if no input happens.  If this
                    is not given it will prompt until it's aborted.
    :param hide_input: if this is set to true then the input value will
                       be hidden.
    :param confirmation_prompt: Prompt a second time to confirm the
        value. Can be set to a string instead of ``True`` to customize
        the message.
    :param type: the type to use to check the value against.
    :param value_proc: if this parameter is provided it's a function that
                       is invoked instead of the type conversion to
                       convert a value.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.
    :param show_choices: Show or hide choices if the passed type is a Choice.
                         For example if type is a Choice of either day or week,
                         show_choices is true and text is "Group by" then the
                         prompt will be "Group by (day, week): ".

    .. versionadded:: 8.0
        ``confirmation_prompt`` can be a custom string.

    .. versionadded:: 7.0
        Added the ``show_choices`` parameter.

    .. versionadded:: 6.0
        Added unicode support for cmd.exe on Windows.

    .. versionadded:: 4.0
        Added the `err` parameter.
  summary: Prompts a user for input
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: hide_input
    default: 'False'
    rest: false
  - kind: positional
    name: confirmation_prompt
    default: 'False'
    rest: false
  - kind: positional
    name: type
    default: None
    rest: false
  - kind: positional
    name: value_proc
    default: None
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: show_choices
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: raw_terminal
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: resolve_color_default
  kind: function
  ns: click
  description: |-
    Internal helper to get the default value of the color flag.  If a
    value is passed it's returned unchanged, otherwise it's looked up from
    the current context.
  summary: Internal helper to get the default value of the color flag
  signatures:
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: secho
  kind: function
  ns: click
  description: |-
    This function combines :func:`echo` and :func:`style` into one
    call.  As such the following two calls are the same::

        click.secho('Hello World!', fg='green')
        click.echo(click.style('Hello World!', fg='green'))

    All keyword arguments are forwarded to the underlying functions
    depending on which one they go with.

    Non-string types will be converted to :class:`str`. However,
    :class:`bytes` are passed directly to :meth:`echo` without applying
    style. If you want to style bytes that represent text, call
    :meth:`bytes.decode` first.

    .. versionchanged:: 8.0
        A non-string ``message`` is converted to a string. Bytes are
        passed through without style applied.

    .. versionadded:: 2.0
  summary: This function combines :func:`echo` and :func:`style` into one
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: strip_ansi
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: style
  kind: function
  ns: click
  description: |-
    Styles a text with ANSI styles and returns the new string.  By
    default the styling is self contained which means that at the end
    of the string a reset code is issued.  This can be prevented by
    passing ``reset=False``.

    Examples::

        click.echo(click.style('Hello World!', fg='green'))
        click.echo(click.style('ATTENTION!', blink=True))
        click.echo(click.style('Some things', reverse=True, fg='cyan'))
        click.echo(click.style('More colors', fg=(255, 12, 128), bg=117))

    Supported color names:

    * ``black`` (might be a gray)
    * ``red``
    * ``green``
    * ``yellow`` (might be an orange)
    * ``blue``
    * ``magenta``
    * ``cyan``
    * ``white`` (might be light gray)
    * ``bright_black``
    * ``bright_red``
    * ``bright_green``
    * ``bright_yellow``
    * ``bright_blue``
    * ``bright_magenta``
    * ``bright_cyan``
    * ``bright_white``
    * ``reset`` (reset the color code only)

    If the terminal supports it, color may also be specified as:

    -   An integer in the interval [0, 255]. The terminal must support
        8-bit/256-color mode.
    -   An RGB tuple of three integers in [0, 255]. The terminal must
        support 24-bit/true-color mode.

    See https://en.wikipedia.org/wiki/ANSI_color and
    https://gist.github.com/XVilka/8346728 for more information.

    :param text: the string to style with ansi codes.
    :param fg: if provided this will become the foreground color.
    :param bg: if provided this will become the background color.
    :param bold: if provided this will enable or disable bold mode.
    :param dim: if provided this will enable or disable dim mode.  This is
                badly supported.
    :param underline: if provided this will enable or disable underline.
    :param overline: if provided this will enable or disable overline.
    :param italic: if provided this will enable or disable italic.
    :param blink: if provided this will enable or disable blinking.
    :param reverse: if provided this will enable or disable inverse
                    rendering (foreground becomes background and the
                    other way round).
    :param strikethrough: if provided this will enable or disable
        striking through text.
    :param reset: by default a reset-all code is added at the end of the
                  string which means that styles do not carry over.  This
                  can be disabled to compose styles.

    .. versionchanged:: 8.0
        A non-string ``message`` is converted to a string.

    .. versionchanged:: 8.0
       Added support for 256 and RGB color codes.

    .. versionchanged:: 8.0
        Added the ``strikethrough``, ``italic``, and ``overline``
        parameters.

    .. versionchanged:: 7.0
        Added support for bright colors.

    .. versionadded:: 2.0
  summary: Styles a text with ANSI styles and returns the new string
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: fg
    default: None
    rest: false
  - kind: positional
    name: bg
    default: None
    rest: false
  - kind: positional
    name: bold
    default: None
    rest: false
  - kind: positional
    name: dim
    default: None
    rest: false
  - kind: positional
    name: underline
    default: None
    rest: false
  - kind: positional
    name: overline
    default: None
    rest: false
  - kind: positional
    name: italic
    default: None
    rest: false
  - kind: positional
    name: blink
    default: None
    rest: false
  - kind: positional
    name: reverse
    default: None
    rest: false
  - kind: positional
    name: strikethrough
    default: None
    rest: false
  - kind: positional
    name: reset
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: unstyle
  kind: function
  ns: click
  description: |-
    Removes ANSI styling information from a string.  Usually it's not
    necessary to use this function as Click's echo function will
    automatically remove styling if necessary.

    .. versionadded:: 2.0

    :param text: the text to remove style information from.
  summary: Removes ANSI styling information from a string
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: unstyle
  kind: function
  ns: click
  description: |-
    Removes ANSI styling information from a string.  Usually it's not
    necessary to use this function as Click's echo function will
    automatically remove styling if necessary.

    .. versionadded:: 2.0

    :param text: the text to remove style information from.
  summary: Removes ANSI styling information from a string
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: utils
  kind: module
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: KeepOpenFile
  kind: class
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: file
    default: null
    rest: false
  - type: KeepOpenFile
  inherits_from: null
- name: ModuleType
  kind: class
  ns: click
  description: |-
    Create a module object.

    The name must be a string; the optional doc argument can have any type.
  summary: Create a module object
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: doc
    default: None
    rest: false
  - type: module
  inherits_from: null
- name: R
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WIN
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: auto_wrap_for_ansi
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: binary_streams
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: echo
  kind: function
  ns: click
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: format_filename
  kind: function
  ns: click
  description: |-
    Format a filename as a string for display. Ensures the filename can be
    displayed by replacing any invalid bytes or surrogate escapes in the name
    with the replacement character ``�``.

    Invalid bytes or surrogate escapes will raise an error when written to a
    stream with ``errors="strict". This will typically happen with ``stdout``
    when the locale is something like ``en_GB.UTF-8``.

    Many scenarios *are* safe to write surrogates though, due to PEP 538 and
    PEP 540, including:

    -   Writing to ``stderr``, which uses ``errors="backslashreplace"``.
    -   The system has ``LANG=C.UTF-8``, ``C``, or ``POSIX``. Python opens
        stdout and stderr with ``errors="surrogateescape"``.
    -   None of ``LANG/LC_*`` are set. Python assumes ``LANG=C.UTF-8``.
    -   Python is started in UTF-8 mode  with  ``PYTHONUTF8=1`` or ``-X utf8``.
        Python opens stdout and stderr with ``errors="surrogateescape"``.

    :param filename: formats a filename for UI display.  This will also convert
                     the filename into unicode without failing.
    :param shorten: this optionally shortens the filename to strip of the
                    path that leads up to it.
  summary: Format a filename as a string for display
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: shorten
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_app_dir
  kind: function
  ns: click
  description: |-
    Returns the config folder for the application.  The default behavior
    is to return whatever is most appropriate for the operating system.

    To give you an idea, for an app called ``"Foo Bar"``, something like
    the following folders could be returned:

    Mac OS X:
      ``~/Library/Application Support/Foo Bar``
    Mac OS X (POSIX):
      ``~/.foo-bar``
    Unix:
      ``~/.config/foo-bar``
    Unix (POSIX):
      ``~/.foo-bar``
    Windows (roaming):
      ``C:\Users\<user>\AppData\Roaming\Foo Bar``
    Windows (not roaming):
      ``C:\Users\<user>\AppData\Local\Foo Bar``

    .. versionadded:: 2.0

    :param app_name: the application name.  This should be properly capitalized
                     and can contain whitespace.
    :param roaming: controls if the folder should be roaming or not on Windows.
                    Has no effect otherwise.
    :param force_posix: if this is set to `True` then on any POSIX system the
                        folder will be stored in the home folder with a leading
                        dot instead of the XDG config home or darwin's
                        application support folder.
  summary: Returns the config folder for the application
  signatures:
  - kind: positional
    name: app_name
    default: null
    rest: false
  - kind: positional
    name: roaming
    default: 'True'
    rest: false
  - kind: positional
    name: force_posix
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_binary_stream
  kind: function
  ns: click
  description: |-
    Returns a system stream for byte processing.

    :param name: the name of the stream to open.  Valid names are ``'stdin'``,
                 ``'stdout'`` and ``'stderr'``
  summary: Returns a system stream for byte processing
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: get_text_stream
  kind: function
  ns: click
  description: |-
    Returns a system stream for text processing.  This usually returns
    a wrapped stream around a binary stream returned from
    :func:`get_binary_stream` but it also can take shortcuts for already
    correctly configured streams.

    :param name: the name of the stream to open.  Valid names are ``'stdin'``,
                 ``'stdout'`` and ``'stderr'``
    :param encoding: overrides the detected default encoding.
    :param errors: overrides the default error mode.
  summary: Returns a system stream for text processing
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - type: '?'
  inherits_from: null
- name: make_default_short_help
  kind: function
  ns: click
  description: Returns a condensed version of help string.
  summary: Returns a condensed version of help string
  signatures:
  - kind: positional
    name: help
    default: null
    rest: false
  - kind: positional
    name: max_length
    default: '45'
    rest: false
  - type: '?'
  inherits_from: null
- name: make_str
  kind: function
  ns: click
  description: Converts a value into a valid string.
  summary: Converts a value into a valid string
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: open_file
  kind: function
  ns: click
  description: |-
    Open a file, with extra behavior to handle ``'-'`` to indicate
    a standard stream, lazy open on write, and atomic write. Similar to
    the behavior of the :class:`~click.File` param type.

    If ``'-'`` is given to open ``stdout`` or ``stdin``, the stream is
    wrapped so that using it in a context manager will not close it.
    This makes it possible to use the function without accidentally
    closing a standard stream:

    .. code-block:: python

        with open_file(filename) as f:
            ...

    :param filename: The name of the file to open, or ``'-'`` for
        ``stdin``/``stdout``.
    :param mode: The mode in which to open the file.
    :param encoding: The encoding to decode or encode a file opened in
        text mode.
    :param errors: The error handling mode.
    :param lazy: Wait to open the file until it is accessed. For read
        mode, the file is temporarily opened to raise access errors
        early, then closed until it is read again.
    :param atomic: Write to a temporary file and replace the given file
        on close.

    .. versionadded:: 3.0
  summary: Open a file, with extra behavior to handle ``'-'`` to indicate
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - kind: positional
    name: lazy
    default: 'False'
    rest: false
  - kind: positional
    name: atomic
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: open_stream
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - kind: positional
    name: atomic
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: resolve_color_default
  kind: function
  ns: click
  description: |-
    Internal helper to get the default value of the color flag.  If a
    value is passed it's returned unchanged, otherwise it's looked up from
    the current context.
  summary: Internal helper to get the default value of the color flag
  signatures:
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: safecall
  kind: function
  ns: click
  description: Wraps a function so that it swallows exceptions.
  summary: Wraps a function so that it swallows exceptions
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: should_strip_ansi
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: stream
    default: None
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: strip_ansi
  kind: function
  ns: click
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: text_streams
  kind: const
  ns: click
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: update_wrapper
  kind: function
  ns: click
  description: |-
    Update a wrapper function to look like the wrapped function

    wrapper is the function to be updated
    wrapped is the original function
    assigned is a tuple naming the attributes assigned directly
    from the wrapped function to the wrapper function (defaults to
    functools.WRAPPER_ASSIGNMENTS)
    updated is a tuple naming the attributes of the wrapper that
    are updated with the corresponding attribute from the wrapped
    function (defaults to functools.WRAPPER_UPDATES)
  summary: Update a wrapper function to look like the wrapped function
  signatures:
  - kind: positional
    name: wrapper
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
- name: version_option
  kind: function
  ns: click
  description: |-
    Add a ``--version`` option which immediately prints the version
    number and exits the program.

    If ``version`` is not provided, Click will try to detect it using
    :func:`importlib.metadata.version` to get the version for the
    ``package_name``. On Python < 3.8, the ``importlib_metadata``
    backport must be installed.

    If ``package_name`` is not provided, Click will try to detect it by
    inspecting the stack frames. This will be used to detect the
    version, so it must match the name of the installed package.

    :param version: The version number to show. If not provided, Click
        will try to detect it.
    :param param_decls: One or more option names. Defaults to the single
        value ``"--version"``.
    :param package_name: The package name to detect the version from. If
        not provided, Click will try to detect it.
    :param prog_name: The name of the CLI to show in the message. If not
        provided, it will be detected from the command.
    :param message: The message to show. The values ``%(prog)s``,
        ``%(package)s``, and ``%(version)s`` are available. Defaults to
        ``"%(prog)s, version %(version)s"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    :raise RuntimeError: ``version`` could not be detected.

    .. versionchanged:: 8.0
        Add the ``package_name`` parameter, and the ``%(package)s``
        value for messages.

    .. versionchanged:: 8.0
        Use :mod:`importlib.metadata` instead of ``pkg_resources``. The
        version is detected based on the package name, not the entry
        point name. The Python package name must match the installed
        package name, or be passed with ``package_name=``.
  summary: Add a ``--version`` option which immediately prints the version
  signatures:
  - kind: positional
    name: version
    default: None
    rest: false
  - name: package_name
    default: None
    rest: false
    kind: kw-only
  - name: prog_name
    default: None
    rest: false
    kind: kw-only
  - name: message
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: wrap_text
  kind: function
  ns: click
  description: |-
    A helper function that intelligently wraps text.  By default, it
    assumes that it operates on a single paragraph of text but if the
    `preserve_paragraphs` parameter is provided it will intelligently
    handle paragraphs (defined by two empty lines).

    If paragraphs are handled, a paragraph can be prefixed with an empty
    line containing the ``\b`` character (``\x08``) to indicate that
    no rewrapping should happen in that block.

    :param text: the text that should be rewrapped.
    :param width: the maximum width for the text.
    :param initial_indent: the initial indent that should be placed on the
                           first line as a string.
    :param subsequent_indent: the indent string that should be placed on
                              each consecutive line.
    :param preserve_paragraphs: if this flag is set then the wrapping will
                                intelligently handle paragraphs.
  summary: A helper function that intelligently wraps text
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: width
    default: '78'
    rest: false
  - kind: positional
    name: initial_indent
    default: null
    rest: false
  - kind: positional
    name: subsequent_indent
    default: null
    rest: false
  - kind: positional
    name: preserve_paragraphs
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: click.core
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: F
  kind: const
  ns: click.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: click.core
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: augment_usage_errors
  kind: function
  ns: click.core
  description: Context manager that attaches extra information to exceptions.
  summary: Context manager that attaches extra information to exceptions
  signatures:
  - type: '?'
  inherits_from: null
- name: batch
  kind: function
  ns: click.core
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: iterable
    default: null
    rest: false
  - kind: positional
    name: batch_size
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: confirm
  kind: function
  ns: click.core
  description: |-
    Prompts for confirmation (yes/no question).

    If the user aborts the input by sending a interrupt signal this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the question to ask.
    :param default: The default value to use when no input is given. If
        ``None``, repeat until input is given.
    :param abort: if this is set to `True` a negative answer aborts the
                  exception by raising :exc:`Abort`.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.

    .. versionchanged:: 8.0
        Repeat until input is given if ``default`` is ``None``.

    .. versionadded:: 4.0
        Added the ``err`` parameter.
  summary: Prompts for confirmation (yes/no question)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: 'False'
    rest: false
  - kind: positional
    name: abort
    default: 'False'
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: contextmanager
  kind: function
  ns: click.core
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: echo
  kind: function
  ns: click.core
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: iter_params_for_processing
  kind: function
  ns: click.core
  description: |-
    Given a sequence of parameters in the order as should be considered
    for processing and an iterable of parameters that exist, this returns
    a list in the correct order as they should be processed.
  summary: Given a sequence of parameters in the order as should be considered
  signatures:
  - kind: positional
    name: invocation_order
    default: null
    rest: false
  - kind: positional
    name: declaration_order
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: join_options
  kind: function
  ns: click.core
  description: |-
    Given a list of option strings this joins them in the most appropriate
    way and returns them in the form ``(formatted_string,
    any_prefix_is_slash)`` where the second item in the tuple is a flag that
    indicates if any of the option prefixes was a slash.
  summary: Given a list of option strings this joins them in the most appropriate
  signatures:
  - kind: positional
    name: options
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: make_default_short_help
  kind: function
  ns: click.core
  description: Returns a condensed version of help string.
  summary: Returns a condensed version of help string
  signatures:
  - kind: positional
    name: help
    default: null
    rest: false
  - kind: positional
    name: max_length
    default: '45'
    rest: false
  - type: '?'
  inherits_from: null
- name: make_str
  kind: function
  ns: click.core
  description: Converts a value into a valid string.
  summary: Converts a value into a valid string
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ngettext
  kind: function
  ns: click.core
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: msgid1
    default: null
    rest: false
  - kind: positional
    name: msgid2
    default: null
    rest: false
  - kind: positional
    name: n
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pop_context
  kind: function
  ns: click.core
  description: Removes the top level from the stack.
  summary: Removes the top level from the stack
  signatures:
  - type: '?'
  inherits_from: null
- name: prompt
  kind: function
  ns: click.core
  description: |-
    Prompts a user for input.  This is a convenience function that can
    be used to prompt a user for input later.

    If the user aborts the input by sending an interrupt signal, this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the text to show for the prompt.
    :param default: the default value to use if no input happens.  If this
                    is not given it will prompt until it's aborted.
    :param hide_input: if this is set to true then the input value will
                       be hidden.
    :param confirmation_prompt: Prompt a second time to confirm the
        value. Can be set to a string instead of ``True`` to customize
        the message.
    :param type: the type to use to check the value against.
    :param value_proc: if this parameter is provided it's a function that
                       is invoked instead of the type conversion to
                       convert a value.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.
    :param show_choices: Show or hide choices if the passed type is a Choice.
                         For example if type is a Choice of either day or week,
                         show_choices is true and text is "Group by" then the
                         prompt will be "Group by (day, week): ".

    .. versionadded:: 8.0
        ``confirmation_prompt`` can be a custom string.

    .. versionadded:: 7.0
        Added the ``show_choices`` parameter.

    .. versionadded:: 6.0
        Added unicode support for cmd.exe on Windows.

    .. versionadded:: 4.0
        Added the `err` parameter.
  summary: Prompts a user for input
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: hide_input
    default: 'False'
    rest: false
  - kind: positional
    name: confirmation_prompt
    default: 'False'
    rest: false
  - kind: positional
    name: type
    default: None
    rest: false
  - kind: positional
    name: value_proc
    default: None
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: show_choices
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: push_context
  kind: function
  ns: click.core
  description: Pushes a new context to the current stack.
  summary: Pushes a new context to the current stack
  signatures:
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_opt
  kind: function
  ns: click.core
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: opt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: style
  kind: function
  ns: click.core
  description: |-
    Styles a text with ANSI styles and returns the new string.  By
    default the styling is self contained which means that at the end
    of the string a reset code is issued.  This can be prevented by
    passing ``reset=False``.

    Examples::

        click.echo(click.style('Hello World!', fg='green'))
        click.echo(click.style('ATTENTION!', blink=True))
        click.echo(click.style('Some things', reverse=True, fg='cyan'))
        click.echo(click.style('More colors', fg=(255, 12, 128), bg=117))

    Supported color names:

    * ``black`` (might be a gray)
    * ``red``
    * ``green``
    * ``yellow`` (might be an orange)
    * ``blue``
    * ``magenta``
    * ``cyan``
    * ``white`` (might be light gray)
    * ``bright_black``
    * ``bright_red``
    * ``bright_green``
    * ``bright_yellow``
    * ``bright_blue``
    * ``bright_magenta``
    * ``bright_cyan``
    * ``bright_white``
    * ``reset`` (reset the color code only)

    If the terminal supports it, color may also be specified as:

    -   An integer in the interval [0, 255]. The terminal must support
        8-bit/256-color mode.
    -   An RGB tuple of three integers in [0, 255]. The terminal must
        support 24-bit/true-color mode.

    See https://en.wikipedia.org/wiki/ANSI_color and
    https://gist.github.com/XVilka/8346728 for more information.

    :param text: the string to style with ansi codes.
    :param fg: if provided this will become the foreground color.
    :param bg: if provided this will become the background color.
    :param bold: if provided this will enable or disable bold mode.
    :param dim: if provided this will enable or disable dim mode.  This is
                badly supported.
    :param underline: if provided this will enable or disable underline.
    :param overline: if provided this will enable or disable overline.
    :param italic: if provided this will enable or disable italic.
    :param blink: if provided this will enable or disable blinking.
    :param reverse: if provided this will enable or disable inverse
                    rendering (foreground becomes background and the
                    other way round).
    :param strikethrough: if provided this will enable or disable
        striking through text.
    :param reset: by default a reset-all code is added at the end of the
                  string which means that styles do not carry over.  This
                  can be disabled to compose styles.

    .. versionchanged:: 8.0
        A non-string ``message`` is converted to a string.

    .. versionchanged:: 8.0
       Added support for 256 and RGB color codes.

    .. versionchanged:: 8.0
        Added the ``strikethrough``, ``italic``, and ``overline``
        parameters.

    .. versionchanged:: 7.0
        Added support for bright colors.

    .. versionadded:: 2.0
  summary: Styles a text with ANSI styles and returns the new string
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: fg
    default: None
    rest: false
  - kind: positional
    name: bg
    default: None
    rest: false
  - kind: positional
    name: bold
    default: None
    rest: false
  - kind: positional
    name: dim
    default: None
    rest: false
  - kind: positional
    name: underline
    default: None
    rest: false
  - kind: positional
    name: overline
    default: None
    rest: false
  - kind: positional
    name: italic
    default: None
    rest: false
  - kind: positional
    name: blink
    default: None
    rest: false
  - kind: positional
    name: reverse
    default: None
    rest: false
  - kind: positional
    name: strikethrough
    default: None
    rest: false
  - kind: positional
    name: reset
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: update_wrapper
  kind: function
  ns: click.core
  description: |-
    Update a wrapper function to look like the wrapped function

    wrapper is the function to be updated
    wrapped is the original function
    assigned is a tuple naming the attributes assigned directly
    from the wrapped function to the wrapper function (defaults to
    functools.WRAPPER_ASSIGNMENTS)
    updated is a tuple naming the attributes of the wrapper that
    are updated with the corresponding attribute from the wrapped
    function (defaults to functools.WRAPPER_UPDATES)
  summary: Update a wrapper function to look like the wrapped function
  signatures:
  - kind: positional
    name: wrapper
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
- name: click.decorators
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CmdType
  kind: const
  ns: click.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FC
  kind: const
  ns: click.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: GrpType
  kind: const
  ns: click.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: R
  kind: const
  ns: click.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: T
  kind: const
  ns: click.decorators
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: argument
  kind: function
  ns: click.decorators
  description: |-
    Attaches an argument to the command.  All positional arguments are
    passed as parameter declarations to :class:`Argument`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Argument` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default argument class, refer to :class:`Argument` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the argument class to instantiate.  This defaults to
                :class:`Argument`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
  summary: Attaches an argument to the command
  signatures:
  - name: cls
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: command
  kind: function
  ns: click.decorators
  description: |-
    Creates a new :class:`Command` and uses the decorated function as
    callback.  This will also automatically attach all decorated
    :func:`option`\s and :func:`argument`\s as parameters to the command.

    The name of the command defaults to the name of the function with
    underscores replaced by dashes.  If you want to change that, you can
    pass the intended name as the first argument.

    All keyword arguments are forwarded to the underlying command class.
    For the ``params`` argument, any decorated params are appended to
    the end of the list.

    Once decorated the function turns into a :class:`Command` instance
    that can be invoked as a command line utility or be attached to a
    command :class:`Group`.

    :param name: the name of the command.  This defaults to the function
                 name with underscores replaced by dashes.
    :param cls: the command class to instantiate.  This defaults to
                :class:`Command`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.

    .. versionchanged:: 8.1
        The ``params`` argument can be used. Decorated params are
        appended to the end of the list.
  summary: Creates a new :class:`Command` and uses the decorated function as
  signatures:
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: cls
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: confirmation_option
  kind: function
  ns: click.decorators
  description: |-
    Add a ``--yes`` option which shows a prompt before continuing if
    not passed. If the prompt is declined, the program will exit.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--yes"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
  summary: Add a ``--yes`` option which shows a prompt before continuing if
  signatures:
  - type: '?'
  inherits_from: null
- name: echo
  kind: function
  ns: click.decorators
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: get_current_context
  kind: function
  ns: click.decorators
  description: |-
    Returns the current click context.  This can be used as a way to
    access the current context object from anywhere.  This is a more implicit
    alternative to the :func:`pass_context` decorator.  This function is
    primarily useful for helpers such as :func:`echo` which might be
    interested in changing its behavior based on the current context.

    To push the current context, :meth:`Context.scope` can be used.

    .. versionadded:: 5.0

    :param silent: if set to `True` the return value is `None` if no context
                   is available.  The default behavior is to raise a
                   :exc:`RuntimeError`.
  summary: Returns the current click context
  signatures:
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: group
  kind: function
  ns: click.decorators
  description: |-
    Creates a new :class:`Group` with a function as callback.  This
    works otherwise the same as :func:`command` just that the `cls`
    parameter is set to :class:`Group`.

    .. versionchanged:: 8.1
        This decorator can be applied without parentheses.
  summary: Creates a new :class:`Group` with a function as callback
  signatures:
  - kind: positional
    name: name
    default: None
    rest: false
  - kind: positional
    name: cls
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: help_option
  kind: function
  ns: click.decorators
  description: |-
    Add a ``--help`` option which immediately prints the help page
    and exits the program.

    This is usually unnecessary, as the ``--help`` option is added to
    each command automatically unless ``add_help_option=False`` is
    passed.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--help"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
  summary: Add a ``--help`` option which immediately prints the help page
  signatures:
  - type: '?'
  inherits_from: null
- name: make_pass_decorator
  kind: function
  ns: click.decorators
  description: |-
    Given an object type this creates a decorator that will work
    similar to :func:`pass_obj` but instead of passing the object of the
    current context, it will find the innermost context of type
    :func:`object_type`.

    This generates a decorator that works roughly like this::

        from functools import update_wrapper

        def decorator(f):
            @pass_context
            def new_func(ctx, *args, **kwargs):
                obj = ctx.find_object(object_type)
                return ctx.invoke(f, obj, *args, **kwargs)
            return update_wrapper(new_func, f)
        return decorator

    :param object_type: the type of the object to pass.
    :param ensure: if set to `True`, a new object will be created and
                   remembered on the context if it's not there yet.
  summary: Given an object type this creates a decorator that will work
  signatures:
  - kind: positional
    name: object_type
    default: null
    rest: false
  - kind: positional
    name: ensure
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: option
  kind: function
  ns: click.decorators
  description: |-
    Attaches an option to the command.  All positional arguments are
    passed as parameter declarations to :class:`Option`; all keyword
    arguments are forwarded unchanged (except ``cls``).
    This is equivalent to creating an :class:`Option` instance manually
    and attaching it to the :attr:`Command.params` list.

    For the default option class, refer to :class:`Option` and
    :class:`Parameter` for descriptions of parameters.

    :param cls: the option class to instantiate.  This defaults to
                :class:`Option`.
    :param param_decls: Passed as positional arguments to the constructor of
        ``cls``.
    :param attrs: Passed as keyword arguments to the constructor of ``cls``.
  summary: Attaches an option to the command
  signatures:
  - name: cls
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: pass_context
  kind: function
  ns: click.decorators
  description: |-
    Marks a callback as wanting to receive the current context
    object as first argument.
  summary: Marks a callback as wanting to receive the current context
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: pass_meta_key
  kind: function
  ns: click.decorators
  description: |-
    Create a decorator that passes a key from
    :attr:`click.Context.meta` as the first argument to the decorated
    function.

    :param key: Key in ``Context.meta`` to pass.
    :param doc_description: Description of the object being passed,
        inserted into the decorator's docstring. Defaults to "the 'key'
        key from Context.meta".

    .. versionadded:: 8.0
  summary: Create a decorator that passes a key from
  signatures:
  - kind: positional
    name: key
    default: null
    rest: false
  - name: doc_description
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: pass_obj
  kind: function
  ns: click.decorators
  description: |-
    Similar to :func:`pass_context`, but only pass the object on the
    context onwards (:attr:`Context.obj`).  This is useful if that object
    represents the state of a nested system.
  summary: Similar to :func:`pass_context`, but only pass the object on the
  signatures:
  - kind: positional
    name: f
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: password_option
  kind: function
  ns: click.decorators
  description: |-
    Add a ``--password`` option which prompts for a password, hiding
    input and asking to enter the value again for confirmation.

    :param param_decls: One or more option names. Defaults to the single
        value ``"--password"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
  summary: Add a ``--password`` option which prompts for a password, hiding
  signatures:
  - type: '?'
  inherits_from: null
- name: update_wrapper
  kind: function
  ns: click.decorators
  description: |-
    Update a wrapper function to look like the wrapped function

    wrapper is the function to be updated
    wrapped is the original function
    assigned is a tuple naming the attributes assigned directly
    from the wrapped function to the wrapper function (defaults to
    functools.WRAPPER_ASSIGNMENTS)
    updated is a tuple naming the attributes of the wrapper that
    are updated with the corresponding attribute from the wrapped
    function (defaults to functools.WRAPPER_UPDATES)
  summary: Update a wrapper function to look like the wrapped function
  signatures:
  - kind: positional
    name: wrapper
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
- name: version_option
  kind: function
  ns: click.decorators
  description: |-
    Add a ``--version`` option which immediately prints the version
    number and exits the program.

    If ``version`` is not provided, Click will try to detect it using
    :func:`importlib.metadata.version` to get the version for the
    ``package_name``. On Python < 3.8, the ``importlib_metadata``
    backport must be installed.

    If ``package_name`` is not provided, Click will try to detect it by
    inspecting the stack frames. This will be used to detect the
    version, so it must match the name of the installed package.

    :param version: The version number to show. If not provided, Click
        will try to detect it.
    :param param_decls: One or more option names. Defaults to the single
        value ``"--version"``.
    :param package_name: The package name to detect the version from. If
        not provided, Click will try to detect it.
    :param prog_name: The name of the CLI to show in the message. If not
        provided, it will be detected from the command.
    :param message: The message to show. The values ``%(prog)s``,
        ``%(package)s``, and ``%(version)s`` are available. Defaults to
        ``"%(prog)s, version %(version)s"``.
    :param kwargs: Extra arguments are passed to :func:`option`.
    :raise RuntimeError: ``version`` could not be detected.

    .. versionchanged:: 8.0
        Add the ``package_name`` parameter, and the ``%(package)s``
        value for messages.

    .. versionchanged:: 8.0
        Use :mod:`importlib.metadata` instead of ``pkg_resources``. The
        version is detected based on the package name, not the entry
        point name. The Python package name must match the installed
        package name, or be passed with ``package_name=``.
  summary: Add a ``--version`` option which immediately prints the version
  signatures:
  - kind: positional
    name: version
    default: None
    rest: false
  - name: package_name
    default: None
    rest: false
    kind: kw-only
  - name: prog_name
    default: None
    rest: false
    kind: kw-only
  - name: message
    default: None
    rest: false
    kind: kw-only
  - type: '?'
  inherits_from: null
- name: click.exceptions
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: echo
  kind: function
  ns: click.exceptions
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: format_filename
  kind: function
  ns: click.exceptions
  description: |-
    Format a filename as a string for display. Ensures the filename can be
    displayed by replacing any invalid bytes or surrogate escapes in the name
    with the replacement character ``�``.

    Invalid bytes or surrogate escapes will raise an error when written to a
    stream with ``errors="strict". This will typically happen with ``stdout``
    when the locale is something like ``en_GB.UTF-8``.

    Many scenarios *are* safe to write surrogates though, due to PEP 538 and
    PEP 540, including:

    -   Writing to ``stderr``, which uses ``errors="backslashreplace"``.
    -   The system has ``LANG=C.UTF-8``, ``C``, or ``POSIX``. Python opens
        stdout and stderr with ``errors="surrogateescape"``.
    -   None of ``LANG/LC_*`` are set. Python assumes ``LANG=C.UTF-8``.
    -   Python is started in UTF-8 mode  with  ``PYTHONUTF8=1`` or ``-X utf8``.
        Python opens stdout and stderr with ``errors="surrogateescape"``.

    :param filename: formats a filename for UI display.  This will also convert
                     the filename into unicode without failing.
    :param shorten: this optionally shortens the filename to strip of the
                    path that leads up to it.
  summary: Format a filename as a string for display
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: shorten
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_text_stderr
  kind: function
  ns: click.exceptions
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: ngettext
  kind: function
  ns: click.exceptions
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: msgid1
    default: null
    rest: false
  - kind: positional
    name: msgid2
    default: null
    rest: false
  - kind: positional
    name: n
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: click.formatting
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FORCED_WIDTH
  kind: const
  ns: click.formatting
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: contextmanager
  kind: function
  ns: click.formatting
  description: |-
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
  summary: '@contextmanager decorator'
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: iter_rows
  kind: function
  ns: click.formatting
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: rows
    default: null
    rest: false
  - kind: positional
    name: col_count
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: join_options
  kind: function
  ns: click.formatting
  description: |-
    Given a list of option strings this joins them in the most appropriate
    way and returns them in the form ``(formatted_string,
    any_prefix_is_slash)`` where the second item in the tuple is a flag that
    indicates if any of the option prefixes was a slash.
  summary: Given a list of option strings this joins them in the most appropriate
  signatures:
  - kind: positional
    name: options
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: measure_table
  kind: function
  ns: click.formatting
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: rows
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_opt
  kind: function
  ns: click.formatting
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: opt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: term_len
  kind: function
  ns: click.formatting
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: x
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: wrap_text
  kind: function
  ns: click.formatting
  description: |-
    A helper function that intelligently wraps text.  By default, it
    assumes that it operates on a single paragraph of text but if the
    `preserve_paragraphs` parameter is provided it will intelligently
    handle paragraphs (defined by two empty lines).

    If paragraphs are handled, a paragraph can be prefixed with an empty
    line containing the ``\b`` character (``\x08``) to indicate that
    no rewrapping should happen in that block.

    :param text: the text that should be rewrapped.
    :param width: the maximum width for the text.
    :param initial_indent: the initial indent that should be placed on the
                           first line as a string.
    :param subsequent_indent: the indent string that should be placed on
                              each consecutive line.
    :param preserve_paragraphs: if this flag is set then the wrapping will
                                intelligently handle paragraphs.
  summary: A helper function that intelligently wraps text
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: width
    default: '78'
    rest: false
  - kind: positional
    name: initial_indent
    default: null
    rest: false
  - kind: positional
    name: subsequent_indent
    default: null
    rest: false
  - kind: positional
    name: preserve_paragraphs
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: click.globals
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: get_current_context
  kind: function
  ns: click.globals
  description: |-
    Returns the current click context.  This can be used as a way to
    access the current context object from anywhere.  This is a more implicit
    alternative to the :func:`pass_context` decorator.  This function is
    primarily useful for helpers such as :func:`echo` which might be
    interested in changing its behavior based on the current context.

    To push the current context, :meth:`Context.scope` can be used.

    .. versionadded:: 5.0

    :param silent: if set to `True` the return value is `None` if no context
                   is available.  The default behavior is to raise a
                   :exc:`RuntimeError`.
  summary: Returns the current click context
  signatures:
  - kind: positional
    name: silent
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: pop_context
  kind: function
  ns: click.globals
  description: Removes the top level from the stack.
  summary: Removes the top level from the stack
  signatures:
  - type: '?'
  inherits_from: null
- name: push_context
  kind: function
  ns: click.globals
  description: Pushes a new context to the current stack.
  summary: Pushes a new context to the current stack
  signatures:
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: resolve_color_default
  kind: function
  ns: click.globals
  description: |-
    Internal helper to get the default value of the color flag.  If a
    value is passed it's returned unchanged, otherwise it's looked up from
    the current context.
  summary: Internal helper to get the default value of the color flag
  signatures:
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: click.parser
  kind: module
  ns: null
  description: |-
    This module started out as largely a copy paste from the stdlib's
    optparse module with the features removed that we do not need from
    optparse because we implement them in Click on a higher level (for
    instance type handling, help formatting and a lot more).

    The plan is to remove more and more from here over time.

    The reason this is a different module and not optparse from the stdlib
    is that there are differences in 2.x and 3.x about the error messages
    generated and optparse in the stdlib uses gettext for no good reason
    and might cause us issues.

    Click uses parts of optparse written by Gregory P. Ward and maintained
    by the Python Software Foundation. This is limited to code in parser.py.

    Copyright 2001-2006 Gregory P. Ward. All rights reserved.
    Copyright 2002-2006 Python Software Foundation. All rights reserved.
  summary: This module started out as largely a copy paste from the stdlib's
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: click.parser
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ngettext
  kind: function
  ns: click.parser
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: msgid1
    default: null
    rest: false
  - kind: positional
    name: msgid2
    default: null
    rest: false
  - kind: positional
    name: n
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: normalize_opt
  kind: function
  ns: click.parser
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: opt
    default: null
    rest: false
  - kind: positional
    name: ctx
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_arg_string
  kind: function
  ns: click.parser
  description: |-
    Split an argument string as with :func:`shlex.split`, but don't
    fail if the string is incomplete. Ignores a missing closing quote or
    incomplete escape sequence and uses the partial token as-is.

    .. code-block:: python

        split_arg_string("example 'my file")
        ["example", "my file"]

        split_arg_string("example my\")
        ["example", "my"]

    :param string: String to split.
  summary: Split an argument string as with :func:`shlex
  signatures:
  - kind: positional
    name: string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_opt
  kind: function
  ns: click.parser
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: opt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: click.shell_completion
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BashComplete
  kind: class
  ns: click.shell_completion
  description: Shell completion for Bash.
  summary: Shell completion for Bash
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cli
    default: null
    rest: false
  - kind: positional
    name: ctx_args
    default: null
    rest: false
  - kind: positional
    name: prog_name
    default: null
    rest: false
  - kind: positional
    name: complete_var
    default: null
    rest: false
  - type: BashComplete
  inherits_from:
  - <class 'click.shell_completion.ShellComplete'>
- name: BashComplete.complete
  kind: method
  ns: click.shell_completion
  description: |-
    Produce the completion data to send back to the shell.

    By default this calls :meth:`get_completion_args`, gets the
    completions, then calls :meth:`format_completion` for each
    completion.
  summary: Produce the completion data to send back to the shell
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BashComplete.format_completion
  kind: method
  ns: click.shell_completion
  description: |-
    Format a completion item into the form recognized by the
    shell script. This must be implemented by subclasses.

    :param item: Completion item to format.
  summary: Format a completion item into the form recognized by the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: item
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BashComplete.func_name
  kind: property
  ns: click.shell_completion
  description: |-
    The name of the shell function defined by the completion
    script.
  summary: The name of the shell function defined by the completion
  signatures: null
  inherits_from: null
- name: BashComplete.get_completion_args
  kind: method
  ns: click.shell_completion
  description: |-
    Use the env vars defined by the shell script to return a
    tuple of ``args, incomplete``. This must be implemented by
    subclasses.
  summary: Use the env vars defined by the shell script to return a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BashComplete.get_completions
  kind: method
  ns: click.shell_completion
  description: |-
    Determine the context and last complete command or parameter
    from the complete args. Call that object's ``shell_complete``
    method to get the completions for the incomplete value.

    :param args: List of complete args before the incomplete value.
    :param incomplete: Value being completed. May be empty.
  summary: Determine the context and last complete command or parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BashComplete.name
  kind: property
  ns: click.shell_completion
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BashComplete.source
  kind: method
  ns: click.shell_completion
  description: |-
    Produce the shell script that defines the completion
    function. By default this ``%``-style formats
    :attr:`source_template` with the dict returned by
    :meth:`source_vars`.
  summary: Produce the shell script that defines the completion
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: BashComplete.source_template
  kind: property
  ns: click.shell_completion
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: BashComplete.source_vars
  kind: method
  ns: click.shell_completion
  description: |-
    Vars for formatting :attr:`source_template`.

    By default this provides ``complete_func``, ``complete_var``,
    and ``prog_name``.
  summary: Vars for formatting :attr:`source_template`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CompletionItem
  kind: class
  ns: click.shell_completion
  description: |-
    Represents a completion value and metadata about the value. The
    default metadata is ``type`` to indicate special shell handling,
    and ``help`` if a shell supports showing a help string next to the
    value.

    Arbitrary parameters can be passed when creating the object, and
    accessed using ``item.attr``. If an attribute wasn't passed,
    accessing it returns ``None``.

    :param value: The completion suggestion.
    :param type: Tells the shell script to provide special completion
        support for the type. Click uses ``"dir"`` and ``"file"``.
    :param help: String shown next to the value if supported.
    :param kwargs: Arbitrary metadata. The built-in implementations
        don't use this, but custom type completions paired with custom
        shell support could use it.
  summary: Represents a completion value and metadata about the value
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: type
    default: plain
    rest: false
  - kind: positional
    name: help
    default: None
    rest: false
  - type: CompletionItem
  inherits_from: null
- name: CompletionItem.help
  kind: property
  ns: click.shell_completion
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CompletionItem.type
  kind: property
  ns: click.shell_completion
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CompletionItem.value
  kind: property
  ns: click.shell_completion
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: FishComplete
  kind: class
  ns: click.shell_completion
  description: Shell completion for Fish.
  summary: Shell completion for Fish
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cli
    default: null
    rest: false
  - kind: positional
    name: ctx_args
    default: null
    rest: false
  - kind: positional
    name: prog_name
    default: null
    rest: false
  - kind: positional
    name: complete_var
    default: null
    rest: false
  - type: FishComplete
  inherits_from:
  - <class 'click.shell_completion.ShellComplete'>
- name: FishComplete.complete
  kind: method
  ns: click.shell_completion
  description: |-
    Produce the completion data to send back to the shell.

    By default this calls :meth:`get_completion_args`, gets the
    completions, then calls :meth:`format_completion` for each
    completion.
  summary: Produce the completion data to send back to the shell
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FishComplete.format_completion
  kind: method
  ns: click.shell_completion
  description: |-
    Format a completion item into the form recognized by the
    shell script. This must be implemented by subclasses.

    :param item: Completion item to format.
  summary: Format a completion item into the form recognized by the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: item
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FishComplete.func_name
  kind: property
  ns: click.shell_completion
  description: |-
    The name of the shell function defined by the completion
    script.
  summary: The name of the shell function defined by the completion
  signatures: null
  inherits_from: null
- name: FishComplete.get_completion_args
  kind: method
  ns: click.shell_completion
  description: |-
    Use the env vars defined by the shell script to return a
    tuple of ``args, incomplete``. This must be implemented by
    subclasses.
  summary: Use the env vars defined by the shell script to return a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FishComplete.get_completions
  kind: method
  ns: click.shell_completion
  description: |-
    Determine the context and last complete command or parameter
    from the complete args. Call that object's ``shell_complete``
    method to get the completions for the incomplete value.

    :param args: List of complete args before the incomplete value.
    :param incomplete: Value being completed. May be empty.
  summary: Determine the context and last complete command or parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FishComplete.name
  kind: property
  ns: click.shell_completion
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: FishComplete.source
  kind: method
  ns: click.shell_completion
  description: |-
    Produce the shell script that defines the completion
    function. By default this ``%``-style formats
    :attr:`source_template` with the dict returned by
    :meth:`source_vars`.
  summary: Produce the shell script that defines the completion
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: FishComplete.source_template
  kind: property
  ns: click.shell_completion
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: FishComplete.source_vars
  kind: method
  ns: click.shell_completion
  description: |-
    Vars for formatting :attr:`source_template`.

    By default this provides ``complete_func``, ``complete_var``,
    and ``prog_name``.
  summary: Vars for formatting :attr:`source_template`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ShellComplete
  kind: class
  ns: click.shell_completion
  description: |-
    Base class for providing shell completion support. A subclass for
    a given shell will override attributes and methods to implement the
    completion instructions (``source`` and ``complete``).

    :param cli: Command being called.
    :param prog_name: Name of the executable in the shell.
    :param complete_var: Name of the environment variable that holds
        the completion instruction.

    .. versionadded:: 8.0
  summary: Base class for providing shell completion support
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cli
    default: null
    rest: false
  - kind: positional
    name: ctx_args
    default: null
    rest: false
  - kind: positional
    name: prog_name
    default: null
    rest: false
  - kind: positional
    name: complete_var
    default: null
    rest: false
  - type: ShellComplete
  inherits_from: null
- name: ShellComplete.complete
  kind: method
  ns: click.shell_completion
  description: |-
    Produce the completion data to send back to the shell.

    By default this calls :meth:`get_completion_args`, gets the
    completions, then calls :meth:`format_completion` for each
    completion.
  summary: Produce the completion data to send back to the shell
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ShellComplete.format_completion
  kind: method
  ns: click.shell_completion
  description: |-
    Format a completion item into the form recognized by the
    shell script. This must be implemented by subclasses.

    :param item: Completion item to format.
  summary: Format a completion item into the form recognized by the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: item
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ShellComplete.func_name
  kind: property
  ns: click.shell_completion
  description: |-
    The name of the shell function defined by the completion
    script.
  summary: The name of the shell function defined by the completion
  signatures: null
  inherits_from: null
- name: ShellComplete.get_completion_args
  kind: method
  ns: click.shell_completion
  description: |-
    Use the env vars defined by the shell script to return a
    tuple of ``args, incomplete``. This must be implemented by
    subclasses.
  summary: Use the env vars defined by the shell script to return a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ShellComplete.get_completions
  kind: method
  ns: click.shell_completion
  description: |-
    Determine the context and last complete command or parameter
    from the complete args. Call that object's ``shell_complete``
    method to get the completions for the incomplete value.

    :param args: List of complete args before the incomplete value.
    :param incomplete: Value being completed. May be empty.
  summary: Determine the context and last complete command or parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ShellComplete.source
  kind: method
  ns: click.shell_completion
  description: |-
    Produce the shell script that defines the completion
    function. By default this ``%``-style formats
    :attr:`source_template` with the dict returned by
    :meth:`source_vars`.
  summary: Produce the shell script that defines the completion
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ShellComplete.source_vars
  kind: method
  ns: click.shell_completion
  description: |-
    Vars for formatting :attr:`source_template`.

    By default this provides ``complete_func``, ``complete_var``,
    and ``prog_name``.
  summary: Vars for formatting :attr:`source_template`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ShellCompleteType
  kind: const
  ns: click.shell_completion
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: ZshComplete
  kind: class
  ns: click.shell_completion
  description: Shell completion for Zsh.
  summary: Shell completion for Zsh
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cli
    default: null
    rest: false
  - kind: positional
    name: ctx_args
    default: null
    rest: false
  - kind: positional
    name: prog_name
    default: null
    rest: false
  - kind: positional
    name: complete_var
    default: null
    rest: false
  - type: ZshComplete
  inherits_from:
  - <class 'click.shell_completion.ShellComplete'>
- name: ZshComplete.complete
  kind: method
  ns: click.shell_completion
  description: |-
    Produce the completion data to send back to the shell.

    By default this calls :meth:`get_completion_args`, gets the
    completions, then calls :meth:`format_completion` for each
    completion.
  summary: Produce the completion data to send back to the shell
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ZshComplete.format_completion
  kind: method
  ns: click.shell_completion
  description: |-
    Format a completion item into the form recognized by the
    shell script. This must be implemented by subclasses.

    :param item: Completion item to format.
  summary: Format a completion item into the form recognized by the
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: item
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ZshComplete.func_name
  kind: property
  ns: click.shell_completion
  description: |-
    The name of the shell function defined by the completion
    script.
  summary: The name of the shell function defined by the completion
  signatures: null
  inherits_from: null
- name: ZshComplete.get_completion_args
  kind: method
  ns: click.shell_completion
  description: |-
    Use the env vars defined by the shell script to return a
    tuple of ``args, incomplete``. This must be implemented by
    subclasses.
  summary: Use the env vars defined by the shell script to return a
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ZshComplete.get_completions
  kind: method
  ns: click.shell_completion
  description: |-
    Determine the context and last complete command or parameter
    from the complete args. Call that object's ``shell_complete``
    method to get the completions for the incomplete value.

    :param args: List of complete args before the incomplete value.
    :param incomplete: Value being completed. May be empty.
  summary: Determine the context and last complete command or parameter
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: args
    default: null
    rest: false
  - kind: positional
    name: incomplete
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ZshComplete.name
  kind: property
  ns: click.shell_completion
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ZshComplete.source
  kind: method
  ns: click.shell_completion
  description: |-
    Produce the shell script that defines the completion
    function. By default this ``%``-style formats
    :attr:`source_template` with the dict returned by
    :meth:`source_vars`.
  summary: Produce the shell script that defines the completion
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: ZshComplete.source_template
  kind: property
  ns: click.shell_completion
  description: |-
    str(object='') -> str
    str(bytes_or_buffer[, encoding[, errors]]) -> str

    Create a new string object from the given object. If encoding or
    errors is specified, then the object must expose a data buffer
    that will be decoded using the given encoding and error handler.
    Otherwise, returns the result of object.__str__() (if defined)
    or repr(object).
    encoding defaults to sys.getdefaultencoding().
    errors defaults to 'strict'.
  summary: str(object='') -> str
  signatures: null
  inherits_from: null
- name: ZshComplete.source_vars
  kind: method
  ns: click.shell_completion
  description: |-
    Vars for formatting :attr:`source_template`.

    By default this provides ``complete_func``, ``complete_var``,
    and ``prog_name``.
  summary: Vars for formatting :attr:`source_template`
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: add_completion_class
  kind: function
  ns: click.shell_completion
  description: |-
    Register a :class:`ShellComplete` subclass under the given name.
    The name will be provided by the completion instruction environment
    variable during completion.

    :param cls: The completion class that will handle completion for the
        shell.
    :param name: Name to register the class under. Defaults to the
        class's ``name`` attribute.
  summary: Register a :class:`ShellComplete` subclass under the given name
  signatures:
  - kind: positional
    name: cls
    default: null
    rest: false
  - kind: positional
    name: name
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: echo
  kind: function
  ns: click.shell_completion
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: get_completion_class
  kind: function
  ns: click.shell_completion
  description: |-
    Look up a registered :class:`ShellComplete` subclass by the name
    provided by the completion instruction environment variable. If the
    name isn't registered, returns ``None``.

    :param shell: Name the class is registered under.
  summary: Look up a registered :class:`ShellComplete` subclass by the name
  signatures:
  - kind: positional
    name: shell
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: shell_complete
  kind: function
  ns: click.shell_completion
  description: |-
    Perform shell completion for the given CLI program.

    :param cli: Command being called.
    :param ctx_args: Extra arguments to pass to
        ``cli.make_context``.
    :param prog_name: Name of the executable in the shell.
    :param complete_var: Name of the environment variable that holds
        the completion instruction.
    :param instruction: Value of ``complete_var`` with the completion
        instruction and shell, in the form ``instruction_shell``.
    :return: Status code to exit with.
  summary: Perform shell completion for the given CLI program
  signatures:
  - kind: positional
    name: cli
    default: null
    rest: false
  - kind: positional
    name: ctx_args
    default: null
    rest: false
  - kind: positional
    name: prog_name
    default: null
    rest: false
  - kind: positional
    name: complete_var
    default: null
    rest: false
  - kind: positional
    name: instruction
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: split_arg_string
  kind: function
  ns: click.shell_completion
  description: |-
    Split an argument string as with :func:`shlex.split`, but don't
    fail if the string is incomplete. Ignores a missing closing quote or
    incomplete escape sequence and uses the partial token as-is.

    .. code-block:: python

        split_arg_string("example 'my file")
        ["example", "my file"]

        split_arg_string("example my\")
        ["example", "my"]

    :param string: String to split.
  summary: Split an argument string as with :func:`shlex
  signatures:
  - kind: positional
    name: string
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: click.termui
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: V
  kind: const
  ns: click.termui
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: clear
  kind: function
  ns: click.termui
  description: |-
    Clears the terminal screen.  This will have the effect of clearing
    the whole visible space of the terminal and moving the cursor to the
    top left.  This does not do anything if not connected to a terminal.

    .. versionadded:: 2.0
  summary: Clears the terminal screen
  signatures:
  - type: '?'
  inherits_from: null
- name: confirm
  kind: function
  ns: click.termui
  description: |-
    Prompts for confirmation (yes/no question).

    If the user aborts the input by sending a interrupt signal this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the question to ask.
    :param default: The default value to use when no input is given. If
        ``None``, repeat until input is given.
    :param abort: if this is set to `True` a negative answer aborts the
                  exception by raising :exc:`Abort`.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.

    .. versionchanged:: 8.0
        Repeat until input is given if ``default`` is ``None``.

    .. versionadded:: 4.0
        Added the ``err`` parameter.
  summary: Prompts for confirmation (yes/no question)
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: 'False'
    rest: false
  - kind: positional
    name: abort
    default: 'False'
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: convert_type
  kind: function
  ns: click.termui
  description: |-
    Find the most appropriate :class:`ParamType` for the given Python
    type. If the type isn't provided, it can be inferred from a default
    value.
  summary: Find the most appropriate :class:`ParamType` for the given Python
  signatures:
  - kind: positional
    name: ty
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: echo
  kind: function
  ns: click.termui
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: echo_via_pager
  kind: function
  ns: click.termui
  description: |-
    This function takes a text and shows it via an environment specific
    pager on stdout.

    .. versionchanged:: 3.0
       Added the `color` flag.

    :param text_or_generator: the text to page, or alternatively, a
                              generator emitting the text to page.
    :param color: controls if the pager supports ANSI colors or not.  The
                  default is autodetection.
  summary: This function takes a text and shows it via an environment specific
  signatures:
  - kind: positional
    name: text_or_generator
    default: null
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: edit
  kind: function
  ns: click.termui
  description: |-
    Edits the given text in the defined editor.  If an editor is given
    (should be the full path to the executable but the regular operating
    system search path is used for finding the executable) it overrides
    the detected editor.  Optionally, some environment variables can be
    used.  If the editor is closed without changes, `None` is returned.  In
    case a file is edited directly the return value is always `None` and
    `require_save` and `extension` are ignored.

    If the editor cannot be opened a :exc:`UsageError` is raised.

    Note for Windows: to simplify cross-platform usage, the newlines are
    automatically converted from POSIX to Windows and vice versa.  As such,
    the message here will have ``\n`` as newline markers.

    :param text: the text to edit.
    :param editor: optionally the editor to use.  Defaults to automatic
                   detection.
    :param env: environment variables to forward to the editor.
    :param require_save: if this is true, then not saving in the editor
                         will make the return value become `None`.
    :param extension: the extension to tell the editor about.  This defaults
                      to `.txt` but changing this might change syntax
                      highlighting.
    :param filename: if provided it will edit this file instead of the
                     provided text contents.  It will not use a temporary
                     file as an indirection in that case.
  summary: Edits the given text in the defined editor
  signatures:
  - kind: positional
    name: text
    default: None
    rest: false
  - kind: positional
    name: editor
    default: None
    rest: false
  - kind: positional
    name: env
    default: None
    rest: false
  - kind: positional
    name: require_save
    default: 'True'
    rest: false
  - kind: positional
    name: extension
    default: .txt
    rest: false
  - kind: positional
    name: filename
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: getchar
  kind: function
  ns: click.termui
  description: |-
    Fetches a single character from the terminal and returns it.  This
    will always return a unicode character and under certain rare
    circumstances this might return more than one character.  The
    situations which more than one character is returned is when for
    whatever reason multiple characters end up in the terminal buffer or
    standard input was not actually a terminal.

    Note that this will always read from the terminal, even if something
    is piped into the standard input.

    Note for Windows: in rare cases when typing non-ASCII characters, this
    function might wait for a second character and then return both at once.
    This is because certain Unicode characters look like special-key markers.

    .. versionadded:: 2.0

    :param echo: if set to `True`, the character read will also show up on
                 the terminal.  The default is to not show it.
  summary: Fetches a single character from the terminal and returns it
  signatures:
  - kind: positional
    name: echo
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: hidden_prompt_func
  kind: function
  ns: click.termui
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: prompt
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: isatty
  kind: function
  ns: click.termui
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: stream
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: launch
  kind: function
  ns: click.termui
  description: |-
    This function launches the given URL (or filename) in the default
    viewer application for this file type.  If this is an executable, it
    might launch the executable in a new session.  The return value is
    the exit code of the launched application.  Usually, ``0`` indicates
    success.

    Examples::

        click.launch('https://click.palletsprojects.com/')
        click.launch('/my/downloaded/file', locate=True)

    .. versionadded:: 2.0

    :param url: URL or filename of the thing to launch.
    :param wait: Wait for the program to exit before returning. This
        only works if the launched program blocks. In particular,
        ``xdg-open`` on Linux does not block.
    :param locate: if this is set to `True` then instead of launching the
                   application associated with the URL it will attempt to
                   launch a file manager with the file located.  This
                   might have weird effects if the URL does not point to
                   the filesystem.
  summary: This function launches the given URL (or filename) in the default
  signatures:
  - kind: positional
    name: url
    default: null
    rest: false
  - kind: positional
    name: wait
    default: 'False'
    rest: false
  - kind: positional
    name: locate
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: pause
  kind: function
  ns: click.termui
  description: |-
    This command stops execution and waits for the user to press any
    key to continue.  This is similar to the Windows batch "pause"
    command.  If the program is not run through a terminal, this command
    will instead do nothing.

    .. versionadded:: 2.0

    .. versionadded:: 4.0
       Added the `err` parameter.

    :param info: The message to print before pausing. Defaults to
        ``"Press any key to continue..."``.
    :param err: if set to message goes to ``stderr`` instead of
                ``stdout``, the same as with echo.
  summary: This command stops execution and waits for the user to press any
  signatures:
  - kind: positional
    name: info
    default: None
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: progressbar
  kind: function
  ns: click.termui
  description: |-
    This function creates an iterable context manager that can be used
    to iterate over something while showing a progress bar.  It will
    either iterate over the `iterable` or `length` items (that are counted
    up).  While iteration happens, this function will print a rendered
    progress bar to the given `file` (defaults to stdout) and will attempt
    to calculate remaining time and more.  By default, this progress bar
    will not be rendered if the file is not a terminal.

    The context manager creates the progress bar.  When the context
    manager is entered the progress bar is already created.  With every
    iteration over the progress bar, the iterable passed to the bar is
    advanced and the bar is updated.  When the context manager exits,
    a newline is printed and the progress bar is finalized on screen.

    Note: The progress bar is currently designed for use cases where the
    total progress can be expected to take at least several seconds.
    Because of this, the ProgressBar class object won't display
    progress that is considered too fast, and progress where the time
    between steps is less than a second.

    No printing must happen or the progress bar will be unintentionally
    destroyed.

    Example usage::

        with progressbar(items) as bar:
            for item in bar:
                do_something_with(item)

    Alternatively, if no iterable is specified, one can manually update the
    progress bar through the `update()` method instead of directly
    iterating over the progress bar.  The update method accepts the number
    of steps to increment the bar with::

        with progressbar(length=chunks.total_bytes) as bar:
            for chunk in chunks:
                process_chunk(chunk)
                bar.update(chunks.bytes)

    The ``update()`` method also takes an optional value specifying the
    ``current_item`` at the new position. This is useful when used
    together with ``item_show_func`` to customize the output for each
    manual step::

        with click.progressbar(
            length=total_size,
            label='Unzipping archive',
            item_show_func=lambda a: a.filename
        ) as bar:
            for archive in zip_file:
                archive.extract()
                bar.update(archive.size, archive)

    :param iterable: an iterable to iterate over.  If not provided the length
                     is required.
    :param length: the number of items to iterate over.  By default the
                   progressbar will attempt to ask the iterator about its
                   length, which might or might not work.  If an iterable is
                   also provided this parameter can be used to override the
                   length.  If an iterable is not provided the progress bar
                   will iterate over a range of that length.
    :param label: the label to show next to the progress bar.
    :param show_eta: enables or disables the estimated time display.  This is
                     automatically disabled if the length cannot be
                     determined.
    :param show_percent: enables or disables the percentage display.  The
                         default is `True` if the iterable has a length or
                         `False` if not.
    :param show_pos: enables or disables the absolute position display.  The
                     default is `False`.
    :param item_show_func: A function called with the current item which
        can return a string to show next to the progress bar. If the
        function returns ``None`` nothing is shown. The current item can
        be ``None``, such as when entering and exiting the bar.
    :param fill_char: the character to use to show the filled part of the
                      progress bar.
    :param empty_char: the character to use to show the non-filled part of
                       the progress bar.
    :param bar_template: the format string to use as template for the bar.
                         The parameters in it are ``label`` for the label,
                         ``bar`` for the progress bar and ``info`` for the
                         info section.
    :param info_sep: the separator between multiple info items (eta etc.)
    :param width: the width of the progress bar in characters, 0 means full
                  terminal width
    :param file: The file to write to. If this is not a terminal then
        only the label is printed.
    :param color: controls if the terminal supports ANSI colors or not.  The
                  default is autodetection.  This is only needed if ANSI
                  codes are included anywhere in the progress bar output
                  which is not the case by default.
    :param update_min_steps: Render only when this many updates have
        completed. This allows tuning for very fast iterators.

    .. versionchanged:: 8.0
        Output is shown even if execution time is less than 0.5 seconds.

    .. versionchanged:: 8.0
        ``item_show_func`` shows the current item, not the previous one.

    .. versionchanged:: 8.0
        Labels are echoed if the output is not a TTY. Reverts a change
        in 7.0 that removed all output.

    .. versionadded:: 8.0
       Added the ``update_min_steps`` parameter.

    .. versionchanged:: 4.0
        Added the ``color`` parameter. Added the ``update`` method to
        the object.

    .. versionadded:: 2.0
  summary: This function creates an iterable context manager that can be used
  signatures:
  - kind: positional
    name: iterable
    default: None
    rest: false
  - kind: positional
    name: length
    default: None
    rest: false
  - kind: positional
    name: label
    default: None
    rest: false
  - kind: positional
    name: show_eta
    default: 'True'
    rest: false
  - kind: positional
    name: show_percent
    default: None
    rest: false
  - kind: positional
    name: show_pos
    default: 'False'
    rest: false
  - kind: positional
    name: item_show_func
    default: None
    rest: false
  - kind: positional
    name: fill_char
    default: '#'
    rest: false
  - kind: positional
    name: empty_char
    default: '-'
    rest: false
  - kind: positional
    name: bar_template
    default: '%(label)s  [%(bar)s]  %(info)s'
    rest: false
  - kind: positional
    name: info_sep
    default: '  '
    rest: false
  - kind: positional
    name: width
    default: '36'
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - kind: positional
    name: update_min_steps
    default: '1'
    rest: false
  - type: '?'
  inherits_from: null
- name: prompt
  kind: function
  ns: click.termui
  description: |-
    Prompts a user for input.  This is a convenience function that can
    be used to prompt a user for input later.

    If the user aborts the input by sending an interrupt signal, this
    function will catch it and raise a :exc:`Abort` exception.

    :param text: the text to show for the prompt.
    :param default: the default value to use if no input happens.  If this
                    is not given it will prompt until it's aborted.
    :param hide_input: if this is set to true then the input value will
                       be hidden.
    :param confirmation_prompt: Prompt a second time to confirm the
        value. Can be set to a string instead of ``True`` to customize
        the message.
    :param type: the type to use to check the value against.
    :param value_proc: if this parameter is provided it's a function that
                       is invoked instead of the type conversion to
                       convert a value.
    :param prompt_suffix: a suffix that should be added to the prompt.
    :param show_default: shows or hides the default value in the prompt.
    :param err: if set to true the file defaults to ``stderr`` instead of
                ``stdout``, the same as with echo.
    :param show_choices: Show or hide choices if the passed type is a Choice.
                         For example if type is a Choice of either day or week,
                         show_choices is true and text is "Group by" then the
                         prompt will be "Group by (day, week): ".

    .. versionadded:: 8.0
        ``confirmation_prompt`` can be a custom string.

    .. versionadded:: 7.0
        Added the ``show_choices`` parameter.

    .. versionadded:: 6.0
        Added unicode support for cmd.exe on Windows.

    .. versionadded:: 4.0
        Added the `err` parameter.
  summary: Prompts a user for input
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - kind: positional
    name: hide_input
    default: 'False'
    rest: false
  - kind: positional
    name: confirmation_prompt
    default: 'False'
    rest: false
  - kind: positional
    name: type
    default: None
    rest: false
  - kind: positional
    name: value_proc
    default: None
    rest: false
  - kind: positional
    name: prompt_suffix
    default: ': '
    rest: false
  - kind: positional
    name: show_default
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: show_choices
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: raw_terminal
  kind: function
  ns: click.termui
  description: null
  summary: ''
  signatures:
  - type: '?'
  inherits_from: null
- name: resolve_color_default
  kind: function
  ns: click.termui
  description: |-
    Internal helper to get the default value of the color flag.  If a
    value is passed it's returned unchanged, otherwise it's looked up from
    the current context.
  summary: Internal helper to get the default value of the color flag
  signatures:
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: secho
  kind: function
  ns: click.termui
  description: |-
    This function combines :func:`echo` and :func:`style` into one
    call.  As such the following two calls are the same::

        click.secho('Hello World!', fg='green')
        click.echo(click.style('Hello World!', fg='green'))

    All keyword arguments are forwarded to the underlying functions
    depending on which one they go with.

    Non-string types will be converted to :class:`str`. However,
    :class:`bytes` are passed directly to :meth:`echo` without applying
    style. If you want to style bytes that represent text, call
    :meth:`bytes.decode` first.

    .. versionchanged:: 8.0
        A non-string ``message`` is converted to a string. Bytes are
        passed through without style applied.

    .. versionadded:: 2.0
  summary: This function combines :func:`echo` and :func:`style` into one
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: strip_ansi
  kind: function
  ns: click.termui
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: style
  kind: function
  ns: click.termui
  description: |-
    Styles a text with ANSI styles and returns the new string.  By
    default the styling is self contained which means that at the end
    of the string a reset code is issued.  This can be prevented by
    passing ``reset=False``.

    Examples::

        click.echo(click.style('Hello World!', fg='green'))
        click.echo(click.style('ATTENTION!', blink=True))
        click.echo(click.style('Some things', reverse=True, fg='cyan'))
        click.echo(click.style('More colors', fg=(255, 12, 128), bg=117))

    Supported color names:

    * ``black`` (might be a gray)
    * ``red``
    * ``green``
    * ``yellow`` (might be an orange)
    * ``blue``
    * ``magenta``
    * ``cyan``
    * ``white`` (might be light gray)
    * ``bright_black``
    * ``bright_red``
    * ``bright_green``
    * ``bright_yellow``
    * ``bright_blue``
    * ``bright_magenta``
    * ``bright_cyan``
    * ``bright_white``
    * ``reset`` (reset the color code only)

    If the terminal supports it, color may also be specified as:

    -   An integer in the interval [0, 255]. The terminal must support
        8-bit/256-color mode.
    -   An RGB tuple of three integers in [0, 255]. The terminal must
        support 24-bit/true-color mode.

    See https://en.wikipedia.org/wiki/ANSI_color and
    https://gist.github.com/XVilka/8346728 for more information.

    :param text: the string to style with ansi codes.
    :param fg: if provided this will become the foreground color.
    :param bg: if provided this will become the background color.
    :param bold: if provided this will enable or disable bold mode.
    :param dim: if provided this will enable or disable dim mode.  This is
                badly supported.
    :param underline: if provided this will enable or disable underline.
    :param overline: if provided this will enable or disable overline.
    :param italic: if provided this will enable or disable italic.
    :param blink: if provided this will enable or disable blinking.
    :param reverse: if provided this will enable or disable inverse
                    rendering (foreground becomes background and the
                    other way round).
    :param strikethrough: if provided this will enable or disable
        striking through text.
    :param reset: by default a reset-all code is added at the end of the
                  string which means that styles do not carry over.  This
                  can be disabled to compose styles.

    .. versionchanged:: 8.0
        A non-string ``message`` is converted to a string.

    .. versionchanged:: 8.0
       Added support for 256 and RGB color codes.

    .. versionchanged:: 8.0
        Added the ``strikethrough``, ``italic``, and ``overline``
        parameters.

    .. versionchanged:: 7.0
        Added support for bright colors.

    .. versionadded:: 2.0
  summary: Styles a text with ANSI styles and returns the new string
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - kind: positional
    name: fg
    default: None
    rest: false
  - kind: positional
    name: bg
    default: None
    rest: false
  - kind: positional
    name: bold
    default: None
    rest: false
  - kind: positional
    name: dim
    default: None
    rest: false
  - kind: positional
    name: underline
    default: None
    rest: false
  - kind: positional
    name: overline
    default: None
    rest: false
  - kind: positional
    name: italic
    default: None
    rest: false
  - kind: positional
    name: blink
    default: None
    rest: false
  - kind: positional
    name: reverse
    default: None
    rest: false
  - kind: positional
    name: strikethrough
    default: None
    rest: false
  - kind: positional
    name: reset
    default: 'True'
    rest: false
  - type: '?'
  inherits_from: null
- name: unstyle
  kind: function
  ns: click.termui
  description: |-
    Removes ANSI styling information from a string.  Usually it's not
    necessary to use this function as Click's echo function will
    automatically remove styling if necessary.

    .. versionadded:: 2.0

    :param text: the text to remove style information from.
  summary: Removes ANSI styling information from a string
  signatures:
  - kind: positional
    name: text
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: click.testing
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: CliRunner
  kind: class
  ns: click.testing
  description: |-
    The CLI runner provides functionality to invoke a Click command line
    script for unittesting purposes in a isolated environment.  This only
    works in single-threaded systems without any concurrency as it changes the
    global interpreter state.

    :param charset: the character set for the input and output data.
    :param env: a dictionary with environment variables for overriding.
    :param echo_stdin: if this is set to `True`, then reading from stdin writes
                       to stdout.  This is useful for showing examples in
                       some circumstances.  Note that regular prompts
                       will automatically echo the input.
    :param mix_stderr: if this is set to `False`, then stdout and stderr are
                       preserved as independent streams.  This is useful for
                       Unix-philosophy apps that have predictable stdout and
                       noisy stderr, such that each may be measured
                       independently
  summary: The CLI runner provides functionality to invoke a Click command line
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: charset
    default: utf-8
    rest: false
  - kind: positional
    name: env
    default: None
    rest: false
  - kind: positional
    name: echo_stdin
    default: 'False'
    rest: false
  - kind: positional
    name: mix_stderr
    default: 'True'
    rest: false
  - type: CliRunner
  inherits_from: null
- name: CliRunner.get_default_prog_name
  kind: method
  ns: click.testing
  description: |-
    Given a command object it will return the default program name
    for it.  The default is the `name` attribute or ``"root"`` if not
    set.
  summary: Given a command object it will return the default program name
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cli
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: CliRunner.invoke
  kind: method
  ns: click.testing
  description: |-
    Invokes a command in an isolated environment.  The arguments are
    forwarded directly to the command line script, the `extra` keyword
    arguments are passed to the :meth:`~clickpkg.Command.main` function of
    the command.

    This returns a :class:`Result` object.

    :param cli: the command to invoke
    :param args: the arguments to invoke. It may be given as an iterable
                 or a string. When given as string it will be interpreted
                 as a Unix shell command. More details at
                 :func:`shlex.split`.
    :param input: the input data for `sys.stdin`.
    :param env: the environment overrides.
    :param catch_exceptions: Whether to catch any other exceptions than
                             ``SystemExit``.
    :param extra: the keyword arguments to pass to :meth:`main`.
    :param color: whether the output should contain color codes. The
                  application can still override this explicitly.

    .. versionchanged:: 8.0
        The result object has the ``return_value`` attribute with
        the value returned from the invoked command.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionchanged:: 3.0
        Added the ``catch_exceptions`` parameter.

    .. versionchanged:: 3.0
        The result object has the ``exc_info`` attribute with the
        traceback if available.
  summary: Invokes a command in an isolated environment
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: cli
    default: null
    rest: false
  - kind: positional
    name: args
    default: None
    rest: false
  - kind: positional
    name: input
    default: None
    rest: false
  - kind: positional
    name: env
    default: None
    rest: false
  - kind: positional
    name: catch_exceptions
    default: 'True'
    rest: false
  - kind: positional
    name: color
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: CliRunner.isolated_filesystem
  kind: method
  ns: click.testing
  description: |-
    A context manager that creates a temporary directory and
    changes the current working directory to it. This isolates tests
    that affect the contents of the CWD to prevent them from
    interfering with each other.

    :param temp_dir: Create the temporary directory under this
        directory. If given, the created directory is not removed
        when exiting.

    .. versionchanged:: 8.0
        Added the ``temp_dir`` parameter.
  summary: A context manager that creates a temporary directory and
  signatures:
  - type: '?'
  inherits_from: null
- name: CliRunner.isolation
  kind: method
  ns: click.testing
  description: |-
    A context manager that sets up the isolation for invoking of a
    command line tool.  This sets up stdin with the given input data
    and `os.environ` with the overrides from the given dictionary.
    This also rebinds some internals in Click to be mocked (like the
    prompt functionality).

    This is automatically done in the :meth:`invoke` method.

    :param input: the input stream to put into sys.stdin.
    :param env: the environment overrides as dictionary.
    :param color: whether the output should contain color codes. The
                  application can still override this explicitly.

    .. versionchanged:: 8.0
        ``stderr`` is opened with ``errors="backslashreplace"``
        instead of the default ``"strict"``.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.
  summary: A context manager that sets up the isolation for invoking of a
  signatures:
  - type: '?'
  inherits_from: null
- name: CliRunner.make_env
  kind: method
  ns: click.testing
  description: Returns the environment overrides for invoking a script.
  summary: Returns the environment overrides for invoking a script
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: overrides
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: EchoingStdin
  kind: class
  ns: click.testing
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: input
    default: null
    rest: false
  - kind: positional
    name: output
    default: null
    rest: false
  - type: EchoingStdin
  inherits_from: null
- name: EchoingStdin.read
  kind: method
  ns: click.testing
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: EchoingStdin.read1
  kind: method
  ns: click.testing
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: EchoingStdin.readline
  kind: method
  ns: click.testing
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: n
    default: '-1'
    rest: false
  - type: '?'
  inherits_from: null
- name: EchoingStdin.readlines
  kind: method
  ns: click.testing
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: Result
  kind: class
  ns: click.testing
  description: Holds the captured result of an invoked CLI script.
  summary: Holds the captured result of an invoked CLI script
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: runner
    default: null
    rest: false
  - kind: positional
    name: stdout_bytes
    default: null
    rest: false
  - kind: positional
    name: stderr_bytes
    default: null
    rest: false
  - kind: positional
    name: return_value
    default: null
    rest: false
  - kind: positional
    name: exit_code
    default: null
    rest: false
  - kind: positional
    name: exception
    default: null
    rest: false
  - kind: positional
    name: exc_info
    default: None
    rest: false
  - type: Result
  inherits_from: null
- name: Result.output
  kind: property
  ns: click.testing
  description: The (standard) output as unicode string.
  summary: The (standard) output as unicode string
  signatures: null
  inherits_from: null
- name: Result.stderr
  kind: property
  ns: click.testing
  description: The standard error as unicode string.
  summary: The standard error as unicode string
  signatures: null
  inherits_from: null
- name: Result.stdout
  kind: property
  ns: click.testing
  description: The standard output as unicode string.
  summary: The standard output as unicode string
  signatures: null
  inherits_from: null
- name: make_input_stream
  kind: function
  ns: click.testing
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: input
    default: null
    rest: false
  - kind: positional
    name: charset
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: click.types
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: BOOL
  kind: callable
  ns: click.types
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: FLOAT
  kind: callable
  ns: click.types
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: INT
  kind: callable
  ns: click.types
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: STRING
  kind: callable
  ns: click.types
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UNPROCESSED
  kind: callable
  ns: click.types
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: UUID
  kind: callable
  ns: click.types
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: self
    default: null
    rest: false
  - kind: positional
    name: value
    default: null
    rest: false
  - kind: positional
    name: param
    default: None
    rest: false
  - kind: positional
    name: ctx
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: convert_type
  kind: function
  ns: click.types
  description: |-
    Find the most appropriate :class:`ParamType` for the given Python
    type. If the type isn't provided, it can be inferred from a default
    value.
  summary: Find the most appropriate :class:`ParamType` for the given Python
  signatures:
  - kind: positional
    name: ty
    default: null
    rest: false
  - kind: positional
    name: default
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: format_filename
  kind: function
  ns: click.types
  description: |-
    Format a filename as a string for display. Ensures the filename can be
    displayed by replacing any invalid bytes or surrogate escapes in the name
    with the replacement character ``�``.

    Invalid bytes or surrogate escapes will raise an error when written to a
    stream with ``errors="strict". This will typically happen with ``stdout``
    when the locale is something like ``en_GB.UTF-8``.

    Many scenarios *are* safe to write surrogates though, due to PEP 538 and
    PEP 540, including:

    -   Writing to ``stderr``, which uses ``errors="backslashreplace"``.
    -   The system has ``LANG=C.UTF-8``, ``C``, or ``POSIX``. Python opens
        stdout and stderr with ``errors="surrogateescape"``.
    -   None of ``LANG/LC_*`` are set. Python assumes ``LANG=C.UTF-8``.
    -   Python is started in UTF-8 mode  with  ``PYTHONUTF8=1`` or ``-X utf8``.
        Python opens stdout and stderr with ``errors="surrogateescape"``.

    :param filename: formats a filename for UI display.  This will also convert
                     the filename into unicode without failing.
    :param shorten: this optionally shortens the filename to strip of the
                    path that leads up to it.
  summary: Format a filename as a string for display
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: shorten
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: ngettext
  kind: function
  ns: click.types
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: msgid1
    default: null
    rest: false
  - kind: positional
    name: msgid2
    default: null
    rest: false
  - kind: positional
    name: n
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: open_stream
  kind: function
  ns: click.types
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - kind: positional
    name: atomic
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: safecall
  kind: function
  ns: click.types
  description: Wraps a function so that it swallows exceptions.
  summary: Wraps a function so that it swallows exceptions
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: click.utils
  kind: module
  ns: null
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: R
  kind: const
  ns: click.utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: WIN
  kind: const
  ns: click.utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: auto_wrap_for_ansi
  kind: const
  ns: click.utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: binary_streams
  kind: const
  ns: click.utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: echo
  kind: function
  ns: click.utils
  description: |-
    Print a message and newline to stdout or a file. This should be
    used instead of :func:`print` because it provides better support
    for different data, files, and environments.

    Compared to :func:`print`, this does the following:

    -   Ensures that the output encoding is not misconfigured on Linux.
    -   Supports Unicode in the Windows console.
    -   Supports writing to binary outputs, and supports writing bytes
        to text outputs.
    -   Supports colors and styles on Windows.
    -   Removes ANSI color and style codes if the output does not look
        like an interactive terminal.
    -   Always flushes the output.

    :param message: The string or bytes to output. Other objects are
        converted to strings.
    :param file: The file to write to. Defaults to ``stdout``.
    :param err: Write to ``stderr`` instead of ``stdout``.
    :param nl: Print a newline after the message. Enabled by default.
    :param color: Force showing or hiding colors and other styles. By
        default Click will remove color if the output does not look like
        an interactive terminal.

    .. versionchanged:: 6.0
        Support Unicode output on the Windows console. Click does not
        modify ``sys.stdout``, so ``sys.stdout.write()`` and ``print()``
        will still not support Unicode.

    .. versionchanged:: 4.0
        Added the ``color`` parameter.

    .. versionadded:: 3.0
        Added the ``err`` parameter.

    .. versionchanged:: 2.0
        Support colors on Windows if colorama is installed.
  summary: Print a message and newline to stdout or a file
  signatures:
  - kind: positional
    name: message
    default: None
    rest: false
  - kind: positional
    name: file
    default: None
    rest: false
  - kind: positional
    name: nl
    default: 'True'
    rest: false
  - kind: positional
    name: err
    default: 'False'
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: format_filename
  kind: function
  ns: click.utils
  description: |-
    Format a filename as a string for display. Ensures the filename can be
    displayed by replacing any invalid bytes or surrogate escapes in the name
    with the replacement character ``�``.

    Invalid bytes or surrogate escapes will raise an error when written to a
    stream with ``errors="strict". This will typically happen with ``stdout``
    when the locale is something like ``en_GB.UTF-8``.

    Many scenarios *are* safe to write surrogates though, due to PEP 538 and
    PEP 540, including:

    -   Writing to ``stderr``, which uses ``errors="backslashreplace"``.
    -   The system has ``LANG=C.UTF-8``, ``C``, or ``POSIX``. Python opens
        stdout and stderr with ``errors="surrogateescape"``.
    -   None of ``LANG/LC_*`` are set. Python assumes ``LANG=C.UTF-8``.
    -   Python is started in UTF-8 mode  with  ``PYTHONUTF8=1`` or ``-X utf8``.
        Python opens stdout and stderr with ``errors="surrogateescape"``.

    :param filename: formats a filename for UI display.  This will also convert
                     the filename into unicode without failing.
    :param shorten: this optionally shortens the filename to strip of the
                    path that leads up to it.
  summary: Format a filename as a string for display
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: shorten
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_app_dir
  kind: function
  ns: click.utils
  description: |-
    Returns the config folder for the application.  The default behavior
    is to return whatever is most appropriate for the operating system.

    To give you an idea, for an app called ``"Foo Bar"``, something like
    the following folders could be returned:

    Mac OS X:
      ``~/Library/Application Support/Foo Bar``
    Mac OS X (POSIX):
      ``~/.foo-bar``
    Unix:
      ``~/.config/foo-bar``
    Unix (POSIX):
      ``~/.foo-bar``
    Windows (roaming):
      ``C:\Users\<user>\AppData\Roaming\Foo Bar``
    Windows (not roaming):
      ``C:\Users\<user>\AppData\Local\Foo Bar``

    .. versionadded:: 2.0

    :param app_name: the application name.  This should be properly capitalized
                     and can contain whitespace.
    :param roaming: controls if the folder should be roaming or not on Windows.
                    Has no effect otherwise.
    :param force_posix: if this is set to `True` then on any POSIX system the
                        folder will be stored in the home folder with a leading
                        dot instead of the XDG config home or darwin's
                        application support folder.
  summary: Returns the config folder for the application
  signatures:
  - kind: positional
    name: app_name
    default: null
    rest: false
  - kind: positional
    name: roaming
    default: 'True'
    rest: false
  - kind: positional
    name: force_posix
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: get_binary_stream
  kind: function
  ns: click.utils
  description: |-
    Returns a system stream for byte processing.

    :param name: the name of the stream to open.  Valid names are ``'stdin'``,
                 ``'stdout'`` and ``'stderr'``
  summary: Returns a system stream for byte processing
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: get_text_stream
  kind: function
  ns: click.utils
  description: |-
    Returns a system stream for text processing.  This usually returns
    a wrapped stream around a binary stream returned from
    :func:`get_binary_stream` but it also can take shortcuts for already
    correctly configured streams.

    :param name: the name of the stream to open.  Valid names are ``'stdin'``,
                 ``'stdout'`` and ``'stderr'``
    :param encoding: overrides the detected default encoding.
    :param errors: overrides the default error mode.
  summary: Returns a system stream for text processing
  signatures:
  - kind: positional
    name: name
    default: null
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - type: '?'
  inherits_from: null
- name: make_default_short_help
  kind: function
  ns: click.utils
  description: Returns a condensed version of help string.
  summary: Returns a condensed version of help string
  signatures:
  - kind: positional
    name: help
    default: null
    rest: false
  - kind: positional
    name: max_length
    default: '45'
    rest: false
  - type: '?'
  inherits_from: null
- name: make_str
  kind: function
  ns: click.utils
  description: Converts a value into a valid string.
  summary: Converts a value into a valid string
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: open_file
  kind: function
  ns: click.utils
  description: |-
    Open a file, with extra behavior to handle ``'-'`` to indicate
    a standard stream, lazy open on write, and atomic write. Similar to
    the behavior of the :class:`~click.File` param type.

    If ``'-'`` is given to open ``stdout`` or ``stdin``, the stream is
    wrapped so that using it in a context manager will not close it.
    This makes it possible to use the function without accidentally
    closing a standard stream:

    .. code-block:: python

        with open_file(filename) as f:
            ...

    :param filename: The name of the file to open, or ``'-'`` for
        ``stdin``/``stdout``.
    :param mode: The mode in which to open the file.
    :param encoding: The encoding to decode or encode a file opened in
        text mode.
    :param errors: The error handling mode.
    :param lazy: Wait to open the file until it is accessed. For read
        mode, the file is temporarily opened to raise access errors
        early, then closed until it is read again.
    :param atomic: Write to a temporary file and replace the given file
        on close.

    .. versionadded:: 3.0
  summary: Open a file, with extra behavior to handle ``'-'`` to indicate
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - kind: positional
    name: lazy
    default: 'False'
    rest: false
  - kind: positional
    name: atomic
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: open_stream
  kind: function
  ns: click.utils
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: filename
    default: null
    rest: false
  - kind: positional
    name: mode
    default: r
    rest: false
  - kind: positional
    name: encoding
    default: None
    rest: false
  - kind: positional
    name: errors
    default: strict
    rest: false
  - kind: positional
    name: atomic
    default: 'False'
    rest: false
  - type: '?'
  inherits_from: null
- name: resolve_color_default
  kind: function
  ns: click.utils
  description: |-
    Internal helper to get the default value of the color flag.  If a
    value is passed it's returned unchanged, otherwise it's looked up from
    the current context.
  summary: Internal helper to get the default value of the color flag
  signatures:
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: safecall
  kind: function
  ns: click.utils
  description: Wraps a function so that it swallows exceptions.
  summary: Wraps a function so that it swallows exceptions
  signatures:
  - kind: positional
    name: func
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: should_strip_ansi
  kind: function
  ns: click.utils
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: stream
    default: None
    rest: false
  - kind: positional
    name: color
    default: None
    rest: false
  - type: '?'
  inherits_from: null
- name: strip_ansi
  kind: function
  ns: click.utils
  description: null
  summary: ''
  signatures:
  - kind: positional
    name: value
    default: null
    rest: false
  - type: '?'
  inherits_from: null
- name: text_streams
  kind: const
  ns: click.utils
  description: null
  summary: ''
  signatures: null
  inherits_from: null
- name: update_wrapper
  kind: function
  ns: click.utils
  description: |-
    Update a wrapper function to look like the wrapped function

    wrapper is the function to be updated
    wrapped is the original function
    assigned is a tuple naming the attributes assigned directly
    from the wrapped function to the wrapper function (defaults to
    functools.WRAPPER_ASSIGNMENTS)
    updated is a tuple naming the attributes of the wrapper that
    are updated with the corresponding attribute from the wrapped
    function (defaults to functools.WRAPPER_UPDATES)
  summary: Update a wrapper function to look like the wrapped function
  signatures:
  - kind: positional
    name: wrapper
    default: null
    rest: false
  - kind: positional
    name: wrapped
    default: null
    rest: false
  - kind: positional
    name: assigned
    default: ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')
    rest: false
  - kind: positional
    name: updated
    default: ('__dict__',)
    rest: false
  - type: '?'
  inherits_from: null
