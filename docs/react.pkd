---
name: React
slug: react
text_format: markdown
generator: src:devdocs
version: null
copyright: |-
  © 2013–present Facebook Inc.
  Licensed under the Creative Commons Attribution 4.0 International Public
  License.
  https://reactjs.org/docs/hello-world.html
homepage: https://reactjs.org/

---
- name: Accessibility
  id: accessibility
  summary: Web accessibility (also referred to as a11y) is the design and creation of websites that can be used by everyone
  description: "# Accessibility\n\n## Why Accessibility?\n\nWeb accessibility (also referred to as [**a11y**](https://en.wiktionary.org/wiki/a11y)) is the design and creation of websites that can be used by everyone. Accessibility support is necessary to allow assistive technology to interpret web pages.\n\nReact fully supports building accessible websites, often by using standard HTML techniques.\n\n## Standards and Guidelines\n\n### WCAG\n\nThe [Web Content Accessibility Guidelines](https://www.w3.org/WAI/intro/wcag) provides guidelines for creating accessible web sites.\n\nThe following WCAG checklists provide an overview:\n\n- [WCAG checklist from Wuhcag](https://www.wuhcag.com/wcag-checklist/)\n- [WCAG checklist from WebAIM](https://webaim.org/standards/wcag/checklist)\n- [Checklist from The A11Y Project](https://a11yproject.com/checklist.html)\n\n### WAI-ARIA\n\nThe [Web Accessibility Initiative - Accessible Rich Internet Applications](https://www.w3.org/WAI/intro/aria) document contains techniques for building fully accessible JavaScript widgets.\n\nNote that all `aria-*` HTML attributes are fully supported in JSX. Whereas most DOM properties and attributes in React are camelCased, these attributes should be hyphen-cased (also known as kebab-case, lisp-case, etc) as they are in plain HTML:\n\n``` jsx\n<input\n  type=\"text\"\n  aria-label={labelText}  aria-required=\"true\"  onChange={onchangeHandler}\n  value={inputValue}\n  name=\"name\"\n/>\n```\n\n## Semantic HTML\n\nSemantic HTML is the foundation of accessibility in a web application. Using the various HTML elements to reinforce the meaning of information in our websites will often give us accessibility for free.\n\n- [MDN HTML elements reference](https://developer.mozilla.org/en-US/docs/Web/HTML/Element)\n\nSometimes we break HTML semantics when we add `<div>` elements to our JSX to make our React code work, especially when working with lists (`<ol>`, `<ul>` and `<dl>`) and the HTML `<table>`. In these cases we should rather use [React Fragments](fragments) to group together multiple elements.\n\nFor example,\n\n``` jsx\nimport React, { Fragment } from 'react';\n\nfunction ListItem({ item }) {\n  return (\n    <Fragment>\n      <dt>{item.term}</dt>\n      <dd>{item.description}</dd>\n    </Fragment>\n  );\n}\n\nfunction Glossary(props) {\n  return (\n    <dl>\n      {props.items.map(item => (\n        <ListItem item={item} key={item.id} />\n      ))}\n    </dl>\n  );\n}\n```\n\nYou can map a collection of items to an array of fragments as you would any other type of element as well:\n\n``` jsx\nfunction Glossary(props) {\n  return (\n    <dl>\n      {props.items.map(item => (\n        // Fragments should also have a `key` prop when mapping collections\n        <Fragment key={item.id}>\n          <dt>{item.term}</dt>\n          <dd>{item.description}</dd>\n        </Fragment>\n      ))}\n    </dl>\n  );\n}\n```\n\nWhen you don’t need any props on the Fragment tag you can use the [short syntax](fragments#short-syntax), if your tooling supports it:\n\n``` jsx\nfunction ListItem({ item }) {\n  return (\n    <>\n      <dt>{item.term}</dt>\n      <dd>{item.description}</dd>\n    </>\n  );\n}\n```\n\nFor more info, see [the Fragments documentation](fragments).\n\n## Accessible Forms\n\n### Labeling\n\nEvery HTML form control, such as `<input>` and `<textarea>`, needs to be labeled accessibly. We need to provide descriptive labels that are also exposed to screen readers.\n\nThe following resources show us how to do this:\n\n- [The W3C shows us how to label elements](https://www.w3.org/WAI/tutorials/forms/labels/)\n- [WebAIM shows us how to label elements](https://webaim.org/techniques/forms/controls)\n- [The Paciello Group explains accessible names](https://www.paciellogroup.com/blog/2017/04/what-is-an-accessible-name/)\n\nAlthough these standard HTML practices can be directly used in React, note that the `for` attribute is written as `htmlFor` in JSX:\n\n``` jsx\n<label htmlFor=\"namedInput\">Name:</label>\n<input id=\"namedInput\" type=\"text\" name=\"name\"/>\n```\n\n### Notifying the user of errors\n\nError situations need to be understood by all users. The following link shows us how to expose error texts to screen readers as well:\n\n- [The W3C demonstrates user notifications](https://www.w3.org/WAI/tutorials/forms/notifications/)\n- [WebAIM looks at form validation](https://webaim.org/techniques/formvalidation/)\n\n## Focus Control\n\nEnsure that your web application can be fully operated with the keyboard only:\n\n- [WebAIM talks about keyboard accessibility](https://webaim.org/techniques/keyboard/)\n\n### Keyboard focus and focus outline\n\nKeyboard focus refers to the current element in the DOM that is selected to accept input from the keyboard. We see it everywhere as a focus outline similar to that shown in the following image:\n\n[](https://reactjs.org/static/dec0e6bcc1f882baf76ebc860d4f04e5/4fcfe/keyboard-focus.png)\n\nOnly ever use CSS that removes this outline, for example by setting `outline: 0`, if you are replacing it with another focus outline implementation.\n\n### Mechanisms to skip to desired content\n\nProvide a mechanism to allow users to skip past navigation sections in your application as this assists and speeds up keyboard navigation.\n\nSkiplinks or Skip Navigation Links are hidden navigation links that only become visible when keyboard users interact with the page. They are very easy to implement with internal page anchors and some styling:\n\n- [WebAIM - Skip Navigation Links](https://webaim.org/techniques/skipnav/)\n\nAlso use landmark elements and roles, such as `<main>` and `<aside>`, to demarcate page regions as assistive technology allow the user to quickly navigate to these sections.\n\nRead more about the use of these elements to enhance accessibility here:\n\n- [Accessible Landmarks](https://www.scottohara.me/blog/2018/03/03/landmarks.html)\n\n### Programmatically managing focus\n\nOur React applications continuously modify the HTML DOM during runtime, sometimes leading to keyboard focus being lost or set to an unexpected element. In order to repair this, we need to programmatically nudge the keyboard focus in the right direction. For example, by resetting keyboard focus to a button that opened a modal window after that modal window is closed.\n\nMDN Web Docs takes a look at this and describes how we can build [keyboard-navigable JavaScript widgets](https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets).\n\nTo set focus in React, we can use [Refs to DOM elements](refs-and-the-dom).\n\nUsing this, we first create a ref to an element in the JSX of a component class:\n\n``` jsx\nclass CustomTextInput extends React.Component {\n  constructor(props) {\n    super(props);\n    // Create a ref to store the textInput DOM element\n    this.textInput = React.createRef();\n  }\n  render() {\n  // Use the `ref` callback to store a reference to the text input DOM\n  // element in an instance field (for example, this.textInput).\n    return (\n      <input\n        type=\"text\"\n        ref={this.textInput}      />\n    );\n  }\n}\n```\n\nThen we can focus it elsewhere in our component when needed:\n\n``` jsx\nfocus() {\n  // Explicitly focus the text input using the raw DOM API\n  // Note: we're accessing \"current\" to get the DOM node\n  this.textInput.current.focus();\n}\n```\n\nSometimes a parent component needs to set focus to an element in a child component. We can do this by [exposing DOM refs to parent components](refs-and-the-dom#exposing-dom-refs-to-parent-components) through a special prop on the child component that forwards the parent’s ref to the child’s DOM node.\n\n``` jsx\nfunction CustomTextInput(props) {\n  return (\n    <div>\n      <input ref={props.inputRef} />\n    </div>\n  );\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.inputElement = React.createRef();\n  }\n  render() {\n    return (\n      <CustomTextInput inputRef={this.inputElement} />\n    );\n  }\n}\n\n// Now you can set focus when required.\nthis.inputElement.current.focus();\n```\n\nWhen using a [HOC](higher-order-components) to extend components, it is recommended to [forward the ref](forwarding-refs) to the wrapped component using the `forwardRef` function of React. If a third party HOC does not implement ref forwarding, the above pattern can still be used as a fallback.\n\nA great focus management example is the [react-aria-modal](https://github.com/davidtheclark/react-aria-modal). This is a relatively rare example of a fully accessible modal window. Not only does it set initial focus on the cancel button (preventing the keyboard user from accidentally activating the success action) and trap keyboard focus inside the modal, it also resets focus back to the element that initially triggered the modal.\n\n> Note:\n>\n> While this is a very important accessibility feature, it is also a technique that should be used judiciously. Use it to repair the keyboard focus flow when it is disturbed, not to try and anticipate how users want to use applications.\n\n## Mouse and pointer events\n\nEnsure that all functionality exposed through a mouse or pointer event can also be accessed using the keyboard alone. Depending only on the pointer device will lead to many cases where keyboard users cannot use your application.\n\nTo illustrate this, let’s look at a prolific example of broken accessibility caused by click events. This is the outside click pattern, where a user can disable an opened popover by clicking outside the element.\n\nThis is typically implemented by attaching a `click` event to the `window` object that closes the popover:\n\n``` jsx\nclass OuterClickExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: false };\n    this.toggleContainer = React.createRef();\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.onClickOutsideHandler = this.onClickOutsideHandler.bind(this);\n  }\n\n  componentDidMount() {\n    window.addEventListener('click', this.onClickOutsideHandler);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.onClickOutsideHandler);\n  }\n\n  onClickHandler() {\n    this.setState(currentState => ({\n      isOpen: !currentState.isOpen\n    }));\n  }\n\n  onClickOutsideHandler(event) {\n    if (this.state.isOpen && !this.toggleContainer.current.contains(event.target)) {\n      this.setState({ isOpen: false });\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.toggleContainer}>\n        <button onClick={this.onClickHandler}>Select an option</button>\n        {this.state.isOpen && (\n          <ul>\n            <li>Option 1</li>\n            <li>Option 2</li>\n            <li>Option 3</li>\n          </ul>\n        )}\n      </div>\n    );\n  }\n}\n```\n\nThis may work fine for users with pointer devices, such as a mouse, but operating this with the keyboard alone leads to broken functionality when tabbing to the next element as the `window` object never receives a `click` event. This can lead to obscured functionality which blocks users from using your application.\n\nThe same functionality can be achieved by using appropriate event handlers instead, such as `onBlur` and `onFocus`:\n\n``` jsx\nclass BlurExample extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { isOpen: false };\n    this.timeOutId = null;\n\n    this.onClickHandler = this.onClickHandler.bind(this);\n    this.onBlurHandler = this.onBlurHandler.bind(this);\n    this.onFocusHandler = this.onFocusHandler.bind(this);\n  }\n\n  onClickHandler() {\n    this.setState(currentState => ({\n      isOpen: !currentState.isOpen\n    }));\n  }\n\n  // We close the popover on the next tick by using setTimeout.\n  // This is necessary because we need to first check if\n  // another child of the element has received focus as\n  // the blur event fires prior to the new focus event.\n  onBlurHandler() {\n    this.timeOutId = setTimeout(() => {\n      this.setState({\n        isOpen: false\n      });\n    });\n  }\n\n  // If a child receives focus, do not close the popover.\n  onFocusHandler() {\n    clearTimeout(this.timeOutId);\n  }\n\n  render() {\n    // React assists us by bubbling the blur and\n    // focus events to the parent.\n    return (\n      <div onBlur={this.onBlurHandler}           onFocus={this.onFocusHandler}>\n        <button onClick={this.onClickHandler}\n                aria-haspopup=\"true\"\n                aria-expanded={this.state.isOpen}>\n          Select an option\n        </button>\n        {this.state.isOpen && (\n          <ul>\n            <li>Option 1</li>\n            <li>Option 2</li>\n            <li>Option 3</li>\n          </ul>\n        )}\n      </div>\n    );\n  }\n}\n```\n\nThis code exposes the functionality to both pointer device and keyboard users. Also note the added `aria-*` props to support screen-reader users. For simplicity’s sake the keyboard events to enable `arrow key` interaction of the popover options have not been implemented.\n\nThis is one example of many cases where depending on only pointer and mouse events will break functionality for keyboard users. Always testing with the keyboard will immediately highlight the problem areas which can then be fixed by using keyboard aware event handlers.\n\n## More Complex Widgets\n\nA more complex user experience should not mean a less accessible one. Whereas accessibility is most easily achieved by coding as close to HTML as possible, even the most complex widget can be coded accessibly.\n\nHere we require knowledge of [ARIA Roles](https://www.w3.org/TR/wai-aria/#roles) as well as [ARIA States and Properties](https://www.w3.org/TR/wai-aria/#states_and_properties). These are toolboxes filled with HTML attributes that are fully supported in JSX and enable us to construct fully accessible, highly functional React components.\n\nEach type of widget has a specific design pattern and is expected to function in a certain way by users and user agents alike:\n\n- [WAI-ARIA Authoring Practices - Design Patterns and Widgets](https://www.w3.org/TR/wai-aria-practices/#aria_ex)\n- [Heydon Pickering - ARIA Examples](https://heydonworks.com/article/practical-aria-examples/)\n- [Inclusive Components](https://inclusive-components.design/)\n\n## Other Points for Consideration\n\n### Setting the language\n\nIndicate the human language of page texts as screen reader software uses this to select the correct voice settings:\n\n- [WebAIM - Document Language](https://webaim.org/techniques/screenreader/#language)\n\n### Setting the document title\n\nSet the document `<title>` to correctly describe the current page content as this ensures that the user remains aware of the current page context:\n\n- [WCAG - Understanding the Document Title Requirement](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-title.html)\n\nWe can set this in React using the [React Document Title Component](https://github.com/gaearon/react-document-title).\n\n### Color contrast\n\nEnsure that all readable text on your website has sufficient color contrast to remain maximally readable by users with low vision:\n\n- [WCAG - Understanding the Color Contrast Requirement](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html)\n- [Everything About Color Contrast And Why You Should Rethink It](https://www.smashingmagazine.com/2014/10/color-contrast-tips-and-tools-for-accessibility/)\n- [A11yProject - What is Color Contrast](https://a11yproject.com/posts/what-is-color-contrast/)\n\nIt can be tedious to manually calculate the proper color combinations for all cases in your website so instead, you can [calculate an entire accessible color palette with Colorable](https://colorable.jxnblk.com/).\n\nBoth the aXe and WAVE tools mentioned below also include color contrast tests and will report on contrast errors.\n\nIf you want to extend your contrast testing abilities you can use these tools:\n\n- [WebAIM - Color Contrast Checker](https://webaim.org/resources/contrastchecker/)\n- [The Paciello Group - Color Contrast Analyzer](https://www.paciellogroup.com/resources/contrastanalyser/)\n\n## Development and Testing Tools\n\nThere are a number of tools we can use to assist in the creation of accessible web applications.\n\n### The keyboard\n\nBy far the easiest and also one of the most important checks is to test if your entire website can be reached and used with the keyboard alone. Do this by:\n\n1.  Disconnecting your mouse.\n2.  Using `Tab` and `Shift+Tab` to browse.\n3.  Using `Enter` to activate elements.\n4.  Where required, using your keyboard arrow keys to interact with some elements, such as menus and dropdowns.\n\n### Development assistance\n\nWe can check some accessibility features directly in our JSX code. Often intellisense checks are already provided in JSX aware IDE’s for the ARIA roles, states and properties. We also have access to the following tool:\n\n#### eslint-plugin-jsx-a11y\n\nThe [eslint-plugin-jsx-a11y](https://github.com/evcohen/eslint-plugin-jsx-a11y) plugin for ESLint provides AST linting feedback regarding accessibility issues in your JSX. Many IDE’s allow you to integrate these findings directly into code analysis and source code windows.\n\n[Create React App](https://github.com/facebookincubator/create-react-app) has this plugin with a subset of rules activated. If you want to enable even more accessibility rules, you can create an `.eslintrc` file in the root of your project with this content:\n\n``` jsxon\n{\n  \"extends\": [\"react-app\", \"plugin:jsx-a11y/recommended\"],\n  \"plugins\": [\"jsx-a11y\"]\n}\n```\n\n### Testing accessibility in the browser\n\nA number of tools exist that can run accessibility audits on web pages in your browser. Please use them in combination with other accessibility checks mentioned here as they can only test the technical accessibility of your HTML.\n\n#### aXe, aXe-core and react-axe\n\nDeque Systems offers [aXe-core](https://github.com/dequelabs/axe-core) for automated and end-to-end accessibility tests of your applications. This module includes integrations for Selenium.\n\n[The Accessibility Engine](https://www.deque.com/products/axe/) or aXe, is an accessibility inspector browser extension built on `aXe-core`.\n\nYou can also use the [@axe-core/react](https://github.com/dequelabs/axe-core-npm/tree/develop/packages/react) module to report these accessibility findings directly to the console while developing and debugging.\n\n#### WebAIM WAVE\n\nThe [Web Accessibility Evaluation Tool](https://wave.webaim.org/extension/) is another accessibility browser extension.\n\n#### Accessibility inspectors and the Accessibility Tree\n\n[The Accessibility Tree](https://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/) is a subset of the DOM tree that contains accessible objects for every DOM element that should be exposed to assistive technology, such as screen readers.\n\nIn some browsers we can easily view the accessibility information for each element in the accessibility tree:\n\n- [Using the Accessibility Inspector in Firefox](https://developer.mozilla.org/en-US/docs/Tools/Accessibility_inspector)\n- [Using the Accessibility Inspector in Chrome](https://developers.google.com/web/tools/chrome-devtools/accessibility/reference#pane)\n- [Using the Accessibility Inspector in OS X Safari](https://developer.apple.com/library/content/documentation/Accessibility/Conceptual/AccessibilityMacOSX/OSXAXTestingApps.html)\n\n### Screen readers\n\nTesting with a screen reader should form part of your accessibility tests.\n\nPlease note that browser / screen reader combinations matter. It is recommended that you test your application in the browser best suited to your screen reader of choice.\n\n### Commonly Used Screen Readers\n\n#### NVDA in Firefox\n\n[NonVisual Desktop Access](https://www.nvaccess.org/) or NVDA is an open source Windows screen reader that is widely used.\n\nRefer to the following guides on how to best use NVDA:\n\n- [WebAIM - Using NVDA to Evaluate Web Accessibility](https://webaim.org/articles/nvda/)\n- [Deque - NVDA Keyboard Shortcuts](https://dequeuniversity.com/screenreaders/nvda-keyboard-shortcuts)\n\n#### VoiceOver in Safari\n\nVoiceOver is an integrated screen reader on Apple devices.\n\nRefer to the following guides on how to activate and use VoiceOver:\n\n- [WebAIM - Using VoiceOver to Evaluate Web Accessibility](https://webaim.org/articles/voiceover/)\n- [Deque - VoiceOver for OS X Keyboard Shortcuts](https://dequeuniversity.com/screenreaders/voiceover-keyboard-shortcuts)\n- [Deque - VoiceOver for iOS Shortcuts](https://dequeuniversity.com/screenreaders/voiceover-ios-shortcuts)\n\n#### JAWS in Internet Explorer\n\n[Job Access With Speech](https://www.freedomscientific.com/Products/software/JAWS/) or JAWS, is a prolifically used screen reader on Windows.\n\nRefer to the following guides on how to best use JAWS:\n\n- [WebAIM - Using JAWS to Evaluate Web Accessibility](https://webaim.org/articles/jaws/)\n- [Deque - JAWS Keyboard Shortcuts](https://dequeuniversity.com/screenreaders/jaws-keyboard-shortcuts)\n\n### Other Screen Readers\n\n#### ChromeVox in Google Chrome\n\n[ChromeVox](https://www.chromevox.com/) is an integrated screen reader on Chromebooks and is available [as an extension](https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en) for Google Chrome.\n\nRefer to the following guides on how best to use ChromeVox:\n\n- [Google Chromebook Help - Use the Built-in Screen Reader](https://support.google.com/chromebook/answer/7031755?hl=en)\n- [ChromeVox Classic Keyboard Shortcuts Reference](https://www.chromevox.com/keyboard_shortcuts.html)\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/accessibility.html](https://reactjs.org/docs/accessibility.html)"
- name: act()
  id: test-utils#act
  summary: To prepare a component for assertions, wrap the code rendering it and performing updates inside an act() call
  belongs_to: Test Utilities
  description: |-
    ### `act()`

    To prepare a component for assertions, wrap the code rendering it and performing updates inside an `act()` call. This makes your test run closer to how React works in the browser.

    > Note
    >
    > If you use `react-test-renderer`, it also provides an `act` export that behaves the same way.

    For example, let’s say we have this `Counter` component:

    ``` jsx
    class Counter extends React.Component {
      constructor(props) {
        super(props);
        this.state = {count: 0};
        this.handleClick = this.handleClick.bind(this);
      }
      componentDidMount() {
        document.title = `You clicked ${this.state.count} times`;
      }
      componentDidUpdate() {
        document.title = `You clicked ${this.state.count} times`;
      }
      handleClick() {
        this.setState(state => ({
          count: state.count + 1,
        }));
      }
      render() {
        return (
          <div>
            <p>You clicked {this.state.count} times</p>
            <button onClick={this.handleClick}>
              Click me
            </button>
          </div>
        );
      }
    }
    ```

    Here is how we can test it:

    ``` jsx
    import React from 'react';
    import ReactDOM from 'react-dom/client';
    import { act } from 'react-dom/test-utils';
    import Counter from './Counter';

    let container;

    beforeEach(() => {
      container = document.createElement('div');
      document.body.appendChild(container);
    });

    afterEach(() => {
      document.body.removeChild(container);
      container = null;
    });

    it('can render and update a counter', () => {
      // Test first render and componentDidMount
      act(() => {
        ReactDOM.createRoot(container).render(<Counter />);
      });
      const button = container.querySelector('button');
      const label = container.querySelector('p');
      expect(label.textContent).toBe('You clicked 0 times');
      expect(document.title).toBe('You clicked 0 times');

      // Test second render and componentDidUpdate
      act(() => {
        button.dispatchEvent(new MouseEvent('click', {bubbles: true}));
      });
      expect(label.textContent).toBe('You clicked 1 times');
      expect(document.title).toBe('You clicked 1 times');
    });
    ```

    - Don’t forget that dispatching DOM events only works when the DOM container is added to the `document`. You can use a library like [React Testing Library](https://testing-library.com/react) to reduce the boilerplate code.
    - The [`recipes`](testing-recipes) document contains more details on how `act()` behaves, with examples and usage.
- name: Add React to a Website
  id: add-react-to-a-website
  summary: Use as little or as much React as you need
  description: "# Add React to a Website\n\nUse as little or as much React as you need.\n\nReact has been designed from the start for gradual adoption, and **you can use as little or as much React as you need**. Perhaps you only want to add some “sprinkles of interactivity” to an existing page. React components are a great way to do that.\n\nThe majority of websites aren’t, and don’t need to be, single-page apps. With **a few lines of code and no build tooling**, try React in a small part of your website. You can then either gradually expand its presence, or keep it contained to a few dynamic widgets.\n\n- [Add React in One Minute](#add-react-in-one-minute)\n- [Optional: Try React with JSX](#optional-try-react-with-jsx) (no bundler necessary!)\n\n## Add React in One Minute\n\nIn this section, we will show how to add a React component to an existing HTML page. You can follow along with your own website, or create an empty HTML file to practice.\n\nThere will be no complicated tools or install requirements — **to complete this section, you only need an internet connection, and a minute of your time.**\n\nOptional: [Download the full example (2KB zipped)](https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/87f0b6f34238595b44308acfb86df6ea43669c08.zip)\n\n### Step 1: Add a DOM Container to the HTML\n\nFirst, open the HTML page you want to edit. Add an empty `<div>` tag to mark the spot where you want to display something with React. For example:\n\n``` html\n<!-- ... existing HTML ... -->\n\n<div id=\"like_button_container\"></div>\n\n<!-- ... existing HTML ... -->\n```\n\nWe gave this `<div>` a unique `id` HTML attribute. This will allow us to find it from the JavaScript code later and display a React component inside of it.\n\n> Tip\n>\n> You can place a “container” `<div>` like this **anywhere** inside the `<body>` tag. You may have as many independent DOM containers on one page as you need. They are usually empty — React will replace any existing content inside DOM containers.\n\n### Step 2: Add the Script Tags\n\nNext, add three `<script>` tags to the HTML page right before the closing `</body>` tag:\n\n``` html\n  <!-- ... other HTML ... -->\n\n  <!-- Load React. -->\n  <!-- Note: when deploying, replace \"development.js\" with \"production.min.js\". -->\n  <script src=\"https://unpkg.com/react@18/umd/react.development.js\" crossorigin></script>\n  <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\" crossorigin></script>\n\n  <!-- Load our React component. -->\n  <script src=\"like_button.js\"></script>\n\n</body>\n```\n\nThe first two tags load React. The third one will load your component code.\n\n### Step 3: Create a React Component\n\nCreate a file called `like_button.js` next to your HTML page.\n\nOpen **[this starter code](https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js)** and paste it into the file you created.\n\n> Tip\n>\n> This code defines a React component called `LikeButton`. Don’t worry if you don’t understand it yet — we’ll cover the building blocks of React later in our [hands-on tutorial](https://reactjs.org/tutorial/tutorial.html) and [main concepts guide](index). For now, let’s just get it showing on the screen!\n\nAfter **[the starter code](https://gist.github.com/gaearon/0b180827c190fe4fd98b4c7f570ea4a8/raw/b9157ce933c79a4559d2aa9ff3372668cce48de7/LikeButton.js)**, add three lines to the bottom of `like_button.js`:\n\n``` jsx\n// ... the starter code you pasted ...\n\nconst domContainer = document.querySelector('#like_button_container');\nconst root = ReactDOM.createRoot(domContainer);\nroot.render(e(LikeButton));\n```\n\nThese three lines of code find the `<div>` we added to our HTML in the first step, create a React app with it, and then display our “Like” button React component inside of it.\n\n### That’s It!\n\nThere is no step four. **You have just added the first React component to your website.**\n\nCheck out the next sections for more tips on integrating React.\n\n**[View the full example source code](https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605)**\n\n**[Download the full example (2KB zipped)](https://gist.github.com/gaearon/6668a1f6986742109c00a581ce704605/archive/87f0b6f34238595b44308acfb86df6ea43669c08.zip)**\n\n### Tip: Reuse a Component\n\nCommonly, you might want to display React components in multiple places on the HTML page. Here is an example that displays the “Like” button three times and passes some data to it:\n\n[View the full example source code](https://gist.github.com/gaearon/faa67b76a6c47adbab04f739cba7ceda)\n\n[Download the full example (2KB zipped)](https://gist.github.com/gaearon/faa67b76a6c47adbab04f739cba7ceda/archive/279839cb9891bd41802ebebc5365e9dec08eeb9f.zip)\n\n> Note\n>\n> This strategy is mostly useful while React-powered parts of the page are isolated from each other. Inside React code, it’s easier to use [component composition](components-and-props#composing-components) instead.\n\n### Tip: Minify JavaScript for Production\n\nBefore deploying your website to production, be mindful that unminified JavaScript can significantly slow down the page for your users.\n\nIf you already minify the application scripts, **your site will be production-ready** if you ensure that the deployed HTML loads the versions of React ending in `production.min.js`:\n\n``` jsx\n<script src=\"https://unpkg.com/react@18/umd/react.production.min.js\" crossorigin></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\" crossorigin></script>\n```\n\nIf you don’t have a minification step for your scripts, [here’s one way to set it up](https://gist.github.com/gaearon/42a2ffa41b8319948f9be4076286e1f3).\n\n## Optional: Try React with JSX\n\nIn the examples above, we only relied on features that are natively supported by browsers. This is why we used a JavaScript function call to tell React what to display:\n\n``` jsx\nconst e = React.createElement;\n\n// Display a \"Like\" <button>\nreturn e(\n  'button',\n  { onClick: () => this.setState({ liked: true }) },\n  'Like'\n);\n```\n\nHowever, React also offers an option to use [JSX](introducing-jsx) instead:\n\n``` jsx\n// Display a \"Like\" <button>\nreturn (\n  <button onClick={() => this.setState({ liked: true })}>\n    Like\n  </button>\n);\n```\n\nThese two code snippets are equivalent. While **JSX is [completely optional](react-without-jsx)**, many people find it helpful for writing UI code — both with React and with other libraries.\n\nYou can play with JSX using [this online converter](https://babeljs.io/en/repl#?babili=false&browsers=&build=&builtIns=false&spec=false&loose=false&code_lz=DwIwrgLhD2B2AEcDCAbAlgYwNYF4DeAFAJTw4B88EAFmgM4B0tAphAMoQCGETBe86WJgBMAXJQBOYJvAC-RGWQBQ8FfAAyaQYuAB6cFDhkgA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=7.15.7).\n\n### Quickly Try JSX\n\nThe quickest way to try JSX in your project is to add this `<script>` tag to your page:\n\n``` html\n<script src=\"https://unpkg.com/babel-standalone@6/babel.min.js\"></script>\n```\n\nNow you can use JSX in any `<script>` tag by adding `type=\"text/babel\"` attribute to it. Here is [an example HTML file with JSX](https://raw.githubusercontent.com/reactjs/reactjs.org/main/static/html/single-file-example.html) that you can download and play with.\n\nThis approach is fine for learning and creating simple demos. However, it makes your website slow and **isn’t suitable for production**. When you’re ready to move forward, remove this new `<script>` tag and the `type=\"text/babel\"` attributes you’ve added. Instead, in the next section you will set up a JSX preprocessor to convert all your `<script>` tags automatically.\n\n### Add JSX to a Project\n\nAdding JSX to a project doesn’t require complicated tools like a bundler or a development server. Essentially, adding JSX **is a lot like adding a CSS preprocessor.** The only requirement is to have [Node.js](https://nodejs.org/) installed on your computer.\n\nGo to your project folder in the terminal, and paste these two commands:\n\n1.  **Step 1:** Run `npm init -y` (if it fails, [here’s a fix](https://gist.github.com/gaearon/246f6380610e262f8a648e3e51cad40d))\n2.  **Step 2:** Run `npm install babel-cli@6 babel-preset-react-app@3`\n\n> Tip\n>\n> We’re **using npm here only to install the JSX preprocessor;** you won’t need it for anything else. Both React and the application code can stay as `<script>` tags with no changes.\n\nCongratulations! You just added a **production-ready JSX setup** to your project.\n\n### Run JSX Preprocessor\n\nCreate a folder called `src` and run this terminal command:\n\n``` console\nnpx babel --watch src --out-dir . --presets react-app/prod\n```\n\n> Note\n>\n> `npx` is not a typo — it’s a [package runner tool that comes with npm 5.2+](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b).\n>\n> If you see an error message saying “You have mistakenly installed the `babel` package”, you might have missed [the previous step](#add-jsx-to-a-project). Perform it in the same folder, and then try again.\n\nDon’t wait for it to finish — this command starts an automated watcher for JSX.\n\nIf you now create a file called `src/like_button.js` with this **[JSX starter code](https://gist.github.com/gaearon/c8e112dc74ac44aac4f673f2c39d19d1/raw/09b951c86c1bf1116af741fa4664511f2f179f0a/like_button.js)**, the watcher will create a preprocessed `like_button.js` with the plain JavaScript code suitable for the browser. When you edit the source file with JSX, the transform will re-run automatically.\n\nAs a bonus, this also lets you use modern JavaScript syntax features like classes without worrying about breaking older browsers. The tool we just used is called Babel, and you can learn more about it from [its documentation](https://babeljs.io/docs/en/babel-cli/).\n\nIf you notice that you’re getting comfortable with build tools and want them to do more for you, [the next section](create-a-new-react-app) describes some of the most popular and approachable toolchains. If not — those script tags will do just fine!\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/add-react-to-a-website.html](https://reactjs.org/docs/add-react-to-a-website.html)"
- name: AJAX and APIs
  id: faq-ajax
  summary: You can use any AJAX library you like with React
  description: "# AJAX and APIs\n\n### How can I make an AJAX call?\n\nYou can use any AJAX library you like with React. Some popular ones are [Axios](https://github.com/axios/axios), [jQuery AJAX](https://api.jquery.com/jQuery.ajax/), and the browser built-in [window.fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n\n### Where in the component lifecycle should I make an AJAX call?\n\nYou should populate data with AJAX calls in the [`componentDidMount`](react-component#mounting) lifecycle method. This is so you can use `setState` to update your component when the data is retrieved.\n\n### Example: Using AJAX results to set local state\n\nThe component below demonstrates how to make an AJAX call in `componentDidMount` to populate local component state.\n\nThe example API returns a JSON object like this:\n\n``` text\n{\n  \"items\": [\n    { \"id\": 1, \"name\": \"Apples\",  \"price\": \"$2\" },\n    { \"id\": 2, \"name\": \"Peaches\", \"price\": \"$5\" }\n  ] \n}\n```\n\n``` jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.example.com/items\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result.items\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <ul>\n          {items.map(item => (\n            <li key={item.id}>\n              {item.name} {item.price}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n}\n```\n\nHere is the equivalent with [Hooks](hooks-intro):\n\n``` jsx\nfunction MyComponent() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(\"https://api.example.com/items\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setItems(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <ul>\n        {items.map(item => (\n          <li key={item.id}>\n            {item.name} {item.price}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/faq-ajax.html](https://reactjs.org/docs/faq-ajax.html)"
- name: Babel, JSX, and Build Steps
  id: faq-build
  summary: No! Check out “React Without JSX” to learn more
  description: "# Babel, JSX, and Build Steps\n\n### Do I need to use JSX with React?\n\nNo! Check out [“React Without JSX”](react-without-jsx) to learn more.\n\n### Do I need to use ES6 (+) with React?\n\nNo! Check out [“React Without ES6”](react-without-es6) to learn more.\n\n### How can I write comments in JSX?\n\n``` jsx\n<div>\n  {/* Comment goes here */}\n  Hello, {name}!\n</div>\n```\n\n``` jsx\n<div>\n  {/* It also works \n  for multi-line comments. */}\n  Hello, {name}! \n</div>\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/faq-build.html](https://reactjs.org/docs/faq-build.html)"
- name: Building Your Own Hooks
  id: hooks-custom
  summary: Hooks are a new addition in React 16.8
  description: "# Building Your Own Hooks\n\n*Hooks* are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\nBuilding your own Hooks lets you extract component logic into reusable functions.\n\nWhen we were learning about [using the Effect Hook](hooks-effect#example-using-hooks-1), we saw this component from a chat application that displays a message indicating whether a friend is online or offline:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n\nNow let’s say that our chat application also has a contact list, and we want to render names of online users with a green color. We could copy and paste similar logic above into our `FriendListItem` component but it wouldn’t be ideal:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction FriendListItem(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  return (\n    <li style={{ color: isOnline ? 'green' : 'black' }}>\n      {props.friend.name}\n    </li>\n  );\n}\n```\n\nInstead, we’d like to share this logic between `FriendStatus` and `FriendListItem`.\n\nTraditionally in React, we’ve had two popular ways to share stateful logic between components: [render props](render-props) and [higher-order components](higher-order-components). We will now look at how Hooks solve many of the same problems without forcing you to add more components to the tree.\n\n## Extracting a Custom Hook\n\nWhen we want to share logic between two JavaScript functions, we extract it to a third function. Both components and Hooks are functions, so this works for them too!\n\n**A custom Hook is a JavaScript function whose name starts with ”`use`” and that may call other Hooks.** For example, `useFriendStatus` below is our first custom Hook:\n\n``` jsx\nimport { useState, useEffect } from 'react';\n\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n    };\n  });\n\n  return isOnline;\n}\n```\n\nThere’s nothing new inside of it — the logic is copied from the components above. Just like in a component, make sure to only call other Hooks unconditionally at the top level of your custom Hook.\n\nUnlike a React component, a custom Hook doesn’t need to have a specific signature. We can decide what it takes as arguments, and what, if anything, it should return. In other words, it’s just like a normal function. Its name should always start with `use` so that you can tell at a glance that the [rules of Hooks](hooks-rules) apply to it.\n\nThe purpose of our `useFriendStatus` Hook is to subscribe us to a friend’s status. This is why it takes `friendID` as an argument, and returns whether this friend is online:\n\n``` jsx\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  // ...\n\n  return isOnline;\n}\n```\n\nNow let’s see how we can use our custom Hook.\n\n## Using a Custom Hook\n\nIn the beginning, our stated goal was to remove the duplicated logic from the `FriendStatus` and `FriendListItem` components. Both of them want to know whether a friend is online.\n\nNow that we’ve extracted this logic to a `useFriendStatus` hook, we can *just use it:*\n\n``` jsx\nfunction FriendStatus(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n\n``` jsx\nfunction FriendListItem(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  return (\n    <li style={{ color: isOnline ? 'green' : 'black' }}>\n      {props.friend.name}\n    </li>\n  );\n}\n```\n\n**Is this code equivalent to the original examples?** Yes, it works in exactly the same way. If you look closely, you’ll notice we didn’t make any changes to the behavior. All we did was to extract some common code between two functions into a separate function. **Custom Hooks are a convention that naturally follows from the design of Hooks, rather than a React feature.**\n\n**Do I have to name my custom Hooks starting with “`use`”?** Please do. This convention is very important. Without it, we wouldn’t be able to automatically check for violations of [rules of Hooks](hooks-rules) because we couldn’t tell if a certain function contains calls to Hooks inside of it.\n\n**Do two components using the same Hook share state?** No. Custom Hooks are a mechanism to reuse *stateful logic* (such as setting up a subscription and remembering the current value), but every time you use a custom Hook, all state and effects inside of it are fully isolated.\n\n**How does a custom Hook get isolated state?** Each *call* to a Hook gets isolated state. Because we call `useFriendStatus` directly, from React’s point of view our component just calls `useState` and `useEffect`. And as we [learned](hooks-state#tip-using-multiple-state-variables) [earlier](hooks-effect#tip-use-multiple-effects-to-separate-concerns), we can call `useState` and `useEffect` many times in one component, and they will be completely independent.\n\n### Tip: Pass Information Between Hooks\n\nSince Hooks are functions, we can pass information between them.\n\nTo illustrate this, we’ll use another component from our hypothetical chat example. This is a chat message recipient picker that displays whether the currently selected friend is online:\n\n``` jsx\nconst friendList = [\n  { id: 1, name: 'Phoebe' },\n  { id: 2, name: 'Rachel' },\n  { id: 3, name: 'Ross' },\n];\n\nfunction ChatRecipientPicker() {\n  const [recipientID, setRecipientID] = useState(1);\n  const isRecipientOnline = useFriendStatus(recipientID);\n\n  return (\n    <>\n      <Circle color={isRecipientOnline ? 'green' : 'red'} />\n      <select\n        value={recipientID}\n        onChange={e => setRecipientID(Number(e.target.value))}\n      >\n        {friendList.map(friend => (\n          <option key={friend.id} value={friend.id}>\n            {friend.name}\n          </option>\n        ))}\n      </select>\n    </>\n  );\n}\n```\n\nWe keep the currently chosen friend ID in the `recipientID` state variable, and update it if the user chooses a different friend in the `<select>` picker.\n\nBecause the `useState` Hook call gives us the latest value of the `recipientID` state variable, we can pass it to our custom `useFriendStatus` Hook as an argument:\n\n``` jsx\n  const [recipientID, setRecipientID] = useState(1);\n  const isRecipientOnline = useFriendStatus(recipientID);\n```\n\nThis lets us know whether the *currently selected* friend is online. If we pick a different friend and update the `recipientID` state variable, our `useFriendStatus` Hook will unsubscribe from the previously selected friend, and subscribe to the status of the newly selected one.\n\n## `useYourImagination()`\n\nCustom Hooks offer the flexibility of sharing logic that wasn’t possible in React components before. You can write custom Hooks that cover a wide range of use cases like form handling, animation, declarative subscriptions, timers, and probably many more we haven’t considered. What’s more, you can build Hooks that are just as easy to use as React’s built-in features.\n\nTry to resist adding abstraction too early. Now that function components can do more, it’s likely that the average function component in your codebase will become longer. This is normal — don’t feel like you *have to* immediately split it into Hooks. But we also encourage you to start spotting cases where a custom Hook could hide complex logic behind a simple interface, or help untangle a messy component.\n\nFor example, maybe you have a complex component that contains a lot of local state that is managed in an ad-hoc way. `useState` doesn’t make centralizing the update logic any easier so you might prefer to write it as a [Redux](https://redux.js.org/) reducer:\n\n``` jsx\nfunction todosReducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return [...state, {\n        text: action.text,\n        completed: false\n      }];\n    // ... other actions ...\n    default:\n      return state;\n  }\n}\n```\n\nReducers are very convenient to test in isolation, and scale to express complex update logic. You can further break them apart into smaller reducers if necessary. However, you might also enjoy the benefits of using React local state, or might not want to install another library.\n\nSo what if we could write a `useReducer` Hook that lets us manage the *local* state of our component with a reducer? A simplified version of it might look like this:\n\n``` jsx\nfunction useReducer(reducer, initialState) {\n  const [state, setState] = useState(initialState);\n\n  function dispatch(action) {\n    const nextState = reducer(state, action);\n    setState(nextState);\n  }\n\n  return [state, dispatch];\n}\n```\n\nNow we could use it in our component, and let the reducer drive its state management:\n\n``` jsx\nfunction Todos() {\n  const [todos, dispatch] = useReducer(todosReducer, []);\n\n  function handleAddClick(text) {\n    dispatch({ type: 'add', text });\n  }\n\n  // ...\n}\n```\n\nThe need to manage local state with a reducer in a complex component is common enough that we’ve built the `useReducer` Hook right into React. You’ll find it together with other built-in Hooks in the [Hooks API reference](hooks-reference).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/hooks-custom.html](https://reactjs.org/docs/hooks-custom.html)"
- name: Bundlers
  id: glossary#bundlers
  summary: Bundlers take JavaScript and CSS code written as separate modules (often hundreds of them), and combine them together into a few files better optimized for the browsers
  belongs_to: Glossary of React Terms
  description: |-
    ## Bundlers

    Bundlers take JavaScript and CSS code written as separate modules (often hundreds of them), and combine them together into a few files better optimized for the browsers. Some bundlers commonly used in React applications include [Webpack](https://webpack.js.org/) and [Browserify](http://browserify.org/).
- name: CDN
  id: glossary#cdn
  summary: CDN stands for Content Delivery Network
  belongs_to: Glossary of React Terms
  description: |-
    ## CDN

    CDN stands for Content Delivery Network. CDNs deliver cached, static content from a network of servers across the globe.
- name: CDN Links
  id: cdn-links
  summary: Both React and ReactDOM are available over a CDN
  description: "# CDN Links\n\nBoth React and ReactDOM are available over a CDN.\n\n``` html\n<script crossorigin src=\"https://unpkg.com/react@18/umd/react.development.js\"></script>\n<script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script>\n```\n\nThe versions above are only meant for development, and are not suitable for production. Minified and optimized production versions of React are available at:\n\n``` html\n<script crossorigin src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>\n<script crossorigin src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"></script>\n```\n\nTo load a specific version of `react` and `react-dom`, replace `18` with the version number.\n\n### Why the `crossorigin` Attribute?\n\nIf you serve React from a CDN, we recommend to keep the [`crossorigin`](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) attribute set:\n\n``` html\n<script crossorigin src=\"...\"></script>\n```\n\nWe also recommend to verify that the CDN you are using sets the `Access-Control-Allow-Origin: *` HTTP header:\n\n[](https://reactjs.org/static/89baed0a6540f29e954065ce04661048/13ae7/cdn-cors-header.png)\n\nThis enables a better [error handling experience](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html) in React 16 and later.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/cdn-links.html](https://reactjs.org/docs/cdn-links.html)"
- name: Class.contextType
  id: context#classcontexttype
  summary: The contextType property on a class can be assigned a Context object created by React.createContext(). Using this property lets you consume the nearest current value of that Context type using this.context
  belongs_to: Context
  description: |-
    ### `Class.contextType`

    ``` jsx
    class MyClass extends React.Component {
      componentDidMount() {
        let value = this.context;
        /* perform a side-effect at mount using the value of MyContext */
      }
      componentDidUpdate() {
        let value = this.context;
        /* ... */
      }
      componentWillUnmount() {
        let value = this.context;
        /* ... */
      }
      render() {
        let value = this.context;
        /* render something based on the value of MyContext */
      }
    }
    MyClass.contextType = MyContext;
    ```

    The `contextType` property on a class can be assigned a Context object created by [`React.createContext()`](#reactcreatecontext). Using this property lets you consume the nearest current value of that Context type using `this.context`. You can reference this in any of the lifecycle methods including the render function.

    > Note:
    >
    > You can only subscribe to a single context using this API. If you need to read more than one see [Consuming Multiple Contexts](#consuming-multiple-contexts).
    >
    > If you are using the experimental [public class fields syntax](https://babeljs.io/docs/plugins/transform-class-properties/), you can use a **static** class field to initialize your `contextType`.

    ``` jsx
    class MyClass extends React.Component {
      static contextType = MyContext;
      render() {
        let value = this.context;
        /* render something based on the value */
      }
    }
    ```
- name: cloneElement()
  id: react-api#cloneelement
  summary: Clone and return a new React element using element as the starting point
  belongs_to: React Top-Level API
  description: |-
    ### `cloneElement()`

    ``` text
    React.cloneElement(
      element,
      [config],
      [...children]
    )
    ```

    Clone and return a new React element using `element` as the starting point. `config` should contain all new props, `key`, or `ref`. The resulting element will have the original element’s props with the new props merged in shallowly. New children will replace existing children. `key` and `ref` from the original element will be preserved if no `key` and `ref` present in the `config`.

    `React.cloneElement()` is almost equivalent to:

    ``` jsx
    <element.type {...element.props} {...props}>{children}</element.type>
    ```

    However, it also preserves `ref`s. This means that if you get a child with a `ref` on it, you won’t accidentally steal it from your ancestor. You will get the same `ref` attached to your new element. The new `ref` or `key` will replace old ones if present.

    This API was introduced as a replacement of the deprecated `React.addons.cloneWithProps()`.
- name: Code-Splitting
  id: code-splitting
  summary: Most React apps will have their files “bundled” using tools like Webpack, Rollup or Browserify
  description: "# Code-Splitting\n\n## Bundling\n\nMost React apps will have their files “bundled” using tools like [Webpack](https://webpack.js.org/), [Rollup](https://rollupjs.org/) or [Browserify](http://browserify.org/). Bundling is the process of following imported files and merging them into a single file: a “bundle”. This bundle can then be included on a webpage to load an entire app at once.\n\n#### Example\n\n**App:**\n\n``` jsx\n// app.js\nimport { add } from './math.js';\n\nconsole.log(add(16, 26)); // 42\n```\n\n``` jsx\n// math.js\nexport function add(a, b) {\n  return a + b;\n}\n```\n\n**Bundle:**\n\n``` jsx\nfunction add(a, b) {\n  return a + b;\n}\n\nconsole.log(add(16, 26)); // 42\n```\n\n> Note:\n>\n> Your bundles will end up looking a lot different than this.\n\nIf you’re using [Create React App](https://create-react-app.dev/), [Next.js](https://nextjs.org/), [Gatsby](https://www.gatsbyjs.org/), or a similar tool, you will have a Webpack setup out of the box to bundle your app.\n\nIf you aren’t, you’ll need to set up bundling yourself. For example, see the [Installation](https://webpack.js.org/guides/installation/) and [Getting Started](https://webpack.js.org/guides/getting-started/) guides on the Webpack docs.\n\n## Code Splitting\n\nBundling is great, but as your app grows, your bundle will grow too. Especially if you are including large third-party libraries. You need to keep an eye on the code you are including in your bundle so that you don’t accidentally make it so large that your app takes a long time to load.\n\nTo avoid winding up with a large bundle, it’s good to get ahead of the problem and start “splitting” your bundle. Code-Splitting is a feature supported by bundlers like [Webpack](https://webpack.js.org/guides/code-splitting/), [Rollup](https://rollupjs.org/guide/en/#code-splitting) and Browserify (via [factor-bundle](https://github.com/browserify/factor-bundle)) which can create multiple bundles that can be dynamically loaded at runtime.\n\nCode-splitting your app can help you “lazy-load” just the things that are currently needed by the user, which can dramatically improve the performance of your app. While you haven’t reduced the overall amount of code in your app, you’ve avoided loading code that the user may never need, and reduced the amount of code needed during the initial load.\n\n## `import()`\n\nThe best way to introduce code-splitting into your app is through the dynamic `import()` syntax.\n\n**Before:**\n\n``` jsx\nimport { add } from './math';\n\nconsole.log(add(16, 26));\n```\n\n**After:**\n\n``` jsx\nimport(\"./math\").then(math => {\n  console.log(math.add(16, 26));\n});\n```\n\nWhen Webpack comes across this syntax, it automatically starts code-splitting your app. If you’re using Create React App, this is already configured for you and you can [start using it](https://create-react-app.dev/docs/code-splitting/) immediately. It’s also supported out of the box in [Next.js](https://nextjs.org/docs/advanced-features/dynamic-import).\n\nIf you’re setting up Webpack yourself, you’ll probably want to read Webpack’s [guide on code splitting](https://webpack.js.org/guides/code-splitting/). Your Webpack config should look vaguely [like this](https://gist.github.com/gaearon/ca6e803f5c604d37468b0091d9959269).\n\nWhen using [Babel](https://babeljs.io/), you’ll need to make sure that Babel can parse the dynamic import syntax but is not transforming it. For that you will need [@babel/plugin-syntax-dynamic-import](https://classic.yarnpkg.com/en/package/@babel/plugin-syntax-dynamic-import).\n\n## `React.lazy`\n\nThe `React.lazy` function lets you render a dynamic import as a regular component.\n\n**Before:**\n\n``` jsx\nimport OtherComponent from './OtherComponent';\n```\n\n**After:**\n\n``` jsx\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n```\n\nThis will automatically load the bundle containing the `OtherComponent` when this component is first rendered.\n\n`React.lazy` takes a function that must call a dynamic `import()`. This must return a `Promise` which resolves to a module with a `default` export containing a React component.\n\nThe lazy component should then be rendered inside a `Suspense` component, which allows us to show some fallback content (such as a loading indicator) while we’re waiting for the lazy component to load.\n\n``` jsx\nimport React, { Suspense } from 'react';\n\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <OtherComponent />\n      </Suspense>\n    </div>\n  );\n}\n```\n\nThe `fallback` prop accepts any React elements that you want to render while waiting for the component to load. You can place the `Suspense` component anywhere above the lazy component. You can even wrap multiple lazy components with a single `Suspense` component.\n\n``` jsx\nimport React, { Suspense } from 'react';\n\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\nconst AnotherComponent = React.lazy(() => import('./AnotherComponent'));\n\nfunction MyComponent() {\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <section>\n          <OtherComponent />\n          <AnotherComponent />\n        </section>\n      </Suspense>\n    </div>\n  );\n}\n```\n\n### Avoiding fallbacks\n\nAny component may suspend as a result of rendering, even components that were already shown to the user. In order for screen content to always be consistent, if an already shown component suspends, React has to hide its tree up to the closest `<Suspense>` boundary. However, from the user’s perspective, this can be disorienting.\n\nConsider this tab switcher:\n\n``` jsx\nimport React, { Suspense } from 'react';\nimport Tabs from './Tabs';\nimport Glimmer from './Glimmer';\n\nconst Comments = React.lazy(() => import('./Comments'));\nconst Photos = React.lazy(() => import('./Photos'));\n\nfunction MyComponent() {\n  const [tab, setTab] = React.useState('photos');\n  \n  function handleTabSelect(tab) {\n    setTab(tab);\n  };\n\n  return (\n    <div>\n      <Tabs onTabSelect={handleTabSelect} />\n      <Suspense fallback={<Glimmer />}>\n        {tab === 'photos' ? <Photos /> : <Comments />}\n      </Suspense>\n    </div>\n  );\n}\n```\n\nIn this example, if tab gets changed from `'photos'` to `'comments'`, but `Comments` suspends, the user will see a glimmer. This makes sense because the user no longer wants to see `Photos`, the `Comments` component is not ready to render anything, and React needs to keep the user experience consistent, so it has no choice but to show the `Glimmer` above.\n\nHowever, sometimes this user experience is not desirable. In particular, it is sometimes better to show the “old” UI while the new UI is being prepared. You can use the new [`startTransition`](react-api#starttransition) API to make React do this:\n\n``` jsx\nfunction handleTabSelect(tab) {\n  startTransition(() => {\n    setTab(tab);\n  });\n}\n```\n\nHere, you tell React that setting tab to `'comments'` is not an urgent update, but is a [transition](react-api#transitions) that may take some time. React will then keep the old UI in place and interactive, and will switch to showing `<Comments />` when it is ready. See [Transitions](react-api#transitions) for more info.\n\n### Error boundaries\n\nIf the other module fails to load (for example, due to network failure), it will trigger an error. You can handle these errors to show a nice user experience and manage recovery with [Error Boundaries](error-boundaries). Once you’ve created your Error Boundary, you can use it anywhere above your lazy components to display an error state when there’s a network error.\n\n``` jsx\nimport React, { Suspense } from 'react';\nimport MyErrorBoundary from './MyErrorBoundary';\n\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\nconst AnotherComponent = React.lazy(() => import('./AnotherComponent'));\n\nconst MyComponent = () => (\n  <div>\n    <MyErrorBoundary>\n      <Suspense fallback={<div>Loading...</div>}>\n        <section>\n          <OtherComponent />\n          <AnotherComponent />\n        </section>\n      </Suspense>\n    </MyErrorBoundary>\n  </div>\n);\n```\n\n## Route-based code splitting\n\nDeciding where in your app to introduce code splitting can be a bit tricky. You want to make sure you choose places that will split bundles evenly, but won’t disrupt the user experience.\n\nA good place to start is with routes. Most people on the web are used to page transitions taking some amount of time to load. You also tend to be re-rendering the entire page at once so your users are unlikely to be interacting with other elements on the page at the same time.\n\nHere’s an example of how to setup route-based code splitting into your app using libraries like [React Router](https://reactrouter.com/) with `React.lazy`.\n\n``` jsx\nimport React, { Suspense, lazy } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nconst Home = lazy(() => import('./routes/Home'));\nconst About = lazy(() => import('./routes/About'));\n\nconst App = () => (\n  <Router>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n      </Routes>\n    </Suspense>\n  </Router>\n);\n```\n\n## Named Exports\n\n`React.lazy` currently only supports default exports. If the module you want to import uses named exports, you can create an intermediate module that reexports it as the default. This ensures that tree shaking keeps working and that you don’t pull in unused components.\n\n``` jsx\n// ManyComponents.js\nexport const MyComponent = /* ... */;\nexport const MyUnusedComponent = /* ... */;\n```\n\n``` jsx\n// MyComponent.js\nexport { MyComponent as default } from \"./ManyComponents.js\";\n```\n\n``` jsx\n// MyApp.js\nimport React, { lazy } from 'react';\nconst MyComponent = lazy(() => import(\"./MyComponent.js\"));\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/code-splitting.html](https://reactjs.org/docs/code-splitting.html)"
- name: Compilers
  id: glossary#compilers
  summary: A JavaScript compiler takes JavaScript code, transforms it and returns JavaScript code in a different format
  belongs_to: Glossary of React Terms
  description: |-
    ## Compilers

    A JavaScript compiler takes JavaScript code, transforms it and returns JavaScript code in a different format. The most common use case is to take ES6 syntax and transform it into syntax that older browsers are capable of interpreting. [Babel](https://babeljs.io/) is the compiler most commonly used with React.
- name: Component State
  id: faq-state
  summary: setState() schedules an update to a component’s state object
  description: "# Component State\n\n### What does `setState` do?\n\n`setState()` schedules an update to a component’s `state` object. When state changes, the component responds by re-rendering.\n\n### What is the difference between `state` and `props`?\n\n[`props`](components-and-props) (short for “properties”) and [`state`](state-and-lifecycle) are both plain JavaScript objects. While both hold information that influences the output of render, they are different in one important way: `props` get passed *to* the component (similar to function parameters) whereas `state` is managed *within* the component (similar to variables declared within a function).\n\nHere are some good resources for further reading on when to use `props` vs `state`:\n\n- [Props vs State](https://github.com/uberVU/react-guide/blob/master/props-vs-state.md)\n- [ReactJS: Props vs. State](https://lucybain.com/blog/2016/react-state-vs-pros/)\n\n### Why is `setState` giving me the wrong value?\n\nIn React, both `this.props` and `this.state` represent the *rendered* values, i.e. what’s currently on the screen.\n\nCalls to `setState` are asynchronous - don’t rely on `this.state` to reflect the new value immediately after calling `setState`. Pass an updater function instead of an object if you need to compute values based on the current state (see below for details).\n\nExample of code that will *not* behave as expected:\n\n``` jsx\nincrementCount() {\n  // Note: this will *not* work as intended.\n  this.setState({count: this.state.count + 1});\n}\n\nhandleSomething() {\n  // Let's say `this.state.count` starts at 0.\n  this.incrementCount();\n  this.incrementCount();\n  this.incrementCount();\n  // When React re-renders the component, `this.state.count` will be 1, but you expected 3.\n\n  // This is because `incrementCount()` function above reads from `this.state.count`,\n  // but React doesn't update `this.state.count` until the component is re-rendered.\n  // So `incrementCount()` ends up reading `this.state.count` as 0 every time, and sets it to 1.\n\n  // The fix is described below!\n}\n```\n\nSee below for how to fix this problem.\n\n### How do I update state with values that depend on the current state?\n\nPass a function instead of an object to `setState` to ensure the call always uses the most updated version of state (see below).\n\n### What is the difference between passing an object or a function in `setState`?\n\nPassing an update function allows you to access the current state value inside the updater. Since `setState` calls are batched, this lets you chain updates and ensure they build on top of each other instead of conflicting:\n\n``` jsx\nincrementCount() {\n  this.setState((state) => {\n    // Important: read `state` instead of `this.state` when updating.\n    return {count: state.count + 1}\n  });\n}\n\nhandleSomething() {\n  // Let's say `this.state.count` starts at 0.\n  this.incrementCount();\n  this.incrementCount();\n  this.incrementCount();\n\n  // If you read `this.state.count` now, it would still be 0.\n  // But when React re-renders the component, it will be 3.\n}\n```\n\n[Learn more about setState](react-component#setstate)\n\n### When is `setState` asynchronous?\n\nCurrently, `setState` is asynchronous inside event handlers.\n\nThis ensures, for example, that if both `Parent` and `Child` call `setState` during a click event, `Child` isn’t re-rendered twice. Instead, React “flushes” the state updates at the end of the browser event. This results in significant performance improvements in larger apps.\n\nThis is an implementation detail so avoid relying on it directly. In the future versions, React will batch updates by default in more cases.\n\n### Why doesn’t React update `this.state` synchronously?\n\nAs explained in the previous section, React intentionally “waits” until all components call `setState()` in their event handlers before starting to re-render. This boosts performance by avoiding unnecessary re-renders.\n\nHowever, you might still be wondering why React doesn’t just update `this.state` immediately without re-rendering.\n\nThere are two main reasons:\n\n- This would break the consistency between `props` and `state`, causing issues that are very hard to debug.\n- This would make some of the new features we’re working on impossible to implement.\n\nThis [GitHub comment](https://github.com/facebook/react/issues/11527#issuecomment-360199710) dives deep into the specific examples.\n\n### Should I use a state management library like Redux or MobX?\n\n[Maybe.](https://redux.js.org/faq/general#when-should-i-use-redux)\n\nIt’s a good idea to get to know React first, before adding in additional libraries. You can build quite complex applications using only React.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/faq-state.html](https://reactjs.org/docs/faq-state.html)"
- name: componentDidCatch()
  id: react-component#componentdidcatch
  summary: This lifecycle is invoked after an error has been thrown by a descendant component
  belongs_to: React.Component
  description: |-
    ### `componentDidCatch()`

    ``` jsx
    componentDidCatch(error, info)
    ```

    This lifecycle is invoked after an error has been thrown by a descendant component. It receives two parameters:

    1.  `error` - The error that was thrown.
    2.  `info` - An object with a `componentStack` key containing [information about which component threw the error](error-boundaries#component-stack-traces).

    `componentDidCatch()` is called during the “commit” phase, so side-effects are permitted. It should be used for things like logging errors:

    ``` jsx
    class ErrorBoundary extends React.Component {
      constructor(props) {
        super(props);
        this.state = { hasError: false };
      }

      static getDerivedStateFromError(error) {
        // Update state so the next render will show the fallback UI.
        return { hasError: true };
      }

      componentDidCatch(error, info) {
        // Example "componentStack":
        //   in ComponentThatThrows (created by App)
        //   in ErrorBoundary (created by App)
        //   in div (created by App)
        //   in App
        logComponentStackToMyService(info.componentStack);
      }

      render() {
        if (this.state.hasError) {
          // You can render any custom fallback UI
          return <h1>Something went wrong.</h1>;
        }

        return this.props.children;
      }
    }
    ```

    Production and development builds of React slightly differ in the way `componentDidCatch()` handles errors.

    On development, the errors will bubble up to `window`, this means that any `window.onerror` or `window.addEventListener('error', callback)` will intercept the errors that have been caught by `componentDidCatch()`.

    On production, instead, the errors will not bubble up, which means any ancestor error handler will only receive errors not explicitly caught by `componentDidCatch()`.

    > Note
    >
    > In the event of an error, you can render a fallback UI with `componentDidCatch()` by calling `setState`, but this will be deprecated in a future release. Use `static getDerivedStateFromError()` to handle fallback rendering instead.

    ### Legacy Lifecycle Methods

    The lifecycle methods below are marked as “legacy”. They still work, but we don’t recommend using them in the new code. You can learn more about migrating away from legacy lifecycle methods in [this blog post](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html).
- name: componentDidMount()
  id: react-component#componentdidmount
  summary: componentDidMount() is invoked immediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go here
  belongs_to: React.Component
  description: |-
    ### `componentDidMount()`

    ``` jsx
    componentDidMount()
    ```

    `componentDidMount()` is invoked immediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.

    This method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in `componentWillUnmount()`.

    You **may call `setState()` immediately** in `componentDidMount()`. It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the `render()` will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. In most cases, you should be able to assign the initial state in the `constructor()` instead. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.
- name: componentDidUpdate()
  id: react-component#componentdidupdate
  summary: componentDidUpdate() is invoked immediately after updating occurs
  belongs_to: React.Component
  description: |-
    ### `componentDidUpdate()`

    ``` jsx
    componentDidUpdate(prevProps, prevState, snapshot)
    ```

    `componentDidUpdate()` is invoked immediately after updating occurs. This method is not called for the initial render.

    Use this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).

    ``` jsx
    componentDidUpdate(prevProps) {
      // Typical usage (don't forget to compare props):
      if (this.props.userID !== prevProps.userID) {
        this.fetchData(this.props.userID);
      }
    }
    ```

    You **may call `setState()` immediately** in `componentDidUpdate()` but note that **it must be wrapped in a condition** like in the example above, or you’ll cause an infinite loop. It would also cause an extra re-rendering which, while not visible to the user, can affect the component performance. If you’re trying to “mirror” some state to a prop coming from above, consider using the prop directly instead. Read more about [why copying props into state causes bugs](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html).

    If your component implements the `getSnapshotBeforeUpdate()` lifecycle (which is rare), the value it returns will be passed as a third “snapshot” parameter to `componentDidUpdate()`. Otherwise this parameter will be undefined.

    > Note
    >
    > `componentDidUpdate()` will not be invoked if [`shouldComponentUpdate()`](#shouldcomponentupdate) returns false.
- name: Components
  id: glossary#components
  summary: React components are small, reusable pieces of code that return a React element to be rendered to the page
  belongs_to: Glossary of React Terms
  description: |-
    ## [Components](components-and-props)

    React components are small, reusable pieces of code that return a React element to be rendered to the page. The simplest version of React component is a plain JavaScript function that returns a React element:

    ``` jsx
    function Welcome(props) {
      return <h1>Hello, {props.name}</h1>;
    }
    ```

    Components can also be ES6 classes:

    ``` jsx
    class Welcome extends React.Component {
      render() {
        return <h1>Hello, {this.props.name}</h1>;
      }
    }
    ```

    Components can be broken down into distinct pieces of functionality and used within other components. Components can return other components, arrays, strings and numbers. A good rule of thumb is that if a part of your UI is used several times (Button, Panel, Avatar), or is complex enough on its own (App, FeedStory, Comment), it is a good candidate to be a reusable component. Component names should also always start with a capital letter (`<Wrapper/>` **not** `<wrapper/>`). See [this documentation](components-and-props#rendering-a-component) for more information on rendering components.
- name: Components and Props
  id: components-and-props
  summary: Components let you split the UI into independent, reusable pieces, and think about each piece in isolation
  description: "# Components and Props\n\nComponents let you split the UI into independent, reusable pieces, and think about each piece in isolation. This page provides an introduction to the idea of components. You can find a [detailed component API reference here](react-component).\n\nConceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.\n\n## Function and Class Components\n\nThe simplest way to define a component is to write a JavaScript function:\n\n``` jsx\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\n\nThis function is a valid React component because it accepts a single “props” (which stands for properties) object argument with data and returns a React element. We call such components “function components” because they are literally JavaScript functions.\n\nYou can also use an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes) to define a component:\n\n``` jsx\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\nThe above two components are equivalent from React’s point of view.\n\nFunction and Class components both have some additional features that we will discuss in the [next sections](state-and-lifecycle).\n\n## Rendering a Component\n\nPreviously, we only encountered React elements that represent DOM tags:\n\n``` jsx\nconst element = <div />;\n```\n\nHowever, elements can also represent user-defined components:\n\n``` jsx\nconst element = <Welcome name=\"Sara\" />;\n```\n\nWhen React sees an element representing a user-defined component, it passes JSX attributes and children to this component as a single object. We call this object “props”.\n\nFor example, this code renders “Hello, Sara” on the page:\n\n``` jsx\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nconst element = <Welcome name=\"Sara\" />;\nroot.render(element);\n```\n\n**[Try it on CodePen](https://codepen.io/gaearon/pen/YGYmEG?editors=1010)**\n\nLet’s recap what happens in this example:\n\n1.  We call `root.render()` with the `<Welcome name=\"Sara\" />` element.\n2.  React calls the `Welcome` component with `{name: 'Sara'}` as the props.\n3.  Our `Welcome` component returns a `<h1>Hello, Sara</h1>` element as the result.\n4.  React DOM efficiently updates the DOM to match `<h1>Hello, Sara</h1>`.\n\n> **Note:** Always start component names with a capital letter.\n>\n> React treats components starting with lowercase letters as DOM tags. For example, `<div />` represents an HTML div tag, but `<Welcome />` represents a component and requires `Welcome` to be in scope.\n>\n> To learn more about the reasoning behind this convention, please read [JSX In Depth](jsx-in-depth#user-defined-components-must-be-capitalized).\n\n## Composing Components\n\nComponents can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components.\n\nFor example, we can create an `App` component that renders `Welcome` many times:\n\n``` jsx\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return (\n    <div>\n      <Welcome name=\"Sara\" />\n      <Welcome name=\"Cahal\" />\n      <Welcome name=\"Edite\" />\n    </div>\n  );\n}\n```\n\n**[Try it on CodePen](https://codepen.io/gaearon/pen/KgQKPr?editors=1010)**\n\nTypically, new React apps have a single `App` component at the very top. However, if you integrate React into an existing app, you might start bottom-up with a small component like `Button` and gradually work your way to the top of the view hierarchy.\n\n## Extracting Components\n\nDon’t be afraid to split components into smaller components.\n\nFor example, consider this `Comment` component:\n\n``` jsx\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <div className=\"UserInfo\">\n        <img className=\"Avatar\"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        />\n        <div className=\"UserInfo-name\">\n          {props.author.name}\n        </div>\n      </div>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n```\n\n**[Try it on CodePen](https://codepen.io/gaearon/pen/VKQwEo?editors=1010)**\n\nIt accepts `author` (an object), `text` (a string), and `date` (a date) as props, and describes a comment on a social media website.\n\nThis component can be tricky to change because of all the nesting, and it is also hard to reuse individual parts of it. Let’s extract a few components from it.\n\nFirst, we will extract `Avatar`:\n\n``` jsx\nfunction Avatar(props) {\n  return (\n    <img className=\"Avatar\"      src={props.user.avatarUrl}      alt={props.user.name}    />\n  );\n}\n```\n\nThe `Avatar` doesn’t need to know that it is being rendered inside a `Comment`. This is why we have given its prop a more generic name: `user` rather than `author`.\n\nWe recommend naming props from the component’s own point of view rather than the context in which it is being used.\n\nWe can now simplify `Comment` a tiny bit:\n\n``` jsx\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <div className=\"UserInfo\">\n        <Avatar user={props.author} />\n        <div className=\"UserInfo-name\">\n          {props.author.name}\n        </div>\n      </div>\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n```\n\nNext, we will extract a `UserInfo` component that renders an `Avatar` next to the user’s name:\n\n``` jsx\nfunction UserInfo(props) {\n  return (\n    <div className=\"UserInfo\">\n      <Avatar user={props.user} />\n      <div className=\"UserInfo-name\">\n        {props.user.name}\n      </div>\n    </div>\n  );\n}\n```\n\nThis lets us simplify `Comment` even further:\n\n``` jsx\nfunction Comment(props) {\n  return (\n    <div className=\"Comment\">\n      <UserInfo user={props.author} />\n      <div className=\"Comment-text\">\n        {props.text}\n      </div>\n      <div className=\"Comment-date\">\n        {formatDate(props.date)}\n      </div>\n    </div>\n  );\n}\n```\n\n**[Try it on CodePen](https://codepen.io/gaearon/pen/rrJNJY?editors=1010)**\n\nExtracting components might seem like grunt work at first, but having a palette of reusable components pays off in larger apps. A good rule of thumb is that if a part of your UI is used several times (`Button`, `Panel`, `Avatar`), or is complex enough on its own (`App`, `FeedStory`, `Comment`), it is a good candidate to be extracted to a separate component.\n\n## Props are Read-Only\n\nWhether you declare a component [as a function or a class](#function-and-class-components), it must never modify its own props. Consider this `sum` function:\n\n``` jsx\nfunction sum(a, b) {\n  return a + b;\n}\n```\n\nSuch functions are called [“pure”](https://en.wikipedia.org/wiki/Pure_function) because they do not attempt to change their inputs, and always return the same result for the same inputs.\n\nIn contrast, this function is impure because it changes its own input:\n\n``` jsx\nfunction withdraw(account, amount) {\n  account.total -= amount;\n}\n```\n\nReact is pretty flexible but it has a single strict rule:\n\n**All React components must act like pure functions with respect to their props.**\n\nOf course, application UIs are dynamic and change over time. In the [next section](state-and-lifecycle), we will introduce a new concept of “state”. State allows React components to change their output over time in response to user actions, network responses, and anything else, without violating this rule.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/components-and-props.html](https://reactjs.org/docs/components-and-props.html)"
- name: componentWillUnmount()
  id: react-component#componentwillunmount
  summary: componentWillUnmount() is invoked immediately before a component is unmounted and destroyed
  belongs_to: React.Component
  description: |-
    ### `componentWillUnmount()`

    ``` jsx
    componentWillUnmount()
    ```

    `componentWillUnmount()` is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in `componentDidMount()`.

    You **should not call `setState()`** in `componentWillUnmount()` because the component will never be re-rendered. Once a component instance is unmounted, it will never be mounted again.

    ### Rarely Used Lifecycle Methods

    The methods in this section correspond to uncommon use cases. They’re handy once in a while, but most of your components probably don’t need any of them. **You can see most of the methods below on [this lifecycle diagram](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/) if you click the “Show less common lifecycles” checkbox at the top of it.**
- name: Composition vs Inheritance
  id: composition-vs-inheritance
  summary: React has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components
  description: "# Composition vs Inheritance\n\nReact has a powerful composition model, and we recommend using composition instead of inheritance to reuse code between components.\n\nIn this section, we will consider a few problems where developers new to React often reach for inheritance, and show how we can solve them with composition.\n\n## Containment\n\nSome components don’t know their children ahead of time. This is especially common for components like `Sidebar` or `Dialog` that represent generic “boxes”.\n\nWe recommend that such components use the special `children` prop to pass children elements directly into their output:\n\n``` jsx\nfunction FancyBorder(props) {\n  return (\n    <div className={'FancyBorder FancyBorder-' + props.color}>\n      {props.children}\n    </div>\n  );\n}\n```\n\nThis lets other components pass arbitrary children to them by nesting the JSX:\n\n``` jsx\nfunction WelcomeDialog() {\n  return (\n    <FancyBorder color=\"blue\">\n      <h1 className=\"Dialog-title\">\n        Welcome\n      </h1>\n      <p className=\"Dialog-message\">\n        Thank you for visiting our spacecraft!\n      </p>\n    </FancyBorder>\n  );\n}\n```\n\n**[Try it on CodePen](https://codepen.io/gaearon/pen/ozqNOV?editors=0010)**\n\nAnything inside the `<FancyBorder>` JSX tag gets passed into the `FancyBorder` component as a `children` prop. Since `FancyBorder` renders `{props.children}` inside a `<div>`, the passed elements appear in the final output.\n\nWhile this is less common, sometimes you might need multiple “holes” in a component. In such cases you may come up with your own convention instead of using `children`:\n\n``` jsx\nfunction SplitPane(props) {\n  return (\n    <div className=\"SplitPane\">\n      <div className=\"SplitPane-left\">\n        {props.left}\n      </div>\n      <div className=\"SplitPane-right\">\n        {props.right}\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <SplitPane\n      left={\n        <Contacts />      }\n      right={\n        <Chat />      } />\n  );\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/gwZOJp?editors=0010)\n\nReact elements like `<Contacts />` and `<Chat />` are just objects, so you can pass them as props like any other data. This approach may remind you of “slots” in other libraries but there are no limitations on what you can pass as props in React.\n\n## Specialization\n\nSometimes we think about components as being “special cases” of other components. For example, we might say that a `WelcomeDialog` is a special case of `Dialog`.\n\nIn React, this is also achieved by composition, where a more “specific” component renders a more “generic” one and configures it with props:\n\n``` jsx\nfunction Dialog(props) {\n  return (\n    <FancyBorder color=\"blue\">\n      <h1 className=\"Dialog-title\">\n        {props.title}\n      </h1>\n      <p className=\"Dialog-message\">\n        {props.message}\n      </p>\n    </FancyBorder>\n  );\n}\n\nfunction WelcomeDialog() {\n  return (\n    <Dialog      title=\"Welcome\"      message=\"Thank you for visiting our spacecraft!\" />\n  );\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/kkEaOZ?editors=0010)\n\nComposition works equally well for components defined as classes:\n\n``` jsx\nfunction Dialog(props) {\n  return (\n    <FancyBorder color=\"blue\">\n      <h1 className=\"Dialog-title\">\n        {props.title}\n      </h1>\n      <p className=\"Dialog-message\">\n        {props.message}\n      </p>\n      {props.children}\n    </FancyBorder>\n  );\n}\n\nclass SignUpDialog extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSignUp = this.handleSignUp.bind(this);\n    this.state = {login: ''};\n  }\n\n  render() {\n    return (\n      <Dialog title=\"Mars Exploration Program\"\n              message=\"How should we refer to you?\">\n        <input value={this.state.login}               onChange={this.handleChange} />\n        <button onClick={this.handleSignUp}>\n          Sign Me Up!\n        </button>\n      </Dialog>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({login: e.target.value});\n  }\n\n  handleSignUp() {\n    alert(`Welcome aboard, ${this.state.login}!`);\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/gwZbYa?editors=0010)\n\n## So What About Inheritance?\n\nAt Facebook, we use React in thousands of components, and we haven’t found any use cases where we would recommend creating component inheritance hierarchies.\n\nProps and composition give you all the flexibility you need to customize a component’s look and behavior in an explicit and safe way. Remember that components may accept arbitrary props, including primitive values, React elements, or functions.\n\nIf you want to reuse non-UI functionality between components, we suggest extracting it into a separate JavaScript module. The components may import it and use that function, object, or a class, without extending it.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/composition-vs-inheritance.html](https://reactjs.org/docs/composition-vs-inheritance.html)"
- name: Conditional Rendering
  id: conditional-rendering
  summary: In React, you can create distinct components that encapsulate behavior you need
  description: "# Conditional Rendering\n\nIn React, you can create distinct components that encapsulate behavior you need. Then, you can render only some of them, depending on the state of your application.\n\nConditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like [`if`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else) or the [conditional operator](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator) to create elements representing the current state, and let React update the UI to match them.\n\nConsider these two components:\n\n``` jsx\nfunction UserGreeting(props) {\n  return <h1>Welcome back!</h1>;\n}\n\nfunction GuestGreeting(props) {\n  return <h1>Please sign up.</h1>;\n}\n```\n\nWe’ll create a `Greeting` component that displays either of these components depending on whether a user is logged in:\n\n``` jsx\nfunction Greeting(props) {\n  const isLoggedIn = props.isLoggedIn;\n  if (isLoggedIn) {\n    return <UserGreeting />;\n  }\n  return <GuestGreeting />;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root')); \n// Try changing to isLoggedIn={true}:\nroot.render(<Greeting isLoggedIn={false} />);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/ZpVxNq?editors=0011)\n\nThis example renders a different greeting depending on the value of `isLoggedIn` prop.\n\n### Element Variables\n\nYou can use variables to store elements. This can help you conditionally render a part of the component while the rest of the output doesn’t change.\n\nConsider these two new components representing Logout and Login buttons:\n\n``` jsx\nfunction LoginButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Login\n    </button>\n  );\n}\n\nfunction LogoutButton(props) {\n  return (\n    <button onClick={props.onClick}>\n      Logout\n    </button>\n  );\n}\n```\n\nIn the example below, we will create a [stateful component](state-and-lifecycle#adding-local-state-to-a-class) called `LoginControl`.\n\nIt will render either `<LoginButton />` or `<LogoutButton />` depending on its current state. It will also render a `<Greeting />` from the previous example:\n\n``` jsx\nclass LoginControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleLoginClick = this.handleLoginClick.bind(this);\n    this.handleLogoutClick = this.handleLogoutClick.bind(this);\n    this.state = {isLoggedIn: false};\n  }\n\n  handleLoginClick() {\n    this.setState({isLoggedIn: true});\n  }\n\n  handleLogoutClick() {\n    this.setState({isLoggedIn: false});\n  }\n\n  render() {\n    const isLoggedIn = this.state.isLoggedIn;\n    let button;\n\n    if (isLoggedIn) {\n      button = <LogoutButton onClick={this.handleLogoutClick} />;\n    } else {\n      button = <LoginButton onClick={this.handleLoginClick} />;\n    }\n\n    return (\n      <div>\n        <Greeting isLoggedIn={isLoggedIn} />\n        {button}\n      </div>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root')); \nroot.render(<LoginControl />);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/QKzAgB?editors=0010)\n\nWhile declaring a variable and using an `if` statement is a fine way to conditionally render a component, sometimes you might want to use a shorter syntax. There are a few ways to inline conditions in JSX, explained below.\n\n### Inline If with Logical && Operator\n\nYou may [embed expressions in JSX](introducing-jsx#embedding-expressions-in-jsx) by wrapping them in curly braces. This includes the JavaScript logical `&&` operator. It can be handy for conditionally including an element:\n\n``` jsx\nfunction Mailbox(props) {\n  const unreadMessages = props.unreadMessages;\n  return (\n    <div>\n      <h1>Hello!</h1>\n      {unreadMessages.length > 0 &&\n        <h2>\n          You have {unreadMessages.length} unread messages.\n        </h2>\n      }\n    </div>\n  );\n}\n\nconst messages = ['React', 'Re: React', 'Re:Re: React'];\n\nconst root = ReactDOM.createRoot(document.getElementById('root')); \nroot.render(<Mailbox unreadMessages={messages} />);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/ozJddz?editors=0010)\n\nIt works because in JavaScript, `true && expression` always evaluates to `expression`, and `false && expression` always evaluates to `false`.\n\nTherefore, if the condition is `true`, the element right after `&&` will appear in the output. If it is `false`, React will ignore and skip it.\n\nNote that returning a falsy expression will still cause the element after `&&` to be skipped but will return the falsy expression. In the example below, `<div>0</div>` will be returned by the render method.\n\n``` jsx\nrender() {\n  const count = 0;\n  return (\n    <div>\n      {count && <h1>Messages: {count}</h1>}\n    </div>\n  );\n}\n```\n\n### Inline If-Else with Conditional Operator\n\nAnother method for conditionally rendering elements inline is to use the JavaScript conditional operator [`condition ? true : false`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Conditional_Operator).\n\nIn the example below, we use it to conditionally render a small block of text.\n\n``` jsx\nrender() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      The user is <b>{isLoggedIn ? 'currently' : 'not'}</b> logged in.\n    </div>\n  );\n}\n```\n\nIt can also be used for larger expressions although it is less obvious what’s going on:\n\n``` jsx\nrender() {\n  const isLoggedIn = this.state.isLoggedIn;\n  return (\n    <div>\n      {isLoggedIn\n        ? <LogoutButton onClick={this.handleLogoutClick} />\n        : <LoginButton onClick={this.handleLoginClick} />\n      }\n    </div>\n  );\n}\n```\n\nJust like in JavaScript, it is up to you to choose an appropriate style based on what you and your team consider more readable. Also remember that whenever conditions become too complex, it might be a good time to [extract a component](components-and-props#extracting-components).\n\n### Preventing Component from Rendering\n\nIn rare cases you might want a component to hide itself even though it was rendered by another component. To do this return `null` instead of its render output.\n\nIn the example below, the `<WarningBanner />` is rendered depending on the value of the prop called `warn`. If the value of the prop is `false`, then the component does not render:\n\n``` jsx\nfunction WarningBanner(props) {\n  if (!props.warn) {\n    return null;\n  }\n\n  return (\n    <div className=\"warning\">\n      Warning!\n    </div>\n  );\n}\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {showWarning: true};\n    this.handleToggleClick = this.handleToggleClick.bind(this);\n  }\n\n  handleToggleClick() {\n    this.setState(state => ({\n      showWarning: !state.showWarning\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <WarningBanner warn={this.state.showWarning} />\n        <button onClick={this.handleToggleClick}>\n          {this.state.showWarning ? 'Hide' : 'Show'}\n        </button>\n      </div>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root')); \nroot.render(<Page />);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/Xjoqwm?editors=0010)\n\nReturning `null` from a component’s `render` method does not affect the firing of the component’s lifecycle methods. For instance `componentDidUpdate` will still be called.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/conditional-rendering.html](https://reactjs.org/docs/conditional-rendering.html)"
- name: constructor()
  id: react-component#constructor
  summary: If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component
  belongs_to: React.Component
  description: |-
    ### `constructor()`

    ``` jsx
    constructor(props)
    ```

    **If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.**

    The constructor for a React component is called before it is mounted. When implementing the constructor for a `React.Component` subclass, you should call `super(props)` before any other statement. Otherwise, `this.props` will be undefined in the constructor, which can lead to bugs.

    Typically, in React constructors are only used for two purposes:

    - Initializing [local state](state-and-lifecycle) by assigning an object to `this.state`.
    - Binding [event handler](handling-events) methods to an instance.

    You **should not call `setState()`** in the `constructor()`. Instead, if your component needs to use local state, **assign the initial state to `this.state`** directly in the constructor:

    ``` jsx
    constructor(props) {
      super(props);
      // Don't call this.setState() here!
      this.state = { counter: 0 };
      this.handleClick = this.handleClick.bind(this);
    }
    ```

    Constructor is the only place where you should assign `this.state` directly. In all other methods, you need to use `this.setState()` instead.

    Avoid introducing any side-effects or subscriptions in the constructor. For those use cases, use `componentDidMount()` instead.

    > Note
    >
    > **Avoid copying props into state! This is a common mistake:**
    >
    > ``` jsx
    > constructor(props) {
    >  super(props);
    >  // Don't do this!
    >  this.state = { color: props.color };
    > }
    > ```
    >
    > The problem is that it’s both unnecessary (you can use `this.props.color` directly instead), and creates bugs (updates to the `color` prop won’t be reflected in the state).
    >
    > **Only use this pattern if you intentionally want to ignore prop updates.** In that case, it makes sense to rename the prop to be called `initialColor` or `defaultColor`. You can then force a component to “reset” its internal state by [changing its `key`](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key) when necessary.
    >
    > Read our [blog post on avoiding derived state](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html) to learn about what to do if you think you need some state to depend on the props.
- name: Context
  id: context
  summary: Context provides a way to pass data through the component tree without having to pass props down manually at every level
  description: "# Context\n\nContext provides a way to pass data through the component tree without having to pass props down manually at every level.\n\nIn a typical React application, data is passed top-down (parent to child) via props, but such usage can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.\n\n- [When to Use Context](#when-to-use-context)\n\n- [Before You Use Context](#before-you-use-context)\n\n- [API](#api)\n\n  - [React.createContext](#reactcreatecontext)\n  - [Context.Provider](#contextprovider)\n  - [Class.contextType](#classcontexttype)\n  - [Context.Consumer](#contextconsumer)\n  - [Context.displayName](#contextdisplayname)\n\n- [Examples](#examples)\n\n  - [Dynamic Context](#dynamic-context)\n  - [Updating Context from a Nested Component](#updating-context-from-a-nested-component)\n  - [Consuming Multiple Contexts](#consuming-multiple-contexts)\n\n- [Caveats](#caveats)\n\n- [Legacy API](#legacy-api)\n\n## When to Use Context\n\nContext is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language. For example, in the code below we manually thread through a “theme” prop in order to style the Button component:\n\n``` jsx\nclass App extends React.Component {\n  render() {\n    return <Toolbar theme=\"dark\" />;\n  }\n}\n\nfunction Toolbar(props) {\n  // The Toolbar component must take an extra \"theme\" prop\n  // and pass it to the ThemedButton. This can become painful\n  // if every single button in the app needs to know the theme\n  // because it would have to be passed through all components.\n  return (\n    <div>\n      <ThemedButton theme={props.theme} />\n    </div>\n  );\n}\n\nclass ThemedButton extends React.Component {\n  render() {\n    return <Button theme={this.props.theme} />;\n  }\n}\n```\n\nUsing context, we can avoid passing props through intermediate elements:\n\n``` jsx\n// Context lets us pass a value deep into the component tree\n// without explicitly threading it through every component.\n// Create a context for the current theme (with \"light\" as the default).\nconst ThemeContext = React.createContext('light');\n\nclass App extends React.Component {\n  render() {\n    // Use a Provider to pass the current theme to the tree below.\n    // Any component can read it, no matter how deep it is.\n    // In this example, we're passing \"dark\" as the current value.\n    return (\n      <ThemeContext.Provider value=\"dark\">\n        <Toolbar />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\n// A component in the middle doesn't have to\n// pass the theme down explicitly anymore.\nfunction Toolbar() {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nclass ThemedButton extends React.Component {\n  // Assign a contextType to read the current theme context.\n  // React will find the closest theme Provider above and use its value.\n  // In this example, the current theme is \"dark\".\n  static contextType = ThemeContext;\n  render() {\n    return <Button theme={this.context} />;\n  }\n}\n```\n\n## Before You Use Context\n\nContext is primarily used when some data needs to be accessible by *many* components at different nesting levels. Apply it sparingly because it makes component reuse more difficult.\n\n**If you only want to avoid passing some props through many levels, [component composition](composition-vs-inheritance) is often a simpler solution than context.**\n\nFor example, consider a `Page` component that passes a `user` and `avatarSize` prop several levels down so that deeply nested `Link` and `Avatar` components can read it:\n\n``` jsx\n<Page user={user} avatarSize={avatarSize} />\n// ... which renders ...\n<PageLayout user={user} avatarSize={avatarSize} />\n// ... which renders ...\n<NavigationBar user={user} avatarSize={avatarSize} />\n// ... which renders ...\n<Link href={user.permalink}>\n  <Avatar user={user} size={avatarSize} />\n</Link>\n```\n\nIt might feel redundant to pass down the `user` and `avatarSize` props through many levels if in the end only the `Avatar` component really needs it. It’s also annoying that whenever the `Avatar` component needs more props from the top, you have to add them at all the intermediate levels too.\n\nOne way to solve this issue **without context** is to [pass down the `Avatar` component itself](composition-vs-inheritance#containment) so that the intermediate components don’t need to know about the `user` or `avatarSize` props:\n\n``` jsx\nfunction Page(props) {\n  const user = props.user;\n  const userLink = (\n    <Link href={user.permalink}>\n      <Avatar user={user} size={props.avatarSize} />\n    </Link>\n  );\n  return <PageLayout userLink={userLink} />;\n}\n\n// Now, we have:\n<Page user={user} avatarSize={avatarSize} />\n// ... which renders ...\n<PageLayout userLink={...} />\n// ... which renders ...\n<NavigationBar userLink={...} />\n// ... which renders ...\n{props.userLink}\n```\n\nWith this change, only the top-most Page component needs to know about the `Link` and `Avatar` components’ use of `user` and `avatarSize`.\n\nThis *inversion of control* can make your code cleaner in many cases by reducing the amount of props you need to pass through your application and giving more control to the root components. Such inversion, however, isn’t the right choice in every case; moving more complexity higher in the tree makes those higher-level components more complicated and forces the lower-level components to be more flexible than you may want.\n\nYou’re not limited to a single child for a component. You may pass multiple children, or even have multiple separate “slots” for children, [as documented here](composition-vs-inheritance#containment):\n\n``` jsx\nfunction Page(props) {\n  const user = props.user;\n  const content = <Feed user={user} />;\n  const topBar = (\n    <NavigationBar>\n      <Link href={user.permalink}>\n        <Avatar user={user} size={props.avatarSize} />\n      </Link>\n    </NavigationBar>\n  );\n  return (\n    <PageLayout\n      topBar={topBar}\n      content={content}\n    />\n  );\n}\n```\n\nThis pattern is sufficient for many cases when you need to decouple a child from its immediate parents. You can take it even further with [render props](render-props) if the child needs to communicate with the parent before rendering.\n\nHowever, sometimes the same data needs to be accessible by many components in the tree, and at different nesting levels. Context lets you “broadcast” such data, and changes to it, to all components below. Common examples where using context might be simpler than the alternatives include managing the current locale, theme, or a data cache.\n\n## API\n\n### `React.createContext`\n\n``` jsx\nconst MyContext = React.createContext(defaultValue);\n```\n\nCreates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching `Provider` above it in the tree.\n\nThe `defaultValue` argument is **only** used when a component does not have a matching Provider above it in the tree. This default value can be helpful for testing components in isolation without wrapping them. Note: passing `undefined` as a Provider value does not cause consuming components to use `defaultValue`.\n\n### `Context.Provider`\n\n``` jsx\n<MyContext.Provider value={/* some value */}>\n```\n\nEvery Context object comes with a Provider React component that allows consuming components to subscribe to context changes.\n\nThe Provider component accepts a `value` prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.\n\nAll consumers that are descendants of a Provider will re-render whenever the Provider’s `value` prop changes. The propagation from Provider to its descendant consumers (including [`.contextType`](#classcontexttype) and [`useContext`](hooks-reference#usecontext)) is not subject to the `shouldComponentUpdate` method, so the consumer is updated even when an ancestor component skips an update.\n\nChanges are determined by comparing the new and old values using the same algorithm as [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description).\n\n> Note\n>\n> The way changes are determined can cause some issues when passing objects as `value`: see [Caveats](#caveats).\n\n### `Class.contextType`\n\n``` jsx\nclass MyClass extends React.Component {\n  componentDidMount() {\n    let value = this.context;\n    /* perform a side-effect at mount using the value of MyContext */\n  }\n  componentDidUpdate() {\n    let value = this.context;\n    /* ... */\n  }\n  componentWillUnmount() {\n    let value = this.context;\n    /* ... */\n  }\n  render() {\n    let value = this.context;\n    /* render something based on the value of MyContext */\n  }\n}\nMyClass.contextType = MyContext;\n```\n\nThe `contextType` property on a class can be assigned a Context object created by [`React.createContext()`](#reactcreatecontext). Using this property lets you consume the nearest current value of that Context type using `this.context`. You can reference this in any of the lifecycle methods including the render function.\n\n> Note:\n>\n> You can only subscribe to a single context using this API. If you need to read more than one see [Consuming Multiple Contexts](#consuming-multiple-contexts).\n>\n> If you are using the experimental [public class fields syntax](https://babeljs.io/docs/plugins/transform-class-properties/), you can use a **static** class field to initialize your `contextType`.\n\n``` jsx\nclass MyClass extends React.Component {\n  static contextType = MyContext;\n  render() {\n    let value = this.context;\n    /* render something based on the value */\n  }\n}\n```\n\n### `Context.Consumer`\n\n``` jsx\n<MyContext.Consumer>\n  {value => /* render something based on the context value */}\n</MyContext.Consumer>\n```\n\nA React component that subscribes to context changes. Using this component lets you subscribe to a context within a [function component](components-and-props#function-and-class-components).\n\nRequires a [function as a child](render-props#using-props-other-than-render). The function receives the current context value and returns a React node. The `value` argument passed to the function will be equal to the `value` prop of the closest Provider for this context above in the tree. If there is no Provider for this context above, the `value` argument will be equal to the `defaultValue` that was passed to `createContext()`.\n\n> Note\n>\n> For more information about the ‘function as a child’ pattern, see [render props](render-props).\n\n### `Context.displayName`\n\nContext object accepts a `displayName` string property. React DevTools uses this string to determine what to display for the context.\n\nFor example, the following component will appear as MyDisplayName in the DevTools:\n\n``` jsx\nconst MyContext = React.createContext(/* some value */);\nMyContext.displayName = 'MyDisplayName';\n\n<MyContext.Provider> // \"MyDisplayName.Provider\" in DevTools\n<MyContext.Consumer> // \"MyDisplayName.Consumer\" in DevTools\n```\n\n## Examples\n\n### Dynamic Context\n\nA more complex example with dynamic values for the theme:\n\n**theme-context.js**\n\n``` jsx\nexport const themes = {\n  light: {\n    foreground: '#000000',\n    background: '#eeeeee',\n  },\n  dark: {\n    foreground: '#ffffff',\n    background: '#222222',\n  },\n};\n\nexport const ThemeContext = React.createContext(\n  themes.dark // default value\n);\n```\n\n**themed-button.js**\n\n``` jsx\nimport {ThemeContext} from './theme-context';\n\nclass ThemedButton extends React.Component {\n  render() {\n    let props = this.props;\n    let theme = this.context;\n    return (\n      <button\n        {...props}\n        style={{backgroundColor: theme.background}}\n      />\n    );\n  }\n}\nThemedButton.contextType = ThemeContext;\n\nexport default ThemedButton;\n```\n\n**app.js**\n\n``` jsx\nimport {ThemeContext, themes} from './theme-context';\nimport ThemedButton from './themed-button';\n\n// An intermediate component that uses the ThemedButton\nfunction Toolbar(props) {\n  return (\n    <ThemedButton onClick={props.changeTheme}>\n      Change Theme\n    </ThemedButton>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: themes.light,\n    };\n\n    this.toggleTheme = () => {\n      this.setState(state => ({\n        theme:\n          state.theme === themes.dark\n            ? themes.light\n            : themes.dark,\n      }));\n    };\n  }\n\n  render() {\n    // The ThemedButton button inside the ThemeProvider\n    // uses the theme from state while the one outside uses\n    // the default dark theme\n    return (\n      <Page>\n        <ThemeContext.Provider value={this.state.theme}>\n          <Toolbar changeTheme={this.toggleTheme} />\n        </ThemeContext.Provider>\n        <Section>\n          <ThemedButton />\n        </Section>\n      </Page>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nroot.render(<App />);\n```\n\n### Updating Context from a Nested Component\n\nIt is often necessary to update the context from a component that is nested somewhere deeply in the component tree. In this case you can pass a function down through the context to allow consumers to update the context:\n\n**theme-context.js**\n\n``` jsx\n// Make sure the shape of the default value passed to\n// createContext matches the shape that the consumers expect!\nexport const ThemeContext = React.createContext({\n  theme: themes.dark,\n  toggleTheme: () => {},\n});\n```\n\n**theme-toggler-button.js**\n\n``` jsx\nimport {ThemeContext} from './theme-context';\n\nfunction ThemeTogglerButton() {\n  // The Theme Toggler Button receives not only the theme\n  // but also a toggleTheme function from the context\n  return (\n    <ThemeContext.Consumer>\n      {({theme, toggleTheme}) => (\n        <button\n          onClick={toggleTheme}\n          style={{backgroundColor: theme.background}}>\n          Toggle Theme\n        </button>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n\nexport default ThemeTogglerButton;\n```\n\n**app.js**\n\n``` jsx\nimport {ThemeContext, themes} from './theme-context';\nimport ThemeTogglerButton from './theme-toggler-button';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleTheme = () => {\n      this.setState(state => ({\n        theme:\n          state.theme === themes.dark\n            ? themes.light\n            : themes.dark,\n      }));\n    };\n\n    // State also contains the updater function so it will\n    // be passed down into the context provider\n    this.state = {\n      theme: themes.light,\n      toggleTheme: this.toggleTheme,\n    };\n  }\n\n  render() {\n    // The entire state is passed to the provider\n    return (\n      <ThemeContext.Provider value={this.state}>\n        <Content />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nfunction Content() {\n  return (\n    <div>\n      <ThemeTogglerButton />\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nroot.render(<App />);\n```\n\n### Consuming Multiple Contexts\n\nTo keep context re-rendering fast, React needs to make each context consumer a separate node in the tree.\n\n``` jsx\n// Theme context, default to light theme\nconst ThemeContext = React.createContext('light');\n\n// Signed-in user context\nconst UserContext = React.createContext({\n  name: 'Guest',\n});\n\nclass App extends React.Component {\n  render() {\n    const {signedInUser, theme} = this.props;\n\n    // App component that provides initial context values\n    return (\n      <ThemeContext.Provider value={theme}>\n        <UserContext.Provider value={signedInUser}>\n          <Layout />\n        </UserContext.Provider>\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <Sidebar />\n      <Content />\n    </div>\n  );\n}\n\n// A component may consume multiple contexts\nfunction Content() {\n  return (\n    <ThemeContext.Consumer>\n      {theme => (\n        <UserContext.Consumer>\n          {user => (\n            <ProfilePage user={user} theme={theme} />\n          )}\n        </UserContext.Consumer>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n```\n\nIf two or more context values are often used together, you might want to consider creating your own render prop component that provides both.\n\n## Caveats\n\nBecause context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider’s parent re-renders. For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for `value`:\n\n``` jsx\nclass App extends React.Component {\n  render() {\n    return (\n      <MyContext.Provider value={{something: 'something'}}>\n        <Toolbar />\n      </MyContext.Provider>\n    );\n  }\n}\n```\n\nTo get around this, lift the value into the parent’s state:\n\n``` jsx\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: {something: 'something'},\n    };\n  }\n\n  render() {\n    return (\n      <MyContext.Provider value={this.state.value}>\n        <Toolbar />\n      </MyContext.Provider>\n    );\n  }\n}\n```\n\n## Legacy API\n\n> Note\n>\n> React previously shipped with an experimental context API. The old API will be supported in all 16.x releases, but applications using it should migrate to the new version. The legacy API will be removed in a future major React version. Read the [legacy context docs here](legacy-context).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html)"
- name: Context.Consumer
  id: context#contextconsumer
  summary: A React component that subscribes to context changes
  belongs_to: Context
  description: |-
    ### `Context.Consumer`

    ``` jsx
    <MyContext.Consumer>
      {value => /* render something based on the context value */}
    </MyContext.Consumer>
    ```

    A React component that subscribes to context changes. Using this component lets you subscribe to a context within a [function component](components-and-props#function-and-class-components).

    Requires a [function as a child](render-props#using-props-other-than-render). The function receives the current context value and returns a React node. The `value` argument passed to the function will be equal to the `value` prop of the closest Provider for this context above in the tree. If there is no Provider for this context above, the `value` argument will be equal to the `defaultValue` that was passed to `createContext()`.

    > Note
    >
    > For more information about the ‘function as a child’ pattern, see [render props](render-props).
- name: Context.displayName
  id: context#contextdisplayname
  summary: Context object accepts a displayName string property
  belongs_to: Context
  description: "### `Context.displayName`\n\nContext object accepts a `displayName` string property. React DevTools uses this string to determine what to display for the context.\n\nFor example, the following component will appear as MyDisplayName in the DevTools:\n\n``` jsx\nconst MyContext = React.createContext(/* some value */);\nMyContext.displayName = 'MyDisplayName';\n\n<MyContext.Provider> // \"MyDisplayName.Provider\" in DevTools\n<MyContext.Consumer> // \"MyDisplayName.Consumer\" in DevTools\n```\n\n## Examples\n\n### Dynamic Context\n\nA more complex example with dynamic values for the theme:\n\n**theme-context.js**\n\n``` jsx\nexport const themes = {\n  light: {\n    foreground: '#000000',\n    background: '#eeeeee',\n  },\n  dark: {\n    foreground: '#ffffff',\n    background: '#222222',\n  },\n};\n\nexport const ThemeContext = React.createContext(\n  themes.dark // default value\n);\n```\n\n**themed-button.js**\n\n``` jsx\nimport {ThemeContext} from './theme-context';\n\nclass ThemedButton extends React.Component {\n  render() {\n    let props = this.props;\n    let theme = this.context;\n    return (\n      <button\n        {...props}\n        style={{backgroundColor: theme.background}}\n      />\n    );\n  }\n}\nThemedButton.contextType = ThemeContext;\n\nexport default ThemedButton;\n```\n\n**app.js**\n\n``` jsx\nimport {ThemeContext, themes} from './theme-context';\nimport ThemedButton from './themed-button';\n\n// An intermediate component that uses the ThemedButton\nfunction Toolbar(props) {\n  return (\n    <ThemedButton onClick={props.changeTheme}>\n      Change Theme\n    </ThemedButton>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: themes.light,\n    };\n\n    this.toggleTheme = () => {\n      this.setState(state => ({\n        theme:\n          state.theme === themes.dark\n            ? themes.light\n            : themes.dark,\n      }));\n    };\n  }\n\n  render() {\n    // The ThemedButton button inside the ThemeProvider\n    // uses the theme from state while the one outside uses\n    // the default dark theme\n    return (\n      <Page>\n        <ThemeContext.Provider value={this.state.theme}>\n          <Toolbar changeTheme={this.toggleTheme} />\n        </ThemeContext.Provider>\n        <Section>\n          <ThemedButton />\n        </Section>\n      </Page>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nroot.render(<App />);\n```\n\n### Updating Context from a Nested Component\n\nIt is often necessary to update the context from a component that is nested somewhere deeply in the component tree. In this case you can pass a function down through the context to allow consumers to update the context:\n\n**theme-context.js**\n\n``` jsx\n// Make sure the shape of the default value passed to\n// createContext matches the shape that the consumers expect!\nexport const ThemeContext = React.createContext({\n  theme: themes.dark,\n  toggleTheme: () => {},\n});\n```\n\n**theme-toggler-button.js**\n\n``` jsx\nimport {ThemeContext} from './theme-context';\n\nfunction ThemeTogglerButton() {\n  // The Theme Toggler Button receives not only the theme\n  // but also a toggleTheme function from the context\n  return (\n    <ThemeContext.Consumer>\n      {({theme, toggleTheme}) => (\n        <button\n          onClick={toggleTheme}\n          style={{backgroundColor: theme.background}}>\n          Toggle Theme\n        </button>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n\nexport default ThemeTogglerButton;\n```\n\n**app.js**\n\n``` jsx\nimport {ThemeContext, themes} from './theme-context';\nimport ThemeTogglerButton from './theme-toggler-button';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleTheme = () => {\n      this.setState(state => ({\n        theme:\n          state.theme === themes.dark\n            ? themes.light\n            : themes.dark,\n      }));\n    };\n\n    // State also contains the updater function so it will\n    // be passed down into the context provider\n    this.state = {\n      theme: themes.light,\n      toggleTheme: this.toggleTheme,\n    };\n  }\n\n  render() {\n    // The entire state is passed to the provider\n    return (\n      <ThemeContext.Provider value={this.state}>\n        <Content />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nfunction Content() {\n  return (\n    <div>\n      <ThemeTogglerButton />\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nroot.render(<App />);\n```\n\n### Consuming Multiple Contexts\n\nTo keep context re-rendering fast, React needs to make each context consumer a separate node in the tree.\n\n``` jsx\n// Theme context, default to light theme\nconst ThemeContext = React.createContext('light');\n\n// Signed-in user context\nconst UserContext = React.createContext({\n  name: 'Guest',\n});\n\nclass App extends React.Component {\n  render() {\n    const {signedInUser, theme} = this.props;\n\n    // App component that provides initial context values\n    return (\n      <ThemeContext.Provider value={theme}>\n        <UserContext.Provider value={signedInUser}>\n          <Layout />\n        </UserContext.Provider>\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nfunction Layout() {\n  return (\n    <div>\n      <Sidebar />\n      <Content />\n    </div>\n  );\n}\n\n// A component may consume multiple contexts\nfunction Content() {\n  return (\n    <ThemeContext.Consumer>\n      {theme => (\n        <UserContext.Consumer>\n          {user => (\n            <ProfilePage user={user} theme={theme} />\n          )}\n        </UserContext.Consumer>\n      )}\n    </ThemeContext.Consumer>\n  );\n}\n```\n\nIf two or more context values are often used together, you might want to consider creating your own render prop component that provides both.\n\n## Caveats\n\nBecause context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider’s parent re-renders. For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for `value`:\n\n``` jsx\nclass App extends React.Component {\n  render() {\n    return (\n      <MyContext.Provider value={{something: 'something'}}>\n        <Toolbar />\n      </MyContext.Provider>\n    );\n  }\n}\n```\n\nTo get around this, lift the value into the parent’s state:\n\n``` jsx\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: {something: 'something'},\n    };\n  }\n\n  render() {\n    return (\n      <MyContext.Provider value={this.state.value}>\n        <Toolbar />\n      </MyContext.Provider>\n    );\n  }\n}\n```\n\n## Legacy API\n\n> Note\n>\n> React previously shipped with an experimental context API. The old API will be supported in all 16.x releases, but applications using it should migrate to the new version. The legacy API will be removed in a future major React version. Read the [legacy context docs here](legacy-context).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/context.html](https://reactjs.org/docs/context.html)"
- name: Context.Provider
  id: context#contextprovider
  summary: Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes
  belongs_to: Context
  description: |-
    ### `Context.Provider`

    ``` jsx
    <MyContext.Provider value={/* some value */}>
    ```

    Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.

    The Provider component accepts a `value` prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.

    All consumers that are descendants of a Provider will re-render whenever the Provider’s `value` prop changes. The propagation from Provider to its descendant consumers (including [`.contextType`](#classcontexttype) and [`useContext`](hooks-reference#usecontext)) is not subject to the `shouldComponentUpdate` method, so the consumer is updated even when an ancestor component skips an update.

    Changes are determined by comparing the new and old values using the same algorithm as [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description).

    > Note
    >
    > The way changes are determined can cause some issues when passing objects as `value`: see [Caveats](#caveats).
- name: Controlled vs. Uncontrolled Components
  id: glossary#controlled-vs-uncontrolled-components
  summary: React has two different approaches to dealing with form inputs
  belongs_to: Glossary of React Terms
  description: |-
    ## [Controlled](forms#controlled-components) vs. [Uncontrolled Components](uncontrolled-components)

    React has two different approaches to dealing with form inputs.

    An input form element whose value is controlled by React is called a *controlled component*. When a user enters data into a controlled component a change event handler is triggered and your code decides whether the input is valid (by re-rendering with the updated value). If you do not re-render then the form element will remain unchanged.

    An *uncontrolled component* works like form elements do outside of React. When a user inputs data into a form field (an input box, dropdown, etc) the updated information is reflected without React needing to do anything. However, this also means that you can’t force the field to have a certain value.

    In most cases you should use controlled components.
- name: Create a New React App
  id: create-a-new-react-app
  summary: Use an integrated toolchain for the best user and developer experience
  description: "# Create a New React App\n\nUse an integrated toolchain for the best user and developer experience.\n\nThis page describes a few popular React toolchains which help with tasks like:\n\n- Scaling to many files and components.\n- Using third-party libraries from npm.\n- Detecting common mistakes early.\n- Live-editing CSS and JS in development.\n- Optimizing the output for production.\n\nThe toolchains recommended on this page **don’t require configuration to get started**.\n\n## You Might Not Need a Toolchain\n\nIf you don’t experience the problems described above or don’t feel comfortable using JavaScript tools yet, consider [adding React as a plain `<script>` tag on an HTML page](add-react-to-a-website), optionally [with JSX](add-react-to-a-website#optional-try-react-with-jsx).\n\nThis is also **the easiest way to integrate React into an existing website.** You can always add a larger toolchain if you find it helpful!\n\n## Recommended Toolchains\n\nThe React team primarily recommends these solutions:\n\n- If you’re **learning React** or **creating a new [single-page](glossary#single-page-application) app,** use [Create React App](#create-react-app).\n- If you’re building a **server-rendered website with Node.js,** try [Next.js](#nextjs).\n- If you’re building a **static content-oriented website,** try [Gatsby](#gatsby).\n- If you’re building a **component library** or **integrating with an existing codebase**, try [More Flexible Toolchains](#more-flexible-toolchains).\n\n### Create React App\n\n[Create React App](https://github.com/facebookincubator/create-react-app) is a comfortable environment for **learning React**, and is the best way to start building **a new [single-page](glossary#single-page-application) application** in React.\n\nIt sets up your development environment so that you can use the latest JavaScript features, provides a nice developer experience, and optimizes your app for production. You’ll need to have [Node \\>= 14.0.0 and npm \\>= 5.6](https://nodejs.org/en/) on your machine. To create a project, run:\n\n``` bash\nnpx create-react-app my-app\ncd my-app\nnpm start\n```\n\n> Note\n>\n> `npx` on the first line is not a typo — it’s a [package runner tool that comes with npm 5.2+](https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b).\n\nCreate React App doesn’t handle backend logic or databases; it just creates a frontend build pipeline, so you can use it with any backend you want. Under the hood, it uses [Babel](https://babeljs.io/) and [webpack](https://webpack.js.org/), but you don’t need to know anything about them.\n\nWhen you’re ready to deploy to production, running `npm run build` will create an optimized build of your app in the `build` folder. You can learn more about Create React App [from its README](https://github.com/facebookincubator/create-react-app#create-react-app--) and the [User Guide](https://facebook.github.io/create-react-app/).\n\n### Next.js\n\n[Next.js](https://nextjs.org/) is a popular and lightweight framework for **static and server‑rendered applications** built with React. It includes **styling and routing solutions** out of the box, and assumes that you’re using [Node.js](https://nodejs.org/) as the server environment.\n\nLearn Next.js from [its official guide](https://nextjs.org/learn/).\n\n### Gatsby\n\n[Gatsby](https://www.gatsbyjs.org/) is the best way to create **static websites** with React. It lets you use React components, but outputs pre-rendered HTML and CSS to guarantee the fastest load time.\n\nLearn Gatsby from [its official guide](https://www.gatsbyjs.org/docs/) and a [gallery of starter kits](https://www.gatsbyjs.org/docs/gatsby-starters/).\n\n### More Flexible Toolchains\n\nThe following toolchains offer more flexibility and choice. We recommend them to more experienced users:\n\n- **[Neutrino](https://neutrinojs.org/)** combines the power of [webpack](https://webpack.js.org/) with the simplicity of presets, and includes a preset for [React apps](https://neutrinojs.org/packages/react/) and [React components](https://neutrinojs.org/packages/react-components/).\n- **[Nx](https://nx.dev/react)** is a toolkit for full-stack monorepo development, with built-in support for React, Next.js, [Express](https://expressjs.com/), and more.\n- **[Parcel](https://parceljs.org/)** is a fast, zero configuration web application bundler that [works with React](https://parceljs.org/recipes/react/).\n- **[Razzle](https://github.com/jaredpalmer/razzle)** is a server-rendering framework that doesn’t require any configuration, but offers more flexibility than Next.js.\n\n## Creating a Toolchain from Scratch\n\nA JavaScript build toolchain typically consists of:\n\n- A **package manager**, such as [Yarn](https://yarnpkg.com/) or [npm](https://www.npmjs.com/). It lets you take advantage of a vast ecosystem of third-party packages, and easily install or update them.\n- A **bundler**, such as [webpack](https://webpack.js.org/) or [Parcel](https://parceljs.org/). It lets you write modular code and bundle it together into small packages to optimize load time.\n- A **compiler** such as [Babel](https://babeljs.io/). It lets you write modern JavaScript code that still works in older browsers.\n\nIf you prefer to set up your own JavaScript toolchain from scratch, [check out this guide](https://blog.usejournal.com/creating-a-react-app-from-scratch-f3c693b84658) that re-creates some of the Create React App functionality.\n\nDon’t forget to ensure your custom toolchain [is correctly set up for production](optimizing-performance#use-the-production-build).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/create-a-new-react-app.html](https://reactjs.org/docs/create-a-new-react-app.html)"
- name: createElement()
  id: react-api#createelement
  summary: Create and return a new React element of the given type
  belongs_to: React Top-Level API
  description: |-
    ### `createElement()`

    ``` jsx
    React.createElement(
      type,
      [props],
      [...children]
    )
    ```

    Create and return a new [React element](rendering-elements) of the given type. The type argument can be either a tag name string (such as `'div'` or `'span'`), a [React component](components-and-props) type (a class or a function), or a [React fragment](#reactfragment) type.

    Code written with [JSX](introducing-jsx) will be converted to use `React.createElement()`. You will not typically invoke `React.createElement()` directly if you are using JSX. See [React Without JSX](react-without-jsx) to learn more.
- name: createFactory()
  id: react-api#createfactory
  summary: Return a function that produces React elements of a given type
  belongs_to: React Top-Level API
  description: |-
    ### `createFactory()`

    ``` jsx
    React.createFactory(type)
    ```

    Return a function that produces React elements of a given type. Like [`React.createElement()`](#createelement), the type argument can be either a tag name string (such as `'div'` or `'span'`), a [React component](components-and-props) type (a class or a function), or a [React fragment](#reactfragment) type.

    This helper is considered legacy, and we encourage you to either use JSX or use `React.createElement()` directly instead.

    You will not typically invoke `React.createFactory()` directly if you are using JSX. See [React Without JSX](react-without-jsx) to learn more.
- name: createPortal()
  id: react-dom#createportal
  summary: Creates a portal
  belongs_to: ReactDOM
  description: |-
    ### `createPortal()`

    ``` jsx
    createPortal(child, container)
    ```

    Creates a portal. Portals provide a way to [render children into a DOM node that exists outside the hierarchy of the DOM component](portals).
- name: createRoot()
  id: react-dom-client#createroot
  summary: Create a React root for the supplied container and return the root
  belongs_to: ReactDOMClient
  description: |-
    ### `createRoot()`

    ``` jsx
    createRoot(container[, options]);
    ```

    Create a React root for the supplied `container` and return the root. The root can be used to render a React element into the DOM with `render`:

    ``` jsx
    const root = createRoot(container);
    root.render(element);
    ```

    `createRoot` accepts two options:

    - `onRecoverableError`: optional callback called when React automatically recovers from errors.
    - `identifierPrefix`: optional prefix React uses for ids generated by `React.useId`. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server.

    The root can also be unmounted with `unmount`:

    ``` jsx
    root.unmount();
    ```

    > Note:
    >
    > `createRoot()` controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when render is called. Later calls use React’s DOM diffing algorithm for efficient updates.
    >
    > `createRoot()` does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.
    >
    > Using `createRoot()` to hydrate a server-rendered container is not supported. Use [`hydrateRoot()`](#hydrateroot) instead.
- name: defaultProps
  id: react-component#defaultprops
  summary: defaultProps can be defined as a property on the component class itself, to set the default props for the class
  belongs_to: React.Component
  description: |-
    ### `defaultProps`

    `defaultProps` can be defined as a property on the component class itself, to set the default props for the class. This is used for `undefined` props, but not for `null` props. For example:

    ``` jsx
    class CustomButton extends React.Component {
      // ...
    }

    CustomButton.defaultProps = {
      color: 'blue'
    };
    ```

    If `props.color` is not provided, it will be set by default to `'blue'`:

    ``` jsx
      render() {
        return <CustomButton /> ; // props.color will be set to blue
      }
    ```

    If `props.color` is set to `null`, it will remain `null`:

    ``` jsx
      render() {
        return <CustomButton color={null} /> ; // props.color will remain null
      }
    ```
- name: displayName
  id: react-component#displayname
  summary: The displayName string is used in debugging messages
  belongs_to: React.Component
  description: |-
    ### `displayName`

    The `displayName` string is used in debugging messages. Usually, you don’t need to set it explicitly because it’s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component, see [Wrap the Display Name for Easy Debugging](higher-order-components#convention-wrap-the-display-name-for-easy-debugging) for details.

    ## Instance Properties
- name: DOM Elements
  id: dom-elements
  summary: React implements a browser-independent DOM system for performance and cross-browser compatibility
  description: "# DOM Elements\n\nReact implements a browser-independent DOM system for performance and cross-browser compatibility. We took the opportunity to clean up a few rough edges in browser DOM implementations.\n\nIn React, all DOM properties and attributes (including event handlers) should be camelCased. For example, the HTML attribute `tabindex` corresponds to the attribute `tabIndex` in React. The exception is `aria-*` and `data-*` attributes, which should be lowercased. For example, you can keep `aria-label` as `aria-label`.\n\n## Differences In Attributes\n\nThere are a number of attributes that work differently between React and HTML:\n\n### checked\n\nThe `checked` attribute is supported by `<input>` components of type `checkbox` or `radio`. You can use it to set whether the component is checked. This is useful for building controlled components. `defaultChecked` is the uncontrolled equivalent, which sets whether the component is checked when it is first mounted.\n\n### className\n\nTo specify a CSS class, use the `className` attribute. This applies to all regular DOM and SVG elements like `<div>`, `<a>`, and others.\n\nIf you use React with Web Components (which is uncommon), use the `class` attribute instead.\n\n### dangerouslySetInnerHTML\n\n`dangerouslySetInnerHTML` is React’s replacement for using `innerHTML` in the browser DOM. In general, setting HTML from code is risky because it’s easy to inadvertently expose your users to a [cross-site scripting (XSS)](https://en.wikipedia.org/wiki/Cross-site_scripting) attack. So, you can set HTML directly from React, but you have to type out `dangerouslySetInnerHTML` and pass an object with a `__html` key, to remind yourself that it’s dangerous. For example:\n\n``` jsx\nfunction createMarkup() {\n  return {__html: 'First &middot; Second'};\n}\n\nfunction MyComponent() {\n  return <div dangerouslySetInnerHTML={createMarkup()} />;\n}\n```\n\n### htmlFor\n\nSince `for` is a reserved word in JavaScript, React elements use `htmlFor` instead.\n\n### onChange\n\nThe `onChange` event behaves as you would expect it to: whenever a form field is changed, this event is fired. We intentionally do not use the existing browser behavior because `onChange` is a misnomer for its behavior and React relies on this event to handle user input in real time.\n\n### selected\n\nIf you want to mark an `<option>` as selected, reference the value of that option in the `value` of its `<select>` instead. Check out [“The select Tag”](forms#the-select-tag) for detailed instructions.\n\n### style\n\n> Note\n>\n> Some examples in the documentation use `style` for convenience, but **using the `style` attribute as the primary means of styling elements is generally not recommended.** In most cases, [`className`](#classname) should be used to reference classes defined in an external CSS stylesheet. `style` is most often used in React applications to add dynamically-computed styles at render time. See also [FAQ: Styling and CSS](faq-styling).\n\nThe `style` attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM `style` JavaScript property, is more efficient, and prevents XSS security holes. For example:\n\n``` jsx\nconst divStyle = {\n  color: 'blue',\n  backgroundImage: 'url(' + imgUrl + ')',\n};\n\nfunction HelloWorldComponent() {\n  return <div style={divStyle}>Hello World!</div>;\n}\n```\n\nNote that styles are not autoprefixed. To support older browsers, you need to supply corresponding style properties:\n\n``` jsx\nconst divStyle = {\n  WebkitTransition: 'all', // note the capital 'W' here\n  msTransition: 'all' // 'ms' is the only lowercase vendor prefix\n};\n\nfunction ComponentWithTransition() {\n  return <div style={divStyle}>This should work cross-browser</div>;\n}\n```\n\nStyle keys are camelCased in order to be consistent with accessing the properties on DOM nodes from JS (e.g. `node.style.backgroundImage`). Vendor prefixes [other than `ms`](https://www.andismith.com/blogs/2012/02/modernizr-prefixed/) should begin with a capital letter. This is why `WebkitTransition` has an uppercase “W”.\n\nReact will automatically append a “px” suffix to certain numeric inline style properties. If you want to use units other than “px”, specify the value as a string with the desired unit. For example:\n\n``` jsx\n// Result style: '10px'\n<div style={{ height: 10 }}>\n  Hello World!\n</div>\n\n// Result style: '10%'\n<div style={{ height: '10%' }}>\n  Hello World!\n</div>\n```\n\nNot all style properties are converted to pixel strings though. Certain ones remain unitless (eg `zoom`, `order`, `flex`). A complete list of unitless properties can be seen [here](https://github.com/facebook/react/blob/4131af3e4bf52f3a003537ec95a1655147c81270/src/renderers/dom/shared/CSSProperty.js#L15-L59).\n\n### suppressContentEditableWarning\n\nNormally, there is a warning when an element with children is also marked as `contentEditable`, because it won’t work. This attribute suppresses that warning. Don’t use this unless you are building a library like [Draft.js](https://facebook.github.io/draft-js/) that manages `contentEditable` manually.\n\n### suppressHydrationWarning\n\nIf you use server-side React rendering, normally there is a warning when the server and the client render different content. However, in some rare cases, it is very hard or impossible to guarantee an exact match. For example, timestamps are expected to differ on the server and on the client.\n\nIf you set `suppressHydrationWarning` to `true`, React will not warn you about mismatches in the attributes and the content of that element. It only works one level deep, and is intended to be used as an escape hatch. Don’t overuse it. You can read more about hydration in the [`ReactDOM.hydrateRoot()` documentation](react-dom-client#hydrateroot).\n\n### value\n\nThe `value` attribute is supported by `<input>`, `<select>` and `<textarea>` components. You can use it to set the value of the component. This is useful for building controlled components. `defaultValue` is the uncontrolled equivalent, which sets the value of the component when it is first mounted.\n\n## All Supported HTML Attributes\n\nAs of React 16, any standard [or custom](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html) DOM attributes are fully supported.\n\nReact has always provided a JavaScript-centric API to the DOM. Since React components often take both custom and DOM-related props, React uses the `camelCase` convention just like the DOM APIs:\n\n``` jsx\n<div tabIndex={-1} />      // Just like node.tabIndex DOM API\n<div className=\"Button\" /> // Just like node.className DOM API\n<input readOnly={true} />  // Just like node.readOnly DOM API\n```\n\nThese props work similarly to the corresponding HTML attributes, with the exception of the special cases documented above.\n\nSome of the DOM attributes supported by React include:\n\n``` text\naccept acceptCharset accessKey action allowFullScreen alt async autoComplete\nautoFocus autoPlay capture cellPadding cellSpacing challenge charSet checked\ncite classID className colSpan cols content contentEditable contextMenu controls\ncontrolsList coords crossOrigin data dateTime default defer dir disabled\ndownload draggable encType form formAction formEncType formMethod formNoValidate\nformTarget frameBorder headers height hidden high href hrefLang htmlFor\nhttpEquiv icon id inputMode integrity is keyParams keyType kind label lang list\nloop low manifest marginHeight marginWidth max maxLength media mediaGroup method\nmin minLength multiple muted name noValidate nonce open optimum pattern\nplaceholder poster preload profile radioGroup readOnly rel required reversed\nrole rowSpan rows sandbox scope scoped scrolling seamless selected shape size\nsizes span spellCheck src srcDoc srcLang srcSet start step style summary\ntabIndex target title type useMap value width wmode wrap\n```\n\nSimilarly, all SVG attributes are fully supported:\n\n``` text\naccentHeight accumulate additive alignmentBaseline allowReorder alphabetic\namplitude arabicForm ascent attributeName attributeType autoReverse azimuth\nbaseFrequency baseProfile baselineShift bbox begin bias by calcMode capHeight\nclip clipPath clipPathUnits clipRule colorInterpolation\ncolorInterpolationFilters colorProfile colorRendering contentScriptType\ncontentStyleType cursor cx cy d decelerate descent diffuseConstant direction\ndisplay divisor dominantBaseline dur dx dy edgeMode elevation enableBackground\nend exponent externalResourcesRequired fill fillOpacity fillRule filter\nfilterRes filterUnits floodColor floodOpacity focusable fontFamily fontSize\nfontSizeAdjust fontStretch fontStyle fontVariant fontWeight format from fx fy\ng1 g2 glyphName glyphOrientationHorizontal glyphOrientationVertical glyphRef\ngradientTransform gradientUnits hanging horizAdvX horizOriginX ideographic\nimageRendering in in2 intercept k k1 k2 k3 k4 kernelMatrix kernelUnitLength\nkerning keyPoints keySplines keyTimes lengthAdjust letterSpacing lightingColor\nlimitingConeAngle local markerEnd markerHeight markerMid markerStart\nmarkerUnits markerWidth mask maskContentUnits maskUnits mathematical mode\nnumOctaves offset opacity operator order orient orientation origin overflow\noverlinePosition overlineThickness paintOrder panose1 pathLength\npatternContentUnits patternTransform patternUnits pointerEvents points\npointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits\nr radius refX refY renderingIntent repeatCount repeatDur requiredExtensions\nrequiredFeatures restart result rotate rx ry scale seed shapeRendering slope\nspacing specularConstant specularExponent speed spreadMethod startOffset\nstdDeviation stemh stemv stitchTiles stopColor stopOpacity\nstrikethroughPosition strikethroughThickness string stroke strokeDasharray\nstrokeDashoffset strokeLinecap strokeLinejoin strokeMiterlimit strokeOpacity\nstrokeWidth surfaceScale systemLanguage tableValues targetX targetY textAnchor\ntextDecoration textLength textRendering to transform u1 u2 underlinePosition\nunderlineThickness unicode unicodeBidi unicodeRange unitsPerEm vAlphabetic\nvHanging vIdeographic vMathematical values vectorEffect version vertAdvY\nvertOriginX vertOriginY viewBox viewTarget visibility widths wordSpacing\nwritingMode x x1 x2 xChannelSelector xHeight xlinkActuate xlinkArcrole\nxlinkHref xlinkRole xlinkShow xlinkTitle xlinkType xmlns xmlnsXlink xmlBase\nxmlLang xmlSpace y y1 y2 yChannelSelector z zoomAndPan\n```\n\nYou may also use custom attributes as long as they’re fully lowercase.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/dom-elements.html](https://reactjs.org/docs/dom-elements.html)"
- name: Elements
  id: glossary#elements
  summary: React elements are the building blocks of React applications
  belongs_to: Glossary of React Terms
  description: |-
    ## [Elements](rendering-elements)

    React elements are the building blocks of React applications. One might confuse elements with a more widely known concept of “components”. An element describes what you want to see on the screen. React elements are immutable.

    ``` jsx
    const element = <h1>Hello, world</h1>;
    ```

    Typically, elements are not used directly, but get returned from components.
- name: Error Boundaries
  id: error-boundaries
  summary: In the past, JavaScript errors inside components used to corrupt React’s internal state and cause it to emit cryptic errors on next renders
  description: "# Error Boundaries\n\nIn the past, JavaScript errors inside components used to corrupt React’s internal state and cause it to [emit](https://github.com/facebook/react/issues/4026) [cryptic](https://github.com/facebook/react/issues/6895) [errors](https://github.com/facebook/react/issues/8579) on next renders. These errors were always caused by an earlier error in the application code, but React did not provide a way to handle them gracefully in components, and could not recover from them.\n\n## Introducing Error Boundaries\n\nA JavaScript error in a part of the UI shouldn’t break the whole app. To solve this problem for React users, React 16 introduces a new concept of an “error boundary”.\n\nError boundaries are React components that **catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI** instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.\n\n> Note\n>\n> Error boundaries do **not** catch errors for:\n>\n> - Event handlers ([learn more](#how-about-event-handlers))\n> - Asynchronous code (e.g. `setTimeout` or `requestAnimationFrame` callbacks)\n> - Server side rendering\n> - Errors thrown in the error boundary itself (rather than its children)\n\nA class component becomes an error boundary if it defines either (or both) of the lifecycle methods [`static getDerivedStateFromError()`](react-component#static-getderivedstatefromerror) or [`componentDidCatch()`](react-component#componentdidcatch). Use `static getDerivedStateFromError()` to render a fallback UI after an error has been thrown. Use `componentDidCatch()` to log error information.\n\n``` jsx\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // You can also log the error to an error reporting service\n    logErrorToMyService(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children; \n  }\n}\n```\n\nThen you can use it as a regular component:\n\n``` jsx\n<ErrorBoundary>\n  <MyWidget />\n</ErrorBoundary>\n```\n\nError boundaries work like a JavaScript `catch {}` block, but for components. Only class components can be error boundaries. In practice, most of the time you’ll want to declare an error boundary component once and use it throughout your application.\n\nNote that **error boundaries only catch errors in the components below them in the tree**. An error boundary can’t catch an error within itself. If an error boundary fails trying to render the error message, the error will propagate to the closest error boundary above it. This, too, is similar to how the `catch {}` block works in JavaScript.\n\n## Live Demo\n\nCheck out [this example of declaring and using an error boundary](https://codepen.io/gaearon/pen/wqvxGa?editors=0010).\n\n## Where to Place Error Boundaries\n\nThe granularity of error boundaries is up to you. You may wrap top-level route components to display a “Something went wrong” message to the user, just like how server-side frameworks often handle crashes. You may also wrap individual widgets in an error boundary to protect them from crashing the rest of the application.\n\n## New Behavior for Uncaught Errors\n\nThis change has an important implication. **As of React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree.**\n\nWe debated this decision, but in our experience it is worse to leave corrupted UI in place than to completely remove it. For example, in a product like Messenger leaving the broken UI visible could lead to somebody sending a message to the wrong person. Similarly, it is worse for a payments app to display a wrong amount than to render nothing.\n\nThis change means that as you migrate to React 16, you will likely uncover existing crashes in your application that have been unnoticed before. Adding error boundaries lets you provide better user experience when something goes wrong.\n\nFor example, Facebook Messenger wraps content of the sidebar, the info panel, the conversation log, and the message input into separate error boundaries. If some component in one of these UI areas crashes, the rest of them remain interactive.\n\nWe also encourage you to use JS error reporting services (or build your own) so that you can learn about unhandled exceptions as they happen in production, and fix them.\n\n## Component Stack Traces\n\nReact 16 prints all errors that occurred during rendering to the console in development, even if the application accidentally swallows them. In addition to the error message and the JavaScript stack, it also provides component stack traces. Now you can see where exactly in the component tree the failure has happened:\n\n[](https://reactjs.org/static/f1276837b03821b43358d44c14072945/c3a47/error-boundaries-stack-trace.png)\n\nYou can also see the filenames and line numbers in the component stack trace. This works by default in [Create React App](https://github.com/facebookincubator/create-react-app) projects:\n\n[](https://reactjs.org/static/45611d4fdbd152829b28ae2348d6dcba/6dd26/error-boundaries-stack-trace-line-numbers.png)\n\nIf you don’t use Create React App, you can add [this plugin](https://www.npmjs.com/package/@babel/plugin-transform-react-jsx-source) manually to your Babel configuration. Note that it’s intended only for development and **must be disabled in production**.\n\n> Note\n>\n> Component names displayed in the stack traces depend on the [`Function.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name) property. If you support older browsers and devices which may not yet provide this natively (e.g. IE 11), consider including a `Function.name` polyfill in your bundled application, such as [`function.name-polyfill`](https://github.com/JamesMGreene/Function.name). Alternatively, you may explicitly set the [`displayName`](react-component#displayname) property on all your components.\n\n## How About try/catch?\n\n`try` / `catch` is great but it only works for imperative code:\n\n``` jsx\ntry {\n  showButton();\n} catch (error) {\n  // ...\n}\n```\n\nHowever, React components are declarative and specify *what* should be rendered:\n\n``` jsx\n<Button />\n```\n\nError boundaries preserve the declarative nature of React, and behave as you would expect. For example, even if an error occurs in a `componentDidUpdate` method caused by a `setState` somewhere deep in the tree, it will still correctly propagate to the closest error boundary.\n\n## How About Event Handlers?\n\nError boundaries **do not** catch errors inside event handlers.\n\nReact doesn’t need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don’t happen during rendering. So if they throw, React still knows what to display on the screen.\n\nIf you need to catch an error inside an event handler, use the regular JavaScript `try` / `catch` statement:\n\n``` jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    try {\n      // Do something that could throw\n    } catch (error) {\n      this.setState({ error });\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return <h1>Caught an error.</h1>\n    }\n    return <button onClick={this.handleClick}>Click Me</button>\n  }\n}\n```\n\nNote that the above example is demonstrating regular JavaScript behavior and doesn’t use error boundaries.\n\n## Naming Changes from React 15\n\nReact 15 included a very limited support for error boundaries under a different method name: `unstable_handleError`. This method no longer works, and you will need to change it to `componentDidCatch` in your code starting from the first 16 beta release.\n\nFor this change, we’ve provided a [codemod](https://github.com/reactjs/react-codemod#error-boundaries) to automatically migrate your code.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/error-boundaries.html](https://reactjs.org/docs/error-boundaries.html)"
- name: ES6, ES2015, ES2016, etc
  id: glossary#es6-es2015-es2016-etc
  summary: These acronyms all refer to the most recent versions of the ECMAScript Language Specification standard, which the JavaScript language is an implementation of
  belongs_to: Glossary of React Terms
  description: |-
    ## ES6, ES2015, ES2016, etc

    These acronyms all refer to the most recent versions of the ECMAScript Language Specification standard, which the JavaScript language is an implementation of. The ES6 version (also known as ES2015) includes many additions to the previous versions such as: arrow functions, classes, template literals, `let` and `const` statements. You can learn more about specific versions [here](https://en.wikipedia.org/wiki/ECMAScript#Versions).
- name: Event Pooling
  id: legacy-event-pooling
  summary: This page is only relevant for React 16 and earlier, and for React Native
  description: "# Event Pooling\n\n> Note\n>\n> This page is only relevant for React 16 and earlier, and for React Native.\n>\n> React 17 on the web **does not** use event pooling.\n>\n> [Read more](https://reactjs.org/blog/2020/08/10/react-v17-rc.html#no-event-pooling) about this change in React 17.\n\nThe [`SyntheticEvent`](events) objects are pooled. This means that the `SyntheticEvent` object will be reused and all properties will be nullified after the event handler has been called. For example, this won’t work:\n\n``` jsx\nfunction handleChange(e) {\n  // This won't work because the event object gets reused.\n  setTimeout(() => {\n    console.log(e.target.value); // Too late!\n  }, 100);\n}\n```\n\nIf you need to access event object’s properties after the event handler has run, you need to call `e.persist()`:\n\n``` jsx\nfunction handleChange(e) {\n  // Prevents React from resetting its properties:\n  e.persist();\n\n  setTimeout(() => {\n    console.log(e.target.value); // Works\n  }, 100);\n}\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/legacy-event-pooling.html](https://reactjs.org/docs/legacy-event-pooling.html)"
- name: Events
  id: glossary#events
  summary: null
  belongs_to: Glossary of React Terms
  description: |-
    ## [Events](handling-events)

    Handling events with React elements has some syntactic differences:

    - React event handlers are named using camelCase, rather than lowercase.
    - With JSX you pass a function as the event handler, rather than a string.
- name: File Structure
  id: faq-structure
  summary: React doesn’t have opinions on how you put files into folders
  description: "# File Structure\n\n### Is there a recommended way to structure React projects?\n\nReact doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.\n\n#### Grouping by features or routes\n\nOne common way to structure projects is to locate CSS, JS, and tests together inside folders grouped by feature or route.\n\n``` text\ncommon/\n  Avatar.js\n  Avatar.css\n  APIUtils.js\n  APIUtils.test.js\nfeed/\n  index.js\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  FeedAPI.js\nprofile/\n  index.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n  ProfileAPI.js\n```\n\nThe definition of a “feature” is not universal, and it is up to you to choose the granularity. If you can’t come up with a list of top-level folders, you can ask the users of your product what major parts it consists of, and use their mental model as a blueprint.\n\n#### Grouping by file type\n\nAnother popular way to structure projects is to group similar files together, for example:\n\n``` text\napi/\n  APIUtils.js\n  APIUtils.test.js\n  ProfileAPI.js\n  UserAPI.js\ncomponents/\n  Avatar.js\n  Avatar.css\n  Feed.js\n  Feed.css\n  FeedStory.js\n  FeedStory.test.js\n  Profile.js\n  ProfileHeader.js\n  ProfileHeader.css\n```\n\nSome people also prefer to go further, and separate components into different folders depending on their role in the application. For example, [Atomic Design](http://bradfrost.com/blog/post/atomic-web-design/) is a design methodology built on this principle. Remember that it’s often more productive to treat such methodologies as helpful examples rather than strict rules to follow.\n\n#### Avoid too much nesting\n\nThere are many pain points associated with deep directory nesting in JavaScript projects. It becomes harder to write relative imports between them, or to update those imports when the files are moved. Unless you have a very compelling reason to use a deep folder structure, consider limiting yourself to a maximum of three or four nested folders within a single project. Of course, this is only a recommendation, and it may not be relevant to your project.\n\n#### Don’t overthink it\n\nIf you’re just starting a project, [don’t spend more than five minutes](https://en.wikipedia.org/wiki/Analysis_paralysis) on choosing a file structure. Pick any of the above approaches (or come up with your own) and start writing code! You’ll likely want to rethink it anyway after you’ve written some real code.\n\nIf you feel completely stuck, start by keeping all files in a single folder. Eventually it will grow large enough that you will want to separate some files from the rest. By that time you’ll have enough knowledge to tell which files you edit together most often. In general, it is a good idea to keep files that often change together close to each other. This principle is called “colocation”.\n\nAs projects grow larger, they often use a mix of both of the above approaches in practice. So choosing the “right” one in the beginning isn’t very important.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/faq-structure.html](https://reactjs.org/docs/faq-structure.html)"
- name: findAllInRenderedTree()
  id: test-utils#findallinrenderedtree
  summary: Traverse all components in tree and accumulate all components where test(component) is true
  belongs_to: Test Utilities
  description: |-
    ### `findAllInRenderedTree()`

    ``` jsx
    findAllInRenderedTree(
      tree,
      test
    )
    ```

    Traverse all components in `tree` and accumulate all components where `test(component)` is `true`. This is not that useful on its own, but it’s used as a primitive for other test utils.
- name: findDOMNode()
  id: react-dom#finddomnode
  summary: findDOMNode is an escape hatch used to access the underlying DOM node
  belongs_to: ReactDOM
  description: "### `findDOMNode()`\n\n> Note:\n>\n> `findDOMNode` is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction. [It has been deprecated in `StrictMode`.](strict-mode#warning-about-deprecated-finddomnode-usage)\n\n``` jsx\nfindDOMNode(component)\n```\n\nIf this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements. **In most cases, you can attach a ref to the DOM node and avoid using `findDOMNode` at all.**\n\nWhen a component renders to `null` or `false`, `findDOMNode` returns `null`. When a component renders to a string, `findDOMNode` returns a text DOM node containing that value. As of React 16, a component may return a fragment with multiple children, in which case `findDOMNode` will return the DOM node corresponding to the first non-empty child.\n\n> Note:\n>\n> `findDOMNode` only works on mounted components (that is, components that have been placed in the DOM). If you try to call this on a component that has not been mounted yet (like calling `findDOMNode()` in `render()` on a component that has yet to be created) an exception will be thrown.\n>\n> `findDOMNode` cannot be used on function components.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-dom.html](https://reactjs.org/docs/react-dom.html)"
- name: findRenderedComponentWithType()
  id: test-utils#findrenderedcomponentwithtype
  summary: Same as scryRenderedComponentsWithType() but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one
  belongs_to: Test Utilities
  description: |-
    ### `findRenderedComponentWithType()`

    ``` jsx
    findRenderedComponentWithType(
      tree,
      componentClass
    )
    ```

    Same as [`scryRenderedComponentsWithType()`](#scryrenderedcomponentswithtype) but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one.
- name: findRenderedDOMComponentWithClass()
  id: test-utils#findrendereddomcomponentwithclass
  summary: Like scryRenderedDOMComponentsWithClass() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one
  belongs_to: Test Utilities
  description: |-
    ### `findRenderedDOMComponentWithClass()`

    ``` jsx
    findRenderedDOMComponentWithClass(
      tree,
      className
    )
    ```

    Like [`scryRenderedDOMComponentsWithClass()`](#scryrendereddomcomponentswithclass) but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.
- name: findRenderedDOMComponentWithTag()
  id: test-utils#findrendereddomcomponentwithtag
  summary: Like scryRenderedDOMComponentsWithTag() but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one
  belongs_to: Test Utilities
  description: |-
    ### `findRenderedDOMComponentWithTag()`

    ``` jsx
    findRenderedDOMComponentWithTag(
      tree,
      tagName
    )
    ```

    Like [`scryRenderedDOMComponentsWithTag()`](#scryrendereddomcomponentswithtag) but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.
- name: flushSync()
  id: react-dom#flushsync
  summary: Force React to flush any updates inside the provided callback synchronously
  belongs_to: ReactDOM
  description: |-
    ### `flushSync()`

    ``` jsx
    flushSync(callback)
    ```

    Force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.

    ``` jsx
    // Force this state update to be synchronous.
    flushSync(() => {
      setCount(count + 1);
    });
    // By this point, DOM is updated.
    ```

    > Note:
    >
    > `flushSync` can significantly hurt performance. Use sparingly.
    >
    > `flushSync` may force pending Suspense boundaries to show their `fallback` state.
    >
    > `flushSync` may also run pending effects and synchronously apply any updates they contain before returning.
    >
    > `flushSync` may also flush updates outside the callback when necessary to flush the updates inside the callback. For example, if there are pending updates from a click, React may flush those before flushing the updates inside the callback.

    ## Legacy Reference
- name: forceUpdate()
  id: react-component#forceupdate
  summary: By default, when your component’s state or props change, your component will re-render
  belongs_to: React.Component
  description: |-
    ### `forceUpdate()`

    ``` jsx
    component.forceUpdate(callback)
    ```

    By default, when your component’s state or props change, your component will re-render. If your `render()` method depends on some other data, you can tell React that the component needs re-rendering by calling `forceUpdate()`.

    Calling `forceUpdate()` will cause `render()` to be called on the component, skipping `shouldComponentUpdate()`. This will trigger the normal lifecycle methods for child components, including the `shouldComponentUpdate()` method of each child. React will still only update the DOM if the markup changes.

    Normally you should try to avoid all uses of `forceUpdate()` and only read from `this.props` and `this.state` in `render()`.

    ## Class Properties
- name: Forms
  id: forms
  summary: HTML form elements work a bit differently from other DOM elements in React, because form elements naturally keep some internal state
  description: "# Forms\n\nHTML form elements work a bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:\n\n``` html\n<form>\n  <label>\n    Name:\n    <input type=\"text\" name=\"name\" />\n  </label>\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```\n\nThis form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it’s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called “controlled components”.\n\n## Controlled Components\n\nIn HTML, form elements such as `<input>`, `<textarea>`, and `<select>` typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with [`setState()`](react-component#setstate).\n\nWe can combine the two by making the React state be the “single source of truth”. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a “controlled component”.\n\nFor example, if we want to make the previous example log the name when it is submitted, we can write the form as a controlled component:\n\n``` jsx\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: ''};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/VmmPgp?editors=0010)\n\nSince the `value` attribute is set on our form element, the displayed value will always be `this.state.value`, making the React state the source of truth. Since `handleChange` runs on every keystroke to update the React state, the displayed value will update as the user types.\n\nWith a controlled component, the input’s value is always driven by the React state. While this means you have to type a bit more code, you can now pass the value to other UI elements too, or reset it from other event handlers.\n\n## The textarea Tag\n\nIn HTML, a `<textarea>` element defines its text by its children:\n\n``` html\n<textarea>\n  Hello there, this is some text in a text area\n</textarea>\n```\n\nIn React, a `<textarea>` uses a `value` attribute instead. This way, a form using a `<textarea>` can be written very similarly to a form that uses a single-line input:\n\n``` jsx\nclass EssayForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 'Please write an essay about your favorite DOM element.'\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('An essay was submitted: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Essay:\n          <textarea value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n```\n\nNotice that `this.state.value` is initialized in the constructor, so that the text area starts off with some text in it.\n\n## The select Tag\n\nIn HTML, `<select>` creates a drop-down list. For example, this HTML creates a drop-down list of flavors:\n\n``` html\n<select>\n  <option value=\"grapefruit\">Grapefruit</option>\n  <option value=\"lime\">Lime</option>\n  <option selected value=\"coconut\">Coconut</option>\n  <option value=\"mango\">Mango</option>\n</select>\n```\n\nNote that the Coconut option is initially selected, because of the `selected` attribute. React, instead of using this `selected` attribute, uses a `value` attribute on the root `select` tag. This is more convenient in a controlled component because you only need to update it in one place. For example:\n\n``` jsx\nclass FlavorForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: 'coconut'};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    alert('Your favorite flavor is: ' + this.state.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Pick your favorite flavor:\n          <select value={this.state.value} onChange={this.handleChange}>\n            <option value=\"grapefruit\">Grapefruit</option>\n            <option value=\"lime\">Lime</option>\n            <option value=\"coconut\">Coconut</option>\n            <option value=\"mango\">Mango</option>\n          </select>\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/JbbEzX?editors=0010)\n\nOverall, this makes it so that `<input type=\"text\">`, `<textarea>`, and `<select>` all work very similarly - they all accept a `value` attribute that you can use to implement a controlled component.\n\n> Note\n>\n> You can pass an array into the `value` attribute, allowing you to select multiple options in a `select` tag:\n>\n> ``` jsx\n> <select multiple={true} value={['B', 'C']}>\n> ```\n\n## The file input Tag\n\nIn HTML, an `<input type=\"file\">` lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the [File API](https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications).\n\n``` html\n<input type=\"file\" />\n```\n\nBecause its value is read-only, it is an **uncontrolled** component in React. It is discussed together with other uncontrolled components [later in the documentation](uncontrolled-components#the-file-input-tag).\n\n## Handling Multiple Inputs\n\nWhen you need to handle multiple controlled `input` elements, you can add a `name` attribute to each element and let the handler function choose what to do based on the value of `event.target.name`.\n\nFor example:\n\n``` jsx\nclass Reservation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isGoing: true,\n      numberOfGuests: 2\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    return (\n      <form>\n        <label>\n          Is going:\n          <input\n            name=\"isGoing\"            type=\"checkbox\"\n            checked={this.state.isGoing}\n            onChange={this.handleInputChange} />\n        </label>\n        <br />\n        <label>\n          Number of guests:\n          <input\n            name=\"numberOfGuests\"            type=\"number\"\n            value={this.state.numberOfGuests}\n            onChange={this.handleInputChange} />\n        </label>\n      </form>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/wgedvV?editors=0010)\n\nNote how we used the ES6 [computed property name](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names) syntax to update the state key corresponding to the given input name:\n\n``` jsx\nthis.setState({\n  [name]: value\n});\n```\n\nIt is equivalent to this ES5 code:\n\n``` jsx\nvar partialState = {};\npartialState[name] = value;\nthis.setState(partialState);\n```\n\nAlso, since `setState()` automatically [merges a partial state into the current state](state-and-lifecycle#state-updates-are-merged), we only needed to call it with the changed parts.\n\n## Controlled Input Null Value\n\nSpecifying the `value` prop on a [controlled component](forms#controlled-components) prevents the user from changing the input unless you desire so. If you’ve specified a `value` but the input is still editable, you may have accidentally set `value` to `undefined` or `null`.\n\nThe following code demonstrates this. (The input is locked at first but becomes editable after a short delay.)\n\n``` jsx\nReactDOM.createRoot(mountNode).render(<input value=\"hi\" />);\n\nsetTimeout(function() {\n  ReactDOM.createRoot(mountNode).render(<input value={null} />);\n}, 1000);\n```\n\n## Alternatives to Controlled Components\n\nIt can sometimes be tedious to use controlled components, because you need to write an event handler for every way your data can change and pipe all of the input state through a React component. This can become particularly annoying when you are converting a preexisting codebase to React, or integrating a React application with a non-React library. In these situations, you might want to check out [uncontrolled components](uncontrolled-components), an alternative technique for implementing input forms.\n\n## Fully-Fledged Solutions\n\nIf you’re looking for a complete solution including validation, keeping track of the visited fields, and handling form submission, [Formik](https://jaredpalmer.com/formik) is one of the popular choices. However, it is built on the same principles of controlled components and managing state — so don’t neglect to learn them.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/forms.html](https://reactjs.org/docs/forms.html)"
- name: Forwarding Refs
  id: forwarding-refs
  summary: Ref forwarding is a technique for automatically passing a ref through a component to one of its children
  description: "# Forwarding Refs\n\nRef forwarding is a technique for automatically passing a [ref](refs-and-the-dom) through a component to one of its children. This is typically not necessary for most components in the application. However, it can be useful for some kinds of components, especially in reusable component libraries. The most common scenarios are described below.\n\n## Forwarding refs to DOM components\n\nConsider a `FancyButton` component that renders the native `button` DOM element:\n\n``` jsx\nfunction FancyButton(props) {\n  return (\n    <button className=\"FancyButton\">\n      {props.children}\n    </button>\n  );\n}\n```\n\nReact components hide their implementation details, including their rendered output. Other components using `FancyButton` **usually will not need to** [obtain a ref](refs-and-the-dom) to the inner `button` DOM element. This is good because it prevents components from relying on each other’s DOM structure too much.\n\nAlthough such encapsulation is desirable for application-level components like `FeedStory` or `Comment`, it can be inconvenient for highly reusable “leaf” components like `FancyButton` or `MyTextInput`. These components tend to be used throughout the application in a similar manner as a regular DOM `button` and `input`, and accessing their DOM nodes may be unavoidable for managing focus, selection, or animations.\n\n**Ref forwarding is an opt-in feature that lets some components take a `ref` they receive, and pass it further down (in other words, “forward” it) to a child.**\n\nIn the example below, `FancyButton` uses `React.forwardRef` to obtain the `ref` passed to it, and then forward it to the DOM `button` that it renders:\n\n``` jsx\nconst FancyButton = React.forwardRef((props, ref) => (\n  <button ref={ref} className=\"FancyButton\">\n    {props.children}\n  </button>\n));\n\n// You can now get a ref directly to the DOM button:\nconst ref = React.createRef();\n<FancyButton ref={ref}>Click me!</FancyButton>;\n```\n\nThis way, components using `FancyButton` can get a ref to the underlying `button` DOM node and access it if necessary—just like if they used a DOM `button` directly.\n\nHere is a step-by-step explanation of what happens in the above example:\n\n1.  We create a [React ref](refs-and-the-dom) by calling `React.createRef` and assign it to a `ref` variable.\n2.  We pass our `ref` down to `<FancyButton ref={ref}>` by specifying it as a JSX attribute.\n3.  React passes the `ref` to the `(props, ref) => ...` function inside `forwardRef` as a second argument.\n4.  We forward this `ref` argument down to `<button ref={ref}>` by specifying it as a JSX attribute.\n5.  When the ref is attached, `ref.current` will point to the `<button>` DOM node.\n\n> Note\n>\n> The second `ref` argument only exists when you define a component with `React.forwardRef` call. Regular function or class components don’t receive the `ref` argument, and ref is not available in props either.\n>\n> Ref forwarding is not limited to DOM components. You can forward refs to class component instances, too.\n\n## Note for component library maintainers\n\n**When you start using `forwardRef` in a component library, you should treat it as a breaking change and release a new major version of your library.** This is because your library likely has an observably different behavior (such as what refs get assigned to, and what types are exported), and this can break apps and other libraries that depend on the old behavior.\n\nConditionally applying `React.forwardRef` when it exists is also not recommended for the same reasons: it changes how your library behaves and can break your users’ apps when they upgrade React itself.\n\n## Forwarding refs in higher-order components\n\nThis technique can also be particularly useful with [higher-order components](higher-order-components) (also known as HOCs). Let’s start with an example HOC that logs component props to the console:\n\n``` jsx\nfunction logProps(WrappedComponent) {\n  class LogProps extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log('old props:', prevProps);\n      console.log('new props:', this.props);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return LogProps;\n}\n```\n\nThe “logProps” HOC passes all `props` through to the component it wraps, so the rendered output will be the same. For example, we can use this HOC to log all props that get passed to our “fancy button” component:\n\n``` jsx\nclass FancyButton extends React.Component {\n  focus() {\n    // ...\n  }\n\n  // ...\n}\n\n// Rather than exporting FancyButton, we export LogProps.\n// It will render a FancyButton though.\nexport default logProps(FancyButton);\n```\n\nThere is one caveat to the above example: refs will not get passed through. That’s because `ref` is not a prop. Like `key`, it’s handled differently by React. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component.\n\nThis means that refs intended for our `FancyButton` component will actually be attached to the `LogProps` component:\n\n``` jsx\nimport FancyButton from './FancyButton';\n\nconst ref = React.createRef();\n\n// The FancyButton component we imported is the LogProps HOC.\n// Even though the rendered output will be the same,\n// Our ref will point to LogProps instead of the inner FancyButton component!\n// This means we can't call e.g. ref.current.focus()\n<FancyButton\n  label=\"Click Me\"\n  handleClick={handleClick}\n  ref={ref}/>;\n```\n\nFortunately, we can explicitly forward refs to the inner `FancyButton` component using the `React.forwardRef` API. `React.forwardRef` accepts a render function that receives `props` and `ref` parameters and returns a React node. For example:\n\n``` jsx\nfunction logProps(Component) {\n  class LogProps extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log('old props:', prevProps);\n      console.log('new props:', this.props);\n    }\n\n    render() {\n      const {forwardedRef, ...rest} = this.props;\n\n      // Assign the custom prop \"forwardedRef\" as a ref\n      return <Component ref={forwardedRef} {...rest} />;\n    }\n  }\n\n  // Note the second param \"ref\" provided by React.forwardRef.\n  // We can pass it along to LogProps as a regular prop, e.g. \"forwardedRef\"\n  // And it can then be attached to the Component.\n  return React.forwardRef((props, ref) => {\n    return <LogProps {...props} forwardedRef={ref} />;\n  });\n}\n```\n\n## Displaying a custom name in DevTools\n\n`React.forwardRef` accepts a render function. React DevTools uses this function to determine what to display for the ref forwarding component.\n\nFor example, the following component will appear as ”*ForwardRef*” in the DevTools:\n\n``` jsx\nconst WrappedComponent = React.forwardRef((props, ref) => {\n  return <LogProps {...props} forwardedRef={ref} />;\n});\n```\n\nIf you name the render function, DevTools will also include its name (e.g. ”*ForwardRef(myFunction)*”):\n\n``` jsx\nconst WrappedComponent = React.forwardRef(\n  function myFunction(props, ref) {\n    return <LogProps {...props} forwardedRef={ref} />;\n  }\n);\n```\n\nYou can even set the function’s `displayName` property to include the component you’re wrapping:\n\n``` jsx\nfunction logProps(Component) {\n  class LogProps extends React.Component {\n    // ...\n  }\n\n  function forwardRef(props, ref) {\n    return <LogProps {...props} forwardedRef={ref} />;\n  }\n\n  // Give this component a more helpful display name in DevTools.\n  // e.g. \"ForwardRef(logProps(MyComponent))\"\n  const name = Component.displayName || Component.name;\n  forwardRef.displayName = `logProps(${name})`;\n\n  return React.forwardRef(forwardRef);\n}\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/forwarding-refs.html](https://reactjs.org/docs/forwarding-refs.html)"
- name: Fragments
  id: fragments
  summary: A common pattern in React is for a component to return multiple elements
  description: "# Fragments\n\nA common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.\n\n``` jsx\nrender() {\n  return (\n    <React.Fragment>\n      <ChildA />\n      <ChildB />\n      <ChildC />\n    </React.Fragment>\n  );\n}\n```\n\nThere is also a new [short syntax](#short-syntax) for declaring them.\n\n## Motivation\n\nA common pattern is for a component to return a list of children. Take this example React snippet:\n\n``` jsx\nclass Table extends React.Component {\n  render() {\n    return (\n      <table>\n        <tr>\n          <Columns />\n        </tr>\n      </table>\n    );\n  }\n}\n```\n\n`<Columns />` would need to return multiple `<td>` elements in order for the rendered HTML to be valid. If a parent div was used inside the `render()` of `<Columns />`, then the resulting HTML will be invalid.\n\n``` jsx\nclass Columns extends React.Component {\n  render() {\n    return (\n      <div>\n        <td>Hello</td>\n        <td>World</td>\n      </div>\n    );\n  }\n}\n```\n\nresults in a `<Table />` output of:\n\n``` jsx\n<table>\n  <tr>\n    <div>\n      <td>Hello</td>\n      <td>World</td>\n    </div>\n  </tr>\n</table>\n```\n\nFragments solve this problem.\n\n## Usage\n\n``` jsx\nclass Columns extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <td>Hello</td>\n        <td>World</td>\n      </React.Fragment>\n    );\n  }\n}\n```\n\nwhich results in a correct `<Table />` output of:\n\n``` jsx\n<table>\n  <tr>\n    <td>Hello</td>\n    <td>World</td>\n  </tr>\n</table>\n```\n\n### Short Syntax\n\nThere is a new, shorter syntax you can use for declaring fragments. It looks like empty tags:\n\n``` jsx\nclass Columns extends React.Component {\n  render() {\n    return (\n      <>\n        <td>Hello</td>\n        <td>World</td>\n      </>\n    );\n  }\n}\n```\n\nYou can use `<></>` the same way you’d use any other element except that it doesn’t support keys or attributes.\n\n### Keyed Fragments\n\nFragments declared with the explicit `<React.Fragment>` syntax may have keys. A use case for this is mapping a collection to an array of fragments — for example, to create a description list:\n\n``` jsx\nfunction Glossary(props) {\n  return (\n    <dl>\n      {props.items.map(item => (\n        // Without the `key`, React will fire a key warning\n        <React.Fragment key={item.id}>\n          <dt>{item.term}</dt>\n          <dd>{item.description}</dd>\n        </React.Fragment>\n      ))}\n    </dl>\n  );\n}\n```\n\n`key` is the only attribute that can be passed to `Fragment`. In the future, we may add support for additional attributes, such as event handlers.\n\n### Live Demo\n\nYou can try out the new JSX fragment syntax with this [CodePen](https://codepen.io/reactjs/pen/VrEbjE?editors=1000).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/fragments.html](https://reactjs.org/docs/fragments.html)"
- name: getSnapshotBeforeUpdate()
  id: react-component#getsnapshotbeforeupdate
  summary: getSnapshotBeforeUpdate() is invoked right before the most recently rendered output is committed to e.g
  belongs_to: React.Component
  description: |-
    ### `getSnapshotBeforeUpdate()`

    ``` jsx
    getSnapshotBeforeUpdate(prevProps, prevState)
    ```

    `getSnapshotBeforeUpdate()` is invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed. Any value returned by this lifecycle method will be passed as a parameter to `componentDidUpdate()`.

    This use case is not common, but it may occur in UIs like a chat thread that need to handle scroll position in a special way.

    A snapshot value (or `null`) should be returned.

    For example:

    ``` jsx
    class ScrollingList extends React.Component {
      constructor(props) {
        super(props);
        this.listRef = React.createRef();
      }

      getSnapshotBeforeUpdate(prevProps, prevState) {
        // Are we adding new items to the list?
        // Capture the scroll position so we can adjust scroll later.
        if (prevProps.list.length < this.props.list.length) {
          const list = this.listRef.current;
          return list.scrollHeight - list.scrollTop;
        }
        return null;
      }

      componentDidUpdate(prevProps, prevState, snapshot) {
        // If we have a snapshot value, we've just added new items.
        // Adjust scroll so these new items don't push the old ones out of view.
        // (snapshot here is the value returned from getSnapshotBeforeUpdate)
        if (snapshot !== null) {
          const list = this.listRef.current;
          list.scrollTop = list.scrollHeight - snapshot;
        }
      }

      render() {
        return (
          <div ref={this.listRef}>{/* ...contents... */}</div>
        );
      }
    }
    ```

    In the above examples, it is important to read the `scrollHeight` property in `getSnapshotBeforeUpdate` because there may be delays between “render” phase lifecycles (like `render`) and “commit” phase lifecycles (like `getSnapshotBeforeUpdate` and `componentDidUpdate`).

    ### Error boundaries

    [Error boundaries](error-boundaries) are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.

    A class component becomes an error boundary if it defines either (or both) of the lifecycle methods `static getDerivedStateFromError()` or `componentDidCatch()`. Updating state from these lifecycles lets you capture an unhandled JavaScript error in the below tree and display a fallback UI.

    Only use error boundaries for recovering from unexpected exceptions; **don’t try to use them for control flow.**

    For more details, see [*Error Handling in React 16*](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html).

    > Note
    >
    > Error boundaries only catch errors in the components **below** them in the tree. An error boundary can’t catch an error within itself.
- name: Getting Started
  id: getting-started
  summary: This page is an overview of the React documentation and related resources
  description: "# Getting Started\n\nThis page is an overview of the React documentation and related resources.\n\n**React** is a JavaScript library for building user interfaces. Learn what React is all about on [our homepage](https://reactjs.org/) or [in the tutorial](https://reactjs.org/tutorial/tutorial.html).\n\n- [Try React](#try-react)\n- [Learn React](#learn-react)\n- [Staying Informed](#staying-informed)\n- [Versioned Documentation](#versioned-documentation)\n- [Something Missing?](#something-missing)\n\n## Try React\n\nReact has been designed from the start for gradual adoption, and **you can use as little or as much React as you need.** Whether you want to get a taste of React, add some interactivity to a simple HTML page, or start a complex React-powered app, the links in this section will help you get started.\n\n### Online Playgrounds\n\nIf you’re interested in playing around with React, you can use an online code playground. Try a Hello World template on [CodePen](https://reactjs.org/redirect-to-codepen/hello-world), [CodeSandbox](https://codesandbox.io/s/new), or [Stackblitz](https://stackblitz.com/fork/react).\n\nIf you prefer to use your own text editor, you can also [download this HTML file](https://raw.githubusercontent.com/reactjs/reactjs.org/main/static/html/single-file-example.html), edit it, and open it from the local filesystem in your browser. It does a slow runtime code transformation, so we’d only recommend using this for simple demos.\n\n### Add React to a Website\n\nYou can [add React to an HTML page in one minute](add-react-to-a-website). You can then either gradually expand its presence, or keep it contained to a few dynamic widgets.\n\n### Create a New React App\n\nWhen starting a React project, a [simple HTML page with script tags](add-react-to-a-website) might still be the best option. It only takes a minute to set up!\n\nAs your application grows, you might want to consider a more integrated setup. There are several JavaScript toolchains we recommend for larger applications. Each of them can work with little to no configuration and lets you take full advantage of the rich React ecosystem. [Learn how.](create-a-new-react-app)\n\n## Learn React\n\nPeople come to React from different backgrounds and with different learning styles. Whether you prefer a more theoretical or a practical approach, we hope you’ll find this section helpful.\n\n- If you prefer to **learn by doing**, start with our [practical tutorial](https://reactjs.org/tutorial/tutorial.html).\n- If you prefer to **learn concepts step by step**, start with our [guide to main concepts](index).\n\nLike any unfamiliar technology, React does have a learning curve. With practice and some patience, you *will* get the hang of it.\n\n### First Examples\n\nThe [React homepage](https://reactjs.org/) contains a few small React examples with a live editor. Even if you don’t know anything about React yet, try changing their code and see how it affects the result.\n\n### React for Beginners\n\nIf you feel that the React documentation goes at a faster pace than you’re comfortable with, check out [this overview of React by Tania Rascia](https://www.taniarascia.com/getting-started-with-react/). It introduces the most important React concepts in a detailed, beginner-friendly way. Once you’re done, give the documentation another try!\n\n### React for Designers\n\nIf you’re coming from a design background, [these resources](https://reactfordesigners.com/) are a great place to get started.\n\n### JavaScript Resources\n\nThe React documentation assumes some familiarity with programming in the JavaScript language. You don’t have to be an expert, but it’s harder to learn both React and JavaScript at the same time.\n\nWe recommend going through [this JavaScript overview](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript) to check your knowledge level. It will take you between 30 minutes and an hour but you will feel more confident learning React.\n\n> Tip\n>\n> Whenever you get confused by something in JavaScript, [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript) and [javascript.info](https://javascript.info/) are great websites to check. There are also [community support forums](https://reactjs.org/community/support.html) where you can ask for help.\n\n### Practical Tutorial\n\nIf you prefer to **learn by doing,** check out our [practical tutorial](https://reactjs.org/tutorial/tutorial.html). In this tutorial, we build a tic-tac-toe game in React. You might be tempted to skip it because you’re not into building games — but give it a chance. The techniques you’ll learn in the tutorial are fundamental to building *any* React apps, and mastering it will give you a much deeper understanding.\n\n### Step-by-Step Guide\n\nIf you prefer to **learn concepts step by step,** our [guide to main concepts](index) is the best place to start. Every next chapter in it builds on the knowledge introduced in the previous chapters so you won’t miss anything as you go along.\n\n### Thinking in React\n\nMany React users credit reading [Thinking in React](thinking-in-react) as the moment React finally “clicked” for them. It’s probably the oldest React walkthrough but it’s still just as relevant.\n\n### Recommended Courses\n\nSometimes people find third-party books and video courses more helpful than the official documentation. We maintain [a list of commonly recommended resources](https://reactjs.org/community/courses.html), some of which are free.\n\n### Advanced Concepts\n\nOnce you’re comfortable with the [main concepts](index) and played with React a little bit, you might be interested in more advanced topics. This section will introduce you to the powerful, but less commonly used React features like [context](context) and [refs](refs-and-the-dom).\n\n### API Reference\n\nThis documentation section is useful when you want to learn more details about a particular React API. For example, [`React.Component` API reference](react-component) can provide you with details on how `setState()` works, and what different lifecycle methods are useful for.\n\n### Glossary and FAQ\n\nThe [glossary](glossary) contains an overview of the most common terms you’ll see in the React documentation. There is also a FAQ section dedicated to short questions and answers about common topics, including [making AJAX requests](faq-ajax), [component state](faq-state), and [file structure](faq-structure).\n\n## Staying Informed\n\nThe [React blog](https://reactjs.org/blog/) is the official source for the updates from the React team. Anything important, including release notes or deprecation notices, will be posted there first.\n\nYou can also follow the [@reactjs account](https://twitter.com/reactjs) on Twitter, but you won’t miss anything essential if you only read the blog.\n\nNot every React release deserves its own blog post, but you can find a detailed changelog for every release in the [`CHANGELOG.md` file in the React repository](https://github.com/facebook/react/blob/main/CHANGELOG.md), as well as on the [Releases](https://github.com/facebook/react/releases) page.\n\n## Versioned Documentation\n\nThis documentation always reflects the latest stable version of React. Since React 16, you can find older versions of the documentation on a [separate page](https://reactjs.org/versions). Note that documentation for past versions is snapshotted at the time of the release, and isn’t being continuously updated.\n\n## Something Missing?\n\nIf something is missing in the documentation or if you found some part confusing, please [file an issue for the documentation repository](https://github.com/reactjs/reactjs.org/issues/new) with your suggestions for improvement, or tweet at the [@reactjs account](https://twitter.com/reactjs). We love hearing from you!\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/getting-started.html](https://reactjs.org/docs/getting-started.html)"
- name: Glossary of React Terms
  id: glossary
  summary: A single-page application is an application that loads a single HTML page and all the necessary assets (such as JavaScript and CSS) required for the application to run
  description: "# Glossary of React Terms\n\n## Single-page Application\n\nA single-page application is an application that loads a single HTML page and all the necessary assets (such as JavaScript and CSS) required for the application to run. Any interactions with the page or subsequent pages do not require a round trip to the server which means the page is not reloaded.\n\nThough you may build a single-page application in React, it is not a requirement. React can also be used for enhancing small parts of existing websites with additional interactivity. Code written in React can coexist peacefully with markup rendered on the server by something like PHP, or with other client-side libraries. In fact, this is exactly how React is being used at Facebook.\n\n## ES6, ES2015, ES2016, etc\n\nThese acronyms all refer to the most recent versions of the ECMAScript Language Specification standard, which the JavaScript language is an implementation of. The ES6 version (also known as ES2015) includes many additions to the previous versions such as: arrow functions, classes, template literals, `let` and `const` statements. You can learn more about specific versions [here](https://en.wikipedia.org/wiki/ECMAScript#Versions).\n\n## Compilers\n\nA JavaScript compiler takes JavaScript code, transforms it and returns JavaScript code in a different format. The most common use case is to take ES6 syntax and transform it into syntax that older browsers are capable of interpreting. [Babel](https://babeljs.io/) is the compiler most commonly used with React.\n\n## Bundlers\n\nBundlers take JavaScript and CSS code written as separate modules (often hundreds of them), and combine them together into a few files better optimized for the browsers. Some bundlers commonly used in React applications include [Webpack](https://webpack.js.org/) and [Browserify](http://browserify.org/).\n\n## Package Managers\n\nPackage managers are tools that allow you to manage dependencies in your project. [npm](https://www.npmjs.com/) and [Yarn](https://yarnpkg.com/) are two package managers commonly used in React applications. Both of them are clients for the same npm package registry.\n\n## CDN\n\nCDN stands for Content Delivery Network. CDNs deliver cached, static content from a network of servers across the globe.\n\n## JSX\n\nJSX is a syntax extension to JavaScript. It is similar to a template language, but it has full power of JavaScript. JSX gets compiled to `React.createElement()` calls which return plain JavaScript objects called “React elements”. To get a basic introduction to JSX [see the docs here](introducing-jsx) and find a more in-depth tutorial on JSX [here](jsx-in-depth).\n\nReact DOM uses camelCase property naming convention instead of HTML attribute names. For example, `tabindex` becomes `tabIndex` in JSX. The attribute `class` is also written as `className` since `class` is a reserved word in JavaScript:\n\n``` jsx\n<h1 className=\"hello\">My name is Clementine!</h1>\n```\n\n## [Elements](rendering-elements)\n\nReact elements are the building blocks of React applications. One might confuse elements with a more widely known concept of “components”. An element describes what you want to see on the screen. React elements are immutable.\n\n``` jsx\nconst element = <h1>Hello, world</h1>;\n```\n\nTypically, elements are not used directly, but get returned from components.\n\n## [Components](components-and-props)\n\nReact components are small, reusable pieces of code that return a React element to be rendered to the page. The simplest version of React component is a plain JavaScript function that returns a React element:\n\n``` jsx\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\n\nComponents can also be ES6 classes:\n\n``` jsx\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\nComponents can be broken down into distinct pieces of functionality and used within other components. Components can return other components, arrays, strings and numbers. A good rule of thumb is that if a part of your UI is used several times (Button, Panel, Avatar), or is complex enough on its own (App, FeedStory, Comment), it is a good candidate to be a reusable component. Component names should also always start with a capital letter (`<Wrapper/>` **not** `<wrapper/>`). See [this documentation](components-and-props#rendering-a-component) for more information on rendering components.\n\n### [`props`](components-and-props)\n\n`props` are inputs to a React component. They are data passed down from a parent component to a child component.\n\nRemember that `props` are readonly. They should not be modified in any way:\n\n``` jsx\n// Wrong!\nprops.number = 42;\n```\n\nIf you need to modify some value in response to user input or a network response, use `state` instead.\n\n### `props.children`\n\n`props.children` is available on every component. It contains the content between the opening and closing tags of a component. For example:\n\n``` jsx\n<Welcome>Hello world!</Welcome>\n```\n\nThe string `Hello world!` is available in `props.children` in the `Welcome` component:\n\n``` jsx\nfunction Welcome(props) {\n  return <p>{props.children}</p>;\n}\n```\n\nFor components defined as classes, use `this.props.children`:\n\n``` jsx\nclass Welcome extends React.Component {\n  render() {\n    return <p>{this.props.children}</p>;\n  }\n}\n```\n\n### [`state`](state-and-lifecycle#adding-local-state-to-a-class)\n\nA component needs `state` when some data associated with it changes over time. For example, a `Checkbox` component might need `isChecked` in its state, and a `NewsFeed` component might want to keep track of `fetchedPosts` in its state.\n\nThe most important difference between `state` and `props` is that `props` are passed from a parent component, but `state` is managed by the component itself. A component cannot change its `props`, but it can change its `state`.\n\nFor each particular piece of changing data, there should be just one component that “owns” it in its state. Don’t try to synchronize states of two different components. Instead, [lift it up](lifting-state-up) to their closest shared ancestor, and pass it down as props to both of them.\n\n## [Lifecycle Methods](state-and-lifecycle#adding-lifecycle-methods-to-a-class)\n\nLifecycle methods are custom functionality that gets executed during the different phases of a component. There are methods available when the component gets created and inserted into the DOM ([mounting](react-component#mounting)), when the component updates, and when the component gets unmounted or removed from the DOM.\n\n## [Controlled](forms#controlled-components) vs. [Uncontrolled Components](uncontrolled-components)\n\nReact has two different approaches to dealing with form inputs.\n\nAn input form element whose value is controlled by React is called a *controlled component*. When a user enters data into a controlled component a change event handler is triggered and your code decides whether the input is valid (by re-rendering with the updated value). If you do not re-render then the form element will remain unchanged.\n\nAn *uncontrolled component* works like form elements do outside of React. When a user inputs data into a form field (an input box, dropdown, etc) the updated information is reflected without React needing to do anything. However, this also means that you can’t force the field to have a certain value.\n\nIn most cases you should use controlled components.\n\n## [Keys](lists-and-keys)\n\nA “key” is a special string attribute you need to include when creating arrays of elements. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside an array to give the elements a stable identity.\n\nKeys only need to be unique among sibling elements in the same array. They don’t need to be unique across the whole application or even a single component.\n\nDon’t pass something like `Math.random()` to keys. It is important that keys have a “stable identity” across re-renders so that React can determine when items are added, removed, or re-ordered. Ideally, keys should correspond to unique and stable identifiers coming from your data, such as `post.id`.\n\n## [Refs](refs-and-the-dom)\n\nReact supports a special attribute that you can attach to any component. The `ref` attribute can be an object created by [`React.createRef()` function](react-api#reactcreateref) or a callback function, or a string (in legacy API). When the `ref` attribute is a callback function, the function receives the underlying DOM element or class instance (depending on the type of element) as its argument. This allows you to have direct access to the DOM element or component instance.\n\nUse refs sparingly. If you find yourself often using refs to “make things happen” in your app, consider getting more familiar with [top-down data flow](lifting-state-up).\n\n## [Events](handling-events)\n\nHandling events with React elements has some syntactic differences:\n\n- React event handlers are named using camelCase, rather than lowercase.\n- With JSX you pass a function as the event handler, rather than a string.\n\n## [Reconciliation](reconciliation)\n\nWhen a component’s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called “reconciliation”.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/glossary.html](https://reactjs.org/docs/glossary.html)"
- name: Handling Events
  id: handling-events
  summary: Handling events with React elements is very similar to handling events on DOM elements
  description: "# Handling Events\n\nHandling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:\n\n- React events are named using camelCase, rather than lowercase.\n- With JSX you pass a function as the event handler, rather than a string.\n\nFor example, the HTML:\n\n``` html\n<button onclick=\"activateLasers()\">\n  Activate Lasers\n</button>\n```\n\nis slightly different in React:\n\n``` jsx\n<button onClick={activateLasers}>\n  Activate Lasers\n</button>\n```\n\nAnother difference is that you cannot return `false` to prevent default behavior in React. You must call `preventDefault` explicitly. For example, with plain HTML, to prevent the default form behavior of submitting, you can write:\n\n``` html\n<form onsubmit=\"console.log('You clicked submit.'); return false\">\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\nIn React, this could instead be:\n\n``` jsx\nfunction Form() {\n  function handleSubmit(e) {\n    e.preventDefault();\n    console.log('You clicked submit.');\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n```\n\nHere, `e` is a synthetic event. React defines these synthetic events according to the [W3C spec](https://www.w3.org/TR/DOM-Level-3-Events/), so you don’t need to worry about cross-browser compatibility. React events do not work exactly the same as native events. See the [`SyntheticEvent`](events) reference guide to learn more.\n\nWhen using React, you generally don’t need to call `addEventListener` to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered.\n\nWhen you define a component using an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes), a common pattern is for an event handler to be a method on the class. For example, this `Toggle` component renders a button that lets the user toggle between “ON” and “OFF” states:\n\n``` jsx\nclass Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(prevState => ({\n      isToggleOn: !prevState.isToggleOn\n    }));\n  }\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      </button>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/xEmzGg?editors=0010)\n\nYou have to be careful about the meaning of `this` in JSX callbacks. In JavaScript, class methods are not [bound](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind) by default. If you forget to bind `this.handleClick` and pass it to `onClick`, `this` will be `undefined` when the function is actually called.\n\nThis is not React-specific behavior; it is a part of [how functions work in JavaScript](https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/). Generally, if you refer to a method without `()` after it, such as `onClick={this.handleClick}`, you should bind that method.\n\nIf calling `bind` annoys you, there are two ways you can get around this. You can use [public class fields syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_instance_fields) to correctly bind callbacks:\n\n``` jsx\nclass LoggingButton extends React.Component {\n  // This syntax ensures `this` is bound within handleClick.\n  handleClick = () => {\n    console.log('this is:', this);\n  };\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Click me\n      </button>\n    );\n  }\n}\n```\n\nThis syntax is enabled by default in [Create React App](https://github.com/facebookincubator/create-react-app).\n\nIf you aren’t using class fields syntax, you can use an [arrow function](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions) in the callback:\n\n``` jsx\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // This syntax ensures `this` is bound within handleClick\n    return (\n      <button onClick={() => this.handleClick()}>\n        Click me\n      </button>\n    );\n  }\n}\n```\n\nThe problem with this syntax is that a different callback is created each time the `LoggingButton` renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem.\n\n## Passing Arguments to Event Handlers\n\nInside a loop, it is common to want to pass an extra parameter to an event handler. For example, if `id` is the row ID, either of the following would work:\n\n``` jsx\n<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>\n<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>\n```\n\nThe above two lines are equivalent, and use [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) and [`Function.prototype.bind`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind) respectively.\n\nIn both cases, the `e` argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with `bind` any further arguments are automatically forwarded.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/handling-events.html](https://reactjs.org/docs/handling-events.html)"
- name: Higher-Order Components
  id: higher-order-components
  summary: A higher-order component (HOC) is an advanced technique in React for reusing component logic
  description: "# Higher-Order Components\n\nA higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature.\n\nConcretely, **a higher-order component is a function that takes a component and returns a new component.**\n\n``` jsx\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);\n```\n\nWhereas a component transforms props into UI, a higher-order component transforms a component into another component.\n\nHOCs are common in third-party React libraries, such as Redux’s [`connect`](https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#connect) and Relay’s [`createFragmentContainer`](https://relay.dev/docs/v10.1.3/fragment-container/#createfragmentcontainer).\n\nIn this document, we’ll discuss why higher-order components are useful, and how to write your own.\n\n## Use HOCs For Cross-Cutting Concerns\n\n> **Note**\n>\n> We previously recommended mixins as a way to handle cross-cutting concerns. We’ve since realized that mixins create more trouble than they are worth. [Read more](https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html) about why we’ve moved away from mixins and how you can transition your existing components.\n\nComponents are the primary unit of code reuse in React. However, you’ll find that some patterns aren’t a straightforward fit for traditional components.\n\nFor example, say you have a `CommentList` component that subscribes to an external data source to render a list of comments:\n\n``` jsx\nclass CommentList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      // \"DataSource\" is some global data source\n      comments: DataSource.getComments()\n    };\n  }\n\n  componentDidMount() {\n    // Subscribe to changes\n    DataSource.addChangeListener(this.handleChange);\n  }\n\n  componentWillUnmount() {\n    // Clean up listener\n    DataSource.removeChangeListener(this.handleChange);\n  }\n\n  handleChange() {\n    // Update component state whenever the data source changes\n    this.setState({\n      comments: DataSource.getComments()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.comments.map((comment) => (\n          <Comment comment={comment} key={comment.id} />\n        ))}\n      </div>\n    );\n  }\n}\n```\n\nLater, you write a component for subscribing to a single blog post, which follows a similar pattern:\n\n``` jsx\nclass BlogPost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      blogPost: DataSource.getBlogPost(props.id)\n    };\n  }\n\n  componentDidMount() {\n    DataSource.addChangeListener(this.handleChange);\n  }\n\n  componentWillUnmount() {\n    DataSource.removeChangeListener(this.handleChange);\n  }\n\n  handleChange() {\n    this.setState({\n      blogPost: DataSource.getBlogPost(this.props.id)\n    });\n  }\n\n  render() {\n    return <TextBlock text={this.state.blogPost} />;\n  }\n}\n```\n\n`CommentList` and `BlogPost` aren’t identical — they call different methods on `DataSource`, and they render different output. But much of their implementation is the same:\n\n- On mount, add a change listener to `DataSource`.\n- Inside the listener, call `setState` whenever the data source changes.\n- On unmount, remove the change listener.\n\nYou can imagine that in a large app, this same pattern of subscribing to `DataSource` and calling `setState` will occur over and over again. We want an abstraction that allows us to define this logic in a single place and share it across many components. This is where higher-order components excel.\n\nWe can write a function that creates components, like `CommentList` and `BlogPost`, that subscribe to `DataSource`. The function will accept as one of its arguments a child component that receives the subscribed data as a prop. Let’s call the function `withSubscription`:\n\n``` jsx\nconst CommentListWithSubscription = withSubscription(\n  CommentList,\n  (DataSource) => DataSource.getComments()\n);\n\nconst BlogPostWithSubscription = withSubscription(\n  BlogPost,\n  (DataSource, props) => DataSource.getBlogPost(props.id)\n);\n```\n\nThe first parameter is the wrapped component. The second parameter retrieves the data we’re interested in, given a `DataSource` and the current props.\n\nWhen `CommentListWithSubscription` and `BlogPostWithSubscription` are rendered, `CommentList` and `BlogPost` will be passed a `data` prop with the most current data retrieved from `DataSource`:\n\n``` jsx\n// This function takes a component...\nfunction withSubscription(WrappedComponent, selectData) {\n  // ...and returns another component...\n  return class extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = {\n        data: selectData(DataSource, props)\n      };\n    }\n\n    componentDidMount() {\n      // ... that takes care of the subscription...\n      DataSource.addChangeListener(this.handleChange);\n    }\n\n    componentWillUnmount() {\n      DataSource.removeChangeListener(this.handleChange);\n    }\n\n    handleChange() {\n      this.setState({\n        data: selectData(DataSource, this.props)\n      });\n    }\n\n    render() {\n      // ... and renders the wrapped component with the fresh data!\n      // Notice that we pass through any additional props\n      return <WrappedComponent data={this.state.data} {...this.props} />;\n    }\n  };\n}\n```\n\nNote that a HOC doesn’t modify the input component, nor does it use inheritance to copy its behavior. Rather, a HOC *composes* the original component by *wrapping* it in a container component. A HOC is a pure function with zero side-effects.\n\nAnd that’s it! The wrapped component receives all the props of the container, along with a new prop, `data`, which it uses to render its output. The HOC isn’t concerned with how or why the data is used, and the wrapped component isn’t concerned with where the data came from.\n\nBecause `withSubscription` is a normal function, you can add as many or as few arguments as you like. For example, you may want to make the name of the `data` prop configurable, to further isolate the HOC from the wrapped component. Or you could accept an argument that configures `shouldComponentUpdate`, or one that configures the data source. These are all possible because the HOC has full control over how the component is defined.\n\nLike components, the contract between `withSubscription` and the wrapped component is entirely props-based. This makes it easy to swap one HOC for a different one, as long as they provide the same props to the wrapped component. This may be useful if you change data-fetching libraries, for example.\n\n## Don’t Mutate the Original Component. Use Composition.\n\nResist the temptation to modify a component’s prototype (or otherwise mutate it) inside a HOC.\n\n``` jsx\nfunction logProps(InputComponent) {\n  InputComponent.prototype.componentDidUpdate = function(prevProps) {\n    console.log('Current props: ', this.props);\n    console.log('Previous props: ', prevProps);\n  };\n  // The fact that we're returning the original input is a hint that it has\n  // been mutated.\n  return InputComponent;\n}\n\n// EnhancedComponent will log whenever props are received\nconst EnhancedComponent = logProps(InputComponent);\n```\n\nThere are a few problems with this. One is that the input component cannot be reused separately from the enhanced component. More crucially, if you apply another HOC to `EnhancedComponent` that *also* mutates `componentDidUpdate`, the first HOC’s functionality will be overridden! This HOC also won’t work with function components, which do not have lifecycle methods.\n\nMutating HOCs are a leaky abstraction—the consumer must know how they are implemented in order to avoid conflicts with other HOCs.\n\nInstead of mutation, HOCs should use composition, by wrapping the input component in a container component:\n\n``` jsx\nfunction logProps(WrappedComponent) {\n  return class extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log('Current props: ', this.props);\n      console.log('Previous props: ', prevProps);\n    }\n    render() {\n      // Wraps the input component in a container, without mutating it. Good!\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n}\n```\n\nThis HOC has the same functionality as the mutating version while avoiding the potential for clashes. It works equally well with class and function components. And because it’s a pure function, it’s composable with other HOCs, or even with itself.\n\nYou may have noticed similarities between HOCs and a pattern called **container components**. Container components are part of a strategy of separating responsibility between high-level and low-level concerns. Containers manage things like subscriptions and state, and pass props to components that handle things like rendering UI. HOCs use containers as part of their implementation. You can think of HOCs as parameterized container component definitions.\n\n## Convention: Pass Unrelated Props Through to the Wrapped Component\n\nHOCs add features to a component. They shouldn’t drastically alter its contract. It’s expected that the component returned from a HOC has a similar interface to the wrapped component.\n\nHOCs should pass through props that are unrelated to its specific concern. Most HOCs contain a render method that looks something like this:\n\n``` jsx\nrender() {\n  // Filter out extra props that are specific to this HOC and shouldn't be\n  // passed through\n  const { extraProp, ...passThroughProps } = this.props;\n\n  // Inject props into the wrapped component. These are usually state values or\n  // instance methods.\n  const injectedProp = someStateOrInstanceMethod;\n\n  // Pass props to wrapped component\n  return (\n    <WrappedComponent\n      injectedProp={injectedProp}\n      {...passThroughProps}\n    />\n  );\n}\n```\n\nThis convention helps ensure that HOCs are as flexible and reusable as possible.\n\n## Convention: Maximizing Composability\n\nNot all HOCs look the same. Sometimes they accept only a single argument, the wrapped component:\n\n``` jsx\nconst NavbarWithRouter = withRouter(Navbar);\n```\n\nUsually, HOCs accept additional arguments. In this example from Relay, a config object is used to specify a component’s data dependencies:\n\n``` jsx\nconst CommentWithRelay = Relay.createContainer(Comment, config);\n```\n\nThe most common signature for HOCs looks like this:\n\n``` jsx\n// React Redux's `connect`\nconst ConnectedComment = connect(commentSelector, commentActions)(CommentList);\n```\n\n*What?!* If you break it apart, it’s easier to see what’s going on.\n\n``` jsx\n// connect is a function that returns another function\nconst enhance = connect(commentListSelector, commentListActions);\n// The returned function is a HOC, which returns a component that is connected\n// to the Redux store\nconst ConnectedComment = enhance(CommentList);\n```\n\nIn other words, `connect` is a higher-order function that returns a higher-order component!\n\nThis form may seem confusing or unnecessary, but it has a useful property. Single-argument HOCs like the one returned by the `connect` function have the signature `Component => Component`. Functions whose output type is the same as its input type are really easy to compose together.\n\n``` jsx\n// Instead of doing this...\nconst EnhancedComponent = withRouter(connect(commentSelector)(WrappedComponent))\n\n// ... you can use a function composition utility\n// compose(f, g, h) is the same as (...args) => f(g(h(...args)))\nconst enhance = compose(\n  // These are both single-argument HOCs\n  withRouter,\n  connect(commentSelector)\n)\nconst EnhancedComponent = enhance(WrappedComponent)\n```\n\n(This same property also allows `connect` and other enhancer-style HOCs to be used as decorators, an experimental JavaScript proposal.)\n\nThe `compose` utility function is provided by many third-party libraries including lodash (as [`lodash.flowRight`](https://lodash.com/docs/#flowRight)), [Redux](https://redux.js.org/api/compose), and [Ramda](https://ramdajs.com/docs/#compose).\n\n## Convention: Wrap the Display Name for Easy Debugging\n\nThe container components created by HOCs show up in the [React Developer Tools](https://github.com/facebook/react/tree/main/packages/react-devtools) like any other component. To ease debugging, choose a display name that communicates that it’s the result of a HOC.\n\nThe most common technique is to wrap the display name of the wrapped component. So if your higher-order component is named `withSubscription`, and the wrapped component’s display name is `CommentList`, use the display name `WithSubscription(CommentList)`:\n\n``` jsx\nfunction withSubscription(WrappedComponent) {\n  class WithSubscription extends React.Component {/* ... */}\n  WithSubscription.displayName = `WithSubscription(${getDisplayName(WrappedComponent)})`;\n  return WithSubscription;\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n```\n\n## Caveats\n\nHigher-order components come with a few caveats that aren’t immediately obvious if you’re new to React.\n\n### Don’t Use HOCs Inside the render Method\n\nReact’s diffing algorithm (called [Reconciliation](reconciliation)) uses component identity to determine whether it should update the existing subtree or throw it away and mount a new one. If the component returned from `render` is identical (`===`) to the component from the previous render, React recursively updates the subtree by diffing it with the new one. If they’re not equal, the previous subtree is unmounted completely.\n\nNormally, you shouldn’t need to think about this. But it matters for HOCs because it means you can’t apply a HOC to a component within the render method of a component:\n\n``` jsx\nrender() {\n  // A new version of EnhancedComponent is created on every render\n  // EnhancedComponent1 !== EnhancedComponent2\n  const EnhancedComponent = enhance(MyComponent);\n  // That causes the entire subtree to unmount/remount each time!\n  return <EnhancedComponent />;\n}\n```\n\nThe problem here isn’t just about performance — remounting a component causes the state of that component and all of its children to be lost.\n\nInstead, apply HOCs outside the component definition so that the resulting component is created only once. Then, its identity will be consistent across renders. This is usually what you want, anyway.\n\nIn those rare cases where you need to apply a HOC dynamically, you can also do it inside a component’s lifecycle methods or its constructor.\n\n### Static Methods Must Be Copied Over\n\nSometimes it’s useful to define a static method on a React component. For example, Relay containers expose a static method `getFragment` to facilitate the composition of GraphQL fragments.\n\nWhen you apply a HOC to a component, though, the original component is wrapped with a container component. That means the new component does not have any of the static methods of the original component.\n\n``` jsx\n// Define a static method\nWrappedComponent.staticMethod = function() {/*...*/}\n// Now apply a HOC\nconst EnhancedComponent = enhance(WrappedComponent);\n\n// The enhanced component has no static method\ntypeof EnhancedComponent.staticMethod === 'undefined' // true\n```\n\nTo solve this, you could copy the methods onto the container before returning it:\n\n``` jsx\nfunction enhance(WrappedComponent) {\n  class Enhance extends React.Component {/*...*/}\n  // Must know exactly which method(s) to copy :(\n  Enhance.staticMethod = WrappedComponent.staticMethod;\n  return Enhance;\n}\n```\n\nHowever, this requires you to know exactly which methods need to be copied. You can use [hoist-non-react-statics](https://github.com/mridgway/hoist-non-react-statics) to automatically copy all non-React static methods:\n\n``` jsx\nimport hoistNonReactStatic from 'hoist-non-react-statics';\nfunction enhance(WrappedComponent) {\n  class Enhance extends React.Component {/*...*/}\n  hoistNonReactStatic(Enhance, WrappedComponent);\n  return Enhance;\n}\n```\n\nAnother possible solution is to export the static method separately from the component itself.\n\n``` jsx\n// Instead of...\nMyComponent.someFunction = someFunction;\nexport default MyComponent;\n\n// ...export the method separately...\nexport { someFunction };\n\n// ...and in the consuming module, import both\nimport MyComponent, { someFunction } from './MyComponent.js';\n```\n\n### Refs Aren’t Passed Through\n\nWhile the convention for higher-order components is to pass through all props to the wrapped component, this does not work for refs. That’s because `ref` is not really a prop — like `key`, it’s handled specially by React. If you add a ref to an element whose component is the result of a HOC, the ref refers to an instance of the outermost container component, not the wrapped component.\n\nThe solution for this problem is to use the `React.forwardRef` API (introduced with React 16.3). [Learn more about it in the forwarding refs section](forwarding-refs).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/higher-order-components.html](https://reactjs.org/docs/higher-order-components.html)"
- name: Hooks API Reference
  id: hooks-reference
  summary: Hooks are a new addition in React 16.8
  description: "# Hooks API Reference\n\n*Hooks* are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\nThis page describes the APIs for the built-in Hooks in React.\n\nIf you’re new to Hooks, you might want to check out [the overview](hooks-overview) first. You may also find useful information in the [frequently asked questions](hooks-faq) section.\n\n- [Basic Hooks](#basic-hooks)\n\n  - [`useState`](#usestate)\n  - [`useEffect`](#useeffect)\n  - [`useContext`](#usecontext)\n\n- [Additional Hooks](#additional-hooks)\n\n  - [`useReducer`](#usereducer)\n  - [`useCallback`](#usecallback)\n  - [`useMemo`](#usememo)\n  - [`useRef`](#useref)\n  - [`useImperativeHandle`](#useimperativehandle)\n  - [`useLayoutEffect`](#uselayouteffect)\n  - [`useDebugValue`](#usedebugvalue)\n  - [`useDeferredValue`](#usedeferredvalue)\n  - [`useTransition`](#usetransition)\n  - [`useId`](#useid)\n\n- [Library Hooks](#library-hooks)\n\n  - [`useSyncExternalStore`](#usesyncexternalstore)\n  - [`useInsertionEffect`](#useinsertioneffect)\n\n## Basic Hooks\n\n### `useState`\n\n``` jsx\nconst [state, setState] = useState(initialState);\n```\n\nReturns a stateful value, and a function to update it.\n\nDuring the initial render, the returned state (`state`) is the same as the value passed as the first argument (`initialState`).\n\nThe `setState` function is used to update the state. It accepts a new state value and enqueues a re-render of the component.\n\n``` jsx\nsetState(newState);\n```\n\nDuring subsequent re-renders, the first value returned by `useState` will always be the most recent state after applying updates.\n\n> Note\n>\n> React guarantees that `setState` function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the `useEffect` or `useCallback` dependency list.\n\n#### Functional updates\n\nIf the new state is computed using the previous state, you can pass a function to `setState`. The function will receive the previous value, and return an updated value. Here’s an example of a counter component that uses both forms of `setState`:\n\n``` jsx\nfunction Counter({initialCount}) {\n  const [count, setCount] = useState(initialCount);\n  return (\n    <>\n      Count: {count}\n      <button onClick={() => setCount(initialCount)}>Reset</button>\n      <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>\n      <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>\n    </>\n  );\n}\n```\n\nThe ”+” and ”-” buttons use the functional form, because the updated value is based on the previous value. But the “Reset” button uses the normal form, because it always sets the count back to the initial value.\n\nIf your update function returns the exact same value as the current state, the subsequent rerender will be skipped completely.\n\n> Note\n>\n> Unlike the `setState` method found in class components, `useState` does not automatically merge update objects. You can replicate this behavior by combining the function updater form with object spread syntax:\n>\n> ``` jsx\n> const [state, setState] = useState({});\n> setState(prevState => {\n>   // Object.assign would also work\n>   return {...prevState, ...updatedValues};\n> });\n> ```\n>\n> Another option is `useReducer`, which is more suited for managing state objects that contain multiple sub-values.\n\n#### Lazy initial state\n\nThe `initialState` argument is the state used during the initial render. In subsequent renders, it is disregarded. If the initial state is the result of an expensive computation, you may provide a function instead, which will be executed only on the initial render:\n\n``` jsx\nconst [state, setState] = useState(() => {\n  const initialState = someExpensiveComputation(props);\n  return initialState;\n});\n```\n\n#### Bailing out of a state update\n\nIf you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the [`Object.is` comparison algorithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description).)\n\nNote that React may still need to render that specific component again before bailing out. That shouldn’t be a concern because React won’t unnecessarily go “deeper” into the tree. If you’re doing expensive calculations while rendering, you can optimize them with `useMemo`.\n\n#### Batching of state updates\n\nReact may group several state updates into a single re-render to improve performance. Normally, this improves performance and shouldn’t affect your application’s behavior.\n\nBefore React 18, only updates inside React event handlers were batched. Starting with React 18, [batching is enabled for all updates by default](https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#automatic-batching). Note that React makes sure that updates from several *different* user-initiated events — for example, clicking a button twice — are always processed separately and do not get batched. This prevents logical mistakes.\n\nIn the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in [`flushSync`](react-dom#flushsync). However, this can hurt performance so do this only where needed.\n\n### `useEffect`\n\n``` jsx\nuseEffect(didUpdate);\n```\n\nAccepts a function that contains imperative, possibly effectful code.\n\nMutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s *render phase*). Doing so will lead to confusing bugs and inconsistencies in the UI.\n\nInstead, use `useEffect`. The function passed to `useEffect` will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.\n\nBy default, effects run after every completed render, but you can choose to fire them [only when certain values have changed](#conditionally-firing-an-effect).\n\n#### Cleaning up an effect\n\nOften, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to `useEffect` may return a clean-up function. For example, to create a subscription:\n\n``` jsx\nuseEffect(() => {\n  const subscription = props.source.subscribe();\n  return () => {\n    // Clean up the subscription\n    subscription.unsubscribe();\n  };\n});\n```\n\nThe clean-up function runs before the component is removed from the UI to prevent memory leaks. Additionally, if a component renders multiple times (as they typically do), the **previous effect is cleaned up before executing the next effect**. In our example, this means a new subscription is created on every update. To avoid firing an effect on every update, refer to the next section.\n\n#### Timing of effects\n\nUnlike `componentDidMount` and `componentDidUpdate`, the function passed to `useEffect` fires **after** layout and paint, during a deferred event. This makes it suitable for the many common side effects, like setting up subscriptions and event handlers, because most types of work shouldn’t block the browser from updating the screen.\n\nHowever, not all effects can be deferred. For example, a DOM mutation that is visible to the user must fire synchronously before the next paint so that the user does not perceive a visual inconsistency. (The distinction is conceptually similar to passive versus active event listeners.) For these types of effects, React provides one additional Hook called [`useLayoutEffect`](#uselayouteffect). It has the same signature as `useEffect`, and only differs in when it is fired.\n\nAdditionally, starting in React 18, the function passed to `useEffect` will fire synchronously **before** layout and paint when it’s the result of a discrete user input such as a click, or when it’s the result of an update wrapped in [`flushSync`](react-dom#flushsync). This behavior allows the result of the effect to be observed by the event system, or by the caller of [`flushSync`](react-dom#flushsync).\n\n> Note\n>\n> This only affects the timing of when the function passed to `useEffect` is called - updates scheduled inside these effects are still deferred. This is different than [`useLayoutEffect`](#uselayouteffect), which fires the function and processes the updates inside of it immediately.\n\nEven in cases where `useEffect` is deferred until after the browser has painted, it’s guaranteed to fire before any new renders. React will always flush a previous render’s effects before starting a new update.\n\n#### Conditionally firing an effect\n\nThe default behavior for effects is to fire the effect after every completed render. That way an effect is always recreated if one of its dependencies changes.\n\nHowever, this may be overkill in some cases, like the subscription example from the previous section. We don’t need to create a new subscription on every update, only if the `source` prop has changed.\n\nTo implement this, pass a second argument to `useEffect` that is the array of values that the effect depends on. Our updated example now looks like this:\n\n``` jsx\nuseEffect(\n  () => {\n    const subscription = props.source.subscribe();\n    return () => {\n      subscription.unsubscribe();\n    };\n  },\n  [props.source],\n);\n```\n\nNow the subscription will only be recreated when `props.source` changes.\n\n> Note\n>\n> If you use this optimization, make sure the array includes **all values from the component scope (such as props and state) that change over time and that are used by the effect**. Otherwise, your code will reference stale values from previous renders. Learn more about [how to deal with functions](hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies) and what to do when the [array values change too often](hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often).\n>\n> If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array (`[]`) as a second argument. This tells React that your effect doesn’t depend on *any* values from props or state, so it never needs to re-run. This isn’t handled as a special case — it follows directly from how the dependencies array always works.\n>\n> If you pass an empty array (`[]`), the props and state inside the effect will always have their initial values. While passing `[]` as the second argument is closer to the familiar `componentDidMount` and `componentWillUnmount` mental model, there are usually [better](hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies) [solutions](hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often) to avoid re-running effects too often. Also, don’t forget that React defers running `useEffect` until after the browser has painted, so doing extra work is less of a problem.\n>\n> We recommend using the [`exhaustive-deps`](https://github.com/facebook/react/issues/14920) rule as part of our [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation) package. It warns when dependencies are specified incorrectly and suggests a fix.\n\nThe array of dependencies is not passed as arguments to the effect function. Conceptually, though, that’s what they represent: every value referenced inside the effect function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.\n\n### `useContext`\n\n``` jsx\nconst value = useContext(MyContext);\n```\n\nAccepts a context object (the value returned from `React.createContext`) and returns the current context value for that context. The current context value is determined by the `value` prop of the nearest `<MyContext.Provider>` above the calling component in the tree.\n\nWhen the nearest `<MyContext.Provider>` above the component updates, this Hook will trigger a rerender with the latest context `value` passed to that `MyContext` provider. Even if an ancestor uses [`React.memo`](react-api#reactmemo) or [`shouldComponentUpdate`](react-component#shouldcomponentupdate), a rerender will still happen starting at the component itself using `useContext`.\n\nDon’t forget that the argument to `useContext` must be the *context object itself*:\n\n- **Correct:** `useContext(MyContext)`\n- **Incorrect:** `useContext(MyContext.Consumer)`\n- **Incorrect:** `useContext(MyContext.Provider)`\n\nA component calling `useContext` will always re-render when the context value changes. If re-rendering the component is expensive, you can [optimize it by using memoization](https://github.com/facebook/react/issues/15156#issuecomment-474590693).\n\n> Tip\n>\n> If you’re familiar with the context API before Hooks, `useContext(MyContext)` is equivalent to `static contextType = MyContext` in a class, or to `<MyContext.Consumer>`.\n>\n> `useContext(MyContext)` only lets you *read* the context and subscribe to its changes. You still need a `<MyContext.Provider>` above in the tree to *provide* the value for this context.\n\n**Putting it together with Context.Provider**\n\n``` jsx\nconst themes = {\n  light: {\n    foreground: \"#000000\",\n    background: \"#eeeeee\"\n  },\n  dark: {\n    foreground: \"#ffffff\",\n    background: \"#222222\"\n  }\n};\n\nconst ThemeContext = React.createContext(themes.light);\n\nfunction App() {\n  return (\n    <ThemeContext.Provider value={themes.dark}>\n      <Toolbar />\n    </ThemeContext.Provider>\n  );\n}\n\nfunction Toolbar(props) {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nfunction ThemedButton() {\n  const theme = useContext(ThemeContext);\n\n  return (\n    <button style={{ background: theme.background, color: theme.foreground }}>\n      I am styled by theme context!\n    </button>\n  );\n}\n```\n\nThis example is modified for hooks from a previous example in the [Context Advanced Guide](context), where you can find more information about when and how to use Context.\n\n## Additional Hooks\n\nThe following Hooks are either variants of the basic ones from the previous section, or only needed for specific edge cases. Don’t stress about learning them up front.\n\n### `useReducer`\n\n``` jsx\nconst [state, dispatch] = useReducer(reducer, initialArg, init);\n```\n\nAn alternative to [`useState`](#usestate). Accepts a reducer of type `(state, action) => newState`, and returns the current state paired with a `dispatch` method. (If you’re familiar with Redux, you already know how this works.)\n\n`useReducer` is usually preferable to `useState` when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. `useReducer` also lets you optimize performance for components that trigger deep updates because [you can pass `dispatch` down instead of callbacks](hooks-faq#how-to-avoid-passing-callbacks-down).\n\nHere’s the counter example from the [`useState`](#usestate) section, rewritten to use a reducer:\n\n``` jsx\nconst initialState = {count: 0};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return {count: state.count + 1};\n    case 'decrement':\n      return {count: state.count - 1};\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({type: 'decrement'})}>-</button>\n      <button onClick={() => dispatch({type: 'increment'})}>+</button>\n    </>\n  );\n}\n```\n\n> Note\n>\n> React guarantees that `dispatch` function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the `useEffect` or `useCallback` dependency list.\n\n#### Specifying the initial state\n\nThere are two different ways to initialize `useReducer` state. You may choose either one depending on the use case. The simplest way is to pass the initial state as a second argument:\n\n``` jsx\n  const [state, dispatch] = useReducer(\n    reducer,\n    {count: initialCount}\n  );\n```\n\n> Note\n>\n> React doesn’t use the `state = initialState` argument convention popularized by Redux. The initial value sometimes needs to depend on props and so is specified from the Hook call instead. If you feel strongly about this, you can call `useReducer(reducer, undefined, reducer)` to emulate the Redux behavior, but it’s not encouraged.\n\n#### Lazy initialization\n\nYou can also create the initial state lazily. To do this, you can pass an `init` function as the third argument. The initial state will be set to `init(initialArg)`.\n\nIt lets you extract the logic for calculating the initial state outside the reducer. This is also handy for resetting the state later in response to an action:\n\n``` jsx\nfunction init(initialCount) {\n  return {count: initialCount};\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return {count: state.count + 1};\n    case 'decrement':\n      return {count: state.count - 1};\n    case 'reset':\n      return init(action.payload);\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter({initialCount}) {\n  const [state, dispatch] = useReducer(reducer, initialCount, init);\n  return (\n    <>\n      Count: {state.count}\n      <button\n        onClick={() => dispatch({type: 'reset', payload: initialCount})}>        Reset\n      </button>\n      <button onClick={() => dispatch({type: 'decrement'})}>-</button>\n      <button onClick={() => dispatch({type: 'increment'})}>+</button>\n    </>\n  );\n}\n```\n\n#### Bailing out of a dispatch\n\nIf you return the same value from a Reducer Hook as the current state, React will bail out without rendering the children or firing effects. (React uses the [`Object.is` comparison algorithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description).)\n\nNote that React may still need to render that specific component again before bailing out. That shouldn’t be a concern because React won’t unnecessarily go “deeper” into the tree. If you’re doing expensive calculations while rendering, you can optimize them with `useMemo`.\n\n### `useCallback`\n\n``` jsx\nconst memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n```\n\nReturns a [memoized](https://en.wikipedia.org/wiki/Memoization) callback.\n\nPass an inline callback and an array of dependencies. `useCallback` will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. `shouldComponentUpdate`).\n\n`useCallback(fn, deps)` is equivalent to `useMemo(() => fn, deps)`.\n\n> Note\n>\n> The array of dependencies is not passed as arguments to the callback. Conceptually, though, that’s what they represent: every value referenced inside the callback should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.\n>\n> We recommend using the [`exhaustive-deps`](https://github.com/facebook/react/issues/14920) rule as part of our [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation) package. It warns when dependencies are specified incorrectly and suggests a fix.\n\n### `useMemo`\n\n``` jsx\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\nReturns a [memoized](https://en.wikipedia.org/wiki/Memoization) value.\n\nPass a “create” function and an array of dependencies. `useMemo` will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.\n\nRemember that the function passed to `useMemo` runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in `useEffect`, not `useMemo`.\n\nIf no array is provided, a new value will be computed on every render.\n\n**You may rely on `useMemo` as a performance optimization, not as a semantic guarantee.** In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without `useMemo` — and then add it to optimize performance.\n\n> Note\n>\n> The array of dependencies is not passed as arguments to the function. Conceptually, though, that’s what they represent: every value referenced inside the function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.\n>\n> We recommend using the [`exhaustive-deps`](https://github.com/facebook/react/issues/14920) rule as part of our [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation) package. It warns when dependencies are specified incorrectly and suggests a fix.\n\n### `useRef`\n\n``` jsx\nconst refContainer = useRef(initialValue);\n```\n\n`useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument (`initialValue`). The returned object will persist for the full lifetime of the component.\n\nA common use case is to access a child imperatively:\n\n``` jsx\nfunction TextInputWithFocusButton() {\n  const inputEl = useRef(null);\n  const onButtonClick = () => {\n    // `current` points to the mounted text input element\n    inputEl.current.focus();\n  };\n  return (\n    <>\n      <input ref={inputEl} type=\"text\" />\n      <button onClick={onButtonClick}>Focus the input</button>\n    </>\n  );\n}\n```\n\nEssentially, `useRef` is like a “box” that can hold a mutable value in its `.current` property.\n\nYou might be familiar with refs primarily as a way to [access the DOM](refs-and-the-dom). If you pass a ref object to React with `<div ref={myRef} />`, React will set its `.current` property to the corresponding DOM node whenever that node changes.\n\nHowever, `useRef()` is useful for more than the `ref` attribute. It’s [handy for keeping any mutable value around](hooks-faq#is-there-something-like-instance-variables) similar to how you’d use instance fields in classes.\n\nThis works because `useRef()` creates a plain JavaScript object. The only difference between `useRef()` and creating a `{current: ...}` object yourself is that `useRef` will give you the same ref object on every render.\n\nKeep in mind that `useRef` *doesn’t* notify you when its content changes. Mutating the `.current` property doesn’t cause a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a [callback ref](hooks-faq#how-can-i-measure-a-dom-node) instead.\n\n### `useImperativeHandle`\n\n``` jsx\nuseImperativeHandle(ref, createHandle, [deps])\n```\n\n`useImperativeHandle` customizes the instance value that is exposed to parent components when using `ref`. As always, imperative code using refs should be avoided in most cases. `useImperativeHandle` should be used with [`forwardRef`](react-api#reactforwardref):\n\n``` jsx\nfunction FancyInput(props, ref) {\n  const inputRef = useRef();\n  useImperativeHandle(ref, () => ({\n    focus: () => {\n      inputRef.current.focus();\n    }\n  }));\n  return <input ref={inputRef} ... />;\n}\nFancyInput = forwardRef(FancyInput);\n```\n\nIn this example, a parent component that renders `<FancyInput ref={inputRef} />` would be able to call `inputRef.current.focus()`.\n\n### `useLayoutEffect`\n\nThe signature is identical to `useEffect`, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n\nPrefer the standard `useEffect` when possible to avoid blocking visual updates.\n\n> Tip\n>\n> If you’re migrating code from a class component, note `useLayoutEffect` fires in the same phase as `componentDidMount` and `componentDidUpdate`. However, **we recommend starting with `useEffect` first** and only trying `useLayoutEffect` if that causes a problem.\n>\n> If you use server rendering, keep in mind that *neither* `useLayoutEffect` nor `useEffect` can run until the JavaScript is downloaded. This is why React warns when a server-rendered component contains `useLayoutEffect`. To fix this, either move that logic to `useEffect` (if it isn’t necessary for the first render), or delay showing that component until after the client renders (if the HTML looks broken until `useLayoutEffect` runs).\n>\n> To exclude a component that needs layout effects from the server-rendered HTML, render it conditionally with `showChild && <Child />` and defer showing it with `useEffect(() => { setShowChild(true); }, [])`. This way, the UI doesn’t appear broken before hydration.\n\n### `useDebugValue`\n\n``` jsx\nuseDebugValue(value)\n```\n\n`useDebugValue` can be used to display a label for custom hooks in React DevTools.\n\nFor example, consider the `useFriendStatus` custom Hook described in [“Building Your Own Hooks”](hooks-custom):\n\n``` jsx\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  // ...\n\n  // Show a label in DevTools next to this Hook\n  // e.g. \"FriendStatus: Online\"\n  useDebugValue(isOnline ? 'Online' : 'Offline');\n\n  return isOnline;\n}\n```\n\n> Tip\n>\n> We don’t recommend adding debug values to every custom Hook. It’s most valuable for custom Hooks that are part of shared libraries.\n\n#### Defer formatting debug values\n\nIn some cases formatting a value for display might be an expensive operation. It’s also unnecessary unless a Hook is actually inspected.\n\nFor this reason `useDebugValue` accepts a formatting function as an optional second parameter. This function is only called if the Hooks are inspected. It receives the debug value as a parameter and should return a formatted display value.\n\nFor example a custom Hook that returned a `Date` value could avoid calling the `toDateString` function unnecessarily by passing the following formatter:\n\n``` jsx\nuseDebugValue(date, date => date.toDateString());\n```\n\n### `useDeferredValue`\n\n``` jsx\nconst deferredValue = useDeferredValue(value);\n```\n\n`useDeferredValue` accepts a value and returns a new copy of the value that will defer to more urgent updates. If the current render is the result of an urgent update, like user input, React will return the previous value and then render the new value after the urgent render has completed.\n\nThis hook is similar to user-space hooks which use debouncing or throttling to defer updates. The benefits to using `useDeferredValue` is that React will work on the update as soon as other work finishes (instead of waiting for an arbitrary amount of time), and like [`startTransition`](react-api#starttransition), deferred values can suspend without triggering an unexpected fallback for existing content.\n\n#### Memoizing deferred children\n\n`useDeferredValue` only defers the value that you pass to it. If you want to prevent a child component from re-rendering during an urgent update, you must also memoize that component with [`React.memo`](react-api#reactmemo) or [`React.useMemo`](hooks-reference#usememo):\n\n``` jsx\nfunction Typeahead() {\n  const query = useSearchQuery('');\n  const deferredQuery = useDeferredValue(query);\n\n  // Memoizing tells React to only re-render when deferredQuery changes,\n  // not when query changes.\n  const suggestions = useMemo(() =>\n    <SearchSuggestions query={deferredQuery} />,\n    [deferredQuery]\n  );\n\n  return (\n    <>\n      <SearchInput query={query} />\n      <Suspense fallback=\"Loading results...\">\n        {suggestions}\n      </Suspense>\n    </>\n  );\n}\n```\n\nMemoizing the children tells React that it only needs to re-render them when `deferredQuery` changes and not when `query` changes. This caveat is not unique to `useDeferredValue`, and it’s the same pattern you would use with similar hooks that use debouncing or throttling.\n\n### `useTransition`\n\n``` jsx\nconst [isPending, startTransition] = useTransition();\n```\n\nReturns a stateful value for the pending state of the transition, and a function to start it.\n\n`startTransition` lets you mark updates in the provided callback as transitions:\n\n``` jsx\nstartTransition(() => {\n  setCount(count + 1);\n})\n```\n\n`isPending` indicates when a transition is active to show a pending state:\n\n``` jsx\nfunction App() {\n  const [isPending, startTransition] = useTransition();\n  const [count, setCount] = useState(0);\n  \n  function handleClick() {\n    startTransition(() => {\n      setCount(c => c + 1);\n    })\n  }\n\n  return (\n    <div>\n      {isPending && <Spinner />}\n      <button onClick={handleClick}>{count}</button>\n    </div>\n  );\n}\n```\n\n> Note:\n>\n> Updates in a transition yield to more urgent updates such as clicks.\n>\n> Updates in a transition will not show a fallback for re-suspended content. This allows the user to continue interacting with the current content while rendering the update.\n\n### `useId`\n\n``` jsx\nconst id = useId();\n```\n\n`useId` is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches.\n\n> Note\n>\n> `useId` is **not** for generating [keys in a list](lists-and-keys#keys). Keys should be generated from your data.\n\nFor a basic example, pass the `id` directly to the elements that need it:\n\n``` jsx\nfunction Checkbox() {\n  const id = useId();\n  return (\n    <>\n      <label htmlFor={id}>Do you like React?</label>\n      <input id={id} type=\"checkbox\" name=\"react\"/>\n    </>\n  );\n};\n```\n\nFor multiple IDs in the same component, append a suffix using the same `id`:\n\n``` jsx\nfunction NameFields() {\n  const id = useId();\n  return (\n    <div>\n      <label htmlFor={id + '-firstName'}>First Name</label>\n      <div>\n        <input id={id + '-firstName'} type=\"text\" />\n      </div>\n      <label htmlFor={id + '-lastName'}>Last Name</label>\n      <div>\n        <input id={id + '-lastName'} type=\"text\" />\n      </div>\n    </div>\n  );\n}\n```\n\n> Note:\n>\n> `useId` generates a string that includes the `:` token. This helps ensure that the token is unique, but is not supported in CSS selectors or APIs like `querySelectorAll`.\n>\n> `useId` supports an `identifierPrefix` to prevent collisions in multi-root apps. To configure, see the options for [`hydrateRoot`](react-dom-client#hydrateroot) and [`ReactDOMServer`](react-dom-server).\n\n## Library Hooks\n\nThe following Hooks are provided for library authors to integrate libraries deeply into the React model, and are not typically used in application code.\n\n### `useSyncExternalStore`\n\n``` jsx\nconst state = useSyncExternalStore(subscribe, getSnapshot[, getServerSnapshot]);\n```\n\n`useSyncExternalStore` is a hook recommended for reading and subscribing from external data sources in a way that’s compatible with concurrent rendering features like selective hydration and time slicing.\n\nThis method returns the value of the store and accepts three arguments:\n\n- `subscribe`: function to register a callback that is called whenever the store changes.\n- `getSnapshot`: function that returns the current value of the store.\n- `getServerSnapshot`: function that returns the snapshot used during server rendering.\n\nThe most basic example simply subscribes to the entire store:\n\n``` jsx\nconst state = useSyncExternalStore(store.subscribe, store.getSnapshot);\n```\n\nHowever, you can also subscribe to a specific field:\n\n``` jsx\nconst selectedField = useSyncExternalStore(\n  store.subscribe,\n  () => store.getSnapshot().selectedField,\n);\n```\n\nWhen server rendering, you must serialize the store value used on the server, and provide it to `useSyncExternalStore`. React will use this snapshot during hydration to prevent server mismatches:\n\n``` jsx\nconst selectedField = useSyncExternalStore(\n  store.subscribe,\n  () => store.getSnapshot().selectedField,\n  () => INITIAL_SERVER_SNAPSHOT.selectedField,\n);\n```\n\n> Note:\n>\n> `getSnapshot` must return a cached value. If getSnapshot is called multiple times in a row, it must return the same exact value unless there was a store update in between.\n>\n> A shim is provided for supporting multiple React versions published as `use-sync-external-store/shim`. This shim will prefer `useSyncExternalStore` when available, and fallback to a user-space implementation when it’s not.\n>\n> As a convenience, we also provide a version of the API with automatic support for memoizing the result of getSnapshot published as `use-sync-external-store/with-selector`.\n\n### `useInsertionEffect`\n\n``` jsx\nuseInsertionEffect(didUpdate);\n```\n\nThe signature is identical to `useEffect`, but it fires synchronously *before* all DOM mutations. Use this to inject styles into the DOM before reading layout in [`useLayoutEffect`](#uselayouteffect). Since this hook is limited in scope, this hook does not have access to refs and cannot schedule updates.\n\n> Note:\n>\n> `useInsertionEffect` should be limited to css-in-js library authors. Prefer [`useEffect`](#useeffect) or [`useLayoutEffect`](#uselayouteffect) instead.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/hooks-reference.html](https://reactjs.org/docs/hooks-reference.html)"
- name: Hooks at a Glance
  id: hooks-overview
  summary: Hooks are a new addition in React 16.8
  description: "# Hooks at a Glance\n\n*Hooks* are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\nHooks are [backwards-compatible](hooks-intro#no-breaking-changes). This page provides an overview of Hooks for experienced React users. This is a fast-paced overview. If you get confused, look for a yellow box like this:\n\n> Detailed Explanation\n>\n> Read the [Motivation](hooks-intro#motivation) to learn why we’re introducing Hooks to React.\n\n**↑↑↑ Each section ends with a yellow box like this.** They link to detailed explanations.\n\n## 📌 State Hook\n\nThis example renders a counter. When you click the button, it increments the value:\n\n``` jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\nHere, `useState` is a *Hook* (we’ll talk about what this means in a moment). We call it inside a function component to add some local state to it. React will preserve this state between re-renders. `useState` returns a pair: the *current* state value and a function that lets you update it. You can call this function from an event handler or somewhere else. It’s similar to `this.setState` in a class, except it doesn’t merge the old and new state together. (We’ll show an example comparing `useState` to `this.state` in [Using the State Hook](hooks-state).)\n\nThe only argument to `useState` is the initial state. In the example above, it is `0` because our counter starts from zero. Note that unlike `this.state`, the state here doesn’t have to be an object — although it can be if you want. The initial state argument is only used during the first render.\n\n#### Declaring multiple state variables\n\nYou can use the State Hook more than once in a single component:\n\n``` jsx\nfunction ExampleWithManyStates() {\n  // Declare multiple state variables!\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n  // ...\n}\n```\n\nThe [array destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring) syntax lets us give different names to the state variables we declared by calling `useState`. These names aren’t a part of the `useState` API. Instead, React assumes that if you call `useState` many times, you do it in the same order during every render. We’ll come back to why this works and when this is useful later.\n\n#### But what is a Hook?\n\nHooks are functions that let you “hook into” React state and lifecycle features from function components. Hooks don’t work inside classes — they let you use React without classes. (We [don’t recommend](hooks-intro#gradual-adoption-strategy) rewriting your existing components overnight but you can start using Hooks in the new ones if you’d like.)\n\nReact provides a few built-in Hooks like `useState`. You can also create your own Hooks to reuse stateful behavior between different components. We’ll look at the built-in Hooks first.\n\n> Detailed Explanation\n>\n> You can learn more about the State Hook on a dedicated page: [Using the State Hook](hooks-state).\n\n## ⚡️ Effect Hook\n\nYou’ve likely performed data fetching, subscriptions, or manually changing the DOM from React components before. We call these operations “side effects” (or “effects” for short) because they can affect other components and can’t be done during rendering.\n\nThe Effect Hook, `useEffect`, adds the ability to perform side effects from a function component. It serves the same purpose as `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` in React classes, but unified into a single API. (We’ll show examples comparing `useEffect` to these methods in [Using the Effect Hook](hooks-effect).)\n\nFor example, this component sets the document title after React updates the DOM:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\nWhen you call `useEffect`, you’re telling React to run your “effect” function after flushing changes to the DOM. Effects are declared inside the component so they have access to its props and state. By default, React runs the effects after every render — *including* the first render. (We’ll talk more about how this compares to class lifecycles in [Using the Effect Hook](hooks-effect).)\n\nEffects may also optionally specify how to “clean up” after them by returning a function. For example, this component uses an effect to subscribe to a friend’s online status, and cleans up by unsubscribing from it:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n\nIn this example, React would unsubscribe from our `ChatAPI` when the component unmounts, as well as before re-running the effect due to a subsequent render. (If you want, there’s a way to [tell React to skip re-subscribing](hooks-effect#tip-optimizing-performance-by-skipping-effects) if the `props.friend.id` we passed to `ChatAPI` didn’t change.)\n\nJust like with `useState`, you can use more than a single effect in a component:\n\n``` jsx\nfunction FriendStatusWithCounter(props) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n  // ...\n```\n\nHooks let you organize side effects in a component by what pieces are related (such as adding and removing a subscription), rather than forcing a split based on lifecycle methods.\n\n> Detailed Explanation\n>\n> You can learn more about `useEffect` on a dedicated page: [Using the Effect Hook](hooks-effect).\n\n## ✌️ Rules of Hooks\n\nHooks are JavaScript functions, but they impose two additional rules:\n\n- Only call Hooks **at the top level**. Don’t call Hooks inside loops, conditions, or nested functions.\n- Only call Hooks **from React function components**. Don’t call Hooks from regular JavaScript functions. (There is just one other valid place to call Hooks — your own custom Hooks. We’ll learn about them in a moment.)\n\nWe provide a [linter plugin](https://www.npmjs.com/package/eslint-plugin-react-hooks) to enforce these rules automatically. We understand these rules might seem limiting or confusing at first, but they are essential to making Hooks work well.\n\n> Detailed Explanation\n>\n> You can learn more about these rules on a dedicated page: [Rules of Hooks](hooks-rules).\n\n## 💡 Building Your Own Hooks\n\nSometimes, we want to reuse some stateful logic between components. Traditionally, there were two popular solutions to this problem: [higher-order components](higher-order-components) and [render props](render-props). Custom Hooks let you do this, but without adding more components to your tree.\n\nEarlier on this page, we introduced a `FriendStatus` component that calls the `useState` and `useEffect` Hooks to subscribe to a friend’s online status. Let’s say we also want to reuse this subscription logic in another component.\n\nFirst, we’ll extract this logic into a custom Hook called `useFriendStatus`:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n    };\n  });\n\n  return isOnline;\n}\n```\n\nIt takes `friendID` as an argument, and returns whether our friend is online.\n\nNow we can use it from both components:\n\n``` jsx\nfunction FriendStatus(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n\n``` jsx\nfunction FriendListItem(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  return (\n    <li style={{ color: isOnline ? 'green' : 'black' }}>\n      {props.friend.name}\n    </li>\n  );\n}\n```\n\nThe state of each component is completely independent. Hooks are a way to reuse *stateful logic*, not state itself. In fact, each *call* to a Hook has a completely isolated state — so you can even use the same custom Hook twice in one component.\n\nCustom Hooks are more of a convention than a feature. If a function’s name starts with ”`use`” and it calls other Hooks, we say it is a custom Hook. The `useSomething` naming convention is how our linter plugin is able to find bugs in the code using Hooks.\n\nYou can write custom Hooks that cover a wide range of use cases like form handling, animation, declarative subscriptions, timers, and probably many more we haven’t considered. We are excited to see what custom Hooks the React community will come up with.\n\n> Detailed Explanation\n>\n> You can learn more about custom Hooks on a dedicated page: [Building Your Own Hooks](hooks-custom).\n\n## 🔌 Other Hooks\n\nThere are a few less commonly used built-in Hooks that you might find useful. For example, [`useContext`](hooks-reference#usecontext) lets you subscribe to React context without introducing nesting:\n\n``` jsx\nfunction Example() {\n  const locale = useContext(LocaleContext);\n  const theme = useContext(ThemeContext);\n  // ...\n}\n```\n\nAnd [`useReducer`](hooks-reference#usereducer) lets you manage local state of complex components with a reducer:\n\n``` jsx\nfunction Todos() {\n  const [todos, dispatch] = useReducer(todosReducer);\n  // ...\n```\n\n> Detailed Explanation\n>\n> You can learn more about all the built-in Hooks on a dedicated page: [Hooks API Reference](hooks-reference).\n\n## Next Steps\n\nPhew, that was fast! If some things didn’t quite make sense or you’d like to learn more in detail, you can read the next pages, starting with the [State Hook](hooks-state) documentation.\n\nYou can also check out the [Hooks API reference](hooks-reference) and the [Hooks FAQ](hooks-faq).\n\nFinally, don’t miss the [introduction page](hooks-intro) which explains *why* we’re adding Hooks and how we’ll start using them side by side with classes — without rewriting our apps.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/hooks-overview.html](https://reactjs.org/docs/hooks-overview.html)"
- name: Hooks FAQ
  id: hooks-faq
  summary: Hooks are a new addition in React 16.8
  description: "# Hooks FAQ\n\n*Hooks* are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\nThis page answers some of the frequently asked questions about [Hooks](hooks-overview).\n\n- **[Adoption Strategy](#adoption-strategy)**\n\n  - [Which versions of React include Hooks?](#which-versions-of-react-include-hooks)\n  - [Do I need to rewrite all my class components?](#do-i-need-to-rewrite-all-my-class-components)\n  - [What can I do with Hooks that I couldn’t with classes?](#what-can-i-do-with-hooks-that-i-couldnt-with-classes)\n  - [How much of my React knowledge stays relevant?](#how-much-of-my-react-knowledge-stays-relevant)\n  - [Should I use Hooks, classes, or a mix of both?](#should-i-use-hooks-classes-or-a-mix-of-both)\n  - [Do Hooks cover all use cases for classes?](#do-hooks-cover-all-use-cases-for-classes)\n  - [Do Hooks replace render props and higher-order components?](#do-hooks-replace-render-props-and-higher-order-components)\n  - [What do Hooks mean for popular APIs like Redux connect() and React Router?](#what-do-hooks-mean-for-popular-apis-like-redux-connect-and-react-router)\n  - [Do Hooks work with static typing?](#do-hooks-work-with-static-typing)\n  - [How to test components that use Hooks?](#how-to-test-components-that-use-hooks)\n  - [What exactly do the lint rules enforce?](#what-exactly-do-the-lint-rules-enforce)\n\n- **[From Classes to Hooks](#from-classes-to-hooks)**\n\n  - [How do lifecycle methods correspond to Hooks?](#how-do-lifecycle-methods-correspond-to-hooks)\n  - [How can I do data fetching with Hooks?](#how-can-i-do-data-fetching-with-hooks)\n  - [Is there something like instance variables?](#is-there-something-like-instance-variables)\n  - [Should I use one or many state variables?](#should-i-use-one-or-many-state-variables)\n  - [Can I run an effect only on updates?](#can-i-run-an-effect-only-on-updates)\n  - [How to get the previous props or state?](#how-to-get-the-previous-props-or-state)\n  - [Why am I seeing stale props or state inside my function?](#why-am-i-seeing-stale-props-or-state-inside-my-function)\n  - [How do I implement getDerivedStateFromProps?](#how-do-i-implement-getderivedstatefromprops)\n  - [Is there something like forceUpdate?](#is-there-something-like-forceupdate)\n  - [Can I make a ref to a function component?](#can-i-make-a-ref-to-a-function-component)\n  - [How can I measure a DOM node?](#how-can-i-measure-a-dom-node)\n  - [What does const \\[thing, setThing\\] = useState() mean?](#what-does-const-thing-setthing--usestate-mean)\n\n- **[Performance Optimizations](#performance-optimizations)**\n\n  - [Can I skip an effect on updates?](#can-i-skip-an-effect-on-updates)\n  - [Is it safe to omit functions from the list of dependencies?](#is-it-safe-to-omit-functions-from-the-list-of-dependencies)\n  - [What can I do if my effect dependencies change too often?](#what-can-i-do-if-my-effect-dependencies-change-too-often)\n  - [How do I implement shouldComponentUpdate?](#how-do-i-implement-shouldcomponentupdate)\n  - [How to memoize calculations?](#how-to-memoize-calculations)\n  - [How to create expensive objects lazily?](#how-to-create-expensive-objects-lazily)\n  - [Are Hooks slow because of creating functions in render?](#are-hooks-slow-because-of-creating-functions-in-render)\n  - [How to avoid passing callbacks down?](#how-to-avoid-passing-callbacks-down)\n  - [How to read an often-changing value from useCallback?](#how-to-read-an-often-changing-value-from-usecallback)\n\n- **[Under the Hood](#under-the-hood)**\n\n  - [How does React associate Hook calls with components?](#how-does-react-associate-hook-calls-with-components)\n  - [What is the prior art for Hooks?](#what-is-the-prior-art-for-hooks)\n\n## Adoption Strategy\n\n### Which versions of React include Hooks?\n\nStarting with 16.8.0, React includes a stable implementation of React Hooks for:\n\n- React DOM\n- React Native\n- React DOM Server\n- React Test Renderer\n- React Shallow Renderer\n\nNote that **to enable Hooks, all React packages need to be 16.8.0 or higher**. Hooks won’t work if you forget to update, for example, React DOM.\n\n[React Native 0.59](https://reactnative.dev/blog/2019/03/12/releasing-react-native-059) and above support Hooks.\n\n### Do I need to rewrite all my class components?\n\nNo. There are [no plans](hooks-intro#gradual-adoption-strategy) to remove classes from React — we all need to keep shipping products and can’t afford rewrites. We recommend trying Hooks in new code.\n\n### What can I do with Hooks that I couldn’t with classes?\n\nHooks offer a powerful and expressive new way to reuse functionality between components. [“Building Your Own Hooks”](hooks-custom) provides a glimpse of what’s possible. [This article](https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889) by a React core team member dives deeper into the new capabilities unlocked by Hooks.\n\n### How much of my React knowledge stays relevant?\n\nHooks are a more direct way to use the React features you already know — such as state, lifecycle, context, and refs. They don’t fundamentally change how React works, and your knowledge of components, props, and top-down data flow is just as relevant.\n\nHooks do have a learning curve of their own. If there’s something missing in this documentation, [raise an issue](https://github.com/reactjs/reactjs.org/issues/new) and we’ll try to help.\n\n### Should I use Hooks, classes, or a mix of both?\n\nWhen you’re ready, we’d encourage you to start trying Hooks in new components you write. Make sure everyone on your team is on board with using them and familiar with this documentation. We don’t recommend rewriting your existing classes to Hooks unless you planned to rewrite them anyway (e.g. to fix bugs).\n\nYou can’t use Hooks *inside* a class component, but you can definitely mix classes and function components with Hooks in a single tree. Whether a component is a class or a function that uses Hooks is an implementation detail of that component. In the longer term, we expect Hooks to be the primary way people write React components.\n\n### Do Hooks cover all use cases for classes?\n\nOur goal is for Hooks to cover all use cases for classes as soon as possible. There are no Hook equivalents to the uncommon `getSnapshotBeforeUpdate`, `getDerivedStateFromError` and `componentDidCatch` lifecycles yet, but we plan to add them soon.\n\n### Do Hooks replace render props and higher-order components?\n\nOften, render props and higher-order components render only a single child. We think Hooks are a simpler way to serve this use case. There is still a place for both patterns (for example, a virtual scroller component might have a `renderItem` prop, or a visual container component might have its own DOM structure). But in most cases, Hooks will be sufficient and can help reduce nesting in your tree.\n\n### What do Hooks mean for popular APIs like Redux `connect()` and React Router?\n\nYou can continue to use the exact same APIs as you always have; they’ll continue to work.\n\nReact Redux since v7.1.0 [supports Hooks API](https://react-redux.js.org/api/hooks) and exposes hooks like `useDispatch` or `useSelector`.\n\nReact Router [supports hooks](https://reacttraining.com/react-router/web/api/Hooks) since v5.1.\n\nOther libraries might support hooks in the future too.\n\n### Do Hooks work with static typing?\n\nHooks were designed with static typing in mind. Because they’re functions, they are easier to type correctly than patterns like higher-order components. The latest Flow and TypeScript React definitions include support for React Hooks.\n\nImportantly, custom Hooks give you the power to constrain React API if you’d like to type them more strictly in some way. React gives you the primitives, but you can combine them in different ways than what we provide out of the box.\n\n### How to test components that use Hooks?\n\nFrom React’s point of view, a component using Hooks is just a regular component. If your testing solution doesn’t rely on React internals, testing components with Hooks shouldn’t be different from how you normally test components.\n\n> Note\n>\n> [Testing Recipes](testing-recipes) include many examples that you can copy and paste.\n\nFor example, let’s say we have this counter component:\n\n``` jsx\nfunction Example() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\nWe’ll test it using React DOM. To make sure that the behavior matches what happens in the browser, we’ll wrap the code rendering and updating it into [`ReactTestUtils.act()`](test-utils#act) calls:\n\n``` jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { act } from 'react-dom/test-utils';\nimport Counter from './Counter';\n\nlet container;\n\nbeforeEach(() => {\n  container = document.createElement('div');\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  document.body.removeChild(container);\n  container = null;\n});\n\nit('can render and update a counter', () => {\n  // Test first render and effect\n  act(() => {\n    ReactDOM.createRoot(container).render(<Counter />);\n  });\n  const button = container.querySelector('button');\n  const label = container.querySelector('p');\n  expect(label.textContent).toBe('You clicked 0 times');\n  expect(document.title).toBe('You clicked 0 times');\n\n  // Test second render and effect\n  act(() => {\n    button.dispatchEvent(new MouseEvent('click', {bubbles: true}));\n  });\n  expect(label.textContent).toBe('You clicked 1 times');\n  expect(document.title).toBe('You clicked 1 times');\n});\n```\n\nThe calls to `act()` will also flush the effects inside of them.\n\nIf you need to test a custom Hook, you can do so by creating a component in your test, and using your Hook from it. Then you can test the component you wrote.\n\nTo reduce the boilerplate, we recommend using [React Testing Library](https://testing-library.com/react) which is designed to encourage writing tests that use your components as the end users do.\n\nFor more information, check out [Testing Recipes](testing-recipes).\n\n### What exactly do the [lint rules](https://www.npmjs.com/package/eslint-plugin-react-hooks) enforce?\n\nWe provide an [ESLint plugin](https://www.npmjs.com/package/eslint-plugin-react-hooks) that enforces [rules of Hooks](hooks-rules) to avoid bugs. It assumes that any function starting with ”`use`” and a capital letter right after it is a Hook. We recognize this heuristic isn’t perfect and there may be some false positives, but without an ecosystem-wide convention there is just no way to make Hooks work well — and longer names will discourage people from either adopting Hooks or following the convention.\n\nIn particular, the rule enforces that:\n\n- Calls to Hooks are either inside a `PascalCase` function (assumed to be a component) or another `useSomething` function (assumed to be a custom Hook).\n- Hooks are called in the same order on every render.\n\nThere are a few more heuristics, and they might change over time as we fine-tune the rule to balance finding bugs with avoiding false positives.\n\n## From Classes to Hooks\n\n### How do lifecycle methods correspond to Hooks?\n\n- `constructor`: Function components don’t need a constructor. You can initialize the state in the [`useState`](hooks-reference#usestate) call. If computing the initial state is expensive, you can pass a function to `useState`.\n- `getDerivedStateFromProps`: Schedule an update [while rendering](#how-do-i-implement-getderivedstatefromprops) instead.\n- `shouldComponentUpdate`: See `React.memo` [below](#how-do-i-implement-shouldcomponentupdate).\n- `render`: This is the function component body itself.\n- `componentDidMount`, `componentDidUpdate`, `componentWillUnmount`: The [`useEffect` Hook](hooks-reference#useeffect) can express all combinations of these (including [less](#can-i-skip-an-effect-on-updates) [common](#can-i-run-an-effect-only-on-updates) cases).\n- `getSnapshotBeforeUpdate`, `componentDidCatch` and `getDerivedStateFromError`: There are no Hook equivalents for these methods yet, but they will be added soon.\n\n### How can I do data fetching with Hooks?\n\nHere is a [small demo](https://codesandbox.io/s/jvvkoo8pq3) to get you started. To learn more, check out [this article](https://www.robinwieruch.de/react-hooks-fetch-data/) about data fetching with Hooks.\n\n### Is there something like instance variables?\n\nYes! The [`useRef()`](hooks-reference#useref) Hook isn’t just for DOM refs. The “ref” object is a generic container whose `current` property is mutable and can hold any value, similar to an instance property on a class.\n\nYou can write to it from inside `useEffect`:\n\n``` jsx\nfunction Timer() {\n  const intervalRef = useRef();\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      // ...\n    });\n    intervalRef.current = id;\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  });\n\n  // ...\n}\n```\n\nIf we just wanted to set an interval, we wouldn’t need the ref (`id` could be local to the effect), but it’s useful if we want to clear the interval from an event handler:\n\n``` jsx\n  // ...\n  function handleCancelClick() {\n    clearInterval(intervalRef.current);\n  }\n  // ...\n```\n\nConceptually, you can think of refs as similar to instance variables in a class. Unless you’re doing [lazy initialization](#how-to-create-expensive-objects-lazily), avoid setting refs during rendering — this can lead to surprising behavior. Instead, typically you want to modify refs in event handlers and effects.\n\n### Should I use one or many state variables?\n\nIf you’re coming from classes, you might be tempted to always call `useState()` once and put all state into a single object. You can do it if you’d like. Here is an example of a component that follows the mouse movement. We keep its position and size in the local state:\n\n``` jsx\nfunction Box() {\n  const [state, setState] = useState({ left: 0, top: 0, width: 100, height: 100 });\n  // ...\n}\n```\n\nNow let’s say we want to write some logic that changes `left` and `top` when the user moves their mouse. Note how we have to merge these fields into the previous state object manually:\n\n``` jsx\n  // ...\n  useEffect(() => {\n    function handleWindowMouseMove(e) {\n      // Spreading \"...state\" ensures we don't \"lose\" width and height\n      setState(state => ({ ...state, left: e.pageX, top: e.pageY }));\n    }\n    // Note: this implementation is a bit simplified\n    window.addEventListener('mousemove', handleWindowMouseMove);\n    return () => window.removeEventListener('mousemove', handleWindowMouseMove);\n  }, []);\n  // ...\n```\n\nThis is because when we update a state variable, we *replace* its value. This is different from `this.setState` in a class, which *merges* the updated fields into the object.\n\nIf you miss automatic merging, you could write a custom `useLegacyState` Hook that merges object state updates. However, **we recommend to split state into multiple state variables based on which values tend to change together.**\n\nFor example, we could split our component state into `position` and `size` objects, and always replace the `position` with no need for merging:\n\n``` jsx\nfunction Box() {\n  const [position, setPosition] = useState({ left: 0, top: 0 });\n  const [size, setSize] = useState({ width: 100, height: 100 });\n\n  useEffect(() => {\n    function handleWindowMouseMove(e) {\n      setPosition({ left: e.pageX, top: e.pageY });\n    }\n    // ...\n```\n\nSeparating independent state variables also has another benefit. It makes it easy to later extract some related logic into a custom Hook, for example:\n\n``` jsx\nfunction Box() {\n  const position = useWindowPosition();\n  const [size, setSize] = useState({ width: 100, height: 100 });\n  // ...\n}\n\nfunction useWindowPosition() {\n  const [position, setPosition] = useState({ left: 0, top: 0 });\n  useEffect(() => {\n    // ...\n  }, []);\n  return position;\n}\n```\n\nNote how we were able to move the `useState` call for the `position` state variable and the related effect into a custom Hook without changing their code. If all state was in a single object, extracting it would be more difficult.\n\nBoth putting all state in a single `useState` call, and having a `useState` call per each field can work. Components tend to be most readable when you find a balance between these two extremes, and group related state into a few independent state variables. If the state logic becomes complex, we recommend [managing it with a reducer](hooks-reference#usereducer) or a custom Hook.\n\n### Can I run an effect only on updates?\n\nThis is a rare use case. If you need it, you can [use a mutable ref](#is-there-something-like-instance-variables) to manually store a boolean value corresponding to whether you are on the first or a subsequent render, then check that flag in your effect. (If you find yourself doing this often, you could create a custom Hook for it.)\n\n### How to get the previous props or state?\n\nThere are two cases in which you might want to get previous props or state.\n\nSometimes, you need previous props to **clean up an effect.** For example, you might have an effect that subscribes to a socket based on the `userId` prop. If the `userId` prop changes, you want to unsubscribe from the *previous* `userId` and subscribe to the *next* one. You don’t need to do anything special for this to work:\n\n``` jsx\nuseEffect(() => {\n  ChatAPI.subscribeToSocket(props.userId);\n  return () => ChatAPI.unsubscribeFromSocket(props.userId);\n}, [props.userId]);\n```\n\nIn the above example, if `userId` changes from `3` to `4`, `ChatAPI.unsubscribeFromSocket(3)` will run first, and then `ChatAPI.subscribeToSocket(4)` will run. There is no need to get “previous” `userId` because the cleanup function will capture it in a closure.\n\nOther times, you might need to **adjust state based on a change in props or other state**. This is rarely needed and is usually a sign you have some duplicate or redundant state. However, in the rare case that you need this pattern, you can [store previous state or props in state and update them during rendering](#how-do-i-implement-getderivedstatefromprops).\n\nWe have previously suggested a custom Hook called `usePrevious` to hold the previous value. However, we’ve found that most use cases fall into the two patterns described above. If your use case is different, you can [hold a value in a ref](#is-there-something-like-instance-variables) and manually update it when needed. Avoid reading and updating refs during rendering because this makes your component’s behavior difficult to predict and understand.\n\n### Why am I seeing stale props or state inside my function?\n\nAny function inside a component, including event handlers and effects, “sees” the props and state from the render it was created in. For example, consider code like this:\n\n``` jsx\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  function handleAlertClick() {\n    setTimeout(() => {\n      alert('You clicked on: ' + count);\n    }, 3000);\n  }\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n      <button onClick={handleAlertClick}>\n        Show alert\n      </button>\n    </div>\n  );\n}\n```\n\nIf you first click “Show alert” and then increment the counter, the alert will show the `count` variable **at the time you clicked the “Show alert” button**. This prevents bugs caused by the code assuming props and state don’t change.\n\nIf you intentionally want to read the *latest* state from some asynchronous callback, you could keep it in [a ref](hooks-faq#is-there-something-like-instance-variables), mutate it, and read from it.\n\nFinally, another possible reason you’re seeing stale props or state is if you use the “dependency array” optimization but didn’t correctly specify all the dependencies. For example, if an effect specifies `[]` as the second argument but reads `someProp` inside, it will keep “seeing” the initial value of `someProp`. The solution is to either remove the dependency array, or to fix it. Here’s [how you can deal with functions](#is-it-safe-to-omit-functions-from-the-list-of-dependencies), and here’s [other common strategies](#what-can-i-do-if-my-effect-dependencies-change-too-often) to run effects less often without incorrectly skipping dependencies.\n\n> Note\n>\n> We provide an [`exhaustive-deps`](https://github.com/facebook/react/issues/14920) ESLint rule as a part of the [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation) package. It warns when dependencies are specified incorrectly and suggests a fix.\n\n### How do I implement `getDerivedStateFromProps`?\n\nWhile you probably [don’t need it](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html), in rare cases that you do (such as implementing a `<Transition>` component), you can update the state right during rendering. React will re-run the component with updated state immediately after exiting the first render so it wouldn’t be expensive.\n\nHere, we store the previous value of the `row` prop in a state variable so that we can compare:\n\n``` jsx\nfunction ScrollView({row}) {\n  const [isScrollingDown, setIsScrollingDown] = useState(false);\n  const [prevRow, setPrevRow] = useState(null);\n\n  if (row !== prevRow) {\n    // Row changed since last render. Update isScrollingDown.\n    setIsScrollingDown(prevRow !== null && row > prevRow);\n    setPrevRow(row);\n  }\n\n  return `Scrolling down: ${isScrollingDown}`;\n}\n```\n\nThis might look strange at first, but an update during rendering is exactly what `getDerivedStateFromProps` has always been like conceptually.\n\n### Is there something like forceUpdate?\n\nBoth `useState` and `useReducer` Hooks [bail out of updates](hooks-reference#bailing-out-of-a-state-update) if the next value is the same as the previous one. Mutating state in place and calling `setState` will not cause a re-render.\n\nNormally, you shouldn’t mutate local state in React. However, as an escape hatch, you can use an incrementing counter to force a re-render even if the state has not changed:\n\n``` jsx\n  const [ignored, forceUpdate] = useReducer(x => x + 1, 0);\n\n  function handleClick() {\n    forceUpdate();\n  }\n```\n\nTry to avoid this pattern if possible.\n\n### Can I make a ref to a function component?\n\nWhile you shouldn’t need this often, you may expose some imperative methods to a parent component with the [`useImperativeHandle`](hooks-reference#useimperativehandle) Hook.\n\n### How can I measure a DOM node?\n\nOne rudimentary way to measure the position or size of a DOM node is to use a [callback ref](refs-and-the-dom#callback-refs). React will call that callback whenever the ref gets attached to a different node. Here is a [small demo](https://codesandbox.io/s/l7m0v5x4v9):\n\n``` jsx\nfunction MeasureExample() {\n  const [height, setHeight] = useState(0);\n\n  const measuredRef = useCallback(node => {\n    if (node !== null) {\n      setHeight(node.getBoundingClientRect().height);\n    }\n  }, []);\n\n  return (\n    <>\n      <h1 ref={measuredRef}>Hello, world</h1>\n      <h2>The above header is {Math.round(height)}px tall</h2>\n    </>\n  );\n}\n```\n\nWe didn’t choose `useRef` in this example because an object ref doesn’t notify us about *changes* to the current ref value. Using a callback ref ensures that [even if a child component displays the measured node later](https://codesandbox.io/s/818zzk8m78) (e.g. in response to a click), we still get notified about it in the parent component and can update the measurements.\n\nNote that we pass `[]` as a dependency array to `useCallback`. This ensures that our ref callback doesn’t change between the re-renders, and so React won’t call it unnecessarily.\n\nIn this example, the callback ref will be called only when the component mounts and unmounts, since the rendered `<h1>` component stays present throughout any rerenders. If you want to be notified any time a component resizes, you may want to use [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) or a third-party Hook built on it.\n\nIf you want, you can [extract this logic](https://codesandbox.io/s/m5o42082xy) into a reusable Hook:\n\n``` jsx\nfunction MeasureExample() {\n  const [rect, ref] = useClientRect();\n  return (\n    <>\n      <h1 ref={ref}>Hello, world</h1>\n      {rect !== null &&\n        <h2>The above header is {Math.round(rect.height)}px tall</h2>\n      }\n    </>\n  );\n}\n\nfunction useClientRect() {\n  const [rect, setRect] = useState(null);\n  const ref = useCallback(node => {\n    if (node !== null) {\n      setRect(node.getBoundingClientRect());\n    }\n  }, []);\n  return [rect, ref];\n}\n```\n\n### What does `const [thing, setThing] = useState()` mean?\n\nIf you’re not familiar with this syntax, check out the [explanation](hooks-state#tip-what-do-square-brackets-mean) in the State Hook documentation.\n\n## Performance Optimizations\n\n### Can I skip an effect on updates?\n\nYes. See [conditionally firing an effect](hooks-reference#conditionally-firing-an-effect). Note that forgetting to handle updates often [introduces bugs](hooks-effect#explanation-why-effects-run-on-each-update), which is why this isn’t the default behavior.\n\n### Is it safe to omit functions from the list of dependencies?\n\nGenerally speaking, no.\n\n``` jsx\nfunction Example({ someProp }) {\n  function doSomething() {\n    console.log(someProp);\n  }\n\n  useEffect(() => {\n    doSomething();\n  }, []); // 🔴 This is not safe (it calls `doSomething` which uses `someProp`)\n}\n```\n\nIt’s difficult to remember which props or state are used by functions outside of the effect. This is why **usually you’ll want to declare functions needed by an effect *inside* of it.** Then it’s easy to see what values from the component scope that effect depends on:\n\n``` jsx\nfunction Example({ someProp }) {\n  useEffect(() => {\n    function doSomething() {\n      console.log(someProp);\n    }\n\n    doSomething();\n  }, [someProp]); // ✅ OK (our effect only uses `someProp`)\n}\n```\n\nIf after that we still don’t use any values from the component scope, it’s safe to specify `[]`:\n\n``` jsx\nuseEffect(() => {\n  function doSomething() {\n    console.log('hello');\n  }\n\n  doSomething();\n}, []); // ✅ OK in this example because we don't use *any* values from component scope\n```\n\nDepending on your use case, there are a few more options described below.\n\n> Note\n>\n> We provide the [`exhaustive-deps`](https://github.com/facebook/react/issues/14920) ESLint rule as a part of the [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation) package. It helps you find components that don’t handle updates consistently.\n\nLet’s see why this matters.\n\nIf you specify a [list of dependencies](hooks-reference#conditionally-firing-an-effect) as the last argument to `useEffect`, `useLayoutEffect`, `useMemo`, `useCallback`, or `useImperativeHandle`, it must include all values that are used inside the callback and participate in the React data flow. That includes props, state, and anything derived from them.\n\nIt is **only** safe to omit a function from the dependency list if nothing in it (or the functions called by it) references props, state, or values derived from them. This example has a bug:\n\n``` jsx\nfunction ProductPage({ productId }) {\n  const [product, setProduct] = useState(null);\n\n  async function fetchProduct() {\n    const response = await fetch('http://myapi/product/' + productId); // Uses productId prop\n    const json = await response.json();\n    setProduct(json);\n  }\n\n  useEffect(() => {\n    fetchProduct();\n  }, []); // 🔴 Invalid because `fetchProduct` uses `productId`\n  // ...\n}\n```\n\n**The recommended fix is to move that function *inside* of your effect**. That makes it easy to see which props or state your effect uses, and to ensure they’re all declared:\n\n``` jsx\nfunction ProductPage({ productId }) {\n  const [product, setProduct] = useState(null);\n\n  useEffect(() => {\n    // By moving this function inside the effect, we can clearly see the values it uses.\n    async function fetchProduct() {\n      const response = await fetch('http://myapi/product/' + productId);\n      const json = await response.json();\n      setProduct(json);\n    }\n\n    fetchProduct();\n  }, [productId]); // ✅ Valid because our effect only uses productId\n  // ...\n}\n```\n\nThis also allows you to handle out-of-order responses with a local variable inside the effect:\n\n``` jsx\n  useEffect(() => {\n    let ignore = false;\n    async function fetchProduct() {\n      const response = await fetch('http://myapi/product/' + productId);\n      const json = await response.json();\n      if (!ignore) setProduct(json);\n    }\n\n    fetchProduct();\n    return () => { ignore = true };\n  }, [productId]);\n```\n\nWe moved the function inside the effect so it doesn’t need to be in its dependency list.\n\n> Tip\n>\n> Check out [this small demo](https://codesandbox.io/s/jvvkoo8pq3) and [this article](https://www.robinwieruch.de/react-hooks-fetch-data/) to learn more about data fetching with Hooks.\n\n**If for some reason you *can’t* move a function inside an effect, there are a few more options:**\n\n- **You can try moving that function outside of your component**. In that case, the function is guaranteed to not reference any props or state, and also doesn’t need to be in the list of dependencies.\n- If the function you’re calling is a pure computation and is safe to call while rendering, you may **call it outside of the effect instead,** and make the effect depend on the returned value.\n- As a last resort, you can **add a function to effect dependencies but *wrap its definition*** into the [`useCallback`](hooks-reference#usecallback) Hook. This ensures it doesn’t change on every render unless *its own* dependencies also change:\n\n``` jsx\nfunction ProductPage({ productId }) {\n  // ✅ Wrap with useCallback to avoid change on every render\n  const fetchProduct = useCallback(() => {\n    // ... Does something with productId ...\n  }, [productId]); // ✅ All useCallback dependencies are specified\n\n  return <ProductDetails fetchProduct={fetchProduct} />;\n}\n\nfunction ProductDetails({ fetchProduct }) {\n  useEffect(() => {\n    fetchProduct();\n  }, [fetchProduct]); // ✅ All useEffect dependencies are specified\n  // ...\n}\n```\n\nNote that in the above example we **need** to keep the function in the dependencies list. This ensures that a change in the `productId` prop of `ProductPage` automatically triggers a refetch in the `ProductDetails` component.\n\n### What can I do if my effect dependencies change too often?\n\nSometimes, your effect may be using state that changes too often. You might be tempted to omit that state from a list of dependencies, but that usually leads to bugs:\n\n``` jsx\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(count + 1); // This effect depends on the `count` state\n    }, 1000);\n    return () => clearInterval(id);\n  }, []); // 🔴 Bug: `count` is not specified as a dependency\n\n  return <h1>{count}</h1>;\n}\n```\n\nThe empty set of dependencies, `[]`, means that the effect will only run once when the component mounts, and not on every re-render. The problem is that inside the `setInterval` callback, the value of `count` does not change, because we’ve created a closure with the value of `count` set to `0` as it was when the effect callback ran. Every second, this callback then calls `setCount(0 + 1)`, so the count never goes above 1.\n\nSpecifying `[count]` as a list of dependencies would fix the bug, but would cause the interval to be reset on every change. Effectively, each `setInterval` would get one chance to execute before being cleared (similar to a `setTimeout`.) That may not be desirable. To fix this, we can use the [functional update form of `setState`](hooks-reference#functional-updates). It lets us specify *how* the state needs to change without referencing the *current* state:\n\n``` jsx\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setCount(c => c + 1); // ✅ This doesn't depend on `count` variable outside\n    }, 1000);\n    return () => clearInterval(id);\n  }, []); // ✅ Our effect doesn't use any variables in the component scope\n\n  return <h1>{count}</h1>;\n}\n```\n\n(The identity of the `setCount` function is guaranteed to be stable so it’s safe to omit.)\n\nNow, the `setInterval` callback executes once a second, but each time the inner call to `setCount` can use an up-to-date value for `count` (called `c` in the callback here.)\n\nIn more complex cases (such as if one state depends on another state), try moving the state update logic outside the effect with the [`useReducer` Hook](hooks-reference#usereducer). [This article](https://adamrackis.dev/state-and-use-reducer/) offers an example of how you can do this. **The identity of the `dispatch` function from `useReducer` is always stable** — even if the reducer function is declared inside the component and reads its props.\n\nAs a last resort, if you want something like `this` in a class, you can [use a ref](hooks-faq#is-there-something-like-instance-variables) to hold a mutable variable. Then you can write and read to it. For example:\n\n``` jsx\nfunction Example(props) {\n  // Keep latest props in a ref.\n  const latestProps = useRef(props);\n  useEffect(() => {\n    latestProps.current = props;\n  });\n\n  useEffect(() => {\n    function tick() {\n      // Read latest props at any time\n      console.log(latestProps.current);\n    }\n\n    const id = setInterval(tick, 1000);\n    return () => clearInterval(id);\n  }, []); // This effect never re-runs\n}\n```\n\nOnly do this if you couldn’t find a better alternative, as relying on mutation makes components less predictable. If there’s a specific pattern that doesn’t translate well, [file an issue](https://github.com/facebook/react/issues/new) with a runnable example code and we can try to help.\n\n### How do I implement `shouldComponentUpdate`?\n\nYou can wrap a function component with `React.memo` to shallowly compare its props:\n\n``` jsx\nconst Button = React.memo((props) => {\n  // your component\n});\n```\n\nIt’s not a Hook because it doesn’t compose like Hooks do. `React.memo` is equivalent to `PureComponent`, but it only compares props. (You can also add a second argument to specify a custom comparison function that takes the old and new props. If it returns true, the update is skipped.)\n\n`React.memo` doesn’t compare state because there is no single state object to compare. But you can make children pure too, or even [optimize individual children with `useMemo`](hooks-faq#how-to-memoize-calculations).\n\n### How to memoize calculations?\n\nThe [`useMemo`](hooks-reference#usememo) Hook lets you cache calculations between multiple renders by “remembering” the previous computation:\n\n``` jsx\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\nThis code calls `computeExpensiveValue(a, b)`. But if the dependencies `[a, b]` haven’t changed since the last value, `useMemo` skips calling it a second time and simply reuses the last value it returned.\n\nRemember that the function passed to `useMemo` runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in `useEffect`, not `useMemo`.\n\n**You may rely on `useMemo` as a performance optimization, not as a semantic guarantee.** In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without `useMemo` — and then add it to optimize performance. (For rare cases when a value must *never* be recomputed, you can [lazily initialize](#how-to-create-expensive-objects-lazily) a ref.)\n\nConveniently, `useMemo` also lets you skip an expensive re-render of a child:\n\n``` jsx\nfunction Parent({ a, b }) {\n  // Only re-rendered if `a` changes:\n  const child1 = useMemo(() => <Child1 a={a} />, [a]);\n  // Only re-rendered if `b` changes:\n  const child2 = useMemo(() => <Child2 b={b} />, [b]);\n  return (\n    <>\n      {child1}\n      {child2}\n    </>\n  )\n}\n```\n\nNote that this approach won’t work in a loop because Hook calls [can’t](hooks-rules) be placed inside loops. But you can extract a separate component for the list item, and call `useMemo` there.\n\n### How to create expensive objects lazily?\n\n`useMemo` lets you [memoize an expensive calculation](#how-to-memoize-calculations) if the dependencies are the same. However, it only serves as a hint, and doesn’t *guarantee* the computation won’t re-run. But sometimes you need to be sure an object is only created once.\n\n**The first common use case is when creating the initial state is expensive:**\n\n``` jsx\nfunction Table(props) {\n  // ⚠️ createRows() is called on every render\n  const [rows, setRows] = useState(createRows(props.count));\n  // ...\n}\n```\n\nTo avoid re-creating the ignored initial state, we can pass a **function** to `useState`:\n\n``` jsx\nfunction Table(props) {\n  // ✅ createRows() is only called once\n  const [rows, setRows] = useState(() => createRows(props.count));\n  // ...\n}\n```\n\nReact will only call this function during the first render. See the [`useState` API reference](hooks-reference#usestate).\n\n**You might also occasionally want to avoid re-creating the `useRef()` initial value.** For example, maybe you want to ensure some imperative class instance only gets created once:\n\n``` jsx\nfunction Image(props) {\n  // ⚠️ IntersectionObserver is created on every render\n  const ref = useRef(new IntersectionObserver(onIntersect));\n  // ...\n}\n```\n\n`useRef` **does not** accept a special function overload like `useState`. Instead, you can write your own function that creates and sets it lazily:\n\n``` jsx\nfunction Image(props) {\n  const ref = useRef(null);\n\n  // ✅ IntersectionObserver is created lazily once\n  function getObserver() {\n    if (ref.current === null) {\n      ref.current = new IntersectionObserver(onIntersect);\n    }\n    return ref.current;\n  }\n\n  // When you need it, call getObserver()\n  // ...\n}\n```\n\nThis avoids creating an expensive object until it’s truly needed for the first time. If you use Flow or TypeScript, you can also give `getObserver()` a non-nullable type for convenience.\n\n### Are Hooks slow because of creating functions in render?\n\nNo. In modern browsers, the raw performance of closures compared to classes doesn’t differ significantly except in extreme scenarios.\n\nIn addition, consider that the design of Hooks is more efficient in a couple ways:\n\n- Hooks avoid a lot of the overhead that classes require, like the cost of creating class instances and binding event handlers in the constructor.\n- **Idiomatic code using Hooks doesn’t need the deep component tree nesting** that is prevalent in codebases that use higher-order components, render props, and context. With smaller component trees, React has less work to do.\n\nTraditionally, performance concerns around inline functions in React have been related to how passing new callbacks on each render breaks `shouldComponentUpdate` optimizations in child components. Hooks approach this problem from three sides.\n\n- The [`useCallback`](hooks-reference#usecallback) Hook lets you keep the same callback reference between re-renders so that `shouldComponentUpdate` continues to work:\n\n  ``` jsx\n  // Will not change unless `a` or `b` changes\n  const memoizedCallback = useCallback(() => {\n    doSomething(a, b);\n  }, [a, b]);\n  ```\n\n- The [`useMemo`](hooks-faq#how-to-memoize-calculations) Hook makes it easier to control when individual children update, reducing the need for pure components.\n\n- Finally, the [`useReducer`](hooks-reference#usereducer) Hook reduces the need to pass callbacks deeply, as explained below.\n\n### How to avoid passing callbacks down?\n\nWe’ve found that most people don’t enjoy manually passing callbacks through every level of a component tree. Even though it is more explicit, it can feel like a lot of “plumbing”.\n\nIn large component trees, an alternative we recommend is to pass down a `dispatch` function from [`useReducer`](hooks-reference#usereducer) via context:\n\n``` jsx\nconst TodosDispatch = React.createContext(null);\n\nfunction TodosApp() {\n  // Note: `dispatch` won't change between re-renders\n  const [todos, dispatch] = useReducer(todosReducer);\n\n  return (\n    <TodosDispatch.Provider value={dispatch}>\n      <DeepTree todos={todos} />\n    </TodosDispatch.Provider>\n  );\n}\n```\n\nAny child in the tree inside `TodosApp` can use the `dispatch` function to pass actions up to `TodosApp`:\n\n``` jsx\nfunction DeepChild(props) {\n  // If we want to perform an action, we can get dispatch from context.\n  const dispatch = useContext(TodosDispatch);\n\n  function handleClick() {\n    dispatch({ type: 'add', text: 'hello' });\n  }\n\n  return (\n    <button onClick={handleClick}>Add todo</button>\n  );\n}\n```\n\nThis is both more convenient from the maintenance perspective (no need to keep forwarding callbacks), and avoids the callback problem altogether. Passing `dispatch` down like this is the recommended pattern for deep updates.\n\nNote that you can still choose whether to pass the application *state* down as props (more explicit) or as context (more convenient for very deep updates). If you use context to pass down the state too, use two different context types — the `dispatch` context never changes, so components that read it don’t need to rerender unless they also need the application state.\n\n### How to read an often-changing value from `useCallback`?\n\n> Note\n>\n> We recommend to [pass `dispatch` down in context](#how-to-avoid-passing-callbacks-down) rather than individual callbacks in props. The approach below is only mentioned here for completeness and as an escape hatch.\n\nIn some rare cases you might need to memoize a callback with [`useCallback`](hooks-reference#usecallback) but the memoization doesn’t work very well because the inner function has to be re-created too often. If the function you’re memoizing is an event handler and isn’t used during rendering, you can use [ref as an instance variable](#is-there-something-like-instance-variables), and save the last committed value into it manually:\n\n``` jsx\nfunction Form() {\n  const [text, updateText] = useState('');\n  const textRef = useRef();\n\n  useEffect(() => {\n    textRef.current = text; // Write it to the ref\n  });\n\n  const handleSubmit = useCallback(() => {\n    const currentText = textRef.current; // Read it from the ref\n    alert(currentText);\n  }, [textRef]); // Don't recreate handleSubmit like [text] would do\n\n  return (\n    <>\n      <input value={text} onChange={e => updateText(e.target.value)} />\n      <ExpensiveTree onSubmit={handleSubmit} />\n    </>\n  );\n}\n```\n\nThis is a rather convoluted pattern but it shows that you can do this escape hatch optimization if you need it. It’s more bearable if you extract it to a custom Hook:\n\n``` jsx\nfunction Form() {\n  const [text, updateText] = useState('');\n  // Will be memoized even if `text` changes:\n  const handleSubmit = useEventCallback(() => {\n    alert(text);\n  }, [text]);\n\n  return (\n    <>\n      <input value={text} onChange={e => updateText(e.target.value)} />\n      <ExpensiveTree onSubmit={handleSubmit} />\n    </>\n  );\n}\n\nfunction useEventCallback(fn, dependencies) {\n  const ref = useRef(() => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  useEffect(() => {\n    ref.current = fn;\n  }, [fn, ...dependencies]);\n\n  return useCallback(() => {\n    const fn = ref.current;\n    return fn();\n  }, [ref]);\n}\n```\n\nIn either case, we **don’t recommend this pattern** and only show it here for completeness. Instead, it is preferable to [avoid passing callbacks deep down](#how-to-avoid-passing-callbacks-down).\n\n## Under the Hood\n\n### How does React associate Hook calls with components?\n\nReact keeps track of the currently rendering component. Thanks to the [Rules of Hooks](hooks-rules), we know that Hooks are only called from React components (or custom Hooks — which are also only called from React components).\n\nThere is an internal list of “memory cells” associated with each component. They’re just JavaScript objects where we can put some data. When you call a Hook like `useState()`, it reads the current cell (or initializes it during the first render), and then moves the pointer to the next one. This is how multiple `useState()` calls each get independent local state.\n\n### What is the prior art for Hooks?\n\nHooks synthesize ideas from several different sources:\n\n- Our old experiments with functional APIs in the [react-future](https://github.com/reactjs/react-future/tree/master/07%20-%20Returning%20State) repository.\n- React community’s experiments with render prop APIs, including [Ryan Florence](https://github.com/ryanflorence)’s [Reactions Component](https://github.com/reactions/component).\n- [Dominic Gannaway](https://github.com/trueadm)’s [`adopt` keyword](https://gist.github.com/trueadm/17beb64288e30192f3aa29cad0218067) proposal as a sugar syntax for render props.\n- State variables and state cells in [DisplayScript](http://displayscript.org/introduction.html).\n- [Reducer components](https://reasonml.github.io/reason-react/docs/en/state-actions-reducer.html) in ReasonReact.\n- [Subscriptions](http://reactivex.io/rxjs/class/es6/Subscription.js~Subscription.html) in Rx.\n- [Algebraic effects](https://github.com/ocamllabs/ocaml-effects-tutorial#2-effectful-computations-in-a-pure-setting) in Multicore OCaml.\n\n[Sebastian Markbåge](https://github.com/sebmarkbage) came up with the original design for Hooks, later refined by [Andrew Clark](https://github.com/acdlite), [Sophie Alpert](https://github.com/sophiebits), [Dominic Gannaway](https://github.com/trueadm), and other members of the React team.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/hooks-faq.html](https://reactjs.org/docs/hooks-faq.html)"
- name: hydrate()
  id: react-dom#hydrate
  summary: hydrate has been replaced with hydrateRoot in React 18
  belongs_to: ReactDOM
  description: |-
    ### `hydrate()`

    ``` jsx
    hydrate(element, container[, callback])
    ```

    > Note:
    >
    > `hydrate` has been replaced with `hydrateRoot` in React 18. See [hydrateRoot](react-dom-client#hydrateroot) for more info.

    Same as [`render()`](#render), but is used to hydrate a container whose HTML contents were rendered by [`ReactDOMServer`](react-dom-server). React will attempt to attach event listeners to the existing markup.

    React expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.

    If a single element’s attribute or text content is unavoidably different between the server and the client (for example, a timestamp), you may silence the warning by adding `suppressHydrationWarning={true}` to the element. It only works one level deep, and is intended to be an escape hatch. Don’t overuse it. Unless it’s text content, React still won’t attempt to patch it up, so it may remain inconsistent until future updates.

    If you intentionally need to render something different on the server and the client, you can do a two-pass rendering. Components that render something different on the client can read a state variable like `this.state.isClient`, which you can set to `true` in `componentDidMount()`. This way the initial render pass will render the same content as the server, avoiding mismatches, but an additional pass will happen synchronously right after hydration. Note that this approach will make your components slower because they have to render twice, so use it with caution.

    Remember to be mindful of user experience on slow connections. The JavaScript code may load significantly later than the initial HTML render, so if you render something different in the client-only pass, the transition can be jarring. However, if executed well, it may be beneficial to render a “shell” of the application on the server, and only show some of the extra widgets on the client. To learn how to do this without getting the markup mismatch issues, refer to the explanation in the previous paragraph.
- name: hydrateRoot()
  id: react-dom-client#hydrateroot
  summary: Same as createRoot(), but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer
  belongs_to: ReactDOMClient
  description: "### `hydrateRoot()`\n\n``` jsx\nhydrateRoot(container, element[, options])\n```\n\nSame as [`createRoot()`](#createroot), but is used to hydrate a container whose HTML contents were rendered by [`ReactDOMServer`](react-dom-server). React will attempt to attach event listeners to the existing markup.\n\n`hydrateRoot` accepts two options:\n\n- `onRecoverableError`: optional callback called when React automatically recovers from errors.\n- `identifierPrefix`: optional prefix React uses for ids generated by `React.useId`. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server.\n\n> Note\n>\n> React expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-dom-client.html](https://reactjs.org/docs/react-dom-client.html)"
- name: Integrating with Other Libraries
  id: integrating-with-other-libraries
  summary: React can be used in any web application
  description: "# Integrating with Other Libraries\n\nReact can be used in any web application. It can be embedded in other applications and, with a little care, other applications can be embedded in React. This guide will examine some of the more common use cases, focusing on integration with [jQuery](https://jquery.com/) and [Backbone](https://backbonejs.org/), but the same ideas can be applied to integrating components with any existing code.\n\n## Integrating with DOM Manipulation Plugins\n\nReact is unaware of changes made to the DOM outside of React. It determines updates based on its own internal representation, and if the same DOM nodes are manipulated by another library, React gets confused and has no way to recover.\n\nThis does not mean it is impossible or even necessarily difficult to combine React with other ways of affecting the DOM, you just have to be mindful of what each is doing.\n\nThe easiest way to avoid conflicts is to prevent the React component from updating. You can do this by rendering elements that React has no reason to update, like an empty `<div />`.\n\n### How to Approach the Problem\n\nTo demonstrate this, let’s sketch out a wrapper for a generic jQuery plugin.\n\nWe will attach a [ref](refs-and-the-dom) to the root DOM element. Inside `componentDidMount`, we will get a reference to it so we can pass it to the jQuery plugin.\n\nTo prevent React from touching the DOM after mounting, we will return an empty `<div />` from the `render()` method. The `<div />` element has no properties or children, so React has no reason to update it, leaving the jQuery plugin free to manage that part of the DOM:\n\n``` jsx\nclass SomePlugin extends React.Component {\n  componentDidMount() {\n    this.$el = $(this.el);\n    this.$el.somePlugin();\n  }\n\n  componentWillUnmount() {\n    this.$el.somePlugin('destroy');\n  }\n\n  render() {\n    return <div ref={el => this.el = el} />;\n  }\n}\n```\n\nNote that we defined both `componentDidMount` and `componentWillUnmount` [lifecycle methods](react-component#the-component-lifecycle). Many jQuery plugins attach event listeners to the DOM so it’s important to detach them in `componentWillUnmount`. If the plugin does not provide a method for cleanup, you will probably have to provide your own, remembering to remove any event listeners the plugin registered to prevent memory leaks.\n\n### Integrating with jQuery Chosen Plugin\n\nFor a more concrete example of these concepts, let’s write a minimal wrapper for the plugin [Chosen](https://harvesthq.github.io/chosen/), which augments `<select>` inputs.\n\n> **Note:**\n>\n> Just because it’s possible, doesn’t mean that it’s the best approach for React apps. We encourage you to use React components when you can. React components are easier to reuse in React applications, and often provide more control over their behavior and appearance.\n\nFirst, let’s look at what Chosen does to the DOM.\n\nIf you call it on a `<select>` DOM node, it reads the attributes off of the original DOM node, hides it with an inline style, and then appends a separate DOM node with its own visual representation right after the `<select>`. Then it fires jQuery events to notify us about the changes.\n\nLet’s say that this is the API we’re striving for with our `<Chosen>` wrapper React component:\n\n``` jsx\nfunction Example() {\n  return (\n    <Chosen onChange={value => console.log(value)}>\n      <option>vanilla</option>\n      <option>chocolate</option>\n      <option>strawberry</option>\n    </Chosen>\n  );\n}\n```\n\nWe will implement it as an [uncontrolled component](uncontrolled-components) for simplicity.\n\nFirst, we will create an empty component with a `render()` method where we return `<select>` wrapped in a `<div>`:\n\n``` jsx\nclass Chosen extends React.Component {\n  render() {\n    return (\n      <div>\n        <select className=\"Chosen-select\" ref={el => this.el = el}>\n          {this.props.children}\n        </select>\n      </div>\n    );\n  }\n}\n```\n\nNotice how we wrapped `<select>` in an extra `<div>`. This is necessary because Chosen will append another DOM element right after the `<select>` node we passed to it. However, as far as React is concerned, `<div>` always only has a single child. This is how we ensure that React updates won’t conflict with the extra DOM node appended by Chosen. It is important that if you modify the DOM outside of React flow, you must ensure React doesn’t have a reason to touch those DOM nodes.\n\nNext, we will implement the lifecycle methods. We need to initialize Chosen with the ref to the `<select>` node in `componentDidMount`, and tear it down in `componentWillUnmount`:\n\n``` jsx\ncomponentDidMount() {\n  this.$el = $(this.el);\n  this.$el.chosen();\n}\n\ncomponentWillUnmount() {\n  this.$el.chosen('destroy');\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/qmqeQx?editors=0010)\n\nNote that React assigns no special meaning to the `this.el` field. It only works because we have previously assigned this field from a `ref` in the `render()` method:\n\n``` jsx\n<select className=\"Chosen-select\" ref={el => this.el = el}>\n```\n\nThis is enough to get our component to render, but we also want to be notified about the value changes. To do this, we will subscribe to the jQuery `change` event on the `<select>` managed by Chosen.\n\nWe won’t pass `this.props.onChange` directly to Chosen because component’s props might change over time, and that includes event handlers. Instead, we will declare a `handleChange()` method that calls `this.props.onChange`, and subscribe it to the jQuery `change` event:\n\n``` jsx\ncomponentDidMount() {\n  this.$el = $(this.el);\n  this.$el.chosen();\n\n  this.handleChange = this.handleChange.bind(this);\n  this.$el.on('change', this.handleChange);\n}\n\ncomponentWillUnmount() {\n  this.$el.off('change', this.handleChange);\n  this.$el.chosen('destroy');\n}\n\nhandleChange(e) {\n  this.props.onChange(e.target.value);\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/bWgbeE?editors=0010)\n\nFinally, there is one more thing left to do. In React, props can change over time. For example, the `<Chosen>` component can get different children if parent component’s state changes. This means that at integration points it is important that we manually update the DOM in response to prop updates, since we no longer let React manage the DOM for us.\n\nChosen’s documentation suggests that we can use jQuery `trigger()` API to notify it about changes to the original DOM element. We will let React take care of updating `this.props.children` inside `<select>`, but we will also add a `componentDidUpdate()` lifecycle method that notifies Chosen about changes in the children list:\n\n``` jsx\ncomponentDidUpdate(prevProps) {\n  if (prevProps.children !== this.props.children) {\n    this.$el.trigger(\"chosen:updated\");\n  }\n}\n```\n\nThis way, Chosen will know to update its DOM element when the `<select>` children managed by React change.\n\nThe complete implementation of the `Chosen` component looks like this:\n\n``` jsx\nclass Chosen extends React.Component {\n  componentDidMount() {\n    this.$el = $(this.el);\n    this.$el.chosen();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.$el.on('change', this.handleChange);\n  }\n  \n  componentDidUpdate(prevProps) {\n    if (prevProps.children !== this.props.children) {\n      this.$el.trigger(\"chosen:updated\");\n    }\n  }\n\n  componentWillUnmount() {\n    this.$el.off('change', this.handleChange);\n    this.$el.chosen('destroy');\n  }\n  \n  handleChange(e) {\n    this.props.onChange(e.target.value);\n  }\n\n  render() {\n    return (\n      <div>\n        <select className=\"Chosen-select\" ref={el => this.el = el}>\n          {this.props.children}\n        </select>\n      </div>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/xdgKOz?editors=0010)\n\n## Integrating with Other View Libraries\n\nReact can be embedded into other applications thanks to the flexibility of [`createRoot()`](react-dom-client#createRoot).\n\nAlthough React is commonly used at startup to load a single root React component into the DOM, `createRoot()` can also be called multiple times for independent parts of the UI which can be as small as a button, or as large as an app.\n\nIn fact, this is exactly how React is used at Facebook. This lets us write applications in React piece by piece, and combine them with our existing server-generated templates and other client-side code.\n\n### Replacing String-Based Rendering with React\n\nA common pattern in older web applications is to describe chunks of the DOM as a string and insert it into the DOM like so: `$el.html(htmlString)`. These points in a codebase are perfect for introducing React. Just rewrite the string based rendering as a React component.\n\nSo the following jQuery implementation…\n\n``` jsx\n$('#container').html('<button id=\"btn\">Say Hello</button>');\n$('#btn').click(function() {\n  alert('Hello!');\n});\n```\n\n…could be rewritten using a React component:\n\n``` jsx\nfunction Button() {\n  return <button id=\"btn\">Say Hello</button>;\n}\n\n$('#btn').click(function() {\n  alert('Hello!');\n});\n```\n\nFrom here you could start moving more logic into the component and begin adopting more common React practices. For example, in components it is best not to rely on IDs because the same component can be rendered multiple times. Instead, we will use the [React event system](handling-events) and register the click handler directly on the React `<button>` element:\n\n``` jsx\nfunction Button(props) {\n  return <button onClick={props.onClick}>Say Hello</button>;\n}\n\nfunction HelloButton() {\n  function handleClick() {\n    alert('Hello!');\n  }\n  return <Button onClick={handleClick} />;\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/RVKbvW?editors=1010)\n\nYou can have as many such isolated components as you like, and use `ReactDOM.createRoot()` to render them to different DOM containers. Gradually, as you convert more of your app to React, you will be able to combine them into larger components, and move some of the `ReactDOM.createRoot()` calls up the hierarchy.\n\n### Embedding React in a Backbone View\n\n[Backbone](https://backbonejs.org/) views typically use HTML strings, or string-producing template functions, to create the content for their DOM elements. This process, too, can be replaced with rendering a React component.\n\nBelow, we will create a Backbone view called `ParagraphView`. It will override Backbone’s `render()` function to render a React `<Paragraph>` component into the DOM element provided by Backbone (`this.el`). Here, too, we are using [`ReactDOM.createRoot()`](react-dom-client#createroot):\n\n``` jsx\nfunction Paragraph(props) {\n  return <p>{props.text}</p>;\n}\n\nconst ParagraphView = Backbone.View.extend({\n  initialize(options) {\n    this.reactRoot = ReactDOM.createRoot(this.el);\n  },\n  render() {\n    const text = this.model.get('text');\n    this.reactRoot.render(<Paragraph text={text} />);\n    return this;\n  },\n  remove() {\n    this.reactRoot.unmount();\n    Backbone.View.prototype.remove.call(this);\n  }\n});\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/gWgOYL?editors=0010)\n\nIt is important that we also call `root.unmount()` in the `remove` method so that React unregisters event handlers and other resources associated with the component tree when it is detached.\n\nWhen a component is removed *from within* a React tree, the cleanup is performed automatically, but because we are removing the entire tree by hand, we must call this method.\n\n## Integrating with Model Layers\n\nWhile it is generally recommended to use unidirectional data flow such as [React state](lifting-state-up), [Flux](https://facebook.github.io/flux/), or [Redux](https://redux.js.org/), React components can use a model layer from other frameworks and libraries.\n\n### Using Backbone Models in React Components\n\nThe simplest way to consume [Backbone](https://backbonejs.org/) models and collections from a React component is to listen to the various change events and manually force an update.\n\nComponents responsible for rendering models would listen to `'change'` events, while components responsible for rendering collections would listen for `'add'` and `'remove'` events. In both cases, call [`this.forceUpdate()`](react-component#forceupdate) to rerender the component with the new data.\n\nIn the example below, the `List` component renders a Backbone collection, using the `Item` component to render individual items.\n\n``` jsx\nclass Item extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange() {\n    this.forceUpdate();\n  }\n\n  componentDidMount() {\n    this.props.model.on('change', this.handleChange);\n  }\n\n  componentWillUnmount() {\n    this.props.model.off('change', this.handleChange);\n  }\n\n  render() {\n    return <li>{this.props.model.get('text')}</li>;\n  }\n}\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange() {\n    this.forceUpdate();\n  }\n\n  componentDidMount() {\n    this.props.collection.on('add', 'remove', this.handleChange);\n  }\n\n  componentWillUnmount() {\n    this.props.collection.off('add', 'remove', this.handleChange);\n  }\n\n  render() {\n    return (\n      <ul>\n        {this.props.collection.map(model => (\n          <Item key={model.cid} model={model} />\n        ))}\n      </ul>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/GmrREm?editors=0010)\n\n### Extracting Data from Backbone Models\n\nThe approach above requires your React components to be aware of the Backbone models and collections. If you later plan to migrate to another data management solution, you might want to concentrate the knowledge about Backbone in as few parts of the code as possible.\n\nOne solution to this is to extract the model’s attributes as plain data whenever it changes, and keep this logic in a single place. The following is [a higher-order component](higher-order-components) that extracts all attributes of a Backbone model into state, passing the data to the wrapped component.\n\nThis way, only the higher-order component needs to know about Backbone model internals, and most components in the app can stay agnostic of Backbone.\n\nIn the example below, we will make a copy of the model’s attributes to form the initial state. We subscribe to the `change` event (and unsubscribe on unmounting), and when it happens, we update the state with the model’s current attributes. Finally, we make sure that if the `model` prop itself changes, we don’t forget to unsubscribe from the old model, and subscribe to the new one.\n\nNote that this example is not meant to be exhaustive with regards to working with Backbone, but it should give you an idea for how to approach this in a generic way:\n\n``` jsx\nfunction connectToBackboneModel(WrappedComponent) {\n  return class BackboneComponent extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = Object.assign({}, props.model.attributes);\n      this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n      this.props.model.on('change', this.handleChange);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this.setState(Object.assign({}, nextProps.model.attributes));\n      if (nextProps.model !== this.props.model) {\n        this.props.model.off('change', this.handleChange);\n        nextProps.model.on('change', this.handleChange);\n      }\n    }\n\n    componentWillUnmount() {\n      this.props.model.off('change', this.handleChange);\n    }\n\n    handleChange(model) {\n      this.setState(model.changedAttributes());\n    }\n\n    render() {\n      const propsExceptModel = Object.assign({}, this.props);\n      delete propsExceptModel.model;\n      return <WrappedComponent {...propsExceptModel} {...this.state} />;\n    }\n  }\n}\n```\n\nTo demonstrate how to use it, we will connect a `NameInput` React component to a Backbone model, and update its `firstName` attribute every time the input changes:\n\n``` jsx\nfunction NameInput(props) {\n  return (\n    <p>\n      <input value={props.firstName} onChange={props.handleChange} />\n      <br />\n      My name is {props.firstName}.\n    </p>\n  );\n}\n\nconst BackboneNameInput = connectToBackboneModel(NameInput);\n\nfunction Example(props) {\n  function handleChange(e) {\n    props.model.set('firstName', e.target.value);\n  }\n\n  return (\n    <BackboneNameInput      model={props.model}      handleChange={handleChange}    />\n\n  );\n}\n\nconst model = new Backbone.Model({ firstName: 'Frodo' });\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Example model={model} />);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/PmWwwa?editors=0010)\n\nThis technique is not limited to Backbone. You can use React with any model library by subscribing to its changes in the lifecycle methods and, optionally, copying the data into the local React state.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/integrating-with-other-libraries.html](https://reactjs.org/docs/integrating-with-other-libraries.html)"
- name: Introducing Hooks
  id: hooks-intro
  summary: Hooks are a new addition in React 16.8
  description: "# Introducing Hooks\n\n*Hooks* are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\n``` jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\nThis new function `useState` is the first “Hook” we’ll learn about, but this example is just a teaser. Don’t worry if it doesn’t make sense yet!\n\n**You can start learning Hooks [on the next page](hooks-overview).** On this page, we’ll continue by explaining why we’re adding Hooks to React and how they can help you write great applications.\n\n> Note\n>\n> React 16.8.0 is the first release to support Hooks. When upgrading, don’t forget to update all packages, including React DOM. React Native has supported Hooks since [the 0.59 release of React Native](https://reactnative.dev/blog/2019/03/12/releasing-react-native-059).\n\n## Video Introduction\n\nAt React Conf 2018, Sophie Alpert and Dan Abramov introduced Hooks, followed by Ryan Florence demonstrating how to refactor an application to use them. Watch the video here:\n\n  \n\n## No Breaking Changes\n\nBefore we continue, note that Hooks are:\n\n- **Completely opt-in.** You can try Hooks in a few components without rewriting any existing code. But you don’t have to learn or use Hooks right now if you don’t want to.\n- **100% backwards-compatible.** Hooks don’t contain any breaking changes.\n- **Available now.** Hooks are now available with the release of v16.8.0.\n\n**There are no plans to remove classes from React.** You can read more about the gradual adoption strategy for Hooks in the [bottom section](#gradual-adoption-strategy) of this page.\n\n**Hooks don’t replace your knowledge of React concepts.** Instead, Hooks provide a more direct API to the React concepts you already know: props, state, context, refs, and lifecycle. As we will show later, Hooks also offer a new powerful way to combine them.\n\n**If you just want to start learning Hooks, feel free to [jump directly to the next page!](hooks-overview)** You can also keep reading this page to learn more about why we’re adding Hooks, and how we’re going to start using them without rewriting our applications.\n\n## Motivation\n\nHooks solve a wide variety of seemingly unconnected problems in React that we’ve encountered over five years of writing and maintaining tens of thousands of components. Whether you’re learning React, use it daily, or even prefer a different library with a similar component model, you might recognize some of these problems.\n\n### It’s hard to reuse stateful logic between components\n\nReact doesn’t offer a way to “attach” reusable behavior to a component (for example, connecting it to a store). If you’ve worked with React for a while, you may be familiar with patterns like [render props](render-props) and [higher-order components](higher-order-components) that try to solve this. But these patterns require you to restructure your components when you use them, which can be cumbersome and make code harder to follow. If you look at a typical React application in React DevTools, you will likely find a “wrapper hell” of components surrounded by layers of providers, consumers, higher-order components, render props, and other abstractions. While we could [filter them out in DevTools](https://github.com/facebook/react-devtools/pull/503), this points to a deeper underlying problem: React needs a better primitive for sharing stateful logic.\n\nWith Hooks, you can extract stateful logic from a component so it can be tested independently and reused. **Hooks allow you to reuse stateful logic without changing your component hierarchy.** This makes it easy to share Hooks among many components or with the community.\n\nWe’ll discuss this more in [Building Your Own Hooks](hooks-custom).\n\n### Complex components become hard to understand\n\nWe’ve often had to maintain components that started out simple but grew into an unmanageable mess of stateful logic and side effects. Each lifecycle method often contains a mix of unrelated logic. For example, components might perform some data fetching in `componentDidMount` and `componentDidUpdate`. However, the same `componentDidMount` method might also contain some unrelated logic that sets up event listeners, with cleanup performed in `componentWillUnmount`. Mutually related code that changes together gets split apart, but completely unrelated code ends up combined in a single method. This makes it too easy to introduce bugs and inconsistencies.\n\nIn many cases it’s not possible to break these components into smaller ones because the stateful logic is all over the place. It’s also difficult to test them. This is one of the reasons many people prefer to combine React with a separate state management library. However, that often introduces too much abstraction, requires you to jump between different files, and makes reusing components more difficult.\n\nTo solve this, **Hooks let you split one component into smaller functions based on what pieces are related (such as setting up a subscription or fetching data)**, rather than forcing a split based on lifecycle methods. You may also opt into managing the component’s local state with a reducer to make it more predictable.\n\nWe’ll discuss this more in [Using the Effect Hook](hooks-effect#tip-use-multiple-effects-to-separate-concerns).\n\n### Classes confuse both people and machines\n\nIn addition to making code reuse and code organization more difficult, we’ve found that classes can be a large barrier to learning React. You have to understand how `this` works in JavaScript, which is very different from how it works in most languages. You have to remember to bind the event handlers. Without [ES2022 public class fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_instance_fields), the code is very verbose. People can understand props, state, and top-down data flow perfectly well but still struggle with classes. The distinction between function and class components in React and when to use each one leads to disagreements even between experienced React developers.\n\nAdditionally, React has been out for about five years, and we want to make sure it stays relevant in the next five years. As [Svelte](https://svelte.dev/), [Angular](https://angular.io/), [Glimmer](https://glimmerjs.com/), and others show, [ahead-of-time compilation](https://en.wikipedia.org/wiki/Ahead-of-time_compilation) of components has a lot of future potential. Especially if it’s not limited to templates. Recently, we’ve been experimenting with [component folding](https://github.com/facebook/react/issues/7323) using [Prepack](https://prepack.io/), and we’ve seen promising early results. However, we found that class components can encourage unintentional patterns that make these optimizations fall back to a slower path. Classes present issues for today’s tools, too. For example, classes don’t minify very well, and they make hot reloading flaky and unreliable. We want to present an API that makes it more likely for code to stay on the optimizable path.\n\nTo solve these problems, **Hooks let you use more of React’s features without classes.** Conceptually, React components have always been closer to functions. Hooks embrace functions, but without sacrificing the practical spirit of React. Hooks provide access to imperative escape hatches and don’t require you to learn complex functional or reactive programming techniques.\n\n> Examples\n>\n> [Hooks at a Glance](hooks-overview) is a good place to start learning Hooks.\n\n## Gradual Adoption Strategy\n\n> **TLDR: There are no plans to remove classes from React.**\n\nWe know that React developers are focused on shipping products and don’t have time to look into every new API that’s being released. Hooks are very new, and it might be better to wait for more examples and tutorials before considering learning or adopting them.\n\nWe also understand that the bar for adding a new primitive to React is extremely high. For curious readers, we have prepared a [detailed RFC](https://github.com/reactjs/rfcs/pull/68) that dives into the motivation with more details, and provides extra perspective on the specific design decisions and related prior art.\n\n**Crucially, Hooks work side-by-side with existing code so you can adopt them gradually.** There is no rush to migrate to Hooks. We recommend avoiding any “big rewrites”, especially for existing, complex class components. It takes a bit of a mind shift to start “thinking in Hooks”. In our experience, it’s best to practice using Hooks in new and non-critical components first, and ensure that everybody on your team feels comfortable with them. After you give Hooks a try, please feel free to [send us feedback](https://github.com/facebook/react/issues/new), positive or negative.\n\nWe intend for Hooks to cover all existing use cases for classes, but **we will keep supporting class components for the foreseeable future.** At Facebook, we have tens of thousands of components written as classes, and we have absolutely no plans to rewrite them. Instead, we are starting to use Hooks in the new code side by side with classes.\n\n## Frequently Asked Questions\n\nWe’ve prepared a [Hooks FAQ page](hooks-faq) that answers the most common questions about Hooks.\n\n## Next Steps\n\nBy the end of this page, you should have a rough idea of what problems Hooks are solving, but many details are probably unclear. Don’t worry! **Let’s now go to [the next page](hooks-overview) where we start learning about Hooks by example.**\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/hooks-intro.html](https://reactjs.org/docs/hooks-intro.html)"
- name: Introducing JSX
  id: introducing-jsx
  summary: This funny tag syntax is neither a string nor HTML
  description: "# Introducing JSX\n\nConsider this variable declaration:\n\n``` jsx\nconst element = <h1>Hello, world!</h1>;\n```\n\nThis funny tag syntax is neither a string nor HTML.\n\nIt is called JSX, and it is a syntax extension to JavaScript. We recommend using it with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.\n\nJSX produces React “elements”. We will explore rendering them to the DOM in the [next section](rendering-elements). Below, you can find the basics of JSX necessary to get you started.\n\n### Why JSX?\n\nReact embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.\n\nInstead of artificially separating *technologies* by putting markup and logic in separate files, React [separates *concerns*](https://en.wikipedia.org/wiki/Separation_of_concerns) with loosely coupled units called “components” that contain both. We will come back to components in a [further section](components-and-props), but if you’re not yet comfortable putting markup in JS, [this talk](https://www.youtube.com/watch?v=x7cQ3mrcKaY) might convince you otherwise.\n\nReact [doesn’t require](react-without-jsx) using JSX, but most people find it helpful as a visual aid when working with UI inside the JavaScript code. It also allows React to show more useful error and warning messages.\n\nWith that out of the way, let’s get started!\n\n### Embedding Expressions in JSX\n\nIn the example below, we declare a variable called `name` and then use it inside JSX by wrapping it in curly braces:\n\n``` jsx\nconst name = 'Josh Perez';\nconst element = <h1>Hello, {name}</h1>;\n```\n\nYou can put any valid [JavaScript expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions) inside the curly braces in JSX. For example, `2 + 2`, `user.firstName`, or `formatName(user)` are all valid JavaScript expressions.\n\nIn the example below, we embed the result of calling a JavaScript function, `formatName(user)`, into an `<h1>` element.\n\n``` jsx\nfunction formatName(user) {\n  return user.firstName + ' ' + user.lastName;\n}\n\nconst user = {\n  firstName: 'Harper',\n  lastName: 'Perez'\n};\n\nconst element = (\n  <h1>\n    Hello, {formatName(user)}!\n  </h1>\n);\n```\n\n**[Try it on CodePen](https://codepen.io/gaearon/pen/PGEjdG?editors=1010)**\n\nWe split JSX over multiple lines for readability. While it isn’t required, when doing this, we also recommend wrapping it in parentheses to avoid the pitfalls of [automatic semicolon insertion](https://stackoverflow.com/q/2846283).\n\n### JSX is an Expression Too\n\nAfter compilation, JSX expressions become regular JavaScript function calls and evaluate to JavaScript objects.\n\nThis means that you can use JSX inside of `if` statements and `for` loops, assign it to variables, accept it as arguments, and return it from functions:\n\n``` jsx\nfunction getGreeting(user) {\n  if (user) {\n    return <h1>Hello, {formatName(user)}!</h1>;\n  }\n  return <h1>Hello, Stranger.</h1>;\n}\n```\n\n### Specifying Attributes with JSX\n\nYou may use quotes to specify string literals as attributes:\n\n``` jsx\nconst element = <a href=\"https://www.reactjs.org\"> link </a>;\n```\n\nYou may also use curly braces to embed a JavaScript expression in an attribute:\n\n``` jsx\nconst element = <img src={user.avatarUrl}></img>;\n```\n\nDon’t put quotes around curly braces when embedding a JavaScript expression in an attribute. You should either use quotes (for string values) or curly braces (for expressions), but not both in the same attribute.\n\n> **Warning:**\n>\n> Since JSX is closer to JavaScript than to HTML, React DOM uses `camelCase` property naming convention instead of HTML attribute names.\n>\n> For example, `class` becomes [`className`](https://developer.mozilla.org/en-US/docs/Web/API/Element/className) in JSX, and `tabindex` becomes [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex).\n\n### Specifying Children with JSX\n\nIf a tag is empty, you may close it immediately with `/>`, like XML:\n\n``` jsx\nconst element = <img src={user.avatarUrl} />;\n```\n\nJSX tags may contain children:\n\n``` jsx\nconst element = (\n  <div>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </div>\n);\n```\n\n### JSX Prevents Injection Attacks\n\nIt is safe to embed user input in JSX:\n\n``` jsx\nconst title = response.potentiallyMaliciousInput;\n// This is safe:\nconst element = <h1>{title}</h1>;\n```\n\nBy default, React DOM [escapes](https://stackoverflow.com/questions/7381974/which-characters-need-to-be-escaped-on-html) any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered. This helps prevent [XSS (cross-site-scripting)](https://en.wikipedia.org/wiki/Cross-site_scripting) attacks.\n\n### JSX Represents Objects\n\nBabel compiles JSX down to `React.createElement()` calls.\n\nThese two examples are identical:\n\n``` jsx\nconst element = (\n  <h1 className=\"greeting\">\n    Hello, world!\n  </h1>\n);\n```\n\n``` jsx\nconst element = React.createElement(\n  'h1',\n  {className: 'greeting'},\n  'Hello, world!'\n);\n```\n\n`React.createElement()` performs a few checks to help you write bug-free code but essentially it creates an object like this:\n\n``` jsx\n// Note: this structure is simplified\nconst element = {\n  type: 'h1',\n  props: {\n    className: 'greeting',\n    children: 'Hello, world!'\n  }\n};\n```\n\nThese objects are called “React elements”. You can think of them as descriptions of what you want to see on the screen. React reads these objects and uses them to construct the DOM and keep it up to date.\n\nWe will explore rendering React elements to the DOM in the [next section](rendering-elements).\n\n> **Tip:**\n>\n> We recommend using the [“Babel” language definition](https://babeljs.io/docs/en/next/editors) for your editor of choice so that both ES6 and JSX code is properly highlighted.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/introducing-jsx.html](https://reactjs.org/docs/introducing-jsx.html)"
- name: isCompositeComponent()
  id: test-utils#iscompositecomponent
  summary: Returns true if instance is a user-defined component, such as a class or a function
  belongs_to: Test Utilities
  description: |-
    ### `isCompositeComponent()`

    ``` jsx
    isCompositeComponent(instance)
    ```

    Returns `true` if `instance` is a user-defined component, such as a class or a function.
- name: isCompositeComponentWithType()
  id: test-utils#iscompositecomponentwithtype
  summary: Returns true if instance is a component whose type is of a React componentClass
  belongs_to: Test Utilities
  description: |-
    ### `isCompositeComponentWithType()`

    ``` jsx
    isCompositeComponentWithType(
      instance,
      componentClass
    )
    ```

    Returns `true` if `instance` is a component whose type is of a React `componentClass`.
- name: isDOMComponent()
  id: test-utils#isdomcomponent
  summary: null
  belongs_to: Test Utilities
  description: |-
    ### `isDOMComponent()`

    ``` jsx
    isDOMComponent(instance)
    ```

    Returns `true` if `instance` is a DOM component (such as a `<div>` or `<span>`).
- name: isElement()
  id: test-utils#iselement
  summary: Returns true if element is any React element
  belongs_to: Test Utilities
  description: |-
    ### `isElement()`

    ``` jsx
    isElement(element)
    ```

    Returns `true` if `element` is any React element.
- name: isElementOfType()
  id: test-utils#iselementoftype
  summary: Returns true if element is a React element whose type is of a React componentClass
  belongs_to: Test Utilities
  description: |-
    ### `isElementOfType()`

    ``` jsx
    isElementOfType(
      element,
      componentClass
    )
    ```

    Returns `true` if `element` is a React element whose type is of a React `componentClass`.
- name: isValidElement()
  id: react-api#isvalidelement
  summary: Verifies the object is a React element
  belongs_to: React Top-Level API
  description: |-
    ### `isValidElement()`

    ``` jsx
    React.isValidElement(object)
    ```

    Verifies the object is a React element. Returns `true` or `false`.
- name: JavaScript Environment Requirements
  id: javascript-environment-requirements
  summary: If you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application
  description: "# JavaScript Environment Requirements\n\nReact 18 supports all modern browsers (Edge, Firefox, Chrome, Safari, etc).\n\nIf you support older browsers and devices such as Internet Explorer which do not provide modern browser features natively or have non-compliant implementations, consider including a global polyfill in your bundled application.\n\nHere is a list of the modern features React 18 uses:\n\n- [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n- [`Symbol`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol)\n- [`Object.assign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\nThe correct polyfill for these features depend on your environment. For many users, you can configure your [Browserlist](https://github.com/browserslist/browserslist) settings. For others, you may need to import polyfills like [`core-js`](https://github.com/zloirock/core-js) directly.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/javascript-environment-requirements.html](https://reactjs.org/docs/javascript-environment-requirements.html)"
- name: JSX
  id: glossary#jsx
  summary: JSX is a syntax extension to JavaScript
  belongs_to: Glossary of React Terms
  description: |-
    ## JSX

    JSX is a syntax extension to JavaScript. It is similar to a template language, but it has full power of JavaScript. JSX gets compiled to `React.createElement()` calls which return plain JavaScript objects called “React elements”. To get a basic introduction to JSX [see the docs here](introducing-jsx) and find a more in-depth tutorial on JSX [here](jsx-in-depth).

    React DOM uses camelCase property naming convention instead of HTML attribute names. For example, `tabindex` becomes `tabIndex` in JSX. The attribute `class` is also written as `className` since `class` is a reserved word in JavaScript:

    ``` jsx
    <h1 className="hello">My name is Clementine!</h1>
    ```
- name: JSX In Depth
  id: jsx-in-depth
  summary: Fundamentally, JSX just provides syntactic sugar for the React.createElement(component, props, ...children) function
  description: "# JSX In Depth\n\nFundamentally, JSX just provides syntactic sugar for the `React.createElement(component, props, ...children)` function. The JSX code:\n\n``` jsx\n<MyButton color=\"blue\" shadowSize={2}>\n  Click Me\n</MyButton>\n```\n\ncompiles into:\n\n``` jsx\nReact.createElement(\n  MyButton,\n  {color: 'blue', shadowSize: 2},\n  'Click Me'\n)\n```\n\nYou can also use the self-closing form of the tag if there are no children. So:\n\n``` jsx\n<div className=\"sidebar\" />\n```\n\ncompiles into:\n\n``` jsx\nReact.createElement(\n  'div',\n  {className: 'sidebar'}\n)\n```\n\nIf you want to test out how some specific JSX is converted into JavaScript, you can try out [the online Babel compiler](https://babeljs.io/repl/#?presets=react&code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA).\n\n## Specifying The React Element Type\n\nThe first part of a JSX tag determines the type of the React element.\n\nCapitalized types indicate that the JSX tag is referring to a React component. These tags get compiled into a direct reference to the named variable, so if you use the JSX `<Foo />` expression, `Foo` must be in scope.\n\n### React Must Be in Scope\n\nSince JSX compiles into calls to `React.createElement`, the `React` library must also always be in scope from your JSX code.\n\nFor example, both of the imports are necessary in this code, even though `React` and `CustomButton` are not directly referenced from JavaScript:\n\n``` jsx\nimport React from 'react';\nimport CustomButton from './CustomButton';\n\nfunction WarningButton() {\n  // return React.createElement(CustomButton, {color: 'red'}, null);\n  return <CustomButton color=\"red\" />;\n}\n```\n\nIf you don’t use a JavaScript bundler and loaded React from a `<script>` tag, it is already in scope as the `React` global.\n\n### Using Dot Notation for JSX Type\n\nYou can also refer to a React component using dot-notation from within JSX. This is convenient if you have a single module that exports many React components. For example, if `MyComponents.DatePicker` is a component, you can use it directly from JSX with:\n\n``` jsx\nimport React from 'react';\n\nconst MyComponents = {\n  DatePicker: function DatePicker(props) {\n    return <div>Imagine a {props.color} datepicker here.</div>;\n  }\n}\n\nfunction BlueDatePicker() {\n  return <MyComponents.DatePicker color=\"blue\" />;\n}\n```\n\n### User-Defined Components Must Be Capitalized\n\nWhen an element type starts with a lowercase letter, it refers to a built-in component like `<div>` or `<span>` and results in a string `'div'` or `'span'` passed to `React.createElement`. Types that start with a capital letter like `<Foo />` compile to `React.createElement(Foo)` and correspond to a component defined or imported in your JavaScript file.\n\nWe recommend naming components with a capital letter. If you do have a component that starts with a lowercase letter, assign it to a capitalized variable before using it in JSX.\n\nFor example, this code will not run as expected:\n\n``` jsx\nimport React from 'react';\n\n// Wrong! This is a component and should have been capitalized:\nfunction hello(props) {\n  // Correct! This use of <div> is legitimate because div is a valid HTML tag:\n  return <div>Hello {props.toWhat}</div>;\n}\n\nfunction HelloWorld() {\n  // Wrong! React thinks <hello /> is an HTML tag because it's not capitalized:\n  return <hello toWhat=\"World\" />;\n}\n```\n\nTo fix this, we will rename `hello` to `Hello` and use `<Hello />` when referring to it:\n\n``` jsx\nimport React from 'react';\n\n// Correct! This is a component and should be capitalized:\nfunction Hello(props) {\n  // Correct! This use of <div> is legitimate because div is a valid HTML tag:\n  return <div>Hello {props.toWhat}</div>;\n}\n\nfunction HelloWorld() {\n  // Correct! React knows <Hello /> is a component because it's capitalized.\n  return <Hello toWhat=\"World\" />;\n}\n```\n\n### Choosing the Type at Runtime\n\nYou cannot use a general expression as the React element type. If you do want to use a general expression to indicate the type of the element, just assign it to a capitalized variable first. This often comes up when you want to render a different component based on a prop:\n\n``` jsx\nimport React from 'react';\nimport { PhotoStory, VideoStory } from './stories';\n\nconst components = {\n  photo: PhotoStory,\n  video: VideoStory\n};\n\nfunction Story(props) {\n  // Wrong! JSX type can't be an expression.\n  return <components[props.storyType] story={props.story} />;\n}\n```\n\nTo fix this, we will assign the type to a capitalized variable first:\n\n``` jsx\nimport React from 'react';\nimport { PhotoStory, VideoStory } from './stories';\n\nconst components = {\n  photo: PhotoStory,\n  video: VideoStory\n};\n\nfunction Story(props) {\n  // Correct! JSX type can be a capitalized variable.\n  const SpecificStory = components[props.storyType];\n  return <SpecificStory story={props.story} />;\n}\n```\n\n## Props in JSX\n\nThere are several different ways to specify props in JSX.\n\n### JavaScript Expressions as Props\n\nYou can pass any JavaScript expression as a prop, by surrounding it with `{}`. For example, in this JSX:\n\n``` jsx\n<MyComponent foo={1 + 2 + 3 + 4} />\n```\n\nFor `MyComponent`, the value of `props.foo` will be `10` because the expression `1 + 2 + 3 + 4` gets evaluated.\n\n`if` statements and `for` loops are not expressions in JavaScript, so they can’t be used in JSX directly. Instead, you can put these in the surrounding code. For example:\n\n``` jsx\nfunction NumberDescriber(props) {\n  let description;\n  if (props.number % 2 == 0) {\n    description = <strong>even</strong>;\n  } else {\n    description = <i>odd</i>;\n  }\n  return <div>{props.number} is an {description} number</div>;\n}\n```\n\nYou can learn more about [conditional rendering](conditional-rendering) and [loops](lists-and-keys) in the corresponding sections.\n\n### String Literals\n\nYou can pass a string literal as a prop. These two JSX expressions are equivalent:\n\n``` jsx\n<MyComponent message=\"hello world\" />\n\n<MyComponent message={'hello world'} />\n```\n\nWhen you pass a string literal, its value is HTML-unescaped. So these two JSX expressions are equivalent:\n\n``` jsx\n<MyComponent message=\"&lt;3\" />\n\n<MyComponent message={'<3'} />\n```\n\nThis behavior is usually not relevant. It’s only mentioned here for completeness.\n\n### Props Default to “True”\n\nIf you pass no value for a prop, it defaults to `true`. These two JSX expressions are equivalent:\n\n``` jsx\n<MyTextBox autocomplete />\n\n<MyTextBox autocomplete={true} />\n```\n\nIn general, we don’t recommend *not* passing a value for a prop, because it can be confused with the [ES6 object shorthand](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015) `{foo}` which is short for `{foo: foo}` rather than `{foo: true}`. This behavior is just there so that it matches the behavior of HTML.\n\n### Spread Attributes\n\nIf you already have `props` as an object, and you want to pass it in JSX, you can use `...` as a “spread” syntax to pass the whole props object. These two components are equivalent:\n\n``` jsx\nfunction App1() {\n  return <Greeting firstName=\"Ben\" lastName=\"Hector\" />;\n}\n\nfunction App2() {\n  const props = {firstName: 'Ben', lastName: 'Hector'};\n  return <Greeting {...props} />;\n}\n```\n\nYou can also pick specific props that your component will consume while passing all other props using the spread syntax.\n\n``` jsx\nconst Button = props => {\n  const { kind, ...other } = props;\n  const className = kind === \"primary\" ? \"PrimaryButton\" : \"SecondaryButton\";\n  return <button className={className} {...other} />;\n};\n\nconst App = () => {\n  return (\n    <div>\n      <Button kind=\"primary\" onClick={() => console.log(\"clicked!\")}>\n        Hello World!\n      </Button>\n    </div>\n  );\n};\n```\n\nIn the example above, the `kind` prop is safely consumed and *is not* passed on to the `<button>` element in the DOM. All other props are passed via the `...other` object making this component really flexible. You can see that it passes an `onClick` and `children` props.\n\nSpread attributes can be useful but they also make it easy to pass unnecessary props to components that don’t care about them or to pass invalid HTML attributes to the DOM. We recommend using this syntax sparingly.\n\n## Children in JSX\n\nIn JSX expressions that contain both an opening tag and a closing tag, the content between those tags is passed as a special prop: `props.children`. There are several different ways to pass children:\n\n### String Literals\n\nYou can put a string between the opening and closing tags and `props.children` will just be that string. This is useful for many of the built-in HTML elements. For example:\n\n``` jsx\n<MyComponent>Hello world!</MyComponent>\n```\n\nThis is valid JSX, and `props.children` in `MyComponent` will simply be the string `\"Hello world!\"`. HTML is unescaped, so you can generally write JSX just like you would write HTML in this way:\n\n``` html\n<div>This is valid HTML &amp; JSX at the same time.</div>\n```\n\nJSX removes whitespace at the beginning and ending of a line. It also removes blank lines. New lines adjacent to tags are removed; new lines that occur in the middle of string literals are condensed into a single space. So these all render to the same thing:\n\n``` jsx\n<div>Hello World</div>\n\n<div>\n  Hello World\n</div>\n\n<div>\n  Hello\n  World\n</div>\n\n<div>\n\n  Hello World\n</div>\n```\n\n### JSX Children\n\nYou can provide more JSX elements as the children. This is useful for displaying nested components:\n\n``` jsx\n<MyContainer>\n  <MyFirstComponent />\n  <MySecondComponent />\n</MyContainer>\n```\n\nYou can mix together different types of children, so you can use string literals together with JSX children. This is another way in which JSX is like HTML, so that this is both valid JSX and valid HTML:\n\n``` html\n<div>\n  Here is a list:\n  <ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n  </ul>\n</div>\n```\n\nA React component can also return an array of elements:\n\n``` jsx\nrender() {\n  // No need to wrap list items in an extra element!\n  return [\n    // Don't forget the keys :)\n    <li key=\"A\">First item</li>,\n    <li key=\"B\">Second item</li>,\n    <li key=\"C\">Third item</li>,\n  ];\n}\n```\n\n### JavaScript Expressions as Children\n\nYou can pass any JavaScript expression as children, by enclosing it within `{}`. For example, these expressions are equivalent:\n\n``` jsx\n<MyComponent>foo</MyComponent>\n\n<MyComponent>{'foo'}</MyComponent>\n```\n\nThis is often useful for rendering a list of JSX expressions of arbitrary length. For example, this renders an HTML list:\n\n``` jsx\nfunction Item(props) {\n  return <li>{props.message}</li>;\n}\n\nfunction TodoList() {\n  const todos = ['finish doc', 'submit pr', 'nag dan to review'];\n  return (\n    <ul>\n      {todos.map((message) => <Item key={message} message={message} />)}\n    </ul>\n  );\n}\n```\n\nJavaScript expressions can be mixed with other types of children. This is often useful in lieu of string templates:\n\n``` jsx\nfunction Hello(props) {\n  return <div>Hello {props.addressee}!</div>;\n}\n```\n\n### Functions as Children\n\nNormally, JavaScript expressions inserted in JSX will evaluate to a string, a React element, or a list of those things. However, `props.children` works just like any other prop in that it can pass any sort of data, not just the sorts that React knows how to render. For example, if you have a custom component, you could have it take a callback as `props.children`:\n\n``` jsx\n// Calls the children callback numTimes to produce a repeated component\nfunction Repeat(props) {\n  let items = [];\n  for (let i = 0; i < props.numTimes; i++) {\n    items.push(props.children(i));\n  }\n  return <div>{items}</div>;\n}\n\nfunction ListOfTenThings() {\n  return (\n    <Repeat numTimes={10}>\n      {(index) => <div key={index}>This is item {index} in the list</div>}\n    </Repeat>\n  );\n}\n```\n\nChildren passed to a custom component can be anything, as long as that component transforms them into something React can understand before rendering. This usage is not common, but it works if you want to stretch what JSX is capable of.\n\n### Booleans, Null, and Undefined Are Ignored\n\n`false`, `null`, `undefined`, and `true` are valid children. They simply don’t render. These JSX expressions will all render to the same thing:\n\n``` jsx\n<div />\n\n<div></div>\n\n<div>{false}</div>\n\n<div>{null}</div>\n\n<div>{undefined}</div>\n\n<div>{true}</div>\n```\n\nThis can be useful to conditionally render React elements. This JSX renders the `<Header />` component only if `showHeader` is `true`:\n\n``` jsx\n<div>\n  {showHeader && <Header />}\n  <Content />\n</div>\n```\n\nOne caveat is that some [“falsy” values](https://developer.mozilla.org/en-US/docs/Glossary/Falsy), such as the `0` number, are still rendered by React. For example, this code will not behave as you might expect because `0` will be printed when `props.messages` is an empty array:\n\n``` jsx\n<div>\n  {props.messages.length &&\n    <MessageList messages={props.messages} />\n  }\n</div>\n```\n\nTo fix this, make sure that the expression before `&&` is always boolean:\n\n``` jsx\n<div>\n  {props.messages.length > 0 &&\n    <MessageList messages={props.messages} />\n  }\n</div>\n```\n\nConversely, if you want a value like `false`, `true`, `null`, or `undefined` to appear in the output, you have to [convert it to a string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#String_conversion) first:\n\n``` jsx\n<div>\n  My JavaScript variable is {String(myVariable)}.\n</div>\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/jsx-in-depth.html](https://reactjs.org/docs/jsx-in-depth.html)"
- name: Keys
  id: glossary#keys
  summary: A “key” is a special string attribute you need to include when creating arrays of elements
  belongs_to: Glossary of React Terms
  description: |-
    ## [Keys](lists-and-keys)

    A “key” is a special string attribute you need to include when creating arrays of elements. Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside an array to give the elements a stable identity.

    Keys only need to be unique among sibling elements in the same array. They don’t need to be unique across the whole application or even a single component.

    Don’t pass something like `Math.random()` to keys. It is important that keys have a “stable identity” across re-renders so that React can determine when items are added, removed, or re-ordered. Ideally, keys should correspond to unique and stable identifiers coming from your data, such as `post.id`.
- name: Legacy Context
  id: legacy-context
  summary: The legacy context API will be removed in a future major version
  description: "# Legacy Context\n\n> Note:\n>\n> The legacy context API will be removed in a future major version. Use the [new context API](context) introduced with version 16.3. The legacy API will continue working for all 16.x releases.\n\n## How To Use Context\n\n> This section documents a legacy API. See the [new API](context).\n\nSuppose you have a structure like:\n\n``` jsx\nclass Button extends React.Component {\n  render() {\n    return (\n      <button style={{background: this.props.color}}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\nclass Message extends React.Component {\n  render() {\n    return (\n      <div>\n        {this.props.text} <Button color={this.props.color}>Delete</Button>\n      </div>\n    );\n  }\n}\n\nclass MessageList extends React.Component {\n  render() {\n    const color = \"purple\";\n    const children = this.props.messages.map((message) =>\n      <Message text={message.text} color={color} />\n    );\n    return <div>{children}</div>;\n  }\n}\n```\n\nIn this example, we manually thread through a `color` prop in order to style the `Button` and `Message` components appropriately. Using context, we can pass this through the tree automatically:\n\n``` jsx\nimport PropTypes from 'prop-types';\n\nclass Button extends React.Component {\n  render() {\n    return (\n      <button style={{background: this.context.color}}>\n        {this.props.children}\n      </button>\n    );\n  }\n}\n\nButton.contextTypes = {\n  color: PropTypes.string\n};\n\nclass Message extends React.Component {\n  render() {\n    return (\n      <div>\n        {this.props.text} <Button>Delete</Button>\n      </div>\n    );\n  }\n}\n\nclass MessageList extends React.Component {\n  getChildContext() {\n    return {color: \"purple\"};\n  }\n\n  render() {\n    const children = this.props.messages.map((message) =>\n      <Message text={message.text} />\n    );\n    return <div>{children}</div>;\n  }\n}\n\nMessageList.childContextTypes = {\n  color: PropTypes.string\n};\n```\n\nBy adding `childContextTypes` and `getChildContext` to `MessageList` (the context provider), React passes the information down automatically and any component in the subtree (in this case, `Button`) can access it by defining `contextTypes`.\n\nIf `contextTypes` is not defined, then `context` will be an empty object.\n\n> Note:\n>\n> `React.PropTypes` has moved into a different package since React v15.5. Please use [the `prop-types` library instead](https://www.npmjs.com/package/prop-types) to define `contextTypes`.\n>\n> We provide [a codemod script](https://reactjs.org/blog/2017/04/07/react-v15.5.0.html#migrating-from-react.proptypes) to automate the conversion.\n\n### Parent-Child Coupling\n\n> This section documents a legacy API. See the [new API](context).\n\nContext can also let you build an API where parents and children communicate. For example, one library that works this way is [React Router V4](https://reacttraining.com/react-router):\n\n``` jsx\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nconst BasicExample = () => (\n  <Router>\n    <div>\n      <ul>\n        <li><Link to=\"/\">Home</Link></li>\n        <li><Link to=\"/about\">About</Link></li>\n        <li><Link to=\"/topics\">Topics</Link></li>\n      </ul>\n\n      <hr />\n\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/topics\" component={Topics} />\n    </div>\n  </Router>\n);\n```\n\nBy passing down some information from the `Router` component, each `Link` and `Route` can communicate back to the containing `Router`.\n\nBefore you build components with an API similar to this, consider if there are cleaner alternatives. For example, you can pass entire React components as props if you’d like to.\n\n### Referencing Context in Lifecycle Methods\n\n> This section documents a legacy API. See the [new API](context).\n\nIf `contextTypes` is defined within a component, the following [lifecycle methods](react-component#the-component-lifecycle) will receive an additional parameter, the `context` object:\n\n- [`constructor(props, context)`](react-component#constructor)\n- [`componentWillReceiveProps(nextProps, nextContext)`](react-component#componentwillreceiveprops)\n- [`shouldComponentUpdate(nextProps, nextState, nextContext)`](react-component#shouldcomponentupdate)\n- [`componentWillUpdate(nextProps, nextState, nextContext)`](react-component#componentwillupdate)\n\n> Note:\n>\n> As of React 16, `componentDidUpdate` no longer receives `prevContext`.\n\n### Referencing Context in Function Components\n\n> This section documents a legacy API. See the [new API](context).\n\nFunction components are also able to reference `context` if `contextTypes` is defined as a property of the function. The following code shows a `Button` component written as a function component.\n\n``` jsx\nimport PropTypes from 'prop-types';\n\nconst Button = ({children}, context) =>\n  <button style={{background: context.color}}>\n    {children}\n  </button>;\n\nButton.contextTypes = {color: PropTypes.string};\n```\n\n### Updating Context\n\n> This section documents a legacy API. See the [new API](context).\n\nDon’t do it.\n\nReact has an API to update context, but it is fundamentally broken and you should not use it.\n\nThe `getChildContext` function will be called when the state or props changes. In order to update data in the context, trigger a local state update with `this.setState`. This will trigger a new context and changes will be received by the children.\n\n``` jsx\nimport PropTypes from 'prop-types';\n\nclass MediaQuery extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {type:'desktop'};\n  }\n\n  getChildContext() {\n    return {type: this.state.type};\n  }\n\n  componentDidMount() {\n    const checkMediaQuery = () => {\n      const type = window.matchMedia(\"(min-width: 1025px)\").matches ? 'desktop' : 'mobile';\n      if (type !== this.state.type) {\n        this.setState({type});\n      }\n    };\n\n    window.addEventListener('resize', checkMediaQuery);\n    checkMediaQuery();\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nMediaQuery.childContextTypes = {\n  type: PropTypes.string\n};\n```\n\nThe problem is, if a context value provided by component changes, descendants that use that value won’t update if an intermediate parent returns `false` from `shouldComponentUpdate`. This is totally out of control of the components using context, so there’s basically no way to reliably update the context. [This blog post](https://medium.com/@mweststrate/how-to-safely-use-react-context-b7e343eff076) has a good explanation of why this is a problem and how you might get around it.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/legacy-context.html](https://reactjs.org/docs/legacy-context.html)"
- name: Lifecycle Methods
  id: glossary#lifecycle-methods
  summary: Lifecycle methods are custom functionality that gets executed during the different phases of a component
  belongs_to: Glossary of React Terms
  description: |-
    ## [Lifecycle Methods](state-and-lifecycle#adding-lifecycle-methods-to-a-class)

    Lifecycle methods are custom functionality that gets executed during the different phases of a component. There are methods available when the component gets created and inserted into the DOM ([mounting](react-component#mounting)), when the component updates, and when the component gets unmounted or removed from the DOM.
- name: Lifting State Up
  id: lifting-state-up
  summary: Often, several components need to reflect the same changing data
  description: "# Lifting State Up\n\nOften, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor. Let’s see how this works in action.\n\nIn this section, we will create a temperature calculator that calculates whether the water would boil at a given temperature.\n\nWe will start with a component called `BoilingVerdict`. It accepts the `celsius` temperature as a prop, and prints whether it is enough to boil the water:\n\n``` jsx\nfunction BoilingVerdict(props) {\n  if (props.celsius >= 100) {\n    return <p>The water would boil.</p>;\n  }\n  return <p>The water would not boil.</p>;\n}\n```\n\nNext, we will create a component called `Calculator`. It renders an `<input>` that lets you enter the temperature, and keeps its value in `this.state.temperature`.\n\nAdditionally, it renders the `BoilingVerdict` for the current input value.\n\n``` jsx\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    return (\n      <fieldset>\n        <legend>Enter temperature in Celsius:</legend>\n        <input          value={temperature}          onChange={this.handleChange} />\n        <BoilingVerdict          celsius={parseFloat(temperature)} />\n      </fieldset>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/ZXeOBm?editors=0010)\n\n## Adding a Second Input\n\nOur new requirement is that, in addition to a Celsius input, we provide a Fahrenheit input, and they are kept in sync.\n\nWe can start by extracting a `TemperatureInput` component from `Calculator`. We will add a new `scale` prop to it that can either be `\"c\"` or `\"f\"`:\n\n``` jsx\nconst scaleNames = {\n  c: 'Celsius',\n  f: 'Fahrenheit'\n};\n\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n```\n\nWe can now change the `Calculator` to render two separate temperature inputs:\n\n``` jsx\nclass Calculator extends React.Component {\n  render() {\n    return (\n      <div>\n        <TemperatureInput scale=\"c\" />\n        <TemperatureInput scale=\"f\" />\n      </div>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/jGBryx?editors=0010)\n\nWe have two inputs now, but when you enter the temperature in one of them, the other doesn’t update. This contradicts our requirement: we want to keep them in sync.\n\nWe also can’t display the `BoilingVerdict` from `Calculator`. The `Calculator` doesn’t know the current temperature because it is hidden inside the `TemperatureInput`.\n\n## Writing Conversion Functions\n\nFirst, we will write two functions to convert from Celsius to Fahrenheit and back:\n\n``` jsx\nfunction toCelsius(fahrenheit) {\n  return (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n  return (celsius * 9 / 5) + 32;\n}\n```\n\nThese two functions convert numbers. We will write another function that takes a string `temperature` and a converter function as arguments and returns a string. We will use it to calculate the value of one input based on the other input.\n\nIt returns an empty string on an invalid `temperature`, and it keeps the output rounded to the third decimal place:\n\n``` jsx\nfunction tryConvert(temperature, convert) {\n  const input = parseFloat(temperature);\n  if (Number.isNaN(input)) {\n    return '';\n  }\n  const output = convert(input);\n  const rounded = Math.round(output * 1000) / 1000;\n  return rounded.toString();\n}\n```\n\nFor example, `tryConvert('abc', toCelsius)` returns an empty string, and `tryConvert('10.22', toFahrenheit)` returns `'50.396'`.\n\n## Lifting State Up\n\nCurrently, both `TemperatureInput` components independently keep their values in the local state:\n\n``` jsx\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {temperature: ''};\n  }\n\n  handleChange(e) {\n    this.setState({temperature: e.target.value});\n  }\n\n  render() {\n    const temperature = this.state.temperature;\n    // ...  \n```\n\nHowever, we want these two inputs to be in sync with each other. When we update the Celsius input, the Fahrenheit input should reflect the converted temperature, and vice versa.\n\nIn React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. This is called “lifting state up”. We will remove the local state from the `TemperatureInput` and move it into the `Calculator` instead.\n\nIf the `Calculator` owns the shared state, it becomes the “source of truth” for the current temperature in both inputs. It can instruct them both to have values that are consistent with each other. Since the props of both `TemperatureInput` components are coming from the same parent `Calculator` component, the two inputs will always be in sync.\n\nLet’s see how this works step by step.\n\nFirst, we will replace `this.state.temperature` with `this.props.temperature` in the `TemperatureInput` component. For now, let’s pretend `this.props.temperature` already exists, although we will need to pass it from the `Calculator` in the future:\n\n``` jsx\n  render() {\n    // Before: const temperature = this.state.temperature;\n    const temperature = this.props.temperature;\n    // ...\n```\n\nWe know that [props are read-only](components-and-props#props-are-read-only). When the `temperature` was in the local state, the `TemperatureInput` could just call `this.setState()` to change it. However, now that the `temperature` is coming from the parent as a prop, the `TemperatureInput` has no control over it.\n\nIn React, this is usually solved by making a component “controlled”. Just like the DOM `<input>` accepts both a `value` and an `onChange` prop, so can the custom `TemperatureInput` accept both `temperature` and `onTemperatureChange` props from its parent `Calculator`.\n\nNow, when the `TemperatureInput` wants to update its temperature, it calls `this.props.onTemperatureChange`:\n\n``` jsx\n  handleChange(e) {\n    // Before: this.setState({temperature: e.target.value});\n    this.props.onTemperatureChange(e.target.value);\n    // ...\n```\n\n> Note:\n>\n> There is no special meaning to either `temperature` or `onTemperatureChange` prop names in custom components. We could have called them anything else, like name them `value` and `onChange` which is a common convention.\n\nThe `onTemperatureChange` prop will be provided together with the `temperature` prop by the parent `Calculator` component. It will handle the change by modifying its own local state, thus re-rendering both inputs with the new values. We will look at the new `Calculator` implementation very soon.\n\nBefore diving into the changes in the `Calculator`, let’s recap our changes to the `TemperatureInput` component. We have removed the local state from it, and instead of reading `this.state.temperature`, we now read `this.props.temperature`. Instead of calling `this.setState()` when we want to make a change, we now call `this.props.onTemperatureChange()`, which will be provided by the `Calculator`:\n\n``` jsx\nclass TemperatureInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.onTemperatureChange(e.target.value);\n  }\n\n  render() {\n    const temperature = this.props.temperature;\n    const scale = this.props.scale;\n    return (\n      <fieldset>\n        <legend>Enter temperature in {scaleNames[scale]}:</legend>\n        <input value={temperature}\n               onChange={this.handleChange} />\n      </fieldset>\n    );\n  }\n}\n```\n\nNow let’s turn to the `Calculator` component.\n\nWe will store the current input’s `temperature` and `scale` in its local state. This is the state we “lifted up” from the inputs, and it will serve as the “source of truth” for both of them. It is the minimal representation of all the data we need to know in order to render both inputs.\n\nFor example, if we enter 37 into the Celsius input, the state of the `Calculator` component will be:\n\n``` jsx\n{\n  temperature: '37',\n  scale: 'c'\n}\n```\n\nIf we later edit the Fahrenheit field to be 212, the state of the `Calculator` will be:\n\n``` jsx\n{\n  temperature: '212',\n  scale: 'f'\n}\n```\n\nWe could have stored the value of both inputs but it turns out to be unnecessary. It is enough to store the value of the most recently changed input, and the scale that it represents. We can then infer the value of the other input based on the current `temperature` and `scale` alone.\n\nThe inputs stay in sync because their values are computed from the same state:\n\n``` jsx\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n    this.state = {temperature: '', scale: 'c'};\n  }\n\n  handleCelsiusChange(temperature) {\n    this.setState({scale: 'c', temperature});\n  }\n\n  handleFahrenheitChange(temperature) {\n    this.setState({scale: 'f', temperature});\n  }\n\n  render() {\n    const scale = this.state.scale;\n    const temperature = this.state.temperature;\n    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n    return (\n      <div>\n        <TemperatureInput\n          scale=\"c\"\n          temperature={celsius}          onTemperatureChange={this.handleCelsiusChange} />        <TemperatureInput\n          scale=\"f\"\n          temperature={fahrenheit}          onTemperatureChange={this.handleFahrenheitChange} />        <BoilingVerdict\n          celsius={parseFloat(celsius)} />      </div>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/WZpxpz?editors=0010)\n\nNow, no matter which input you edit, `this.state.temperature` and `this.state.scale` in the `Calculator` get updated. One of the inputs gets the value as is, so any user input is preserved, and the other input value is always recalculated based on it.\n\nLet’s recap what happens when you edit an input:\n\n- React calls the function specified as `onChange` on the DOM `<input>`. In our case, this is the `handleChange` method in the `TemperatureInput` component.\n- The `handleChange` method in the `TemperatureInput` component calls `this.props.onTemperatureChange()` with the new desired value. Its props, including `onTemperatureChange`, were provided by its parent component, the `Calculator`.\n- When it previously rendered, the `Calculator` had specified that `onTemperatureChange` of the Celsius `TemperatureInput` is the `Calculator`’s `handleCelsiusChange` method, and `onTemperatureChange` of the Fahrenheit `TemperatureInput` is the `Calculator`’s `handleFahrenheitChange` method. So either of these two `Calculator` methods gets called depending on which input we edited.\n- Inside these methods, the `Calculator` component asks React to re-render itself by calling `this.setState()` with the new input value and the current scale of the input we just edited.\n- React calls the `Calculator` component’s `render` method to learn what the UI should look like. The values of both inputs are recomputed based on the current temperature and the active scale. The temperature conversion is performed here.\n- React calls the `render` methods of the individual `TemperatureInput` components with their new props specified by the `Calculator`. It learns what their UI should look like.\n- React calls the `render` method of the `BoilingVerdict` component, passing the temperature in Celsius as its props.\n- React DOM updates the DOM with the boiling verdict and to match the desired input values. The input we just edited receives its current value, and the other input is updated to the temperature after conversion.\n\nEvery update goes through the same steps so the inputs stay in sync.\n\n## Lessons Learned\n\nThere should be a single “source of truth” for any data that changes in a React application. Usually, the state is first added to the component that needs it for rendering. Then, if other components also need it, you can lift it up to their closest common ancestor. Instead of trying to sync the state between different components, you should rely on the [top-down data flow](state-and-lifecycle#the-data-flows-down).\n\nLifting state involves writing more “boilerplate” code than two-way binding approaches, but as a benefit, it takes less work to find and isolate bugs. Since any state “lives” in some component and that component alone can change it, the surface area for bugs is greatly reduced. Additionally, you can implement any custom logic to reject or transform user input.\n\nIf something can be derived from either props or state, it probably shouldn’t be in the state. For example, instead of storing both `celsiusValue` and `fahrenheitValue`, we store just the last edited `temperature` and its `scale`. The value of the other input can always be calculated from them in the `render()` method. This lets us clear or apply rounding to the other field without losing any precision in the user input.\n\nWhen you see something wrong in the UI, you can use [React Developer Tools](https://github.com/facebook/react/tree/main/packages/react-devtools) to inspect the props and move up the tree until you find the component responsible for updating the state. This lets you trace the bugs to their source:\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/lifting-state-up.html](https://reactjs.org/docs/lifting-state-up.html)"
- name: Lists and Keys
  id: lists-and-keys
  summary: First, let’s review how you transform lists in JavaScript
  description: "# Lists and Keys\n\nFirst, let’s review how you transform lists in JavaScript.\n\nGiven the code below, we use the [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) function to take an array of `numbers` and double their values. We assign the new array returned by `map()` to the variable `doubled` and log it:\n\n``` jsx\nconst numbers = [1, 2, 3, 4, 5];\nconst doubled = numbers.map((number) => number * 2);\nconsole.log(doubled);\n```\n\nThis code logs `[2, 4, 6, 8, 10]` to the console.\n\nIn React, transforming arrays into lists of [elements](rendering-elements) is nearly identical.\n\n### Rendering Multiple Components\n\nYou can build collections of elements and [include them in JSX](introducing-jsx#embedding-expressions-in-jsx) using curly braces `{}`.\n\nBelow, we loop through the `numbers` array using the JavaScript [`map()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) function. We return a `<li>` element for each item. Finally, we assign the resulting array of elements to `listItems`:\n\n``` jsx\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li>{number}</li>\n);\n```\n\nThen, we can include the entire `listItems` array inside a `<ul>` element:\n\n``` jsx\n<ul>{listItems}</ul>\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/GjPyQr?editors=0011)\n\nThis code displays a bullet list of numbers between 1 and 5.\n\n### Basic List Component\n\nUsually you would render lists inside a [component](components-and-props).\n\nWe can refactor the previous example into a component that accepts an array of `numbers` and outputs a list of elements.\n\n``` jsx\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li>{number}</li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<NumberList numbers={numbers} />);\n```\n\nWhen you run this code, you’ll be given a warning that a key should be provided for list items. A “key” is a special string attribute you need to include when creating lists of elements. We’ll discuss why it’s important in the next section.\n\nLet’s assign a `key` to our list items inside `numbers.map()` and fix the missing key issue.\n\n``` jsx\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <li key={number.toString()}>\n      {number}\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/jrXYRR?editors=0011)\n\n## Keys\n\nKeys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity:\n\n``` jsx\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li key={number.toString()}>\n    {number}\n  </li>\n);\n```\n\nThe best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys:\n\n``` jsx\nconst todoItems = todos.map((todo) =>\n  <li key={todo.id}>\n    {todo.text}\n  </li>\n);\n```\n\nWhen you don’t have stable IDs for rendered items, you may use the item index as a key as a last resort:\n\n``` jsx\nconst todoItems = todos.map((todo, index) =>\n  // Only do this if items have no stable IDs\n  <li key={index}>\n    {todo.text}\n  </li>\n);\n```\n\nWe don’t recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state. Check out Robin Pokorny’s article for an [in-depth explanation on the negative impacts of using an index as a key](https://robinpokorny.com/blog/index-as-a-key-is-an-anti-pattern/). If you choose not to assign an explicit key to list items then React will default to using indexes as keys.\n\nHere is an [in-depth explanation about why keys are necessary](reconciliation#recursing-on-children) if you’re interested in learning more.\n\n### Extracting Components with Keys\n\nKeys only make sense in the context of the surrounding array.\n\nFor example, if you [extract](components-and-props#extracting-components) a `ListItem` component, you should keep the key on the `<ListItem />` elements in the array rather than on the `<li>` element in the `ListItem` itself.\n\n**Example: Incorrect Key Usage**\n\n``` jsx\nfunction ListItem(props) {\n  const value = props.value;\n  return (\n    // Wrong! There is no need to specify the key here:\n    <li key={value.toString()}>\n      {value}\n    </li>\n  );\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Wrong! The key should have been specified here:\n    <ListItem value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n```\n\n**Example: Correct Key Usage**\n\n``` jsx\nfunction ListItem(props) {\n  // Correct! There is no need to specify the key here:\n  return <li>{props.value}</li>;\n}\n\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    // Correct! Key should be specified inside the array.\n    <ListItem key={number.toString()} value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/ZXeOGM?editors=0010)\n\nA good rule of thumb is that elements inside the `map()` call need keys.\n\n### Keys Must Only Be Unique Among Siblings\n\nKeys used within arrays should be unique among their siblings. However, they don’t need to be globally unique. We can use the same keys when we produce two different arrays:\n\n``` jsx\nfunction Blog(props) {\n  const sidebar = (\n    <ul>\n      {props.posts.map((post) =>\n        <li key={post.id}>\n          {post.title}\n        </li>\n      )}\n    </ul>\n  );\n  const content = props.posts.map((post) =>\n    <div key={post.id}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n    </div>\n  );\n  return (\n    <div>\n      {sidebar}\n      <hr />\n      {content}\n    </div>\n  );\n}\n\nconst posts = [\n  {id: 1, title: 'Hello World', content: 'Welcome to learning React!'},\n  {id: 2, title: 'Installation', content: 'You can install React from npm.'}\n];\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Blog posts={posts} />);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/NRZYGN?editors=0010)\n\nKeys serve as a hint to React but they don’t get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name:\n\n``` jsx\nconst content = posts.map((post) =>\n  <Post\n    key={post.id}    id={post.id}    title={post.title} />\n);\n```\n\nWith the example above, the `Post` component can read `props.id`, but not `props.key`.\n\n### Embedding map() in JSX\n\nIn the examples above we declared a separate `listItems` variable and included it in JSX:\n\n``` jsx\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  const listItems = numbers.map((number) =>\n    <ListItem key={number.toString()}              value={number} />\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n```\n\nJSX allows [embedding any expression](introducing-jsx#embedding-expressions-in-jsx) in curly braces so we could inline the `map()` result:\n\n``` jsx\nfunction NumberList(props) {\n  const numbers = props.numbers;\n  return (\n    <ul>\n      {numbers.map((number) =>\n        <ListItem key={number.toString()}                  value={number} />\n      )}\n    </ul>\n  );\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/BLvYrB?editors=0010)\n\nSometimes this results in clearer code, but this style can also be abused. Like in JavaScript, it is up to you to decide whether it is worth extracting a variable for readability. Keep in mind that if the `map()` body is too nested, it might be a good time to [extract a component](components-and-props#extracting-components).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/lists-and-keys.html](https://reactjs.org/docs/lists-and-keys.html)"
- name: mockComponent()
  id: test-utils#mockcomponent
  summary: Pass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component
  belongs_to: Test Utilities
  description: |-
    ### `mockComponent()`

    ``` jsx
    mockComponent(
      componentClass,
      [mockTagName]
    )
    ```

    Pass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple `<div>` (or other tag if `mockTagName` is provided) containing any provided children.

    > Note:
    >
    > `mockComponent()` is a legacy API. We recommend using [`jest.mock()`](https://jestjs.io/docs/tutorial-react-native#mock-native-modules-using-jestmock) instead.
- name: Optimizing Performance
  id: optimizing-performance
  summary: Internally, React uses several clever techniques to minimize the number of costly DOM operations required to update the UI
  description: "# Optimizing Performance\n\nInternally, React uses several clever techniques to minimize the number of costly DOM operations required to update the UI. For many applications, using React will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.\n\n## Use the Production Build\n\nIf you’re benchmarking or experiencing performance problems in your React apps, make sure you’re testing with the minified production build.\n\nBy default, React includes many helpful warnings. These warnings are very useful in development. However, they make React larger and slower so you should make sure to use the production version when you deploy the app.\n\nIf you aren’t sure whether your build process is set up correctly, you can check it by installing [React Developer Tools for Chrome](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi). If you visit a site with React in production mode, the icon will have a dark background:\n\n[](https://reactjs.org/static/d0f767f80866431ccdec18f200ca58f1/0a47e/devtools-prod.png)\n\nIf you visit a site with React in development mode, the icon will have a red background:\n\n[](https://reactjs.org/static/e434ce2f7e64f63e597edf03f4465694/0a47e/devtools-dev.png)\n\nIt is expected that you use the development mode when working on your app, and the production mode when deploying your app to the users.\n\nYou can find instructions for building your app for production below.\n\n### Create React App\n\nIf your project is built with [Create React App](https://github.com/facebookincubator/create-react-app), run:\n\n``` text\nnpm run build\n```\n\nThis will create a production build of your app in the `build/` folder of your project.\n\nRemember that this is only necessary before deploying to production. For normal development, use `npm start`.\n\n### Single-File Builds\n\nWe offer production-ready versions of React and React DOM as single files:\n\n``` html\n<script src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>\n<script src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"></script>\n```\n\nRemember that only React files ending with `.production.min.js` are suitable for production.\n\n### Brunch\n\nFor the most efficient Brunch production build, install the [`terser-brunch`](https://github.com/brunch/terser-brunch) plugin:\n\n``` text\n# If you use npm\nnpm install --save-dev terser-brunch\n\n# If you use Yarn\nyarn add --dev terser-brunch\n```\n\nThen, to create a production build, add the `-p` flag to the `build` command:\n\n``` text\nbrunch build -p\n```\n\nRemember that you only need to do this for production builds. You shouldn’t pass the `-p` flag or apply this plugin in development, because it will hide useful React warnings and make the builds much slower.\n\n### Browserify\n\nFor the most efficient Browserify production build, install a few plugins:\n\n``` text\n# If you use npm\nnpm install --save-dev envify terser uglifyify\n\n# If you use Yarn\nyarn add --dev envify terser uglifyify\n```\n\nTo create a production build, make sure that you add these transforms **(the order matters)**:\n\n- The [`envify`](https://github.com/hughsk/envify) transform ensures the right build environment is set. Make it global (`-g`).\n- The [`uglifyify`](https://github.com/hughsk/uglifyify) transform removes development imports. Make it global too (`-g`).\n- Finally, the resulting bundle is piped to [`terser`](https://github.com/terser-js/terser) for mangling ([read why](https://github.com/hughsk/uglifyify#motivationusage)).\n\nFor example:\n\n``` text\nbrowserify ./index.js \\\n  -g [ envify --NODE_ENV production ] \\\n  -g uglifyify \\\n  | terser --compress --mangle > ./bundle.js\n```\n\nRemember that you only need to do this for production builds. You shouldn’t apply these plugins in development because they will hide useful React warnings, and make the builds much slower.\n\n### Rollup\n\nFor the most efficient Rollup production build, install a few plugins:\n\n``` bash\n# If you use npm\nnpm install --save-dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser\n\n# If you use Yarn\nyarn add --dev rollup-plugin-commonjs rollup-plugin-replace rollup-plugin-terser\n```\n\nTo create a production build, make sure that you add these plugins **(the order matters)**:\n\n- The [`replace`](https://github.com/rollup/rollup-plugin-replace) plugin ensures the right build environment is set.\n- The [`commonjs`](https://github.com/rollup/rollup-plugin-commonjs) plugin provides support for CommonJS in Rollup.\n- The [`terser`](https://github.com/TrySound/rollup-plugin-terser) plugin compresses and mangles the final bundle.\n\n``` jsx\nplugins: [\n  // ...\n  require('rollup-plugin-replace')({\n    'process.env.NODE_ENV': JSON.stringify('production')\n  }),\n  require('rollup-plugin-commonjs')(),\n  require('rollup-plugin-terser')(),\n  // ...\n]\n```\n\nFor a complete setup example [see this gist](https://gist.github.com/Rich-Harris/cb14f4bc0670c47d00d191565be36bf0).\n\nRemember that you only need to do this for production builds. You shouldn’t apply the `terser` plugin or the `replace` plugin with `'production'` value in development because they will hide useful React warnings, and make the builds much slower.\n\n### webpack\n\n> **Note:**\n>\n> If you’re using Create React App, please follow [the instructions above](#create-react-app).  \n> This section is only relevant if you configure webpack directly.\n\nWebpack v4+ will minify your code by default in production mode.\n\n``` jsx\nconst TerserPlugin = require('terser-webpack-plugin');\n\nmodule.exports = {\n  mode: 'production',\n  optimization: {\n    minimizer: [new TerserPlugin({ /* additional options here */ })],\n  },\n};\n```\n\nYou can learn more about this in [webpack documentation](https://webpack.js.org/guides/production/).\n\nRemember that you only need to do this for production builds. You shouldn’t apply `TerserPlugin` in development because it will hide useful React warnings, and make the builds much slower.\n\n## Profiling Components with the DevTools Profiler\n\n`react-dom` 16.5+ and `react-native` 0.57+ provide enhanced profiling capabilities in DEV mode with the React DevTools Profiler. An overview of the Profiler can be found in the blog post [“Introducing the React Profiler”](https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html). A video walkthrough of the profiler is also [available on YouTube](https://www.youtube.com/watch?v=nySib7ipZdk).\n\nIf you haven’t yet installed the React DevTools, you can find them here:\n\n- [Chrome Browser Extension](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en)\n- [Firefox Browser Extension](https://addons.mozilla.org/en-GB/firefox/addon/react-devtools/)\n- [Standalone Node Package](https://www.npmjs.com/package/react-devtools)\n\n> Note\n>\n> A production profiling bundle of `react-dom` is also available as `react-dom/profiling`. Read more about how to use this bundle at [fb.me/react-profiling](https://fb.me/react-profiling)\n\n> Note\n>\n> Before React 17, we use the standard [User Timing API](https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API) to profile components with the chrome performance tab. For a more detailed walkthrough, check out [this article by Ben Schwarz](https://calibreapp.com/blog/react-performance-profiling-optimization).\n\n## Virtualize Long Lists\n\nIf your application renders long lists of data (hundreds or thousands of rows), we recommend using a technique known as “windowing”. This technique only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created.\n\n[react-window](https://react-window.now.sh/) and [react-virtualized](https://bvaughn.github.io/react-virtualized/) are popular windowing libraries. They provide several reusable components for displaying lists, grids, and tabular data. You can also create your own windowing component, like [Twitter did](https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3), if you want something more tailored to your application’s specific use case.\n\n## Avoid Reconciliation\n\nReact builds and maintains an internal representation of the rendered UI. It includes the React elements you return from your components. This representation lets React avoid creating DOM nodes and accessing existing ones beyond necessity, as that can be slower than operations on JavaScript objects. Sometimes it is referred to as a “virtual DOM”, but it works the same way on React Native.\n\nWhen a component’s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM.\n\nEven though React only updates the changed DOM nodes, re-rendering still takes some time. In many cases it’s not a problem, but if the slowdown is noticeable, you can speed all of this up by overriding the lifecycle function `shouldComponentUpdate`, which is triggered before the re-rendering process starts. The default implementation of this function returns `true`, leaving React to perform the update:\n\n``` jsx\nshouldComponentUpdate(nextProps, nextState) {\n  return true;\n}\n```\n\nIf you know that in some situations your component doesn’t need to update, you can return `false` from `shouldComponentUpdate` instead, to skip the whole rendering process, including calling `render()` on this component and below.\n\nIn most cases, instead of writing `shouldComponentUpdate()` by hand, you can inherit from [`React.PureComponent`](react-api#reactpurecomponent). It is equivalent to implementing `shouldComponentUpdate()` with a shallow comparison of current and previous props and state.\n\n## shouldComponentUpdate In Action\n\nHere’s a subtree of components. For each one, `SCU` indicates what `shouldComponentUpdate` returned, and `vDOMEq` indicates whether the rendered React elements were equivalent. Finally, the circle’s color indicates whether the component had to be reconciled or not.\n\n[](https://reactjs.org/static/5ee1bdf4779af06072a17b7a0654f6db/cd039/should-component-update.png)\n\nSince `shouldComponentUpdate` returned `false` for the subtree rooted at C2, React did not attempt to render C2, and thus didn’t even have to invoke `shouldComponentUpdate` on C4 and C5.\n\nFor C1 and C3, `shouldComponentUpdate` returned `true`, so React had to go down to the leaves and check them. For C6 `shouldComponentUpdate` returned `true`, and since the rendered elements weren’t equivalent React had to update the DOM.\n\nThe last interesting case is C8. React had to render this component, but since the React elements it returned were equal to the previously rendered ones, it didn’t have to update the DOM.\n\nNote that React only had to do DOM mutations for C6, which was inevitable. For C8, it bailed out by comparing the rendered React elements, and for C2’s subtree and C7, it didn’t even have to compare the elements as we bailed out on `shouldComponentUpdate`, and `render` was not called.\n\n## Examples\n\nIf the only way your component ever changes is when the `props.color` or the `state.count` variable changes, you could have `shouldComponentUpdate` check that:\n\n``` jsx\nclass CounterButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: 1};\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.color !== nextProps.color) {\n      return true;\n    }\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    return (\n      <button\n        color={this.props.color}\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n```\n\nIn this code, `shouldComponentUpdate` is just checking if there is any change in `props.color` or `state.count`. If those values don’t change, the component doesn’t update. If your component got more complex, you could use a similar pattern of doing a “shallow comparison” between all the fields of `props` and `state` to determine if the component should update. This pattern is common enough that React provides a helper to use this logic - just inherit from `React.PureComponent`. So this code is a simpler way to achieve the same thing:\n\n``` jsx\nclass CounterButton extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {count: 1};\n  }\n\n  render() {\n    return (\n      <button\n        color={this.props.color}\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n```\n\nMost of the time, you can use `React.PureComponent` instead of writing your own `shouldComponentUpdate`. It only does a shallow comparison, so you can’t use it if the props or state may have been mutated in a way that a shallow comparison would miss.\n\nThis can be a problem with more complex data structures. For example, let’s say you want a `ListOfWords` component to render a comma-separated list of words, with a parent `WordAdder` component that lets you click a button to add a word to the list. This code does *not* work correctly:\n\n``` jsx\nclass ListOfWords extends React.PureComponent {\n  render() {\n    return <div>{this.props.words.join(',')}</div>;\n  }\n}\n\nclass WordAdder extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: ['marklar']\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // This section is bad style and causes a bug\n    const words = this.state.words;\n    words.push('marklar');\n    this.setState({words: words});\n  }\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick} />\n        <ListOfWords words={this.state.words} />\n      </div>\n    );\n  }\n}\n```\n\nThe problem is that `PureComponent` will do a simple comparison between the old and new values of `this.props.words`. Since this code mutates the `words` array in the `handleClick` method of `WordAdder`, the old and new values of `this.props.words` will compare as equal, even though the actual words in the array have changed. The `ListOfWords` will thus not update even though it has new words that should be rendered.\n\n## The Power Of Not Mutating Data\n\nThe simplest way to avoid this problem is to avoid mutating values that you are using as props or state. For example, the `handleClick` method above could be rewritten using `concat` as:\n\n``` jsx\nhandleClick() {\n  this.setState(state => ({\n    words: state.words.concat(['marklar'])\n  }));\n}\n```\n\nES6 supports a [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator) for arrays which can make this easier. If you’re using Create React App, this syntax is available by default.\n\n``` jsx\nhandleClick() {\n  this.setState(state => ({\n    words: [...state.words, 'marklar'],\n  }));\n};\n```\n\nYou can also rewrite code that mutates objects to avoid mutation, in a similar way. For example, let’s say we have an object named `colormap` and we want to write a function that changes `colormap.right` to be `'blue'`. We could write:\n\n``` jsx\nfunction updateColorMap(colormap) {\n  colormap.right = 'blue';\n}\n```\n\nTo write this without mutating the original object, we can use [Object.assign](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) method:\n\n``` jsx\nfunction updateColorMap(colormap) {\n  return Object.assign({}, colormap, {right: 'blue'});\n}\n```\n\n`updateColorMap` now returns a new object, rather than mutating the old one. `Object.assign` is in ES6 and requires a polyfill.\n\n[Object spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) makes it easier to update objects without mutation as well:\n\n``` jsx\nfunction updateColorMap(colormap) {\n  return {...colormap, right: 'blue'};\n}\n```\n\nThis feature was added to JavaScript in ES2018.\n\nIf you’re using Create React App, both `Object.assign` and the object spread syntax are available by default.\n\nWhen you deal with deeply nested objects, updating them in an immutable way can feel convoluted. If you run into this problem, check out [Immer](https://github.com/mweststrate/immer) or [immutability-helper](https://github.com/kolodny/immutability-helper). These libraries let you write highly readable code without losing the benefits of immutability.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/optimizing-performance.html](https://reactjs.org/docs/optimizing-performance.html)"
- name: Package Managers
  id: glossary#package-managers
  summary: Package managers are tools that allow you to manage dependencies in your project
  belongs_to: Glossary of React Terms
  description: |-
    ## Package Managers

    Package managers are tools that allow you to manage dependencies in your project. [npm](https://www.npmjs.com/) and [Yarn](https://yarnpkg.com/) are two package managers commonly used in React applications. Both of them are clients for the same npm package registry.
- name: Passing Functions to Components
  id: faq-functions
  summary: There are several ways to make sure functions have access to component attributes like this.props and this.state, depending on which syntax and build steps you are using
  description: "# Passing Functions to Components\n\n### How do I pass an event handler (like onClick) to a component?\n\nPass event handlers and other functions as props to child components:\n\n``` jsx\n<button onClick={this.handleClick}>\n```\n\nIf you need to have access to the parent component in the handler, you also need to bind the function to the component instance (see below).\n\n### How do I bind a function to a component instance?\n\nThere are several ways to make sure functions have access to component attributes like `this.props` and `this.state`, depending on which syntax and build steps you are using.\n\n#### Bind in Constructor (ES2015)\n\n``` jsx\nclass Foo extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    console.log('Click happened');\n  }\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n```\n\n#### Class Properties (ES2022)\n\n``` jsx\nclass Foo extends Component {\n  handleClick = () => {\n    console.log('Click happened');\n  };\n  render() {\n    return <button onClick={this.handleClick}>Click Me</button>;\n  }\n}\n```\n\n#### Bind in Render\n\n``` jsx\nclass Foo extends Component {\n  handleClick() {\n    console.log('Click happened');\n  }\n  render() {\n    return <button onClick={this.handleClick.bind(this)}>Click Me</button>;\n  }\n}\n```\n\n> **Note:**\n>\n> Using `Function.prototype.bind` in render creates a new function each time the component renders, which may have performance implications (see below).\n\n#### Arrow Function in Render\n\n``` jsx\nclass Foo extends Component {\n  handleClick() {\n    console.log('Click happened');\n  }\n  render() {\n    return <button onClick={() => this.handleClick()}>Click Me</button>;\n  }\n}\n```\n\n> **Note:**\n>\n> Using an arrow function in render creates a new function each time the component renders, which may break optimizations based on strict identity comparison.\n\n### Is it OK to use arrow functions in render methods?\n\nGenerally speaking, yes, it is OK, and it is often the easiest way to pass parameters to callback functions.\n\nIf you do have performance issues, by all means, optimize!\n\n### Why is binding necessary at all?\n\nIn JavaScript, these two code snippets are **not** equivalent:\n\n``` jsx\nobj.method();\n```\n\n``` jsx\nvar method = obj.method;\nmethod();\n```\n\nBinding methods helps ensure that the second snippet works the same way as the first one.\n\nWith React, typically you only need to bind the methods you *pass* to other components. For example, `<button onClick={this.handleClick}>` passes `this.handleClick` so you want to bind it. However, it is unnecessary to bind the `render` method or the lifecycle methods: we don’t pass them to other components.\n\n[This post by Yehuda Katz](https://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/) explains what binding is, and how functions work in JavaScript, in detail.\n\n### Why is my function being called every time the component renders?\n\nMake sure you aren’t *calling the function* when you pass it to the component:\n\n``` jsx\nrender() {\n  // Wrong: handleClick is called instead of passed as a reference!\n  return <button onClick={this.handleClick()}>Click Me</button>\n}\n```\n\nInstead, *pass the function itself* (without parens):\n\n``` jsx\nrender() {\n  // Correct: handleClick is passed as a reference!\n  return <button onClick={this.handleClick}>Click Me</button>\n}\n```\n\n### How do I pass a parameter to an event handler or callback?\n\nYou can use an arrow function to wrap around an event handler and pass parameters:\n\n``` jsx\n<button onClick={() => this.handleClick(id)} />\n```\n\nThis is equivalent to calling `.bind`:\n\n``` jsx\n<button onClick={this.handleClick.bind(this, id)} />\n```\n\n#### Example: Passing params using arrow functions\n\n``` jsx\nconst A = 65 // ASCII character code\n\nclass Alphabet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      justClicked: null,\n      letters: Array.from({length: 26}, (_, i) => String.fromCharCode(A + i))\n    };\n  }\n  handleClick(letter) {\n    this.setState({ justClicked: letter });\n  }\n  render() {\n    return (\n      <div>\n        Just clicked: {this.state.justClicked}\n        <ul>\n          {this.state.letters.map(letter =>\n            <li key={letter} onClick={() => this.handleClick(letter)}>\n              {letter}\n            </li>\n          )}\n        </ul>\n      </div>\n    )\n  }\n}\n```\n\n#### Example: Passing params using data-attributes\n\nAlternately, you can use DOM APIs to store data needed for event handlers. Consider this approach if you need to optimize a large number of elements or have a render tree that relies on React.PureComponent equality checks.\n\n``` jsx\nconst A = 65 // ASCII character code\n\nclass Alphabet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      justClicked: null,\n      letters: Array.from({length: 26}, (_, i) => String.fromCharCode(A + i))\n    };\n  }\n\n  handleClick(e) {\n    this.setState({\n      justClicked: e.target.dataset.letter\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        Just clicked: {this.state.justClicked}\n        <ul>\n          {this.state.letters.map(letter =>\n            <li key={letter} data-letter={letter} onClick={this.handleClick}>\n              {letter}\n            </li>\n          )}\n        </ul>\n      </div>\n    )\n  }\n}\n```\n\n### How can I prevent a function from being called too quickly or too many times in a row?\n\nIf you have an event handler such as `onClick` or `onScroll` and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be done by using:\n\n- **throttling**: sample changes based on a time based frequency (eg [`_.throttle`](https://lodash.com/docs#throttle))\n- **debouncing**: publish changes after a period of inactivity (eg [`_.debounce`](https://lodash.com/docs#debounce))\n- **`requestAnimationFrame` throttling**: sample changes based on [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) (eg [`raf-schd`](https://github.com/alexreardon/raf-schd))\n\nSee [this visualization](http://demo.nimius.net/debounce_throttle/) for a comparison of `throttle` and `debounce` functions.\n\n> Note:\n>\n> `_.debounce`, `_.throttle` and `raf-schd` provide a `cancel` method to cancel delayed callbacks. You should either call this method from `componentWillUnmount` *or* check to ensure that the component is still mounted within the delayed function.\n\n#### Throttle\n\nThrottling prevents a function from being called more than once in a given window of time. The example below throttles a “click” handler to prevent calling it more than once per second.\n\n``` jsx\nimport throttle from 'lodash.throttle';\n\nclass LoadMoreButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClickThrottled = throttle(this.handleClick, 1000);\n  }\n\n  componentWillUnmount() {\n    this.handleClickThrottled.cancel();\n  }\n\n  render() {\n    return <button onClick={this.handleClickThrottled}>Load More</button>;\n  }\n\n  handleClick() {\n    this.props.loadMore();\n  }\n}\n```\n\n#### Debounce\n\nDebouncing ensures that a function will not be executed until after a certain amount of time has passed since it was last called. This can be useful when you have to perform some expensive calculation in response to an event that might dispatch rapidly (eg scroll or keyboard events). The example below debounces text input with a 250ms delay.\n\n``` jsx\nimport debounce from 'lodash.debounce';\n\nclass Searchbox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.emitChangeDebounced = debounce(this.emitChange, 250);\n  }\n\n  componentWillUnmount() {\n    this.emitChangeDebounced.cancel();\n  }\n\n  render() {\n    return (\n      <input\n        type=\"text\"\n        onChange={this.handleChange}\n        placeholder=\"Search...\"\n        defaultValue={this.props.value}\n      />\n    );\n  }\n\n  handleChange(e) {\n    this.emitChangeDebounced(e.target.value);\n  }\n\n  emitChange(value) {\n    this.props.onChange(value);\n  }\n}\n```\n\n#### `requestAnimationFrame` throttling\n\n[`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) is a way of queuing a function to be executed in the browser at the optimal time for rendering performance. A function that is queued with `requestAnimationFrame` will fire in the next frame. The browser will work hard to ensure that there are 60 frames per second (60 fps). However, if the browser is unable to it will naturally *limit* the amount of frames in a second. For example, a device might only be able to handle 30 fps and so you will only get 30 frames in that second. Using `requestAnimationFrame` for throttling is a useful technique in that it prevents you from doing more than 60 updates in a second. If you are doing 100 updates in a second this creates additional work for the browser that the user will not see anyway.\n\n> **Note:**\n>\n> Using this technique will only capture the last published value in a frame. You can see an example of how this optimization works on [`MDN`](https://developer.mozilla.org/en-US/docs/Web/Events/scroll)\n\n``` jsx\nimport rafSchedule from 'raf-schd';\n\nclass ScrollListener extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleScroll = this.handleScroll.bind(this);\n\n    // Create a new function to schedule updates.\n    this.scheduleUpdate = rafSchedule(\n      point => this.props.onScroll(point)\n    );\n  }\n\n  handleScroll(e) {\n    // When we receive a scroll event, schedule an update.\n    // If we receive many updates within a frame, we'll only publish the latest value.\n    this.scheduleUpdate({ x: e.clientX, y: e.clientY });\n  }\n\n  componentWillUnmount() {\n    // Cancel any pending updates since we're unmounting.\n    this.scheduleUpdate.cancel();\n  }\n\n  render() {\n    return (\n      <div\n        style={{ overflow: 'scroll' }}\n        onScroll={this.handleScroll}\n      >\n        <img src=\"/my-huge-image.jpg\" />\n      </div>\n    );\n  }\n}\n```\n\n#### Testing your rate limiting\n\nWhen testing your rate limiting code works correctly it is helpful to have the ability to fast forward time. If you are using [`jest`](https://facebook.github.io/jest/) then you can use [`mock timers`](https://facebook.github.io/jest/docs/en/timer-mocks.html) to fast forward time. If you are using `requestAnimationFrame` throttling then you may find [`raf-stub`](https://github.com/alexreardon/raf-stub) to be a useful tool to control the ticking of animation frames.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/faq-functions.html](https://reactjs.org/docs/faq-functions.html)"
- name: Portals
  id: portals
  summary: Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component
  description: "# Portals\n\nPortals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n\n``` jsx\nReactDOM.createPortal(child, container)\n```\n\nThe first argument (`child`) is any [renderable React child](react-component#render), such as an element, string, or fragment. The second argument (`container`) is a DOM element.\n\n## Usage\n\nNormally, when you return an element from a component’s render method, it’s mounted into the DOM as a child of the nearest parent node:\n\n``` jsx\nrender() {\n  // React mounts a new div and renders the children into it\n  return (\n    <div>\n      {this.props.children}\n    </div>\n  );\n}\n```\n\nHowever, sometimes it’s useful to insert a child into a different location in the DOM:\n\n``` jsx\nrender() {\n  // React does *not* create a new div. It renders the children into `domNode`.\n  // `domNode` is any valid DOM node, regardless of its location in the DOM.\n  return ReactDOM.createPortal(\n    this.props.children,\n    domNode\n  );\n}\n```\n\nA typical use case for portals is when a parent component has an `overflow: hidden` or `z-index` style, but you need the child to visually “break out” of its container. For example, dialogs, hovercards, and tooltips.\n\n> Note:\n>\n> When working with portals, remember that [managing keyboard focus](accessibility#programmatically-managing-focus) becomes very important.\n>\n> For modal dialogs, ensure that everyone can interact with them by following the [WAI-ARIA Modal Authoring Practices](https://www.w3.org/TR/wai-aria-practices-1.1/#dialog_modal).\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/yzMaBd)\n\n## Event Bubbling Through Portals\n\nEven though a portal can be anywhere in the DOM tree, it behaves like a normal React child in every other way. Features like context work exactly the same regardless of whether the child is a portal, as the portal still exists in the *React tree* regardless of position in the *DOM tree*.\n\nThis includes event bubbling. An event fired from inside a portal will propagate to ancestors in the containing *React tree*, even if those elements are not ancestors in the *DOM tree*. Assuming the following HTML structure:\n\n``` html\n<html>\n  <body>\n    <div id=\"app-root\"></div>\n    <div id=\"modal-root\"></div>\n  </body>\n</html>\n```\n\nA `Parent` component in `#app-root` would be able to catch an uncaught, bubbling event from the sibling node `#modal-root`.\n\n``` jsx\n// These two containers are siblings in the DOM\nconst appRoot = document.getElementById('app-root');\nconst modalRoot = document.getElementById('modal-root');\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    // The portal element is inserted in the DOM tree after\n    // the Modal's children are mounted, meaning that children\n    // will be mounted on a detached DOM node. If a child\n    // component requires to be attached to the DOM tree\n    // immediately when mounted, for example to measure a\n    // DOM node, or uses 'autoFocus' in a descendant, add\n    // state to Modal and only render the children when Modal\n    // is inserted in the DOM tree.\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    return ReactDOM.createPortal(\n      this.props.children,\n      this.el\n    );\n  }\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {clicks: 0};\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    // This will fire when the button in Child is clicked,\n    // updating Parent's state, even though button\n    // is not direct descendant in the DOM.\n    this.setState(state => ({\n      clicks: state.clicks + 1\n    }));\n  }\n\n  render() {\n    return (\n      <div onClick={this.handleClick}>\n        <p>Number of clicks: {this.state.clicks}</p>\n        <p>\n          Open up the browser DevTools\n          to observe that the button\n          is not a child of the div\n          with the onClick handler.\n        </p>\n        <Modal>\n          <Child />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nfunction Child() {\n  // The click event on this button will bubble up to parent,\n  // because there is no 'onClick' attribute defined\n  return (\n    <div className=\"modal\">\n      <button>Click</button>\n    </div>\n  );\n}\n\nconst root = ReactDOM.createRoot(appRoot);\nroot.render(<Parent />);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/jGBWpE)\n\nCatching an event bubbling up from a portal in a parent component allows the development of more flexible abstractions that are not inherently reliant on portals. For example, if you render a `<Modal />` component, the parent can capture its events regardless of whether it’s implemented using portals.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/portals.html](https://reactjs.org/docs/portals.html)"
- name: Profiler API
  id: profiler
  summary: The Profiler measures how often a React application renders and what the “cost” of rendering is
  description: "# Profiler API\n\nThe `Profiler` measures how often a React application renders and what the “cost” of rendering is. Its purpose is to help identify parts of an application that are slow and may benefit from [optimizations such as memoization](hooks-faq#how-to-memoize-calculations).\n\n> Note:\n>\n> Profiling adds some additional overhead, so **it is disabled in [the production build](optimizing-performance#use-the-production-build)**.\n>\n> To opt into production profiling, React provides a special production build with profiling enabled. Read more about how to use this build at [fb.me/react-profiling](https://fb.me/react-profiling)\n\n## Usage\n\nA `Profiler` can be added anywhere in a React tree to measure the cost of rendering that part of the tree. It requires two props: an `id` (string) and an `onRender` callback (function) which React calls any time a component within the tree “commits” an update.\n\nFor example, to profile a `Navigation` component and its descendants:\n\n``` jsx\nrender(\n  <App>\n    <Profiler id=\"Navigation\" onRender={callback}>\n      <Navigation {...props} />\n    </Profiler>\n    <Main {...props} />\n  </App>\n);\n```\n\nMultiple `Profiler` components can be used to measure different parts of an application:\n\n``` jsx\nrender(\n  <App>\n    <Profiler id=\"Navigation\" onRender={callback}>\n      <Navigation {...props} />\n    </Profiler>\n    <Profiler id=\"Main\" onRender={callback}>\n      <Main {...props} />\n    </Profiler>\n  </App>\n);\n```\n\n`Profiler` components can also be nested to measure different components within the same subtree:\n\n``` jsx\nrender(\n  <App>\n    <Profiler id=\"Panel\" onRender={callback}>\n      <Panel {...props}>\n        <Profiler id=\"Content\" onRender={callback}>\n          <Content {...props} />\n        </Profiler>\n        <Profiler id=\"PreviewPane\" onRender={callback}>\n          <PreviewPane {...props} />\n        </Profiler>\n      </Panel>\n    </Profiler>\n  </App>\n);\n```\n\n> Note\n>\n> Although `Profiler` is a light-weight component, it should be used only when necessary; each use adds some CPU and memory overhead to an application.\n\n## `onRender` Callback\n\nThe `Profiler` requires an `onRender` function as a prop. React calls this function any time a component within the profiled tree “commits” an update. It receives parameters describing what was rendered and how long it took.\n\n``` jsx\nfunction onRenderCallback(\n  id, // the \"id\" prop of the Profiler tree that has just committed\n  phase, // either \"mount\" (if the tree just mounted) or \"update\" (if it re-rendered)\n  actualDuration, // time spent rendering the committed update\n  baseDuration, // estimated time to render the entire subtree without memoization\n  startTime, // when React began rendering this update\n  commitTime, // when React committed this update\n  interactions // the Set of interactions belonging to this update\n) {\n  // Aggregate or log render timings...\n}\n```\n\nLet’s take a closer look at each of the props:\n\n- **`id: string`** - The `id` prop of the `Profiler` tree that has just committed. This can be used to identify which part of the tree was committed if you are using multiple profilers.\n- **`phase: \"mount\" | \"update\"`** - Identifies whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or hooks.\n- **`actualDuration: number`** - Time spent rendering the `Profiler` and its descendants for the current update. This indicates how well the subtree makes use of memoization (e.g. [`React.memo`](react-api#reactmemo), [`useMemo`](hooks-reference#usememo), [`shouldComponentUpdate`](hooks-faq#how-do-i-implement-shouldcomponentupdate)). Ideally this value should decrease significantly after the initial mount as many of the descendants will only need to re-render if their specific props change.\n- **`baseDuration: number`** - Duration of the most recent `render` time for each individual component within the `Profiler` tree. This value estimates a worst-case cost of rendering (e.g. the initial mount or a tree with no memoization).\n- **`startTime: number`** - Timestamp when React began rendering the current update.\n- **`commitTime: number`** - Timestamp when React committed the current update. This value is shared between all profilers in a commit, enabling them to be grouped if desirable.\n- **`interactions: Set`** - Set of [“interactions”](https://fb.me/react-interaction-tracing) that were being traced when the update was scheduled (e.g. when `render` or `setState` were called).\n\n> Note\n>\n> Interactions can be used to identify the cause of an update, although the API for tracing them is still experimental.\n>\n> Learn more about it at [fb.me/react-interaction-tracing](https://fb.me/react-interaction-tracing)\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/profiler.html](https://reactjs.org/docs/profiler.html)"
- name: props
  id: glossary#props
  summary: props are inputs to a React component
  belongs_to: Glossary of React Terms
  description: |-
    ### [`props`](components-and-props)

    `props` are inputs to a React component. They are data passed down from a parent component to a child component.

    Remember that `props` are readonly. They should not be modified in any way:

    ``` jsx
    // Wrong!
    props.number = 42;
    ```

    If you need to modify some value in response to user input or a network response, use `state` instead.
- name: props
  id: react-component#props
  summary: this.props contains the props that were defined by the caller of this component
  belongs_to: React.Component
  description: |-
    ### `props`

    `this.props` contains the props that were defined by the caller of this component. See [Components and Props](components-and-props) for an introduction to props.

    In particular, `this.props.children` is a special prop, typically defined by the child tags in the JSX expression rather than in the tag itself.
- name: props.children
  id: glossary#propschildren
  summary: props.children is available on every component
  belongs_to: Glossary of React Terms
  description: |-
    ### `props.children`

    `props.children` is available on every component. It contains the content between the opening and closing tags of a component. For example:

    ``` jsx
    <Welcome>Hello world!</Welcome>
    ```

    The string `Hello world!` is available in `props.children` in the `Welcome` component:

    ``` jsx
    function Welcome(props) {
      return <p>{props.children}</p>;
    }
    ```

    For components defined as classes, use `this.props.children`:

    ``` jsx
    class Welcome extends React.Component {
      render() {
        return <p>{this.props.children}</p>;
      }
    }
    ```
- name: React Top-Level API
  id: react-api
  summary: React is the entry point to the React library
  description: "# React Top-Level API\n\n`React` is the entry point to the React library. If you load React from a `<script>` tag, these top-level APIs are available on the `React` global. If you use ES6 with npm, you can write `import React from 'react'`. If you use ES5 with npm, you can write `var React = require('react')`.\n\n## Overview\n\n### Components\n\nReact components let you split the UI into independent, reusable pieces, and think about each piece in isolation. React components can be defined by subclassing `React.Component` or `React.PureComponent`.\n\n- [`React.Component`](#reactcomponent)\n- [`React.PureComponent`](#reactpurecomponent)\n\nIf you don’t use ES6 classes, you may use the `create-react-class` module instead. See [Using React without ES6](react-without-es6) for more information.\n\nReact components can also be defined as functions which can be wrapped:\n\n- [`React.memo`](#reactmemo)\n\n### Creating React Elements\n\nWe recommend [using JSX](introducing-jsx) to describe what your UI should look like. Each JSX element is just syntactic sugar for calling [`React.createElement()`](#createelement). You will not typically invoke the following methods directly if you are using JSX.\n\n- [`createElement()`](#createelement)\n- [`createFactory()`](#createfactory)\n\nSee [Using React without JSX](react-without-jsx) for more information.\n\n### Transforming Elements\n\n`React` provides several APIs for manipulating elements:\n\n- [`cloneElement()`](#cloneelement)\n- [`isValidElement()`](#isvalidelement)\n- [`React.Children`](#reactchildren)\n\n### Fragments\n\n`React` also provides a component for rendering multiple elements without a wrapper.\n\n- [`React.Fragment`](#reactfragment)\n\n### Refs\n\n- [`React.createRef`](#reactcreateref)\n- [`React.forwardRef`](#reactforwardref)\n\n### Suspense\n\nSuspense lets components “wait” for something before rendering. Today, Suspense only supports one use case: [loading components dynamically with `React.lazy`](code-splitting#reactlazy). In the future, it will support other use cases like data fetching.\n\n- [`React.lazy`](#reactlazy)\n- [`React.Suspense`](#reactsuspense)\n\n### Transitions\n\n*Transitions* are a new concurrent feature introduced in React 18. They allow you to mark updates as transitions, which tells React that they can be interrupted and avoid going back to Suspense fallbacks for already visible content.\n\n- [`React.startTransition`](#starttransition)\n- [`React.useTransition`](hooks-reference#usetransition)\n\n### Hooks\n\n*Hooks* are a new addition in React 16.8. They let you use state and other React features without writing a class. Hooks have a [dedicated docs section](hooks-intro) and a separate API reference:\n\n- [Basic Hooks](hooks-reference#basic-hooks)\n\n  - [`useState`](hooks-reference#usestate)\n  - [`useEffect`](hooks-reference#useeffect)\n  - [`useContext`](hooks-reference#usecontext)\n\n- [Additional Hooks](hooks-reference#additional-hooks)\n\n  - [`useReducer`](hooks-reference#usereducer)\n  - [`useCallback`](hooks-reference#usecallback)\n  - [`useMemo`](hooks-reference#usememo)\n  - [`useRef`](hooks-reference#useref)\n  - [`useImperativeHandle`](hooks-reference#useimperativehandle)\n  - [`useLayoutEffect`](hooks-reference#uselayouteffect)\n  - [`useDebugValue`](hooks-reference#usedebugvalue)\n  - [`useDeferredValue`](hooks-reference#usedeferredvalue)\n  - [`useTransition`](hooks-reference#usetransition)\n  - [`useId`](hooks-reference#useid)\n\n- [Library Hooks](hooks-reference#library-hooks)\n\n  - [`useSyncExternalStore`](hooks-reference#usesyncexternalstore)\n  - [`useInsertionEffect`](hooks-reference#useinsertioneffect)\n\n## Reference\n\n### `React.Component`\n\n`React.Component` is the base class for React components when they are defined using [ES6 classes](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes):\n\n``` jsx\nclass Greeting extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\nSee the [React.Component API Reference](react-component) for a list of methods and properties related to the base `React.Component` class.\n\n### `React.PureComponent`\n\n`React.PureComponent` is similar to [`React.Component`](#reactcomponent). The difference between them is that [`React.Component`](#reactcomponent) doesn’t implement [`shouldComponentUpdate()`](react-component#shouldcomponentupdate), but `React.PureComponent` implements it with a shallow prop and state comparison.\n\nIf your React component’s `render()` function renders the same result given the same props and state, you can use `React.PureComponent` for a performance boost in some cases.\n\n> Note\n>\n> `React.PureComponent`’s `shouldComponentUpdate()` only shallowly compares the objects. If these contain complex data structures, it may produce false-negatives for deeper differences. Only extend `PureComponent` when you expect to have simple props and state, or use [`forceUpdate()`](react-component#forceupdate) when you know deep data structures have changed. Or, consider using [immutable objects](https://immutable-js.com/) to facilitate fast comparisons of nested data.\n>\n> Furthermore, `React.PureComponent`’s `shouldComponentUpdate()` skips prop updates for the whole component subtree. Make sure all the children components are also “pure”.\n\n### `React.memo`\n\n``` jsx\nconst MyComponent = React.memo(function MyComponent(props) {\n  /* render using props */\n});\n```\n\n`React.memo` is a [higher order component](higher-order-components).\n\nIf your component renders the same result given the same props, you can wrap it in a call to `React.memo` for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.\n\n`React.memo` only checks for prop changes. If your function component wrapped in `React.memo` has a [`useState`](hooks-state), [`useReducer`](hooks-reference#usereducer) or [`useContext`](hooks-reference#usecontext) Hook in its implementation, it will still rerender when state or context change.\n\nBy default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can also provide a custom comparison function as the second argument.\n\n``` jsx\nfunction MyComponent(props) {\n  /* render using props */\n}\nfunction areEqual(prevProps, nextProps) {\n  /*\n  return true if passing nextProps to render would return\n  the same result as passing prevProps to render,\n  otherwise return false\n  */\n}\nexport default React.memo(MyComponent, areEqual);\n```\n\nThis method only exists as a **[performance optimization](optimizing-performance).** Do not rely on it to “prevent” a render, as this can lead to bugs.\n\n> Note\n>\n> Unlike the [`shouldComponentUpdate()`](react-component#shouldcomponentupdate) method on class components, the `areEqual` function returns `true` if the props are equal and `false` if the props are not equal. This is the inverse from `shouldComponentUpdate`.\n\n### `createElement()`\n\n``` jsx\nReact.createElement(\n  type,\n  [props],\n  [...children]\n)\n```\n\nCreate and return a new [React element](rendering-elements) of the given type. The type argument can be either a tag name string (such as `'div'` or `'span'`), a [React component](components-and-props) type (a class or a function), or a [React fragment](#reactfragment) type.\n\nCode written with [JSX](introducing-jsx) will be converted to use `React.createElement()`. You will not typically invoke `React.createElement()` directly if you are using JSX. See [React Without JSX](react-without-jsx) to learn more.\n\n### `cloneElement()`\n\n``` text\nReact.cloneElement(\n  element,\n  [config],\n  [...children]\n)\n```\n\nClone and return a new React element using `element` as the starting point. `config` should contain all new props, `key`, or `ref`. The resulting element will have the original element’s props with the new props merged in shallowly. New children will replace existing children. `key` and `ref` from the original element will be preserved if no `key` and `ref` present in the `config`.\n\n`React.cloneElement()` is almost equivalent to:\n\n``` jsx\n<element.type {...element.props} {...props}>{children}</element.type>\n```\n\nHowever, it also preserves `ref`s. This means that if you get a child with a `ref` on it, you won’t accidentally steal it from your ancestor. You will get the same `ref` attached to your new element. The new `ref` or `key` will replace old ones if present.\n\nThis API was introduced as a replacement of the deprecated `React.addons.cloneWithProps()`.\n\n### `createFactory()`\n\n``` jsx\nReact.createFactory(type)\n```\n\nReturn a function that produces React elements of a given type. Like [`React.createElement()`](#createelement), the type argument can be either a tag name string (such as `'div'` or `'span'`), a [React component](components-and-props) type (a class or a function), or a [React fragment](#reactfragment) type.\n\nThis helper is considered legacy, and we encourage you to either use JSX or use `React.createElement()` directly instead.\n\nYou will not typically invoke `React.createFactory()` directly if you are using JSX. See [React Without JSX](react-without-jsx) to learn more.\n\n### `isValidElement()`\n\n``` jsx\nReact.isValidElement(object)\n```\n\nVerifies the object is a React element. Returns `true` or `false`.\n\n### `React.Children`\n\n`React.Children` provides utilities for dealing with the `this.props.children` opaque data structure.\n\n#### `React.Children.map`\n\n``` jsx\nReact.Children.map(children, function[(thisArg)])\n```\n\nInvokes a function on every immediate child contained within `children` with `this` set to `thisArg`. If `children` is an array it will be traversed and the function will be called for each child in the array. If children is `null` or `undefined`, this method will return `null` or `undefined` rather than an array.\n\n> Note\n>\n> If `children` is a `Fragment` it will be treated as a single child and not traversed.\n\n#### `React.Children.forEach`\n\n``` jsx\nReact.Children.forEach(children, function[(thisArg)])\n```\n\nLike [`React.Children.map()`](#reactchildrenmap) but does not return an array.\n\n#### `React.Children.count`\n\n``` jsx\nReact.Children.count(children)\n```\n\nReturns the total number of components in `children`, equal to the number of times that a callback passed to `map` or `forEach` would be invoked.\n\n#### `React.Children.only`\n\n``` jsx\nReact.Children.only(children)\n```\n\nVerifies that `children` has only one child (a React element) and returns it. Otherwise this method throws an error.\n\n> Note:\n>\n> `React.Children.only()` does not accept the return value of [`React.Children.map()`](#reactchildrenmap) because it is an array rather than a React element.\n\n#### `React.Children.toArray`\n\n``` jsx\nReact.Children.toArray(children)\n```\n\nReturns the `children` opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice `this.props.children` before passing it down.\n\n> Note:\n>\n> `React.Children.toArray()` changes keys to preserve the semantics of nested arrays when flattening lists of children. That is, `toArray` prefixes each key in the returned array so that each element’s key is scoped to the input array containing it.\n\n### `React.Fragment`\n\nThe `React.Fragment` component lets you return multiple elements in a `render()` method without creating an additional DOM element:\n\n``` jsx\nrender() {\n  return (\n    <React.Fragment>\n      Some text.\n      <h2>A heading</h2>\n    </React.Fragment>\n  );\n}\n```\n\nYou can also use it with the shorthand `<></>` syntax. For more information, see [React v16.2.0: Improved Support for Fragments](https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html).\n\n### `React.createRef`\n\n`React.createRef` creates a [ref](refs-and-the-dom) that can be attached to React elements via the ref attribute.\n\n``` jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.inputRef = React.createRef();\n  }\n\n  render() {\n    return <input type=\"text\" ref={this.inputRef} />;\n  }\n\n  componentDidMount() {\n    this.inputRef.current.focus();\n  }\n}\n```\n\n### `React.forwardRef`\n\n`React.forwardRef` creates a React component that forwards the [ref](refs-and-the-dom) attribute it receives to another component below in the tree. This technique is not very common but is particularly useful in two scenarios:\n\n- [Forwarding refs to DOM components](forwarding-refs#forwarding-refs-to-dom-components)\n- [Forwarding refs in higher-order-components](forwarding-refs#forwarding-refs-in-higher-order-components)\n\n`React.forwardRef` accepts a rendering function as an argument. React will call this function with `props` and `ref` as two arguments. This function should return a React node.\n\n``` jsx\nconst FancyButton = React.forwardRef((props, ref) => (\n  <button ref={ref} className=\"FancyButton\">\n    {props.children}\n  </button>\n));\n\n// You can now get a ref directly to the DOM button:\nconst ref = React.createRef();\n<FancyButton ref={ref}>Click me!</FancyButton>;\n```\n\nIn the above example, React passes a `ref` given to `<FancyButton ref={ref}>` element as a second argument to the rendering function inside the `React.forwardRef` call. This rendering function passes the `ref` to the `<button ref={ref}>` element.\n\nAs a result, after React attaches the ref, `ref.current` will point directly to the `<button>` DOM element instance.\n\nFor more information, see [forwarding refs](forwarding-refs).\n\n### `React.lazy`\n\n`React.lazy()` lets you define a component that is loaded dynamically. This helps reduce the bundle size to delay loading components that aren’t used during the initial render.\n\nYou can learn how to use it from our [code splitting documentation](code-splitting#reactlazy). You might also want to check out [this article](https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d) explaining how to use it in more detail.\n\n``` jsx\n// This component is loaded dynamically\nconst SomeComponent = React.lazy(() => import('./SomeComponent'));\n```\n\nNote that rendering `lazy` components requires that there’s a `<React.Suspense>` component higher in the rendering tree. This is how you specify a loading indicator.\n\n### `React.Suspense`\n\n`React.Suspense` lets you specify the loading indicator in case some components in the tree below it are not yet ready to render. In the future we plan to let `Suspense` handle more scenarios such as data fetching. You can read about this in [our roadmap](https://reactjs.org/blog/2018/11/27/react-16-roadmap.html).\n\nToday, lazy loading components is the **only** use case supported by `<React.Suspense>`:\n\n``` jsx\n// This component is loaded dynamically\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n\nfunction MyComponent() {\n  return (\n    // Displays <Spinner> until OtherComponent loads\n    <React.Suspense fallback={<Spinner />}>\n      <div>\n        <OtherComponent />\n      </div>\n    </React.Suspense>\n  );\n}\n```\n\nIt is documented in our [code splitting guide](code-splitting#reactlazy). Note that `lazy` components can be deep inside the `Suspense` tree — it doesn’t have to wrap every one of them. The best practice is to place `<Suspense>` where you want to see a loading indicator, but to use `lazy()` wherever you want to do code splitting.\n\n> Note\n>\n> For content that is already shown to the user, switching back to a loading indicator can be disorienting. It is sometimes better to show the “old” UI while the new UI is being prepared. To do this, you can use the new transition APIs [`startTransition`](#starttransition) and [`useTransition`](hooks-reference#usetransition) to mark updates as transitions and avoid unexpected fallbacks.\n\n#### `React.Suspense` in Server Side Rendering\n\nDuring server side rendering Suspense Boundaries allow you to flush your application in smaller chunks by suspending. When a component suspends we schedule a low priority task to render the closest Suspense boundary’s fallback. If the component unsuspends before we flush the fallback then we send down the actual content and throw away the fallback.\n\n#### `React.Suspense` during hydration\n\nSuspense boundaries depend on their parent boundaries being hydrated before they can hydrate, but they can hydrate independently from sibling boundaries. Events on a boundary before its hydrated will cause the boundary to hydrate at a higher priority than neighboring boundaries. [Read more](https://github.com/reactwg/react-18/discussions/130)\n\n### `React.startTransition`\n\n``` jsx\nReact.startTransition(callback)\n```\n\n`React.startTransition` lets you mark updates inside the provided callback as transitions. This method is designed to be used when [`React.useTransition`](hooks-reference#usetransition) is not available.\n\n> Note:\n>\n> Updates in a transition yield to more urgent updates such as clicks.\n>\n> Updates in a transition will not show a fallback for re-suspended content, allowing the user to continue interacting while rendering the update.\n>\n> `React.startTransition` does not provide an `isPending` flag. To track the pending status of a transition see [`React.useTransition`](hooks-reference#usetransition).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-api.html](https://reactjs.org/docs/react-api.html)"
- name: React Without ES6
  id: react-without-es6
  summary: The API of ES6 classes is similar to createReactClass() with a few exceptions
  description: "# React Without ES6\n\nNormally you would define a React component as a plain JavaScript class:\n\n``` jsx\nclass Greeting extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\nIf you don’t use ES6 yet, you may use the `create-react-class` module instead:\n\n``` jsx\nvar createReactClass = require('create-react-class');\nvar Greeting = createReactClass({\n  render: function() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n});\n```\n\nThe API of ES6 classes is similar to `createReactClass()` with a few exceptions.\n\n## Declaring Default Props\n\nWith functions and ES6 classes `defaultProps` is defined as a property on the component itself:\n\n``` jsx\nclass Greeting extends React.Component {\n  // ...\n}\n\nGreeting.defaultProps = {\n  name: 'Mary'\n};\n```\n\nWith `createReactClass()`, you need to define `getDefaultProps()` as a function on the passed object:\n\n``` jsx\nvar Greeting = createReactClass({\n  getDefaultProps: function() {\n    return {\n      name: 'Mary'\n    };\n  },\n\n  // ...\n\n});\n```\n\n## Setting the Initial State\n\nIn ES6 classes, you can define the initial state by assigning `this.state` in the constructor:\n\n``` jsx\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: props.initialCount};\n  }\n  // ...\n}\n```\n\nWith `createReactClass()`, you have to provide a separate `getInitialState` method that returns the initial state:\n\n``` jsx\nvar Counter = createReactClass({\n  getInitialState: function() {\n    return {count: this.props.initialCount};\n  },\n  // ...\n});\n```\n\n## Autobinding\n\nIn React components declared as ES6 classes, methods follow the same semantics as regular ES6 classes. This means that they don’t automatically bind `this` to the instance. You’ll have to explicitly use `.bind(this)` in the constructor:\n\n``` jsx\nclass SayHello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {message: 'Hello!'};\n    // This line is important!\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    alert(this.state.message);\n  }\n\n  render() {\n    // Because `this.handleClick` is bound, we can use it as an event handler.\n    return (\n      <button onClick={this.handleClick}>\n        Say hello\n      </button>\n    );\n  }\n}\n```\n\nWith `createReactClass()`, this is not necessary because it binds all methods:\n\n``` jsx\nvar SayHello = createReactClass({\n  getInitialState: function() {\n    return {message: 'Hello!'};\n  },\n\n  handleClick: function() {\n    alert(this.state.message);\n  },\n\n  render: function() {\n    return (\n      <button onClick={this.handleClick}>\n        Say hello\n      </button>\n    );\n  }\n});\n```\n\nThis means writing ES6 classes comes with a little more boilerplate code for event handlers, but the upside is slightly better performance in large applications.\n\nIf the boilerplate code is too unattractive to you, you may use [ES2022 Class Properties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_instance_fields) syntax:\n\n``` jsx\nclass SayHello extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {message: 'Hello!'};\n  }\n  \n  // Using an arrow here binds the method:\n  handleClick = () => {\n    alert(this.state.message);\n  };\n\n  render() {\n    return (\n      <button onClick={this.handleClick}>\n        Say hello\n      </button>\n    );\n  }\n}\n```\n\nYou also have a few other options:\n\n- Bind methods in the constructor.\n- Use arrow functions, e.g. `onClick={(e) => this.handleClick(e)}`.\n- Keep using `createReactClass`.\n\n## Mixins\n\n> **Note:**\n>\n> ES6 launched without any mixin support. Therefore, there is no support for mixins when you use React with ES6 classes.\n>\n> **We also found numerous issues in codebases using mixins, [and don’t recommend using them in the new code](https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html).**\n>\n> This section exists only for the reference.\n\nSometimes very different components may share some common functionality. These are sometimes called [cross-cutting concerns](https://en.wikipedia.org/wiki/Cross-cutting_concern). `createReactClass` lets you use a legacy `mixins` system for that.\n\nOne common use case is a component wanting to update itself on a time interval. It’s easy to use `setInterval()`, but it’s important to cancel your interval when you don’t need it anymore to save memory. React provides [lifecycle methods](react-component#the-component-lifecycle) that let you know when a component is about to be created or destroyed. Let’s create a simple mixin that uses these methods to provide an easy `setInterval()` function that will automatically get cleaned up when your component is destroyed.\n\n``` jsx\nvar SetIntervalMixin = {\n  componentWillMount: function() {\n    this.intervals = [];\n  },\n  setInterval: function() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n  componentWillUnmount: function() {\n    this.intervals.forEach(clearInterval);\n  }\n};\n\nvar createReactClass = require('create-react-class');\n\nvar TickTock = createReactClass({\n  mixins: [SetIntervalMixin], // Use the mixin\n  getInitialState: function() {\n    return {seconds: 0};\n  },\n  componentDidMount: function() {\n    this.setInterval(this.tick, 1000); // Call a method on the mixin\n  },\n  tick: function() {\n    this.setState({seconds: this.state.seconds + 1});\n  },\n  render: function() {\n    return (\n      <p>\n        React has been running for {this.state.seconds} seconds.\n      </p>\n    );\n  }\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('example'));\nroot.render(<TickTock />);\n```\n\nIf a component is using multiple mixins and several mixins define the same lifecycle method (i.e. several mixins want to do some cleanup when the component is destroyed), all of the lifecycle methods are guaranteed to be called. Methods defined on mixins run in the order mixins were listed, followed by a method call on the component.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-without-es6.html](https://reactjs.org/docs/react-without-es6.html)"
- name: React Without JSX
  id: react-without-jsx
  summary: JSX is not a requirement for using React
  description: "# React Without JSX\n\nJSX is not a requirement for using React. Using React without JSX is especially convenient when you don’t want to set up compilation in your build environment.\n\nEach JSX element is just syntactic sugar for calling `React.createElement(component, props, ...children)`. So, anything you can do with JSX can also be done with just plain JavaScript.\n\nFor example, this code written with JSX:\n\n``` jsx\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.toWhat}</div>;\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Hello toWhat=\"World\" />);\n```\n\ncan be compiled to this code that does not use JSX:\n\n``` jsx\nclass Hello extends React.Component {\n  render() {\n    return React.createElement('div', null, `Hello ${this.props.toWhat}`);\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(React.createElement(Hello, {toWhat: 'World'}, null));\n```\n\nIf you’re curious to see more examples of how JSX is converted to JavaScript, you can try out [the online Babel compiler](https://babeljs.io/repl/#?presets=react&code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA).\n\nThe component can either be provided as a string, as a subclass of `React.Component`, or a plain function.\n\nIf you get tired of typing `React.createElement` so much, one common pattern is to assign a shorthand:\n\n``` jsx\nconst e = React.createElement;\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(e('div', null, 'Hello World'));\n```\n\nIf you use this shorthand form for `React.createElement`, it can be almost as convenient to use React without JSX.\n\nAlternatively, you can refer to community projects such as [`react-hyperscript`](https://github.com/mlmorg/react-hyperscript) and [`hyperscript-helpers`](https://github.com/ohanhi/hyperscript-helpers) which offer a terser syntax.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-without-jsx.html](https://reactjs.org/docs/react-without-jsx.html)"
- name: React.Children
  id: react-api#reactchildren
  summary: React.Children provides utilities for dealing with the this.props.children opaque data structure
  belongs_to: React Top-Level API
  description: |-
    ### `React.Children`

    `React.Children` provides utilities for dealing with the `this.props.children` opaque data structure.
- name: React.Children.count
  id: react-api#reactchildrencount
  summary: Returns the total number of components in children, equal to the number of times that a callback passed to map or forEach would be invoked
  belongs_to: React Top-Level API
  description: |-
    #### `React.Children.count`

    ``` jsx
    React.Children.count(children)
    ```

    Returns the total number of components in `children`, equal to the number of times that a callback passed to `map` or `forEach` would be invoked.
- name: React.Children.forEach
  id: react-api#reactchildrenforeach
  summary: Like React.Children.map() but does not return an array
  belongs_to: React Top-Level API
  description: |-
    #### `React.Children.forEach`

    ``` jsx
    React.Children.forEach(children, function[(thisArg)])
    ```

    Like [`React.Children.map()`](#reactchildrenmap) but does not return an array.
- name: React.Children.map
  id: react-api#reactchildrenmap
  summary: Invokes a function on every immediate child contained within children with this set to thisArg
  belongs_to: React Top-Level API
  description: |-
    #### `React.Children.map`

    ``` jsx
    React.Children.map(children, function[(thisArg)])
    ```

    Invokes a function on every immediate child contained within `children` with `this` set to `thisArg`. If `children` is an array it will be traversed and the function will be called for each child in the array. If children is `null` or `undefined`, this method will return `null` or `undefined` rather than an array.

    > Note
    >
    > If `children` is a `Fragment` it will be treated as a single child and not traversed.
- name: React.Children.only
  id: react-api#reactchildrenonly
  summary: Verifies that children has only one child (a React element) and returns it
  belongs_to: React Top-Level API
  description: |-
    #### `React.Children.only`

    ``` jsx
    React.Children.only(children)
    ```

    Verifies that `children` has only one child (a React element) and returns it. Otherwise this method throws an error.

    > Note:
    >
    > `React.Children.only()` does not accept the return value of [`React.Children.map()`](#reactchildrenmap) because it is an array rather than a React element.
- name: React.Children.toArray
  id: react-api#reactchildrentoarray
  summary: Returns the children opaque data structure as a flat array with keys assigned to each child
  belongs_to: React Top-Level API
  description: |-
    #### `React.Children.toArray`

    ``` jsx
    React.Children.toArray(children)
    ```

    Returns the `children` opaque data structure as a flat array with keys assigned to each child. Useful if you want to manipulate collections of children in your render methods, especially if you want to reorder or slice `this.props.children` before passing it down.

    > Note:
    >
    > `React.Children.toArray()` changes keys to preserve the semantics of nested arrays when flattening lists of children. That is, `toArray` prefixes each key in the returned array so that each element’s key is scoped to the input array containing it.
- name: React.Component
  id: react-api#reactcomponent
  summary: See the React.Component API Reference for a list of methods and properties related to the base React.Component class
  belongs_to: React Top-Level API
  description: |-
    ### `React.Component`

    `React.Component` is the base class for React components when they are defined using [ES6 classes](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes):

    ``` jsx
    class Greeting extends React.Component {
      render() {
        return <h1>Hello, {this.props.name}</h1>;
      }
    }
    ```

    See the [React.Component API Reference](react-component) for a list of methods and properties related to the base `React.Component` class.
- name: React.Component
  id: react-component
  summary: This page contains a detailed API reference for the React component class definition
  description: "# React.Component\n\nThis page contains a detailed API reference for the React component class definition. It assumes you’re familiar with fundamental React concepts, such as [Components and Props](components-and-props), as well as [State and Lifecycle](state-and-lifecycle). If you’re not, read them first.\n\n## Overview\n\nReact lets you define components as classes or functions. Components defined as classes currently provide more features which are described in detail on this page. To define a React component class, you need to extend `React.Component`:\n\n``` jsx\nclass Welcome extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n```\n\nThe only method you *must* define in a `React.Component` subclass is called [`render()`](#render). All the other methods described on this page are optional.\n\n**We strongly recommend against creating your own base component classes.** In React components, [code reuse is primarily achieved through composition rather than inheritance](composition-vs-inheritance).\n\n> Note:\n>\n> React doesn’t force you to use the ES6 class syntax. If you prefer to avoid it, you may use the `create-react-class` module or a similar custom abstraction instead. Take a look at [Using React without ES6](react-without-es6) to learn more.\n\n### The Component Lifecycle\n\nEach component has several “lifecycle methods” that you can override to run code at particular times in the process. **You can use [this lifecycle diagram](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/) as a cheat sheet.** In the list below, commonly used lifecycle methods are marked as **bold**. The rest of them exist for relatively rare use cases.\n\n#### Mounting\n\nThese methods are called in the following order when an instance of a component is being created and inserted into the DOM:\n\n- [**`constructor()`**](#constructor)\n- [`static getDerivedStateFromProps()`](#static-getderivedstatefromprops)\n- [**`render()`**](#render)\n- [**`componentDidMount()`**](#componentdidmount)\n\n> Note:\n>\n> This method is considered legacy and you should [avoid it](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) in new code:\n>\n> - [`UNSAFE_componentWillMount()`](#unsafe_componentwillmount)\n\n#### Updating\n\nAn update can be caused by changes to props or state. These methods are called in the following order when a component is being re-rendered:\n\n- [`static getDerivedStateFromProps()`](#static-getderivedstatefromprops)\n- [`shouldComponentUpdate()`](#shouldcomponentupdate)\n- [**`render()`**](#render)\n- [`getSnapshotBeforeUpdate()`](#getsnapshotbeforeupdate)\n- [**`componentDidUpdate()`**](#componentdidupdate)\n\n> Note:\n>\n> These methods are considered legacy and you should [avoid them](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) in new code:\n>\n> - [`UNSAFE_componentWillUpdate()`](#unsafe_componentwillupdate)\n> - [`UNSAFE_componentWillReceiveProps()`](#unsafe_componentwillreceiveprops)\n\n#### Unmounting\n\nThis method is called when a component is being removed from the DOM:\n\n- [**`componentWillUnmount()`**](#componentwillunmount)\n\n#### Error Handling\n\nThese methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.\n\n- [`static getDerivedStateFromError()`](#static-getderivedstatefromerror)\n- [`componentDidCatch()`](#componentdidcatch)\n\n### Other APIs\n\nEach component also provides some other APIs:\n\n- [`setState()`](#setstate)\n- [`forceUpdate()`](#forceupdate)\n\n### Class Properties\n\n- [`defaultProps`](#defaultprops)\n- [`displayName`](#displayname)\n\n### Instance Properties\n\n- [`props`](#props)\n- [`state`](#state)\n\n## Reference\n\n### Commonly Used Lifecycle Methods\n\nThe methods in this section cover the vast majority of use cases you’ll encounter creating React components. **For a visual reference, check out [this lifecycle diagram](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/).**\n\n### `render()`\n\n``` jsx\nrender()\n```\n\nThe `render()` method is the only required method in a class component.\n\nWhen called, it should examine `this.props` and `this.state` and return one of the following types:\n\n- **React elements.** Typically created via [JSX](introducing-jsx). For example, `<div />` and `<MyComponent />` are React elements that instruct React to render a DOM node, or another user-defined component, respectively.\n- **Arrays and fragments.** Let you return multiple elements from render. See the documentation on [fragments](fragments) for more details.\n- **Portals**. Let you render children into a different DOM subtree. See the documentation on [portals](portals) for more details.\n- **String and numbers.** These are rendered as text nodes in the DOM.\n- **Booleans or `null`**. Render nothing. (Mostly exists to support `return test && <Child />` pattern, where `test` is boolean.)\n\nThe `render()` function should be pure, meaning that it does not modify component state, it returns the same result each time it’s invoked, and it does not directly interact with the browser.\n\nIf you need to interact with the browser, perform your work in `componentDidMount()` or the other lifecycle methods instead. Keeping `render()` pure makes components easier to think about.\n\n> Note\n>\n> `render()` will not be invoked if [`shouldComponentUpdate()`](#shouldcomponentupdate) returns false.\n\n### `constructor()`\n\n``` jsx\nconstructor(props)\n```\n\n**If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.**\n\nThe constructor for a React component is called before it is mounted. When implementing the constructor for a `React.Component` subclass, you should call `super(props)` before any other statement. Otherwise, `this.props` will be undefined in the constructor, which can lead to bugs.\n\nTypically, in React constructors are only used for two purposes:\n\n- Initializing [local state](state-and-lifecycle) by assigning an object to `this.state`.\n- Binding [event handler](handling-events) methods to an instance.\n\nYou **should not call `setState()`** in the `constructor()`. Instead, if your component needs to use local state, **assign the initial state to `this.state`** directly in the constructor:\n\n``` jsx\nconstructor(props) {\n  super(props);\n  // Don't call this.setState() here!\n  this.state = { counter: 0 };\n  this.handleClick = this.handleClick.bind(this);\n}\n```\n\nConstructor is the only place where you should assign `this.state` directly. In all other methods, you need to use `this.setState()` instead.\n\nAvoid introducing any side-effects or subscriptions in the constructor. For those use cases, use `componentDidMount()` instead.\n\n> Note\n>\n> **Avoid copying props into state! This is a common mistake:**\n>\n> ``` jsx\n> constructor(props) {\n>  super(props);\n>  // Don't do this!\n>  this.state = { color: props.color };\n> }\n> ```\n>\n> The problem is that it’s both unnecessary (you can use `this.props.color` directly instead), and creates bugs (updates to the `color` prop won’t be reflected in the state).\n>\n> **Only use this pattern if you intentionally want to ignore prop updates.** In that case, it makes sense to rename the prop to be called `initialColor` or `defaultColor`. You can then force a component to “reset” its internal state by [changing its `key`](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key) when necessary.\n>\n> Read our [blog post on avoiding derived state](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html) to learn about what to do if you think you need some state to depend on the props.\n\n### `componentDidMount()`\n\n``` jsx\ncomponentDidMount()\n```\n\n`componentDidMount()` is invoked immediately after a component is mounted (inserted into the tree). Initialization that requires DOM nodes should go here. If you need to load data from a remote endpoint, this is a good place to instantiate the network request.\n\nThis method is a good place to set up any subscriptions. If you do that, don’t forget to unsubscribe in `componentWillUnmount()`.\n\nYou **may call `setState()` immediately** in `componentDidMount()`. It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though the `render()` will be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. In most cases, you should be able to assign the initial state in the `constructor()` instead. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position.\n\n### `componentDidUpdate()`\n\n``` jsx\ncomponentDidUpdate(prevProps, prevState, snapshot)\n```\n\n`componentDidUpdate()` is invoked immediately after updating occurs. This method is not called for the initial render.\n\nUse this as an opportunity to operate on the DOM when the component has been updated. This is also a good place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed).\n\n``` jsx\ncomponentDidUpdate(prevProps) {\n  // Typical usage (don't forget to compare props):\n  if (this.props.userID !== prevProps.userID) {\n    this.fetchData(this.props.userID);\n  }\n}\n```\n\nYou **may call `setState()` immediately** in `componentDidUpdate()` but note that **it must be wrapped in a condition** like in the example above, or you’ll cause an infinite loop. It would also cause an extra re-rendering which, while not visible to the user, can affect the component performance. If you’re trying to “mirror” some state to a prop coming from above, consider using the prop directly instead. Read more about [why copying props into state causes bugs](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html).\n\nIf your component implements the `getSnapshotBeforeUpdate()` lifecycle (which is rare), the value it returns will be passed as a third “snapshot” parameter to `componentDidUpdate()`. Otherwise this parameter will be undefined.\n\n> Note\n>\n> `componentDidUpdate()` will not be invoked if [`shouldComponentUpdate()`](#shouldcomponentupdate) returns false.\n\n### `componentWillUnmount()`\n\n``` jsx\ncomponentWillUnmount()\n```\n\n`componentWillUnmount()` is invoked immediately before a component is unmounted and destroyed. Perform any necessary cleanup in this method, such as invalidating timers, canceling network requests, or cleaning up any subscriptions that were created in `componentDidMount()`.\n\nYou **should not call `setState()`** in `componentWillUnmount()` because the component will never be re-rendered. Once a component instance is unmounted, it will never be mounted again.\n\n### Rarely Used Lifecycle Methods\n\nThe methods in this section correspond to uncommon use cases. They’re handy once in a while, but most of your components probably don’t need any of them. **You can see most of the methods below on [this lifecycle diagram](https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/) if you click the “Show less common lifecycles” checkbox at the top of it.**\n\n### `shouldComponentUpdate()`\n\n``` jsx\nshouldComponentUpdate(nextProps, nextState)\n```\n\nUse `shouldComponentUpdate()` to let React know if a component’s output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.\n\n`shouldComponentUpdate()` is invoked before rendering when new props or state are being received. Defaults to `true`. This method is not called for the initial render or when `forceUpdate()` is used.\n\nThis method only exists as a **[performance optimization](optimizing-performance).** Do not rely on it to “prevent” a rendering, as this can lead to bugs. **Consider using the built-in [`PureComponent`](react-api#reactpurecomponent)** instead of writing `shouldComponentUpdate()` by hand. `PureComponent` performs a shallow comparison of props and state, and reduces the chance that you’ll skip a necessary update.\n\nIf you are confident you want to write it by hand, you may compare `this.props` with `nextProps` and `this.state` with `nextState` and return `false` to tell React the update can be skipped. Note that returning `false` does not prevent child components from re-rendering when *their* state changes.\n\nWe do not recommend doing deep equality checks or using `JSON.stringify()` in `shouldComponentUpdate()`. It is very inefficient and will harm performance.\n\nCurrently, if `shouldComponentUpdate()` returns `false`, then [`UNSAFE_componentWillUpdate()`](#unsafe_componentwillupdate), [`render()`](#render), and [`componentDidUpdate()`](#componentdidupdate) will not be invoked. In the future React may treat `shouldComponentUpdate()` as a hint rather than a strict directive, and returning `false` may still result in a re-rendering of the component.\n\n### `static getDerivedStateFromProps()`\n\n``` jsx\nstatic getDerivedStateFromProps(props, state)\n```\n\n`getDerivedStateFromProps` is invoked right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or `null` to update nothing.\n\nThis method exists for [rare use cases](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state) where the state depends on changes in props over time. For example, it might be handy for implementing a `<Transition>` component that compares its previous and next children to decide which of them to animate in and out.\n\nDeriving state leads to verbose code and makes your components difficult to think about. [Make sure you’re familiar with simpler alternatives:](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html)\n\n- If you need to **perform a side effect** (for example, data fetching or an animation) in response to a change in props, use [`componentDidUpdate`](#componentdidupdate) lifecycle instead.\n- If you want to **re-compute some data only when a prop changes**, [use a memoization helper instead](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization).\n- If you want to **“reset” some state when a prop changes**, consider either making a component [fully controlled](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component) or [fully uncontrolled with a `key`](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key) instead.\n\nThis method doesn’t have access to the component instance. If you’d like, you can reuse some code between `getDerivedStateFromProps()` and the other class methods by extracting pure functions of the component props and state outside the class definition.\n\nNote that this method is fired on *every* render, regardless of the cause. This is in contrast to `UNSAFE_componentWillReceiveProps`, which only fires when the parent causes a re-render and not as a result of a local `setState`.\n\n### `getSnapshotBeforeUpdate()`\n\n``` jsx\ngetSnapshotBeforeUpdate(prevProps, prevState)\n```\n\n`getSnapshotBeforeUpdate()` is invoked right before the most recently rendered output is committed to e.g. the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed. Any value returned by this lifecycle method will be passed as a parameter to `componentDidUpdate()`.\n\nThis use case is not common, but it may occur in UIs like a chat thread that need to handle scroll position in a special way.\n\nA snapshot value (or `null`) should be returned.\n\nFor example:\n\n``` jsx\nclass ScrollingList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.listRef = React.createRef();\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // Are we adding new items to the list?\n    // Capture the scroll position so we can adjust scroll later.\n    if (prevProps.list.length < this.props.list.length) {\n      const list = this.listRef.current;\n      return list.scrollHeight - list.scrollTop;\n    }\n    return null;\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // If we have a snapshot value, we've just added new items.\n    // Adjust scroll so these new items don't push the old ones out of view.\n    // (snapshot here is the value returned from getSnapshotBeforeUpdate)\n    if (snapshot !== null) {\n      const list = this.listRef.current;\n      list.scrollTop = list.scrollHeight - snapshot;\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.listRef}>{/* ...contents... */}</div>\n    );\n  }\n}\n```\n\nIn the above examples, it is important to read the `scrollHeight` property in `getSnapshotBeforeUpdate` because there may be delays between “render” phase lifecycles (like `render`) and “commit” phase lifecycles (like `getSnapshotBeforeUpdate` and `componentDidUpdate`).\n\n### Error boundaries\n\n[Error boundaries](error-boundaries) are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.\n\nA class component becomes an error boundary if it defines either (or both) of the lifecycle methods `static getDerivedStateFromError()` or `componentDidCatch()`. Updating state from these lifecycles lets you capture an unhandled JavaScript error in the below tree and display a fallback UI.\n\nOnly use error boundaries for recovering from unexpected exceptions; **don’t try to use them for control flow.**\n\nFor more details, see [*Error Handling in React 16*](https://reactjs.org/blog/2017/07/26/error-handling-in-react-16.html).\n\n> Note\n>\n> Error boundaries only catch errors in the components **below** them in the tree. An error boundary can’t catch an error within itself.\n\n### `static getDerivedStateFromError()`\n\n``` jsx\nstatic getDerivedStateFromError(error)\n```\n\nThis lifecycle is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.\n\n``` jsx\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n```\n\n> Note\n>\n> `getDerivedStateFromError()` is called during the “render” phase, so side-effects are not permitted. For those use cases, use `componentDidCatch()` instead.\n\n### `componentDidCatch()`\n\n``` jsx\ncomponentDidCatch(error, info)\n```\n\nThis lifecycle is invoked after an error has been thrown by a descendant component. It receives two parameters:\n\n1.  `error` - The error that was thrown.\n2.  `info` - An object with a `componentStack` key containing [information about which component threw the error](error-boundaries#component-stack-traces).\n\n`componentDidCatch()` is called during the “commit” phase, so side-effects are permitted. It should be used for things like logging errors:\n\n``` jsx\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // Example \"componentStack\":\n    //   in ComponentThatThrows (created by App)\n    //   in ErrorBoundary (created by App)\n    //   in div (created by App)\n    //   in App\n    logComponentStackToMyService(info.componentStack);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n```\n\nProduction and development builds of React slightly differ in the way `componentDidCatch()` handles errors.\n\nOn development, the errors will bubble up to `window`, this means that any `window.onerror` or `window.addEventListener('error', callback)` will intercept the errors that have been caught by `componentDidCatch()`.\n\nOn production, instead, the errors will not bubble up, which means any ancestor error handler will only receive errors not explicitly caught by `componentDidCatch()`.\n\n> Note\n>\n> In the event of an error, you can render a fallback UI with `componentDidCatch()` by calling `setState`, but this will be deprecated in a future release. Use `static getDerivedStateFromError()` to handle fallback rendering instead.\n\n### Legacy Lifecycle Methods\n\nThe lifecycle methods below are marked as “legacy”. They still work, but we don’t recommend using them in the new code. You can learn more about migrating away from legacy lifecycle methods in [this blog post](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html).\n\n### `UNSAFE_componentWillMount()`\n\n``` jsx\nUNSAFE_componentWillMount()\n```\n\n> Note\n>\n> This lifecycle was previously named `componentWillMount`. That name will continue to work until version 17. Use the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.\n\n`UNSAFE_componentWillMount()` is invoked just before mounting occurs. It is called before `render()`, therefore calling `setState()` synchronously in this method will not trigger an extra rendering. Generally, we recommend using the `constructor()` instead for initializing state.\n\nAvoid introducing any side-effects or subscriptions in this method. For those use cases, use `componentDidMount()` instead.\n\nThis is the only lifecycle method called on server rendering.\n\n### `UNSAFE_componentWillReceiveProps()`\n\n``` jsx\nUNSAFE_componentWillReceiveProps(nextProps)\n```\n\n> Note\n>\n> This lifecycle was previously named `componentWillReceiveProps`. That name will continue to work until version 17. Use the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.\n\n> Note:\n>\n> Using this lifecycle method often leads to bugs and inconsistencies\n>\n> - If you need to **perform a side effect** (for example, data fetching or an animation) in response to a change in props, use [`componentDidUpdate`](#componentdidupdate) lifecycle instead.\n> - If you used `componentWillReceiveProps` for **re-computing some data only when a prop changes**, [use a memoization helper instead](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization).\n> - If you used `componentWillReceiveProps` to **“reset” some state when a prop changes**, consider either making a component [fully controlled](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component) or [fully uncontrolled with a `key`](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key) instead.\n>\n> For other use cases, [follow the recommendations in this blog post about derived state](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html).\n\n`UNSAFE_componentWillReceiveProps()` is invoked before a mounted component receives new props. If you need to update the state in response to prop changes (for example, to reset it), you may compare `this.props` and `nextProps` and perform state transitions using `this.setState()` in this method.\n\nNote that if a parent component causes your component to re-render, this method will be called even if props have not changed. Make sure to compare the current and next values if you only want to handle changes.\n\nReact doesn’t call `UNSAFE_componentWillReceiveProps()` with initial props during [mounting](#mounting). It only calls this method if some of component’s props may update. Calling `this.setState()` generally doesn’t trigger `UNSAFE_componentWillReceiveProps()`.\n\n### `UNSAFE_componentWillUpdate()`\n\n``` jsx\nUNSAFE_componentWillUpdate(nextProps, nextState)\n```\n\n> Note\n>\n> This lifecycle was previously named `componentWillUpdate`. That name will continue to work until version 17. Use the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.\n\n`UNSAFE_componentWillUpdate()` is invoked just before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.\n\nNote that you cannot call `this.setState()` here; nor should you do anything else (e.g. dispatch a Redux action) that would trigger an update to a React component before `UNSAFE_componentWillUpdate()` returns.\n\nTypically, this method can be replaced by `componentDidUpdate()`. If you were reading from the DOM in this method (e.g. to save a scroll position), you can move that logic to `getSnapshotBeforeUpdate()`.\n\n> Note\n>\n> `UNSAFE_componentWillUpdate()` will not be invoked if [`shouldComponentUpdate()`](#shouldcomponentupdate) returns false.\n\n## Other APIs\n\nUnlike the lifecycle methods above (which React calls for you), the methods below are the methods *you* can call from your components.\n\nThere are just two of them: `setState()` and `forceUpdate()`.\n\n### `setState()`\n\n``` jsx\nsetState(updater[, callback])\n```\n\n`setState()` enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.\n\nThink of `setState()` as a *request* rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. In the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in [`flushSync`](react-dom#flushsync), but this may hurt performance.\n\n`setState()` does not always immediately update the component. It may batch or defer the update until later. This makes reading `this.state` right after calling `setState()` a potential pitfall. Instead, use `componentDidUpdate` or a `setState` callback (`setState(updater, callback)`), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the `updater` argument below.\n\n`setState()` will always lead to a re-render unless `shouldComponentUpdate()` returns `false`. If mutable objects are being used and conditional rendering logic cannot be implemented in `shouldComponentUpdate()`, calling `setState()` only when the new state differs from the previous state will avoid unnecessary re-renders.\n\nThe first argument is an `updater` function with the signature:\n\n``` jsx\n(state, props) => stateChange\n```\n\n`state` is a reference to the component state at the time the change is being applied. It should not be directly mutated. Instead, changes should be represented by building a new object based on the input from `state` and `props`. For instance, suppose we wanted to increment a value in state by `props.step`:\n\n``` jsx\nthis.setState((state, props) => {\n  return {counter: state.counter + props.step};\n});\n```\n\nBoth `state` and `props` received by the updater function are guaranteed to be up-to-date. The output of the updater is shallowly merged with `state`.\n\nThe second parameter to `setState()` is an optional callback function that will be executed once `setState` is completed and the component is re-rendered. Generally we recommend using `componentDidUpdate()` for such logic instead.\n\nYou may optionally pass an object as the first argument to `setState()` instead of a function:\n\n``` jsx\nsetState(stateChange[, callback])\n```\n\nThis performs a shallow merge of `stateChange` into the new state, e.g., to adjust a shopping cart item quantity:\n\n``` jsx\nthis.setState({quantity: 2})\n```\n\nThis form of `setState()` is also asynchronous, and multiple calls during the same cycle may be batched together. For example, if you attempt to increment an item quantity more than once in the same cycle, that will result in the equivalent of:\n\n``` javascript\nObject.assign(\n  previousState,\n  {quantity: state.quantity + 1},\n  {quantity: state.quantity + 1},\n  ...\n)\n```\n\nSubsequent calls will override values from previous calls in the same cycle, so the quantity will only be incremented once. If the next state depends on the current state, we recommend using the updater function form, instead:\n\n``` jsx\nthis.setState((state) => {\n  return {quantity: state.quantity + 1};\n});\n```\n\nFor more detail, see:\n\n- [State and Lifecycle guide](state-and-lifecycle)\n- [In depth: When and why are `setState()` calls batched?](https://stackoverflow.com/a/48610973/458193)\n- [In depth: Why isn’t `this.state` updated immediately?](https://github.com/facebook/react/issues/11527#issuecomment-360199710)\n\n### `forceUpdate()`\n\n``` jsx\ncomponent.forceUpdate(callback)\n```\n\nBy default, when your component’s state or props change, your component will re-render. If your `render()` method depends on some other data, you can tell React that the component needs re-rendering by calling `forceUpdate()`.\n\nCalling `forceUpdate()` will cause `render()` to be called on the component, skipping `shouldComponentUpdate()`. This will trigger the normal lifecycle methods for child components, including the `shouldComponentUpdate()` method of each child. React will still only update the DOM if the markup changes.\n\nNormally you should try to avoid all uses of `forceUpdate()` and only read from `this.props` and `this.state` in `render()`.\n\n## Class Properties\n\n### `defaultProps`\n\n`defaultProps` can be defined as a property on the component class itself, to set the default props for the class. This is used for `undefined` props, but not for `null` props. For example:\n\n``` jsx\nclass CustomButton extends React.Component {\n  // ...\n}\n\nCustomButton.defaultProps = {\n  color: 'blue'\n};\n```\n\nIf `props.color` is not provided, it will be set by default to `'blue'`:\n\n``` jsx\n  render() {\n    return <CustomButton /> ; // props.color will be set to blue\n  }\n```\n\nIf `props.color` is set to `null`, it will remain `null`:\n\n``` jsx\n  render() {\n    return <CustomButton color={null} /> ; // props.color will remain null\n  }\n```\n\n### `displayName`\n\nThe `displayName` string is used in debugging messages. Usually, you don’t need to set it explicitly because it’s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component, see [Wrap the Display Name for Easy Debugging](higher-order-components#convention-wrap-the-display-name-for-easy-debugging) for details.\n\n## Instance Properties\n\n### `props`\n\n`this.props` contains the props that were defined by the caller of this component. See [Components and Props](components-and-props) for an introduction to props.\n\nIn particular, `this.props.children` is a special prop, typically defined by the child tags in the JSX expression rather than in the tag itself.\n\n### `state`\n\nThe state contains data specific to this component that may change over time. The state is user-defined, and it should be a plain JavaScript object.\n\nIf some value isn’t used for rendering or data flow (for example, a timer ID), you don’t have to put it in the state. Such values can be defined as fields on the component instance.\n\nSee [State and Lifecycle](state-and-lifecycle) for more information about the state.\n\nNever mutate `this.state` directly, as calling `setState()` afterwards may replace the mutation you made. Treat `this.state` as if it were immutable.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-component.html](https://reactjs.org/docs/react-component.html)"
- name: React.createContext
  id: context#reactcreatecontext
  summary: Creates a Context object
  belongs_to: Context
  description: |-
    ### `React.createContext`

    ``` jsx
    const MyContext = React.createContext(defaultValue);
    ```

    Creates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching `Provider` above it in the tree.

    The `defaultValue` argument is **only** used when a component does not have a matching Provider above it in the tree. This default value can be helpful for testing components in isolation without wrapping them. Note: passing `undefined` as a Provider value does not cause consuming components to use `defaultValue`.
- name: React.createRef
  id: react-api#reactcreateref
  summary: React.createRef creates a ref that can be attached to React elements via the ref attribute
  belongs_to: React Top-Level API
  description: |-
    ### `React.createRef`

    `React.createRef` creates a [ref](refs-and-the-dom) that can be attached to React elements via the ref attribute.

    ``` jsx
    class MyComponent extends React.Component {
      constructor(props) {
        super(props);

        this.inputRef = React.createRef();
      }

      render() {
        return <input type="text" ref={this.inputRef} />;
      }

      componentDidMount() {
        this.inputRef.current.focus();
      }
    }
    ```
- name: React.forwardRef
  id: react-api#reactforwardref
  summary: React.forwardRef creates a React component that forwards the ref attribute it receives to another component below in the tree
  belongs_to: React Top-Level API
  description: |-
    ### `React.forwardRef`

    `React.forwardRef` creates a React component that forwards the [ref](refs-and-the-dom) attribute it receives to another component below in the tree. This technique is not very common but is particularly useful in two scenarios:

    - [Forwarding refs to DOM components](forwarding-refs#forwarding-refs-to-dom-components)
    - [Forwarding refs in higher-order-components](forwarding-refs#forwarding-refs-in-higher-order-components)

    `React.forwardRef` accepts a rendering function as an argument. React will call this function with `props` and `ref` as two arguments. This function should return a React node.

    ``` jsx
    const FancyButton = React.forwardRef((props, ref) => (
      <button ref={ref} className="FancyButton">
        {props.children}
      </button>
    ));

    // You can now get a ref directly to the DOM button:
    const ref = React.createRef();
    <FancyButton ref={ref}>Click me!</FancyButton>;
    ```

    In the above example, React passes a `ref` given to `<FancyButton ref={ref}>` element as a second argument to the rendering function inside the `React.forwardRef` call. This rendering function passes the `ref` to the `<button ref={ref}>` element.

    As a result, after React attaches the ref, `ref.current` will point directly to the `<button>` DOM element instance.

    For more information, see [forwarding refs](forwarding-refs).
- name: React.Fragment
  id: react-api#reactfragment
  summary: You can also use it with the shorthand <></> syntax
  belongs_to: React Top-Level API
  description: |-
    ### `React.Fragment`

    The `React.Fragment` component lets you return multiple elements in a `render()` method without creating an additional DOM element:

    ``` jsx
    render() {
      return (
        <React.Fragment>
          Some text.
          <h2>A heading</h2>
        </React.Fragment>
      );
    }
    ```

    You can also use it with the shorthand `<></>` syntax. For more information, see [React v16.2.0: Improved Support for Fragments](https://reactjs.org/blog/2017/11/28/react-v16.2.0-fragment-support.html).
- name: React.lazy
  id: react-api#reactlazy
  summary: React.lazy() lets you define a component that is loaded dynamically
  belongs_to: React Top-Level API
  description: |-
    ### `React.lazy`

    `React.lazy()` lets you define a component that is loaded dynamically. This helps reduce the bundle size to delay loading components that aren’t used during the initial render.

    You can learn how to use it from our [code splitting documentation](code-splitting#reactlazy). You might also want to check out [this article](https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d) explaining how to use it in more detail.

    ``` jsx
    // This component is loaded dynamically
    const SomeComponent = React.lazy(() => import('./SomeComponent'));
    ```

    Note that rendering `lazy` components requires that there’s a `<React.Suspense>` component higher in the rendering tree. This is how you specify a loading indicator.
- name: React.memo
  id: react-api#reactmemo
  summary: React.memo is a higher order component
  belongs_to: React Top-Level API
  description: |-
    ### `React.memo`

    ``` jsx
    const MyComponent = React.memo(function MyComponent(props) {
      /* render using props */
    });
    ```

    `React.memo` is a [higher order component](higher-order-components).

    If your component renders the same result given the same props, you can wrap it in a call to `React.memo` for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.

    `React.memo` only checks for prop changes. If your function component wrapped in `React.memo` has a [`useState`](hooks-state), [`useReducer`](hooks-reference#usereducer) or [`useContext`](hooks-reference#usecontext) Hook in its implementation, it will still rerender when state or context change.

    By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can also provide a custom comparison function as the second argument.

    ``` jsx
    function MyComponent(props) {
      /* render using props */
    }
    function areEqual(prevProps, nextProps) {
      /*
      return true if passing nextProps to render would return
      the same result as passing prevProps to render,
      otherwise return false
      */
    }
    export default React.memo(MyComponent, areEqual);
    ```

    This method only exists as a **[performance optimization](optimizing-performance).** Do not rely on it to “prevent” a render, as this can lead to bugs.

    > Note
    >
    > Unlike the [`shouldComponentUpdate()`](react-component#shouldcomponentupdate) method on class components, the `areEqual` function returns `true` if the props are equal and `false` if the props are not equal. This is the inverse from `shouldComponentUpdate`.
- name: React.PureComponent
  id: react-api#reactpurecomponent
  summary: React.PureComponent is similar to React.Component
  belongs_to: React Top-Level API
  description: |-
    ### `React.PureComponent`

    `React.PureComponent` is similar to [`React.Component`](#reactcomponent). The difference between them is that [`React.Component`](#reactcomponent) doesn’t implement [`shouldComponentUpdate()`](react-component#shouldcomponentupdate), but `React.PureComponent` implements it with a shallow prop and state comparison.

    If your React component’s `render()` function renders the same result given the same props and state, you can use `React.PureComponent` for a performance boost in some cases.

    > Note
    >
    > `React.PureComponent`’s `shouldComponentUpdate()` only shallowly compares the objects. If these contain complex data structures, it may produce false-negatives for deeper differences. Only extend `PureComponent` when you expect to have simple props and state, or use [`forceUpdate()`](react-component#forceupdate) when you know deep data structures have changed. Or, consider using [immutable objects](https://immutable-js.com/) to facilitate fast comparisons of nested data.
    >
    > Furthermore, `React.PureComponent`’s `shouldComponentUpdate()` skips prop updates for the whole component subtree. Make sure all the children components are also “pure”.
- name: React.startTransition
  id: react-api#starttransition
  summary: React.startTransition lets you mark updates inside the provided callback as transitions
  belongs_to: React Top-Level API
  description: "### `React.startTransition`\n\n``` jsx\nReact.startTransition(callback)\n```\n\n`React.startTransition` lets you mark updates inside the provided callback as transitions. This method is designed to be used when [`React.useTransition`](hooks-reference#usetransition) is not available.\n\n> Note:\n>\n> Updates in a transition yield to more urgent updates such as clicks.\n>\n> Updates in a transition will not show a fallback for re-suspended content, allowing the user to continue interacting while rendering the update.\n>\n> `React.startTransition` does not provide an `isPending` flag. To track the pending status of a transition see [`React.useTransition`](hooks-reference#usetransition).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-api.html](https://reactjs.org/docs/react-api.html)"
- name: React.Suspense
  id: react-api#reactsuspense
  summary: React.Suspense lets you specify the loading indicator in case some components in the tree below it are not yet ready to render
  belongs_to: React Top-Level API
  description: |-
    ### `React.Suspense`

    `React.Suspense` lets you specify the loading indicator in case some components in the tree below it are not yet ready to render. In the future we plan to let `Suspense` handle more scenarios such as data fetching. You can read about this in [our roadmap](https://reactjs.org/blog/2018/11/27/react-16-roadmap.html).

    Today, lazy loading components is the **only** use case supported by `<React.Suspense>`:

    ``` jsx
    // This component is loaded dynamically
    const OtherComponent = React.lazy(() => import('./OtherComponent'));

    function MyComponent() {
      return (
        // Displays <Spinner> until OtherComponent loads
        <React.Suspense fallback={<Spinner />}>
          <div>
            <OtherComponent />
          </div>
        </React.Suspense>
      );
    }
    ```

    It is documented in our [code splitting guide](code-splitting#reactlazy). Note that `lazy` components can be deep inside the `Suspense` tree — it doesn’t have to wrap every one of them. The best practice is to place `<Suspense>` where you want to see a loading indicator, but to use `lazy()` wherever you want to do code splitting.

    > Note
    >
    > For content that is already shown to the user, switching back to a loading indicator can be disorienting. It is sometimes better to show the “old” UI while the new UI is being prepared. To do this, you can use the new transition APIs [`startTransition`](#starttransition) and [`useTransition`](hooks-reference#usetransition) to mark updates as transitions and avoid unexpected fallbacks.
- name: React.Suspense
  id: react-api#reactsuspense-in-server-side-rendering
  summary: During server side rendering Suspense Boundaries allow you to flush your application in smaller chunks by suspending
  belongs_to: React Top-Level API
  description: |-
    #### `React.Suspense` in Server Side Rendering

    During server side rendering Suspense Boundaries allow you to flush your application in smaller chunks by suspending. When a component suspends we schedule a low priority task to render the closest Suspense boundary’s fallback. If the component unsuspends before we flush the fallback then we send down the actual content and throw away the fallback.
- name: React.Suspense
  id: react-api#reactsuspense-during-hydration
  summary: Suspense boundaries depend on their parent boundaries being hydrated before they can hydrate, but they can hydrate independently from sibling boundaries
  belongs_to: React Top-Level API
  description: |-
    #### `React.Suspense` during hydration

    Suspense boundaries depend on their parent boundaries being hydrated before they can hydrate, but they can hydrate independently from sibling boundaries. Events on a boundary before its hydrated will cause the boundary to hydrate at a higher priority than neighboring boundaries. [Read more](https://github.com/reactwg/react-18/discussions/130)
- name: ReactDOM
  id: react-dom
  summary: The react-dom package provides DOM-specific methods that can be used at the top level of your app and as an escape hatch to get outside the React model if you need to
  description: "# ReactDOM\n\nThe `react-dom` package provides DOM-specific methods that can be used at the top level of your app and as an escape hatch to get outside the React model if you need to.\n\n``` jsx\nimport * as ReactDOM from 'react-dom';\n```\n\nIf you use ES5 with npm, you can write:\n\n``` jsx\nvar ReactDOM = require('react-dom');\n```\n\nThe `react-dom` package also provides modules specific to client and server apps:\n\n- [`react-dom/client`](react-dom-client)\n- [`react-dom/server`](react-dom-server)\n\n## Overview\n\nThe `react-dom` package exports these methods:\n\n- [`createPortal()`](#createportal)\n- [`flushSync()`](#flushsync)\n\nThese `react-dom` methods are also exported, but are considered legacy:\n\n- [`render()`](#render)\n- [`hydrate()`](#hydrate)\n- [`findDOMNode()`](#finddomnode)\n- [`unmountComponentAtNode()`](#unmountcomponentatnode)\n\n> Note:\n>\n> Both `render` and `hydrate` have been replaced with new [client methods](react-dom-client) in React 18. These methods will warn that your app will behave as if it’s running React 17 (learn more [here](https://reactjs.org/link/switch-to-createroot)).\n\n### Browser Support\n\nReact supports all modern browsers, although [some polyfills are required](javascript-environment-requirements) for older versions.\n\n> Note\n>\n> We do not support older browsers that don’t support ES5 methods or microtasks such as Internet Explorer. You may find that your apps do work in older browsers if polyfills such as [es5-shim and es5-sham](https://github.com/es-shims/es5-shim) are included in the page, but you’re on your own if you choose to take this path.\n\n## Reference\n\n### `createPortal()`\n\n``` jsx\ncreatePortal(child, container)\n```\n\nCreates a portal. Portals provide a way to [render children into a DOM node that exists outside the hierarchy of the DOM component](portals).\n\n### `flushSync()`\n\n``` jsx\nflushSync(callback)\n```\n\nForce React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately.\n\n``` jsx\n// Force this state update to be synchronous.\nflushSync(() => {\n  setCount(count + 1);\n});\n// By this point, DOM is updated.\n```\n\n> Note:\n>\n> `flushSync` can significantly hurt performance. Use sparingly.\n>\n> `flushSync` may force pending Suspense boundaries to show their `fallback` state.\n>\n> `flushSync` may also run pending effects and synchronously apply any updates they contain before returning.\n>\n> `flushSync` may also flush updates outside the callback when necessary to flush the updates inside the callback. For example, if there are pending updates from a click, React may flush those before flushing the updates inside the callback.\n\n## Legacy Reference\n\n### `render()`\n\n``` jsx\nrender(element, container[, callback])\n```\n\n> Note:\n>\n> `render` has been replaced with `createRoot` in React 18. See [createRoot](react-dom-client#createroot) for more info.\n\nRender a React element into the DOM in the supplied `container` and return a [reference](refs-and-the-dom) to the component (or returns `null` for [stateless components](components-and-props#function-and-class-components)).\n\nIf the React element was previously rendered into `container`, this will perform an update on it and only mutate the DOM as necessary to reflect the latest React element.\n\nIf the optional callback is provided, it will be executed after the component is rendered or updated.\n\n> Note:\n>\n> `render()` controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when first called. Later calls use React’s DOM diffing algorithm for efficient updates.\n>\n> `render()` does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.\n>\n> `render()` currently returns a reference to the root `ReactComponent` instance. However, using this return value is legacy and should be avoided because future versions of React may render components asynchronously in some cases. If you need a reference to the root `ReactComponent` instance, the preferred solution is to attach a [callback ref](refs-and-the-dom#callback-refs) to the root element.\n>\n> Using `render()` to hydrate a server-rendered container is deprecated. Use [`hydrateRoot()`](react-dom-client#hydrateroot) instead.\n\n### `hydrate()`\n\n``` jsx\nhydrate(element, container[, callback])\n```\n\n> Note:\n>\n> `hydrate` has been replaced with `hydrateRoot` in React 18. See [hydrateRoot](react-dom-client#hydrateroot) for more info.\n\nSame as [`render()`](#render), but is used to hydrate a container whose HTML contents were rendered by [`ReactDOMServer`](react-dom-server). React will attempt to attach event listeners to the existing markup.\n\nReact expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\n\nIf a single element’s attribute or text content is unavoidably different between the server and the client (for example, a timestamp), you may silence the warning by adding `suppressHydrationWarning={true}` to the element. It only works one level deep, and is intended to be an escape hatch. Don’t overuse it. Unless it’s text content, React still won’t attempt to patch it up, so it may remain inconsistent until future updates.\n\nIf you intentionally need to render something different on the server and the client, you can do a two-pass rendering. Components that render something different on the client can read a state variable like `this.state.isClient`, which you can set to `true` in `componentDidMount()`. This way the initial render pass will render the same content as the server, avoiding mismatches, but an additional pass will happen synchronously right after hydration. Note that this approach will make your components slower because they have to render twice, so use it with caution.\n\nRemember to be mindful of user experience on slow connections. The JavaScript code may load significantly later than the initial HTML render, so if you render something different in the client-only pass, the transition can be jarring. However, if executed well, it may be beneficial to render a “shell” of the application on the server, and only show some of the extra widgets on the client. To learn how to do this without getting the markup mismatch issues, refer to the explanation in the previous paragraph.\n\n### `unmountComponentAtNode()`\n\n``` jsx\nunmountComponentAtNode(container)\n```\n\n> Note:\n>\n> `unmountComponentAtNode` has been replaced with `root.unmount()` in React 18. See [createRoot](react-dom-client#createroot) for more info.\n\nRemove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns `true` if a component was unmounted and `false` if there was no component to unmount.\n\n### `findDOMNode()`\n\n> Note:\n>\n> `findDOMNode` is an escape hatch used to access the underlying DOM node. In most cases, use of this escape hatch is discouraged because it pierces the component abstraction. [It has been deprecated in `StrictMode`.](strict-mode#warning-about-deprecated-finddomnode-usage)\n\n``` jsx\nfindDOMNode(component)\n```\n\nIf this component has been mounted into the DOM, this returns the corresponding native browser DOM element. This method is useful for reading values out of the DOM, such as form field values and performing DOM measurements. **In most cases, you can attach a ref to the DOM node and avoid using `findDOMNode` at all.**\n\nWhen a component renders to `null` or `false`, `findDOMNode` returns `null`. When a component renders to a string, `findDOMNode` returns a text DOM node containing that value. As of React 16, a component may return a fragment with multiple children, in which case `findDOMNode` will return the DOM node corresponding to the first non-empty child.\n\n> Note:\n>\n> `findDOMNode` only works on mounted components (that is, components that have been placed in the DOM). If you try to call this on a component that has not been mounted yet (like calling `findDOMNode()` in `render()` on a component that has yet to be created) an exception will be thrown.\n>\n> `findDOMNode` cannot be used on function components.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-dom.html](https://reactjs.org/docs/react-dom.html)"
- name: ReactDOMClient
  id: react-dom-client
  summary: The react-dom/client package provides client-specific methods used for initializing an app on the client
  description: "# ReactDOMClient\n\nThe `react-dom/client` package provides client-specific methods used for initializing an app on the client. Most of your components should not need to use this module.\n\n``` jsx\nimport * as ReactDOM from 'react-dom/client';\n```\n\nIf you use ES5 with npm, you can write:\n\n``` jsx\nvar ReactDOM = require('react-dom/client');\n```\n\n## Overview\n\nThe following methods can be used in client environments:\n\n- [`createRoot()`](#createroot)\n- [`hydrateRoot()`](#hydrateroot)\n\n### Browser Support\n\nReact supports all modern browsers, although [some polyfills are required](javascript-environment-requirements) for older versions.\n\n> Note\n>\n> We do not support older browsers that don’t support ES5 methods or microtasks such as Internet Explorer. You may find that your apps do work in older browsers if polyfills such as [es5-shim and es5-sham](https://github.com/es-shims/es5-shim) are included in the page, but you’re on your own if you choose to take this path.\n\n## Reference\n\n### `createRoot()`\n\n``` jsx\ncreateRoot(container[, options]);\n```\n\nCreate a React root for the supplied `container` and return the root. The root can be used to render a React element into the DOM with `render`:\n\n``` jsx\nconst root = createRoot(container);\nroot.render(element);\n```\n\n`createRoot` accepts two options:\n\n- `onRecoverableError`: optional callback called when React automatically recovers from errors.\n- `identifierPrefix`: optional prefix React uses for ids generated by `React.useId`. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server.\n\nThe root can also be unmounted with `unmount`:\n\n``` jsx\nroot.unmount();\n```\n\n> Note:\n>\n> `createRoot()` controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when render is called. Later calls use React’s DOM diffing algorithm for efficient updates.\n>\n> `createRoot()` does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.\n>\n> Using `createRoot()` to hydrate a server-rendered container is not supported. Use [`hydrateRoot()`](#hydrateroot) instead.\n\n### `hydrateRoot()`\n\n``` jsx\nhydrateRoot(container, element[, options])\n```\n\nSame as [`createRoot()`](#createroot), but is used to hydrate a container whose HTML contents were rendered by [`ReactDOMServer`](react-dom-server). React will attempt to attach event listeners to the existing markup.\n\n`hydrateRoot` accepts two options:\n\n- `onRecoverableError`: optional callback called when React automatically recovers from errors.\n- `identifierPrefix`: optional prefix React uses for ids generated by `React.useId`. Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix used on the server.\n\n> Note\n>\n> React expects that the rendered content is identical between the server and the client. It can patch up differences in text content, but you should treat mismatches as bugs and fix them. In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-dom-client.html](https://reactjs.org/docs/react-dom-client.html)"
- name: ReactDOMServer
  id: react-dom-server
  summary: The ReactDOMServer object enables you to render components to static markup
  description: "# ReactDOMServer\n\nThe `ReactDOMServer` object enables you to render components to static markup. Typically, it’s used on a Node server:\n\n``` jsx\n// ES modules\nimport * as ReactDOMServer from 'react-dom/server';\n// CommonJS\nvar ReactDOMServer = require('react-dom/server');\n```\n\n## Overview\n\nThese methods are only available in the **environments with [Node.js Streams](https://nodejs.dev/learn/nodejs-streams):**\n\n- [`renderToPipeableStream()`](#rendertopipeablestream)\n- [`renderToNodeStream()`](#rendertonodestream) (Deprecated)\n- [`renderToStaticNodeStream()`](#rendertostaticnodestream)\n\nThese methods are only available in the **environments with [Web Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API)** (this includes browsers, Deno, and some modern edge runtimes):\n\n- [`renderToReadableStream()`](#rendertoreadablestream)\n\nThe following methods can be used in the environments that don’t support streams:\n\n- [`renderToString()`](#rendertostring)\n- [`renderToStaticMarkup()`](#rendertostaticmarkup)\n\n## Reference\n\n### `renderToPipeableStream()`\n\n``` jsx\nReactDOMServer.renderToPipeableStream(element, options)\n```\n\nRender a React element to its initial HTML. Returns a stream with a `pipe(res)` method to pipe the output and `abort()` to abort the request. Fully supports Suspense and streaming of HTML with “delayed” content blocks “popping in” via inline `<script>` tags later. [Read more](https://github.com/reactwg/react-18/discussions/37)\n\nIf you call [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\n\n``` jsx\nlet didError = false;\nconst stream = renderToPipeableStream(\n  <App />,\n  {\n    onShellReady() {\n      // The content above all Suspense boundaries is ready.\n      // If something errored before we started streaming, we set the error code appropriately.\n      res.statusCode = didError ? 500 : 200;\n      res.setHeader('Content-type', 'text/html');\n      stream.pipe(res);\n    },\n    onShellError(error) {\n      // Something errored before we could complete the shell so we emit an alternative shell.\n      res.statusCode = 500;\n      res.send(\n        '<!doctype html><p>Loading...</p><script src=\"clientrender.js\"></script>'\n      );\n    },\n    onAllReady() {\n      // If you don't want streaming, use this instead of onShellReady.\n      // This will fire after the entire page content is ready.\n      // You can use this for crawlers or static generation.\n\n      // res.statusCode = didError ? 500 : 200;\n      // res.setHeader('Content-type', 'text/html');\n      // stream.pipe(res);\n    },\n    onError(err) {\n      didError = true;\n      console.error(err);\n    },\n  }\n);\n```\n\nSee the [full list of options](https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-dom/src/server/ReactDOMFizzServerNode.js#L36-L46).\n\n> Note:\n>\n> This is a Node.js-specific API. Environments with [Web Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API), like Deno and modern edge runtimes, should use [`renderToReadableStream`](#rendertoreadablestream) instead.\n\n### `renderToReadableStream()`\n\n``` jsx\nReactDOMServer.renderToReadableStream(element, options);\n```\n\nStreams a React element to its initial HTML. Returns a Promise that resolves to a [Readable Stream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream). Fully supports Suspense and streaming of HTML. [Read more](https://github.com/reactwg/react-18/discussions/127)\n\nIf you call [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\n\n``` jsx\nlet controller = new AbortController();\nlet didError = false;\ntry {\n  let stream = await renderToReadableStream(\n    <html>\n      <body>Success</body>\n    </html>,\n    {\n      signal: controller.signal,\n      onError(error) {\n        didError = true;\n        console.error(error);\n      }\n    }\n  );\n  \n  // This is to wait for all Suspense boundaries to be ready. You can uncomment\n  // this line if you want to buffer the entire HTML instead of streaming it.\n  // You can use this for crawlers or static generation:\n\n  // await stream.allReady;\n\n  return new Response(stream, {\n    status: didError ? 500 : 200,\n    headers: {'Content-Type': 'text/html'},\n  });\n} catch (error) {\n  return new Response(\n    '<!doctype html><p>Loading...</p><script src=\"clientrender.js\"></script>',\n    {\n      status: 500,\n      headers: {'Content-Type': 'text/html'},\n    }\n  );\n}\n```\n\nSee the [full list of options](https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-dom/src/server/ReactDOMFizzServerBrowser.js#L27-L35).\n\n> Note:\n>\n> This API depends on [Web Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API). For Node.js, use [`renderToPipeableStream`](#rendertopipeablestream) instead.\n\n### `renderToNodeStream()` (Deprecated)\n\n``` jsx\nReactDOMServer.renderToNodeStream(element)\n```\n\nRender a React element to its initial HTML. Returns a [Node.js Readable stream](https://nodejs.org/api/stream.html#stream_readable_streams) that outputs an HTML string. The HTML output by this stream is exactly equal to what [`ReactDOMServer.renderToString`](#rendertostring) would return. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\n\nIf you call [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\n\n> Note:\n>\n> Server-only. This API is not available in the browser.\n>\n> The stream returned from this method will return a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like [iconv-lite](https://www.npmjs.com/package/iconv-lite), which provides transform streams for transcoding text.\n\n### `renderToStaticNodeStream()`\n\n``` jsx\nReactDOMServer.renderToStaticNodeStream(element)\n```\n\nSimilar to [`renderToNodeStream`](#rendertonodestream), except this doesn’t create extra DOM attributes that React uses internally, such as `data-reactroot`. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.\n\nThe HTML output by this stream is exactly equal to what [`ReactDOMServer.renderToStaticMarkup`](#rendertostaticmarkup) would return.\n\nIf you plan to use React on the client to make the markup interactive, do not use this method. Instead, use [`renderToNodeStream`](#rendertonodestream) on the server and [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on the client.\n\n> Note:\n>\n> Server-only. This API is not available in the browser.\n>\n> The stream returned from this method will return a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like [iconv-lite](https://www.npmjs.com/package/iconv-lite), which provides transform streams for transcoding text.\n\n### `renderToString()`\n\n``` jsx\nReactDOMServer.renderToString(element)\n```\n\nRender a React element to its initial HTML. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.\n\nIf you call [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\n\n> Note\n>\n> This API has limited Suspense support and does not support streaming.\n>\n> On the server, it is recommended to use either [`renderToPipeableStream`](#rendertopipeablestream) (for Node.js) or [`renderToReadableStream`](#rendertoreadablestream) (for Web Streams) instead.\n\n### `renderToStaticMarkup()`\n\n``` jsx\nReactDOMServer.renderToStaticMarkup(element)\n```\n\nSimilar to [`renderToString`](#rendertostring), except this doesn’t create extra DOM attributes that React uses internally, such as `data-reactroot`. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.\n\nIf you plan to use React on the client to make the markup interactive, do not use this method. Instead, use [`renderToString`](#rendertostring) on the server and [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on the client.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-dom-server.html](https://reactjs.org/docs/react-dom-server.html)"
- name: Reconciliation
  id: glossary#reconciliation
  summary: When a component’s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one
  belongs_to: Glossary of React Terms
  description: "## [Reconciliation](reconciliation)\n\nWhen a component’s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called “reconciliation”.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/glossary.html](https://reactjs.org/docs/glossary.html)"
- name: Reconciliation
  id: reconciliation
  summary: React provides a declarative API so that you don’t have to worry about exactly what changes on every update
  description: "# Reconciliation\n\nReact provides a declarative API so that you don’t have to worry about exactly what changes on every update. This makes writing applications a lot easier, but it might not be obvious how this is implemented within React. This article explains the choices we made in React’s “diffing” algorithm so that component updates are predictable while being fast enough for high-performance apps.\n\n## Motivation\n\nWhen you use React, at a single point in time you can think of the `render()` function as creating a tree of React elements. On the next state or props update, that `render()` function will return a different tree of React elements. React then needs to figure out how to efficiently update the UI to match the most recent tree.\n\nThere are some generic solutions to this algorithmic problem of generating the minimum number of operations to transform one tree into another. However, the [state of the art algorithms](https://grfia.dlsi.ua.es/ml/algorithms/references/editsurvey_bille.pdf) have a complexity in the order of O(n³) where n is the number of elements in the tree.\n\nIf we used this in React, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:\n\n1.  Two elements of different types will produce different trees.\n2.  The developer can hint at which child elements may be stable across different renders with a `key` prop.\n\nIn practice, these assumptions are valid for almost all practical use cases.\n\n## The Diffing Algorithm\n\nWhen diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements.\n\n### Elements Of Different Types\n\nWhenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. Going from `<a>` to `<img>`, or from `<Article>` to `<Comment>`, or from `<Button>` to `<div>` - any of those will lead to a full rebuild.\n\nWhen tearing down a tree, old DOM nodes are destroyed. Component instances receive `componentWillUnmount()`. When building up a new tree, new DOM nodes are inserted into the DOM. Component instances receive `UNSAFE_componentWillMount()` and then `componentDidMount()`. Any state associated with the old tree is lost.\n\nAny components below the root will also get unmounted and have their state destroyed. For example, when diffing:\n\n``` xml\n<div>\n  <Counter />\n</div>\n\n<span>\n  <Counter />\n</span>\n```\n\nThis will destroy the old `Counter` and remount a new one.\n\n> Note:\n>\n> This method is considered legacy and you should [avoid it](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) in new code:\n>\n> - `UNSAFE_componentWillMount()`\n\n### DOM Elements Of The Same Type\n\nWhen comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. For example:\n\n``` xml\n<div className=\"before\" title=\"stuff\" />\n\n<div className=\"after\" title=\"stuff\" />\n```\n\nBy comparing these two elements, React knows to only modify the `className` on the underlying DOM node.\n\nWhen updating `style`, React also knows to update only the properties that changed. For example:\n\n``` xml\n<div style={{color: 'red', fontWeight: 'bold'}} />\n\n<div style={{color: 'green', fontWeight: 'bold'}} />\n```\n\nWhen converting between these two elements, React knows to only modify the `color` style, not the `fontWeight`.\n\nAfter handling the DOM node, React then recurses on the children.\n\n### Component Elements Of The Same Type\n\nWhen a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls `UNSAFE_componentWillReceiveProps()`, `UNSAFE_componentWillUpdate()` and `componentDidUpdate()` on the underlying instance.\n\nNext, the `render()` method is called and the diff algorithm recurses on the previous result and the new result.\n\n> Note:\n>\n> These methods are considered legacy and you should [avoid them](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) in new code:\n>\n> - `UNSAFE_componentWillUpdate()`\n> - `UNSAFE_componentWillReceiveProps()`\n\n### Recursing On Children\n\nBy default, when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there’s a difference.\n\nFor example, when adding an element at the end of the children, converting between these two trees works well:\n\n``` xml\n<ul>\n  <li>first</li>\n  <li>second</li>\n</ul>\n\n<ul>\n  <li>first</li>\n  <li>second</li>\n  <li>third</li>\n</ul>\n```\n\nReact will match the two `<li>first</li>` trees, match the two `<li>second</li>` trees, and then insert the `<li>third</li>` tree.\n\nIf you implement it naively, inserting an element at the beginning has worse performance. For example, converting between these two trees works poorly:\n\n``` xml\n<ul>\n  <li>Duke</li>\n  <li>Villanova</li>\n</ul>\n\n<ul>\n  <li>Connecticut</li>\n  <li>Duke</li>\n  <li>Villanova</li>\n</ul>\n```\n\nReact will mutate every child instead of realizing it can keep the `<li>Duke</li>` and `<li>Villanova</li>` subtrees intact. This inefficiency can be a problem.\n\n### Keys\n\nIn order to solve this issue, React supports a `key` attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a `key` to our inefficient example above can make the tree conversion efficient:\n\n``` xml\n<ul>\n  <li key=\"2015\">Duke</li>\n  <li key=\"2016\">Villanova</li>\n</ul>\n\n<ul>\n  <li key=\"2014\">Connecticut</li>\n  <li key=\"2015\">Duke</li>\n  <li key=\"2016\">Villanova</li>\n</ul>\n```\n\nNow React knows that the element with key `'2014'` is the new one, and the elements with the keys `'2015'` and `'2016'` have just moved.\n\nIn practice, finding a key is usually not hard. The element you are going to display may already have a unique ID, so the key can just come from your data:\n\n``` jsx\n<li key={item.id}>{item.name}</li>\n```\n\nWhen that’s not the case, you can add a new ID property to your model or hash some parts of the content to generate a key. The key only has to be unique among its siblings, not globally unique.\n\nAs a last resort, you can pass an item’s index in the array as a key. This can work well if the items are never reordered, but reorders will be slow.\n\nReorders can also cause issues with component state when indexes are used as keys. Component instances are updated and reused based on their key. If the key is an index, moving an item changes it. As a result, component state for things like uncontrolled inputs can get mixed up and updated in unexpected ways.\n\nHere is [an example of the issues that can be caused by using indexes as keys](https://reactjs.org/redirect-to-codepen/reconciliation/index-used-as-key) on CodePen, and here is [an updated version of the same example showing how not using indexes as keys will fix these reordering, sorting, and prepending issues](https://reactjs.org/redirect-to-codepen/reconciliation/no-index-used-as-key).\n\n## Tradeoffs\n\nIt is important to remember that the reconciliation algorithm is an implementation detail. React could rerender the whole app on every action; the end result would be the same. Just to be clear, rerender in this context means calling `render` for all components, it doesn’t mean React will unmount and remount them. It will only apply the differences following the rules stated in the previous sections.\n\nWe are regularly refining the heuristics in order to make common use cases faster. In the current implementation, you can express the fact that a subtree has been moved amongst its siblings, but you cannot tell that it has moved somewhere else. The algorithm will rerender that full subtree.\n\nBecause React relies on heuristics, if the assumptions behind them are not met, performance will suffer.\n\n1.  The algorithm will not try to match subtrees of different component types. If you see yourself alternating between two component types with very similar output, you may want to make it the same type. In practice, we haven’t found this to be an issue.\n2.  Keys should be stable, predictable, and unique. Unstable keys (like those produced by `Math.random()`) will cause many component instances and DOM nodes to be unnecessarily recreated, which can cause performance degradation and lost state in child components.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/reconciliation.html](https://reactjs.org/docs/reconciliation.html)"
- name: Refs
  id: glossary#refs
  summary: React supports a special attribute that you can attach to any component
  belongs_to: Glossary of React Terms
  description: |-
    ## [Refs](refs-and-the-dom)

    React supports a special attribute that you can attach to any component. The `ref` attribute can be an object created by [`React.createRef()` function](react-api#reactcreateref) or a callback function, or a string (in legacy API). When the `ref` attribute is a callback function, the function receives the underlying DOM element or class instance (depending on the type of element) as its argument. This allows you to have direct access to the DOM element or component instance.

    Use refs sparingly. If you find yourself often using refs to “make things happen” in your app, consider getting more familiar with [top-down data flow](lifting-state-up).
- name: Refs and the DOM
  id: refs-and-the-dom
  summary: Refs provide a way to access DOM nodes or React elements created in the render method
  description: "# Refs and the DOM\n\nRefs provide a way to access DOM nodes or React elements created in the render method.\n\nIn the typical React dataflow, [props](components-and-props) are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively modify a child outside of the typical dataflow. The child to be modified could be an instance of a React component, or it could be a DOM element. For both of these cases, React provides an escape hatch.\n\n### When to Use Refs\n\nThere are a few good use cases for refs:\n\n- Managing focus, text selection, or media playback.\n- Triggering imperative animations.\n- Integrating with third-party DOM libraries.\n\nAvoid using refs for anything that can be done declaratively.\n\nFor example, instead of exposing `open()` and `close()` methods on a `Dialog` component, pass an `isOpen` prop to it.\n\n### Don’t Overuse Refs\n\nYour first inclination may be to use refs to “make things happen” in your app. If this is the case, take a moment and think more critically about where state should be owned in the component hierarchy. Often, it becomes clear that the proper place to “own” that state is at a higher level in the hierarchy. See the [Lifting State Up](lifting-state-up) guide for examples of this.\n\n> Note\n>\n> The examples below have been updated to use the `React.createRef()` API introduced in React 16.3. If you are using an earlier release of React, we recommend using [callback refs](#callback-refs) instead.\n\n### Creating Refs\n\nRefs are created using `React.createRef()` and attached to React elements via the `ref` attribute. Refs are commonly assigned to an instance property when a component is constructed so they can be referenced throughout the component.\n\n``` jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n  render() {\n    return <div ref={this.myRef} />;\n  }\n}\n```\n\n### Accessing Refs\n\nWhen a ref is passed to an element in `render`, a reference to the node becomes accessible at the `current` attribute of the ref.\n\n``` jsx\nconst node = this.myRef.current;\n```\n\nThe value of the ref differs depending on the type of the node:\n\n- When the `ref` attribute is used on an HTML element, the `ref` created in the constructor with `React.createRef()` receives the underlying DOM element as its `current` property.\n- When the `ref` attribute is used on a custom class component, the `ref` object receives the mounted instance of the component as its `current`.\n- **You may not use the `ref` attribute on function components** because they don’t have instances.\n\nThe examples below demonstrate the differences.\n\n#### Adding a Ref to a DOM Element\n\nThis code uses a `ref` to store a reference to a DOM node:\n\n``` jsx\nclass CustomTextInput extends React.Component {\n  constructor(props) {\n    super(props);\n    // create a ref to store the textInput DOM element\n    this.textInput = React.createRef();\n    this.focusTextInput = this.focusTextInput.bind(this);\n  }\n\n  focusTextInput() {\n    // Explicitly focus the text input using the raw DOM API\n    // Note: we're accessing \"current\" to get the DOM node\n    this.textInput.current.focus();\n  }\n\n  render() {\n    // tell React that we want to associate the <input> ref\n    // with the `textInput` that we created in the constructor\n    return (\n      <div>\n        <input\n          type=\"text\"\n          ref={this.textInput} />        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.focusTextInput}\n        />\n      </div>\n    );\n  }\n}\n```\n\nReact will assign the `current` property with the DOM element when the component mounts, and assign it back to `null` when it unmounts. `ref` updates happen before `componentDidMount` or `componentDidUpdate` lifecycle methods.\n\n#### Adding a Ref to a Class Component\n\nIf we wanted to wrap the `CustomTextInput` above to simulate it being clicked immediately after mounting, we could use a ref to get access to the custom input and call its `focusTextInput` method manually:\n\n``` jsx\nclass AutoFocusTextInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    this.textInput.current.focusTextInput();\n  }\n\n  render() {\n    return (\n      <CustomTextInput ref={this.textInput} />\n    );\n  }\n}\n```\n\nNote that this only works if `CustomTextInput` is declared as a class:\n\n``` jsx\nclass CustomTextInput extends React.Component {\n  // ...\n}\n```\n\n#### Refs and Function Components\n\nBy default, **you may not use the `ref` attribute on function components** because they don’t have instances:\n\n``` jsx\nfunction MyFunctionComponent() {\n  return <input />;\n}\n\nclass Parent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n  }\n  render() {\n    // This will *not* work!\n    return (\n      <MyFunctionComponent ref={this.textInput} />\n    );\n  }\n}\n```\n\nIf you want to allow people to take a `ref` to your function component, you can use [`forwardRef`](forwarding-refs) (possibly in conjunction with [`useImperativeHandle`](hooks-reference#useimperativehandle)), or you can convert the component to a class.\n\nYou can, however, **use the `ref` attribute inside a function component** as long as you refer to a DOM element or a class component:\n\n``` jsx\nfunction CustomTextInput(props) {\n  // textInput must be declared here so the ref can refer to it\n  const textInput = useRef(null);\n  \n  function handleClick() {\n    textInput.current.focus();\n  }\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        ref={textInput} />      <input\n        type=\"button\"\n        value=\"Focus the text input\"\n        onClick={handleClick}\n      />\n    </div>\n  );\n}\n```\n\n### Exposing DOM Refs to Parent Components\n\nIn rare cases, you might want to have access to a child’s DOM node from a parent component. This is generally not recommended because it breaks component encapsulation, but it can occasionally be useful for triggering focus or measuring the size or position of a child DOM node.\n\nWhile you could [add a ref to the child component](#adding-a-ref-to-a-class-component), this is not an ideal solution, as you would only get a component instance rather than a DOM node. Additionally, this wouldn’t work with function components.\n\nIf you use React 16.3 or higher, we recommend to use [ref forwarding](forwarding-refs) for these cases. **Ref forwarding lets components opt into exposing any child component’s ref as their own**. You can find a detailed example of how to expose a child’s DOM node to a parent component [in the ref forwarding documentation](forwarding-refs#forwarding-refs-to-dom-components).\n\nIf you use React 16.2 or lower, or if you need more flexibility than provided by ref forwarding, you can use [this alternative approach](https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509) and explicitly pass a ref as a differently named prop.\n\nWhen possible, we advise against exposing DOM nodes, but it can be a useful escape hatch. Note that this approach requires you to add some code to the child component. If you have absolutely no control over the child component implementation, your last option is to use [`findDOMNode()`](react-dom#finddomnode), but it is discouraged and deprecated in [`StrictMode`](strict-mode#warning-about-deprecated-finddomnode-usage).\n\n### Callback Refs\n\nReact also supports another way to set refs called “callback refs”, which gives more fine-grain control over when refs are set and unset.\n\nInstead of passing a `ref` attribute created by `createRef()`, you pass a function. The function receives the React component instance or HTML DOM element as its argument, which can be stored and accessed elsewhere.\n\nThe example below implements a common pattern: using the `ref` callback to store a reference to a DOM node in an instance property.\n\n``` jsx\nclass CustomTextInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.textInput = null;\n\n    this.setTextInputRef = element => {\n      this.textInput = element;\n    };\n\n    this.focusTextInput = () => {\n      // Focus the text input using the raw DOM API\n      if (this.textInput) this.textInput.focus();\n    };\n  }\n\n  componentDidMount() {\n    // autofocus the input on mount\n    this.focusTextInput();\n  }\n\n  render() {\n    // Use the `ref` callback to store a reference to the text input DOM\n    // element in an instance field (for example, this.textInput).\n    return (\n      <div>\n        <input\n          type=\"text\"\n          ref={this.setTextInputRef}        />\n        <input\n          type=\"button\"\n          value=\"Focus the text input\"\n          onClick={this.focusTextInput}        />\n      </div>\n    );\n  }\n}\n```\n\nReact will call the `ref` callback with the DOM element when the component mounts, and call it with `null` when it unmounts. Refs are guaranteed to be up-to-date before `componentDidMount` or `componentDidUpdate` fires.\n\nYou can pass callback refs between components like you can with object refs that were created with `React.createRef()`.\n\n``` jsx\nfunction CustomTextInput(props) {\n  return (\n    <div>\n      <input ref={props.inputRef} />\n    </div>\n  );\n}\n\nclass Parent extends React.Component {\n  render() {\n    return (\n      <CustomTextInput\n        inputRef={el => this.inputElement = el}      />\n    );\n  }\n}\n```\n\nIn the example above, `Parent` passes its ref callback as an `inputRef` prop to the `CustomTextInput`, and the `CustomTextInput` passes the same function as a special `ref` attribute to the `<input>`. As a result, `this.inputElement` in `Parent` will be set to the DOM node corresponding to the `<input>` element in the `CustomTextInput`.\n\n### Legacy API: String Refs\n\nIf you worked with React before, you might be familiar with an older API where the `ref` attribute is a string, like `\"textInput\"`, and the DOM node is accessed as `this.refs.textInput`. We advise against it because string refs have [some issues](https://github.com/facebook/react/pull/8333#issuecomment-271648615), are considered legacy, and **are likely to be removed in one of the future releases**.\n\n> Note\n>\n> If you’re currently using `this.refs.textInput` to access refs, we recommend using either the [callback pattern](#callback-refs) or the [`createRef` API](#creating-refs) instead.\n\n### Caveats with callback refs\n\nIf the `ref` callback is defined as an inline function, it will get called twice during updates, first with `null` and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one. You can avoid this by defining the `ref` callback as a bound method on the class, but note that it shouldn’t matter in most cases.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/refs-and-the-dom.html](https://reactjs.org/docs/refs-and-the-dom.html)"
- name: Release Channels
  id: release-channels
  summary: React relies on a thriving open source community to file bug reports, open pull requests, and submit RFCs
  description: "# Release Channels\n\nReact relies on a thriving open source community to file bug reports, open pull requests, and [submit RFCs](https://github.com/reactjs/rfcs). To encourage feedback we sometimes share special builds of React that include unreleased features.\n\n> This document will be most relevant to developers who work on frameworks, libraries, or developer tooling. Developers who use React primarily to build user-facing applications should not need to worry about our prerelease channels.\n\nEach of React’s release channels is designed for a distinct use case:\n\n- [**Latest**](#latest-channel) is for stable, semver React releases. It’s what you get when you install React from npm. This is the channel you’re already using today. **Use this for all user-facing React applications.**\n- [**Next**](#next-channel) tracks the main branch of the React source code repository. Think of these as release candidates for the next minor semver release. Use this for integration testing between React and third party projects.\n- [**Experimental**](#experimental-channel) includes experimental APIs and features that aren’t available in the stable releases. These also track the main branch, but with additional feature flags turned on. Use this to try out upcoming features before they are released.\n\nAll releases are published to npm, but only Latest uses [semantic versioning](faq-versioning). Prereleases (those in the Next and Experimental channels) have versions generated from a hash of their contents and the commit date, e.g. `0.0.0-68053d940-20210623` for Next and `0.0.0-experimental-68053d940-20210623` for Experimental.\n\n**The only officially supported release channel for user-facing applications is Latest**. Next and Experimental releases are provided for testing purposes only, and we provide no guarantees that behavior won’t change between releases. They do not follow the semver protocol that we use for releases from Latest.\n\nBy publishing prereleases to the same registry that we use for stable releases, we are able to take advantage of the many tools that support the npm workflow, like [unpkg](https://unpkg.com) and [CodeSandbox](https://codesandbox.io).\n\n### Latest Channel\n\nLatest is the channel used for stable React releases. It corresponds to the `latest` tag on npm. It is the recommended channel for all React apps that are shipped to real users.\n\n**If you’re not sure which channel you should use, it’s Latest.** If you’re a React developer, this is what you’re already using.\n\nYou can expect updates to Latest to be extremely stable. Versions follow the semantic versioning scheme. Learn more about our commitment to stability and incremental migration in our [versioning policy](faq-versioning).\n\n### Next Channel\n\nThe Next channel is a prerelease channel that tracks the main branch of the React repository. We use prereleases in the Next channel as release candidates for the Latest channel. You can think of Next as a superset of Latest that is updated more frequently.\n\nThe degree of change between the most recent Next release and the most recent Latest release is approximately the same as you would find between two minor semver releases. However, **the Next channel does not conform to semantic versioning.** You should expect occasional breaking changes between successive releases in the Next channel.\n\n**Do not use prereleases in user-facing applications.**\n\nReleases in Next are published with the `next` tag on npm. Versions are generated from a hash of the build’s contents and the commit date, e.g. `0.0.0-68053d940-20210623`.\n\n#### Using the Next Channel for Integration Testing\n\nThe Next channel is designed to support integration testing between React and other projects.\n\nAll changes to React go through extensive internal testing before they are released to the public. However, there are a myriad of environments and configurations used throughout the React ecosystem, and it’s not possible for us to test against every single one.\n\nIf you’re the author of a third party React framework, library, developer tool, or similar infrastructure-type project, you can help us keep React stable for your users and the entire React community by periodically running your test suite against the most recent changes. If you’re interested, follow these steps:\n\n- Set up a cron job using your preferred continuous integration platform. Cron jobs are supported by both [CircleCI](https://circleci.com/docs/2.0/triggers/#scheduled-builds) and [Travis CI](https://docs.travis-ci.com/user/cron-jobs/).\n\n- In the cron job, update your React packages to the most recent React release in the Next channel, using `next` tag on npm. Using the npm cli:\n\n  ``` console\n  npm update react@next react-dom@next\n  ```\n\n  Or yarn:\n\n  ``` console\n  yarn upgrade react@next react-dom@next\n  ```\n\n- Run your test suite against the updated packages.\n\n- If everything passes, great! You can expect that your project will work with the next minor React release.\n\n- If something breaks unexpectedly, please let us know by [filing an issue](https://github.com/facebook/react/issues).\n\nA project that uses this workflow is Next.js. (No pun intended! Seriously!) You can refer to their [CircleCI configuration](https://github.com/zeit/next.js/blob/c0a1c0f93966fe33edd93fb53e5fafb0dcd80a9e/.circleci/config.yml) as an example.\n\n### Experimental Channel\n\nLike Next, the Experimental channel is a prerelease channel that tracks the main branch of the React repository. Unlike Next, Experimental releases include additional features and APIs that are not ready for wider release.\n\nUsually, an update to Next is accompanied by a corresponding update to Experimental. They are based on the same source revision, but are built using a different set of feature flags.\n\nExperimental releases may be significantly different than releases to Next and Latest. **Do not use Experimental releases in user-facing applications.** You should expect frequent breaking changes between releases in the Experimental channel.\n\nReleases in Experimental are published with the `experimental` tag on npm. Versions are generated from a hash of the build’s contents and the commit date, e.g. `0.0.0-experimental-68053d940-20210623`.\n\n#### What Goes Into an Experimental Release?\n\nExperimental features are ones that are not ready to be released to the wider public, and may change drastically before they are finalized. Some experiments may never be finalized — the reason we have experiments is to test the viability of proposed changes.\n\nFor example, if the Experimental channel had existed when we announced Hooks, we would have released Hooks to the Experimental channel weeks before they were available in Latest.\n\nYou may find it valuable to run integration tests against Experimental. This is up to you. However, be advised that Experimental is even less stable than Next. **We do not guarantee any stability between Experimental releases.**\n\n#### How Can I Learn More About Experimental Features?\n\nExperimental features may or may not be documented. Usually, experiments aren’t documented until they are close to shipping in Next or Latest.\n\nIf a feature is not documented, they may be accompanied by an [RFC](https://github.com/reactjs/rfcs).\n\nWe will post to the [React blog](https://reactjs.org/blog) when we’re ready to announce new experiments, but that doesn’t mean we will publicize every experiment.\n\nYou can always refer to our public GitHub repository’s [history](https://github.com/facebook/react/commits/main) for a comprehensive list of changes.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/release-channels.html](https://reactjs.org/docs/release-channels.html)"
- name: Render Props
  id: render-props
  summary: The term “render prop” refers to a technique for sharing code between React components using a prop whose value is a function
  description: "# Render Props\n\nThe term [“render prop”](https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce) refers to a technique for sharing code between React components using a prop whose value is a function.\n\nA component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.\n\n``` jsx\n<DataProvider render={data => (\n  <h1>Hello {data.target}</h1>\n)}/>\n```\n\nLibraries that use render props include [React Router](https://reacttraining.com/react-router/web/api/Route/render-func), [Downshift](https://github.com/paypal/downshift) and [Formik](https://github.com/jaredpalmer/formik).\n\nIn this document, we’ll discuss why render props are useful, and how to write your own.\n\n## Use Render Props for Cross-Cutting Concerns\n\nComponents are the primary unit of code reuse in React, but it’s not always obvious how to share the state or behavior that one component encapsulates to other components that need that same state.\n\nFor example, the following component tracks the mouse position in a web app:\n\n``` jsx\nclass MouseTracker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = { x: 0, y: 0 };\n  }\n\n  handleMouseMove(event) {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n        <h1>Move the mouse around!</h1>\n        <p>The current mouse position is ({this.state.x}, {this.state.y})</p>\n      </div>\n    );\n  }\n}\n```\n\nAs the cursor moves around the screen, the component displays its (x, y) coordinates in a `<p>`.\n\nNow the question is: How can we reuse this behavior in another component? In other words, if another component needs to know about the cursor position, can we encapsulate that behavior so that we can easily share it with that component?\n\nSince components are the basic unit of code reuse in React, let’s try refactoring the code a bit to use a `<Mouse>` component that encapsulates the behavior we need to reuse elsewhere.\n\n``` jsx\n// The <Mouse> component encapsulates the behavior we need...\nclass Mouse extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = { x: 0, y: 0 };\n  }\n\n  handleMouseMove(event) {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n\n        {/* ...but how do we render something other than a <p>? */}\n        <p>The current mouse position is ({this.state.x}, {this.state.y})</p>\n      </div>\n    );\n  }\n}\n\nclass MouseTracker extends React.Component {\n  render() {\n    return (\n      <>\n        <h1>Move the mouse around!</h1>\n        <Mouse />\n      </>\n    );\n  }\n}\n```\n\nNow the `<Mouse>` component encapsulates all behavior associated with listening for `mousemove` events and storing the (x, y) position of the cursor, but it’s not yet truly reusable.\n\nFor example, let’s say we have a `<Cat>` component that renders the image of a cat chasing the mouse around the screen. We might use a `<Cat mouse={{ x, y }}>` prop to tell the component the coordinates of the mouse so it knows where to position the image on the screen.\n\nAs a first pass, you might try rendering the `<Cat>` *inside `<Mouse>`’s `render` method*, like this:\n\n``` jsx\nclass Cat extends React.Component {\n  render() {\n    const mouse = this.props.mouse;\n    return (\n      <img src=\"/cat.jpg\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} />\n    );\n  }\n}\n\nclass MouseWithCat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = { x: 0, y: 0 };\n  }\n\n  handleMouseMove(event) {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n\n        {/*\n          We could just swap out the <p> for a <Cat> here ... but then\n          we would need to create a separate <MouseWithSomethingElse>\n          component every time we need to use it, so <MouseWithCat>\n          isn't really reusable yet.\n        */}\n        <Cat mouse={this.state} />\n      </div>\n    );\n  }\n}\n\nclass MouseTracker extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Move the mouse around!</h1>\n        <MouseWithCat />\n      </div>\n    );\n  }\n}\n```\n\nThis approach will work for our specific use case, but we haven’t achieved the objective of truly encapsulating the behavior in a reusable way. Now, every time we want the mouse position for a different use case, we have to create a new component (i.e. essentially another `<MouseWithCat>`) that renders something specifically for that use case.\n\nHere’s where the render prop comes in: Instead of hard-coding a `<Cat>` inside a `<Mouse>` component, and effectively changing its rendered output, we can provide `<Mouse>` with a function prop that it uses to dynamically determine what to render–a render prop.\n\n``` jsx\nclass Cat extends React.Component {\n  render() {\n    const mouse = this.props.mouse;\n    return (\n      <img src=\"/cat.jpg\" style={{ position: 'absolute', left: mouse.x, top: mouse.y }} />\n    );\n  }\n}\n\nclass Mouse extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.state = { x: 0, y: 0 };\n  }\n\n  handleMouseMove(event) {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n\n  render() {\n    return (\n      <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\n\n        {/*\n          Instead of providing a static representation of what <Mouse> renders,\n          use the `render` prop to dynamically determine what to render.\n        */}\n        {this.props.render(this.state)}\n      </div>\n    );\n  }\n}\n\nclass MouseTracker extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Move the mouse around!</h1>\n        <Mouse render={mouse => (\n          <Cat mouse={mouse} />\n        )}/>\n      </div>\n    );\n  }\n}\n```\n\nNow, instead of effectively cloning the `<Mouse>` component and hard-coding something else in its `render` method to solve for a specific use case, we provide a `render` prop that `<Mouse>` can use to dynamically determine what it renders.\n\nMore concretely, **a render prop is a function prop that a component uses to know what to render.**\n\nThis technique makes the behavior that we need to share extremely portable. To get that behavior, render a `<Mouse>` with a `render` prop that tells it what to render with the current (x, y) of the cursor.\n\nOne interesting thing to note about render props is that you can implement most [higher-order components](higher-order-components) (HOC) using a regular component with a render prop. For example, if you would prefer to have a `withMouse` HOC instead of a `<Mouse>` component, you could easily create one using a regular `<Mouse>` with a render prop:\n\n``` jsx\n// If you really want a HOC for some reason, you can easily\n// create one using a regular component with a render prop!\nfunction withMouse(Component) {\n  return class extends React.Component {\n    render() {\n      return (\n        <Mouse render={mouse => (\n          <Component {...this.props} mouse={mouse} />\n        )}/>\n      );\n    }\n  }\n}\n```\n\nSo using a render prop makes it possible to use either pattern.\n\n## Using Props Other Than `render`\n\nIt’s important to remember that just because the pattern is called “render props” you don’t *have to use a prop named `render` to use this pattern*. In fact, [*any* prop that is a function that a component uses to know what to render is technically a “render prop”](https://cdb.reacttraining.com/use-a-render-prop-50de598f11ce).\n\nAlthough the examples above use `render`, we could just as easily use the `children` prop!\n\n``` jsx\n<Mouse children={mouse => (\n  <p>The mouse position is {mouse.x}, {mouse.y}</p>\n)}/>\n```\n\nAnd remember, the `children` prop doesn’t actually need to be named in the list of “attributes” in your JSX element. Instead, you can put it directly *inside* the element!\n\n``` jsx\n<Mouse>\n  {mouse => (\n    <p>The mouse position is {mouse.x}, {mouse.y}</p>\n  )}\n</Mouse>\n```\n\nYou’ll see this technique used in the [react-motion](https://github.com/chenglou/react-motion) API.\n\nSince this technique is a little unusual, you’ll probably want to explicitly state that `children` should be a function in your `propTypes` when designing an API like this.\n\n``` jsx\nMouse.propTypes = {\n  children: PropTypes.func.isRequired\n};\n```\n\n## Caveats\n\n### Be careful when using Render Props with React.PureComponent\n\nUsing a render prop can negate the advantage that comes from using [`React.PureComponent`](react-api#reactpurecomponent) if you create the function inside a `render` method. This is because the shallow prop comparison will always return `false` for new props, and each `render` in this case will generate a new value for the render prop.\n\nFor example, continuing with our `<Mouse>` component from above, if `Mouse` were to extend `React.PureComponent` instead of `React.Component`, our example would look like this:\n\n``` jsx\nclass Mouse extends React.PureComponent {\n  // Same implementation as above...\n}\n\nclass MouseTracker extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Move the mouse around!</h1>\n\n        {/*\n          This is bad! The value of the `render` prop will\n          be different on each render.\n        */}\n        <Mouse render={mouse => (\n          <Cat mouse={mouse} />\n        )}/>\n      </div>\n    );\n  }\n}\n```\n\nIn this example, each time `<MouseTracker>` renders, it generates a new function as the value of the `<Mouse render>` prop, thus negating the effect of `<Mouse>` extending `React.PureComponent` in the first place!\n\nTo get around this problem, you can sometimes define the prop as an instance method, like so:\n\n``` jsx\nclass MouseTracker extends React.Component {\n  // Defined as an instance method, `this.renderTheCat` always\n  // refers to *same* function when we use it in render\n  renderTheCat(mouse) {\n    return <Cat mouse={mouse} />;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Move the mouse around!</h1>\n        <Mouse render={this.renderTheCat} />\n      </div>\n    );\n  }\n}\n```\n\nIn cases where you cannot define the prop statically (e.g. because you need to close over the component’s props and/or state) `<Mouse>` should extend `React.Component` instead.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/render-props.html](https://reactjs.org/docs/render-props.html)"
- name: render()
  id: react-dom#render
  summary: render has been replaced with createRoot in React 18
  belongs_to: ReactDOM
  description: |-
    ### `render()`

    ``` jsx
    render(element, container[, callback])
    ```

    > Note:
    >
    > `render` has been replaced with `createRoot` in React 18. See [createRoot](react-dom-client#createroot) for more info.

    Render a React element into the DOM in the supplied `container` and return a [reference](refs-and-the-dom) to the component (or returns `null` for [stateless components](components-and-props#function-and-class-components)).

    If the React element was previously rendered into `container`, this will perform an update on it and only mutate the DOM as necessary to reflect the latest React element.

    If the optional callback is provided, it will be executed after the component is rendered or updated.

    > Note:
    >
    > `render()` controls the contents of the container node you pass in. Any existing DOM elements inside are replaced when first called. Later calls use React’s DOM diffing algorithm for efficient updates.
    >
    > `render()` does not modify the container node (only modifies the children of the container). It may be possible to insert a component to an existing DOM node without overwriting the existing children.
    >
    > `render()` currently returns a reference to the root `ReactComponent` instance. However, using this return value is legacy and should be avoided because future versions of React may render components asynchronously in some cases. If you need a reference to the root `ReactComponent` instance, the preferred solution is to attach a [callback ref](refs-and-the-dom#callback-refs) to the root element.
    >
    > Using `render()` to hydrate a server-rendered container is deprecated. Use [`hydrateRoot()`](react-dom-client#hydrateroot) instead.
- name: render()
  id: react-component#render
  summary: The render() method is the only required method in a class component
  belongs_to: React.Component
  description: |-
    ### `render()`

    ``` jsx
    render()
    ```

    The `render()` method is the only required method in a class component.

    When called, it should examine `this.props` and `this.state` and return one of the following types:

    - **React elements.** Typically created via [JSX](introducing-jsx). For example, `<div />` and `<MyComponent />` are React elements that instruct React to render a DOM node, or another user-defined component, respectively.
    - **Arrays and fragments.** Let you return multiple elements from render. See the documentation on [fragments](fragments) for more details.
    - **Portals**. Let you render children into a different DOM subtree. See the documentation on [portals](portals) for more details.
    - **String and numbers.** These are rendered as text nodes in the DOM.
    - **Booleans or `null`**. Render nothing. (Mostly exists to support `return test && <Child />` pattern, where `test` is boolean.)

    The `render()` function should be pure, meaning that it does not modify component state, it returns the same result each time it’s invoked, and it does not directly interact with the browser.

    If you need to interact with the browser, perform your work in `componentDidMount()` or the other lifecycle methods instead. Keeping `render()` pure makes components easier to think about.

    > Note
    >
    > `render()` will not be invoked if [`shouldComponentUpdate()`](#shouldcomponentupdate) returns false.
- name: Rendering Elements
  id: rendering-elements
  summary: Elements are the smallest building blocks of React apps
  description: "# Rendering Elements\n\nElements are the smallest building blocks of React apps.\n\nAn element describes what you want to see on the screen:\n\n``` jsx\nconst element = <h1>Hello, world</h1>;\n```\n\nUnlike browser DOM elements, React elements are plain objects, and are cheap to create. React DOM takes care of updating the DOM to match the React elements.\n\n> **Note:**\n>\n> One might confuse elements with a more widely known concept of “components”. We will introduce components in the [next section](components-and-props). Elements are what components are “made of”, and we encourage you to read this section before jumping ahead.\n\n## Rendering an Element into the DOM\n\nLet’s say there is a `<div>` somewhere in your HTML file:\n\n``` html\n<div id=\"root\"></div>\n```\n\nWe call this a “root” DOM node because everything inside it will be managed by React DOM.\n\nApplications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like.\n\nTo render a React element, first pass the DOM element to [`ReactDOM.createRoot()`](react-dom-client#createroot), then pass the React element to `root.render()`:\n\n``` jsx\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nconst element = <h1>Hello, world</h1>;\nroot.render(element);\n```\n\n**[Try it on CodePen](https://codepen.io/gaearon/pen/ZpvBNJ?editors=1010)**\n\nIt displays “Hello, world” on the page.\n\n## Updating the Rendered Element\n\nReact elements are [immutable](https://en.wikipedia.org/wiki/Immutable_object). Once you create an element, you can’t change its children or attributes. An element is like a single frame in a movie: it represents the UI at a certain point in time.\n\nWith our knowledge so far, the only way to update the UI is to create a new element, and pass it to `root.render()`.\n\nConsider this ticking clock example:\n\n``` jsx\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\n\nfunction tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  root.render(element);\n}\n\nsetInterval(tick, 1000);\n```\n\n**[Try it on CodePen](https://codepen.io/gaearon/pen/gwoJZk?editors=1010)**\n\nIt calls [`root.render()`](react-dom#render) every second from a [`setInterval()`](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval) callback.\n\n> **Note:**\n>\n> In practice, most React apps only call `root.render()` once. In the next sections we will learn how such code gets encapsulated into [stateful components](state-and-lifecycle).\n>\n> We recommend that you don’t skip topics because they build on each other.\n\n## React Only Updates What’s Necessary\n\nReact DOM compares the element and its children to the previous one, and only applies the DOM updates necessary to bring the DOM to the desired state.\n\nYou can verify by inspecting the [last example](https://codepen.io/gaearon/pen/gwoJZk?editors=1010) with the browser tools:\n\nEven though we create an element describing the whole UI tree on every tick, only the text node whose contents have changed gets updated by React DOM.\n\nIn our experience, thinking about how the UI should look at any given moment, rather than how to change it over time, eliminates a whole class of bugs.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/rendering-elements.html](https://reactjs.org/docs/rendering-elements.html)"
- name: renderIntoDocument()
  id: test-utils#renderintodocument
  summary: Render a React element into a detached DOM node in the document
  belongs_to: Test Utilities
  description: |-
    ### `renderIntoDocument()`

    ``` jsx
    renderIntoDocument(element)
    ```

    Render a React element into a detached DOM node in the document. **This function requires a DOM.** It is effectively equivalent to:

    ``` jsx
    const domContainer = document.createElement('div');
    ReactDOM.createRoot(domContainer).render(element);
    ```

    > Note:
    >
    > You will need to have `window`, `window.document` and `window.document.createElement` globally available **before** you import `React`. Otherwise React will think it can’t access the DOM and methods like `setState` won’t work.

    ## Other Utilities
- name: renderToNodeStream()
  id: react-dom-server#rendertonodestream
  summary: Render a React element to its initial HTML
  belongs_to: ReactDOMServer
  description: |-
    ### `renderToNodeStream()` (Deprecated)

    ``` jsx
    ReactDOMServer.renderToNodeStream(element)
    ```

    Render a React element to its initial HTML. Returns a [Node.js Readable stream](https://nodejs.org/api/stream.html#stream_readable_streams) that outputs an HTML string. The HTML output by this stream is exactly equal to what [`ReactDOMServer.renderToString`](#rendertostring) would return. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.

    If you call [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.

    > Note:
    >
    > Server-only. This API is not available in the browser.
    >
    > The stream returned from this method will return a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like [iconv-lite](https://www.npmjs.com/package/iconv-lite), which provides transform streams for transcoding text.
- name: renderToPipeableStream()
  id: react-dom-server#rendertopipeablestream
  summary: Render a React element to its initial HTML
  belongs_to: ReactDOMServer
  description: |-
    ### `renderToPipeableStream()`

    ``` jsx
    ReactDOMServer.renderToPipeableStream(element, options)
    ```

    Render a React element to its initial HTML. Returns a stream with a `pipe(res)` method to pipe the output and `abort()` to abort the request. Fully supports Suspense and streaming of HTML with “delayed” content blocks “popping in” via inline `<script>` tags later. [Read more](https://github.com/reactwg/react-18/discussions/37)

    If you call [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.

    ``` jsx
    let didError = false;
    const stream = renderToPipeableStream(
      <App />,
      {
        onShellReady() {
          // The content above all Suspense boundaries is ready.
          // If something errored before we started streaming, we set the error code appropriately.
          res.statusCode = didError ? 500 : 200;
          res.setHeader('Content-type', 'text/html');
          stream.pipe(res);
        },
        onShellError(error) {
          // Something errored before we could complete the shell so we emit an alternative shell.
          res.statusCode = 500;
          res.send(
            '<!doctype html><p>Loading...</p><script src="clientrender.js"></script>'
          );
        },
        onAllReady() {
          // If you don't want streaming, use this instead of onShellReady.
          // This will fire after the entire page content is ready.
          // You can use this for crawlers or static generation.

          // res.statusCode = didError ? 500 : 200;
          // res.setHeader('Content-type', 'text/html');
          // stream.pipe(res);
        },
        onError(err) {
          didError = true;
          console.error(err);
        },
      }
    );
    ```

    See the [full list of options](https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-dom/src/server/ReactDOMFizzServerNode.js#L36-L46).

    > Note:
    >
    > This is a Node.js-specific API. Environments with [Web Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API), like Deno and modern edge runtimes, should use [`renderToReadableStream`](#rendertoreadablestream) instead.
- name: renderToReadableStream()
  id: react-dom-server#rendertoreadablestream
  summary: Streams a React element to its initial HTML
  belongs_to: ReactDOMServer
  description: "### `renderToReadableStream()`\n\n``` jsx\nReactDOMServer.renderToReadableStream(element, options);\n```\n\nStreams a React element to its initial HTML. Returns a Promise that resolves to a [Readable Stream](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream). Fully supports Suspense and streaming of HTML. [Read more](https://github.com/reactwg/react-18/discussions/127)\n\nIf you call [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.\n\n``` jsx\nlet controller = new AbortController();\nlet didError = false;\ntry {\n  let stream = await renderToReadableStream(\n    <html>\n      <body>Success</body>\n    </html>,\n    {\n      signal: controller.signal,\n      onError(error) {\n        didError = true;\n        console.error(error);\n      }\n    }\n  );\n  \n  // This is to wait for all Suspense boundaries to be ready. You can uncomment\n  // this line if you want to buffer the entire HTML instead of streaming it.\n  // You can use this for crawlers or static generation:\n\n  // await stream.allReady;\n\n  return new Response(stream, {\n    status: didError ? 500 : 200,\n    headers: {'Content-Type': 'text/html'},\n  });\n} catch (error) {\n  return new Response(\n    '<!doctype html><p>Loading...</p><script src=\"clientrender.js\"></script>',\n    {\n      status: 500,\n      headers: {'Content-Type': 'text/html'},\n    }\n  );\n}\n```\n\nSee the [full list of options](https://github.com/facebook/react/blob/14c2be8dac2d5482fda8a0906a31d239df8551fc/packages/react-dom/src/server/ReactDOMFizzServerBrowser.js#L27-L35).\n\n> Note:\n>\n> This API depends on [Web Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API). For Node.js, use [`renderToPipeableStream`](#rendertopipeablestream) instead."
- name: renderToStaticMarkup()
  id: react-dom-server#rendertostaticmarkup
  summary: Similar to renderToString, except this doesn’t create extra DOM attributes that React uses internally, such as data-reactroot
  belongs_to: ReactDOMServer
  description: "### `renderToStaticMarkup()`\n\n``` jsx\nReactDOMServer.renderToStaticMarkup(element)\n```\n\nSimilar to [`renderToString`](#rendertostring), except this doesn’t create extra DOM attributes that React uses internally, such as `data-reactroot`. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.\n\nIf you plan to use React on the client to make the markup interactive, do not use this method. Instead, use [`renderToString`](#rendertostring) on the server and [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on the client.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-dom-server.html](https://reactjs.org/docs/react-dom-server.html)"
- name: renderToStaticNodeStream()
  id: react-dom-server#rendertostaticnodestream
  summary: Similar to renderToNodeStream, except this doesn’t create extra DOM attributes that React uses internally, such as data-reactroot
  belongs_to: ReactDOMServer
  description: |-
    ### `renderToStaticNodeStream()`

    ``` jsx
    ReactDOMServer.renderToStaticNodeStream(element)
    ```

    Similar to [`renderToNodeStream`](#rendertonodestream), except this doesn’t create extra DOM attributes that React uses internally, such as `data-reactroot`. This is useful if you want to use React as a simple static page generator, as stripping away the extra attributes can save some bytes.

    The HTML output by this stream is exactly equal to what [`ReactDOMServer.renderToStaticMarkup`](#rendertostaticmarkup) would return.

    If you plan to use React on the client to make the markup interactive, do not use this method. Instead, use [`renderToNodeStream`](#rendertonodestream) on the server and [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on the client.

    > Note:
    >
    > Server-only. This API is not available in the browser.
    >
    > The stream returned from this method will return a byte stream encoded in utf-8. If you need a stream in another encoding, take a look at a project like [iconv-lite](https://www.npmjs.com/package/iconv-lite), which provides transform streams for transcoding text.
- name: renderToString()
  id: react-dom-server#rendertostring
  summary: Render a React element to its initial HTML
  belongs_to: ReactDOMServer
  description: |-
    ### `renderToString()`

    ``` jsx
    ReactDOMServer.renderToString(element)
    ```

    Render a React element to its initial HTML. React will return an HTML string. You can use this method to generate HTML on the server and send the markup down on the initial request for faster page loads and to allow search engines to crawl your pages for SEO purposes.

    If you call [`ReactDOM.hydrateRoot()`](react-dom-client#hydrateroot) on a node that already has this server-rendered markup, React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.

    > Note
    >
    > This API has limited Suspense support and does not support streaming.
    >
    > On the server, it is recommended to use either [`renderToPipeableStream`](#rendertopipeablestream) (for Node.js) or [`renderToReadableStream`](#rendertoreadablestream) (for Web Streams) instead.
- name: requestAnimationFrame
  id: faq-functions#requestanimationframe-throttling
  summary: requestAnimationFrame is a way of queuing a function to be executed in the browser at the optimal time for rendering performance
  belongs_to: Passing Functions to Components
  description: "#### `requestAnimationFrame` throttling\n\n[`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) is a way of queuing a function to be executed in the browser at the optimal time for rendering performance. A function that is queued with `requestAnimationFrame` will fire in the next frame. The browser will work hard to ensure that there are 60 frames per second (60 fps). However, if the browser is unable to it will naturally *limit* the amount of frames in a second. For example, a device might only be able to handle 30 fps and so you will only get 30 frames in that second. Using `requestAnimationFrame` for throttling is a useful technique in that it prevents you from doing more than 60 updates in a second. If you are doing 100 updates in a second this creates additional work for the browser that the user will not see anyway.\n\n> **Note:**\n>\n> Using this technique will only capture the last published value in a frame. You can see an example of how this optimization works on [`MDN`](https://developer.mozilla.org/en-US/docs/Web/Events/scroll)\n\n``` jsx\nimport rafSchedule from 'raf-schd';\n\nclass ScrollListener extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleScroll = this.handleScroll.bind(this);\n\n    // Create a new function to schedule updates.\n    this.scheduleUpdate = rafSchedule(\n      point => this.props.onScroll(point)\n    );\n  }\n\n  handleScroll(e) {\n    // When we receive a scroll event, schedule an update.\n    // If we receive many updates within a frame, we'll only publish the latest value.\n    this.scheduleUpdate({ x: e.clientX, y: e.clientY });\n  }\n\n  componentWillUnmount() {\n    // Cancel any pending updates since we're unmounting.\n    this.scheduleUpdate.cancel();\n  }\n\n  render() {\n    return (\n      <div\n        style={{ overflow: 'scroll' }}\n        onScroll={this.handleScroll}\n      >\n        <img src=\"/my-huge-image.jpg\" />\n      </div>\n    );\n  }\n}\n```\n\n#### Testing your rate limiting\n\nWhen testing your rate limiting code works correctly it is helpful to have the ability to fast forward time. If you are using [`jest`](https://facebook.github.io/jest/) then you can use [`mock timers`](https://facebook.github.io/jest/docs/en/timer-mocks.html) to fast forward time. If you are using `requestAnimationFrame` throttling then you may find [`raf-stub`](https://github.com/alexreardon/raf-stub) to be a useful tool to control the ticking of animation frames.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/faq-functions.html](https://reactjs.org/docs/faq-functions.html)"
- name: Rules of Hooks
  id: hooks-rules
  summary: Hooks are a new addition in React 16.8
  description: "# Rules of Hooks\n\n*Hooks* are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\nHooks are JavaScript functions, but you need to follow two rules when using them. We provide a [linter plugin](https://www.npmjs.com/package/eslint-plugin-react-hooks) to enforce these rules automatically:\n\n### Only Call Hooks at the Top Level\n\n**Don’t call Hooks inside loops, conditions, or nested functions.** Instead, always use Hooks at the top level of your React function, before any early returns. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple `useState` and `useEffect` calls. (If you’re curious, we’ll explain this in depth [below](#explanation).)\n\n### Only Call Hooks from React Functions\n\n**Don’t call Hooks from regular JavaScript functions.** Instead, you can:\n\n- ✅ Call Hooks from React function components.\n- ✅ Call Hooks from custom Hooks (we’ll learn about them [on the next page](hooks-custom)).\n\nBy following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.\n\n## ESLint Plugin\n\nWe released an ESLint plugin called [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks) that enforces these two rules. You can add this plugin to your project if you’d like to try it:\n\nThis plugin is included by default in [Create React App](create-a-new-react-app#create-react-app).\n\n``` bash\nnpm install eslint-plugin-react-hooks --save-dev\n```\n\n``` jsx\n// Your ESLint configuration\n{\n  \"plugins\": [\n    // ...\n    \"react-hooks\"\n  ],\n  \"rules\": {\n    // ...\n    \"react-hooks/rules-of-hooks\": \"error\", // Checks rules of Hooks\n    \"react-hooks/exhaustive-deps\": \"warn\" // Checks effect dependencies\n  }\n}\n```\n\n**You can skip to the next page explaining how to write [your own Hooks](hooks-custom) now.** On this page, we’ll continue by explaining the reasoning behind these rules.\n\n## Explanation\n\nAs we [learned earlier](hooks-state#tip-using-multiple-state-variables), we can use multiple State or Effect Hooks in a single component:\n\n``` jsx\nfunction Form() {\n  // 1. Use the name state variable\n  const [name, setName] = useState('Mary');\n\n  // 2. Use an effect for persisting the form\n  useEffect(function persistForm() {\n    localStorage.setItem('formData', name);\n  });\n\n  // 3. Use the surname state variable\n  const [surname, setSurname] = useState('Poppins');\n\n  // 4. Use an effect for updating the title\n  useEffect(function updateTitle() {\n    document.title = name + ' ' + surname;\n  });\n\n  // ...\n}\n```\n\nSo how does React know which state corresponds to which `useState` call? The answer is that **React relies on the order in which Hooks are called**. Our example works because the order of the Hook calls is the same on every render:\n\n``` jsx\n// ------------\n// First render\n// ------------\nuseState('Mary')           // 1. Initialize the name state variable with 'Mary'\nuseEffect(persistForm)     // 2. Add an effect for persisting the form\nuseState('Poppins')        // 3. Initialize the surname state variable with 'Poppins'\nuseEffect(updateTitle)     // 4. Add an effect for updating the title\n\n// -------------\n// Second render\n// -------------\nuseState('Mary')           // 1. Read the name state variable (argument is ignored)\nuseEffect(persistForm)     // 2. Replace the effect for persisting the form\nuseState('Poppins')        // 3. Read the surname state variable (argument is ignored)\nuseEffect(updateTitle)     // 4. Replace the effect for updating the title\n\n// ...\n```\n\nAs long as the order of the Hook calls is the same between renders, React can associate some local state with each of them. But what happens if we put a Hook call (for example, the `persistForm` effect) inside a condition?\n\n``` jsx\n  // 🔴 We're breaking the first rule by using a Hook in a condition\n  if (name !== '') {\n    useEffect(function persistForm() {\n      localStorage.setItem('formData', name);\n    });\n  }\n```\n\nThe `name !== ''` condition is `true` on the first render, so we run this Hook. However, on the next render the user might clear the form, making the condition `false`. Now that we skip this Hook during rendering, the order of the Hook calls becomes different:\n\n``` jsx\nuseState('Mary')           // 1. Read the name state variable (argument is ignored)\n// useEffect(persistForm)  // 🔴 This Hook was skipped!\nuseState('Poppins')        // 🔴 2 (but was 3). Fail to read the surname state variable\nuseEffect(updateTitle)     // 🔴 3 (but was 4). Fail to replace the effect\n```\n\nReact wouldn’t know what to return for the second `useState` Hook call. React expected that the second Hook call in this component corresponds to the `persistForm` effect, just like during the previous render, but it doesn’t anymore. From that point, every next Hook call after the one we skipped would also shift by one, leading to bugs.\n\n**This is why Hooks must be called on the top level of our components.** If we want to run an effect conditionally, we can put that condition *inside* our Hook:\n\n``` jsx\n  useEffect(function persistForm() {\n    // 👍 We're not breaking the first rule anymore\n    if (name !== '') {\n      localStorage.setItem('formData', name);\n    }\n  });\n```\n\n**Note that you don’t need to worry about this problem if you use the [provided lint rule](https://www.npmjs.com/package/eslint-plugin-react-hooks).** But now you also know *why* Hooks work this way, and which issues the rule is preventing.\n\n## Next Steps\n\nFinally, we’re ready to learn about [writing your own Hooks](hooks-custom)! Custom Hooks let you combine Hooks provided by React into your own abstractions, and reuse common stateful logic between different components.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/hooks-rules.html](https://reactjs.org/docs/hooks-rules.html)"
- name: scryRenderedComponentsWithType()
  id: test-utils#scryrenderedcomponentswithtype
  summary: Finds all instances of components with type equal to componentClass
  belongs_to: Test Utilities
  description: |-
    ### `scryRenderedComponentsWithType()`

    ``` jsx
    scryRenderedComponentsWithType(
      tree,
      componentClass
    )
    ```

    Finds all instances of components with type equal to `componentClass`.
- name: scryRenderedDOMComponentsWithClass()
  id: test-utils#scryrendereddomcomponentswithclass
  summary: Finds all DOM elements of components in the rendered tree that are DOM components with the class name matching className
  belongs_to: Test Utilities
  description: |-
    ### `scryRenderedDOMComponentsWithClass()`

    ``` jsx
    scryRenderedDOMComponentsWithClass(
      tree,
      className
    )
    ```

    Finds all DOM elements of components in the rendered tree that are DOM components with the class name matching `className`.
- name: scryRenderedDOMComponentsWithTag()
  id: test-utils#scryrendereddomcomponentswithtag
  summary: Finds all DOM elements of components in the rendered tree that are DOM components with the tag name matching tagName
  belongs_to: Test Utilities
  description: |-
    ### `scryRenderedDOMComponentsWithTag()`

    ``` jsx
    scryRenderedDOMComponentsWithTag(
      tree,
      tagName
    )
    ```

    Finds all DOM elements of components in the rendered tree that are DOM components with the tag name matching `tagName`.
- name: setState()
  id: react-component#setstate
  summary: setState() enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state
  belongs_to: React.Component
  description: |-
    ### `setState()`

    ``` jsx
    setState(updater[, callback])
    ```

    `setState()` enqueues changes to the component state and tells React that this component and its children need to be re-rendered with the updated state. This is the primary method you use to update the user interface in response to event handlers and server responses.

    Think of `setState()` as a *request* rather than an immediate command to update the component. For better perceived performance, React may delay it, and then update several components in a single pass. In the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in [`flushSync`](react-dom#flushsync), but this may hurt performance.

    `setState()` does not always immediately update the component. It may batch or defer the update until later. This makes reading `this.state` right after calling `setState()` a potential pitfall. Instead, use `componentDidUpdate` or a `setState` callback (`setState(updater, callback)`), either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, read about the `updater` argument below.

    `setState()` will always lead to a re-render unless `shouldComponentUpdate()` returns `false`. If mutable objects are being used and conditional rendering logic cannot be implemented in `shouldComponentUpdate()`, calling `setState()` only when the new state differs from the previous state will avoid unnecessary re-renders.

    The first argument is an `updater` function with the signature:

    ``` jsx
    (state, props) => stateChange
    ```

    `state` is a reference to the component state at the time the change is being applied. It should not be directly mutated. Instead, changes should be represented by building a new object based on the input from `state` and `props`. For instance, suppose we wanted to increment a value in state by `props.step`:

    ``` jsx
    this.setState((state, props) => {
      return {counter: state.counter + props.step};
    });
    ```

    Both `state` and `props` received by the updater function are guaranteed to be up-to-date. The output of the updater is shallowly merged with `state`.

    The second parameter to `setState()` is an optional callback function that will be executed once `setState` is completed and the component is re-rendered. Generally we recommend using `componentDidUpdate()` for such logic instead.

    You may optionally pass an object as the first argument to `setState()` instead of a function:

    ``` jsx
    setState(stateChange[, callback])
    ```

    This performs a shallow merge of `stateChange` into the new state, e.g., to adjust a shopping cart item quantity:

    ``` jsx
    this.setState({quantity: 2})
    ```

    This form of `setState()` is also asynchronous, and multiple calls during the same cycle may be batched together. For example, if you attempt to increment an item quantity more than once in the same cycle, that will result in the equivalent of:

    ``` javascript
    Object.assign(
      previousState,
      {quantity: state.quantity + 1},
      {quantity: state.quantity + 1},
      ...
    )
    ```

    Subsequent calls will override values from previous calls in the same cycle, so the quantity will only be incremented once. If the next state depends on the current state, we recommend using the updater function form, instead:

    ``` jsx
    this.setState((state) => {
      return {quantity: state.quantity + 1};
    });
    ```

    For more detail, see:

    - [State and Lifecycle guide](state-and-lifecycle)
    - [In depth: When and why are `setState()` calls batched?](https://stackoverflow.com/a/48610973/458193)
    - [In depth: Why isn’t `this.state` updated immediately?](https://github.com/facebook/react/issues/11527#issuecomment-360199710)
- name: shouldComponentUpdate()
  id: react-component#shouldcomponentupdate
  summary: Use shouldComponentUpdate() to let React know if a component’s output is not affected by the current change in state or props
  belongs_to: React.Component
  description: |-
    ### `shouldComponentUpdate()`

    ``` jsx
    shouldComponentUpdate(nextProps, nextState)
    ```

    Use `shouldComponentUpdate()` to let React know if a component’s output is not affected by the current change in state or props. The default behavior is to re-render on every state change, and in the vast majority of cases you should rely on the default behavior.

    `shouldComponentUpdate()` is invoked before rendering when new props or state are being received. Defaults to `true`. This method is not called for the initial render or when `forceUpdate()` is used.

    This method only exists as a **[performance optimization](optimizing-performance).** Do not rely on it to “prevent” a rendering, as this can lead to bugs. **Consider using the built-in [`PureComponent`](react-api#reactpurecomponent)** instead of writing `shouldComponentUpdate()` by hand. `PureComponent` performs a shallow comparison of props and state, and reduces the chance that you’ll skip a necessary update.

    If you are confident you want to write it by hand, you may compare `this.props` with `nextProps` and `this.state` with `nextState` and return `false` to tell React the update can be skipped. Note that returning `false` does not prevent child components from re-rendering when *their* state changes.

    We do not recommend doing deep equality checks or using `JSON.stringify()` in `shouldComponentUpdate()`. It is very inefficient and will harm performance.

    Currently, if `shouldComponentUpdate()` returns `false`, then [`UNSAFE_componentWillUpdate()`](#unsafe_componentwillupdate), [`render()`](#render), and [`componentDidUpdate()`](#componentdidupdate) will not be invoked. In the future React may treat `shouldComponentUpdate()` as a hint rather than a strict directive, and returning `false` may still result in a re-rendering of the component.
- name: Simulate
  id: test-utils#simulate
  summary: Simulate an event dispatch on a DOM node with optional eventData event data
  belongs_to: Test Utilities
  description: "### `Simulate`\n\n``` jsx\nSimulate.{eventName}(\n  element,\n  [eventData]\n)\n```\n\nSimulate an event dispatch on a DOM node with optional `eventData` event data.\n\n`Simulate` has a method for [every event that React understands](events#supported-events).\n\n**Clicking an element**\n\n``` jsx\n// <button ref={(node) => this.button = node}>...</button>\nconst node = this.button;\nReactTestUtils.Simulate.click(node);\n```\n\n**Changing the value of an input field and then pressing ENTER.**\n\n``` jsx\n// <input ref={(node) => this.textInput = node} />\nconst node = this.textInput;\nnode.value = 'giraffe';\nReactTestUtils.Simulate.change(node);\nReactTestUtils.Simulate.keyDown(node, {key: \"Enter\", keyCode: 13, which: 13});\n```\n\n> Note\n>\n> You will have to provide any event property that you’re using in your component (e.g. keyCode, which, etc…) as React is not creating any of these for you.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/test-utils.html](https://reactjs.org/docs/test-utils.html)"
- name: Single-page Application
  id: glossary#single-page-application
  summary: A single-page application is an application that loads a single HTML page and all the necessary assets (such as JavaScript and CSS) required for the application to run
  belongs_to: Glossary of React Terms
  description: |-
    ## Single-page Application

    A single-page application is an application that loads a single HTML page and all the necessary assets (such as JavaScript and CSS) required for the application to run. Any interactions with the page or subsequent pages do not require a round trip to the server which means the page is not reloaded.

    Though you may build a single-page application in React, it is not a requirement. React can also be used for enhancing small parts of existing websites with additional interactivity. Code written in React can coexist peacefully with markup rendered on the server by something like PHP, or with other client-side libraries. In fact, this is exactly how React is being used at Facebook.
- name: state
  id: glossary#state
  summary: A component needs state when some data associated with it changes over time
  belongs_to: Glossary of React Terms
  description: |-
    ### [`state`](state-and-lifecycle#adding-local-state-to-a-class)

    A component needs `state` when some data associated with it changes over time. For example, a `Checkbox` component might need `isChecked` in its state, and a `NewsFeed` component might want to keep track of `fetchedPosts` in its state.

    The most important difference between `state` and `props` is that `props` are passed from a parent component, but `state` is managed by the component itself. A component cannot change its `props`, but it can change its `state`.

    For each particular piece of changing data, there should be just one component that “owns” it in its state. Don’t try to synchronize states of two different components. Instead, [lift it up](lifting-state-up) to their closest shared ancestor, and pass it down as props to both of them.
- name: state
  id: react-component#state
  summary: The state contains data specific to this component that may change over time
  belongs_to: React.Component
  description: "### `state`\n\nThe state contains data specific to this component that may change over time. The state is user-defined, and it should be a plain JavaScript object.\n\nIf some value isn’t used for rendering or data flow (for example, a timer ID), you don’t have to put it in the state. Such values can be defined as fields on the component instance.\n\nSee [State and Lifecycle](state-and-lifecycle) for more information about the state.\n\nNever mutate `this.state` directly, as calling `setState()` afterwards may replace the mutation you made. Treat `this.state` as if it were immutable.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/react-component.html](https://reactjs.org/docs/react-component.html)"
- name: State and Lifecycle
  id: state-and-lifecycle
  summary: This page introduces the concept of state and lifecycle in a React component
  description: "# State and Lifecycle\n\nThis page introduces the concept of state and lifecycle in a React component. You can find a [detailed component API reference here](react-component).\n\nConsider the ticking clock example from [one of the previous sections](rendering-elements#updating-the-rendered-element). In [Rendering Elements](rendering-elements#rendering-an-element-into-the-dom), we have only learned one way to update the UI. We call `root.render()` to change the rendered output:\n\n``` jsx\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n  \nfunction tick() {\n  const element = (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {new Date().toLocaleTimeString()}.</h2>\n    </div>\n  );\n  root.render(element);\n}\n\nsetInterval(tick, 1000);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/gwoJZk?editors=0010)\n\nIn this section, we will learn how to make the `Clock` component truly reusable and encapsulated. It will set up its own timer and update itself every second.\n\nWe can start by encapsulating how the clock looks:\n\n``` jsx\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nfunction Clock(props) {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n      <h2>It is {props.date.toLocaleTimeString()}.</h2>\n    </div>\n  );\n}\n\nfunction tick() {\n  root.render(<Clock date={new Date()} />);\n}\n\nsetInterval(tick, 1000);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/dpdoYR?editors=0010)\n\nHowever, it misses a crucial requirement: the fact that the `Clock` sets up a timer and updates the UI every second should be an implementation detail of the `Clock`.\n\nIdeally we want to write this once and have the `Clock` update itself:\n\n``` jsx\nroot.render(<Clock />);\n```\n\nTo implement this, we need to add “state” to the `Clock` component.\n\nState is similar to props, but it is private and fully controlled by the component.\n\n## Converting a Function to a Class\n\nYou can convert a function component like `Clock` to a class in five steps:\n\n1.  Create an [ES6 class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes), with the same name, that extends `React.Component`.\n2.  Add a single empty method to it called `render()`.\n3.  Move the body of the function into the `render()` method.\n4.  Replace `props` with `this.props` in the `render()` body.\n5.  Delete the remaining empty function declaration.\n\n``` jsx\nclass Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/zKRGpo?editors=0010)\n\n`Clock` is now defined as a class rather than a function.\n\nThe `render` method will be called each time an update happens, but as long as we render `<Clock />` into the same DOM node, only a single instance of the `Clock` class will be used. This lets us use additional features such as local state and lifecycle methods.\n\n## Adding Local State to a Class\n\nWe will move the `date` from props to state in three steps:\n\n1.  Replace `this.props.date` with `this.state.date` in the `render()` method:\n\n``` jsx\nclass Clock extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\n2.  Add a [class constructor](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes#Constructor) that assigns the initial `this.state`:\n\n``` jsx\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\nNote how we pass `props` to the base constructor:\n\n``` jsx\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n```\n\nClass components should always call the base constructor with `props`.\n\n3.  Remove the `date` prop from the `<Clock />` element:\n\n``` jsx\nroot.render(<Clock />);\n```\n\nWe will later add the timer code back to the component itself.\n\nThe result looks like this:\n\n``` jsx\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Clock />);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/KgQpJd?editors=0010)\n\nNext, we’ll make the `Clock` set up its own timer and update itself every second.\n\n## Adding Lifecycle Methods to a Class\n\nIn applications with many components, it’s very important to free up resources taken by the components when they are destroyed.\n\nWe want to [set up a timer](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval) whenever the `Clock` is rendered to the DOM for the first time. This is called “mounting” in React.\n\nWe also want to [clear that timer](https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval) whenever the DOM produced by the `Clock` is removed. This is called “unmounting” in React.\n\nWe can declare special methods on the component class to run some code when a component mounts and unmounts:\n\n``` jsx\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n```\n\nThese methods are called “lifecycle methods”.\n\nThe `componentDidMount()` method runs after the component output has been rendered to the DOM. This is a good place to set up a timer:\n\n``` jsx\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n```\n\nNote how we save the timer ID right on `this` (`this.timerID`).\n\nWhile `this.props` is set up by React itself and `this.state` has a special meaning, you are free to add additional fields to the class manually if you need to store something that doesn’t participate in the data flow (like a timer ID).\n\nWe will tear down the timer in the `componentWillUnmount()` lifecycle method:\n\n``` jsx\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n```\n\nFinally, we will implement a method called `tick()` that the `Clock` component will run every second.\n\nIt will use `this.setState()` to schedule updates to the component local state:\n\n``` jsx\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date()};\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>\n      </div>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Clock />);\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/amqdNA?editors=0010)\n\nNow the clock ticks every second.\n\nLet’s quickly recap what’s going on and the order in which the methods are called:\n\n1.  When `<Clock />` is passed to `root.render()`, React calls the constructor of the `Clock` component. Since `Clock` needs to display the current time, it initializes `this.state` with an object including the current time. We will later update this state.\n2.  React then calls the `Clock` component’s `render()` method. This is how React learns what should be displayed on the screen. React then updates the DOM to match the `Clock`’s render output.\n3.  When the `Clock` output is inserted in the DOM, React calls the `componentDidMount()` lifecycle method. Inside it, the `Clock` component asks the browser to set up a timer to call the component’s `tick()` method once a second.\n4.  Every second the browser calls the `tick()` method. Inside it, the `Clock` component schedules a UI update by calling `setState()` with an object containing the current time. Thanks to the `setState()` call, React knows the state has changed, and calls the `render()` method again to learn what should be on the screen. This time, `this.state.date` in the `render()` method will be different, and so the render output will include the updated time. React updates the DOM accordingly.\n5.  If the `Clock` component is ever removed from the DOM, React calls the `componentWillUnmount()` lifecycle method so the timer is stopped.\n\n## Using State Correctly\n\nThere are three things you should know about `setState()`.\n\n### Do Not Modify State Directly\n\nFor example, this will not re-render a component:\n\n``` jsx\n// Wrong\nthis.state.comment = 'Hello';\n```\n\nInstead, use `setState()`:\n\n``` jsx\n// Correct\nthis.setState({comment: 'Hello'});\n```\n\nThe only place where you can assign `this.state` is the constructor.\n\n### State Updates May Be Asynchronous\n\nReact may batch multiple `setState()` calls into a single update for performance.\n\nBecause `this.props` and `this.state` may be updated asynchronously, you should not rely on their values for calculating the next state.\n\nFor example, this code may fail to update the counter:\n\n``` jsx\n// Wrong\nthis.setState({\n  counter: this.state.counter + this.props.increment,\n});\n```\n\nTo fix it, use a second form of `setState()` that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:\n\n``` jsx\n// Correct\nthis.setState((state, props) => ({\n  counter: state.counter + props.increment\n}));\n```\n\nWe used an [arrow function](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions) above, but it also works with regular functions:\n\n``` jsx\n// Correct\nthis.setState(function(state, props) {\n  return {\n    counter: state.counter + props.increment\n  };\n});\n```\n\n### State Updates are Merged\n\nWhen you call `setState()`, React merges the object you provide into the current state.\n\nFor example, your state may contain several independent variables:\n\n``` jsx\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n      comments: []\n    };\n  }\n```\n\nThen you can update them independently with separate `setState()` calls:\n\n``` jsx\n  componentDidMount() {\n    fetchPosts().then(response => {\n      this.setState({\n        posts: response.posts\n      });\n    });\n\n    fetchComments().then(response => {\n      this.setState({\n        comments: response.comments\n      });\n    });\n  }\n```\n\nThe merging is shallow, so `this.setState({comments})` leaves `this.state.posts` intact, but completely replaces `this.state.comments`.\n\n## The Data Flows Down\n\nNeither parent nor child components can know if a certain component is stateful or stateless, and they shouldn’t care whether it is defined as a function or a class.\n\nThis is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it.\n\nA component may choose to pass its state down as props to its child components:\n\n``` jsx\n<FormattedDate date={this.state.date} />\n```\n\nThe `FormattedDate` component would receive the `date` in its props and wouldn’t know whether it came from the `Clock`’s state, from the `Clock`’s props, or was typed by hand:\n\n``` jsx\nfunction FormattedDate(props) {\n  return <h2>It is {props.date.toLocaleTimeString()}.</h2>;\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/zKRqNB?editors=0010)\n\nThis is commonly called a “top-down” or “unidirectional” data flow. Any state is always owned by some specific component, and any data or UI derived from that state can only affect components “below” them in the tree.\n\nIf you imagine a component tree as a waterfall of props, each component’s state is like an additional water source that joins it at an arbitrary point but also flows down.\n\nTo show that all components are truly isolated, we can create an `App` component that renders three `<Clock>`s:\n\n``` jsx\nfunction App() {\n  return (\n    <div>\n      <Clock />\n      <Clock />\n      <Clock />\n    </div>\n  );\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/vXdGmd?editors=0010)\n\nEach `Clock` sets up its own timer and updates independently.\n\nIn React apps, whether a component is stateful or stateless is considered an implementation detail of the component that may change over time. You can use stateless components inside stateful components, and vice versa.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/state-and-lifecycle.html](https://reactjs.org/docs/state-and-lifecycle.html)"
- name: static getDerivedStateFromError()
  id: react-component#static-getderivedstatefromerror
  summary: This lifecycle is invoked after an error has been thrown by a descendant component
  belongs_to: React.Component
  description: |-
    ### `static getDerivedStateFromError()`

    ``` jsx
    static getDerivedStateFromError(error)
    ```

    This lifecycle is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.

    ``` jsx
    class ErrorBoundary extends React.Component {
      constructor(props) {
        super(props);
        this.state = { hasError: false };
      }

      static getDerivedStateFromError(error) {
        // Update state so the next render will show the fallback UI.
        return { hasError: true };
      }

      render() {
        if (this.state.hasError) {
          // You can render any custom fallback UI
          return <h1>Something went wrong.</h1>;
        }

        return this.props.children;
      }
    }
    ```

    > Note
    >
    > `getDerivedStateFromError()` is called during the “render” phase, so side-effects are not permitted. For those use cases, use `componentDidCatch()` instead.
- name: static getDerivedStateFromProps()
  id: react-component#static-getderivedstatefromprops
  summary: getDerivedStateFromProps is invoked right before calling the render method, both on the initial mount and on subsequent updates
  belongs_to: React.Component
  description: |-
    ### `static getDerivedStateFromProps()`

    ``` jsx
    static getDerivedStateFromProps(props, state)
    ```

    `getDerivedStateFromProps` is invoked right before calling the render method, both on the initial mount and on subsequent updates. It should return an object to update the state, or `null` to update nothing.

    This method exists for [rare use cases](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#when-to-use-derived-state) where the state depends on changes in props over time. For example, it might be handy for implementing a `<Transition>` component that compares its previous and next children to decide which of them to animate in and out.

    Deriving state leads to verbose code and makes your components difficult to think about. [Make sure you’re familiar with simpler alternatives:](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html)

    - If you need to **perform a side effect** (for example, data fetching or an animation) in response to a change in props, use [`componentDidUpdate`](#componentdidupdate) lifecycle instead.
    - If you want to **re-compute some data only when a prop changes**, [use a memoization helper instead](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization).
    - If you want to **“reset” some state when a prop changes**, consider either making a component [fully controlled](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component) or [fully uncontrolled with a `key`](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key) instead.

    This method doesn’t have access to the component instance. If you’d like, you can reuse some code between `getDerivedStateFromProps()` and the other class methods by extracting pure functions of the component props and state outside the class definition.

    Note that this method is fired on *every* render, regardless of the cause. This is in contrast to `UNSAFE_componentWillReceiveProps`, which only fires when the parent causes a re-render and not as a result of a local `setState`.
- name: Static Type Checking
  id: static-type-checking
  summary: Static type checkers like Flow and TypeScript identify certain types of problems before you even run your code
  description: "# Static Type Checking\n\nStatic type checkers like [Flow](https://flow.org/) and [TypeScript](https://www.typescriptlang.org/) identify certain types of problems before you even run your code. They can also improve developer workflow by adding features like auto-completion. For this reason, we recommend using Flow or TypeScript instead of `PropTypes` for larger code bases.\n\n## Flow\n\n[Flow](https://flow.org/) is a static type checker for your JavaScript code. It is developed at Facebook and is often used with React. It lets you annotate the variables, functions, and React components with a special type syntax, and catch mistakes early. You can read an [introduction to Flow](https://flow.org/en/docs/getting-started/) to learn its basics.\n\nTo use Flow, you need to:\n\n- Add Flow to your project as a dependency.\n- Ensure that Flow syntax is stripped from the compiled code.\n- Add type annotations and run Flow to check them.\n\nWe will explain these steps below in detail.\n\n### Adding Flow to a Project\n\nFirst, navigate to your project directory in the terminal. You will need to run the following command:\n\nIf you use [Yarn](https://yarnpkg.com/), run:\n\n``` bash\nyarn add --dev flow-bin\n```\n\nIf you use [npm](https://www.npmjs.com/), run:\n\n``` bash\nnpm install --save-dev flow-bin\n```\n\nThis command installs the latest version of Flow into your project.\n\nNow, add `flow` to the `\"scripts\"` section of your `package.json` to be able to use this from the terminal:\n\n``` jsx\n{\n  // ...\n  \"scripts\": {\n    \"flow\": \"flow\",\n    // ...\n  },\n  // ...\n}\n```\n\nFinally, run one of the following commands:\n\nIf you use [Yarn](https://yarnpkg.com/), run:\n\n``` bash\nyarn run flow init\n```\n\nIf you use [npm](https://www.npmjs.com/), run:\n\n``` bash\nnpm run flow init\n```\n\nThis command will create a Flow configuration file that you will need to commit.\n\n### Stripping Flow Syntax from the Compiled Code\n\nFlow extends the JavaScript language with a special syntax for type annotations. However, browsers aren’t aware of this syntax, so we need to make sure it doesn’t end up in the compiled JavaScript bundle that is sent to the browser.\n\nThe exact way to do this depends on the tools you use to compile JavaScript.\n\n#### Create React App\n\nIf your project was set up using [Create React App](https://github.com/facebookincubator/create-react-app), congratulations! The Flow annotations are already being stripped by default so you don’t need to do anything else in this step.\n\n#### Babel\n\n> Note:\n>\n> These instructions are *not* for Create React App users. Even though Create React App uses Babel under the hood, it is already configured to understand Flow. Only follow this step if you *don’t* use Create React App.\n\nIf you manually configured Babel for your project, you will need to install a special preset for Flow.\n\nIf you use Yarn, run:\n\n``` bash\nyarn add --dev @babel/preset-flow\n```\n\nIf you use npm, run:\n\n``` bash\nnpm install --save-dev @babel/preset-flow\n```\n\nThen add the `flow` preset to your [Babel configuration](https://babeljs.io/docs/usage/babelrc/). For example, if you configure Babel through `.babelrc` file, it could look like this:\n\n``` jsx\n{\n  \"presets\": [\n    \"@babel/preset-flow\",\n    \"react\"\n  ]\n}\n```\n\nThis will let you use the Flow syntax in your code.\n\n> Note:\n>\n> Flow does not require the `react` preset, but they are often used together. Flow itself understands JSX syntax out of the box.\n\n#### Other Build Setups\n\nIf you don’t use either Create React App or Babel, you can use [flow-remove-types](https://github.com/flowtype/flow-remove-types) to strip the type annotations.\n\n### Running Flow\n\nIf you followed the instructions above, you should be able to run Flow for the first time.\n\n``` bash\nyarn flow\n```\n\nIf you use npm, run:\n\n``` bash\nnpm run flow\n```\n\nYou should see a message like:\n\n``` text\nNo errors!\n✨  Done in 0.17s.\n```\n\n### Adding Flow Type Annotations\n\nBy default, Flow only checks the files that include this annotation:\n\n``` jsx\n// @flow\n```\n\nTypically it is placed at the top of a file. Try adding it to some files in your project and run `yarn flow` or `npm run flow` to see if Flow already found any issues.\n\nThere is also [an option](https://flow.org/en/docs/config/options/#toc-all-boolean) to force Flow to check *all* files regardless of the annotation. This can be too noisy for existing projects, but is reasonable for a new project if you want to fully type it with Flow.\n\nNow you’re all set! We recommend to check out the following resources to learn more about Flow:\n\n- [Flow Documentation: Type Annotations](https://flow.org/en/docs/types/)\n- [Flow Documentation: Editors](https://flow.org/en/docs/editors/)\n- [Flow Documentation: React](https://flow.org/en/docs/react/)\n- [Linting in Flow](https://medium.com/flow-type/linting-in-flow-7709d7a7e969)\n\n## TypeScript\n\n[TypeScript](https://www.typescriptlang.org/) is a programming language developed by Microsoft. It is a typed superset of JavaScript, and includes its own compiler. Being a typed language, TypeScript can catch errors and bugs at build time, long before your app goes live. You can learn more about using TypeScript with React [here](https://github.com/Microsoft/TypeScript-React-Starter#typescript-react-starter).\n\nTo use TypeScript, you need to:\n\n- Add TypeScript as a dependency to your project\n- Configure the TypeScript compiler options\n- Use the right file extensions\n- Add definitions for libraries you use\n\nLet’s go over these in detail.\n\n### Using TypeScript with Create React App\n\nCreate React App supports TypeScript out of the box.\n\nTo create a **new project** with TypeScript support, run:\n\n``` bash\nnpx create-react-app my-app --template typescript\n```\n\nYou can also add it to an **existing Create React App project**, [as documented here](https://facebook.github.io/create-react-app/docs/adding-typescript).\n\n> Note:\n>\n> If you use Create React App, you can **skip the rest of this page**. It describes the manual setup which doesn’t apply to Create React App users.\n\n### Adding TypeScript to a Project\n\nIt all begins with running one command in your terminal.\n\nIf you use [Yarn](https://yarnpkg.com/), run:\n\n``` bash\nyarn add --dev typescript\n```\n\nIf you use [npm](https://www.npmjs.com/), run:\n\n``` bash\nnpm install --save-dev typescript\n```\n\nCongrats! You’ve installed the latest version of TypeScript into your project. Installing TypeScript gives us access to the `tsc` command. Before configuration, let’s add `tsc` to the “scripts” section in our `package.json`:\n\n``` jsx\n{\n  // ...\n  \"scripts\": {\n    \"build\": \"tsc\",\n    // ...\n  },\n  // ...\n}\n```\n\n### Configuring the TypeScript Compiler\n\nThe compiler is of no help to us until we tell it what to do. In TypeScript, these rules are defined in a special file called `tsconfig.json`. To generate this file:\n\nIf you use [Yarn](https://yarnpkg.com/), run:\n\n``` bash\nyarn run tsc --init\n```\n\nIf you use [npm](https://www.npmjs.com/), run:\n\n``` bash\nnpx tsc --init\n```\n\nLooking at the now generated `tsconfig.json`, you can see that there are many options you can use to configure the compiler. For a detailed description of all the options, check [here](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html).\n\nOf the many options, we’ll look at `rootDir` and `outDir`. In its true fashion, the compiler will take in typescript files and generate javascript files. However we don’t want to get confused with our source files and the generated output.\n\nWe’ll address this in two steps:\n\n- Firstly, let’s arrange our project structure like this. We’ll place all our source code in the `src` directory.\n\n``` text\n├── package.json\n├── src\n│   └── index.ts\n└── tsconfig.json\n```\n\n- Next, we’ll tell the compiler where our source code is and where the output should go.\n\n``` jsx\n// tsconfig.json\n\n{\n  \"compilerOptions\": {\n    // ...\n    \"rootDir\": \"src\",\n    \"outDir\": \"build\"\n    // ...\n  },\n}\n```\n\nGreat! Now when we run our build script the compiler will output the generated javascript to the `build` folder. The [TypeScript React Starter](https://github.com/Microsoft/TypeScript-React-Starter/blob/master/tsconfig.json) provides a `tsconfig.json` with a good set of rules to get you started.\n\nGenerally, you don’t want to keep the generated javascript in your source control, so be sure to add the build folder to your `.gitignore`.\n\n### File extensions\n\nIn React, you most likely write your components in a `.js` file. In TypeScript we have 2 file extensions:\n\n`.ts` is the default file extension while `.tsx` is a special extension used for files which contain `JSX`.\n\n### Running TypeScript\n\nIf you followed the instructions above, you should be able to run TypeScript for the first time.\n\n``` bash\nyarn build\n```\n\nIf you use npm, run:\n\n``` bash\nnpm run build\n```\n\nIf you see no output, it means that it completed successfully.\n\n### Type Definitions\n\nTo be able to show errors and hints from other packages, the compiler relies on declaration files. A declaration file provides all the type information about a library. This enables us to use javascript libraries like those on npm in our project.\n\nThere are two main ways to get declarations for a library:\n\n**Bundled** - The library bundles its own declaration file. This is great for us, since all we need to do is install the library, and we can use it right away. To check if a library has bundled types, look for an `index.d.ts` file in the project. Some libraries will have it specified in their `package.json` under the `typings` or `types` field.\n\n**[DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)** - DefinitelyTyped is a huge repository of declarations for libraries that don’t bundle a declaration file. The declarations are crowd-sourced and managed by Microsoft and open source contributors. React for example doesn’t bundle its own declaration file. Instead we can get it from DefinitelyTyped. To do so enter this command in your terminal.\n\n``` bash\n# yarn\nyarn add --dev @types/react\n\n# npm\nnpm i --save-dev @types/react\n```\n\n**Local Declarations** Sometimes the package that you want to use doesn’t bundle declarations nor is it available on DefinitelyTyped. In that case, we can have a local declaration file. To do this, create a `declarations.d.ts` file in the root of your source directory. A simple declaration could look like this:\n\n``` typescript\ndeclare module 'querystring' {\n  export function stringify(val: object): string\n  export function parse(val: string): object\n}\n```\n\nYou are now ready to code! We recommend to check out the following resources to learn more about TypeScript:\n\n- [TypeScript Documentation: Everyday Types](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html)\n- [TypeScript Documentation: Migrating from JavaScript](https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html)\n- [TypeScript Documentation: React and Webpack](https://www.typescriptlang.org/docs/handbook/react-&-webpack.html)\n\n## ReScript\n\n[ReScript](https://rescript-lang.org/) is a typed language that compiles to JavaScript. Some of its core features are guaranteed 100% type coverage, first-class JSX support and [dedicated React bindings](https://rescript-lang.org/docs/react/latest/introduction) to allow integration in existing JS / TS React codebases.\n\nYou can find more infos on integrating ReScript in your existing JS / React codebase [here](https://rescript-lang.org/docs/manual/latest/installation#integrate-into-an-existing-js-project).\n\n## Kotlin\n\n[Kotlin](https://kotlinlang.org/) is a statically typed language developed by JetBrains. Its target platforms include the JVM, Android, LLVM, and [JavaScript](https://kotlinlang.org/docs/reference/js-overview.html).\n\nJetBrains develops and maintains several tools specifically for the React community: [React bindings](https://github.com/JetBrains/kotlin-wrappers) as well as [Create React Kotlin App](https://github.com/JetBrains/create-react-kotlin-app). The latter helps you start building React apps with Kotlin with no build configuration.\n\n## Other Languages\n\nNote there are other statically typed languages that compile to JavaScript and are thus React compatible. For example, [F#/Fable](https://fable.io/) with [elmish-react](https://elmish.github.io/react). Check out their respective sites for more information, and feel free to add more statically typed languages that work with React to this page!\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/static-type-checking.html](https://reactjs.org/docs/static-type-checking.html)"
- name: Strict Mode
  id: strict-mode
  summary: StrictMode is a tool for highlighting potential problems in an application
  description: "# Strict Mode\n\n`StrictMode` is a tool for highlighting potential problems in an application. Like `Fragment`, `StrictMode` does not render any visible UI. It activates additional checks and warnings for its descendants.\n\n> Note:\n>\n> Strict mode checks are run in development mode only; *they do not impact the production build*.\n\nYou can enable strict mode for any part of your application. For example:\n\n``` jsx\nimport React from 'react';\n\nfunction ExampleApplication() {\n  return (\n    <div>\n      <Header />\n      <React.StrictMode>\n        <div>\n          <ComponentOne />\n          <ComponentTwo />\n        </div>\n      </React.StrictMode>\n      <Footer />\n    </div>\n  );\n}\n```\n\nIn the above example, strict mode checks will *not* be run against the `Header` and `Footer` components. However, `ComponentOne` and `ComponentTwo`, as well as all of their descendants, will have the checks.\n\n`StrictMode` currently helps with:\n\n- [Identifying components with unsafe lifecycles](#identifying-unsafe-lifecycles)\n- [Warning about legacy string ref API usage](#warning-about-legacy-string-ref-api-usage)\n- [Warning about deprecated findDOMNode usage](#warning-about-deprecated-finddomnode-usage)\n- [Detecting unexpected side effects](#detecting-unexpected-side-effects)\n- [Detecting legacy context API](#detecting-legacy-context-api)\n- [Ensuring reusable state](#ensuring-reusable-state)\n\nAdditional functionality will be added with future releases of React.\n\n### Identifying unsafe lifecycles\n\nAs explained [in this blog post](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html), certain legacy lifecycle methods are unsafe for use in async React applications. However, if your application uses third party libraries, it can be difficult to ensure that these lifecycles aren’t being used. Fortunately, strict mode can help with this!\n\nWhen strict mode is enabled, React compiles a list of all class components using the unsafe lifecycles, and logs a warning message with information about these components, like so:\n\n[](https://reactjs.org/static/e4fdbff774b356881123e69ad88eda88/1628f/strict-mode-unsafe-lifecycles-warning.png)\n\nAddressing the issues identified by strict mode *now* will make it easier for you to take advantage of concurrent rendering in future releases of React.\n\n### Warning about legacy string ref API usage\n\nPreviously, React provided two ways for managing refs: the legacy string ref API and the callback API. Although the string ref API was the more convenient of the two, it had [several downsides](https://github.com/facebook/react/issues/1373) and so our official recommendation was to [use the callback form instead](refs-and-the-dom#legacy-api-string-refs).\n\nReact 16.3 added a third option that offers the convenience of a string ref without any of the downsides:\n\n``` jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.inputRef = React.createRef();\n  }\n\n  render() {\n    return <input type=\"text\" ref={this.inputRef} />;\n  }\n\n  componentDidMount() {\n    this.inputRef.current.focus();\n  }\n}\n```\n\nSince object refs were largely added as a replacement for string refs, strict mode now warns about usage of string refs.\n\n> **Note:**\n>\n> Callback refs will continue to be supported in addition to the new `createRef` API.\n>\n> You don’t need to replace callback refs in your components. They are slightly more flexible, so they will remain as an advanced feature.\n\n[Learn more about the new `createRef` API here.](refs-and-the-dom)\n\n### Warning about deprecated findDOMNode usage\n\nReact used to support `findDOMNode` to search the tree for a DOM node given a class instance. Normally you don’t need this because you can [attach a ref directly to a DOM node](refs-and-the-dom#creating-refs).\n\n`findDOMNode` can also be used on class components but this was breaking abstraction levels by allowing a parent to demand that certain children were rendered. It creates a refactoring hazard where you can’t change the implementation details of a component because a parent might be reaching into its DOM node. `findDOMNode` only returns the first child, but with the use of Fragments, it is possible for a component to render multiple DOM nodes. `findDOMNode` is a one time read API. It only gave you an answer when you asked for it. If a child component renders a different node, there is no way to handle this change. Therefore `findDOMNode` only worked if components always return a single DOM node that never changes.\n\nYou can instead make this explicit by passing a ref to your custom component and pass that along to the DOM using [ref forwarding](forwarding-refs#forwarding-refs-to-dom-components).\n\nYou can also add a wrapper DOM node in your component and attach a ref directly to it.\n\n``` jsx\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.wrapper = React.createRef();\n  }\n  render() {\n    return <div ref={this.wrapper}>{this.props.children}</div>;\n  }\n}\n```\n\n> Note:\n>\n> In CSS, the [`display: contents`](https://developer.mozilla.org/en-US/docs/Web/CSS/display#display_contents) attribute can be used if you don’t want the node to be part of the layout.\n\n### Detecting unexpected side effects\n\nConceptually, React does work in two phases:\n\n- The **render** phase determines what changes need to be made to e.g. the DOM. During this phase, React calls `render` and then compares the result to the previous render.\n- The **commit** phase is when React applies any changes. (In the case of React DOM, this is when React inserts, updates, and removes DOM nodes.) React also calls lifecycles like `componentDidMount` and `componentDidUpdate` during this phase.\n\nThe commit phase is usually very fast, but rendering can be slow. For this reason, the upcoming concurrent mode (which is not enabled by default yet) breaks the rendering work into pieces, pausing and resuming the work to avoid blocking the browser. This means that React may invoke render phase lifecycles more than once before committing, or it may invoke them without committing at all (because of an error or a higher priority interruption).\n\nRender phase lifecycles include the following class component methods:\n\n- `constructor`\n- `componentWillMount` (or `UNSAFE_componentWillMount`)\n- `componentWillReceiveProps` (or `UNSAFE_componentWillReceiveProps`)\n- `componentWillUpdate` (or `UNSAFE_componentWillUpdate`)\n- `getDerivedStateFromProps`\n- `shouldComponentUpdate`\n- `render`\n- `setState` updater functions (the first argument)\n\nBecause the above methods might be called more than once, it’s important that they do not contain side-effects. Ignoring this rule can lead to a variety of problems, including memory leaks and invalid application state. Unfortunately, it can be difficult to detect these problems as they can often be [non-deterministic](https://en.wikipedia.org/wiki/Deterministic_algorithm).\n\nStrict mode can’t automatically detect side effects for you, but it can help you spot them by making them a little more deterministic. This is done by intentionally double-invoking the following functions:\n\n- Class component `constructor`, `render`, and `shouldComponentUpdate` methods\n- Class component static `getDerivedStateFromProps` method\n- Function component bodies\n- State updater functions (the first argument to `setState`)\n- Functions passed to `useState`, `useMemo`, or `useReducer`\n\n> Note:\n>\n> This only applies to development mode. *Lifecycles will not be double-invoked in production mode.*\n\nFor example, consider the following code:\n\n``` jsx\nclass TopLevelRoute extends React.Component {\n  constructor(props) {\n    super(props);\n\n    SharedApplicationState.recordEvent('ExampleComponent');\n  }\n}\n```\n\nAt first glance, this code might not seem problematic. But if `SharedApplicationState.recordEvent` is not [idempotent](https://en.wikipedia.org/wiki/Idempotence#Computer_science_meaning), then instantiating this component multiple times could lead to invalid application state. This sort of subtle bug might not manifest during development, or it might do so inconsistently and so be overlooked.\n\nBy intentionally double-invoking methods like the component constructor, strict mode makes patterns like this easier to spot.\n\n> Note:\n>\n> In React 17, React automatically modifies the console methods like `console.log()` to silence the logs in the second call to lifecycle functions. However, it may cause undesired behavior in certain cases where [a workaround can be used](https://github.com/facebook/react/issues/20090#issuecomment-715927125).\n>\n> Starting from React 18, React does not suppress any logs. However, if you have React DevTools installed, the logs from the second call will appear slightly dimmed. React DevTools also offers a setting (off by default) to suppress them completely.\n\n### Detecting legacy context API\n\nThe legacy context API is error-prone, and will be removed in a future major version. It still works for all 16.x releases but will show this warning message in strict mode:\n\n[](https://reactjs.org/static/fca5c5e1fb2ef2e2d59afb100b432c12/51800/warn-legacy-context-in-strict-mode.png)\n\nRead the [new context API documentation](context) to help migrate to the new version.\n\n### Ensuring reusable state\n\nIn the future, we’d like to add a feature that allows React to add and remove sections of the UI while preserving state. For example, when a user tabs away from a screen and back, React should be able to immediately show the previous screen. To do this, React support remounting trees using the same component state used before unmounting.\n\nThis feature will give React better performance out-of-the-box, but requires components to be resilient to effects being mounted and destroyed multiple times. Most effects will work without any changes, but some effects do not properly clean up subscriptions in the destroy callback, or implicitly assume they are only mounted or destroyed once.\n\nTo help surface these issues, React 18 introduces a new development-only check to Strict Mode. This new check will automatically unmount and remount every component, whenever a component mounts for the first time, restoring the previous state on the second mount.\n\nTo demonstrate the development behavior you’ll see in Strict Mode with this feature, consider what happens when React mounts a new component. Without this change, when a component mounts, React creates the effects:\n\n``` text\n* React mounts the component.\n  * Layout effects are created.\n  * Effects are created.\n```\n\nWith Strict Mode starting in React 18, whenever a component mounts in development, React will simulate immediately unmounting and remounting the component:\n\n``` text\n* React mounts the component.\n    * Layout effects are created.\n    * Effect effects are created.\n* React simulates effects being destroyed on a mounted component.\n    * Layout effects are destroyed.\n    * Effects are destroyed.\n* React simulates effects being re-created on a mounted component.\n    * Layout effects are created\n    * Effect setup code runs\n```\n\nOn the second mount, React will restore the state from the first mount. This feature simulates user behavior such as a user tabbing away from a screen and back, ensuring that code will properly handle state restoration.\n\nWhen the component unmounts, effects are destroyed as normal:\n\n``` text\n* React unmounts the component.\n  * Layout effects are destroyed.\n  * Effect effects are destroyed.\n```\n\nUnmounting and remounting includes:\n\n- `componentDidMount`\n- `componentWillUnmount`\n- `useEffect`\n- `useLayoutEffect`\n- `useInsertionEffect`\n\n> Note:\n>\n> This only applies to development mode, *production behavior is unchanged*.\n\nFor help supporting common issues, see:\n\n- [How to support Reusable State in Effects](https://github.com/reactwg/react-18/discussions/18)\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/strict-mode.html](https://reactjs.org/docs/strict-mode.html)"
- name: Styling and CSS
  id: faq-styling
  summary: If you often find yourself writing code like this, classnames package can simplify it
  description: "# Styling and CSS\n\n### How do I add CSS classes to components?\n\nPass a string as the `className` prop:\n\n``` jsx\nrender() {\n  return <span className=\"menu navigation-menu\">Menu</span>\n}\n```\n\nIt is common for CSS classes to depend on the component props or state:\n\n``` jsx\nrender() {\n  let className = 'menu';\n  if (this.props.isActive) {\n    className += ' menu-active';\n  }\n  return <span className={className}>Menu</span>\n}\n```\n\n> Tip\n>\n> If you often find yourself writing code like this, [classnames](https://www.npmjs.com/package/classnames#usage-with-reactjs) package can simplify it.\n\n### Can I use inline styles?\n\nYes, see the docs on styling [here](dom-elements#style).\n\n### Are inline styles bad?\n\nCSS classes are generally better for performance than inline styles.\n\n### What is CSS-in-JS?\n\n“CSS-in-JS” refers to a pattern where CSS is composed using JavaScript instead of defined in external files.\n\n*Note that this functionality is not a part of React, but provided by third-party libraries.* React does not have an opinion about how styles are defined; if in doubt, a good starting point is to define your styles in a separate `*.css` file as usual and refer to them using [`className`](dom-elements#classname).\n\n### Can I do animations in React?\n\nReact can be used to power animations. See [React Transition Group](https://reactcommunity.org/react-transition-group/), [React Motion](https://github.com/chenglou/react-motion), [React Spring](https://github.com/react-spring/react-spring), or [Framer Motion](https://framer.com/motion), for example.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/faq-styling.html](https://reactjs.org/docs/faq-styling.html)"
- name: SyntheticEvent
  id: events
  summary: This reference guide documents the SyntheticEvent wrapper that forms part of React’s Event System
  description: "# SyntheticEvent\n\nThis reference guide documents the `SyntheticEvent` wrapper that forms part of React’s Event System. See the [Handling Events](handling-events) guide to learn more.\n\n## Overview\n\nYour event handlers will be passed instances of `SyntheticEvent`, a cross-browser wrapper around the browser’s native event. It has the same interface as the browser’s native event, including `stopPropagation()` and `preventDefault()`, except the events work identically across all browsers.\n\nIf you find that you need the underlying browser event for some reason, simply use the `nativeEvent` attribute to get it. The synthetic events are different from, and do not map directly to, the browser’s native events. For example in `onMouseLeave` `event.nativeEvent` will point to a `mouseout` event. The specific mapping is not part of the public API and may change at any time. Every `SyntheticEvent` object has the following attributes:\n\n``` jsx\nboolean bubbles\nboolean cancelable\nDOMEventTarget currentTarget\nboolean defaultPrevented\nnumber eventPhase\nboolean isTrusted\nDOMEvent nativeEvent\nvoid preventDefault()\nboolean isDefaultPrevented()\nvoid stopPropagation()\nboolean isPropagationStopped()\nvoid persist()\nDOMEventTarget target\nnumber timeStamp\nstring type\n```\n\n> Note:\n>\n> As of v17, `e.persist()` doesn’t do anything because the `SyntheticEvent` is no longer [pooled](legacy-event-pooling).\n\n> Note:\n>\n> As of v0.14, returning `false` from an event handler will no longer stop event propagation. Instead, `e.stopPropagation()` or `e.preventDefault()` should be triggered manually, as appropriate.\n\n## Supported Events\n\nReact normalizes events so that they have consistent properties across different browsers.\n\nThe event handlers below are triggered by an event in the bubbling phase. To register an event handler for the capture phase, append `Capture` to the event name; for example, instead of using `onClick`, you would use `onClickCapture` to handle the click event in the capture phase.\n\n- [Clipboard Events](#clipboard-events)\n- [Composition Events](#composition-events)\n- [Keyboard Events](#keyboard-events)\n- [Focus Events](#focus-events)\n- [Form Events](#form-events)\n- [Generic Events](#generic-events)\n- [Mouse Events](#mouse-events)\n- [Pointer Events](#pointer-events)\n- [Selection Events](#selection-events)\n- [Touch Events](#touch-events)\n- [UI Events](#ui-events)\n- [Wheel Events](#wheel-events)\n- [Media Events](#media-events)\n- [Image Events](#image-events)\n- [Animation Events](#animation-events)\n- [Transition Events](#transition-events)\n- [Other Events](#other-events)\n\n## Reference\n\n### Clipboard Events\n\nEvent names:\n\n``` text\nonCopy onCut onPaste\n```\n\nProperties:\n\n``` jsx\nDOMDataTransfer clipboardData\n```\n\n### Composition Events\n\nEvent names:\n\n``` text\nonCompositionEnd onCompositionStart onCompositionUpdate\n```\n\nProperties:\n\n``` jsx\nstring data\n```\n\n### Keyboard Events\n\nEvent names:\n\n``` text\nonKeyDown onKeyPress onKeyUp\n```\n\nProperties:\n\n``` jsx\nboolean altKey\nnumber charCode\nboolean ctrlKey\nboolean getModifierState(key)\nstring key\nnumber keyCode\nstring locale\nnumber location\nboolean metaKey\nboolean repeat\nboolean shiftKey\nnumber which\n```\n\nThe `key` property can take any of the values documented in the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values).\n\n### Focus Events\n\nEvent names:\n\n``` text\nonFocus onBlur\n```\n\nThese focus events work on all elements in the React DOM, not just form elements.\n\nProperties:\n\n``` jsx\nDOMEventTarget relatedTarget\n```\n\n#### onFocus\n\nThe `onFocus` event is called when the element (or some element inside of it) receives focus. For example, it’s called when the user clicks on a text input.\n\n``` jsx\nfunction Example() {\n  return (\n    <input\n      onFocus={(e) => {\n        console.log('Focused on input');\n      }}\n      placeholder=\"onFocus is triggered when you click this input.\"\n    />\n  )\n}\n```\n\n#### onBlur\n\nThe `onBlur` event handler is called when focus has left the element (or left some element inside of it). For example, it’s called when the user clicks outside of a focused text input.\n\n``` jsx\nfunction Example() {\n  return (\n    <input\n      onBlur={(e) => {\n        console.log('Triggered because this input lost focus');\n      }}\n      placeholder=\"onBlur is triggered when you click this input and then you click outside of it.\"\n    />\n  )\n}\n```\n\n#### Detecting Focus Entering and Leaving\n\nYou can use the `currentTarget` and `relatedTarget` to differentiate if the focusing or blurring events originated from *outside* of the parent element. Here is a demo you can copy and paste that shows how to detect focusing a child, focusing the element itself, and focus entering or leaving the whole subtree.\n\n``` jsx\nfunction Example() {\n  return (\n    <div\n      tabIndex={1}\n      onFocus={(e) => {\n        if (e.currentTarget === e.target) {\n          console.log('focused self');\n        } else {\n          console.log('focused child', e.target);\n        }\n        if (!e.currentTarget.contains(e.relatedTarget)) {\n          // Not triggered when swapping focus between children\n          console.log('focus entered self');\n        }\n      }}\n      onBlur={(e) => {\n        if (e.currentTarget === e.target) {\n          console.log('unfocused self');\n        } else {\n          console.log('unfocused child', e.target);\n        }\n        if (!e.currentTarget.contains(e.relatedTarget)) {\n          // Not triggered when swapping focus between children\n          console.log('focus left self');\n        }\n      }}\n    >\n      <input id=\"1\" />\n      <input id=\"2\" />\n    </div>\n  );\n}\n```\n\n### Form Events\n\nEvent names:\n\n``` text\nonChange onInput onInvalid onReset onSubmit \n```\n\nFor more information about the onChange event, see [Forms](forms).\n\n### Generic Events\n\nEvent names:\n\n``` text\nonError onLoad\n```\n\n### Mouse Events\n\nEvent names:\n\n``` text\nonClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit\nonDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave\nonMouseMove onMouseOut onMouseOver onMouseUp\n```\n\nThe `onMouseEnter` and `onMouseLeave` events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.\n\nProperties:\n\n``` jsx\nboolean altKey\nnumber button\nnumber buttons\nnumber clientX\nnumber clientY\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nnumber pageX\nnumber pageY\nDOMEventTarget relatedTarget\nnumber screenX\nnumber screenY\nboolean shiftKey\n```\n\n### Pointer Events\n\nEvent names:\n\n``` text\nonPointerDown onPointerMove onPointerUp onPointerCancel onGotPointerCapture\nonLostPointerCapture onPointerEnter onPointerLeave onPointerOver onPointerOut\n```\n\nThe `onPointerEnter` and `onPointerLeave` events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.\n\nProperties:\n\nAs defined in the [W3 spec](https://www.w3.org/TR/pointerevents/), pointer events extend [Mouse Events](#mouse-events) with the following properties:\n\n``` jsx\nnumber pointerId\nnumber width\nnumber height\nnumber pressure\nnumber tangentialPressure\nnumber tiltX\nnumber tiltY\nnumber twist\nstring pointerType\nboolean isPrimary\n```\n\nA note on cross-browser support:\n\nPointer events are not yet supported in every browser (at the time of writing this article, supported browsers include: Chrome, Firefox, Edge, and Internet Explorer). React deliberately does not polyfill support for other browsers because a standard-conform polyfill would significantly increase the bundle size of `react-dom`.\n\nIf your application requires pointer events, we recommend adding a third party pointer event polyfill.\n\n### Selection Events\n\nEvent names:\n\n``` text\nonSelect\n```\n\n### Touch Events\n\nEvent names:\n\n``` text\nonTouchCancel onTouchEnd onTouchMove onTouchStart\n```\n\nProperties:\n\n``` jsx\nboolean altKey\nDOMTouchList changedTouches\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nboolean shiftKey\nDOMTouchList targetTouches\nDOMTouchList touches\n```\n\n### UI Events\n\nEvent names:\n\n``` text\nonScroll\n```\n\n> Note\n>\n> Starting with React 17, the `onScroll` event **does not bubble** in React. This matches the browser behavior and prevents the confusion when a nested scrollable element fires events on a distant parent.\n\nProperties:\n\n``` jsx\nnumber detail\nDOMAbstractView view\n```\n\n### Wheel Events\n\nEvent names:\n\n``` text\nonWheel\n```\n\nProperties:\n\n``` jsx\nnumber deltaMode\nnumber deltaX\nnumber deltaY\nnumber deltaZ\n```\n\n### Media Events\n\nEvent names:\n\n``` text\nonAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted\nonEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay\nonPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend\nonTimeUpdate onVolumeChange onWaiting\n```\n\n### Image Events\n\nEvent names:\n\n``` text\nonLoad onError\n```\n\n### Animation Events\n\nEvent names:\n\n``` text\nonAnimationStart onAnimationEnd onAnimationIteration\n```\n\nProperties:\n\n``` jsx\nstring animationName\nstring pseudoElement\nfloat elapsedTime\n```\n\n### Transition Events\n\nEvent names:\n\n``` text\nonTransitionEnd\n```\n\nProperties:\n\n``` jsx\nstring propertyName\nstring pseudoElement\nfloat elapsedTime\n```\n\n### Other Events\n\nEvent names:\n\n``` text\nonToggle\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/events.html](https://reactjs.org/docs/events.html)"
- name: Test Renderer
  id: test-renderer
  summary: This package provides a React renderer that can be used to render React components to pure JavaScript objects, without depending on the DOM or a native mobile environment
  description: "# Test Renderer\n\n**Importing**\n\n``` jsx\nimport TestRenderer from 'react-test-renderer'; // ES6\nconst TestRenderer = require('react-test-renderer'); // ES5 with npm\n```\n\n## Overview\n\nThis package provides a React renderer that can be used to render React components to pure JavaScript objects, without depending on the DOM or a native mobile environment.\n\nEssentially, this package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a React DOM or React Native component without using a browser or [jsdom](https://github.com/tmpvar/jsdom).\n\nExample:\n\n``` jsx\nimport TestRenderer from 'react-test-renderer';\n\nfunction Link(props) {\n  return <a href={props.page}>{props.children}</a>;\n}\n\nconst testRenderer = TestRenderer.create(\n  <Link page=\"https://www.facebook.com/\">Facebook</Link>\n);\n\nconsole.log(testRenderer.toJSON());\n// { type: 'a',\n//   props: { href: 'https://www.facebook.com/' },\n//   children: [ 'Facebook' ] }\n```\n\nYou can use Jest’s snapshot testing feature to automatically save a copy of the JSON tree to a file and check in your tests that it hasn’t changed: [Learn more about it](https://jestjs.io/docs/en/snapshot-testing).\n\nYou can also traverse the output to find specific nodes and make assertions about them.\n\n``` jsx\nimport TestRenderer from 'react-test-renderer';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <SubComponent foo=\"bar\" />\n      <p className=\"my\">Hello</p>\n    </div>\n  )\n}\n\nfunction SubComponent() {\n  return (\n    <p className=\"sub\">Sub</p>\n  );\n}\n\nconst testRenderer = TestRenderer.create(<MyComponent />);\nconst testInstance = testRenderer.root;\n\nexpect(testInstance.findByType(SubComponent).props.foo).toBe('bar');\nexpect(testInstance.findByProps({className: \"sub\"}).children).toEqual(['Sub']);\n```\n\n### TestRenderer\n\n- [`TestRenderer.create()`](#testrenderercreate)\n- [`TestRenderer.act()`](#testrendereract)\n\n### TestRenderer instance\n\n- [`testRenderer.toJSON()`](#testrenderertojson)\n- [`testRenderer.toTree()`](#testrenderertotree)\n- [`testRenderer.update()`](#testrendererupdate)\n- [`testRenderer.unmount()`](#testrendererunmount)\n- [`testRenderer.getInstance()`](#testrenderergetinstance)\n- [`testRenderer.root`](#testrendererroot)\n\n### TestInstance\n\n- [`testInstance.find()`](#testinstancefind)\n- [`testInstance.findByType()`](#testinstancefindbytype)\n- [`testInstance.findByProps()`](#testinstancefindbyprops)\n- [`testInstance.findAll()`](#testinstancefindall)\n- [`testInstance.findAllByType()`](#testinstancefindallbytype)\n- [`testInstance.findAllByProps()`](#testinstancefindallbyprops)\n- [`testInstance.instance`](#testinstanceinstance)\n- [`testInstance.type`](#testinstancetype)\n- [`testInstance.props`](#testinstanceprops)\n- [`testInstance.parent`](#testinstanceparent)\n- [`testInstance.children`](#testinstancechildren)\n\n## Reference\n\n### `TestRenderer.create()`\n\n``` jsx\nTestRenderer.create(element, options);\n```\n\nCreate a `TestRenderer` instance with the passed React element. It doesn’t use the real DOM, but it still fully renders the component tree into memory so you can make assertions about it. Returns a [TestRenderer instance](#testrenderer-instance).\n\n### `TestRenderer.act()`\n\n``` jsx\nTestRenderer.act(callback);\n```\n\nSimilar to the [`act()` helper from `react-dom/test-utils`](test-utils#act), `TestRenderer.act` prepares a component for assertions. Use this version of `act()` to wrap calls to `TestRenderer.create` and `testRenderer.update`.\n\n``` jsx\nimport {create, act} from 'react-test-renderer';\nimport App from './app.js'; // The component being tested\n\n// render the component\nlet root; \nact(() => {\n  root = create(<App value={1}/>)\n});\n\n// make assertions on root \nexpect(root.toJSON()).toMatchSnapshot();\n\n// update with some different props\nact(() => {\n  root.update(<App value={2}/>);\n})\n\n// make assertions on root \nexpect(root.toJSON()).toMatchSnapshot();\n```\n\n### `testRenderer.toJSON()`\n\n``` jsx\ntestRenderer.toJSON()\n```\n\nReturn an object representing the rendered tree. This tree only contains the platform-specific nodes like `<div>` or `<View>` and their props, but doesn’t contain any user-written components. This is handy for [snapshot testing](https://facebook.github.io/jest/docs/en/snapshot-testing.html#snapshot-testing-with-jest).\n\n### `testRenderer.toTree()`\n\n``` jsx\ntestRenderer.toTree()\n```\n\nReturn an object representing the rendered tree. The representation is more detailed than the one provided by `toJSON()`, and includes the user-written components. You probably don’t need this method unless you’re writing your own assertion library on top of the test renderer.\n\n### `testRenderer.update()`\n\n``` jsx\ntestRenderer.update(element)\n```\n\nRe-render the in-memory tree with a new root element. This simulates a React update at the root. If the new element has the same type and key as the previous element, the tree will be updated; otherwise, it will re-mount a new tree.\n\n### `testRenderer.unmount()`\n\n``` jsx\ntestRenderer.unmount()\n```\n\nUnmount the in-memory tree, triggering the appropriate lifecycle events.\n\n### `testRenderer.getInstance()`\n\n``` jsx\ntestRenderer.getInstance()\n```\n\nReturn the instance corresponding to the root element, if available. This will not work if the root element is a function component because they don’t have instances.\n\n### `testRenderer.root`\n\n``` jsx\ntestRenderer.root\n```\n\nReturns the root “test instance” object that is useful for making assertions about specific nodes in the tree. You can use it to find other “test instances” deeper below.\n\n### `testInstance.find()`\n\n``` jsx\ntestInstance.find(test)\n```\n\nFind a single descendant test instance for which `test(testInstance)` returns `true`. If `test(testInstance)` does not return `true` for exactly one test instance, it will throw an error.\n\n### `testInstance.findByType()`\n\n``` jsx\ntestInstance.findByType(type)\n```\n\nFind a single descendant test instance with the provided `type`. If there is not exactly one test instance with the provided `type`, it will throw an error.\n\n### `testInstance.findByProps()`\n\n``` jsx\ntestInstance.findByProps(props)\n```\n\nFind a single descendant test instance with the provided `props`. If there is not exactly one test instance with the provided `props`, it will throw an error.\n\n### `testInstance.findAll()`\n\n``` jsx\ntestInstance.findAll(test)\n```\n\nFind all descendant test instances for which `test(testInstance)` returns `true`.\n\n### `testInstance.findAllByType()`\n\n``` jsx\ntestInstance.findAllByType(type)\n```\n\nFind all descendant test instances with the provided `type`.\n\n### `testInstance.findAllByProps()`\n\n``` jsx\ntestInstance.findAllByProps(props)\n```\n\nFind all descendant test instances with the provided `props`.\n\n### `testInstance.instance`\n\n``` jsx\ntestInstance.instance\n```\n\nThe component instance corresponding to this test instance. It is only available for class components, as function components don’t have instances. It matches the `this` value inside the given component.\n\n### `testInstance.type`\n\n``` jsx\ntestInstance.type\n```\n\nThe component type corresponding to this test instance. For example, a `<Button />` component has a type of `Button`.\n\n### `testInstance.props`\n\n``` jsx\ntestInstance.props\n```\n\nThe props corresponding to this test instance. For example, a `<Button size=\"small\" />` component has `{size: 'small'}` as props.\n\n### `testInstance.parent`\n\n``` jsx\ntestInstance.parent\n```\n\nThe parent test instance of this test instance.\n\n### `testInstance.children`\n\n``` jsx\ntestInstance.children\n```\n\nThe children test instances of this test instance.\n\n## Ideas\n\nYou can pass `createNodeMock` function to `TestRenderer.create` as the option, which allows for custom mock refs. `createNodeMock` accepts the current element and should return a mock ref object. This is useful when you test a component that relies on refs.\n\n``` jsx\nimport TestRenderer from 'react-test-renderer';\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.input = null;\n  }\n  componentDidMount() {\n    this.input.focus();\n  }\n  render() {\n    return <input type=\"text\" ref={el => this.input = el} />\n  }\n}\n\nlet focused = false;\nTestRenderer.create(\n  <MyComponent />,\n  {\n    createNodeMock: (element) => {\n      if (element.type === 'input') {\n        // mock a focus function\n        return {\n          focus: () => {\n            focused = true;\n          }\n        };\n      }\n      return null;\n    }\n  }\n);\nexpect(focused).toBe(true);\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/test-renderer.html](https://reactjs.org/docs/test-renderer.html)"
- name: Test Utilities
  id: test-utils
  summary: ReactTestUtils makes it easy to test React components in the testing framework of your choice
  description: "# Test Utilities\n\n**Importing**\n\n``` jsx\nimport ReactTestUtils from 'react-dom/test-utils'; // ES6\nvar ReactTestUtils = require('react-dom/test-utils'); // ES5 with npm\n```\n\n## Overview\n\n`ReactTestUtils` makes it easy to test React components in the testing framework of your choice. At Facebook we use [Jest](https://facebook.github.io/jest/) for painless JavaScript testing. Learn how to get started with Jest through the Jest website’s [React Tutorial](https://jestjs.io/docs/tutorial-react).\n\n> Note:\n>\n> We recommend using [React Testing Library](https://testing-library.com/react) which is designed to enable and encourage writing tests that use your components as the end users do.\n>\n> For React versions \\<= 16, the [Enzyme](https://airbnb.io/enzyme/) library makes it easy to assert, manipulate, and traverse your React Components’ output.\n\n- [`act()`](#act)\n- [`mockComponent()`](#mockcomponent)\n- [`isElement()`](#iselement)\n- [`isElementOfType()`](#iselementoftype)\n- [`isDOMComponent()`](#isdomcomponent)\n- [`isCompositeComponent()`](#iscompositecomponent)\n- [`isCompositeComponentWithType()`](#iscompositecomponentwithtype)\n- [`findAllInRenderedTree()`](#findallinrenderedtree)\n- [`scryRenderedDOMComponentsWithClass()`](#scryrendereddomcomponentswithclass)\n- [`findRenderedDOMComponentWithClass()`](#findrendereddomcomponentwithclass)\n- [`scryRenderedDOMComponentsWithTag()`](#scryrendereddomcomponentswithtag)\n- [`findRenderedDOMComponentWithTag()`](#findrendereddomcomponentwithtag)\n- [`scryRenderedComponentsWithType()`](#scryrenderedcomponentswithtype)\n- [`findRenderedComponentWithType()`](#findrenderedcomponentwithtype)\n- [`renderIntoDocument()`](#renderintodocument)\n- [`Simulate`](#simulate)\n\n## Reference\n\n### `act()`\n\nTo prepare a component for assertions, wrap the code rendering it and performing updates inside an `act()` call. This makes your test run closer to how React works in the browser.\n\n> Note\n>\n> If you use `react-test-renderer`, it also provides an `act` export that behaves the same way.\n\nFor example, let’s say we have this `Counter` component:\n\n``` jsx\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {count: 0};\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n  handleClick() {\n    this.setState(state => ({\n      count: state.count + 1,\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={this.handleClick}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}\n```\n\nHere is how we can test it:\n\n``` jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { act } from 'react-dom/test-utils';\nimport Counter from './Counter';\n\nlet container;\n\nbeforeEach(() => {\n  container = document.createElement('div');\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  document.body.removeChild(container);\n  container = null;\n});\n\nit('can render and update a counter', () => {\n  // Test first render and componentDidMount\n  act(() => {\n    ReactDOM.createRoot(container).render(<Counter />);\n  });\n  const button = container.querySelector('button');\n  const label = container.querySelector('p');\n  expect(label.textContent).toBe('You clicked 0 times');\n  expect(document.title).toBe('You clicked 0 times');\n\n  // Test second render and componentDidUpdate\n  act(() => {\n    button.dispatchEvent(new MouseEvent('click', {bubbles: true}));\n  });\n  expect(label.textContent).toBe('You clicked 1 times');\n  expect(document.title).toBe('You clicked 1 times');\n});\n```\n\n- Don’t forget that dispatching DOM events only works when the DOM container is added to the `document`. You can use a library like [React Testing Library](https://testing-library.com/react) to reduce the boilerplate code.\n- The [`recipes`](testing-recipes) document contains more details on how `act()` behaves, with examples and usage.\n\n### `mockComponent()`\n\n``` jsx\nmockComponent(\n  componentClass,\n  [mockTagName]\n)\n```\n\nPass a mocked component module to this method to augment it with useful methods that allow it to be used as a dummy React component. Instead of rendering as usual, the component will become a simple `<div>` (or other tag if `mockTagName` is provided) containing any provided children.\n\n> Note:\n>\n> `mockComponent()` is a legacy API. We recommend using [`jest.mock()`](https://jestjs.io/docs/tutorial-react-native#mock-native-modules-using-jestmock) instead.\n\n### `isElement()`\n\n``` jsx\nisElement(element)\n```\n\nReturns `true` if `element` is any React element.\n\n### `isElementOfType()`\n\n``` jsx\nisElementOfType(\n  element,\n  componentClass\n)\n```\n\nReturns `true` if `element` is a React element whose type is of a React `componentClass`.\n\n### `isDOMComponent()`\n\n``` jsx\nisDOMComponent(instance)\n```\n\nReturns `true` if `instance` is a DOM component (such as a `<div>` or `<span>`).\n\n### `isCompositeComponent()`\n\n``` jsx\nisCompositeComponent(instance)\n```\n\nReturns `true` if `instance` is a user-defined component, such as a class or a function.\n\n### `isCompositeComponentWithType()`\n\n``` jsx\nisCompositeComponentWithType(\n  instance,\n  componentClass\n)\n```\n\nReturns `true` if `instance` is a component whose type is of a React `componentClass`.\n\n### `findAllInRenderedTree()`\n\n``` jsx\nfindAllInRenderedTree(\n  tree,\n  test\n)\n```\n\nTraverse all components in `tree` and accumulate all components where `test(component)` is `true`. This is not that useful on its own, but it’s used as a primitive for other test utils.\n\n### `scryRenderedDOMComponentsWithClass()`\n\n``` jsx\nscryRenderedDOMComponentsWithClass(\n  tree,\n  className\n)\n```\n\nFinds all DOM elements of components in the rendered tree that are DOM components with the class name matching `className`.\n\n### `findRenderedDOMComponentWithClass()`\n\n``` jsx\nfindRenderedDOMComponentWithClass(\n  tree,\n  className\n)\n```\n\nLike [`scryRenderedDOMComponentsWithClass()`](#scryrendereddomcomponentswithclass) but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.\n\n### `scryRenderedDOMComponentsWithTag()`\n\n``` jsx\nscryRenderedDOMComponentsWithTag(\n  tree,\n  tagName\n)\n```\n\nFinds all DOM elements of components in the rendered tree that are DOM components with the tag name matching `tagName`.\n\n### `findRenderedDOMComponentWithTag()`\n\n``` jsx\nfindRenderedDOMComponentWithTag(\n  tree,\n  tagName\n)\n```\n\nLike [`scryRenderedDOMComponentsWithTag()`](#scryrendereddomcomponentswithtag) but expects there to be one result, and returns that one result, or throws exception if there is any other number of matches besides one.\n\n### `scryRenderedComponentsWithType()`\n\n``` jsx\nscryRenderedComponentsWithType(\n  tree,\n  componentClass\n)\n```\n\nFinds all instances of components with type equal to `componentClass`.\n\n### `findRenderedComponentWithType()`\n\n``` jsx\nfindRenderedComponentWithType(\n  tree,\n  componentClass\n)\n```\n\nSame as [`scryRenderedComponentsWithType()`](#scryrenderedcomponentswithtype) but expects there to be one result and returns that one result, or throws exception if there is any other number of matches besides one.\n\n### `renderIntoDocument()`\n\n``` jsx\nrenderIntoDocument(element)\n```\n\nRender a React element into a detached DOM node in the document. **This function requires a DOM.** It is effectively equivalent to:\n\n``` jsx\nconst domContainer = document.createElement('div');\nReactDOM.createRoot(domContainer).render(element);\n```\n\n> Note:\n>\n> You will need to have `window`, `window.document` and `window.document.createElement` globally available **before** you import `React`. Otherwise React will think it can’t access the DOM and methods like `setState` won’t work.\n\n## Other Utilities\n\n### `Simulate`\n\n``` jsx\nSimulate.{eventName}(\n  element,\n  [eventData]\n)\n```\n\nSimulate an event dispatch on a DOM node with optional `eventData` event data.\n\n`Simulate` has a method for [every event that React understands](events#supported-events).\n\n**Clicking an element**\n\n``` jsx\n// <button ref={(node) => this.button = node}>...</button>\nconst node = this.button;\nReactTestUtils.Simulate.click(node);\n```\n\n**Changing the value of an input field and then pressing ENTER.**\n\n``` jsx\n// <input ref={(node) => this.textInput = node} />\nconst node = this.textInput;\nnode.value = 'giraffe';\nReactTestUtils.Simulate.change(node);\nReactTestUtils.Simulate.keyDown(node, {key: \"Enter\", keyCode: 13, which: 13});\n```\n\n> Note\n>\n> You will have to provide any event property that you’re using in your component (e.g. keyCode, which, etc…) as React is not creating any of these for you.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/test-utils.html](https://reactjs.org/docs/test-utils.html)"
- name: Testing Environments
  id: testing-environments
  summary: This document goes through the factors that can affect your environment and recommendations for some scenarios
  description: "# Testing Environments\n\nThis document goes through the factors that can affect your environment and recommendations for some scenarios.\n\n### Test runners\n\nTest runners like [Jest](https://jestjs.io/), [mocha](https://mochajs.org/), [ava](https://github.com/avajs/ava) let you write test suites as regular JavaScript, and run them as part of your development process. Additionally, test suites are run as part of continuous integration.\n\n- Jest is widely compatible with React projects, supporting features like mocked [modules](#mocking-modules) and [timers](#mocking-timers), and [`jsdom`](#mocking-a-rendering-surface) support. **If you use Create React App, [Jest is already included out of the box](https://facebook.github.io/create-react-app/docs/running-tests) with useful defaults.**\n- Libraries like [mocha](https://mochajs.org/#running-mocha-in-the-browser) work well in real browser environments, and could help for tests that explicitly need it.\n- End-to-end tests are used for testing longer flows across multiple pages, and require a [different setup](#end-to-end-tests-aka-e2e-tests).\n\n### Mocking a rendering surface\n\nTests often run in an environment without access to a real rendering surface like a browser. For these environments, we recommend simulating a browser with [`jsdom`](https://github.com/jsdom/jsdom), a lightweight browser implementation that runs inside Node.js.\n\nIn most cases, jsdom behaves like a regular browser would, but doesn’t have features like [layout and navigation](https://github.com/jsdom/jsdom#unimplemented-parts-of-the-web-platform). This is still useful for most web-based component tests, since it runs quicker than having to start up a browser for each test. It also runs in the same process as your tests, so you can write code to examine and assert on the rendered DOM.\n\nJust like in a real browser, jsdom lets us model user interactions; tests can dispatch events on DOM nodes, and then observe and assert on the side effects of these actions [(example)](testing-recipes#events).\n\nA large portion of UI tests can be written with the above setup: using Jest as a test runner, rendered to jsdom, with user interactions specified as sequences of browser events, powered by the `act()` helper [(example)](testing-recipes). For example, a lot of React’s own tests are written with this combination.\n\nIf you’re writing a library that tests mostly browser-specific behavior, and requires native browser behavior like layout or real inputs, you could use a framework like [mocha.](https://mochajs.org/)\n\nIn an environment where you *can’t* simulate a DOM (e.g. testing React Native components on Node.js), you could use [event simulation helpers](test-utils#simulate) to simulate interactions with elements. Alternately, you could use the `fireEvent` helper from [`@testing-library/react-native`](https://testing-library.com/docs/react-native-testing-library/intro).\n\nFrameworks like [Cypress](https://www.cypress.io/), [puppeteer](https://github.com/GoogleChrome/puppeteer) and [webdriver](https://www.seleniumhq.org/projects/webdriver/) are useful for running [end-to-end tests](#end-to-end-tests-aka-e2e-tests).\n\n### Mocking functions\n\nWhen writing tests, we’d like to mock out the parts of our code that don’t have equivalents inside our testing environment (e.g. checking `navigator.onLine` status inside Node.js). Tests could also spy on some functions, and observe how other parts of the test interact with them. It is then useful to be able to selectively mock these functions with test-friendly versions.\n\nThis is especially useful for data fetching. It is usually preferable to use “fake” data for tests to avoid the slowness and flakiness due to fetching from real API endpoints [(example)](testing-recipes#data-fetching). This helps make the tests predictable. Libraries like [Jest](https://jestjs.io/) and [sinon](https://sinonjs.org/), among others, support mocked functions. For end-to-end tests, mocking network can be more difficult, but you might also want to test the real API endpoints in them anyway.\n\n### Mocking modules\n\nSome components have dependencies for modules that may not work well in test environments, or aren’t essential to our tests. It can be useful to selectively mock these modules out with suitable replacements [(example)](testing-recipes#mocking-modules).\n\nOn Node.js, runners like Jest [support mocking modules](https://jestjs.io/docs/en/manual-mocks). You could also use libraries like [`mock-require`](https://www.npmjs.com/package/mock-require).\n\n### Mocking timers\n\nComponents might be using time-based functions like `setTimeout`, `setInterval`, or `Date.now`. In testing environments, it can be helpful to mock these functions out with replacements that let you manually “advance” time. This is great for making sure your tests run fast! Tests that are dependent on timers would still resolve in order, but quicker [(example)](testing-recipes#timers). Most frameworks, including [Jest](https://jestjs.io/docs/en/timer-mocks), [sinon](https://sinonjs.org/releases/latest/fake-timers) and [lolex](https://github.com/sinonjs/lolex), let you mock timers in your tests.\n\nSometimes, you may not want to mock timers. For example, maybe you’re testing an animation, or interacting with an endpoint that’s sensitive to timing (like an API rate limiter). Libraries with timer mocks let you enable and disable them on a per test/suite basis, so you can explicitly choose how these tests would run.\n\n### End-to-end tests\n\nEnd-to-end tests are useful for testing longer workflows, especially when they’re critical to your business (such as payments or signups). For these tests, you’d probably want to test how a real browser renders the whole app, fetches data from the real API endpoints, uses sessions and cookies, navigates between different links. You might also likely want to make assertions not just on the DOM state, but on the backing data as well (e.g. to verify whether the updates have been persisted to the database).\n\nIn this scenario, you would use a framework like [Cypress](https://www.cypress.io/), [Playwright](https://playwright.dev) or a library like [Puppeteer](https://pptr.dev/) so you can navigate between multiple routes and assert on side effects not just in the browser, but potentially on the backend as well.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/testing-environments.html](https://reactjs.org/docs/testing-environments.html)"
- name: Testing Overview
  id: testing
  summary: You can test React components similar to testing other JavaScript code
  description: "# Testing Overview\n\nYou can test React components similar to testing other JavaScript code.\n\nThere are a few ways to test React components. Broadly, they divide into two categories:\n\n- **Rendering component trees** in a simplified test environment and asserting on their output.\n- **Running a complete app** in a realistic browser environment (also known as “end-to-end” tests).\n\nThis documentation section focuses on testing strategies for the first case. While full end-to-end tests can be very useful to prevent regressions to important workflows, such tests are not concerned with React components in particular, and are out of the scope of this section.\n\n### Tradeoffs\n\nWhen choosing testing tools, it is worth considering a few tradeoffs:\n\n- **Iteration speed vs Realistic environment:** Some tools offer a very quick feedback loop between making a change and seeing the result, but don’t model the browser behavior precisely. Other tools might use a real browser environment, but reduce the iteration speed and are flakier on a continuous integration server.\n- **How much to mock:** With components, the distinction between a “unit” and “integration” test can be blurry. If you’re testing a form, should its test also test the buttons inside of it? Or should a button component have its own test suite? Should refactoring a button ever break the form test?\n\nDifferent answers may work for different teams and products.\n\n### Recommended Tools\n\n**[Jest](https://facebook.github.io/jest/)** is a JavaScript test runner that lets you access the DOM via [`jsdom`](testing-environments#mocking-a-rendering-surface). While jsdom is only an approximation of how the browser works, it is often good enough for testing React components. Jest provides a great iteration speed combined with powerful features like mocking [modules](testing-environments#mocking-modules) and [timers](testing-environments#mocking-timers) so you can have more control over how the code executes.\n\n**[React Testing Library](https://testing-library.com/react)** is a set of helpers that let you test React components without relying on their implementation details. This approach makes refactoring a breeze and also nudges you towards best practices for accessibility. Although it doesn’t provide a way to “shallowly” render a component without its children, a test runner like Jest lets you do this by [mocking](testing-recipes#mocking-modules).\n\n### Learn More\n\nThis section is divided in two pages:\n\n- [Recipes](testing-recipes): Common patterns when writing tests for React components.\n- [Environments](testing-environments): What to consider when setting up a testing environment for React components.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/testing.html](https://reactjs.org/docs/testing.html)"
- name: Testing Recipes
  id: testing-recipes
  summary: Common testing patterns for React components
  description: "# Testing Recipes\n\nCommon testing patterns for React components.\n\n> Note:\n>\n> This page assumes you’re using [Jest](https://jestjs.io/) as a test runner. If you use a different test runner, you may need to adjust the API, but the overall shape of the solution will likely be the same. Read more details on setting up a testing environment on the [Testing Environments](testing-environments) page.\n\nOn this page, we will primarily use function components. However, these testing strategies don’t depend on implementation details, and work just as well for class components too.\n\n- [Setup/Teardown](#setup--teardown)\n- [`act()`](#act)\n- [Rendering](#rendering)\n- [Data Fetching](#data-fetching)\n- [Mocking Modules](#mocking-modules)\n- [Events](#events)\n- [Timers](#timers)\n- [Snapshot Testing](#snapshot-testing)\n- [Multiple Renderers](#multiple-renderers)\n- [Something Missing?](#something-missing)\n\n### Setup/Teardown\n\nFor each test, we usually want to render our React tree to a DOM element that’s attached to `document`. This is important so that it can receive DOM events. When the test ends, we want to “clean up” and unmount the tree from the `document`.\n\nA common way to do it is to use a pair of `beforeEach` and `afterEach` blocks so that they’ll always run and isolate the effects of a test to itself:\n\n``` jsx\nimport { unmountComponentAtNode } from \"react-dom\";\n\nlet container = null;\nbeforeEach(() => {\n  // setup a DOM element as a render target\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // cleanup on exiting\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n```\n\nYou may use a different pattern, but keep in mind that we want to execute the cleanup *even if a test fails*. Otherwise, tests can become “leaky”, and one test can change the behavior of another test. That makes them difficult to debug.\n\n### `act()`\n\nWhen writing UI tests, tasks like rendering, user events, or data fetching can be considered as “units” of interaction with a user interface. `react-dom/test-utils` provides a helper called [`act()`](test-utils#act) that makes sure all updates related to these “units” have been processed and applied to the DOM before you make any assertions:\n\n``` jsx\nact(() => {\n  // render components\n});\n// make assertions\n```\n\nThis helps make your tests run closer to what real users would experience when using your application. The rest of these examples use `act()` to make these guarantees.\n\nYou might find using `act()` directly a bit too verbose. To avoid some of the boilerplate, you could use a library like [React Testing Library](https://testing-library.com/react), whose helpers are wrapped with `act()`.\n\n> Note:\n>\n> The name `act` comes from the [Arrange-Act-Assert](http://wiki.c2.com/?ArrangeActAssert) pattern.\n\n### Rendering\n\nCommonly, you might want to test whether a component renders correctly for given props. Consider a simple component that renders a message based on a prop:\n\n``` jsx\n// hello.js\n\nimport React from \"react\";\n\nexport default function Hello(props) {\n  if (props.name) {\n    return <h1>Hello, {props.name}!</h1>;\n  } else {\n    return <span>Hey, stranger</span>;\n  }\n}\n```\n\nWe can write a test for this component:\n\n``` jsx\n// hello.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Hello from \"./hello\";\n\nlet container = null;\nbeforeEach(() => {\n  // setup a DOM element as a render target\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // cleanup on exiting\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"renders with or without a name\", () => {\n  act(() => {\n    render(<Hello />, container);\n  });\n  expect(container.textContent).toBe(\"Hey, stranger\");\n\n  act(() => {\n    render(<Hello name=\"Jenny\" />, container);\n  });\n  expect(container.textContent).toBe(\"Hello, Jenny!\");\n\n  act(() => {\n    render(<Hello name=\"Margaret\" />, container);\n  });\n  expect(container.textContent).toBe(\"Hello, Margaret!\");\n});\n```\n\n### Data Fetching\n\nInstead of calling real APIs in all your tests, you can mock requests with dummy data. Mocking data fetching with “fake” data prevents flaky tests due to an unavailable backend, and makes them run faster. Note: you may still want to run a subset of tests using an [“end-to-end”](testing-environments#end-to-end-tests-aka-e2e-tests) framework that tells whether the whole app is working together.\n\n``` jsx\n// user.js\n\nimport React, { useState, useEffect } from \"react\";\n\nexport default function User(props) {\n  const [user, setUser] = useState(null);\n\n  async function fetchUserData(id) {\n    const response = await fetch(\"/\" + id);\n    setUser(await response.json());\n  }\n\n  useEffect(() => {\n    fetchUserData(props.id);\n  }, [props.id]);\n\n  if (!user) {\n    return \"loading...\";\n  }\n\n  return (\n    <details>\n      <summary>{user.name}</summary>\n      <strong>{user.age}</strong> years old\n      <br />\n      lives in {user.address}\n    </details>\n  );\n}\n```\n\nWe can write tests for it:\n\n``` jsx\n// user.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\nimport User from \"./user\";\n\nlet container = null;\nbeforeEach(() => {\n  // setup a DOM element as a render target\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // cleanup on exiting\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"renders user data\", async () => {\n  const fakeUser = {\n    name: \"Joni Baez\",\n    age: \"32\",\n    address: \"123, Charming Avenue\"\n  };\n\n  jest.spyOn(global, \"fetch\").mockImplementation(() =>\n    Promise.resolve({\n      json: () => Promise.resolve(fakeUser)\n    })\n  );\n\n  // Use the asynchronous version of act to apply resolved promises\n  await act(async () => {\n    render(<User id=\"123\" />, container);\n  });\n\n  expect(container.querySelector(\"summary\").textContent).toBe(fakeUser.name);\n  expect(container.querySelector(\"strong\").textContent).toBe(fakeUser.age);\n  expect(container.textContent).toContain(fakeUser.address);\n\n  // remove the mock to ensure tests are completely isolated\n  global.fetch.mockRestore();\n});\n```\n\n### Mocking Modules\n\nSome modules might not work well inside a testing environment, or may not be as essential to the test itself. Mocking out these modules with dummy replacements can make it easier to write tests for your own code.\n\nConsider a `Contact` component that embeds a third-party `GoogleMap` component:\n\n``` jsx\n// map.js\n\nimport React from \"react\";\n\nimport { LoadScript, GoogleMap } from \"react-google-maps\";\nexport default function Map(props) {\n  return (\n    <LoadScript id=\"script-loader\" googleMapsApiKey=\"YOUR_API_KEY\">\n      <GoogleMap id=\"example-map\" center={props.center} />\n    </LoadScript>\n  );\n}\n\n// contact.js\n\nimport React from \"react\";\nimport Map from \"./map\";\n\nexport default function Contact(props) {\n  return (\n    <div>\n      <address>\n        Contact {props.name} via{\" \"}\n        <a data-testid=\"email\" href={\"mailto:\" + props.email}>\n          email\n        </a>\n        or on their <a data-testid=\"site\" href={props.site}>\n          website\n        </a>.\n      </address>\n      <Map center={props.center} />\n    </div>\n  );\n}\n```\n\nIf we don’t want to load this component in our tests, we can mock out the dependency itself to a dummy component, and run our tests:\n\n``` jsx\n// contact.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Contact from \"./contact\";\nimport MockedMap from \"./map\";\n\njest.mock(\"./map\", () => {\n  return function DummyMap(props) {\n    return (\n      <div data-testid=\"map\">\n        {props.center.lat}:{props.center.long}\n      </div>\n    );\n  };\n});\n\nlet container = null;\nbeforeEach(() => {\n  // setup a DOM element as a render target\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // cleanup on exiting\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"should render contact information\", () => {\n  const center = { lat: 0, long: 0 };\n  act(() => {\n    render(\n      <Contact\n        name=\"Joni Baez\"\n        email=\"test@example.com\"\n        site=\"http://test.com\"\n        center={center}\n      />,\n      container\n    );\n  });\n\n  expect(\n    container.querySelector(\"[data-testid='email']\").getAttribute(\"href\")\n  ).toEqual(\"mailto:test@example.com\");\n\n  expect(\n    container.querySelector('[data-testid=\"site\"]').getAttribute(\"href\")\n  ).toEqual(\"http://test.com\");\n\n  expect(container.querySelector('[data-testid=\"map\"]').textContent).toEqual(\n    \"0:0\"\n  );\n});\n```\n\n### Events\n\nWe recommend dispatching real DOM events on DOM elements, and then asserting on the result. Consider a `Toggle` component:\n\n``` jsx\n// toggle.js\n\nimport React, { useState } from \"react\";\n\nexport default function Toggle(props) {\n  const [state, setState] = useState(false);\n  return (\n    <button\n      onClick={() => {\n        setState(previousState => !previousState);\n        props.onChange(!state);\n      }}\n      data-testid=\"toggle\"\n    >\n      {state === true ? \"Turn off\" : \"Turn on\"}\n    </button>\n  );\n}\n```\n\nWe could write tests for it:\n\n``` jsx\n// toggle.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Toggle from \"./toggle\";\n\nlet container = null;\nbeforeEach(() => {\n  // setup a DOM element as a render target\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // cleanup on exiting\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"changes value when clicked\", () => {\n  const onChange = jest.fn();\n  act(() => {\n    render(<Toggle onChange={onChange} />, container);\n  });\n\n  // get a hold of the button element, and trigger some clicks on it\n  const button = document.querySelector(\"[data-testid=toggle]\");\n  expect(button.innerHTML).toBe(\"Turn on\");\n\n  act(() => {\n    button.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n  });\n\n  expect(onChange).toHaveBeenCalledTimes(1);\n  expect(button.innerHTML).toBe(\"Turn off\");\n\n  act(() => {\n    for (let i = 0; i < 5; i++) {\n      button.dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n    }\n  });\n\n  expect(onChange).toHaveBeenCalledTimes(6);\n  expect(button.innerHTML).toBe(\"Turn on\");\n});\n```\n\nDifferent DOM events and their properties are described in [MDN](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent). Note that you need to pass `{ bubbles: true }` in each event you create for it to reach the React listener because React automatically delegates events to the root.\n\n> Note:\n>\n> React Testing Library offers a [more concise helper](https://testing-library.com/docs/dom-testing-library/api-events) for firing events.\n\n### Timers\n\nYour code might use timer-based functions like `setTimeout` to schedule more work in the future. In this example, a multiple choice panel waits for a selection and advances, timing out if a selection isn’t made in 5 seconds:\n\n``` jsx\n// card.js\n\nimport React, { useEffect } from \"react\";\n\nexport default function Card(props) {\n  useEffect(() => {\n    const timeoutID = setTimeout(() => {\n      props.onSelect(null);\n    }, 5000);\n    return () => {\n      clearTimeout(timeoutID);\n    };\n  }, [props.onSelect]);\n\n  return [1, 2, 3, 4].map(choice => (\n    <button\n      key={choice}\n      data-testid={choice}\n      onClick={() => props.onSelect(choice)}\n    >\n      {choice}\n    </button>\n  ));\n}\n```\n\nWe can write tests for this component by leveraging [Jest’s timer mocks](https://jestjs.io/docs/en/timer-mocks), and testing the different states it can be in.\n\n``` jsx\n// card.test.js\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\n\nimport Card from \"./card\";\n\nlet container = null;\nbeforeEach(() => {\n  // setup a DOM element as a render target\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n  jest.useFakeTimers();\n});\n\nafterEach(() => {\n  // cleanup on exiting\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n  jest.useRealTimers();\n});\n\nit(\"should select null after timing out\", () => {\n  const onSelect = jest.fn();\n  act(() => {\n    render(<Card onSelect={onSelect} />, container);\n  });\n\n  // move ahead in time by 100ms\n  act(() => {\n    jest.advanceTimersByTime(100);\n  });\n  expect(onSelect).not.toHaveBeenCalled();\n\n  // and then move ahead by 5 seconds\n  act(() => {\n    jest.advanceTimersByTime(5000);\n  });\n  expect(onSelect).toHaveBeenCalledWith(null);\n});\n\nit(\"should cleanup on being removed\", () => {\n  const onSelect = jest.fn();\n  act(() => {\n    render(<Card onSelect={onSelect} />, container);\n  });\n\n  act(() => {\n    jest.advanceTimersByTime(100);\n  });\n  expect(onSelect).not.toHaveBeenCalled();\n\n  // unmount the app\n  act(() => {\n    render(null, container);\n  });\n\n  act(() => {\n    jest.advanceTimersByTime(5000);\n  });\n  expect(onSelect).not.toHaveBeenCalled();\n});\n\nit(\"should accept selections\", () => {\n  const onSelect = jest.fn();\n  act(() => {\n    render(<Card onSelect={onSelect} />, container);\n  });\n\n  act(() => {\n    container\n      .querySelector(\"[data-testid='2']\")\n      .dispatchEvent(new MouseEvent(\"click\", { bubbles: true }));\n  });\n\n  expect(onSelect).toHaveBeenCalledWith(2);\n});\n```\n\nYou can use fake timers only in some tests. Above, we enabled them by calling `jest.useFakeTimers()`. The main advantage they provide is that your test doesn’t actually have to wait five seconds to execute, and you also didn’t need to make the component code more convoluted just for testing.\n\n### Snapshot Testing\n\nFrameworks like Jest also let you save “snapshots” of data with [`toMatchSnapshot` / `toMatchInlineSnapshot`](https://jestjs.io/docs/en/snapshot-testing). With these, we can “save” the rendered component output and ensure that a change to it has to be explicitly committed as a change to the snapshot.\n\nIn this example, we render a component and format the rendered HTML with the [`pretty`](https://www.npmjs.com/package/pretty) package, before saving it as an inline snapshot:\n\n``` jsx\n// hello.test.js, again\n\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { act } from \"react-dom/test-utils\";\nimport pretty from \"pretty\";\n\nimport Hello from \"./hello\";\n\nlet container = null;\nbeforeEach(() => {\n  // setup a DOM element as a render target\n  container = document.createElement(\"div\");\n  document.body.appendChild(container);\n});\n\nafterEach(() => {\n  // cleanup on exiting\n  unmountComponentAtNode(container);\n  container.remove();\n  container = null;\n});\n\nit(\"should render a greeting\", () => {\n  act(() => {\n    render(<Hello />, container);\n  });\n\n  expect(\n    pretty(container.innerHTML)\n  ).toMatchInlineSnapshot(); /* ... gets filled automatically by jest ... */\n\n  act(() => {\n    render(<Hello name=\"Jenny\" />, container);\n  });\n\n  expect(\n    pretty(container.innerHTML)\n  ).toMatchInlineSnapshot(); /* ... gets filled automatically by jest ... */\n\n  act(() => {\n    render(<Hello name=\"Margaret\" />, container);\n  });\n\n  expect(\n    pretty(container.innerHTML)\n  ).toMatchInlineSnapshot(); /* ... gets filled automatically by jest ... */\n});\n```\n\nIt’s typically better to make more specific assertions than to use snapshots. These kinds of tests include implementation details so they break easily, and teams can get desensitized to snapshot breakages. Selectively [mocking some child components](#mocking-modules) can help reduce the size of snapshots and keep them readable for the code review.\n\n### Multiple Renderers\n\nIn rare cases, you may be running a test on a component that uses multiple renderers. For example, you may be running snapshot tests on a component with `react-test-renderer`, that internally uses `render` from `react-dom` inside a child component to render some content. In this scenario, you can wrap updates with `act()`s corresponding to their renderers.\n\n``` jsx\nimport { act as domAct } from \"react-dom/test-utils\";\nimport { act as testAct, create } from \"react-test-renderer\";\n// ...\nlet root;\ndomAct(() => {\n  testAct(() => {\n    root = create(<App />);\n  });\n});\nexpect(root).toMatchSnapshot();\n```\n\n### Something Missing?\n\nIf some common scenario is not covered, please let us know on the [issue tracker](https://github.com/reactjs/reactjs.org/issues) for the documentation website.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/testing-recipes.html](https://reactjs.org/docs/testing-recipes.html)"
- name: testInstance.children
  id: test-renderer#testinstancechildren
  summary: The children test instances of this test instance
  belongs_to: Test Renderer
  description: "### `testInstance.children`\n\n``` jsx\ntestInstance.children\n```\n\nThe children test instances of this test instance.\n\n## Ideas\n\nYou can pass `createNodeMock` function to `TestRenderer.create` as the option, which allows for custom mock refs. `createNodeMock` accepts the current element and should return a mock ref object. This is useful when you test a component that relies on refs.\n\n``` jsx\nimport TestRenderer from 'react-test-renderer';\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.input = null;\n  }\n  componentDidMount() {\n    this.input.focus();\n  }\n  render() {\n    return <input type=\"text\" ref={el => this.input = el} />\n  }\n}\n\nlet focused = false;\nTestRenderer.create(\n  <MyComponent />,\n  {\n    createNodeMock: (element) => {\n      if (element.type === 'input') {\n        // mock a focus function\n        return {\n          focus: () => {\n            focused = true;\n          }\n        };\n      }\n      return null;\n    }\n  }\n);\nexpect(focused).toBe(true);\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/test-renderer.html](https://reactjs.org/docs/test-renderer.html)"
- name: testInstance.find()
  id: test-renderer#testinstancefind
  summary: Find a single descendant test instance for which test(testInstance) returns true
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.find()`

    ``` jsx
    testInstance.find(test)
    ```

    Find a single descendant test instance for which `test(testInstance)` returns `true`. If `test(testInstance)` does not return `true` for exactly one test instance, it will throw an error.
- name: testInstance.findAll()
  id: test-renderer#testinstancefindall
  summary: Find all descendant test instances for which test(testInstance) returns true
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.findAll()`

    ``` jsx
    testInstance.findAll(test)
    ```

    Find all descendant test instances for which `test(testInstance)` returns `true`.
- name: testInstance.findAllByProps()
  id: test-renderer#testinstancefindallbyprops
  summary: Find all descendant test instances with the provided props
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.findAllByProps()`

    ``` jsx
    testInstance.findAllByProps(props)
    ```

    Find all descendant test instances with the provided `props`.
- name: testInstance.findAllByType()
  id: test-renderer#testinstancefindallbytype
  summary: Find all descendant test instances with the provided type
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.findAllByType()`

    ``` jsx
    testInstance.findAllByType(type)
    ```

    Find all descendant test instances with the provided `type`.
- name: testInstance.findByProps()
  id: test-renderer#testinstancefindbyprops
  summary: Find a single descendant test instance with the provided props
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.findByProps()`

    ``` jsx
    testInstance.findByProps(props)
    ```

    Find a single descendant test instance with the provided `props`. If there is not exactly one test instance with the provided `props`, it will throw an error.
- name: testInstance.findByType()
  id: test-renderer#testinstancefindbytype
  summary: Find a single descendant test instance with the provided type
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.findByType()`

    ``` jsx
    testInstance.findByType(type)
    ```

    Find a single descendant test instance with the provided `type`. If there is not exactly one test instance with the provided `type`, it will throw an error.
- name: testInstance.instance
  id: test-renderer#testinstanceinstance
  summary: The component instance corresponding to this test instance
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.instance`

    ``` jsx
    testInstance.instance
    ```

    The component instance corresponding to this test instance. It is only available for class components, as function components don’t have instances. It matches the `this` value inside the given component.
- name: testInstance.parent
  id: test-renderer#testinstanceparent
  summary: The parent test instance of this test instance
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.parent`

    ``` jsx
    testInstance.parent
    ```

    The parent test instance of this test instance.
- name: testInstance.props
  id: test-renderer#testinstanceprops
  summary: The props corresponding to this test instance
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.props`

    ``` jsx
    testInstance.props
    ```

    The props corresponding to this test instance. For example, a `<Button size="small" />` component has `{size: 'small'}` as props.
- name: testInstance.type
  id: test-renderer#testinstancetype
  summary: The component type corresponding to this test instance
  belongs_to: Test Renderer
  description: |-
    ### `testInstance.type`

    ``` jsx
    testInstance.type
    ```

    The component type corresponding to this test instance. For example, a `<Button />` component has a type of `Button`.
- name: TestRenderer.act()
  id: test-renderer#testrendereract
  summary: Similar to the act() helper from react-dom/test-utils, TestRenderer.act prepares a component for assertions
  belongs_to: Test Renderer
  description: "### `TestRenderer.act()`\n\n``` jsx\nTestRenderer.act(callback);\n```\n\nSimilar to the [`act()` helper from `react-dom/test-utils`](test-utils#act), `TestRenderer.act` prepares a component for assertions. Use this version of `act()` to wrap calls to `TestRenderer.create` and `testRenderer.update`.\n\n``` jsx\nimport {create, act} from 'react-test-renderer';\nimport App from './app.js'; // The component being tested\n\n// render the component\nlet root; \nact(() => {\n  root = create(<App value={1}/>)\n});\n\n// make assertions on root \nexpect(root.toJSON()).toMatchSnapshot();\n\n// update with some different props\nact(() => {\n  root.update(<App value={2}/>);\n})\n\n// make assertions on root \nexpect(root.toJSON()).toMatchSnapshot();\n```"
- name: TestRenderer.create()
  id: test-renderer#testrenderercreate
  summary: Create a TestRenderer instance with the passed React element
  belongs_to: Test Renderer
  description: |-
    ### `TestRenderer.create()`

    ``` jsx
    TestRenderer.create(element, options);
    ```

    Create a `TestRenderer` instance with the passed React element. It doesn’t use the real DOM, but it still fully renders the component tree into memory so you can make assertions about it. Returns a [TestRenderer instance](#testrenderer-instance).
- name: testRenderer.getInstance()
  id: test-renderer#testrenderergetinstance
  summary: Return the instance corresponding to the root element, if available
  belongs_to: Test Renderer
  description: |-
    ### `testRenderer.getInstance()`

    ``` jsx
    testRenderer.getInstance()
    ```

    Return the instance corresponding to the root element, if available. This will not work if the root element is a function component because they don’t have instances.
- name: testRenderer.root
  id: test-renderer#testrendererroot
  summary: Returns the root “test instance” object that is useful for making assertions about specific nodes in the tree
  belongs_to: Test Renderer
  description: |-
    ### `testRenderer.root`

    ``` jsx
    testRenderer.root
    ```

    Returns the root “test instance” object that is useful for making assertions about specific nodes in the tree. You can use it to find other “test instances” deeper below.
- name: testRenderer.toJSON()
  id: test-renderer#testrenderertojson
  summary: Return an object representing the rendered tree
  belongs_to: Test Renderer
  description: |-
    ### `testRenderer.toJSON()`

    ``` jsx
    testRenderer.toJSON()
    ```

    Return an object representing the rendered tree. This tree only contains the platform-specific nodes like `<div>` or `<View>` and their props, but doesn’t contain any user-written components. This is handy for [snapshot testing](https://facebook.github.io/jest/docs/en/snapshot-testing.html#snapshot-testing-with-jest).
- name: testRenderer.toTree()
  id: test-renderer#testrenderertotree
  summary: Return an object representing the rendered tree
  belongs_to: Test Renderer
  description: |-
    ### `testRenderer.toTree()`

    ``` jsx
    testRenderer.toTree()
    ```

    Return an object representing the rendered tree. The representation is more detailed than the one provided by `toJSON()`, and includes the user-written components. You probably don’t need this method unless you’re writing your own assertion library on top of the test renderer.
- name: testRenderer.unmount()
  id: test-renderer#testrendererunmount
  summary: Unmount the in-memory tree, triggering the appropriate lifecycle events
  belongs_to: Test Renderer
  description: |-
    ### `testRenderer.unmount()`

    ``` jsx
    testRenderer.unmount()
    ```

    Unmount the in-memory tree, triggering the appropriate lifecycle events.
- name: testRenderer.update()
  id: test-renderer#testrendererupdate
  summary: Re-render the in-memory tree with a new root element
  belongs_to: Test Renderer
  description: |-
    ### `testRenderer.update()`

    ``` jsx
    testRenderer.update(element)
    ```

    Re-render the in-memory tree with a new root element. This simulates a React update at the root. If the new element has the same type and key as the previous element, the tree will be updated; otherwise, it will re-mount a new tree.
- name: Thinking in React
  id: thinking-in-react
  summary: React is, in our opinion, the premier way to build big, fast Web apps with JavaScript
  description: "# Thinking in React\n\nReact is, in our opinion, the premier way to build big, fast Web apps with JavaScript. It has scaled very well for us at Facebook and Instagram.\n\nOne of the many great parts of React is how it makes you think about apps as you build them. In this document, we’ll walk you through the thought process of building a searchable product data table using React.\n\n## Start With A Mock\n\nImagine that we already have a JSON API and a mock from our designer. The mock looks like this:\n\nOur JSON API returns some data that looks like this:\n\n``` text\n[\n  {category: \"Sporting Goods\", price: \"$49.99\", stocked: true, name: \"Football\"},\n  {category: \"Sporting Goods\", price: \"$9.99\", stocked: true, name: \"Baseball\"},\n  {category: \"Sporting Goods\", price: \"$29.99\", stocked: false, name: \"Basketball\"},\n  {category: \"Electronics\", price: \"$99.99\", stocked: true, name: \"iPod Touch\"},\n  {category: \"Electronics\", price: \"$399.99\", stocked: false, name: \"iPhone 5\"},\n  {category: \"Electronics\", price: \"$199.99\", stocked: true, name: \"Nexus 7\"}\n];\n```\n\n## Step 1: Break The UI Into A Component Hierarchy\n\nThe first thing you’ll want to do is to draw boxes around every component (and subcomponent) in the mock and give them all names. If you’re working with a designer, they may have already done this, so go talk to them! Their Photoshop layer names may end up being the names of your React components!\n\nBut how do you know what should be its own component? Use the same techniques for deciding if you should create a new function or object. One such technique is the [single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle), that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.\n\nSince you’re often displaying a JSON data model to a user, you’ll find that if your model was built correctly, your UI (and therefore your component structure) will map nicely. That’s because UI and data models tend to adhere to the same *information architecture*. Separate your UI into components, where each component matches one piece of your data model.\n\nYou’ll see here that we have five components in our app. We’ve italicized the data each component represents. The numbers in the image correspond to the numbers below.\n\n1.  **`FilterableProductTable` (orange):** contains the entirety of the example\n2.  **`SearchBar` (blue):** receives all *user input*\n3.  **`ProductTable` (green):** displays and filters the *data collection* based on *user input*\n4.  **`ProductCategoryRow` (turquoise):** displays a heading for each *category*\n5.  **`ProductRow` (red):** displays a row for each *product*\n\nIf you look at `ProductTable`, you’ll see that the table header (containing the “Name” and “Price” labels) isn’t its own component. This is a matter of preference, and there’s an argument to be made either way. For this example, we left it as part of `ProductTable` because it is part of rendering the *data collection* which is `ProductTable`’s responsibility. However, if this header grows to be complex (e.g., if we were to add affordances for sorting), it would certainly make sense to make this its own `ProductTableHeader` component.\n\nNow that we’ve identified the components in our mock, let’s arrange them into a hierarchy. Components that appear within another component in the mock should appear as a child in the hierarchy:\n\n- `FilterableProductTable`\n\n  - `SearchBar`\n\n  - `ProductTable`\n\n    - `ProductCategoryRow`\n    - `ProductRow`\n\n## Step 2: Build A Static Version in React\n\nSee the Pen [Thinking In React: Step 2](https://codepen.io/gaearon/pen/BwWzwm) on [CodePen](https://codepen.io).\n\nNow that you have your component hierarchy, it’s time to implement your app. The easiest way is to build a version that takes your data model and renders the UI but has no interactivity. It’s best to decouple these processes because building a static version requires a lot of typing and no thinking, and adding interactivity requires a lot of thinking and not a lot of typing. We’ll see why.\n\nTo build a static version of your app that renders your data model, you’ll want to build components that reuse other components and pass data using *props*. *props* are a way of passing data from parent to child. If you’re familiar with the concept of *state*, **don’t use state at all** to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don’t need it.\n\nYou can build top-down or bottom-up. That is, you can either start with building the components higher up in the hierarchy (i.e. starting with `FilterableProductTable`) or with the ones lower in it (`ProductRow`). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up and write tests as you build.\n\nAt the end of this step, you’ll have a library of reusable components that render your data model. The components will only have `render()` methods since this is a static version of your app. The component at the top of the hierarchy (`FilterableProductTable`) will take your data model as a prop. If you make a change to your underlying data model and call `root.render()` again, the UI will be updated. You can see how your UI is updated and where to make changes. React’s **one-way data flow** (also called *one-way binding*) keeps everything modular and fast.\n\nRefer to the [React docs](getting-started) if you need help executing this step.\n\n### A Brief Interlude: Props vs State\n\nThere are two types of “model” data in React: props and state. It’s important to understand the distinction between the two; skim [the official React docs](state-and-lifecycle) if you aren’t sure what the difference is. See also [FAQ: What is the difference between state and props?](faq-state#what-is-the-difference-between-state-and-props)\n\n## Step 3: Identify The Minimal (but complete) Representation Of UI State\n\nTo make your UI interactive, you need to be able to trigger changes to your underlying data model. React achieves this with **state**.\n\nTo build your app correctly, you first need to think of the minimal set of mutable state that your app needs. The key here is [DRY: *Don’t Repeat Yourself*](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself). Figure out the absolute minimal representation of the state your application needs and compute everything else you need on-demand. For example, if you’re building a TODO list, keep an array of the TODO items around; don’t keep a separate state variable for the count. Instead, when you want to render the TODO count, take the length of the TODO items array.\n\nThink of all the pieces of data in our example application. We have:\n\n- The original list of products\n- The search text the user has entered\n- The value of the checkbox\n- The filtered list of products\n\nLet’s go through each one and figure out which one is state. Ask three questions about each piece of data:\n\n1.  Is it passed in from a parent via props? If so, it probably isn’t state.\n2.  Does it remain unchanged over time? If so, it probably isn’t state.\n3.  Can you compute it based on any other state or props in your component? If so, it isn’t state.\n\nThe original list of products is passed in as props, so that’s not state. The search text and the checkbox seem to be state since they change over time and can’t be computed from anything. And finally, the filtered list of products isn’t state because it can be computed by combining the original list of products with the search text and value of the checkbox.\n\nSo finally, our state is:\n\n- The search text the user has entered\n- The value of the checkbox\n\n## Step 4: Identify Where Your State Should Live\n\nSee the Pen [Thinking In React: Step 4](https://codepen.io/gaearon/pen/qPrNQZ) on [CodePen](https://codepen.io).\n\nOK, so we’ve identified what the minimal set of app state is. Next, we need to identify which component mutates, or *owns*, this state.\n\nRemember: React is all about one-way data flow down the component hierarchy. It may not be immediately clear which component should own what state. **This is often the most challenging part for newcomers to understand,** so follow these steps to figure it out:\n\nFor each piece of state in your application:\n\n- Identify every component that renders something based on that state.\n- Find a common owner component (a single component above all the components that need the state in the hierarchy).\n- Either the common owner or another component higher up in the hierarchy should own the state.\n- If you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common owner component.\n\nLet’s run through this strategy for our application:\n\n- `ProductTable` needs to filter the product list based on state and `SearchBar` needs to display the search text and checked state.\n- The common owner component is `FilterableProductTable`.\n- It conceptually makes sense for the filter text and checked value to live in `FilterableProductTable`\n\nCool, so we’ve decided that our state lives in `FilterableProductTable`. First, add an instance property `this.state = {filterText: '', inStockOnly: false}` to `FilterableProductTable`’s `constructor` to reflect the initial state of your application. Then, pass `filterText` and `inStockOnly` to `ProductTable` and `SearchBar` as a prop. Finally, use these props to filter the rows in `ProductTable` and set the values of the form fields in `SearchBar`.\n\nYou can start seeing how your application will behave: set `filterText` to `\"ball\"` and refresh your app. You’ll see that the data table is updated correctly.\n\n## Step 5: Add Inverse Data Flow\n\nSee the Pen [Thinking In React: Step 5](https://codepen.io/gaearon/pen/LzWZvb) on [CodePen](https://codepen.io).\n\nSo far, we’ve built an app that renders correctly as a function of props and state flowing down the hierarchy. Now it’s time to support data flowing the other way: the form components deep in the hierarchy need to update the state in `FilterableProductTable`.\n\nReact makes this data flow explicit to help you understand how your program works, but it does require a little more typing than traditional two-way data binding.\n\nIf you try to type or check the box in the previous version of the example (step 4), you’ll see that React ignores your input. This is intentional, as we’ve set the `value` prop of the `input` to always be equal to the `state` passed in from `FilterableProductTable`.\n\nLet’s think about what we want to happen. We want to make sure that whenever the user changes the form, we update the state to reflect the user input. Since components should only update their own state, `FilterableProductTable` will pass callbacks to `SearchBar` that will fire whenever the state should be updated. We can use the `onChange` event on the inputs to be notified of it. The callbacks passed by `FilterableProductTable` will call `setState()`, and the app will be updated.\n\n## And That’s It\n\nHopefully, this gives you an idea of how to think about building components and applications with React. While it may be a little more typing than you’re used to, remember that code is read far more than it’s written, and it’s less difficult to read this modular, explicit code. As you start to build large libraries of components, you’ll appreciate this explicitness and modularity, and with code reuse, your lines of code will start to shrink. :)\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/thinking-in-react.html](https://reactjs.org/docs/thinking-in-react.html)"
- name: Typechecking With PropTypes
  id: typechecking-with-proptypes
  summary: React.PropTypes has moved into a different package since React v15.5
  description: "# Typechecking With PropTypes\n\n> Note:\n>\n> `React.PropTypes` has moved into a different package since React v15.5. Please use [the `prop-types` library instead](https://www.npmjs.com/package/prop-types).\n>\n> We provide [a codemod script](https://reactjs.org/blog/2017/04/07/react-v15.5.0.html#migrating-from-reactproptypes) to automate the conversion.\n\nAs your app grows, you can catch a lot of bugs with typechecking. For some applications, you can use JavaScript extensions like [Flow](https://flow.org/) or [TypeScript](https://www.typescriptlang.org/) to typecheck your whole application. But even if you don’t use those, React has some built-in typechecking abilities. To run typechecking on the props for a component, you can assign the special `propTypes` property:\n\n``` jsx\nimport PropTypes from 'prop-types';\n\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\nGreeting.propTypes = {\n  name: PropTypes.string\n};\n```\n\nIn this example, we are using a class component, but the same functionality could also be applied to function components, or components created by [`React.memo`](react-api#reactmemo) or [`React.forwardRef`](react-api#reactforwardref).\n\n`PropTypes` exports a range of validators that can be used to make sure the data you receive is valid. In this example, we’re using `PropTypes.string`. When an invalid value is provided for a prop, a warning will be shown in the JavaScript console. For performance reasons, `propTypes` is only checked in development mode.\n\n### PropTypes\n\nHere is an example documenting the different validators provided:\n\n``` jsx\nimport PropTypes from 'prop-types';\n\nMyComponent.propTypes = {\n  // You can declare that a prop is a specific JS type. By default, these\n  // are all optional.\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // Anything that can be rendered: numbers, strings, elements or an array\n  // (or fragment) containing these types.\n  optionalNode: PropTypes.node,\n\n  // A React element.\n  optionalElement: PropTypes.element,\n\n  // A React element type (ie. MyComponent).\n  optionalElementType: PropTypes.elementType,\n\n  // You can also declare that a prop is an instance of a class. This uses\n  // JS's instanceof operator.\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // You can ensure that your prop is limited to specific values by treating\n  // it as an enum.\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // An object that could be one of many types\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // An array of a certain type\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // An object with property values of a certain type\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // An object taking on a particular shape\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // An object with warnings on extra properties\n  optionalObjectWithStrictShape: PropTypes.exact({\n    name: PropTypes.string,\n    quantity: PropTypes.number\n  }),   \n\n  // You can chain any of the above with `isRequired` to make sure a warning\n  // is shown if the prop isn't provided.\n  requiredFunc: PropTypes.func.isRequired,\n\n  // A required value of any data type\n  requiredAny: PropTypes.any.isRequired,\n\n  // You can also specify a custom validator. It should return an Error\n  // object if the validation fails. Don't `console.warn` or throw, as this\n  // won't work inside `oneOfType`.\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // You can also supply a custom validator to `arrayOf` and `objectOf`.\n  // It should return an Error object if the validation fails. The validator\n  // will be called for each key in the array or object. The first two\n  // arguments of the validator are the array or object itself, and the\n  // current item's key.\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n### Requiring Single Child\n\nWith `PropTypes.element` you can specify that only a single child can be passed to a component as children.\n\n``` jsx\nimport PropTypes from 'prop-types';\n\nclass MyComponent extends React.Component {\n  render() {\n    // This must be exactly one element or it will warn.\n    const children = this.props.children;\n    return (\n      <div>\n        {children}\n      </div>\n    );\n  }\n}\n\nMyComponent.propTypes = {\n  children: PropTypes.element.isRequired\n};\n```\n\n### Default Prop Values\n\nYou can define default values for your `props` by assigning to the special `defaultProps` property:\n\n``` jsx\nclass Greeting extends React.Component {\n  render() {\n    return (\n      <h1>Hello, {this.props.name}</h1>\n    );\n  }\n}\n\n// Specifies the default values for props:\nGreeting.defaultProps = {\n  name: 'Stranger'\n};\n\n// Renders \"Hello, Stranger\":\nconst root = ReactDOM.createRoot(document.getElementById('example')); \nroot.render(<Greeting />);\n```\n\nSince ES2022 you can also declare `defaultProps` as static property within a React component class. For more information, see the [class public static fields](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_static_fields). This modern syntax will require a compilation step to work within older browsers.\n\n``` jsx\nclass Greeting extends React.Component {\n  static defaultProps = {\n    name: 'stranger'\n  }\n\n  render() {\n    return (\n      <div>Hello, {this.props.name}</div>\n    )\n  }\n}\n```\n\nThe `defaultProps` will be used to ensure that `this.props.name` will have a value if it was not specified by the parent component. The `propTypes` typechecking happens after `defaultProps` are resolved, so typechecking will also apply to the `defaultProps`.\n\n### Function Components\n\nIf you are using function components in your regular development, you may want to make some small changes to allow PropTypes to be properly applied.\n\nLet’s say you have a component like this:\n\n``` jsx\nexport default function HelloWorldComponent({ name }) {\n  return (\n    <div>Hello, {name}</div>\n  )\n}\n```\n\nTo add PropTypes, you may want to declare the component in a separate function before exporting, like this:\n\n``` jsx\nfunction HelloWorldComponent({ name }) {\n  return (\n    <div>Hello, {name}</div>\n  )\n}\n\nexport default HelloWorldComponent\n```\n\nThen, you can add PropTypes directly to the `HelloWorldComponent`:\n\n``` jsx\nimport PropTypes from 'prop-types'\n\nfunction HelloWorldComponent({ name }) {\n  return (\n    <div>Hello, {name}</div>\n  )\n}\n\nHelloWorldComponent.propTypes = {\n  name: PropTypes.string\n}\n\nexport default HelloWorldComponent\n```\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/typechecking-with-proptypes.html](https://reactjs.org/docs/typechecking-with-proptypes.html)"
- name: Uncontrolled Components
  id: uncontrolled-components
  summary: In most cases, we recommend using controlled components to implement forms
  description: "# Uncontrolled Components\n\nIn most cases, we recommend using [controlled components](forms#controlled-components) to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.\n\nTo write an uncontrolled component, instead of writing an event handler for every state update, you can [use a ref](refs-and-the-dom) to get form values from the DOM.\n\nFor example, this code accepts a single name in an uncontrolled component:\n\n``` jsx\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.input = React.createRef();\n  }\n\n  handleSubmit(event) {\n    alert('A name was submitted: ' + this.input.current.value);\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" ref={this.input} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n```\n\n[**Try it on CodePen**](https://codepen.io/gaearon/pen/WooRWa?editors=0010)\n\nSince an uncontrolled component keeps the source of truth in the DOM, it is sometimes easier to integrate React and non-React code when using uncontrolled components. It can also be slightly less code if you want to be quick and dirty. Otherwise, you should usually use controlled components.\n\nIf it’s still not clear which type of component you should use for a particular situation, you might find [this article on controlled versus uncontrolled inputs](https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/) to be helpful.\n\n### Default Values\n\nIn the React rendering lifecycle, the `value` attribute on form elements will override the value in the DOM. With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a `defaultValue` attribute instead of `value`. Changing the value of `defaultValue` attribute after a component has mounted will not cause any update of the value in the DOM.\n\n``` jsx\nrender() {\n  return (\n    <form onSubmit={this.handleSubmit}>\n      <label>\n        Name:\n        <input\n          defaultValue=\"Bob\"          type=\"text\"\n          ref={this.input} />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n}\n```\n\nLikewise, `<input type=\"checkbox\">` and `<input type=\"radio\">` support `defaultChecked`, and `<select>` and `<textarea>` supports `defaultValue`.\n\n## The file input Tag\n\nIn HTML, an `<input type=\"file\">` lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the [File API](https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications).\n\n``` html\n<input type=\"file\" />\n```\n\nIn React, an `<input type=\"file\" />` is always an uncontrolled component because its value can only be set by a user, and not programmatically.\n\nYou should use the File API to interact with the files. The following example shows how to create a [ref to the DOM node](refs-and-the-dom) to access file(s) in a submit handler:\n\n``` jsx\nclass FileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fileInput = React.createRef();\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    alert(\n      `Selected file - ${this.fileInput.current.files[0].name}`\n    );\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Upload file:\n          <input type=\"file\" ref={this.fileInput} />\n        </label>\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root')\n);\nroot.render(<FileInput />);\n```\n\n[**Try it on CodePen**](https://reactjs.org/redirect-to-codepen/uncontrolled-components/input-type-file)\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/uncontrolled-components.html](https://reactjs.org/docs/uncontrolled-components.html)"
- name: unmountComponentAtNode()
  id: react-dom#unmountcomponentatnode
  summary: unmountComponentAtNode has been replaced with root.unmount() in React 18
  belongs_to: ReactDOM
  description: |-
    ### `unmountComponentAtNode()`

    ``` jsx
    unmountComponentAtNode(container)
    ```

    > Note:
    >
    > `unmountComponentAtNode` has been replaced with `root.unmount()` in React 18. See [createRoot](react-dom-client#createroot) for more info.

    Remove a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns `true` if a component was unmounted and `false` if there was no component to unmount.
- name: UNSAFE_componentWillMount()
  id: react-component#unsafe_componentwillmount
  summary: This lifecycle was previously named componentWillMount
  belongs_to: React.Component
  description: |-
    ### `UNSAFE_componentWillMount()`

    ``` jsx
    UNSAFE_componentWillMount()
    ```

    > Note
    >
    > This lifecycle was previously named `componentWillMount`. That name will continue to work until version 17. Use the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.

    `UNSAFE_componentWillMount()` is invoked just before mounting occurs. It is called before `render()`, therefore calling `setState()` synchronously in this method will not trigger an extra rendering. Generally, we recommend using the `constructor()` instead for initializing state.

    Avoid introducing any side-effects or subscriptions in this method. For those use cases, use `componentDidMount()` instead.

    This is the only lifecycle method called on server rendering.
- name: UNSAFE_componentWillReceiveProps()
  id: react-component#unsafe_componentwillreceiveprops
  summary: This lifecycle was previously named componentWillReceiveProps
  belongs_to: React.Component
  description: |-
    ### `UNSAFE_componentWillReceiveProps()`

    ``` jsx
    UNSAFE_componentWillReceiveProps(nextProps)
    ```

    > Note
    >
    > This lifecycle was previously named `componentWillReceiveProps`. That name will continue to work until version 17. Use the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.

    > Note:
    >
    > Using this lifecycle method often leads to bugs and inconsistencies
    >
    > - If you need to **perform a side effect** (for example, data fetching or an animation) in response to a change in props, use [`componentDidUpdate`](#componentdidupdate) lifecycle instead.
    > - If you used `componentWillReceiveProps` for **re-computing some data only when a prop changes**, [use a memoization helper instead](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#what-about-memoization).
    > - If you used `componentWillReceiveProps` to **“reset” some state when a prop changes**, consider either making a component [fully controlled](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-controlled-component) or [fully uncontrolled with a `key`](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html#recommendation-fully-uncontrolled-component-with-a-key) instead.
    >
    > For other use cases, [follow the recommendations in this blog post about derived state](https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html).

    `UNSAFE_componentWillReceiveProps()` is invoked before a mounted component receives new props. If you need to update the state in response to prop changes (for example, to reset it), you may compare `this.props` and `nextProps` and perform state transitions using `this.setState()` in this method.

    Note that if a parent component causes your component to re-render, this method will be called even if props have not changed. Make sure to compare the current and next values if you only want to handle changes.

    React doesn’t call `UNSAFE_componentWillReceiveProps()` with initial props during [mounting](#mounting). It only calls this method if some of component’s props may update. Calling `this.setState()` generally doesn’t trigger `UNSAFE_componentWillReceiveProps()`.
- name: UNSAFE_componentWillUpdate()
  id: react-component#unsafe_componentwillupdate
  summary: This lifecycle was previously named componentWillUpdate
  belongs_to: React.Component
  description: |-
    ### `UNSAFE_componentWillUpdate()`

    ``` jsx
    UNSAFE_componentWillUpdate(nextProps, nextState)
    ```

    > Note
    >
    > This lifecycle was previously named `componentWillUpdate`. That name will continue to work until version 17. Use the [`rename-unsafe-lifecycles` codemod](https://github.com/reactjs/react-codemod#rename-unsafe-lifecycles) to automatically update your components.

    `UNSAFE_componentWillUpdate()` is invoked just before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.

    Note that you cannot call `this.setState()` here; nor should you do anything else (e.g. dispatch a Redux action) that would trigger an update to a React component before `UNSAFE_componentWillUpdate()` returns.

    Typically, this method can be replaced by `componentDidUpdate()`. If you were reading from the DOM in this method (e.g. to save a scroll position), you can move that logic to `getSnapshotBeforeUpdate()`.

    > Note
    >
    > `UNSAFE_componentWillUpdate()` will not be invoked if [`shouldComponentUpdate()`](#shouldcomponentupdate) returns false.

    ## Other APIs

    Unlike the lifecycle methods above (which React calls for you), the methods below are the methods *you* can call from your components.

    There are just two of them: `setState()` and `forceUpdate()`.
- name: useCallback
  id: hooks-reference#usecallback
  summary: Returns a memoized callback
  belongs_to: Hooks API Reference
  description: |-
    ### `useCallback`

    ``` jsx
    const memoizedCallback = useCallback(
      () => {
        doSomething(a, b);
      },
      [a, b],
    );
    ```

    Returns a [memoized](https://en.wikipedia.org/wiki/Memoization) callback.

    Pass an inline callback and an array of dependencies. `useCallback` will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. `shouldComponentUpdate`).

    `useCallback(fn, deps)` is equivalent to `useMemo(() => fn, deps)`.

    > Note
    >
    > The array of dependencies is not passed as arguments to the callback. Conceptually, though, that’s what they represent: every value referenced inside the callback should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.
    >
    > We recommend using the [`exhaustive-deps`](https://github.com/facebook/react/issues/14920) rule as part of our [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation) package. It warns when dependencies are specified incorrectly and suggests a fix.
- name: useContext
  id: hooks-reference#usecontext
  summary: Accepts a context object (the value returned from React.createContext) and returns the current context value for that context
  belongs_to: Hooks API Reference
  description: |-
    ### `useContext`

    ``` jsx
    const value = useContext(MyContext);
    ```

    Accepts a context object (the value returned from `React.createContext`) and returns the current context value for that context. The current context value is determined by the `value` prop of the nearest `<MyContext.Provider>` above the calling component in the tree.

    When the nearest `<MyContext.Provider>` above the component updates, this Hook will trigger a rerender with the latest context `value` passed to that `MyContext` provider. Even if an ancestor uses [`React.memo`](react-api#reactmemo) or [`shouldComponentUpdate`](react-component#shouldcomponentupdate), a rerender will still happen starting at the component itself using `useContext`.

    Don’t forget that the argument to `useContext` must be the *context object itself*:

    - **Correct:** `useContext(MyContext)`
    - **Incorrect:** `useContext(MyContext.Consumer)`
    - **Incorrect:** `useContext(MyContext.Provider)`

    A component calling `useContext` will always re-render when the context value changes. If re-rendering the component is expensive, you can [optimize it by using memoization](https://github.com/facebook/react/issues/15156#issuecomment-474590693).

    > Tip
    >
    > If you’re familiar with the context API before Hooks, `useContext(MyContext)` is equivalent to `static contextType = MyContext` in a class, or to `<MyContext.Consumer>`.
    >
    > `useContext(MyContext)` only lets you *read* the context and subscribe to its changes. You still need a `<MyContext.Provider>` above in the tree to *provide* the value for this context.

    **Putting it together with Context.Provider**

    ``` jsx
    const themes = {
      light: {
        foreground: "#000000",
        background: "#eeeeee"
      },
      dark: {
        foreground: "#ffffff",
        background: "#222222"
      }
    };

    const ThemeContext = React.createContext(themes.light);

    function App() {
      return (
        <ThemeContext.Provider value={themes.dark}>
          <Toolbar />
        </ThemeContext.Provider>
      );
    }

    function Toolbar(props) {
      return (
        <div>
          <ThemedButton />
        </div>
      );
    }

    function ThemedButton() {
      const theme = useContext(ThemeContext);

      return (
        <button style={{ background: theme.background, color: theme.foreground }}>
          I am styled by theme context!
        </button>
      );
    }
    ```

    This example is modified for hooks from a previous example in the [Context Advanced Guide](context), where you can find more information about when and how to use Context.

    ## Additional Hooks

    The following Hooks are either variants of the basic ones from the previous section, or only needed for specific edge cases. Don’t stress about learning them up front.
- name: useDebugValue
  id: hooks-reference#usedebugvalue
  summary: useDebugValue can be used to display a label for custom hooks in React DevTools
  belongs_to: Hooks API Reference
  description: |-
    ### `useDebugValue`

    ``` jsx
    useDebugValue(value)
    ```

    `useDebugValue` can be used to display a label for custom hooks in React DevTools.

    For example, consider the `useFriendStatus` custom Hook described in [“Building Your Own Hooks”](hooks-custom):

    ``` jsx
    function useFriendStatus(friendID) {
      const [isOnline, setIsOnline] = useState(null);

      // ...

      // Show a label in DevTools next to this Hook
      // e.g. "FriendStatus: Online"
      useDebugValue(isOnline ? 'Online' : 'Offline');

      return isOnline;
    }
    ```

    > Tip
    >
    > We don’t recommend adding debug values to every custom Hook. It’s most valuable for custom Hooks that are part of shared libraries.

    #### Defer formatting debug values

    In some cases formatting a value for display might be an expensive operation. It’s also unnecessary unless a Hook is actually inspected.

    For this reason `useDebugValue` accepts a formatting function as an optional second parameter. This function is only called if the Hooks are inspected. It receives the debug value as a parameter and should return a formatted display value.

    For example a custom Hook that returned a `Date` value could avoid calling the `toDateString` function unnecessarily by passing the following formatter:

    ``` jsx
    useDebugValue(date, date => date.toDateString());
    ```
- name: useDeferredValue
  id: hooks-reference#usedeferredvalue
  summary: useDeferredValue accepts a value and returns a new copy of the value that will defer to more urgent updates
  belongs_to: Hooks API Reference
  description: |-
    ### `useDeferredValue`

    ``` jsx
    const deferredValue = useDeferredValue(value);
    ```

    `useDeferredValue` accepts a value and returns a new copy of the value that will defer to more urgent updates. If the current render is the result of an urgent update, like user input, React will return the previous value and then render the new value after the urgent render has completed.

    This hook is similar to user-space hooks which use debouncing or throttling to defer updates. The benefits to using `useDeferredValue` is that React will work on the update as soon as other work finishes (instead of waiting for an arbitrary amount of time), and like [`startTransition`](react-api#starttransition), deferred values can suspend without triggering an unexpected fallback for existing content.

    #### Memoizing deferred children

    `useDeferredValue` only defers the value that you pass to it. If you want to prevent a child component from re-rendering during an urgent update, you must also memoize that component with [`React.memo`](react-api#reactmemo) or [`React.useMemo`](hooks-reference#usememo):

    ``` jsx
    function Typeahead() {
      const query = useSearchQuery('');
      const deferredQuery = useDeferredValue(query);

      // Memoizing tells React to only re-render when deferredQuery changes,
      // not when query changes.
      const suggestions = useMemo(() =>
        <SearchSuggestions query={deferredQuery} />,
        [deferredQuery]
      );

      return (
        <>
          <SearchInput query={query} />
          <Suspense fallback="Loading results...">
            {suggestions}
          </Suspense>
        </>
      );
    }
    ```

    Memoizing the children tells React that it only needs to re-render them when `deferredQuery` changes and not when `query` changes. This caveat is not unique to `useDeferredValue`, and it’s the same pattern you would use with similar hooks that use debouncing or throttling.
- name: useEffect
  id: hooks-reference#useeffect
  summary: Accepts a function that contains imperative, possibly effectful code
  belongs_to: Hooks API Reference
  description: |-
    ### `useEffect`

    ``` jsx
    useEffect(didUpdate);
    ```

    Accepts a function that contains imperative, possibly effectful code.

    Mutations, subscriptions, timers, logging, and other side effects are not allowed inside the main body of a function component (referred to as React’s *render phase*). Doing so will lead to confusing bugs and inconsistencies in the UI.

    Instead, use `useEffect`. The function passed to `useEffect` will run after the render is committed to the screen. Think of effects as an escape hatch from React’s purely functional world into the imperative world.

    By default, effects run after every completed render, but you can choose to fire them [only when certain values have changed](#conditionally-firing-an-effect).

    #### Cleaning up an effect

    Often, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to `useEffect` may return a clean-up function. For example, to create a subscription:

    ``` jsx
    useEffect(() => {
      const subscription = props.source.subscribe();
      return () => {
        // Clean up the subscription
        subscription.unsubscribe();
      };
    });
    ```

    The clean-up function runs before the component is removed from the UI to prevent memory leaks. Additionally, if a component renders multiple times (as they typically do), the **previous effect is cleaned up before executing the next effect**. In our example, this means a new subscription is created on every update. To avoid firing an effect on every update, refer to the next section.

    #### Timing of effects

    Unlike `componentDidMount` and `componentDidUpdate`, the function passed to `useEffect` fires **after** layout and paint, during a deferred event. This makes it suitable for the many common side effects, like setting up subscriptions and event handlers, because most types of work shouldn’t block the browser from updating the screen.

    However, not all effects can be deferred. For example, a DOM mutation that is visible to the user must fire synchronously before the next paint so that the user does not perceive a visual inconsistency. (The distinction is conceptually similar to passive versus active event listeners.) For these types of effects, React provides one additional Hook called [`useLayoutEffect`](#uselayouteffect). It has the same signature as `useEffect`, and only differs in when it is fired.

    Additionally, starting in React 18, the function passed to `useEffect` will fire synchronously **before** layout and paint when it’s the result of a discrete user input such as a click, or when it’s the result of an update wrapped in [`flushSync`](react-dom#flushsync). This behavior allows the result of the effect to be observed by the event system, or by the caller of [`flushSync`](react-dom#flushsync).

    > Note
    >
    > This only affects the timing of when the function passed to `useEffect` is called - updates scheduled inside these effects are still deferred. This is different than [`useLayoutEffect`](#uselayouteffect), which fires the function and processes the updates inside of it immediately.

    Even in cases where `useEffect` is deferred until after the browser has painted, it’s guaranteed to fire before any new renders. React will always flush a previous render’s effects before starting a new update.

    #### Conditionally firing an effect

    The default behavior for effects is to fire the effect after every completed render. That way an effect is always recreated if one of its dependencies changes.

    However, this may be overkill in some cases, like the subscription example from the previous section. We don’t need to create a new subscription on every update, only if the `source` prop has changed.

    To implement this, pass a second argument to `useEffect` that is the array of values that the effect depends on. Our updated example now looks like this:

    ``` jsx
    useEffect(
      () => {
        const subscription = props.source.subscribe();
        return () => {
          subscription.unsubscribe();
        };
      },
      [props.source],
    );
    ```

    Now the subscription will only be recreated when `props.source` changes.

    > Note
    >
    > If you use this optimization, make sure the array includes **all values from the component scope (such as props and state) that change over time and that are used by the effect**. Otherwise, your code will reference stale values from previous renders. Learn more about [how to deal with functions](hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies) and what to do when the [array values change too often](hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often).
    >
    > If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array (`[]`) as a second argument. This tells React that your effect doesn’t depend on *any* values from props or state, so it never needs to re-run. This isn’t handled as a special case — it follows directly from how the dependencies array always works.
    >
    > If you pass an empty array (`[]`), the props and state inside the effect will always have their initial values. While passing `[]` as the second argument is closer to the familiar `componentDidMount` and `componentWillUnmount` mental model, there are usually [better](hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies) [solutions](hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often) to avoid re-running effects too often. Also, don’t forget that React defers running `useEffect` until after the browser has painted, so doing extra work is less of a problem.
    >
    > We recommend using the [`exhaustive-deps`](https://github.com/facebook/react/issues/14920) rule as part of our [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation) package. It warns when dependencies are specified incorrectly and suggests a fix.

    The array of dependencies is not passed as arguments to the effect function. Conceptually, though, that’s what they represent: every value referenced inside the effect function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.
- name: useId
  id: hooks-reference#useid
  summary: useId is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches
  belongs_to: Hooks API Reference
  description: |-
    ### `useId`

    ``` jsx
    const id = useId();
    ```

    `useId` is a hook for generating unique IDs that are stable across the server and client, while avoiding hydration mismatches.

    > Note
    >
    > `useId` is **not** for generating [keys in a list](lists-and-keys#keys). Keys should be generated from your data.

    For a basic example, pass the `id` directly to the elements that need it:

    ``` jsx
    function Checkbox() {
      const id = useId();
      return (
        <>
          <label htmlFor={id}>Do you like React?</label>
          <input id={id} type="checkbox" name="react"/>
        </>
      );
    };
    ```

    For multiple IDs in the same component, append a suffix using the same `id`:

    ``` jsx
    function NameFields() {
      const id = useId();
      return (
        <div>
          <label htmlFor={id + '-firstName'}>First Name</label>
          <div>
            <input id={id + '-firstName'} type="text" />
          </div>
          <label htmlFor={id + '-lastName'}>Last Name</label>
          <div>
            <input id={id + '-lastName'} type="text" />
          </div>
        </div>
      );
    }
    ```

    > Note:
    >
    > `useId` generates a string that includes the `:` token. This helps ensure that the token is unique, but is not supported in CSS selectors or APIs like `querySelectorAll`.
    >
    > `useId` supports an `identifierPrefix` to prevent collisions in multi-root apps. To configure, see the options for [`hydrateRoot`](react-dom-client#hydrateroot) and [`ReactDOMServer`](react-dom-server).

    ## Library Hooks

    The following Hooks are provided for library authors to integrate libraries deeply into the React model, and are not typically used in application code.
- name: useImperativeHandle
  id: hooks-reference#useimperativehandle
  summary: useImperativeHandle customizes the instance value that is exposed to parent components when using ref
  belongs_to: Hooks API Reference
  description: |-
    ### `useImperativeHandle`

    ``` jsx
    useImperativeHandle(ref, createHandle, [deps])
    ```

    `useImperativeHandle` customizes the instance value that is exposed to parent components when using `ref`. As always, imperative code using refs should be avoided in most cases. `useImperativeHandle` should be used with [`forwardRef`](react-api#reactforwardref):

    ``` jsx
    function FancyInput(props, ref) {
      const inputRef = useRef();
      useImperativeHandle(ref, () => ({
        focus: () => {
          inputRef.current.focus();
        }
      }));
      return <input ref={inputRef} ... />;
    }
    FancyInput = forwardRef(FancyInput);
    ```

    In this example, a parent component that renders `<FancyInput ref={inputRef} />` would be able to call `inputRef.current.focus()`.
- name: useInsertionEffect
  id: hooks-reference#useinsertioneffect
  summary: The signature is identical to useEffect, but it fires synchronously before all DOM mutations
  belongs_to: Hooks API Reference
  description: "### `useInsertionEffect`\n\n``` jsx\nuseInsertionEffect(didUpdate);\n```\n\nThe signature is identical to `useEffect`, but it fires synchronously *before* all DOM mutations. Use this to inject styles into the DOM before reading layout in [`useLayoutEffect`](#uselayouteffect). Since this hook is limited in scope, this hook does not have access to refs and cannot schedule updates.\n\n> Note:\n>\n> `useInsertionEffect` should be limited to css-in-js library authors. Prefer [`useEffect`](#useeffect) or [`useLayoutEffect`](#uselayouteffect) instead.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/hooks-reference.html](https://reactjs.org/docs/hooks-reference.html)"
- name: useLayoutEffect
  id: hooks-reference#uselayouteffect
  summary: The signature is identical to useEffect, but it fires synchronously after all DOM mutations
  belongs_to: Hooks API Reference
  description: |-
    ### `useLayoutEffect`

    The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.

    Prefer the standard `useEffect` when possible to avoid blocking visual updates.

    > Tip
    >
    > If you’re migrating code from a class component, note `useLayoutEffect` fires in the same phase as `componentDidMount` and `componentDidUpdate`. However, **we recommend starting with `useEffect` first** and only trying `useLayoutEffect` if that causes a problem.
    >
    > If you use server rendering, keep in mind that *neither* `useLayoutEffect` nor `useEffect` can run until the JavaScript is downloaded. This is why React warns when a server-rendered component contains `useLayoutEffect`. To fix this, either move that logic to `useEffect` (if it isn’t necessary for the first render), or delay showing that component until after the client renders (if the HTML looks broken until `useLayoutEffect` runs).
    >
    > To exclude a component that needs layout effects from the server-rendered HTML, render it conditionally with `showChild && <Child />` and defer showing it with `useEffect(() => { setShowChild(true); }, [])`. This way, the UI doesn’t appear broken before hydration.
- name: useMemo
  id: hooks-reference#usememo
  summary: Returns a memoized value
  belongs_to: Hooks API Reference
  description: |-
    ### `useMemo`

    ``` jsx
    const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
    ```

    Returns a [memoized](https://en.wikipedia.org/wiki/Memoization) value.

    Pass a “create” function and an array of dependencies. `useMemo` will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.

    Remember that the function passed to `useMemo` runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in `useEffect`, not `useMemo`.

    If no array is provided, a new value will be computed on every render.

    **You may rely on `useMemo` as a performance optimization, not as a semantic guarantee.** In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without `useMemo` — and then add it to optimize performance.

    > Note
    >
    > The array of dependencies is not passed as arguments to the function. Conceptually, though, that’s what they represent: every value referenced inside the function should also appear in the dependencies array. In the future, a sufficiently advanced compiler could create this array automatically.
    >
    > We recommend using the [`exhaustive-deps`](https://github.com/facebook/react/issues/14920) rule as part of our [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation) package. It warns when dependencies are specified incorrectly and suggests a fix.
- name: useReducer
  id: hooks-reference#usereducer
  summary: An alternative to useState
  belongs_to: Hooks API Reference
  description: |-
    ### `useReducer`

    ``` jsx
    const [state, dispatch] = useReducer(reducer, initialArg, init);
    ```

    An alternative to [`useState`](#usestate). Accepts a reducer of type `(state, action) => newState`, and returns the current state paired with a `dispatch` method. (If you’re familiar with Redux, you already know how this works.)

    `useReducer` is usually preferable to `useState` when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one. `useReducer` also lets you optimize performance for components that trigger deep updates because [you can pass `dispatch` down instead of callbacks](hooks-faq#how-to-avoid-passing-callbacks-down).

    Here’s the counter example from the [`useState`](#usestate) section, rewritten to use a reducer:

    ``` jsx
    const initialState = {count: 0};

    function reducer(state, action) {
      switch (action.type) {
        case 'increment':
          return {count: state.count + 1};
        case 'decrement':
          return {count: state.count - 1};
        default:
          throw new Error();
      }
    }

    function Counter() {
      const [state, dispatch] = useReducer(reducer, initialState);
      return (
        <>
          Count: {state.count}
          <button onClick={() => dispatch({type: 'decrement'})}>-</button>
          <button onClick={() => dispatch({type: 'increment'})}>+</button>
        </>
      );
    }
    ```

    > Note
    >
    > React guarantees that `dispatch` function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the `useEffect` or `useCallback` dependency list.

    #### Specifying the initial state

    There are two different ways to initialize `useReducer` state. You may choose either one depending on the use case. The simplest way is to pass the initial state as a second argument:

    ``` jsx
      const [state, dispatch] = useReducer(
        reducer,
        {count: initialCount}
      );
    ```

    > Note
    >
    > React doesn’t use the `state = initialState` argument convention popularized by Redux. The initial value sometimes needs to depend on props and so is specified from the Hook call instead. If you feel strongly about this, you can call `useReducer(reducer, undefined, reducer)` to emulate the Redux behavior, but it’s not encouraged.

    #### Lazy initialization

    You can also create the initial state lazily. To do this, you can pass an `init` function as the third argument. The initial state will be set to `init(initialArg)`.

    It lets you extract the logic for calculating the initial state outside the reducer. This is also handy for resetting the state later in response to an action:

    ``` jsx
    function init(initialCount) {
      return {count: initialCount};
    }

    function reducer(state, action) {
      switch (action.type) {
        case 'increment':
          return {count: state.count + 1};
        case 'decrement':
          return {count: state.count - 1};
        case 'reset':
          return init(action.payload);
        default:
          throw new Error();
      }
    }

    function Counter({initialCount}) {
      const [state, dispatch] = useReducer(reducer, initialCount, init);
      return (
        <>
          Count: {state.count}
          <button
            onClick={() => dispatch({type: 'reset', payload: initialCount})}>        Reset
          </button>
          <button onClick={() => dispatch({type: 'decrement'})}>-</button>
          <button onClick={() => dispatch({type: 'increment'})}>+</button>
        </>
      );
    }
    ```

    #### Bailing out of a dispatch

    If you return the same value from a Reducer Hook as the current state, React will bail out without rendering the children or firing effects. (React uses the [`Object.is` comparison algorithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description).)

    Note that React may still need to render that specific component again before bailing out. That shouldn’t be a concern because React won’t unnecessarily go “deeper” into the tree. If you’re doing expensive calculations while rendering, you can optimize them with `useMemo`.
- name: useRef
  id: hooks-reference#useref
  summary: useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component
  belongs_to: Hooks API Reference
  description: |-
    ### `useRef`

    ``` jsx
    const refContainer = useRef(initialValue);
    ```

    `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument (`initialValue`). The returned object will persist for the full lifetime of the component.

    A common use case is to access a child imperatively:

    ``` jsx
    function TextInputWithFocusButton() {
      const inputEl = useRef(null);
      const onButtonClick = () => {
        // `current` points to the mounted text input element
        inputEl.current.focus();
      };
      return (
        <>
          <input ref={inputEl} type="text" />
          <button onClick={onButtonClick}>Focus the input</button>
        </>
      );
    }
    ```

    Essentially, `useRef` is like a “box” that can hold a mutable value in its `.current` property.

    You might be familiar with refs primarily as a way to [access the DOM](refs-and-the-dom). If you pass a ref object to React with `<div ref={myRef} />`, React will set its `.current` property to the corresponding DOM node whenever that node changes.

    However, `useRef()` is useful for more than the `ref` attribute. It’s [handy for keeping any mutable value around](hooks-faq#is-there-something-like-instance-variables) similar to how you’d use instance fields in classes.

    This works because `useRef()` creates a plain JavaScript object. The only difference between `useRef()` and creating a `{current: ...}` object yourself is that `useRef` will give you the same ref object on every render.

    Keep in mind that `useRef` *doesn’t* notify you when its content changes. Mutating the `.current` property doesn’t cause a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use a [callback ref](hooks-faq#how-can-i-measure-a-dom-node) instead.
- name: useState
  id: hooks-reference#usestate
  summary: Returns a stateful value, and a function to update it
  belongs_to: Hooks API Reference
  description: |-
    ### `useState`

    ``` jsx
    const [state, setState] = useState(initialState);
    ```

    Returns a stateful value, and a function to update it.

    During the initial render, the returned state (`state`) is the same as the value passed as the first argument (`initialState`).

    The `setState` function is used to update the state. It accepts a new state value and enqueues a re-render of the component.

    ``` jsx
    setState(newState);
    ```

    During subsequent re-renders, the first value returned by `useState` will always be the most recent state after applying updates.

    > Note
    >
    > React guarantees that `setState` function identity is stable and won’t change on re-renders. This is why it’s safe to omit from the `useEffect` or `useCallback` dependency list.

    #### Functional updates

    If the new state is computed using the previous state, you can pass a function to `setState`. The function will receive the previous value, and return an updated value. Here’s an example of a counter component that uses both forms of `setState`:

    ``` jsx
    function Counter({initialCount}) {
      const [count, setCount] = useState(initialCount);
      return (
        <>
          Count: {count}
          <button onClick={() => setCount(initialCount)}>Reset</button>
          <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>
          <button onClick={() => setCount(prevCount => prevCount + 1)}>+</button>
        </>
      );
    }
    ```

    The ”+” and ”-” buttons use the functional form, because the updated value is based on the previous value. But the “Reset” button uses the normal form, because it always sets the count back to the initial value.

    If your update function returns the exact same value as the current state, the subsequent rerender will be skipped completely.

    > Note
    >
    > Unlike the `setState` method found in class components, `useState` does not automatically merge update objects. You can replicate this behavior by combining the function updater form with object spread syntax:
    >
    > ``` jsx
    > const [state, setState] = useState({});
    > setState(prevState => {
    >   // Object.assign would also work
    >   return {...prevState, ...updatedValues};
    > });
    > ```
    >
    > Another option is `useReducer`, which is more suited for managing state objects that contain multiple sub-values.

    #### Lazy initial state

    The `initialState` argument is the state used during the initial render. In subsequent renders, it is disregarded. If the initial state is the result of an expensive computation, you may provide a function instead, which will be executed only on the initial render:

    ``` jsx
    const [state, setState] = useState(() => {
      const initialState = someExpensiveComputation(props);
      return initialState;
    });
    ```

    #### Bailing out of a state update

    If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects. (React uses the [`Object.is` comparison algorithm](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description).)

    Note that React may still need to render that specific component again before bailing out. That shouldn’t be a concern because React won’t unnecessarily go “deeper” into the tree. If you’re doing expensive calculations while rendering, you can optimize them with `useMemo`.

    #### Batching of state updates

    React may group several state updates into a single re-render to improve performance. Normally, this improves performance and shouldn’t affect your application’s behavior.

    Before React 18, only updates inside React event handlers were batched. Starting with React 18, [batching is enabled for all updates by default](https://reactjs.org/blog/2022/03/08/react-18-upgrade-guide.html#automatic-batching). Note that React makes sure that updates from several *different* user-initiated events — for example, clicking a button twice — are always processed separately and do not get batched. This prevents logical mistakes.

    In the rare case that you need to force the DOM update to be applied synchronously, you may wrap it in [`flushSync`](react-dom#flushsync). However, this can hurt performance so do this only where needed.
- name: useSyncExternalStore
  id: hooks-reference#usesyncexternalstore
  summary: useSyncExternalStore is a hook recommended for reading and subscribing from external data sources in a way that’s compatible with concurrent rendering features like selective hydration and time slicing
  belongs_to: Hooks API Reference
  description: |-
    ### `useSyncExternalStore`

    ``` jsx
    const state = useSyncExternalStore(subscribe, getSnapshot[, getServerSnapshot]);
    ```

    `useSyncExternalStore` is a hook recommended for reading and subscribing from external data sources in a way that’s compatible with concurrent rendering features like selective hydration and time slicing.

    This method returns the value of the store and accepts three arguments:

    - `subscribe`: function to register a callback that is called whenever the store changes.
    - `getSnapshot`: function that returns the current value of the store.
    - `getServerSnapshot`: function that returns the snapshot used during server rendering.

    The most basic example simply subscribes to the entire store:

    ``` jsx
    const state = useSyncExternalStore(store.subscribe, store.getSnapshot);
    ```

    However, you can also subscribe to a specific field:

    ``` jsx
    const selectedField = useSyncExternalStore(
      store.subscribe,
      () => store.getSnapshot().selectedField,
    );
    ```

    When server rendering, you must serialize the store value used on the server, and provide it to `useSyncExternalStore`. React will use this snapshot during hydration to prevent server mismatches:

    ``` jsx
    const selectedField = useSyncExternalStore(
      store.subscribe,
      () => store.getSnapshot().selectedField,
      () => INITIAL_SERVER_SNAPSHOT.selectedField,
    );
    ```

    > Note:
    >
    > `getSnapshot` must return a cached value. If getSnapshot is called multiple times in a row, it must return the same exact value unless there was a store update in between.
    >
    > A shim is provided for supporting multiple React versions published as `use-sync-external-store/shim`. This shim will prefer `useSyncExternalStore` when available, and fallback to a user-space implementation when it’s not.
    >
    > As a convenience, we also provide a version of the API with automatic support for memoizing the result of getSnapshot published as `use-sync-external-store/with-selector`.
- name: useTransition
  id: hooks-reference#usetransition
  summary: Returns a stateful value for the pending state of the transition, and a function to start it
  belongs_to: Hooks API Reference
  description: "### `useTransition`\n\n``` jsx\nconst [isPending, startTransition] = useTransition();\n```\n\nReturns a stateful value for the pending state of the transition, and a function to start it.\n\n`startTransition` lets you mark updates in the provided callback as transitions:\n\n``` jsx\nstartTransition(() => {\n  setCount(count + 1);\n})\n```\n\n`isPending` indicates when a transition is active to show a pending state:\n\n``` jsx\nfunction App() {\n  const [isPending, startTransition] = useTransition();\n  const [count, setCount] = useState(0);\n  \n  function handleClick() {\n    startTransition(() => {\n      setCount(c => c + 1);\n    })\n  }\n\n  return (\n    <div>\n      {isPending && <Spinner />}\n      <button onClick={handleClick}>{count}</button>\n    </div>\n  );\n}\n```\n\n> Note:\n>\n> Updates in a transition yield to more urgent updates such as clicks.\n>\n> Updates in a transition will not show a fallback for re-suspended content. This allows the user to continue interacting with the current content while rendering the update."
- name: Using the Effect Hook
  id: hooks-effect
  summary: Hooks are a new addition in React 16.8
  description: "# Using the Effect Hook\n\n*Hooks* are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\nThe *Effect Hook* lets you perform side effects in function components:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\nThis snippet is based on the [counter example from the previous page](hooks-state), but we added a new feature to it: we set the document title to a custom message including the number of clicks.\n\nData fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects. Whether or not you’re used to calling these operations “side effects” (or just “effects”), you’ve likely performed them in your components before.\n\n> Tip\n>\n> If you’re familiar with React class lifecycle methods, you can think of `useEffect` Hook as `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` combined.\n\nThere are two common kinds of side effects in React components: those that don’t require cleanup, and those that do. Let’s look at this distinction in more detail.\n\n## Effects Without Cleanup\n\nSometimes, we want to **run some additional code after React has updated the DOM.** Network requests, manual DOM mutations, and logging are common examples of effects that don’t require a cleanup. We say that because we can run them and immediately forget about them. Let’s compare how classes and Hooks let us express such side effects.\n\n### Example Using Classes\n\nIn React class components, the `render` method itself shouldn’t cause side effects. It would be too early — we typically want to perform our effects *after* React has updated the DOM.\n\nThis is why in React classes, we put side effects into `componentDidMount` and `componentDidUpdate`. Coming back to our example, here is a React counter class component that updates the document title right after React makes changes to the DOM:\n\n``` jsx\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}\n```\n\nNote how **we have to duplicate the code between these two lifecycle methods in class.**\n\nThis is because in many cases we want to perform the same side effect regardless of whether the component just mounted, or if it has been updated. Conceptually, we want it to happen after every render — but React class components don’t have a method like this. We could extract a separate method but we would still have to call it in two places.\n\nNow let’s see how we can do the same with the `useEffect` Hook.\n\n### Example Using Hooks\n\nWe’ve already seen this example at the top of this page, but let’s take a closer look at it:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n**What does `useEffect` do?** By using this Hook, you tell React that your component needs to do something after render. React will remember the function you passed (we’ll refer to it as our “effect”), and call it later after performing the DOM updates. In this effect, we set the document title, but we could also perform data fetching or call some other imperative API.\n\n**Why is `useEffect` called inside a component?** Placing `useEffect` inside the component lets us access the `count` state variable (or any props) right from the effect. We don’t need a special API to read it — it’s already in the function scope. Hooks embrace JavaScript closures and avoid introducing React-specific APIs where JavaScript already provides a solution.\n\n**Does `useEffect` run after every render?** Yes! By default, it runs both after the first render *and* after every update. (We will later talk about [how to customize this](#tip-optimizing-performance-by-skipping-effects).) Instead of thinking in terms of “mounting” and “updating”, you might find it easier to think that effects happen “after render”. React guarantees the DOM has been updated by the time it runs the effects.\n\n### Detailed Explanation\n\nNow that we know more about effects, these lines should make sense:\n\n``` jsx\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n}\n```\n\nWe declare the `count` state variable, and then we tell React we need to use an effect. We pass a function to the `useEffect` Hook. This function we pass *is* our effect. Inside our effect, we set the document title using the `document.title` browser API. We can read the latest `count` inside the effect because it’s in the scope of our function. When React renders our component, it will remember the effect we used, and then run our effect after updating the DOM. This happens for every render, including the first one.\n\nExperienced JavaScript developers might notice that the function passed to `useEffect` is going to be different on every render. This is intentional. In fact, this is what lets us read the `count` value from inside the effect without worrying about it getting stale. Every time we re-render, we schedule a *different* effect, replacing the previous one. In a way, this makes the effects behave more like a part of the render result — each effect “belongs” to a particular render. We will see more clearly why this is useful [later on this page](#explanation-why-effects-run-on-each-update).\n\n> Tip\n>\n> Unlike `componentDidMount` or `componentDidUpdate`, effects scheduled with `useEffect` don’t block the browser from updating the screen. This makes your app feel more responsive. The majority of effects don’t need to happen synchronously. In the uncommon cases where they do (such as measuring the layout), there is a separate [`useLayoutEffect`](hooks-reference#uselayouteffect) Hook with an API identical to `useEffect`.\n\n## Effects with Cleanup\n\nEarlier, we looked at how to express side effects that don’t require any cleanup. However, some effects do. For example, **we might want to set up a subscription** to some external data source. In that case, it is important to clean up so that we don’t introduce a memory leak! Let’s compare how we can do it with classes and with Hooks.\n\n### Example Using Classes\n\nIn a React class, you would typically set up a subscription in `componentDidMount`, and clean it up in `componentWillUnmount`. For example, let’s say we have a `ChatAPI` module that lets us subscribe to a friend’s online status. Here’s how we might subscribe and display that status using a class:\n\n``` jsx\nclass FriendStatus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOnline: null };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n\n  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n\n  render() {\n    if (this.state.isOnline === null) {\n      return 'Loading...';\n    }\n    return this.state.isOnline ? 'Online' : 'Offline';\n  }\n}\n```\n\nNotice how `componentDidMount` and `componentWillUnmount` need to mirror each other. Lifecycle methods force us to split this logic even though conceptually code in both of them is related to the same effect.\n\n> Note\n>\n> Eagle-eyed readers may notice that this example also needs a `componentDidUpdate` method to be fully correct. We’ll ignore this for now but will come back to it in a [later section](#explanation-why-effects-run-on-each-update) of this page.\n\n### Example Using Hooks\n\nLet’s see how we could write this component with Hooks.\n\nYou might be thinking that we’d need a separate effect to perform the cleanup. But code for adding and removing a subscription is so tightly related that `useEffect` is designed to keep it together. If your effect returns a function, React will run it when it is time to clean up:\n\n``` jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n\n**Why did we return a function from our effect?** This is the optional cleanup mechanism for effects. Every effect may return a function that cleans up after it. This lets us keep the logic for adding and removing subscriptions close to each other. They’re part of the same effect!\n\n**When exactly does React clean up an effect?** React performs the cleanup when the component unmounts. However, as we learned earlier, effects run for every render and not just once. This is why React *also* cleans up effects from the previous render before running the effects next time. We’ll discuss [why this helps avoid bugs](#explanation-why-effects-run-on-each-update) and [how to opt out of this behavior in case it creates performance issues](#tip-optimizing-performance-by-skipping-effects) later below.\n\n> Note\n>\n> We don’t have to return a named function from the effect. We called it `cleanup` here to clarify its purpose, but you could return an arrow function or call it something different.\n\n## Recap\n\nWe’ve learned that `useEffect` lets us express different kinds of side effects after a component renders. Some effects might require cleanup so they return a function:\n\n``` jsx\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n```\n\nOther effects might not have a cleanup phase, and don’t return anything.\n\n``` jsx\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n```\n\nThe Effect Hook unifies both use cases with a single API.\n\n**If you feel like you have a decent grasp on how the Effect Hook works, or if you feel overwhelmed, you can jump to the [next page about Rules of Hooks](hooks-rules) now.**\n\n## Tips for Using Effects\n\nWe’ll continue this page with an in-depth look at some aspects of `useEffect` that experienced React users will likely be curious about. Don’t feel obligated to dig into them now. You can always come back to this page to learn more details about the Effect Hook.\n\n### Tip: Use Multiple Effects to Separate Concerns\n\nOne of the problems we outlined in the [Motivation](hooks-intro#complex-components-become-hard-to-understand) for Hooks is that class lifecycle methods often contain unrelated logic, but related logic gets broken up into several methods. Here is a component that combines the counter and the friend status indicator logic from the previous examples:\n\n``` jsx\nclass FriendStatusWithCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0, isOnline: null };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n  // ...\n```\n\nNote how the logic that sets `document.title` is split between `componentDidMount` and `componentDidUpdate`. The subscription logic is also spread between `componentDidMount` and `componentWillUnmount`. And `componentDidMount` contains code for both tasks.\n\nSo, how can Hooks solve this problem? Just like [you can use the *State* Hook more than once](hooks-state#tip-using-multiple-state-variables), you can also use several effects. This lets us separate unrelated logic into different effects:\n\n``` jsx\nfunction FriendStatusWithCounter(props) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n  // ...\n}\n```\n\n**Hooks let us split the code based on what it is doing** rather than a lifecycle method name. React will apply *every* effect used by the component, in the order they were specified.\n\n### Explanation: Why Effects Run on Each Update\n\nIf you’re used to classes, you might be wondering why the effect cleanup phase happens after every re-render, and not just once during unmounting. Let’s look at a practical example to see why this design helps us create components with fewer bugs.\n\n[Earlier on this page](#example-using-classes-1), we introduced an example `FriendStatus` component that displays whether a friend is online or not. Our class reads `friend.id` from `this.props`, subscribes to the friend status after the component mounts, and unsubscribes during unmounting:\n\n``` jsx\n  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n```\n\n**But what happens if the `friend` prop changes** while the component is on the screen? Our component would continue displaying the online status of a different friend. This is a bug. We would also cause a memory leak or crash when unmounting since the unsubscribe call would use the wrong friend ID.\n\nIn a class component, we would need to add `componentDidUpdate` to handle this case:\n\n``` jsx\n  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    // Unsubscribe from the previous friend.id\n    ChatAPI.unsubscribeFromFriendStatus(\n      prevProps.friend.id,\n      this.handleStatusChange\n    );\n    // Subscribe to the next friend.id\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n```\n\nForgetting to handle `componentDidUpdate` properly is a common source of bugs in React applications.\n\nNow consider the version of this component that uses Hooks:\n\n``` jsx\nfunction FriendStatus(props) {\n  // ...\n  useEffect(() => {\n    // ...\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n```\n\nIt doesn’t suffer from this bug. (But we also didn’t make any changes to it.)\n\nThere is no special code for handling updates because `useEffect` handles them *by default*. It cleans up the previous effects before applying the next effects. To illustrate this, here is a sequence of subscribe and unsubscribe calls that this component could produce over time:\n\n``` jsx\n// Mount with { friend: { id: 100 } } props\nChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // Run first effect\n\n// Update with { friend: { id: 200 } } props\nChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // Clean up previous effect\nChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // Run next effect\n\n// Update with { friend: { id: 300 } } props\nChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // Clean up previous effect\nChatAPI.subscribeToFriendStatus(300, handleStatusChange);     // Run next effect\n\n// Unmount\nChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // Clean up last effect\n```\n\nThis behavior ensures consistency by default and prevents bugs that are common in class components due to missing update logic.\n\n### Tip: Optimizing Performance by Skipping Effects\n\nIn some cases, cleaning up or applying the effect after every render might create a performance problem. In class components, we can solve this by writing an extra comparison with `prevProps` or `prevState` inside `componentDidUpdate`:\n\n``` jsx\ncomponentDidUpdate(prevProps, prevState) {\n  if (prevState.count !== this.state.count) {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n}\n```\n\nThis requirement is common enough that it is built into the `useEffect` Hook API. You can tell React to *skip* applying an effect if certain values haven’t changed between re-renders. To do so, pass an array as an optional second argument to `useEffect`:\n\n``` jsx\nuseEffect(() => {\n  document.title = `You clicked ${count} times`;\n}, [count]); // Only re-run the effect if count changes\n```\n\nIn the example above, we pass `[count]` as the second argument. What does this mean? If the `count` is `5`, and then our component re-renders with `count` still equal to `5`, React will compare `[5]` from the previous render and `[5]` from the next render. Because all items in the array are the same (`5 === 5`), React would skip the effect. That’s our optimization.\n\nWhen we render with `count` updated to `6`, React will compare the items in the `[5]` array from the previous render to items in the `[6]` array from the next render. This time, React will re-apply the effect because `5 !== 6`. If there are multiple items in the array, React will re-run the effect even if just one of them is different.\n\nThis also works for effects that have a cleanup phase:\n\n``` jsx\nuseEffect(() => {\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n\n  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n  return () => {\n    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n  };\n}, [props.friend.id]); // Only re-subscribe if props.friend.id changes\n```\n\nIn the future, the second argument might get added automatically by a build-time transformation.\n\n> Note\n>\n> If you use this optimization, make sure the array includes **all values from the component scope (such as props and state) that change over time and that are used by the effect**. Otherwise, your code will reference stale values from previous renders. Learn more about [how to deal with functions](hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies) and [what to do when the array changes too often](hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often).\n>\n> If you want to run an effect and clean it up only once (on mount and unmount), you can pass an empty array (`[]`) as a second argument. This tells React that your effect doesn’t depend on *any* values from props or state, so it never needs to re-run. This isn’t handled as a special case — it follows directly from how the dependencies array always works.\n>\n> If you pass an empty array (`[]`), the props and state inside the effect will always have their initial values. While passing `[]` as the second argument is closer to the familiar `componentDidMount` and `componentWillUnmount` mental model, there are usually [better](hooks-faq#is-it-safe-to-omit-functions-from-the-list-of-dependencies) [solutions](hooks-faq#what-can-i-do-if-my-effect-dependencies-change-too-often) to avoid re-running effects too often. Also, don’t forget that React defers running `useEffect` until after the browser has painted, so doing extra work is less of a problem.\n>\n> We recommend using the [`exhaustive-deps`](https://github.com/facebook/react/issues/14920) rule as part of our [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks#installation) package. It warns when dependencies are specified incorrectly and suggests a fix.\n\n## Next Steps\n\nCongratulations! This was a long page, but hopefully by the end most of your questions about effects were answered. You’ve learned both the State Hook and the Effect Hook, and there is a *lot* you can do with both of them combined. They cover most of the use cases for classes — and where they don’t, you might find the [additional Hooks](hooks-reference) helpful.\n\nWe’re also starting to see how Hooks solve problems outlined in [Motivation](hooks-intro#motivation). We’ve seen how effect cleanup avoids duplication in `componentDidUpdate` and `componentWillUnmount`, brings related code closer together, and helps us avoid bugs. We’ve also seen how we can separate effects by their purpose, which is something we couldn’t do in classes at all.\n\nAt this point you might be questioning how Hooks work. How can React know which `useState` call corresponds to which state variable between re-renders? How does React “match up” previous and next effects on every update? **On the next page we will learn about the [Rules of Hooks](hooks-rules) — they’re essential to making Hooks work.**\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/hooks-effect.html](https://reactjs.org/docs/hooks-effect.html)"
- name: Using the State Hook
  id: hooks-state
  summary: Hooks are a new addition in React 16.8
  description: "# Using the State Hook\n\n*Hooks* are a new addition in React 16.8. They let you use state and other React features without writing a class.\n\nThe [introduction page](hooks-intro) used this example to get familiar with Hooks:\n\n``` jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\nWe’ll start learning about Hooks by comparing this code to an equivalent class example.\n\n## Equivalent Class Example\n\nIf you used classes in React before, this code should look familiar:\n\n``` jsx\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}\n```\n\nThe state starts as `{ count: 0 }`, and we increment `state.count` when the user clicks a button by calling `this.setState()`. We’ll use snippets from this class throughout the page.\n\n> Note\n>\n> You might be wondering why we’re using a counter here instead of a more realistic example. This is to help us focus on the API while we’re still making our first steps with Hooks.\n\n## Hooks and Function Components\n\nAs a reminder, function components in React look like this:\n\n``` jsx\nconst Example = (props) => {\n  // You can use Hooks here!\n  return <div />;\n}\n```\n\nor this:\n\n``` jsx\nfunction Example(props) {\n  // You can use Hooks here!\n  return <div />;\n}\n```\n\nYou might have previously known these as “stateless components”. We’re now introducing the ability to use React state from these, so we prefer the name “function components”.\n\nHooks **don’t** work inside classes. But you can use them instead of writing classes.\n\n## What’s a Hook?\n\nOur new example starts by importing the `useState` Hook from React:\n\n``` jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // ...\n}\n```\n\n**What is a Hook?** A Hook is a special function that lets you “hook into” React features. For example, `useState` is a Hook that lets you add React state to function components. We’ll learn other Hooks later.\n\n**When would I use a Hook?** If you write a function component and realize you need to add some state to it, previously you had to convert it to a class. Now you can use a Hook inside the existing function component. We’re going to do that right now!\n\n> Note:\n>\n> There are some special rules about where you can and can’t use Hooks within a component. We’ll learn them in [Rules of Hooks](hooks-rules).\n\n## Declaring a State Variable\n\nIn a class, we initialize the `count` state to `0` by setting `this.state` to `{ count: 0 }` in the constructor:\n\n``` jsx\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n```\n\nIn a function component, we have no `this`, so we can’t assign or read `this.state`. Instead, we call the `useState` Hook directly inside our component:\n\n``` jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n```\n\n**What does calling `useState` do?** It declares a “state variable”. Our variable is called `count` but we could call it anything else, like `banana`. This is a way to “preserve” some values between the function calls — `useState` is a new way to use the exact same capabilities that `this.state` provides in a class. Normally, variables “disappear” when the function exits but state variables are preserved by React.\n\n**What do we pass to `useState` as an argument?** The only argument to the `useState()` Hook is the initial state. Unlike with classes, the state doesn’t have to be an object. We can keep a number or a string if that’s all we need. In our example, we just want a number for how many times the user clicked, so pass `0` as initial state for our variable. (If we wanted to store two different values in state, we would call `useState()` twice.)\n\n**What does `useState` return?** It returns a pair of values: the current state and a function that updates it. This is why we write `const [count, setCount] = useState()`. This is similar to `this.state.count` and `this.setState` in a class, except you get them in a pair. If you’re not familiar with the syntax we used, we’ll come back to it [at the bottom of this page](hooks-state#tip-what-do-square-brackets-mean).\n\nNow that we know what the `useState` Hook does, our example should make more sense:\n\n``` jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(0);\n```\n\nWe declare a state variable called `count`, and set it to `0`. React will remember its current value between re-renders, and provide the most recent one to our function. If we want to update the current `count`, we can call `setCount`.\n\n> Note\n>\n> You might be wondering: why is `useState` not named `createState` instead?\n>\n> “Create” wouldn’t be quite accurate because the state is only created the first time our component renders. During the next renders, `useState` gives us the current state. Otherwise it wouldn’t be “state” at all! There’s also a reason why Hook names *always* start with `use`. We’ll learn why later in the [Rules of Hooks](hooks-rules).\n\n## Reading State\n\nWhen we want to display the current count in a class, we read `this.state.count`:\n\n``` jsx\n  <p>You clicked {this.state.count} times</p>\n```\n\nIn a function, we can use `count` directly:\n\n``` jsx\n  <p>You clicked {count} times</p>\n```\n\n## Updating State\n\nIn a class, we need to call `this.setState()` to update the `count` state:\n\n``` jsx\n  <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n    Click me\n  </button>\n```\n\nIn a function, we already have `setCount` and `count` as variables so we don’t need `this`:\n\n``` jsx\n  <button onClick={() => setCount(count + 1)}>\n    Click me\n  </button>\n```\n\n## Recap\n\nLet’s now **recap what we learned line by line** and check our understanding.\n\n``` jsx\n 1:  import React, { useState } from 'react';\n 2:\n 3:  function Example() {\n 4:    const [count, setCount] = useState(0);\n 5:\n 6:    return (\n 7:      <div>\n 8:        <p>You clicked {count} times</p>\n 9:        <button onClick={() => setCount(count + 1)}>\n10:         Click me\n11:        </button>\n12:      </div>\n13:    );\n14:  }\n```\n\n- **Line 1:** We import the `useState` Hook from React. It lets us keep local state in a function component.\n- **Line 4:** Inside the `Example` component, we declare a new state variable by calling the `useState` Hook. It returns a pair of values, to which we give names. We’re calling our variable `count` because it holds the number of button clicks. We initialize it to zero by passing `0` as the only `useState` argument. The second returned item is itself a function. It lets us update the `count` so we’ll name it `setCount`.\n- **Line 9:** When the user clicks, we call `setCount` with a new value. React will then re-render the `Example` component, passing the new `count` value to it.\n\nThis might seem like a lot to take in at first. Don’t rush it! If you’re lost in the explanation, look at the code above again and try to read it from top to bottom. We promise that once you try to “forget” how state works in classes, and look at this code with fresh eyes, it will make sense.\n\n### Tip: What Do Square Brackets Mean?\n\nYou might have noticed the square brackets when we declare a state variable:\n\n``` jsx\n  const [count, setCount] = useState(0);\n```\n\nThe names on the left aren’t a part of the React API. You can name your own state variables:\n\n``` jsx\n  const [fruit, setFruit] = useState('banana');\n```\n\nThis JavaScript syntax is called [“array destructuring”](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring). It means that we’re making two new variables `fruit` and `setFruit`, where `fruit` is set to the first value returned by `useState`, and `setFruit` is the second. It is equivalent to this code:\n\n``` jsx\n  var fruitStateVariable = useState('banana'); // Returns a pair\n  var fruit = fruitStateVariable[0]; // First item in a pair\n  var setFruit = fruitStateVariable[1]; // Second item in a pair\n```\n\nWhen we declare a state variable with `useState`, it returns a pair — an array with two items. The first item is the current value, and the second is a function that lets us update it. Using `[0]` and `[1]` to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.\n\n> Note\n>\n> You might be curious how React knows which component `useState` corresponds to since we’re not passing anything like `this` back to React. We’ll answer [this question](hooks-faq#how-does-react-associate-hook-calls-with-components) and many others in the FAQ section.\n\n### Tip: Using Multiple State Variables\n\nDeclaring state variables as a pair of `[something, setSomething]` is also handy because it lets us give *different* names to different state variables if we want to use more than one:\n\n``` jsx\nfunction ExampleWithManyStates() {\n  // Declare multiple state variables!\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n```\n\nIn the above component, we have `age`, `fruit`, and `todos` as local variables, and we can update them individually:\n\n``` jsx\n  function handleOrangeClick() {\n    // Similar to this.setState({ fruit: 'orange' })\n    setFruit('orange');\n  }\n```\n\nYou **don’t have to** use many state variables. State variables can hold objects and arrays just fine, so you can still group related data together. However, unlike `this.setState` in a class, updating a state variable always *replaces* it instead of merging it.\n\nWe provide more recommendations on splitting independent state variables [in the FAQ](hooks-faq#should-i-use-one-or-many-state-variables).\n\n## Next Steps\n\nOn this page we’ve learned about one of the Hooks provided by React, called `useState`. We’re also sometimes going to refer to it as the “State Hook”. It lets us add local state to React function components — which we did for the first time ever!\n\nWe also learned a little bit more about what Hooks are. Hooks are functions that let you “hook into” React features from function components. Their names always start with `use`, and there are more Hooks we haven’t seen yet.\n\n**Now let’s continue by [learning the next Hook: `useEffect`.](hooks-effect)** It lets you perform side effects in components, and is similar to lifecycle methods in classes.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/hooks-state.html](https://reactjs.org/docs/hooks-state.html)"
- name: Versioning Policy
  id: faq-versioning
  summary: React follows semantic versioning (semver) principles
  description: "# Versioning Policy\n\nReact follows [semantic versioning (semver)](https://semver.org/) principles.\n\nThat means that with a version number **x.y.z**:\n\n- When releasing **critical bug fixes**, we make a **patch release** by changing the **z** number (ex: 15.6.2 to 15.6.3).\n- When releasing **new features** or **non-critical fixes**, we make a **minor release** by changing the **y** number (ex: 15.6.2 to 15.7.0).\n- When releasing **breaking changes**, we make a **major release** by changing the **x** number (ex: 15.6.2 to 16.0.0).\n\nMajor releases can also contain new features, and any release can include bug fixes.\n\nMinor releases are the most common type of release.\n\n> This versioning policy does not apply to prerelease builds in the Next or Experimental channels. [Learn more about prereleases.](release-channels)\n\n### Breaking Changes\n\nBreaking changes are inconvenient for everyone, so we try to minimize the number of major releases – for example, React 15 was released in April 2016 and React 16 was released in September 2017, and React 17 was released in October 2020.\n\nInstead, we release new features in minor versions. That means that minor releases are often more interesting and compelling than majors, despite their unassuming name.\n\n### Commitment to Stability\n\nAs we change React over time, we try to minimize the effort required to take advantage of new features. When possible, we’ll keep an older API working, even if that means putting it in a separate package. For example, [mixins have been discouraged for years](https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html) but they’re supported to this day [via create-react-class](react-without-es6#mixins) and many codebases continue to use them in stable, legacy code.\n\nOver a million developers use React, collectively maintaining millions of components. The Facebook codebase alone has over 50,000 React components. That means we need to make it as easy as possible to upgrade to new versions of React; if we make large changes without a migration path, people will be stuck on old versions. We test these upgrade paths on Facebook itself – if our team of less than 10 people can update 50,000+ components alone, we hope the upgrade will be manageable for anyone using React. In many cases, we write [automated scripts](https://github.com/reactjs/react-codemod) to upgrade component syntax, which we then include in the open-source release for everyone to use.\n\n### Gradual Upgrades via Warnings\n\nDevelopment builds of React include many helpful warnings. Whenever possible, we add warnings in preparation for future breaking changes. That way, if your app has no warnings on the latest release, it will be compatible with the next major release. This allows you to upgrade your apps one component at a time.\n\nDevelopment warnings won’t affect the runtime behavior of your app. That way, you can feel confident that your app will behave the same way between the development and production builds — the only differences are that the production build won’t log the warnings and that it is more efficient. (If you ever notice otherwise, please file an issue.)\n\n### What Counts as a Breaking Change?\n\nIn general, we *don’t* bump the major version number for changes to:\n\n- **Development warnings.** Since these don’t affect production behavior, we may add new warnings or modify existing warnings in between major versions. In fact, this is what allows us to reliably warn about upcoming breaking changes.\n- **APIs starting with `unstable_`.** These are provided as experimental features whose APIs we are not yet confident in. By releasing these with an `unstable_` prefix, we can iterate faster and get to a stable API sooner.\n- **Alpha and canary versions of React.** We provide alpha versions of React as a way to test new features early, but we need the flexibility to make changes based on what we learn in the alpha period. If you use these versions, note that APIs may change before the stable release.\n- **Undocumented APIs and internal data structures.** If you access internal property names like `__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED` or `__reactInternalInstance$uk43rzhitjg`, there is no warranty. You are on your own.\n\nThis policy is designed to be pragmatic: certainly, we don’t want to cause headaches for you. If we bumped the major version for all of these changes, we would end up releasing more major versions and ultimately causing more versioning pain for the community. It would also mean that we can’t make progress in improving React as fast as we’d like.\n\nThat said, if we expect that a change on this list will cause broad problems in the community, we will still do our best to provide a gradual migration path.\n\n### If a Minor Release Includes No New Features, Why Isn’t It a Patch?\n\nIt’s possible that a minor release will not include new features. [This is allowed by semver](https://semver.org/#spec-item-7), which states **”\\[a minor version\\] MAY be incremented if substantial new functionality or improvements are introduced within the private code. It MAY include patch level changes.”**\n\nHowever, it does raise the question of why these releases aren’t versioned as patches instead.\n\nThe answer is that any change to React (or other software) carries some risk of breaking in unexpected ways. Imagine a scenario where a patch release that fixes one bug accidentally introduces a different bug. This would not only be disruptive to developers, but also harm their confidence in future patch releases. It’s especially regrettable if the original fix is for a bug that is rarely encountered in practice.\n\nWe have a pretty good track record for keeping React releases free of bugs, but patch releases have an even higher bar for reliability because most developers assume they can be adopted without adverse consequences.\n\nFor these reasons, we reserve patch releases only for the most critical bugs and security vulnerabilities.\n\nIf a release includes non-essential changes — such as internal refactors, changes to implementation details, performance improvements, or minor bugfixes — we will bump the minor version even when there are no new features.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/faq-versioning.html](https://reactjs.org/docs/faq-versioning.html)"
- name: Virtual DOM and Internals
  id: faq-internals
  summary: The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM
  description: "# Virtual DOM and Internals\n\n### What is the Virtual DOM?\n\nThe virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called [reconciliation](reconciliation).\n\nThis approach enables the declarative API of React: You tell React what state you want the UI to be in, and it makes sure the DOM matches that state. This abstracts out the attribute manipulation, event handling, and manual DOM updating that you would otherwise have to use to build your app.\n\nSince “virtual DOM” is more of a pattern than a specific technology, people sometimes say it to mean different things. In React world, the term “virtual DOM” is usually associated with [React elements](rendering-elements) since they are the objects representing the user interface. React, however, also uses internal objects called “fibers” to hold additional information about the component tree. They may also be considered a part of “virtual DOM” implementation in React.\n\n### Is the Shadow DOM the same as the Virtual DOM?\n\nNo, they are different. The Shadow DOM is a browser technology designed primarily for scoping variables and CSS in web components. The virtual DOM is a concept implemented by libraries in JavaScript on top of browser APIs.\n\n### What is “React Fiber”?\n\nFiber is the new reconciliation engine in React 16. Its main goal is to enable incremental rendering of the virtual DOM. [Read more](https://github.com/acdlite/react-fiber-architecture).\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/faq-internals.html](https://reactjs.org/docs/faq-internals.html)"
- name: Web Components
  id: web-components
  summary: React and Web Components are built to solve different problems
  description: "# Web Components\n\nReact and [Web Components](https://developer.mozilla.org/en-US/docs/Web/Web_Components) are built to solve different problems. Web Components provide strong encapsulation for reusable components, while React provides a declarative library that keeps the DOM in sync with your data. The two goals are complementary. As a developer, you are free to use React in your Web Components, or to use Web Components in React, or both.\n\nMost people who use React don’t use Web Components, but you may want to, especially if you are using third-party UI components that are written using Web Components.\n\n## Using Web Components in React\n\n``` jsx\nclass HelloMessage extends React.Component {\n  render() {\n    return <div>Hello <x-search>{this.props.name}</x-search>!</div>;\n  }\n}\n```\n\n> Note:\n>\n> Web Components often expose an imperative API. For instance, a `video` Web Component might expose `play()` and `pause()` functions. To access the imperative APIs of a Web Component, you will need to use a ref to interact with the DOM node directly. If you are using third-party Web Components, the best solution is to write a React component that behaves as a wrapper for your Web Component.\n>\n> Events emitted by a Web Component may not properly propagate through a React render tree. You will need to manually attach event handlers to handle these events within your React components.\n\nOne common confusion is that Web Components use “class” instead of “className”.\n\n``` jsx\nfunction BrickFlipbox() {\n  return (\n    <brick-flipbox class=\"demo\">\n      <div>front</div>\n      <div>back</div>\n    </brick-flipbox>\n  );\n}\n```\n\n## Using React in your Web Components\n\n``` jsx\nclass XSearch extends HTMLElement {\n  connectedCallback() {\n    const mountPoint = document.createElement('span');\n    this.attachShadow({ mode: 'open' }).appendChild(mountPoint);\n\n    const name = this.getAttribute('name');\n    const url = 'https://www.google.com/search?q=' + encodeURIComponent(name);\n    const root = ReactDOM.createRoot(mountPoint);\n    root.render(<a href={url}>{name}</a>);\n  }\n}\ncustomElements.define('x-search', XSearch);\n```\n\n> Note:\n>\n> This code **will not** work if you transform classes with Babel. See [this issue](https://github.com/w3c/webcomponents/issues/587) for the discussion. Include the [custom-elements-es5-adapter](https://github.com/webcomponents/polyfills/tree/master/packages/webcomponentsjs#custom-elements-es5-adapterjs) before you load your web components to fix this issue.\n\nIs this page useful?\n\n© 2013–present Facebook Inc.  \nLicensed under the Creative Commons Attribution 4.0 International Public License.  \n[https://reactjs.org/docs/web-components.html](https://reactjs.org/docs/web-components.html)"
