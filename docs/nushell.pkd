---
name: nushell
text_format: markdown
generator: src:devdocs
version: ''
copyright: |-
  Copyright © 2019–2023 The Nushell Project DevelopersLicensed under the
  MIT License.
  https://www.nushell.sh/commands/
homepage: https://www.nushell.sh/

---
- name: alias
  summary: '> alias {flags} (name) (initial_value)'
  description: "# `alias` for core\n\nAlias a command (with optional flags) to a new name.\n\n## Signature\n\n`> alias {flags} (name) (initial_value)`\n\n## Parameters\n\n- `name`: name of the alias\n- `initial_value`: equals sign followed by value\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nAlias ll to ls -l\n\n``` shiki\n>aliasll=ls-l\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/alias.html](https://www.nushell.sh/commands/docs/alias.html)"
- name: all
  summary: '> all {flags} (predicate)'
  description: "# `all` for filters\n\nTest if every element of the input fulfills a predicate expression.\n\n## Signature\n\n`> all {flags} (predicate)`\n\n## Parameters\n\n- `predicate`: a closure that must evaluate to a boolean\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | bool   |\n| table       | bool   |\n\n## Examples\n\nCheck if each row's status is the string 'UP'\n\n``` shiki\n> [[status]; [UP] [UP]] |all {|el| $el.status==UP }\ntrue\n```\n\nCheck that each item is a string\n\n``` shiki\n> [foobar2baz] |all {|| ($in|describe) =='string' }\nfalse\n```\n\nCheck that all values are equal to twice their index\n\n``` shiki\n> [0246] |enumerate|all {|i| $i.item==$i.index*2 }\ntrue\n```\n\nCheck that all of the values are even, using a stored closure\n\n``` shiki\n>letcond= {|el| ($elmod2) ==0 }; [2468] |all$cond\ntrue\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/all.html](https://www.nushell.sh/commands/docs/all.html)"
- name: ansi
  summary: '> ansi {flags} (code)'
  description: "# `ansi` for platform\n\nOutput ANSI codes to change color and style of text.\n\n## Signature\n\n`> ansi {flags} (code)`\n\n## Flags\n\n- `--escape, -e`: escape sequence without the escape character(s) ('\\x1b\\[' is not required)\n- `--osc, -o`: operating system command (osc) escape sequence without the escape character(s) ('\\x1b\\]' is not required)\n- `--list, -l`: list available ansi code names\n\n## Parameters\n\n- `code`: the name of the code to use like 'green' or 'reset' to reset the color\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nChange color to green (see how the next example text will be green!)\n\n``` shiki\n>ansi green\n```\n\nReset the color\n\n``` shiki\n>ansi reset\n```\n\nUse different colors and styles in the same text\n\n``` shiki\n>$'(ansi red_bold)Hello(ansi reset) (ansi green_dimmed)Nu(ansi reset) (ansi purple_italic)World(ansi reset)'\nHelloNuWorld\n```\n\nThe same example as above with short names\n\n``` shiki\n>$'(ansi rb)Hello(ansi reset) (ansi gd)Nu(ansi reset) (ansi pi)World(ansi reset)'\nHelloNuWorld\n```\n\nUse escape codes, without the '\\x1b\\['\n\n``` shiki\n>$\"(ansi -e '3;93;41m')Hello(ansi reset)\"# italic bright yellow on red background\nHello\n```\n\nUse structured escape codes\n\n``` shiki\n>letbold_blue_on_red= {  # `fg`, `bg`, `attr` are the acceptable keys, all other keys are considered invalid and will throw errors.\nfg:'#0000ff'\nbg:'#ff0000'\nattr:b\n    }\n$\"(ansi -e $bold_blue_on_red)Hello Nu World(ansi reset)\"\nHelloNuWorld\n```\n\n## Notes\n\n``` shiki\nAn introduction to what ANSI escape sequences are can be found in the\n]8;;https://en.wikipedia.org/wiki/ANSI_escape_code\\ANSI escape code]8;;\\ Wikipedia page.\n\nEscape sequences usual values:\n╭────┬────────────┬────────┬────────┬─────────╮\n│  # │    type    │ normal │ bright │  name   │\n├────┼────────────┼────────┼────────┼─────────┤\n│  0 │ foreground │     30 │     90 │ black   │\n│  1 │ foreground │     31 │     91 │ red     │\n│  2 │ foreground │     32 │     92 │ green   │\n│  3 │ foreground │     33 │     93 │ yellow  │\n│  4 │ foreground │     34 │     94 │ blue    │\n│  5 │ foreground │     35 │     95 │ magenta │\n│  6 │ foreground │     36 │     96 │ cyan    │\n│  7 │ foreground │     37 │     97 │ white   │\n│  8 │ foreground │     39 │        │ default │\n│  9 │ background │     40 │    100 │ black   │\n│ 10 │ background │     41 │    101 │ red     │\n│ 11 │ background │     42 │    102 │ green   │\n│ 12 │ background │     43 │    103 │ yellow  │\n│ 13 │ background │     44 │    104 │ blue    │\n│ 14 │ background │     45 │    105 │ magenta │\n│ 15 │ background │     46 │    106 │ cyan    │\n│ 16 │ background │     47 │    107 │ white   │\n│ 17 │ background │     49 │        │ default │\n╰────┴────────────┴────────┴────────┴─────────╯\n\nEscape sequences attributes:\n╭───┬────┬──────────────┬──────────────────────────────╮\n│ # │ id │ abbreviation │         description          │\n├───┼────┼──────────────┼──────────────────────────────┤\n│ 0 │  0 │              │ reset / normal display       │\n│ 1 │  1 │ b            │ bold or increased intensity  │\n│ 2 │  2 │ d            │ faint or decreased intensity │\n│ 3 │  3 │ i            │ italic on (non-mono font)    │\n│ 4 │  4 │ u            │ underline on                 │\n│ 5 │  5 │ l            │ slow blink on                │\n│ 6 │  6 │              │ fast blink on                │\n│ 7 │  7 │ r            │ reverse video on             │\n│ 8 │  8 │ h            │ nondisplayed (invisible) on  │\n│ 9 │  9 │ s            │ strike-through on            │\n╰───┴────┴──────────────┴──────────────────────────────╯\n\nOperating system commands:\n╭───┬─────┬───────────────────────────────────────╮\n│ # │ id  │              description              │\n├───┼─────┼───────────────────────────────────────┤\n│ 0 │   0 │ Set window title and icon name        │\n│ 1 │   1 │ Set icon name                         │\n│ 2 │   2 │ Set window title                      │\n│ 3 │   4 │ Set/read color palette                │\n│ 4 │   9 │ iTerm2 Grown notifications            │\n│ 5 │  10 │ Set foreground color (x11 color spec) │\n│ 6 │  11 │ Set background color (x11 color spec) │\n│ 7 │ ... │ others                                │\n╰───┴─────┴───────────────────────────────────────╯\n```\n\n## Subcommands:\n\n| name                               | type    | usage                                                              |\n|------------------------------------|---------|--------------------------------------------------------------------|\n| [`ansi gradient`](ansi_gradient#_) | Builtin | Add a color gradient (using ANSI color codes) to the given string. |\n| [`ansi link`](ansi_link#_)         | Builtin | Add a link (using OSC 8 escape sequence) to the given string.      |\n| [`ansi strip`](ansi_strip#_)       | Builtin | Strip ANSI escape sequences from a string.                         |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/ansi.html](https://www.nushell.sh/commands/docs/ansi.html)"
- name: ansi gradient
  summary: '> ansi gradient {flags} ...rest'
  description: "# `ansi gradient` for platform\n\nAdd a color gradient (using ANSI color codes) to the given string.\n\n## Signature\n\n`> ansi gradient {flags} ...rest`\n\n## Flags\n\n- `--fgstart, -a {string}`: foreground gradient start color in hex (0x123456)\n- `--fgend, -b {string}`: foreground gradient end color in hex\n- `--bgstart, -c {string}`: background gradient start color in hex\n- `--bgend, -d {string}`: background gradient end color in hex\n\n## Parameters\n\n- `...rest`: for a data structure input, add a gradient to strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\ndraw text in a gradient with foreground start and end colors\n\n``` shiki\n>'Hello, Nushell! This is a gradient.'|ansi gradient--fgstart'0x40c9ff'--fgend'0xe81cff'\n```\n\ndraw text in a gradient with foreground start and end colors and background start and end colors\n\n``` shiki\n>'Hello, Nushell! This is a gradient.'|ansi gradient--fgstart'0x40c9ff'--fgend'0xe81cff'--bgstart'0xe81cff'--bgend'0x40c9ff'\n```\n\ndraw text in a gradient by specifying foreground start color - end color is assumed to be black\n\n``` shiki\n>'Hello, Nushell! This is a gradient.'|ansi gradient--fgstart'0x40c9ff'\n```\n\ndraw text in a gradient by specifying foreground end color - start color is assumed to be black\n\n``` shiki\n>'Hello, Nushell! This is a gradient.'|ansi gradient--fgend'0xe81cff'\n```\n\n**Tips:** Command `ansi gradient` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/ansi_gradient.html](https://www.nushell.sh/commands/docs/ansi_gradient.html)"
- name: ansi link
  summary: '> ansi link {flags} ...rest'
  description: "# `ansi link` for platform\n\nAdd a link (using OSC 8 escape sequence) to the given string.\n\n## Signature\n\n`> ansi link {flags} ...rest`\n\n## Flags\n\n- `--text, -t {string}`: Link text. Uses uri as text if absent. In case of tables, records and lists applies this text to all elements\n\n## Parameters\n\n- `...rest`: for a data structure input, add links to all strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nCreate a link to open some file\n\n``` shiki\n>'file:///file.txt'|ansi link--text'Open Me!'\nOpenMe!\n```\n\nCreate a link without text\n\n``` shiki\n>'https://www.nushell.sh/'|ansi link\nhttps://www.nushell.sh/\n```\n\nFormat a table column into links\n\n``` shiki\n> [[urltext]; [https://example.comText]] |ansi linkurl\n```\n\n**Tips:** Command `ansi link` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/ansi_link.html](https://www.nushell.sh/commands/docs/ansi_link.html)"
- name: ansi strip
  summary: '> ansi strip {flags} ...rest'
  description: "# `ansi strip` for platform\n\nStrip ANSI escape sequences from a string.\n\n## Signature\n\n`> ansi strip {flags} ...rest`\n\n## Parameters\n\n- `...rest`: for a data structure input, remove ANSI sequences from strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nStrip ANSI escape sequences from a string\n\n``` shiki\n>$'(ansi green)(ansi cursor_on)hello'|ansi strip\nhello\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/ansi_strip.html](https://www.nushell.sh/commands/docs/ansi_strip.html)"
- name: any
  summary: '> any {flags} (predicate)'
  description: "# `any` for filters\n\nTests if any element of the input fulfills a predicate expression.\n\n## Signature\n\n`> any {flags} (predicate)`\n\n## Parameters\n\n- `predicate`: a closure that must evaluate to a boolean\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | bool   |\n| table       | bool   |\n\n## Examples\n\nCheck if any row's status is the string 'DOWN'\n\n``` shiki\n> [[status]; [UP] [DOWN] [UP]] |any {|el| $el.status==DOWN }\ntrue\n```\n\nCheck that any item is a string\n\n``` shiki\n> [1234] |any {|| ($in|describe) =='string' }\nfalse\n```\n\nCheck if any value is equal to twice its own index\n\n``` shiki\n> [9876] |enumerate|any {|i| $i.item==$i.index*2 }\ntrue\n```\n\nCheck if any of the values are odd, using a stored closure\n\n``` shiki\n>letcond= {|e| $emod2==1 }; [24168] |any$cond\ntrue\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/any.html](https://www.nushell.sh/commands/docs/any.html)"
- name: append
  summary: '> append {flags} (row)'
  description: "# `append` for filters\n\nAppend any number of rows to a table.\n\n## Signature\n\n`> append {flags} (row)`\n\n## Parameters\n\n- `row`: the row, list, or table to append\n\n## Input/output types:\n\n| input | output      |\n|-------|-------------|\n| any   | list\\<any\\> |\n\n## Examples\n\nAppend one integer to a list\n\n``` shiki\n> [0123] |append4\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n│3│3│\n│4│4│\n╰───┴───╯\n```\n\nAppend a list to an item\n\n``` shiki\n>0|append [123]\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n│3│3│\n╰───┴───╯\n```\n\nAppend a list of string to a string\n\n``` shiki\n>\"a\"|append [\"b\"]\n╭───┬───╮\n│0│a│\n│1│b│\n╰───┴───╯\n```\n\nAppend three integer items\n\n``` shiki\n> [01] |append [234]\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n│3│3│\n│4│4│\n╰───┴───╯\n```\n\nAppend integers and strings\n\n``` shiki\n> [01] |append [2nu4shell]\n╭───┬───────╮\n│0│0│\n│1│1│\n│2│2│\n│3│nu│\n│4│4│\n│5│shell│\n╰───┴───────╯\n```\n\nAppend a range of integers to a list\n\n``` shiki\n> [01] |append2..4\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n│3│3│\n│4│4│\n╰───┴───╯\n```\n\n## Notes\n\nBe aware that this command 'unwraps' lists passed to it. So, if you pass a variable to it, and you want the variable's contents to be appended without being unwrapped, it's wise to pre-emptively wrap the variable in a list, like so: `append [$val]`. This way, `append` will only unwrap the outer list, and leave the variable's contents untouched.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/append.html](https://www.nushell.sh/commands/docs/append.html)"
- name: ast
  summary: '> ast {flags} (pipeline)'
  description: "# `ast` for debug\n\nPrint the abstract syntax tree (ast) for a pipeline.\n\n## Signature\n\n`> ast {flags} (pipeline)`\n\n## Flags\n\n- `--json, -j`: serialize to json\n- `--minify, -m`: minify the nuon or json output\n\n## Parameters\n\n- `pipeline`: the pipeline to print the ast for\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | record |\n\n## Examples\n\nPrint the ast of a string\n\n``` shiki\n>ast'hello'\n```\n\nPrint the ast of a pipeline\n\n``` shiki\n>ast'ls | where name =~ README'\n```\n\nPrint the ast of a pipeline with an error\n\n``` shiki\n>ast'for x in 1..10 { echo $x '\n```\n\nPrint the ast of a pipeline with an error, as json, in a nushell table\n\n``` shiki\n>ast'for x in 1..10 { echo $x '--json|getblock|from json\n```\n\nPrint the ast of a pipeline with an error, as json, minified\n\n``` shiki\n>ast'for x in 1..10 { echo $x '-j-m\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/ast.html](https://www.nushell.sh/commands/docs/ast.html)"
- name: bits
  summary: '> bits {flags}'
  description: "# `bits` for bits\n\nVarious commands for working with bits.\n\n## Signature\n\n`> bits {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                     | type    | usage                                  |\n|--------------------------|---------|----------------------------------------|\n| [`bits and`](bits_and#_) | Builtin | Performs bitwise and for integers.     |\n| [`bits not`](bits_not#_) | Builtin | Performs logical negation on each bit. |\n| [`bits or`](bits_or#_)   | Builtin | Performs bitwise or for integers.      |\n| [`bits rol`](bits_rol#_) | Builtin | Bitwise rotate left for integers.      |\n| [`bits ror`](bits_ror#_) | Builtin | Bitwise rotate right for integers.     |\n| [`bits shl`](bits_shl#_) | Builtin | Bitwise shift left for integers.       |\n| [`bits shr`](bits_shr#_) | Builtin | Bitwise shift right for integers.      |\n| [`bits xor`](bits_xor#_) | Builtin | Performs bitwise xor for integers.     |\n\n**Tips:** Command `bits` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bits.html](https://www.nushell.sh/commands/docs/bits.html)"
- name: Bits
  summary: ''
  description: "# Bits\n\n| Command                        | Description                             |\n|--------------------------------|-----------------------------------------|\n| [bits](../docs/bits#_)         | Various commands for working with bits. |\n| [bits and](../docs/bits_and#_) | Performs bitwise and for integers.      |\n| [bits not](../docs/bits_not#_) | Performs logical negation on each bit.  |\n| [bits or](../docs/bits_or#_)   | Performs bitwise or for integers.       |\n| [bits rol](../docs/bits_rol#_) | Bitwise rotate left for integers.       |\n| [bits ror](../docs/bits_ror#_) | Bitwise rotate right for integers.      |\n| [bits shl](../docs/bits_shl#_) | Bitwise shift left for integers.        |\n| [bits shr](../docs/bits_shr#_) | Bitwise shift right for integers.       |\n| [bits xor](../docs/bits_xor#_) | Performs bitwise xor for integers.      |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/bits.html](https://www.nushell.sh/commands/categories/bits.html)"
- name: bits and
  summary: '> bits and {flags} (target)'
  description: "# `bits and` for bits\n\nPerforms bitwise and for integers.\n\n## Signature\n\n`> bits and {flags} (target)`\n\n## Parameters\n\n- `target`: target integer to perform bit and\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| int         | int         |\n| list\\<int\\> | list\\<int\\> |\n\n## Examples\n\nApply bits and to two numbers\n\n``` shiki\n>2|bits and2\n2\n```\n\nApply logical and to a list of numbers\n\n``` shiki\n> [432] |bits and2\n╭───┬───╮\n│0│0│\n│1│2│\n│2│2│\n╰───┴───╯\n```\n\n**Tips:** Command `bits and` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bits_and.html](https://www.nushell.sh/commands/docs/bits_and.html)"
- name: bits not
  summary: '> bits not {flags}'
  description: "# `bits not` for bits\n\nPerforms logical negation on each bit.\n\n## Signature\n\n`> bits not {flags} `\n\n## Flags\n\n- `--signed, -s`: always treat input number as a signed number\n- `--number-bytes, -n {string}`: the size of unsigned number in bytes, it can be 1, 2, 4, 8, auto\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| int         | int         |\n| list\\<int\\> | list\\<int\\> |\n\n## Examples\n\nApply logical negation to a list of numbers\n\n``` shiki\n> [432] |bits not\n╭───┬─────────────────╮\n│0│140737488355323│\n│1│140737488355324│\n│2│140737488355325│\n╰───┴─────────────────╯\n```\n\nApply logical negation to a list of numbers, treat input as 2 bytes number\n\n``` shiki\n> [432] |bits not-n'2'\n╭───┬───────╮\n│0│65531│\n│1│65532│\n│2│65533│\n╰───┴───────╯\n```\n\nApply logical negation to a list of numbers, treat input as signed number\n\n``` shiki\n> [432] |bits not-s\n╭───┬────╮\n│0│-5│\n│1│-4│\n│2│-3│\n╰───┴────╯\n```\n\n**Tips:** Command `bits not` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bits_not.html](https://www.nushell.sh/commands/docs/bits_not.html)"
- name: bits or
  summary: '> bits or {flags} (target)'
  description: "# `bits or` for bits\n\nPerforms bitwise or for integers.\n\n## Signature\n\n`> bits or {flags} (target)`\n\n## Parameters\n\n- `target`: target integer to perform bit or\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| int         | int         |\n| list\\<int\\> | list\\<int\\> |\n\n## Examples\n\nApply bits or to two numbers\n\n``` shiki\n>2|bits or6\n6\n```\n\nApply logical or to a list of numbers\n\n``` shiki\n> [832] |bits or2\n╭───┬────╮\n│0│10│\n│1│3│\n│2│2│\n╰───┴────╯\n```\n\n**Tips:** Command `bits or` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bits_or.html](https://www.nushell.sh/commands/docs/bits_or.html)"
- name: bits rol
  summary: '> bits rol {flags} (bits)'
  description: "# `bits rol` for bits\n\nBitwise rotate left for integers.\n\n## Signature\n\n`> bits rol {flags} (bits)`\n\n## Flags\n\n- `--signed, -s`: always treat input number as a signed number\n- `--number-bytes, -n {string}`: the word size in number of bytes, it can be 1, 2, 4, 8, auto, default value `8`\n\n## Parameters\n\n- `bits`: number of bits to rotate left\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| int         | int         |\n| list\\<int\\> | list\\<int\\> |\n\n## Examples\n\nRotate left a number with 2 bits\n\n``` shiki\n>17|bits rol2\n68\n```\n\nRotate left a list of numbers with 2 bits\n\n``` shiki\n> [532] |bits rol2\n╭───┬────╮\n│0│20│\n│1│12│\n│2│8│\n╰───┴────╯\n```\n\n**Tips:** Command `bits rol` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bits_rol.html](https://www.nushell.sh/commands/docs/bits_rol.html)"
- name: bits ror
  summary: '> bits ror {flags} (bits)'
  description: "# `bits ror` for bits\n\nBitwise rotate right for integers.\n\n## Signature\n\n`> bits ror {flags} (bits)`\n\n## Flags\n\n- `--signed, -s`: always treat input number as a signed number\n- `--number-bytes, -n {string}`: the word size in number of bytes, it can be 1, 2, 4, 8, auto, default value `8`\n\n## Parameters\n\n- `bits`: number of bits to rotate right\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| int         | int         |\n| list\\<int\\> | list\\<int\\> |\n\n## Examples\n\nRotate right a number with 60 bits\n\n``` shiki\n>17|bits ror60\n272\n```\n\nRotate right a list of numbers of one byte\n\n``` shiki\n> [153392] |bits ror2-n'1'\n╭───┬─────╮\n│0│195│\n│1│72│\n│2│23│\n╰───┴─────╯\n```\n\n**Tips:** Command `bits ror` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bits_ror.html](https://www.nushell.sh/commands/docs/bits_ror.html)"
- name: bits shl
  summary: '> bits shl {flags} (bits)'
  description: "# `bits shl` for bits\n\nBitwise shift left for integers.\n\n## Signature\n\n`> bits shl {flags} (bits)`\n\n## Flags\n\n- `--signed, -s`: always treat input number as a signed number\n- `--number-bytes, -n {string}`: the word size in number of bytes, it can be 1, 2, 4, 8, auto, default value `8`\n\n## Parameters\n\n- `bits`: number of bits to shift left\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| int         | int         |\n| list\\<int\\> | list\\<int\\> |\n\n## Examples\n\nShift left a number by 7 bits\n\n``` shiki\n>2|bits shl7\n256\n```\n\nShift left a number with 1 byte by 7 bits\n\n``` shiki\n>2|bits shl7-n'1'\n0\n```\n\nShift left a signed number by 1 bit\n\n``` shiki\n>0x7F|bits shl1-s\n254\n```\n\nShift left a list of numbers\n\n``` shiki\n> [532] |bits shl2\n╭───┬────╮\n│0│20│\n│1│12│\n│2│8│\n╰───┴────╯\n```\n\n**Tips:** Command `bits shl` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bits_shl.html](https://www.nushell.sh/commands/docs/bits_shl.html)"
- name: bits shr
  summary: '> bits shr {flags} (bits)'
  description: "# `bits shr` for bits\n\nBitwise shift right for integers.\n\n## Signature\n\n`> bits shr {flags} (bits)`\n\n## Flags\n\n- `--signed, -s`: always treat input number as a signed number\n- `--number-bytes, -n {string}`: the word size in number of bytes, it can be 1, 2, 4, 8, auto, default value `8`\n\n## Parameters\n\n- `bits`: number of bits to shift right\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| int         | int         |\n| list\\<int\\> | list\\<int\\> |\n\n## Examples\n\nShift right a number with 2 bits\n\n``` shiki\n>8|bits shr2\n2\n```\n\nShift right a list of numbers\n\n``` shiki\n> [15352] |bits shr2\n╭───┬───╮\n│0│3│\n│1│8│\n│2│0│\n╰───┴───╯\n```\n\n**Tips:** Command `bits shr` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bits_shr.html](https://www.nushell.sh/commands/docs/bits_shr.html)"
- name: bits xor
  summary: '> bits xor {flags} (target)'
  description: "# `bits xor` for bits\n\nPerforms bitwise xor for integers.\n\n## Signature\n\n`> bits xor {flags} (target)`\n\n## Parameters\n\n- `target`: target integer to perform bit xor\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| int         | int         |\n| list\\<int\\> | list\\<int\\> |\n\n## Examples\n\nApply bits xor to two numbers\n\n``` shiki\n>2|bits xor2\n0\n```\n\nApply logical xor to a list of numbers\n\n``` shiki\n> [832] |bits xor2\n╭───┬────╮\n│0│10│\n│1│1│\n│2│0│\n╰───┴────╯\n```\n\n**Tips:** Command `bits xor` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bits_xor.html](https://www.nushell.sh/commands/docs/bits_xor.html)"
- name: break
  summary: '> break {flags}'
  description: "# `break` for core\n\nBreak a loop.\n\n## Signature\n\n`> break {flags} `\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nBreak out of a loop\n\n``` shiki\n>loop { break }\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/break.html](https://www.nushell.sh/commands/docs/break.html)"
- name: Bytes
  summary: ''
  description: "# Bytes\n\n| Command                                          | Description                                                                                |\n|--------------------------------------------------|--------------------------------------------------------------------------------------------|\n| [bytes](../docs/bytes#_)                         | Various commands for working with byte data.                                               |\n| [bytes add](../docs/bytes_add#_)                 | Add specified bytes to the input.                                                          |\n| [bytes at](../docs/bytes_at#_)                   | Get bytes defined by a range                                                               |\n| [bytes build](../docs/bytes_build#_)             | Create bytes from the arguments.                                                           |\n| [bytes collect](../docs/bytes_collect#_)         | Concatenate multiple binary into a single binary, with an optional separator between each. |\n| [bytes ends-with](../docs/bytes_ends-with#_)     | Check if bytes ends with a pattern.                                                        |\n| [bytes index-of](../docs/bytes_index-of#_)       | Returns start index of first occurrence of pattern in bytes, or -1 if no match.            |\n| [bytes length](../docs/bytes_length#_)           | Output the length of any bytes in the pipeline.                                            |\n| [bytes remove](../docs/bytes_remove#_)           | Remove bytes.                                                                              |\n| [bytes replace](../docs/bytes_replace#_)         | Find and replace binary.                                                                   |\n| [bytes reverse](../docs/bytes_reverse#_)         | Reverse the bytes in the pipeline.                                                         |\n| [bytes starts-with](../docs/bytes_starts-with#_) | Check if bytes starts with a pattern.                                                      |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/bytes.html](https://www.nushell.sh/commands/categories/bytes.html)"
- name: bytes
  summary: '> bytes {flags}'
  description: "# `bytes` for bytes\n\nVarious commands for working with byte data.\n\n## Signature\n\n`> bytes {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                                       | type    | usage                                                                                      |\n|--------------------------------------------|---------|--------------------------------------------------------------------------------------------|\n| [`bytes add`](bytes_add#_)                 | Builtin | Add specified bytes to the input.                                                          |\n| [`bytes at`](bytes_at#_)                   | Builtin | Get bytes defined by a range                                                               |\n| [`bytes build`](bytes_build#_)             | Builtin | Create bytes from the arguments.                                                           |\n| [`bytes collect`](bytes_collect#_)         | Builtin | Concatenate multiple binary into a single binary, with an optional separator between each. |\n| [`bytes ends-with`](bytes_ends-with#_)     | Builtin | Check if bytes ends with a pattern.                                                        |\n| [`bytes index-of`](bytes_index-of#_)       | Builtin | Returns start index of first occurrence of pattern in bytes, or -1 if no match.            |\n| [`bytes length`](bytes_length#_)           | Builtin | Output the length of any bytes in the pipeline.                                            |\n| [`bytes remove`](bytes_remove#_)           | Builtin | Remove bytes.                                                                              |\n| [`bytes replace`](bytes_replace#_)         | Builtin | Find and replace binary.                                                                   |\n| [`bytes reverse`](bytes_reverse#_)         | Builtin | Reverse the bytes in the pipeline.                                                         |\n| [`bytes starts-with`](bytes_starts-with#_) | Builtin | Check if bytes starts with a pattern.                                                      |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes.html](https://www.nushell.sh/commands/docs/bytes.html)"
- name: bytes add
  summary: '> bytes add {flags} (data) ...rest'
  description: "# `bytes add` for bytes\n\nAdd specified bytes to the input.\n\n## Signature\n\n`> bytes add {flags} (data) ...rest`\n\n## Flags\n\n- `--index, -i {int}`: index to insert binary data\n- `--end, -e`: add to the end of binary\n\n## Parameters\n\n- `data`: the binary to add\n- `...rest`: for a data structure input, add bytes to the data at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| binary         | binary         |\n| list\\<binary\\> | list\\<binary\\> |\n| record         | record         |\n| table          | table          |\n\n## Examples\n\nAdd bytes `0x[AA]` to `0x[1F FF AA AA]`\n\n``` shiki\n>0x[1FFFAAAA] |bytes add0x[AA]\nLength:5 (0x5) bytes|printablewhitespaceascii_othernon_ascii\n00000000:aa1fffaaaa×•×××\n```\n\nAdd bytes `0x[AA BB]` to `0x[1F FF AA AA]` at index 1\n\n``` shiki\n>0x[1FFFAAAA] |bytes add0x[AABB] -i1\nLength:6 (0x6) bytes|printablewhitespaceascii_othernon_ascii\n00000000:1faabbffaaaa•×××××\n```\n\nAdd bytes `0x[11]` to `0x[FF AA AA]` at the end\n\n``` shiki\n>0x[FFAAAA] |bytes add0x[11] -e\nLength:4 (0x4) bytes|printablewhitespaceascii_othernon_ascii\n00000000:ffaaaa11×××•\n```\n\nAdd bytes `0x[11 22 33]` to `0x[FF AA AA]` at the end, at index 1(the index is start from end)\n\n``` shiki\n>0x[FFAABB] |bytes add0x[112233] -e-i1\nLength:6 (0x6) bytes|printablewhitespaceascii_othernon_ascii\n00000000:ffaa112233bb××•\"3×\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_add.html](https://www.nushell.sh/commands/docs/bytes_add.html)"
- name: bytes at
  summary: '> bytes at {flags} (range) ...rest'
  description: "# `bytes at` for bytes\n\nGet bytes defined by a range\n\n## Signature\n\n`> bytes at {flags} (range) ...rest`\n\n## Parameters\n\n- `range`: the range to get bytes\n- `...rest`: for a data structure input, get bytes from data at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| binary         | binary         |\n| list\\<binary\\> | list\\<binary\\> |\n| record         | record         |\n| table          | table          |\n\n## Examples\n\nGet a subbytes `0x[10 01]` from the bytes `0x[33 44 55 10 01 13]`\n\n``` shiki\n>0x[334455100113] |bytes at3..<4\nLength:1 (0x1) bytes|printablewhitespaceascii_othernon_ascii\n00000000:10•\n```\n\nGet a subbytes `0x[10 01 13]` from the bytes `0x[33 44 55 10 01 13]`\n\n``` shiki\n>0x[334455100113] |bytes at3..6\nLength:3 (0x3) bytes|printablewhitespaceascii_othernon_ascii\n00000000:100113•••\n```\n\nGet the remaining characters from a starting index\n\n``` shiki\n>  { data:0x[334455100113] } |bytes at3..data\n╭──────┬─────────────╮\n│data│ [16, 1, 19] │\n╰──────┴─────────────╯\n```\n\nGet the characters from the beginning until ending index\n\n``` shiki\n>0x[334455100113] |bytes at..<4\nLength:4 (0x4) bytes|printablewhitespaceascii_othernon_ascii\n00000000:334455103DU•\n```\n\nOr the characters from the beginning until ending index inside a table\n\n``` shiki\n>  [[ColAColBColC]; [0x[111213] 0x[141516] 0x[171819]]] |bytes at1..ColBColC\n╭───┬──────────────┬──────────┬──────────╮\n│# │     ColA     │   ColB   │   ColC   │\n├───┼──────────────┼──────────┼──────────┤\n│0│ [17, 18, 19] │ [21, 22] │ [24, 25] │\n╰───┴──────────────┴──────────┴──────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_at.html](https://www.nushell.sh/commands/docs/bytes_at.html)"
- name: bytes build
  summary: '> bytes build {flags} ...rest'
  description: "# `bytes build` for bytes\n\nCreate bytes from the arguments.\n\n## Signature\n\n`> bytes build {flags} ...rest`\n\n## Parameters\n\n- `...rest`: list of bytes\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | binary |\n\n## Examples\n\nBuilds binary data from 0x\\[01 02\\], 0x\\[03\\], 0x\\[04\\]\n\n``` shiki\n>bytes build0x[0102] 0x[03] 0x[04]\nLength:4 (0x4) bytes|printablewhitespaceascii_othernon_ascii\n00000000:01020304••••\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_build.html](https://www.nushell.sh/commands/docs/bytes_build.html)"
- name: bytes collect
  summary: '> bytes collect {flags} (separator)'
  description: "# `bytes collect` for bytes\n\nConcatenate multiple binary into a single binary, with an optional separator between each.\n\n## Signature\n\n`> bytes collect {flags} (separator)`\n\n## Parameters\n\n- `separator`: optional separator to use when creating binary\n\n## Input/output types:\n\n| input          | output |\n|----------------|--------|\n| list\\<binary\\> | binary |\n\n## Examples\n\nCreate a byte array from input\n\n``` shiki\n> [0x[11] 0x[1315]] |bytes collect\nLength:3 (0x3) bytes|printablewhitespaceascii_othernon_ascii\n00000000:111315•••\n```\n\nCreate a byte array from input with a separator\n\n``` shiki\n> [0x[11] 0x[33] 0x[44]] |bytes collect0x[01]\nLength:5 (0x5) bytes|printablewhitespaceascii_othernon_ascii\n00000000:1101330144••3•D\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_collect.html](https://www.nushell.sh/commands/docs/bytes_collect.html)"
- name: bytes ends-with
  summary: '> bytes ends-with {flags} (pattern) ...rest'
  description: "# `bytes ends-with` for bytes\n\nCheck if bytes ends with a pattern.\n\n## Signature\n\n`> bytes ends-with {flags} (pattern) ...rest`\n\n## Parameters\n\n- `pattern`: the pattern to match\n- `...rest`: for a data structure input, check if bytes at the given cell paths end with the pattern\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| binary | bool   |\n| record | record |\n| table  | table  |\n\n## Examples\n\nChecks if binary ends with `0x[AA]`\n\n``` shiki\n>0x[1FFFAAAA] |bytes ends-with0x[AA]\ntrue\n```\n\nChecks if binary ends with `0x[FF AA AA]`\n\n``` shiki\n>0x[1FFFAAAA] |bytes ends-with0x[FFAAAA]\ntrue\n```\n\nChecks if binary ends with `0x[11]`\n\n``` shiki\n>0x[1FFFAAAA] |bytes ends-with0x[11]\nfalse\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_ends-with.html](https://www.nushell.sh/commands/docs/bytes_ends-with.html)"
- name: bytes index-of
  summary: '> bytes index-of {flags} (pattern) ...rest'
  description: "# `bytes index-of` for bytes\n\nReturns start index of first occurrence of pattern in bytes, or -1 if no match.\n\n## Signature\n\n`> bytes index-of {flags} (pattern) ...rest`\n\n## Flags\n\n- `--all, -a`: returns all matched index\n- `--end, -e`: search from the end of the binary\n\n## Parameters\n\n- `pattern`: the pattern to find index of\n- `...rest`: for a data structure input, find the indexes at the given cell paths\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| binary | int    |\n| record | record |\n| table  | table  |\n\n## Examples\n\nReturns index of pattern in bytes\n\n``` shiki\n>0x[3344551001134455] |bytes index-of0x[4455]\n1\n```\n\nReturns index of pattern, search from end\n\n``` shiki\n>0x[3344551001134455] |bytes index-of-e0x[4455]\n6\n```\n\nReturns all matched index\n\n``` shiki\n>0x[334455100133443344] |bytes index-of-a0x[3344]\n╭───┬───╮\n│0│0│\n│1│5│\n│2│7│\n╰───┴───╯\n```\n\nReturns all matched index, searching from end\n\n``` shiki\n>0x[334455100133443344] |bytes index-of-a-e0x[3344]\n╭───┬───╮\n│0│7│\n│1│5│\n│2│0│\n╰───┴───╯\n```\n\nReturns index of pattern for specific column\n\n``` shiki\n>  [[ColAColBColC]; [0x[111213] 0x[141516] 0x[171819]]] |bytes index-of0x[11] ColAColC\n╭───┬──────┬──────────────┬──────╮\n│# │ ColA │     ColB     │ ColC │\n├───┼──────┼──────────────┼──────┤\n│0│0│ [20, 21, 22] │-1│\n╰───┴──────┴──────────────┴──────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_index-of.html](https://www.nushell.sh/commands/docs/bytes_index-of.html)"
- name: bytes length
  summary: '> bytes length {flags} ...rest'
  description: "# `bytes length` for bytes\n\nOutput the length of any bytes in the pipeline.\n\n## Signature\n\n`> bytes length {flags} ...rest`\n\n## Parameters\n\n- `...rest`: for a data structure input, find the length of data at the given cell paths\n\n## Input/output types:\n\n| input          | output      |\n|----------------|-------------|\n| binary         | int         |\n| list\\<binary\\> | list\\<int\\> |\n| record         | record      |\n| table          | table       |\n\n## Examples\n\nReturn the length of a binary\n\n``` shiki\n>0x[1FFFAAAB] |bytes length\n4\n```\n\nReturn the lengths of multiple binaries\n\n``` shiki\n> [0x[1FFFAAAB] 0x[1F]] |bytes length\n╭───┬───╮\n│0│4│\n│1│1│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_length.html](https://www.nushell.sh/commands/docs/bytes_length.html)"
- name: bytes remove
  summary: '> bytes remove {flags} (pattern) ...rest'
  description: "# `bytes remove` for bytes\n\nRemove bytes.\n\n## Signature\n\n`> bytes remove {flags} (pattern) ...rest`\n\n## Flags\n\n- `--end, -e`: remove from end of binary\n- `--all, -a`: remove occurrences of finding binary\n\n## Parameters\n\n- `pattern`: the pattern to find\n- `...rest`: for a data structure input, remove bytes from data at the given cell paths\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| binary | binary |\n| record | record |\n| table  | table  |\n\n## Examples\n\nRemove contents\n\n``` shiki\n>0x[10AAFFAAFF] |bytes remove0x[10AA]\nLength:3 (0x3) bytes|printablewhitespaceascii_othernon_ascii\n00000000:ffaaff×××\n```\n\nRemove all occurrences of find binary in record field\n\n``` shiki\n> { data:0x[10AA10BB10] } |bytes remove-a0x[10] data\n╭──────┬────────────╮\n│data│ [170, 187] │\n╰──────┴────────────╯\n```\n\nRemove occurrences of find binary from end\n\n``` shiki\n>0x[10AA10BBCCAA10] |bytes remove-e0x[10]\nLength:6 (0x6) bytes|printablewhitespaceascii_othernon_ascii\n00000000:10aa10bbccaa•×•×××\n```\n\nRemove all occurrences of find binary in table\n\n``` shiki\n> [[ColAColBColC]; [0x[111213] 0x[141516] 0x[171819]]] |bytes remove0x[11] ColAColC\n╭───┬──────────┬──────────────┬──────────────╮\n│# │   ColA   │     ColB     │     ColC     │\n├───┼──────────┼──────────────┼──────────────┤\n│0│ [18, 19] │ [20, 21, 22] │ [23, 24, 25] │\n╰───┴──────────┴──────────────┴──────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_remove.html](https://www.nushell.sh/commands/docs/bytes_remove.html)"
- name: bytes replace
  summary: '> bytes replace {flags} (find) (replace) ...rest'
  description: "# `bytes replace` for bytes\n\nFind and replace binary.\n\n## Signature\n\n`> bytes replace {flags} (find) (replace) ...rest`\n\n## Flags\n\n- `--all, -a`: replace all occurrences of find binary\n\n## Parameters\n\n- `find`: the pattern to find\n- `replace`: the replacement pattern\n- `...rest`: for a data structure input, replace bytes in data at the given cell paths\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| binary | binary |\n| record | record |\n| table  | table  |\n\n## Examples\n\nFind and replace contents\n\n``` shiki\n>0x[10AAFFAAFF] |bytes replace0x[10AA] 0x[FF]\nLength:4 (0x4) bytes|printablewhitespaceascii_othernon_ascii\n00000000:ffffaaff××××\n```\n\nFind and replace all occurrences of find binary\n\n``` shiki\n>0x[10AA10BB10] |bytes replace-a0x[10] 0x[A0]\nLength:5 (0x5) bytes|printablewhitespaceascii_othernon_ascii\n00000000:a0aaa0bba0×××××\n```\n\nFind and replace all occurrences of find binary in table\n\n``` shiki\n> [[ColAColBColC]; [0x[111213] 0x[141516] 0x[171819]]] |bytes replace-a0x[11] 0x[13] ColAColC\n╭───┬──────────────┬──────────────┬──────────────╮\n│# │     ColA     │     ColB     │     ColC     │\n├───┼──────────────┼──────────────┼──────────────┤\n│0│ [19, 18, 19] │ [20, 21, 22] │ [23, 24, 25] │\n╰───┴──────────────┴──────────────┴──────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_replace.html](https://www.nushell.sh/commands/docs/bytes_replace.html)"
- name: bytes reverse
  summary: '> bytes reverse {flags} ...rest'
  description: "# `bytes reverse` for bytes\n\nReverse the bytes in the pipeline.\n\n## Signature\n\n`> bytes reverse {flags} ...rest`\n\n## Parameters\n\n- `...rest`: for a data structure input, reverse data at the given cell paths\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| binary | binary |\n| record | record |\n| table  | table  |\n\n## Examples\n\nReverse bytes `0x[1F FF AA AA]`\n\n``` shiki\n>0x[1FFFAAAA] |bytes reverse\nLength:4 (0x4) bytes|printablewhitespaceascii_othernon_ascii\n00000000:aaaaff1f×××•\n```\n\nReverse bytes `0x[FF AA AA]`\n\n``` shiki\n>0x[FFAAAA] |bytes reverse\nLength:3 (0x3) bytes|printablewhitespaceascii_othernon_ascii\n00000000:aaaaff×××\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_reverse.html](https://www.nushell.sh/commands/docs/bytes_reverse.html)"
- name: bytes starts-with
  summary: '> bytes starts-with {flags} (pattern) ...rest'
  description: "# `bytes starts-with` for bytes\n\nCheck if bytes starts with a pattern.\n\n## Signature\n\n`> bytes starts-with {flags} (pattern) ...rest`\n\n## Parameters\n\n- `pattern`: the pattern to match\n- `...rest`: for a data structure input, check if bytes at the given cell paths start with the pattern\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| binary | bool   |\n| record | record |\n| table  | table  |\n\n## Examples\n\nChecks if binary starts with `0x[1F FF AA]`\n\n``` shiki\n>0x[1FFFAAAA] |bytes starts-with0x[1FFFAA]\ntrue\n```\n\nChecks if binary starts with `0x[1F]`\n\n``` shiki\n>0x[1FFFAAAA] |bytes starts-with0x[1F]\ntrue\n```\n\nChecks if binary starts with `0x[1F]`\n\n``` shiki\n>0x[1FFFAAAA] |bytes starts-with0x[11]\nfalse\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/bytes_starts-with.html](https://www.nushell.sh/commands/docs/bytes_starts-with.html)"
- name: cal
  summary: '> cal {flags}'
  description: "# `cal` for generators\n\nDisplay a calendar.\n\n## Signature\n\n`> cal {flags} `\n\n## Flags\n\n- `--year, -y`: Display the year column\n- `--quarter, -q`: Display the quarter column\n- `--month, -m`: Display the month column\n- `--full-year, - {int}`: Display a year-long calendar for the specified year\n- `--week-start, - {string}`: Display the calendar with the specified day as the first day of the week\n- `--month-names, -`: Display the month names instead of integers\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nThis month's calendar\n\n``` shiki\n>cal\n```\n\nThe calendar for all of 2012\n\n``` shiki\n>cal--full-year2012\n```\n\nThis month's calendar with the week starting on monday\n\n``` shiki\n>cal--week-startmonday\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/cal.html](https://www.nushell.sh/commands/docs/cal.html)"
- name: cd
  summary: '> cd {flags} (path)'
  description: "# `cd` for filesystem\n\nChange directory.\n\n## Signature\n\n`> cd {flags} (path)`\n\n## Parameters\n\n- `path`: the path to change to\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n| string  | nothing |\n\n## Examples\n\nChange to your home directory\n\n``` shiki\n>cd~\n```\n\nChange to a directory via abbreviations\n\n``` shiki\n>cdd/s/9\n```\n\nChange to the previous working directory (\\$OLDPWD)\n\n``` shiki\n>cd-\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/cd.html](https://www.nushell.sh/commands/docs/cd.html)"
- name: char
  summary: '> char {flags} (character) ...rest'
  description: "# `char` for strings\n\nOutput special characters (e.g., 'newline').\n\n## Signature\n\n`> char {flags} (character) ...rest`\n\n## Flags\n\n- `--list, -l`: List all supported character names\n- `--unicode, -u`: Unicode string i.e. 1f378\n- `--integer, -i`: Create a codepoint from an integer\n\n## Parameters\n\n- `character`: the name of the character to output\n- `...rest`: multiple Unicode bytes\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nOutput newline\n\n``` shiki\n>char newline\n\n```\n\nList available characters\n\n``` shiki\n>char--list\n```\n\nOutput prompt character, newline and a hamburger menu character\n\n``` shiki\n> (char prompt) + (char newline) + (char hamburger)\n▶\n≡\n```\n\nOutput Unicode character\n\n``` shiki\n>char-u1f378\n🍸\n```\n\nCreate Unicode from integer codepoint values\n\n``` shiki\n>char-i (0x60+1) (0x60+2)\nab\n```\n\nOutput multi-byte Unicode character\n\n``` shiki\n>char-u1F468200D1F466200D1F466\n👨‍👦‍👦\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/char.html](https://www.nushell.sh/commands/docs/char.html)"
- name: Chart
  summary: ''
  description: "# Chart\n\n| Command                          | Description                                                              |\n|----------------------------------|--------------------------------------------------------------------------|\n| [histogram](../docs/histogram#_) | Creates a new table with a histogram based on the column name passed in. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/chart.html](https://www.nushell.sh/commands/categories/chart.html)"
- name: clear
  summary: '> clear {flags}'
  description: "# `clear` for platform\n\nClear the terminal.\n\n## Signature\n\n`> clear {flags} `\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nClear the terminal\n\n``` shiki\n>clear\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/clear.html](https://www.nushell.sh/commands/docs/clear.html)"
- name: collect
  summary: '> collect {flags} (closure)'
  description: "# `collect` for filters\n\nCollect the stream and pass it to a block.\n\n## Signature\n\n`> collect {flags} (closure)`\n\n## Flags\n\n- `--keep-env, -`: let the block affect environment variables\n\n## Parameters\n\n- `closure`: the closure to run once the stream is collected\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nUse the second value in the stream\n\n``` shiki\n> [123] |collect { |x| $x.1 }\n2\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/collect.html](https://www.nushell.sh/commands/docs/collect.html)"
- name: columns
  summary: '> columns {flags}'
  description: "# `columns` for filters\n\nGiven a record or table, produce a list of its columns' names.\n\n## Signature\n\n`> columns {flags} `\n\n## Input/output types:\n\n| input  | output         |\n|--------|----------------|\n| record | list\\<string\\> |\n| table  | list\\<string\\> |\n\n## Examples\n\nGet the columns from the record\n\n``` shiki\n> { acronym:PWD, meaning:'Print Working Directory' } |columns\n╭───┬─────────╮\n│0│acronym│\n│1│meaning│\n╰───┴─────────╯\n```\n\nGet the columns from the table\n\n``` shiki\n> [[name,age,grade]; [bill,20,a]] |columns\n╭───┬───────╮\n│0│name│\n│1│age│\n│2│grade│\n╰───┴───────╯\n```\n\nGet the first column from the table\n\n``` shiki\n> [[name,age,grade]; [bill,20,a]] |columns|first\n```\n\nGet the second column from the table\n\n``` shiki\n> [[name,age,grade]; [bill,20,a]] |columns|select1\n```\n\n## Notes\n\nThis is a counterpart to `values`, which produces a list of columns' values.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/columns.html](https://www.nushell.sh/commands/docs/columns.html)"
- name: Command Reference
  summary: If you're new to Nushell, the quick tour can show you the most important commands
  description: "# Command Reference\n\nIf you're new to Nushell, [the quick tour](https://www.nushell.sh/book/quick_tour.html) can show you the most important commands. You don't need to know them all!\n\nTo see all commands from inside Nushell, run [`help commands`](docs/help#_).\n\n| Command                                                     | Categories             | Description                                                                                                                           |\n|-------------------------------------------------------------|------------------------|---------------------------------------------------------------------------------------------------------------------------------------|\n| [alias](docs/alias#_)                                       | core                   | Alias a command (with optional flags) to a new name.                                                                                  |\n| [all](docs/all#_)                                           | filters                | Test if every element of the input fulfills a predicate expression.                                                                   |\n| [ansi](docs/ansi#_)                                         | platform               | Output ANSI codes to change color and style of text.                                                                                  |\n| [ansi gradient](docs/ansi_gradient#_)                       | platform               | Add a color gradient (using ANSI color codes) to the given string.                                                                    |\n| [ansi link](docs/ansi_link#_)                               | platform               | Add a link (using OSC 8 escape sequence) to the given string.                                                                         |\n| [ansi strip](docs/ansi_strip#_)                             | platform               | Strip ANSI escape sequences from a string.                                                                                            |\n| [any](docs/any#_)                                           | filters                | Tests if any element of the input fulfills a predicate expression.                                                                    |\n| [append](docs/append#_)                                     | filters                | Append any number of rows to a table.                                                                                                 |\n| [ast](docs/ast#_)                                           | debug                  | Print the abstract syntax tree (ast) for a pipeline.                                                                                  |\n| [bits](docs/bits#_)                                         | bits                   | Various commands for working with bits.                                                                                               |\n| [bits and](docs/bits_and#_)                                 | bits                   | Performs bitwise and for integers.                                                                                                    |\n| [bits not](docs/bits_not#_)                                 | bits                   | Performs logical negation on each bit.                                                                                                |\n| [bits or](docs/bits_or#_)                                   | bits                   | Performs bitwise or for integers.                                                                                                     |\n| [bits rol](docs/bits_rol#_)                                 | bits                   | Bitwise rotate left for integers.                                                                                                     |\n| [bits ror](docs/bits_ror#_)                                 | bits                   | Bitwise rotate right for integers.                                                                                                    |\n| [bits shl](docs/bits_shl#_)                                 | bits                   | Bitwise shift left for integers.                                                                                                      |\n| [bits shr](docs/bits_shr#_)                                 | bits                   | Bitwise shift right for integers.                                                                                                     |\n| [bits xor](docs/bits_xor#_)                                 | bits                   | Performs bitwise xor for integers.                                                                                                    |\n| [break](docs/break#_)                                       | core                   | Break a loop.                                                                                                                         |\n| [bytes](docs/bytes#_)                                       | bytes                  | Various commands for working with byte data.                                                                                          |\n| [bytes add](docs/bytes_add#_)                               | bytes                  | Add specified bytes to the input.                                                                                                     |\n| [bytes at](docs/bytes_at#_)                                 | bytes                  | Get bytes defined by a range                                                                                                          |\n| [bytes build](docs/bytes_build#_)                           | bytes                  | Create bytes from the arguments.                                                                                                      |\n| [bytes collect](docs/bytes_collect#_)                       | bytes                  | Concatenate multiple binary into a single binary, with an optional separator between each.                                            |\n| [bytes ends-with](docs/bytes_ends-with#_)                   | bytes                  | Check if bytes ends with a pattern.                                                                                                   |\n| [bytes index-of](docs/bytes_index-of#_)                     | bytes                  | Returns start index of first occurrence of pattern in bytes, or -1 if no match.                                                       |\n| [bytes length](docs/bytes_length#_)                         | bytes                  | Output the length of any bytes in the pipeline.                                                                                       |\n| [bytes remove](docs/bytes_remove#_)                         | bytes                  | Remove bytes.                                                                                                                         |\n| [bytes replace](docs/bytes_replace#_)                       | bytes                  | Find and replace binary.                                                                                                              |\n| [bytes reverse](docs/bytes_reverse#_)                       | bytes                  | Reverse the bytes in the pipeline.                                                                                                    |\n| [bytes starts-with](docs/bytes_starts-with#_)               | bytes                  | Check if bytes starts with a pattern.                                                                                                 |\n| [cal](docs/cal#_)                                           | generators             | Display a calendar.                                                                                                                   |\n| [cd](docs/cd#_)                                             | filesystem             | Change directory.                                                                                                                     |\n| [char](docs/char#_)                                         | strings                | Output special characters (e.g., 'newline').                                                                                          |\n| [clear](docs/clear#_)                                       | platform               | Clear the terminal.                                                                                                                   |\n| [collect](docs/collect#_)                                   | filters                | Collect the stream and pass it to a block.                                                                                            |\n| [columns](docs/columns#_)                                   | filters                | Given a record or table, produce a list of its columns' names.                                                                        |\n| [commandline](docs/commandline#_)                           | core                   | View or modify the current command line input buffer.                                                                                 |\n| [compact](docs/compact#_)                                   | filters                | Creates a table with non-empty rows.                                                                                                  |\n| [complete](docs/complete#_)                                 | system                 | Capture the outputs and exit code from an external piped in command in a nushell table.                                               |\n| [config](docs/config#_)                                     | env                    | Edit nushell configuration files.                                                                                                     |\n| [config env](docs/config_env#_)                             | env                    | Edit nu environment configurations.                                                                                                   |\n| [config nu](docs/config_nu#_)                               | env                    | Edit nu configurations.                                                                                                               |\n| [config reset](docs/config_reset#_)                         | env                    | Reset nushell environment configurations to default, and saves old config files in the config location as oldconfig.nu and oldenv.nu. |\n| [const](docs/const#_)                                       | core                   | Create a parse-time constant.                                                                                                         |\n| [continue](docs/continue#_)                                 | core                   | Continue a loop from the next iteration.                                                                                              |\n| [cp](docs/cp#_)                                             | filesystem             | Copy files.                                                                                                                           |\n| [date](docs/date#_)                                         | date                   | Date-related commands.                                                                                                                |\n| [date format](docs/date_format#_)                           | removed                | Removed command: use \\`format date\\` instead                                                                                          |\n| [date humanize](docs/date_humanize#_)                       | date                   | Print a 'humanized' format for the date, relative to now.                                                                             |\n| [date list-timezone](docs/date_list-timezone#_)             | date                   | List supported time zones.                                                                                                            |\n| [date now](docs/date_now#_)                                 | date                   | Get the current date.                                                                                                                 |\n| [date to-record](docs/date_to-record#_)                     | date                   | Convert the date into a record.                                                                                                       |\n| [date to-table](docs/date_to-table#_)                       | date                   | Convert the date into a structured table.                                                                                             |\n| [date to-timezone](docs/date_to-timezone#_)                 | date                   | Convert a date to a given time zone.                                                                                                  |\n| [debug](docs/debug#_)                                       | debug                  | Debug print the value(s) piped in.                                                                                                    |\n| [decode](docs/decode#_)                                     | strings                | Decode bytes into a string.                                                                                                           |\n| [decode base64](docs/decode_base64#_)                       | hash                   | Base64 decode a value.                                                                                                                |\n| [decode hex](docs/decode_hex#_)                             | formats                | Hex decode a value.                                                                                                                   |\n| [def](docs/def#_)                                           | core                   | Define a custom command.                                                                                                              |\n| [def-env](docs/def-env#_)                                   | core                   | Define a custom command, which participates in the caller environment.                                                                |\n| [default](docs/default#_)                                   | filters                | Sets a default row's column if missing.                                                                                               |\n| [describe](docs/describe#_)                                 | core                   | Describe the type and structure of the value(s) piped in.                                                                             |\n| [detect columns](docs/detect_columns#_)                     | strings                | Attempt to automatically split text into multiple columns.                                                                            |\n| [dfr agg](docs/dfr_agg#_)                                   | lazyframe              | Performs a series of aggregations from a group-by.                                                                                    |\n| [dfr agg-groups](docs/dfr_agg-groups#_)                     | expression             | creates an agg_groups expression                                                                                                      |\n| [dfr all-false](docs/dfr_all-false#_)                       | dataframe              | Returns true if all values are false.                                                                                                 |\n| [dfr all-true](docs/dfr_all-true#_)                         | dataframe              | Returns true if all values are true.                                                                                                  |\n| [dfr append](docs/dfr_append#_)                             | dataframe              | Appends a new dataframe.                                                                                                              |\n| [dfr arg-max](docs/dfr_arg-max#_)                           | dataframe              | Return index for max value in series.                                                                                                 |\n| [dfr arg-min](docs/dfr_arg-min#_)                           | dataframe              | Return index for min value in series.                                                                                                 |\n| [dfr arg-sort](docs/dfr_arg-sort#_)                         | dataframe              | Returns indexes for a sorted series.                                                                                                  |\n| [dfr arg-true](docs/dfr_arg-true#_)                         | dataframe              | Returns indexes where values are true.                                                                                                |\n| [dfr arg-unique](docs/dfr_arg-unique#_)                     | dataframe              | Returns indexes for unique values.                                                                                                    |\n| [dfr arg-where](docs/dfr_arg-where#_)                       | expression             | Creates an expression that returns the arguments where expression is true.                                                            |\n| [dfr as](docs/dfr_as#_)                                     | expression             | Creates an alias expression.                                                                                                          |\n| [dfr as-date](docs/dfr_as-date#_)                           | dataframe              | Converts string to date.                                                                                                              |\n| [dfr as-datetime](docs/dfr_as-datetime#_)                   | dataframe              | Converts string to datetime.                                                                                                          |\n| [dfr cache](docs/dfr_cache#_)                               | lazyframe              | Caches operations in a new LazyFrame                                                                                                  |\n| [dfr col](docs/dfr_col#_)                                   | expression             | Creates a named column expression.                                                                                                    |\n| [dfr collect](docs/dfr_collect#_)                           | lazyframe              | Collect lazy dataframe into eager dataframe.                                                                                          |\n| [dfr columns](docs/dfr_columns#_)                           | dataframe              | Show dataframe columns.                                                                                                               |\n| [dfr concat-str](docs/dfr_concat-str#_)                     | expression             | Creates a concat string expression.                                                                                                   |\n| [dfr concatenate](docs/dfr_concatenate#_)                   | dataframe              | Concatenates strings with other array.                                                                                                |\n| [dfr contains](docs/dfr_contains#_)                         | dataframe              | Checks if a pattern is contained in a string.                                                                                         |\n| [dfr count](docs/dfr_count#_)                               | expression             | creates a count expression                                                                                                            |\n| [dfr count-null](docs/dfr_count-null#_)                     | dataframe              | Counts null values.                                                                                                                   |\n| [dfr cumulative](docs/dfr_cumulative#_)                     | dataframe              | Cumulative calculation for a series.                                                                                                  |\n| [dfr datepart](docs/dfr_datepart#_)                         | expression             | Creates an expression for capturing the specified datepart in a column.                                                               |\n| [dfr drop](docs/dfr_drop#_)                                 | dataframe              | Creates a new dataframe by dropping the selected columns.                                                                             |\n| [dfr drop-duplicates](docs/dfr_drop-duplicates#_)           | dataframe              | Drops duplicate values in dataframe.                                                                                                  |\n| [dfr drop-nulls](docs/dfr_drop-nulls#_)                     | dataframe              | Drops null values in dataframe.                                                                                                       |\n| [dfr dtypes](docs/dfr_dtypes#_)                             | dataframe              | Show dataframe data types.                                                                                                            |\n| [dfr dummies](docs/dfr_dummies#_)                           | dataframe              | Creates a new dataframe with dummy variables.                                                                                         |\n| [dfr explode](docs/dfr_explode#_)                           | lazyframe              | Explodes a dataframe or creates a explode expression.                                                                                 |\n| [dfr expr-not](docs/dfr_expr-not#_)                         | expression             | creates a not expression                                                                                                              |\n| [dfr fetch](docs/dfr_fetch#_)                               | lazyframe              | collects the lazyframe to the selected rows.                                                                                          |\n| [dfr fill-nan](docs/dfr_fill-nan#_)                         | lazyframe              | Replaces NaN values with the given expression.                                                                                        |\n| [dfr fill-null](docs/dfr_fill-null#_)                       | lazyframe              | Replaces NULL values with the given expression.                                                                                       |\n| [dfr filter](docs/dfr_filter#_)                             | lazyframe              | Filter dataframe based in expression.                                                                                                 |\n| [dfr filter-with](docs/dfr_filter-with#_)                   | dataframe or lazyframe | Filters dataframe using a mask or expression as reference.                                                                            |\n| [dfr first](docs/dfr_first#_)                               | dataframe              | Show only the first number of rows or create a first expression                                                                       |\n| [dfr flatten](docs/dfr_flatten#_)                           | lazyframe              | An alias for dfr explode                                                                                                              |\n| [dfr get](docs/dfr_get#_)                                   | dataframe              | Creates dataframe with the selected columns.                                                                                          |\n| [dfr get-day](docs/dfr_get-day#_)                           | dataframe              | Gets day from date.                                                                                                                   |\n| [dfr get-hour](docs/dfr_get-hour#_)                         | dataframe              | Gets hour from date.                                                                                                                  |\n| [dfr get-minute](docs/dfr_get-minute#_)                     | dataframe              | Gets minute from date.                                                                                                                |\n| [dfr get-month](docs/dfr_get-month#_)                       | dataframe              | Gets month from date.                                                                                                                 |\n| [dfr get-nanosecond](docs/dfr_get-nanosecond#_)             | dataframe              | Gets nanosecond from date.                                                                                                            |\n| [dfr get-ordinal](docs/dfr_get-ordinal#_)                   | dataframe              | Gets ordinal from date.                                                                                                               |\n| [dfr get-second](docs/dfr_get-second#_)                     | dataframe              | Gets second from date.                                                                                                                |\n| [dfr get-week](docs/dfr_get-week#_)                         | dataframe              | Gets week from date.                                                                                                                  |\n| [dfr get-weekday](docs/dfr_get-weekday#_)                   | dataframe              | Gets weekday from date.                                                                                                               |\n| [dfr get-year](docs/dfr_get-year#_)                         | dataframe              | Gets year from date.                                                                                                                  |\n| [dfr group-by](docs/dfr_group-by#_)                         | lazyframe              | Creates a group-by object that can be used for other aggregations.                                                                    |\n| [dfr implode](docs/dfr_implode#_)                           | expression             | Aggregates a group to a Series                                                                                                        |\n| [dfr into-df](docs/dfr_into-df#_)                           | dataframe              | Converts a list, table or record into a dataframe.                                                                                    |\n| [dfr into-lazy](docs/dfr_into-lazy#_)                       | lazyframe              | Converts a dataframe into a lazy dataframe.                                                                                           |\n| [dfr into-nu](docs/dfr_into-nu#_)                           | dataframe              | Converts a dataframe or an expression into into nushell value for access and exploration.                                             |\n| [dfr is-duplicated](docs/dfr_is-duplicated#_)               | dataframe              | Creates mask indicating duplicated values.                                                                                            |\n| [dfr is-in](docs/dfr_is-in#_)                               | expression             | Creates an is-in expression.                                                                                                          |\n| [dfr is-not-null](docs/dfr_is-not-null#_)                   | dataframe              | Creates mask where value is not null.                                                                                                 |\n| [dfr is-null](docs/dfr_is-null#_)                           | dataframe              | Creates mask where value is null.                                                                                                     |\n| [dfr is-unique](docs/dfr_is-unique#_)                       | dataframe              | Creates mask indicating unique values.                                                                                                |\n| [dfr join](docs/dfr_join#_)                                 | lazyframe              | Joins a lazy frame with other lazy frame.                                                                                             |\n| [dfr last](docs/dfr_last#_)                                 | dataframe              | Creates new dataframe with tail rows or creates a last expression.                                                                    |\n| [dfr lit](docs/dfr_lit#_)                                   | expression             | Creates a literal expression.                                                                                                         |\n| [dfr lowercase](docs/dfr_lowercase#_)                       | dataframe              | Lowercase the strings in the column.                                                                                                  |\n| [dfr ls](docs/dfr_ls#_)                                     | dataframe              | Lists stored dataframes.                                                                                                              |\n| [dfr max](docs/dfr_max#_)                                   | expression             | Creates a max expression or aggregates columns to their max value                                                                     |\n| [dfr mean](docs/dfr_mean#_)                                 | expression             | Creates a mean expression for an aggregation or aggregates columns to their mean value                                                |\n| [dfr median](docs/dfr_median#_)                             | lazyframe              | Aggregates columns to their median value                                                                                              |\n| [dfr melt](docs/dfr_melt#_)                                 | dataframe              | Unpivot a DataFrame from wide to long format.                                                                                         |\n| [dfr min](docs/dfr_min#_)                                   | expression             | Creates a min expression or aggregates columns to their min value                                                                     |\n| [dfr n-unique](docs/dfr_n-unique#_)                         | dataframe              | Counts unique values.                                                                                                                 |\n| [dfr not](docs/dfr_not#_)                                   | dataframe              | Inverts boolean mask.                                                                                                                 |\n| [dfr open](docs/dfr_open#_)                                 | dataframe              | Opens CSV, JSON, JSON lines, arrow, avro, or parquet file to create dataframe.                                                        |\n| [dfr otherwise](docs/dfr_otherwise#_)                       | expression             | completes a when expression.                                                                                                          |\n| [dfr quantile](docs/dfr_quantile#_)                         | lazyframe              | Aggregates the columns to the selected quantile.                                                                                      |\n| [dfr query](docs/dfr_query#_)                               | dataframe              | Query dataframe using SQL. Note: The dataframe is always named 'df' in your query's from clause.                                      |\n| [dfr rename](docs/dfr_rename#_)                             | dataframe or lazyframe | Rename a dataframe column.                                                                                                            |\n| [dfr replace](docs/dfr_replace#_)                           | dataframe              | Replace the leftmost (sub)string by a regex pattern.                                                                                  |\n| [dfr replace-all](docs/dfr_replace-all#_)                   | dataframe              | Replace all (sub)strings by a regex pattern.                                                                                          |\n| [dfr reverse](docs/dfr_reverse#_)                           | lazyframe              | Reverses the LazyFrame                                                                                                                |\n| [dfr rolling](docs/dfr_rolling#_)                           | dataframe              | Rolling calculation for a series.                                                                                                     |\n| [dfr sample](docs/dfr_sample#_)                             | dataframe              | Create sample dataframe.                                                                                                              |\n| [dfr select](docs/dfr_select#_)                             | lazyframe              | Selects columns from lazyframe.                                                                                                       |\n| [dfr set](docs/dfr_set#_)                                   | dataframe              | Sets value where given mask is true.                                                                                                  |\n| [dfr set-with-idx](docs/dfr_set-with-idx#_)                 | dataframe              | Sets value in the given index.                                                                                                        |\n| [dfr shape](docs/dfr_shape#_)                               | dataframe              | Shows column and row size for a dataframe.                                                                                            |\n| [dfr shift](docs/dfr_shift#_)                               | dataframe or lazyframe | Shifts the values by a given period.                                                                                                  |\n| [dfr slice](docs/dfr_slice#_)                               | dataframe              | Creates new dataframe from a slice of rows.                                                                                           |\n| [dfr sort-by](docs/dfr_sort-by#_)                           | lazyframe              | sorts a lazy dataframe based on expression(s).                                                                                        |\n| [dfr std](docs/dfr_std#_)                                   | expression             | Creates a std expression for an aggregation of std value from columns in a dataframe                                                  |\n| [dfr str-lengths](docs/dfr_str-lengths#_)                   | dataframe              | Get lengths of all strings.                                                                                                           |\n| [dfr str-slice](docs/dfr_str-slice#_)                       | dataframe              | Slices the string from the start position until the selected length.                                                                  |\n| [dfr strftime](docs/dfr_strftime#_)                         | dataframe              | Formats date based on string rule.                                                                                                    |\n| [dfr sum](docs/dfr_sum#_)                                   | expression             | Creates a sum expression for an aggregation or aggregates columns to their sum value                                                  |\n| [dfr summary](docs/dfr_summary#_)                           | dataframe              | For a dataframe, produces descriptive statistics (summary statistics) for its numeric columns.                                        |\n| [dfr take](docs/dfr_take#_)                                 | dataframe              | Creates new dataframe using the given indices.                                                                                        |\n| [dfr to-arrow](docs/dfr_to-arrow#_)                         | dataframe              | Saves dataframe to arrow file.                                                                                                        |\n| [dfr to-avro](docs/dfr_to-avro#_)                           | dataframe              | Saves dataframe to avro file.                                                                                                         |\n| [dfr to-csv](docs/dfr_to-csv#_)                             | dataframe              | Saves dataframe to CSV file.                                                                                                          |\n| [dfr to-jsonl](docs/dfr_to-jsonl#_)                         | dataframe              | Saves dataframe to a JSON lines file.                                                                                                 |\n| [dfr to-parquet](docs/dfr_to-parquet#_)                     | dataframe              | Saves dataframe to parquet file.                                                                                                      |\n| [dfr unique](docs/dfr_unique#_)                             | dataframe or lazyframe | Returns unique values from a dataframe.                                                                                               |\n| [dfr uppercase](docs/dfr_uppercase#_)                       | dataframe              | Uppercase the strings in the column.                                                                                                  |\n| [dfr value-counts](docs/dfr_value-counts#_)                 | dataframe              | Returns a dataframe with the counts for unique values in series.                                                                      |\n| [dfr var](docs/dfr_var#_)                                   | expression             | Create a var expression for an aggregation                                                                                            |\n| [dfr when](docs/dfr_when#_)                                 | expression             | Creates and modifies a when expression.                                                                                               |\n| [dfr with-column](docs/dfr_with-column#_)                   | dataframe or lazyframe | Adds a series to the dataframe.                                                                                                       |\n| [do](docs/do#_)                                             | core                   | Run a closure, providing it with the pipeline input.                                                                                  |\n| [drop](docs/drop#_)                                         | filters                | Remove items/rows from the end of the input list/table. Counterpart of \\`skip\\`. Opposite of \\`last\\`.                                |\n| [drop column](docs/drop_column#_)                           | filters                | Remove N columns at the right-hand end of the input table. To remove columns by name, use \\`reject\\`.                                 |\n| [drop nth](docs/drop_nth#_)                                 | filters                | Drop the selected rows.                                                                                                               |\n| [du](docs/du#_)                                             | core                   | Find disk usage sizes of specified items.                                                                                             |\n| [each](docs/each#_)                                         | filters                | Run a closure on each row of the input list, creating a new list with the results.                                                    |\n| [each while](docs/each_while#_)                             | filters                | Run a block on each row of the input list until a null is found, then create a new list with the results.                             |\n| [echo](docs/echo#_)                                         | core                   | Returns its arguments, ignoring the piped-in value.                                                                                   |\n| [encode](docs/encode#_)                                     | strings                | Encode a string into bytes.                                                                                                           |\n| [encode base64](docs/encode_base64#_)                       | hash                   | Encode a string or binary value using Base64.                                                                                         |\n| [encode hex](docs/encode_hex#_)                             | formats                | Encode a binary value using hex.                                                                                                      |\n| [enter](docs/enter#_)                                       | shells                 | Enters a new shell at the given path.                                                                                                 |\n| [enumerate](docs/enumerate#_)                               | filters                | Enumerate the elements in a stream.                                                                                                   |\n| [error make](docs/error_make#_)                             | core                   | Create an error.                                                                                                                      |\n| [every](docs/every#_)                                       | filters                | Show (or skip) every n-th row, starting from the first one.                                                                           |\n| [exec](docs/exec#_)                                         | system                 | Execute a command, replacing the current process.                                                                                     |\n| [exit](docs/exit#_)                                         | shells                 | Exit Nu.                                                                                                                              |\n| [explain](docs/explain#_)                                   | debug                  | Explain closure contents.                                                                                                             |\n| [explore](docs/explore#_)                                   | viewers                | Explore acts as a table pager, just like \\`less\\` does for text.                                                                      |\n| [export](docs/export#_)                                     | core                   | Export definitions or environment variables from a module.                                                                            |\n| [export alias](docs/export_alias#_)                         | core                   | Alias a command (with optional flags) to a new name and export it from a module.                                                      |\n| [export const](docs/export_const#_)                         | core                   | Use parse-time constant from a module and export them from this module.                                                               |\n| [export def](docs/export_def#_)                             | core                   | Define a custom command and export it from a module.                                                                                  |\n| [export def-env](docs/export_def-env#_)                     | core                   | Define a custom command that participates in the environment and export it from a module.                                             |\n| [export extern](docs/export_extern#_)                       | core                   | Define an extern and export it from a module.                                                                                         |\n| [export extern-wrapped](docs/export_extern-wrapped#_)       | core                   | Define an extern with a custom code block and export it from a module.                                                                |\n| [export module](docs/export_module#_)                       | core                   | Export a custom module from a module.                                                                                                 |\n| [export use](docs/export_use#_)                             | core                   | Use definitions from a module and export them from this module.                                                                       |\n| [export-env](docs/export-env#_)                             | env                    | Run a block and preserve its environment in a current scope.                                                                          |\n| [extern](docs/extern#_)                                     | core                   | Define a signature for an external command.                                                                                           |\n| [extern-wrapped](docs/extern-wrapped#_)                     | core                   | Define a signature for an external command with a custom code block.                                                                  |\n| [fill](docs/fill#_)                                         | conversions            | Fill and Align.                                                                                                                       |\n| [filter](docs/filter#_)                                     | filters                | Filter values based on a predicate closure.                                                                                           |\n| [find](docs/find#_)                                         | filters                | Searches terms in the input.                                                                                                          |\n| [first](docs/first#_)                                       | filters                | Return only the first several rows of the input. Counterpart of \\`last\\`. Opposite of \\`skip\\`.                                       |\n| [flatten](docs/flatten#_)                                   | filters                | Flatten the table.                                                                                                                    |\n| [fmt](docs/fmt#_)                                           | conversions            | Format a number.                                                                                                                      |\n| [for](docs/for#_)                                           | core                   | Loop over a range.                                                                                                                    |\n| [format](docs/format#_)                                     | strings                | Format columns into a string using a simple pattern.                                                                                  |\n| [format date](docs/format_date#_)                           | date                   | Format a given date using a format string.                                                                                            |\n| [format duration](docs/format_duration#_)                   | strings                | Outputs duration with a specified unit of time.                                                                                       |\n| [format filesize](docs/format_filesize#_)                   | strings                | Converts a column of filesizes to some specified format.                                                                              |\n| [from](docs/from#_)                                         | formats                | Parse a string or binary data into structured data.                                                                                   |\n| [from csv](docs/from_csv#_)                                 | formats                | Parse text as .csv and create table.                                                                                                  |\n| [from eml](docs/from_eml#_)                                 | formats                | Parse text as .eml and create record.                                                                                                 |\n| [from ics](docs/from_ics#_)                                 | formats                | Parse text as .ics and create table.                                                                                                  |\n| [from ini](docs/from_ini#_)                                 | formats                | Parse text as .ini and create table.                                                                                                  |\n| [from json](docs/from_json#_)                               | formats                | Convert from json to structured data.                                                                                                 |\n| [from nuon](docs/from_nuon#_)                               | formats                | Convert from nuon to structured data.                                                                                                 |\n| [from ods](docs/from_ods#_)                                 | formats                | Parse OpenDocument Spreadsheet(.ods) data and create table.                                                                           |\n| [from ssv](docs/from_ssv#_)                                 | formats                | Parse text as space-separated values and create a table. The default minimum number of spaces counted as a separator is 2.            |\n| [from toml](docs/from_toml#_)                               | formats                | Parse text as .toml and create record.                                                                                                |\n| [from tsv](docs/from_tsv#_)                                 | formats                | Parse text as .tsv and create table.                                                                                                  |\n| [from url](docs/from_url#_)                                 | formats                | Parse url-encoded string as a record.                                                                                                 |\n| [from vcf](docs/from_vcf#_)                                 | formats                | Parse text as .vcf and create table.                                                                                                  |\n| [from xlsx](docs/from_xlsx#_)                               | formats                | Parse binary Excel(.xlsx) data and create table.                                                                                      |\n| [from xml](docs/from_xml#_)                                 | formats                | Parse text as .xml and create record.                                                                                                 |\n| [from yaml](docs/from_yaml#_)                               | formats                | Parse text as .yaml/.yml and create table.                                                                                            |\n| [from yml](docs/from_yml#_)                                 | formats                | Parse text as .yaml/.yml and create table.                                                                                            |\n| [g](docs/g#_)                                               | shells                 | Switch to a given shell, or list all shells if no given shell number.                                                                 |\n| [get](docs/get#_)                                           | filters                | Extract data using a cell path.                                                                                                       |\n| [glob](docs/glob#_)                                         | filesystem             | Creates a list of files and/or folders based on the glob pattern provided.                                                            |\n| [grid](docs/grid#_)                                         | viewers                | Renders the output to a textual terminal grid.                                                                                        |\n| [group](docs/group#_)                                       | filters                | Groups input into groups of \\`group_size\\`.                                                                                           |\n| [group-by](docs/group-by#_)                                 | filters                | Splits a list or table into groups, and returns a record containing those groups.                                                     |\n| [gstat](docs/gstat#_)                                       | prompt                 | Get the git status of a repo                                                                                                          |\n| [hash](docs/hash#_)                                         | hash                   | Apply hash function.                                                                                                                  |\n| [hash md5](docs/hash_md5#_)                                 | hash                   | Hash a value using the md5 hash algorithm                                                                                             |\n| [hash sha256](docs/hash_sha256#_)                           | hash                   | Hash a value using the sha256 hash algorithm                                                                                          |\n| [headers](docs/headers#_)                                   | filters                | Use the first row of the table as column names.                                                                                       |\n| [help](docs/help#_)                                         | core                   | Display help information about different parts of Nushell.                                                                            |\n| [help aliases](docs/help_aliases#_)                         | core                   | Show help on nushell aliases.                                                                                                         |\n| [help commands](docs/help_commands#_)                       | core                   | Show help on nushell commands.                                                                                                        |\n| [help externs](docs/help_externs#_)                         | core                   | Show help on nushell externs.                                                                                                         |\n| [help modules](docs/help_modules#_)                         | core                   | Show help on nushell modules.                                                                                                         |\n| [help operators](docs/help_operators#_)                     | core                   | Show help on nushell operators.                                                                                                       |\n| [hide](docs/hide#_)                                         | core                   | Hide definitions in the current scope.                                                                                                |\n| [hide-env](docs/hide-env#_)                                 | core                   | Hide environment variables in the current scope.                                                                                      |\n| [histogram](docs/histogram#_)                               | chart                  | Creates a new table with a histogram based on the column name passed in.                                                              |\n| [history](docs/history#_)                                   | misc                   | Get the command history.                                                                                                              |\n| [history session](docs/history_session#_)                   | misc                   | Get the command history session.                                                                                                      |\n| [http](docs/http#_)                                         | network                | Various commands for working with http methods.                                                                                       |\n| [http delete](docs/http_delete#_)                           | network                | Delete the specified resource.                                                                                                        |\n| [http get](docs/http_get#_)                                 | network                | Fetch the contents from a URL.                                                                                                        |\n| [http head](docs/http_head#_)                               | network                | Get the headers from a URL.                                                                                                           |\n| [http options](docs/http_options#_)                         | network                | Requests permitted communication options for a given URL.                                                                             |\n| [http patch](docs/http_patch#_)                             | network                | Patch a body to a URL.                                                                                                                |\n| [http post](docs/http_post#_)                               | network                | Post a body to a URL.                                                                                                                 |\n| [http put](docs/http_put#_)                                 | network                | Put a body to a URL.                                                                                                                  |\n| [if](docs/if#_)                                             | core                   | Conditionally run a block.                                                                                                            |\n| [ignore](docs/ignore#_)                                     | core                   | Ignore the output of the previous command in the pipeline.                                                                            |\n| [inc](docs/inc#_)                                           | default                | Increment a value or version. Optionally use the column of a table.                                                                   |\n| [input](docs/input#_)                                       | platform               | Get input from the user.                                                                                                              |\n| [input list](docs/input_list#_)                             | platform               | Interactive list selection.                                                                                                           |\n| [input listen](docs/input_listen#_)                         | platform               | Listen for user interface event                                                                                                       |\n| [insert](docs/insert#_)                                     | filters                | Insert a new column, using an expression or closure to create each row's values.                                                      |\n| [inspect](docs/inspect#_)                                   | debug                  | Inspect pipeline results while running a pipeline.                                                                                    |\n| [into](docs/into#_)                                         | conversions            | Commands to convert data from one type to another.                                                                                    |\n| [into binary](docs/into_binary#_)                           | conversions            | Convert value to a binary primitive.                                                                                                  |\n| [into bits](docs/into_bits#_)                               | conversions            | Convert value to a binary primitive.                                                                                                  |\n| [into bool](docs/into_bool#_)                               | conversions            | Convert value to boolean.                                                                                                             |\n| [into datetime](docs/into_datetime#_)                       | conversions            | Convert text or timestamp into a datetime.                                                                                            |\n| [into decimal](docs/into_decimal#_)                         | conversions            | deprecated: convert data into a floating point number.                                                                                |\n| [into duration](docs/into_duration#_)                       | conversions            | Convert value to duration.                                                                                                            |\n| [into filesize](docs/into_filesize#_)                       | conversions            | Convert value to filesize.                                                                                                            |\n| [into float](docs/into_float#_)                             | conversions            | Convert data into floating point number.                                                                                              |\n| [into int](docs/into_int#_)                                 | conversions            | Convert value to integer.                                                                                                             |\n| [into record](docs/into_record#_)                           | conversions            | Convert value to record.                                                                                                              |\n| [into sqlite](docs/into_sqlite#_)                           | conversions            | Convert table into a SQLite database.                                                                                                 |\n| [into string](docs/into_string#_)                           | conversions            | Convert value to string.                                                                                                              |\n| [is-admin](docs/is-admin#_)                                 | core                   | Check if nushell is running with administrator or root privileges.                                                                    |\n| [is-empty](docs/is-empty#_)                                 | filters                | Check for empty values.                                                                                                               |\n| [items](docs/items#_)                                       | filters                | Given a record, iterate on each pair of column name and associated value.                                                             |\n| [join](docs/join#_)                                         | filters                | Join two tables                                                                                                                       |\n| [keybindings](docs/keybindings#_)                           | platform               | Keybindings related commands.                                                                                                         |\n| [keybindings default](docs/keybindings_default#_)           | platform               | List default keybindings.                                                                                                             |\n| [keybindings list](docs/keybindings_list#_)                 | platform               | List available options that can be used to create keybindings.                                                                        |\n| [keybindings listen](docs/keybindings_listen#_)             | platform               | Get input from the user.                                                                                                              |\n| [kill](docs/kill#_)                                         | platform               | Kill a process using the process id.                                                                                                  |\n| [last](docs/last#_)                                         | filters                | Return only the last several rows of the input. Counterpart of \\`first\\`. Opposite of \\`drop\\`.                                       |\n| [lazy make](docs/lazy_make#_)                               | core                   | Create a lazy record.                                                                                                                 |\n| [length](docs/length#_)                                     | filters                | Count the number of items in an input list or rows in a table.                                                                        |\n| [let](docs/let#_)                                           | core                   | Create a variable and give it a value.                                                                                                |\n| [let-env](docs/let-env#_)                                   | removed                | \\`let-env FOO = ...\\` has been removed, use \\`\\$env.FOO = ...\\` instead.                                                              |\n| [lines](docs/lines#_)                                       | filters                | Converts input to lines.                                                                                                              |\n| [load-env](docs/load-env#_)                                 | filesystem             | Loads an environment update from a record.                                                                                            |\n| [loop](docs/loop#_)                                         | core                   | Run a block in a loop.                                                                                                                |\n| [ls](docs/ls#_)                                             | filesystem             | List the filenames, sizes, and modification times of items in a directory.                                                            |\n| [match](docs/match#_)                                       | core                   | Conditionally run a block on a matched value.                                                                                         |\n| [math](docs/math#_)                                         | math                   | Use mathematical functions as aggregate functions on a list of numbers or tables.                                                     |\n| [math abs](docs/math_abs#_)                                 | math                   | Returns the absolute value of a number.                                                                                               |\n| [math arccos](docs/math_arccos#_)                           | math                   | Returns the arccosine of the number.                                                                                                  |\n| [math arccosh](docs/math_arccosh#_)                         | math                   | Returns the inverse of the hyperbolic cosine function.                                                                                |\n| [math arcsin](docs/math_arcsin#_)                           | math                   | Returns the arcsine of the number.                                                                                                    |\n| [math arcsinh](docs/math_arcsinh#_)                         | math                   | Returns the inverse of the hyperbolic sine function.                                                                                  |\n| [math arctan](docs/math_arctan#_)                           | math                   | Returns the arctangent of the number.                                                                                                 |\n| [math arctanh](docs/math_arctanh#_)                         | math                   | Returns the inverse of the hyperbolic tangent function.                                                                               |\n| [math avg](docs/math_avg#_)                                 | math                   | Returns the average of a list of numbers.                                                                                             |\n| [math ceil](docs/math_ceil#_)                               | math                   | Returns the ceil of a number (smallest integer greater than or equal to that number).                                                 |\n| [math cos](docs/math_cos#_)                                 | math                   | Returns the cosine of the number.                                                                                                     |\n| [math cosh](docs/math_cosh#_)                               | math                   | Returns the hyperbolic cosine of the number.                                                                                          |\n| [math exp](docs/math_exp#_)                                 | math                   | Returns e raised to the power of x.                                                                                                   |\n| [math floor](docs/math_floor#_)                             | math                   | Returns the floor of a number (largest integer less than or equal to that number).                                                    |\n| [math ln](docs/math_ln#_)                                   | math                   | Returns the natural logarithm. Base: (math e).                                                                                        |\n| [math log](docs/math_log#_)                                 | math                   | Returns the logarithm for an arbitrary base.                                                                                          |\n| [math max](docs/math_max#_)                                 | math                   | Returns the maximum of a list of values, or of columns in a table.                                                                    |\n| [math median](docs/math_median#_)                           | math                   | Computes the median of a list of numbers.                                                                                             |\n| [math min](docs/math_min#_)                                 | math                   | Finds the minimum within a list of values or tables.                                                                                  |\n| [math mode](docs/math_mode#_)                               | math                   | Returns the most frequent element(s) from a list of numbers or tables.                                                                |\n| [math product](docs/math_product#_)                         | math                   | Returns the product of a list of numbers or the products of each column of a table.                                                   |\n| [math round](docs/math_round#_)                             | math                   | Returns the input number rounded to the specified precision.                                                                          |\n| [math sin](docs/math_sin#_)                                 | math                   | Returns the sine of the number.                                                                                                       |\n| [math sinh](docs/math_sinh#_)                               | math                   | Returns the hyperbolic sine of the number.                                                                                            |\n| [math sqrt](docs/math_sqrt#_)                               | math                   | Returns the square root of the input number.                                                                                          |\n| [math stddev](docs/math_stddev#_)                           | math                   | Returns the standard deviation of a list of numbers, or of each column in a table.                                                    |\n| [math sum](docs/math_sum#_)                                 | math                   | Returns the sum of a list of numbers or of each column in a table.                                                                    |\n| [math tan](docs/math_tan#_)                                 | math                   | Returns the tangent of the number.                                                                                                    |\n| [math tanh](docs/math_tanh#_)                               | math                   | Returns the hyperbolic tangent of the number.                                                                                         |\n| [math variance](docs/math_variance#_)                       | math                   | Returns the variance of a list of numbers or of each column in a table.                                                               |\n| [merge](docs/merge#_)                                       | filters                | Merge the input with a record or table, overwriting values in matching columns.                                                       |\n| [metadata](docs/metadata#_)                                 | debug                  | Get the metadata for items in the stream.                                                                                             |\n| [mkdir](docs/mkdir#_)                                       | filesystem             | Make directories, creates intermediary directories as required.                                                                       |\n| [module](docs/module#_)                                     | core                   | Define a custom module.                                                                                                               |\n| [move](docs/move#_)                                         | filters                | Move columns before or after other columns.                                                                                           |\n| [mut](docs/mut#_)                                           | core                   | Create a mutable variable and give it a value.                                                                                        |\n| [mv](docs/mv#_)                                             | filesystem             | Move files or directories.                                                                                                            |\n| [n](docs/n#_)                                               | shells                 | Switch to the next shell.                                                                                                             |\n| [nu-check](docs/nu-check#_)                                 | strings                | Validate and parse input content.                                                                                                     |\n| [nu-highlight](docs/nu-highlight#_)                         | strings                | Syntax highlight the input string.                                                                                                    |\n| [open](docs/open#_)                                         | filesystem             | Load a file into a cell, converting to table if possible (avoid by appending '--raw').                                                |\n| [overlay](docs/overlay#_)                                   | core                   | Commands for manipulating overlays.                                                                                                   |\n| [overlay hide](docs/overlay_hide#_)                         | core                   | Hide an active overlay.                                                                                                               |\n| [overlay list](docs/overlay_list#_)                         | core                   | List all active overlays.                                                                                                             |\n| [overlay new](docs/overlay_new#_)                           | core                   | Create an empty overlay.                                                                                                              |\n| [overlay use](docs/overlay_use#_)                           | core                   | Use definitions from a module as an overlay.                                                                                          |\n| [p](docs/p#_)                                               | shells                 | Switch to the previous shell.                                                                                                         |\n| [par-each](docs/par-each#_)                                 | filters                | Run a closure on each row of the input list in parallel, creating a new list with the results.                                        |\n| [parse](docs/parse#_)                                       | strings                | Parse columns from string data using a simple pattern.                                                                                |\n| [path](docs/path#_)                                         | path                   | Explore and manipulate paths.                                                                                                         |\n| [path basename](docs/path_basename#_)                       | path                   | Get the final component of a path.                                                                                                    |\n| [path dirname](docs/path_dirname#_)                         | path                   | Get the parent directory of a path.                                                                                                   |\n| [path exists](docs/path_exists#_)                           | path                   | Check whether a path exists.                                                                                                          |\n| [path expand](docs/path_expand#_)                           | path                   | Try to expand a path to its absolute form.                                                                                            |\n| [path join](docs/path_join#_)                               | path                   | Join a structured path or a list of path parts.                                                                                       |\n| [path parse](docs/path_parse#_)                             | path                   | Convert a path into structured data.                                                                                                  |\n| [path relative-to](docs/path_relative-to#_)                 | path                   | Express a path as relative to another path.                                                                                           |\n| [path split](docs/path_split#_)                             | path                   | Split a path into a list based on the system's path separator.                                                                        |\n| [path type](docs/path_type#_)                               | path                   | Get the type of the object a path refers to (e.g., file, dir, symlink).                                                               |\n| [port](docs/port#_)                                         | network                | Get a free port from system.                                                                                                          |\n| [prepend](docs/prepend#_)                                   | filters                | Prepend any number of rows to a table.                                                                                                |\n| [print](docs/print#_)                                       | strings                | Print the given values to stdout.                                                                                                     |\n| [profile](docs/profile#_)                                   | debug                  | Profile each pipeline element in a closure.                                                                                           |\n| [ps](docs/ps#_)                                             | system                 | View information about system processes.                                                                                              |\n| [query](docs/query#_)                                       | filters                | Show all the query commands                                                                                                           |\n| [query db](docs/query_db#_)                                 | database               | Query a database using SQL.                                                                                                           |\n| [query json](docs/query_json#_)                             | filters                | execute json query on json file (open --raw \\<file\\> \\| query json 'query string')                                                    |\n| [query web](docs/query_web#_)                               | network                | execute selector query on html/web                                                                                                    |\n| [query xml](docs/query_xml#_)                               | filters                | execute xpath query on xml                                                                                                            |\n| [random](docs/random#_)                                     | random                 | Generate a random value.                                                                                                              |\n| [random bool](docs/random_bool#_)                           | random                 | Generate a random boolean value.                                                                                                      |\n| [random chars](docs/random_chars#_)                         | random                 | Generate random chars.                                                                                                                |\n| [random decimal](docs/random_decimal#_)                     | random                 | deprecated: Generate a random float within a range \\[min..max\\].                                                                      |\n| [random dice](docs/random_dice#_)                           | random                 | Generate a random dice roll.                                                                                                          |\n| [random float](docs/random_float#_)                         | random                 | Generate a random float within a range \\[min..max\\].                                                                                  |\n| [random integer](docs/random_integer#_)                     | random                 | Generate a random integer \\[min..max\\].                                                                                               |\n| [random uuid](docs/random_uuid#_)                           | random                 | Generate a random uuid4 string.                                                                                                       |\n| [range](docs/range#_)                                       | filters                | Return only the selected rows.                                                                                                        |\n| [reduce](docs/reduce#_)                                     | filters                | Aggregate a list to a single value using an accumulator closure.                                                                      |\n| [register](docs/register#_)                                 | core                   | Register a plugin.                                                                                                                    |\n| [registry query](docs/registry_query#_)                     | system                 | Query the Windows registry.                                                                                                           |\n| [reject](docs/reject#_)                                     | filters                | Remove the given columns or rows from the table. Opposite of \\`select\\`.                                                              |\n| [rename](docs/rename#_)                                     | filters                | Creates a new table with columns renamed.                                                                                             |\n| [return](docs/return#_)                                     | core                   | Return early from a function.                                                                                                         |\n| [reverse](docs/reverse#_)                                   | filters                | Reverses the input list or table.                                                                                                     |\n| [rm](docs/rm#_)                                             | filesystem             | Remove files and directories.                                                                                                         |\n| [roll](docs/roll#_)                                         | filters                | Rolling commands for tables.                                                                                                          |\n| [roll down](docs/roll_down#_)                               | filters                | Roll table rows down.                                                                                                                 |\n| [roll left](docs/roll_left#_)                               | filters                | Roll record or table columns left.                                                                                                    |\n| [roll right](docs/roll_right#_)                             | filters                | Roll table columns right.                                                                                                             |\n| [roll up](docs/roll_up#_)                                   | filters                | Roll table rows up.                                                                                                                   |\n| [rotate](docs/rotate#_)                                     | filters                | Rotates a table or record clockwise (default) or counter-clockwise (use --ccw flag).                                                  |\n| [run-external](docs/run-external#_)                         | system                 | Runs external command.                                                                                                                |\n| [save](docs/save#_)                                         | filesystem             | Save a file.                                                                                                                          |\n| [schema](docs/schema#_)                                     | database               | Show the schema of a SQLite database.                                                                                                 |\n| [scope](docs/scope#_)                                       | core                   | Commands for getting info about what is in scope.                                                                                     |\n| [scope aliases](docs/scope_aliases#_)                       | filters                | Output info on the aliases in the current scope.                                                                                      |\n| [scope commands](docs/scope_commands#_)                     | filters                | Output info on the commands in the current scope.                                                                                     |\n| [scope engine-stats](docs/scope_engine-stats#_)             | filters                | Output stats on the engine in the current state.                                                                                      |\n| [scope externs](docs/scope_externs#_)                       | filters                | Output info on the known externals in the current scope.                                                                              |\n| [scope modules](docs/scope_modules#_)                       | filters                | Output info on the modules in the current scope.                                                                                      |\n| [scope variables](docs/scope_variables#_)                   | filters                | Output info on the variables in the current scope.                                                                                    |\n| [select](docs/select#_)                                     | filters                | Select only these columns or rows from the input. Opposite of \\`reject\\`.                                                             |\n| [seq](docs/seq#_)                                           | generators             | Output sequences of numbers.                                                                                                          |\n| [seq char](docs/seq_char#_)                                 | generators             | Print a sequence of ASCII characters.                                                                                                 |\n| [seq date](docs/seq_date#_)                                 | generators             | Print sequences of dates.                                                                                                             |\n| [shells](docs/shells#_)                                     | shells                 | Lists all open shells.                                                                                                                |\n| [shuffle](docs/shuffle#_)                                   | filters                | Shuffle rows randomly.                                                                                                                |\n| [size](docs/size#_)                                         | strings                | Gather word count statistics on the text.                                                                                             |\n| [skip](docs/skip#_)                                         | filters                | Skip the first several rows of the input. Counterpart of \\`drop\\`. Opposite of \\`first\\`.                                             |\n| [skip until](docs/skip_until#_)                             | filters                | Skip elements of the input until a predicate is true.                                                                                 |\n| [skip while](docs/skip_while#_)                             | filters                | Skip elements of the input while a predicate is true.                                                                                 |\n| [sleep](docs/sleep#_)                                       | platform               | Delay for a specified amount of time.                                                                                                 |\n| [sort](docs/sort#_)                                         | filters                | Sort in increasing order.                                                                                                             |\n| [sort-by](docs/sort-by#_)                                   | filters                | Sort by the given columns, in increasing order.                                                                                       |\n| [source](docs/source#_)                                     | core                   | Runs a script file in the current context.                                                                                            |\n| [source-env](docs/source-env#_)                             | core                   | Source the environment from a source file into the current environment.                                                               |\n| [split](docs/split#_)                                       | strings                | Split contents across desired subcommand (like row, column) via the separator.                                                        |\n| [split chars](docs/split_chars#_)                           | strings                | Split a string into a list of characters.                                                                                             |\n| [split column](docs/split_column#_)                         | strings                | Split a string into multiple columns using a separator.                                                                               |\n| [split list](docs/split_list#_)                             | filters                | Split a list into multiple lists using a separator.                                                                                   |\n| [split row](docs/split_row#_)                               | strings                | Split a string into multiple rows using a separator.                                                                                  |\n| [split words](docs/split_words#_)                           | strings                | Split a string's words into separate rows.                                                                                            |\n| [split-by](docs/split-by#_)                                 | filters                | Create a new table split.                                                                                                             |\n| [start](docs/start#_)                                       | filesystem             | Open a folder, file or website in the default application or viewer.                                                                  |\n| [str](docs/str#_)                                           | strings                | Various commands for working with string data.                                                                                        |\n| [str camel-case](docs/str_camel-case#_)                     | strings                | Convert a string to camelCase.                                                                                                        |\n| [str capitalize](docs/str_capitalize#_)                     | strings                | Capitalize first letter of text.                                                                                                      |\n| [str contains](docs/str_contains#_)                         | strings                | Checks if string input contains a substring.                                                                                          |\n| [str distance](docs/str_distance#_)                         | strings                | Compare two strings and return the edit distance/Levenshtein distance.                                                                |\n| [str downcase](docs/str_downcase#_)                         | strings                | Make text lowercase.                                                                                                                  |\n| [str ends-with](docs/str_ends-with#_)                       | strings                | Check if an input ends with a string.                                                                                                 |\n| [str expand](docs/str_expand#_)                             | strings                | Generates all possible combinations defined in brace expansion syntax.                                                                |\n| [str index-of](docs/str_index-of#_)                         | strings                | Returns start index of first occurrence of string in input, or -1 if no match.                                                        |\n| [str join](docs/str_join#_)                                 | strings                | Concatenate multiple strings into a single string, with an optional separator between each.                                           |\n| [str kebab-case](docs/str_kebab-case#_)                     | strings                | Convert a string to kebab-case.                                                                                                       |\n| [str length](docs/str_length#_)                             | strings                | Output the length of any strings in the pipeline.                                                                                     |\n| [str pascal-case](docs/str_pascal-case#_)                   | strings                | Convert a string to PascalCase.                                                                                                       |\n| [str replace](docs/str_replace#_)                           | strings                | Find and replace text.                                                                                                                |\n| [str reverse](docs/str_reverse#_)                           | strings                | Reverse every string in the pipeline.                                                                                                 |\n| [str screaming-snake-case](docs/str_screaming-snake-case#_) | strings                | Convert a string to SCREAMING_SNAKE_CASE.                                                                                             |\n| [str snake-case](docs/str_snake-case#_)                     | strings                | Convert a string to snake_case.                                                                                                       |\n| [str starts-with](docs/str_starts-with#_)                   | strings                | Check if an input starts with a string.                                                                                               |\n| [str substring](docs/str_substring#_)                       | strings                | Get part of a string. Note that the start is included but the end is excluded, and that the first character of a string is index 0.   |\n| [str title-case](docs/str_title-case#_)                     | strings                | Convert a string to Title Case.                                                                                                       |\n| [str trim](docs/str_trim#_)                                 | strings                | Trim whitespace or specific character.                                                                                                |\n| [str upcase](docs/str_upcase#_)                             | strings                | Make text uppercase.                                                                                                                  |\n| [sys](docs/sys#_)                                           | system                 | View information about the system.                                                                                                    |\n| [table](docs/table#_)                                       | viewers                | Render the table.                                                                                                                     |\n| [take](docs/take#_)                                         | filters                | Take only the first n elements of a list, or the first n bytes of a binary value.                                                     |\n| [take until](docs/take_until#_)                             | filters                | Take elements of the input until a predicate is true.                                                                                 |\n| [take while](docs/take_while#_)                             | filters                | Take elements of the input while a predicate is true.                                                                                 |\n| [term size](docs/term_size#_)                               | platform               | Returns a record containing the number of columns (width) and rows (height) of the terminal.                                          |\n| [timeit](docs/timeit#_)                                     | debug                  | Time the running time of a block.                                                                                                     |\n| [to](docs/to#_)                                             | formats                | Translate structured data to a format.                                                                                                |\n| [to csv](docs/to_csv#_)                                     | formats                | Convert table into .csv text .                                                                                                        |\n| [to html](docs/to_html#_)                                   | formats                | Convert table into simple HTML.                                                                                                       |\n| [to json](docs/to_json#_)                                   | formats                | Converts table data into JSON text.                                                                                                   |\n| [to md](docs/to_md#_)                                       | formats                | Convert table into simple Markdown.                                                                                                   |\n| [to nuon](docs/to_nuon#_)                                   | formats                | Converts table data into Nuon (Nushell Object Notation) text.                                                                         |\n| [to text](docs/to_text#_)                                   | formats                | Converts data into simple text.                                                                                                       |\n| [to toml](docs/to_toml#_)                                   | formats                | Convert record into .toml text.                                                                                                       |\n| [to tsv](docs/to_tsv#_)                                     | formats                | Convert table into .tsv text.                                                                                                         |\n| [to xml](docs/to_xml#_)                                     | formats                | Convert special record structure into .xml text.                                                                                      |\n| [to yaml](docs/to_yaml#_)                                   | formats                | Convert table into .yaml/.yml text.                                                                                                   |\n| [touch](docs/touch#_)                                       | filesystem             | Creates one or more files.                                                                                                            |\n| [transpose](docs/transpose#_)                               | filters                | Transposes the table contents so rows become columns and columns become rows.                                                         |\n| [try](docs/try#_)                                           | core                   | Try to run a block, if it fails optionally run a catch block.                                                                         |\n| [tutor](docs/tutor#_)                                       | misc                   | Run the tutorial. To begin, run: tutor.                                                                                               |\n| [ucp](docs/ucp#_)                                           | filesystem             | Copy files using uutils/coreutils cp.                                                                                                 |\n| [uniq](docs/uniq#_)                                         | filters                | Return the distinct values in the input.                                                                                              |\n| [uniq-by](docs/uniq-by#_)                                   | filters                | Return the distinct values in the input by the given column(s).                                                                       |\n| [update](docs/update#_)                                     | filters                | Update an existing column to have a new value.                                                                                        |\n| [update cells](docs/update_cells#_)                         | filters                | Update the table cells.                                                                                                               |\n| [upsert](docs/upsert#_)                                     | filters                | Update an existing column to have a new value, or insert a new column.                                                                |\n| [url](docs/url#_)                                           | network                | Various commands for working with URLs.                                                                                               |\n| [url build-query](docs/url_build-query#_)                   | network                | Converts record or table into query string applying percent-encoding.                                                                 |\n| [url encode](docs/url_encode#_)                             | strings                | Converts a string to a percent encoded web safe string.                                                                               |\n| [url join](docs/url_join#_)                                 | network                | Converts a record to url.                                                                                                             |\n| [url parse](docs/url_parse#_)                               | network                | Parses a url.                                                                                                                         |\n| [use](docs/use#_)                                           | core                   | Use definitions from a module, making them available in your shell.                                                                   |\n| [values](docs/values#_)                                     | filters                | Given a record or table, produce a list of its columns' values.                                                                       |\n| [version](docs/version#_)                                   | core                   | Display Nu version, and its build configuration.                                                                                      |\n| [view](docs/view#_)                                         | debug                  | Various commands for viewing debug information.                                                                                       |\n| [view files](docs/view_files#_)                             | debug                  | View the files registered in nushell's EngineState memory.                                                                            |\n| [view source](docs/view_source#_)                           | debug                  | View a block, module, or a definition.                                                                                                |\n| [view span](docs/view_span#_)                               | debug                  | View the contents of a span.                                                                                                          |\n| [watch](docs/watch#_)                                       | filesystem             | Watch for file changes and execute Nu code when they happen.                                                                          |\n| [where](docs/where#_)                                       | filters                | Filter values based on a row condition.                                                                                               |\n| [which](docs/which#_)                                       | system                 | Finds a program file, alias or custom command.                                                                                        |\n| [while](docs/while#_)                                       | core                   | Conditionally run a block in a loop.                                                                                                  |\n| [window](docs/window#_)                                     | filters                | Creates a sliding window of \\`window_size\\` that slide by n rows/elements across input.                                               |\n| [with-env](docs/with-env#_)                                 | env                    | Runs a block with an environment variable set.                                                                                        |\n| [wrap](docs/wrap#_)                                         | filters                | Wrap the value into a column.                                                                                                         |\n| [zip](docs/zip#_)                                           | filters                | Combine a stream with the input.                                                                                                      |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/](https://www.nushell.sh/commands/)"
- name: commandline
  summary: '> commandline {flags} (cmd)'
  description: "# `commandline` for core\n\nView or modify the current command line input buffer.\n\n## Signature\n\n`> commandline {flags} (cmd)`\n\n## Flags\n\n- `--cursor, -c`: Set or get the current cursor position\n- `--cursor-end, -e`: Set the current cursor position to the end of the buffer\n- `--append, -a`: appends the string to the end of the buffer\n- `--insert, -i`: inserts the string into the buffer at the cursor position\n- `--replace, -r`: replaces the current contents of the buffer (default)\n\n## Parameters\n\n- `cmd`: the string to perform the operation with\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n| string  | string  |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/commandline.html](https://www.nushell.sh/commands/docs/commandline.html)"
- name: compact
  summary: '> compact {flags} ...rest'
  description: "# `compact` for filters\n\nCreates a table with non-empty rows.\n\n## Signature\n\n`> compact {flags} ...rest`\n\n## Parameters\n\n- `...rest`: the columns to compact from the table\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nFilter out all records where 'Hello' is null (returns nothing)\n\n``` shiki\n> [[\"Hello\"\"World\"]; [null3]] |compactHello\n╭────────────╮\n│emptylist│\n╰────────────╯\n```\n\nFilter out all records where 'World' is null (Returns the table)\n\n``` shiki\n> [[\"Hello\"\"World\"]; [null3]] |compactWorld\n╭───┬───────┬───────╮\n│# │ Hello │ World │\n├───┼───────┼───────┤\n│0││3│\n╰───┴───────┴───────╯\n```\n\nFilter out all instances of nothing from a list (Returns \\[1,2\\])\n\n``` shiki\n> [1, null, 2] |compact\n╭───┬───╮\n│0│1│\n│1│2│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/compact.html](https://www.nushell.sh/commands/docs/compact.html)"
- name: complete
  summary: '> complete {flags}'
  description: "# `complete` for system\n\nCapture the outputs and exit code from an external piped in command in a nushell table.\n\n## Signature\n\n`> complete {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | record |\n\n## Examples\n\nRun the external command to completion, capturing stdout and exit_code\n\n``` shiki\n> ^externalarg1|complete\n```\n\nRun external command to completion, capturing, stdout, stderr and exit_code\n\n``` shiki\n>do { ^externalarg1 } |complete\n```\n\n## Notes\n\nIn order to capture stdout, stderr, and exit_code, externally piped in commands need to be wrapped with `do`\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/complete.html](https://www.nushell.sh/commands/docs/complete.html)"
- name: config
  summary: '> config {flags}'
  description: "# `config` for env\n\nEdit nushell configuration files.\n\n## Signature\n\n`> config {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                             | type    | usage                                                                                                                                 |\n|----------------------------------|---------|---------------------------------------------------------------------------------------------------------------------------------------|\n| [`config env`](config_env#_)     | Builtin | Edit nu environment configurations.                                                                                                   |\n| [`config nu`](config_nu#_)       | Builtin | Edit nu configurations.                                                                                                               |\n| [`config reset`](config_reset#_) | Builtin | Reset nushell environment configurations to default, and saves old config files in the config location as oldconfig.nu and oldenv.nu. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/config.html](https://www.nushell.sh/commands/docs/config.html)"
- name: config env
  summary: '> config env {flags}'
  description: "# `config env` for env\n\nEdit nu environment configurations.\n\n## Signature\n\n`> config env {flags} `\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nallow user to open and update nu env\n\n``` shiki\n>config env\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/config_env.html](https://www.nushell.sh/commands/docs/config_env.html)"
- name: config nu
  summary: '> config nu {flags}'
  description: "# `config nu` for env\n\nEdit nu configurations.\n\n## Signature\n\n`> config nu {flags} `\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nallow user to open and update nu config\n\n``` shiki\n>config nu\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/config_nu.html](https://www.nushell.sh/commands/docs/config_nu.html)"
- name: config reset
  summary: '> config reset {flags}'
  description: "# `config reset` for env\n\nReset nushell environment configurations to default, and saves old config files in the config location as oldconfig.nu and oldenv.nu.\n\n## Signature\n\n`> config reset {flags} `\n\n## Flags\n\n- `--nu, -n`: reset only nu config, config.nu\n- `--env, -e`: reset only env config, env.nu\n- `--without-backup, -w`: do not make a backup\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nreset nushell configuration files\n\n``` shiki\n>config reset\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/config_reset.html](https://www.nushell.sh/commands/docs/config_reset.html)"
- name: const
  summary: '> const {flags} (const_name) (initial_value)'
  description: "# `const` for core\n\nCreate a parse-time constant.\n\n## Signature\n\n`> const {flags} (const_name) (initial_value)`\n\n## Parameters\n\n- `const_name`: constant name\n- `initial_value`: equals sign followed by constant value\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nCreate a new parse-time constant.\n\n``` shiki\n>constx=10\n```\n\nCreate a composite constant value\n\n``` shiki\n>constx= { a:10, b:20 }\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/const.html](https://www.nushell.sh/commands/docs/const.html)"
- name: continue
  summary: '> continue {flags}'
  description: "# `continue` for core\n\nContinue a loop from the next iteration.\n\n## Signature\n\n`> continue {flags} `\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nContinue a loop from the next iteration\n\n``` shiki\n>foriin1..10 { if$i==5 { continue };print$i}\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/continue.html](https://www.nushell.sh/commands/docs/continue.html)"
- name: Conversions
  summary: ''
  description: "# Conversions\n\n| Command                                  | Description                                            |\n|------------------------------------------|--------------------------------------------------------|\n| [fill](../docs/fill#_)                   | Fill and Align.                                        |\n| [fmt](../docs/fmt#_)                     | Format a number.                                       |\n| [into](../docs/into#_)                   | Commands to convert data from one type to another.     |\n| [into binary](../docs/into_binary#_)     | Convert value to a binary primitive.                   |\n| [into bits](../docs/into_bits#_)         | Convert value to a binary primitive.                   |\n| [into bool](../docs/into_bool#_)         | Convert value to boolean.                              |\n| [into datetime](../docs/into_datetime#_) | Convert text or timestamp into a datetime.             |\n| [into decimal](../docs/into_decimal#_)   | deprecated: convert data into a floating point number. |\n| [into duration](../docs/into_duration#_) | Convert value to duration.                             |\n| [into filesize](../docs/into_filesize#_) | Convert value to filesize.                             |\n| [into float](../docs/into_float#_)       | Convert data into floating point number.               |\n| [into int](../docs/into_int#_)           | Convert value to integer.                              |\n| [into record](../docs/into_record#_)     | Convert value to record.                               |\n| [into sqlite](../docs/into_sqlite#_)     | Convert table into a SQLite database.                  |\n| [into string](../docs/into_string#_)     | Convert value to string.                               |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/conversions.html](https://www.nushell.sh/commands/categories/conversions.html)"
- name: Core
  summary: ''
  description: "# Core\n\n| Command                                                  | Description                                                                               |\n|----------------------------------------------------------|-------------------------------------------------------------------------------------------|\n| [alias](../docs/alias#_)                                 | Alias a command (with optional flags) to a new name.                                      |\n| [break](../docs/break#_)                                 | Break a loop.                                                                             |\n| [commandline](../docs/commandline#_)                     | View or modify the current command line input buffer.                                     |\n| [const](../docs/const#_)                                 | Create a parse-time constant.                                                             |\n| [continue](../docs/continue#_)                           | Continue a loop from the next iteration.                                                  |\n| [def](../docs/def#_)                                     | Define a custom command.                                                                  |\n| [def-env](../docs/def-env#_)                             | Define a custom command, which participates in the caller environment.                    |\n| [describe](../docs/describe#_)                           | Describe the type and structure of the value(s) piped in.                                 |\n| [do](../docs/do#_)                                       | Run a closure, providing it with the pipeline input.                                      |\n| [du](../docs/du#_)                                       | Find disk usage sizes of specified items.                                                 |\n| [echo](../docs/echo#_)                                   | Returns its arguments, ignoring the piped-in value.                                       |\n| [error make](../docs/error_make#_)                       | Create an error.                                                                          |\n| [export](../docs/export#_)                               | Export definitions or environment variables from a module.                                |\n| [export alias](../docs/export_alias#_)                   | Alias a command (with optional flags) to a new name and export it from a module.          |\n| [export const](../docs/export_const#_)                   | Use parse-time constant from a module and export them from this module.                   |\n| [export def](../docs/export_def#_)                       | Define a custom command and export it from a module.                                      |\n| [export def-env](../docs/export_def-env#_)               | Define a custom command that participates in the environment and export it from a module. |\n| [export extern](../docs/export_extern#_)                 | Define an extern and export it from a module.                                             |\n| [export extern-wrapped](../docs/export_extern-wrapped#_) | Define an extern with a custom code block and export it from a module.                    |\n| [export module](../docs/export_module#_)                 | Export a custom module from a module.                                                     |\n| [export use](../docs/export_use#_)                       | Use definitions from a module and export them from this module.                           |\n| [extern](../docs/extern#_)                               | Define a signature for an external command.                                               |\n| [extern-wrapped](../docs/extern-wrapped#_)               | Define a signature for an external command with a custom code block.                      |\n| [for](../docs/for#_)                                     | Loop over a range.                                                                        |\n| [help](../docs/help#_)                                   | Display help information about different parts of Nushell.                                |\n| [help aliases](../docs/help_aliases#_)                   | Show help on nushell aliases.                                                             |\n| [help commands](../docs/help_commands#_)                 | Show help on nushell commands.                                                            |\n| [help externs](../docs/help_externs#_)                   | Show help on nushell externs.                                                             |\n| [help modules](../docs/help_modules#_)                   | Show help on nushell modules.                                                             |\n| [help operators](../docs/help_operators#_)               | Show help on nushell operators.                                                           |\n| [hide](../docs/hide#_)                                   | Hide definitions in the current scope.                                                    |\n| [hide-env](../docs/hide-env#_)                           | Hide environment variables in the current scope.                                          |\n| [if](../docs/if#_)                                       | Conditionally run a block.                                                                |\n| [ignore](../docs/ignore#_)                               | Ignore the output of the previous command in the pipeline.                                |\n| [is-admin](../docs/is-admin#_)                           | Check if nushell is running with administrator or root privileges.                        |\n| [lazy make](../docs/lazy_make#_)                         | Create a lazy record.                                                                     |\n| [let](../docs/let#_)                                     | Create a variable and give it a value.                                                    |\n| [loop](../docs/loop#_)                                   | Run a block in a loop.                                                                    |\n| [match](../docs/match#_)                                 | Conditionally run a block on a matched value.                                             |\n| [module](../docs/module#_)                               | Define a custom module.                                                                   |\n| [mut](../docs/mut#_)                                     | Create a mutable variable and give it a value.                                            |\n| [overlay](../docs/overlay#_)                             | Commands for manipulating overlays.                                                       |\n| [overlay hide](../docs/overlay_hide#_)                   | Hide an active overlay.                                                                   |\n| [overlay list](../docs/overlay_list#_)                   | List all active overlays.                                                                 |\n| [overlay new](../docs/overlay_new#_)                     | Create an empty overlay.                                                                  |\n| [overlay use](../docs/overlay_use#_)                     | Use definitions from a module as an overlay.                                              |\n| [register](../docs/register#_)                           | Register a plugin.                                                                        |\n| [return](../docs/return#_)                               | Return early from a function.                                                             |\n| [scope](../docs/scope#_)                                 | Commands for getting info about what is in scope.                                         |\n| [source](../docs/source#_)                               | Runs a script file in the current context.                                                |\n| [source-env](../docs/source-env#_)                       | Source the environment from a source file into the current environment.                   |\n| [try](../docs/try#_)                                     | Try to run a block, if it fails optionally run a catch block.                             |\n| [use](../docs/use#_)                                     | Use definitions from a module, making them available in your shell.                       |\n| [version](../docs/version#_)                             | Display Nu version, and its build configuration.                                          |\n| [while](../docs/while#_)                                 | Conditionally run a block in a loop.                                                      |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/core.html](https://www.nushell.sh/commands/categories/core.html)"
- name: cp
  summary: '> cp {flags} (source) (destination)'
  description: "# `cp` for filesystem\n\nCopy files.\n\n## Signature\n\n`> cp {flags} (source) (destination)`\n\n## Flags\n\n- `--recursive, -r`: copy recursively through subdirectories\n- `--verbose, -v`: show successful copies in addition to failed copies (default:false)\n- `--update, -u`: copy only when the SOURCE file is newer than the destination file or when the destination file is missing\n- `--interactive, -i`: ask user to confirm action\n- `--no-symlink, -n`: no symbolic links are followed, only works if -r is active\n- `--progress, -p`: enable progress bar\n\n## Parameters\n\n- `source`: the place to copy from\n- `destination`: the place to copy to\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nCopy myfile to dir_b\n\n``` shiki\n>cpmyfiledir_b\n```\n\nRecursively copy dir_a to dir_b\n\n``` shiki\n>cp-rdir_adir_b\n```\n\nRecursively copy dir_a to dir_b, and print the feedbacks\n\n``` shiki\n>cp-r-vdir_adir_b\n```\n\nMove many files into a directory\n\n``` shiki\n>cp*.txtdir_a\n```\n\nCopy only if source file is newer than target file\n\n``` shiki\n>cp-uab\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/cp.html](https://www.nushell.sh/commands/docs/cp.html)"
- name: Database
  summary: ''
  description: "# Database\n\n| Command                        | Description                           |\n|--------------------------------|---------------------------------------|\n| [query db](../docs/query_db#_) | Query a database using SQL.           |\n| [schema](../docs/schema#_)     | Show the schema of a SQLite database. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/database.html](https://www.nushell.sh/commands/categories/database.html)"
- name: Dataframe
  summary: ''
  description: "# Dataframe\n\n| Command                                              | Description                                                                                      |\n|------------------------------------------------------|--------------------------------------------------------------------------------------------------|\n| [dfr all-false](../docs/dfr_all-false#_)             | Returns true if all values are false.                                                            |\n| [dfr all-true](../docs/dfr_all-true#_)               | Returns true if all values are true.                                                             |\n| [dfr append](../docs/dfr_append#_)                   | Appends a new dataframe.                                                                         |\n| [dfr arg-max](../docs/dfr_arg-max#_)                 | Return index for max value in series.                                                            |\n| [dfr arg-min](../docs/dfr_arg-min#_)                 | Return index for min value in series.                                                            |\n| [dfr arg-sort](../docs/dfr_arg-sort#_)               | Returns indexes for a sorted series.                                                             |\n| [dfr arg-true](../docs/dfr_arg-true#_)               | Returns indexes where values are true.                                                           |\n| [dfr arg-unique](../docs/dfr_arg-unique#_)           | Returns indexes for unique values.                                                               |\n| [dfr as-date](../docs/dfr_as-date#_)                 | Converts string to date.                                                                         |\n| [dfr as-datetime](../docs/dfr_as-datetime#_)         | Converts string to datetime.                                                                     |\n| [dfr columns](../docs/dfr_columns#_)                 | Show dataframe columns.                                                                          |\n| [dfr concatenate](../docs/dfr_concatenate#_)         | Concatenates strings with other array.                                                           |\n| [dfr contains](../docs/dfr_contains#_)               | Checks if a pattern is contained in a string.                                                    |\n| [dfr count-null](../docs/dfr_count-null#_)           | Counts null values.                                                                              |\n| [dfr cumulative](../docs/dfr_cumulative#_)           | Cumulative calculation for a series.                                                             |\n| [dfr drop](../docs/dfr_drop#_)                       | Creates a new dataframe by dropping the selected columns.                                        |\n| [dfr drop-duplicates](../docs/dfr_drop-duplicates#_) | Drops duplicate values in dataframe.                                                             |\n| [dfr drop-nulls](../docs/dfr_drop-nulls#_)           | Drops null values in dataframe.                                                                  |\n| [dfr dtypes](../docs/dfr_dtypes#_)                   | Show dataframe data types.                                                                       |\n| [dfr dummies](../docs/dfr_dummies#_)                 | Creates a new dataframe with dummy variables.                                                    |\n| [dfr filter-with](../docs/dfr_filter-with#_)         | Filters dataframe using a mask or expression as reference.                                       |\n| [dfr first](../docs/dfr_first#_)                     | Show only the first number of rows or create a first expression                                  |\n| [dfr get](../docs/dfr_get#_)                         | Creates dataframe with the selected columns.                                                     |\n| [dfr get-day](../docs/dfr_get-day#_)                 | Gets day from date.                                                                              |\n| [dfr get-hour](../docs/dfr_get-hour#_)               | Gets hour from date.                                                                             |\n| [dfr get-minute](../docs/dfr_get-minute#_)           | Gets minute from date.                                                                           |\n| [dfr get-month](../docs/dfr_get-month#_)             | Gets month from date.                                                                            |\n| [dfr get-nanosecond](../docs/dfr_get-nanosecond#_)   | Gets nanosecond from date.                                                                       |\n| [dfr get-ordinal](../docs/dfr_get-ordinal#_)         | Gets ordinal from date.                                                                          |\n| [dfr get-second](../docs/dfr_get-second#_)           | Gets second from date.                                                                           |\n| [dfr get-week](../docs/dfr_get-week#_)               | Gets week from date.                                                                             |\n| [dfr get-weekday](../docs/dfr_get-weekday#_)         | Gets weekday from date.                                                                          |\n| [dfr get-year](../docs/dfr_get-year#_)               | Gets year from date.                                                                             |\n| [dfr into-df](../docs/dfr_into-df#_)                 | Converts a list, table or record into a dataframe.                                               |\n| [dfr into-nu](../docs/dfr_into-nu#_)                 | Converts a dataframe or an expression into into nushell value for access and exploration.        |\n| [dfr is-duplicated](../docs/dfr_is-duplicated#_)     | Creates mask indicating duplicated values.                                                       |\n| [dfr is-not-null](../docs/dfr_is-not-null#_)         | Creates mask where value is not null.                                                            |\n| [dfr is-null](../docs/dfr_is-null#_)                 | Creates mask where value is null.                                                                |\n| [dfr is-unique](../docs/dfr_is-unique#_)             | Creates mask indicating unique values.                                                           |\n| [dfr last](../docs/dfr_last#_)                       | Creates new dataframe with tail rows or creates a last expression.                               |\n| [dfr lowercase](../docs/dfr_lowercase#_)             | Lowercase the strings in the column.                                                             |\n| [dfr ls](../docs/dfr_ls#_)                           | Lists stored dataframes.                                                                         |\n| [dfr melt](../docs/dfr_melt#_)                       | Unpivot a DataFrame from wide to long format.                                                    |\n| [dfr n-unique](../docs/dfr_n-unique#_)               | Counts unique values.                                                                            |\n| [dfr not](../docs/dfr_not#_)                         | Inverts boolean mask.                                                                            |\n| [dfr open](../docs/dfr_open#_)                       | Opens CSV, JSON, JSON lines, arrow, avro, or parquet file to create dataframe.                   |\n| [dfr query](../docs/dfr_query#_)                     | Query dataframe using SQL. Note: The dataframe is always named 'df' in your query's from clause. |\n| [dfr rename](../docs/dfr_rename#_)                   | Rename a dataframe column.                                                                       |\n| [dfr replace](../docs/dfr_replace#_)                 | Replace the leftmost (sub)string by a regex pattern.                                             |\n| [dfr replace-all](../docs/dfr_replace-all#_)         | Replace all (sub)strings by a regex pattern.                                                     |\n| [dfr rolling](../docs/dfr_rolling#_)                 | Rolling calculation for a series.                                                                |\n| [dfr sample](../docs/dfr_sample#_)                   | Create sample dataframe.                                                                         |\n| [dfr set](../docs/dfr_set#_)                         | Sets value where given mask is true.                                                             |\n| [dfr set-with-idx](../docs/dfr_set-with-idx#_)       | Sets value in the given index.                                                                   |\n| [dfr shape](../docs/dfr_shape#_)                     | Shows column and row size for a dataframe.                                                       |\n| [dfr shift](../docs/dfr_shift#_)                     | Shifts the values by a given period.                                                             |\n| [dfr slice](../docs/dfr_slice#_)                     | Creates new dataframe from a slice of rows.                                                      |\n| [dfr str-lengths](../docs/dfr_str-lengths#_)         | Get lengths of all strings.                                                                      |\n| [dfr str-slice](../docs/dfr_str-slice#_)             | Slices the string from the start position until the selected length.                             |\n| [dfr strftime](../docs/dfr_strftime#_)               | Formats date based on string rule.                                                               |\n| [dfr summary](../docs/dfr_summary#_)                 | For a dataframe, produces descriptive statistics (summary statistics) for its numeric columns.   |\n| [dfr take](../docs/dfr_take#_)                       | Creates new dataframe using the given indices.                                                   |\n| [dfr to-arrow](../docs/dfr_to-arrow#_)               | Saves dataframe to arrow file.                                                                   |\n| [dfr to-avro](../docs/dfr_to-avro#_)                 | Saves dataframe to avro file.                                                                    |\n| [dfr to-csv](../docs/dfr_to-csv#_)                   | Saves dataframe to CSV file.                                                                     |\n| [dfr to-jsonl](../docs/dfr_to-jsonl#_)               | Saves dataframe to a JSON lines file.                                                            |\n| [dfr to-parquet](../docs/dfr_to-parquet#_)           | Saves dataframe to parquet file.                                                                 |\n| [dfr unique](../docs/dfr_unique#_)                   | Returns unique values from a dataframe.                                                          |\n| [dfr uppercase](../docs/dfr_uppercase#_)             | Uppercase the strings in the column.                                                             |\n| [dfr value-counts](../docs/dfr_value-counts#_)       | Returns a dataframe with the counts for unique values in series.                                 |\n| [dfr with-column](../docs/dfr_with-column#_)         | Adds a series to the dataframe.                                                                  |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/dataframe.html](https://www.nushell.sh/commands/categories/dataframe.html)"
- name: Dataframe Or Lazyframe
  summary: ''
  description: "# Dataframe Or Lazyframe\n\n| Command                                      | Description                                                |\n|----------------------------------------------|------------------------------------------------------------|\n| [dfr filter-with](../docs/dfr_filter-with#_) | Filters dataframe using a mask or expression as reference. |\n| [dfr rename](../docs/dfr_rename#_)           | Rename a dataframe column.                                 |\n| [dfr shift](../docs/dfr_shift#_)             | Shifts the values by a given period.                       |\n| [dfr unique](../docs/dfr_unique#_)           | Returns unique values from a dataframe.                    |\n| [dfr with-column](../docs/dfr_with-column#_) | Adds a series to the dataframe.                            |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/dataframe_or_lazyframe.html](https://www.nushell.sh/commands/categories/dataframe_or_lazyframe.html)"
- name: Date
  summary: ''
  description: "# Date\n\n| Command                                            | Description                                               |\n|----------------------------------------------------|-----------------------------------------------------------|\n| [date](../docs/date#_)                             | Date-related commands.                                    |\n| [date humanize](../docs/date_humanize#_)           | Print a 'humanized' format for the date, relative to now. |\n| [date list-timezone](../docs/date_list-timezone#_) | List supported time zones.                                |\n| [date now](../docs/date_now#_)                     | Get the current date.                                     |\n| [date to-record](../docs/date_to-record#_)         | Convert the date into a record.                           |\n| [date to-table](../docs/date_to-table#_)           | Convert the date into a structured table.                 |\n| [date to-timezone](../docs/date_to-timezone#_)     | Convert a date to a given time zone.                      |\n| [format date](../docs/format_date#_)               | Format a given date using a format string.                |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/date.html](https://www.nushell.sh/commands/categories/date.html)"
- name: date
  summary: '> date {flags}'
  description: "# `date` for date\n\nDate-related commands.\n\n## Signature\n\n`> date {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                                         | type    | usage                                                     |\n|----------------------------------------------|---------|-----------------------------------------------------------|\n| [`date format`](date_format#_)               | Builtin | Removed command: use `format date` instead                |\n| [`date humanize`](date_humanize#_)           | Builtin | Print a 'humanized' format for the date, relative to now. |\n| [`date list-timezone`](date_list-timezone#_) | Builtin | List supported time zones.                                |\n| [`date now`](date_now#_)                     | Builtin | Get the current date.                                     |\n| [`date to-record`](date_to-record#_)         | Builtin | Convert the date into a record.                           |\n| [`date to-table`](date_to-table#_)           | Builtin | Convert the date into a structured table.                 |\n| [`date to-timezone`](date_to-timezone#_)     | Builtin | Convert a date to a given time zone.                      |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/date.html](https://www.nushell.sh/commands/docs/date.html)"
- name: date format
  summary: '> date format {flags} (format string)'
  description: "# `date format` for removed\n\nRemoved command: use \\`format date\\` instead\n\n## Signature\n\n`> date format {flags} (format string)`\n\n## Flags\n\n- `--list, -l`: lists strftime cheatsheet\n\n## Parameters\n\n- `format string`: the desired date format\n\n## Input/output types:\n\n| input    | output |\n|----------|--------|\n| datetime | string |\n| string   | string |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/date_format.html](https://www.nushell.sh/commands/docs/date_format.html)"
- name: date humanize
  summary: '> date humanize {flags}'
  description: "# `date humanize` for date\n\nPrint a 'humanized' format for the date, relative to now.\n\n## Signature\n\n`> date humanize {flags} `\n\n## Input/output types:\n\n| input    | output |\n|----------|--------|\n| datetime | string |\n| string   | string |\n\n## Examples\n\nPrint a 'humanized' format for the date, relative to now.\n\n``` shiki\n>\"2021-10-22 20:00:12 +01:00\"|date humanize\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/date_humanize.html](https://www.nushell.sh/commands/docs/date_humanize.html)"
- name: date list-timezone
  summary: '> date list-timezone {flags}'
  description: "# `date list-timezone` for date\n\nList supported time zones.\n\n## Signature\n\n`> date list-timezone {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nShow timezone(s) that contains 'Shanghai'\n\n``` shiki\n>date list-timezone|wheretimezone=~Shanghai\n╭───┬───────────────╮\n│# │   timezone    │\n├───┼───────────────┤\n│0│Asia/Shanghai│\n╰───┴───────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/date_list-timezone.html](https://www.nushell.sh/commands/docs/date_list-timezone.html)"
- name: date now
  summary: '> date now {flags}'
  description: "# `date now` for date\n\nGet the current date.\n\n## Signature\n\n`> date now {flags} `\n\n## Input/output types:\n\n| input   | output   |\n|---------|----------|\n| nothing | datetime |\n\n## Examples\n\nGet the current date and display it in a given format string.\n\n``` shiki\n>date now|format date\"%Y-%m-%d %H:%M:%S\"\n```\n\nGet the time duration from 2019-04-30 to now\n\n``` shiki\n> (date now) -2019-05-01\n```\n\nGet the time duration since a more accurate time\n\n``` shiki\n> (date now) -2019-05-01T04:12:05.20+08:00\n```\n\nGet current time in full RFC3339 format with timezone\n\n``` shiki\n>date now|debug\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/date_now.html](https://www.nushell.sh/commands/docs/date_now.html)"
- name: date to-record
  summary: '> date to-record {flags}'
  description: "# `date to-record` for date\n\nConvert the date into a record.\n\n## Signature\n\n`> date to-record {flags} `\n\n## Input/output types:\n\n| input    | output |\n|----------|--------|\n| datetime | record |\n| string   | record |\n\n## Examples\n\nConvert the current date into a record.\n\n``` shiki\n>date to-record\n```\n\nConvert the current date into a record.\n\n``` shiki\n>date now|date to-record\n```\n\nConvert a date string into a record.\n\n``` shiki\n>'2020-04-12T22:10:57.123+02:00'|date to-record\n╭────────────┬───────────╮\n│year│2020│\n│month│4│\n│day│12│\n│hour│22│\n│minute│10│\n│second│57│\n│nanosecond│123000000│\n│timezone│+02:00│\n╰────────────┴───────────╯\n```\n\nConvert a date into a record.\n\n``` shiki\n>'2020-04-12 22:10:57 +0200'|into datetime|date to-record\n╭────────────┬────────╮\n│year│2020│\n│month│4│\n│day│12│\n│hour│22│\n│minute│10│\n│second│57│\n│nanosecond│0│\n│timezone│+02:00│\n╰────────────┴────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/date_to-record.html](https://www.nushell.sh/commands/docs/date_to-record.html)"
- name: date to-table
  summary: '> date to-table {flags}'
  description: "# `date to-table` for date\n\nConvert the date into a structured table.\n\n## Signature\n\n`> date to-table {flags} `\n\n## Input/output types:\n\n| input    | output |\n|----------|--------|\n| datetime | table  |\n| string   | table  |\n\n## Examples\n\nConvert the current date into a table.\n\n``` shiki\n>date to-table\n```\n\nConvert the date into a table.\n\n``` shiki\n>date now|date to-table\n```\n\nConvert a given date into a table.\n\n``` shiki\n>2020-04-12T22:10:57.000000789+02:00|date to-table\n╭───┬──────┬───────┬─────┬──────┬────────┬────────┬────────────┬──────────╮\n│# │ year │ month │ day │ hour │ minute │ second │ nanosecond │ timezone │\n├───┼──────┼───────┼─────┼──────┼────────┼────────┼────────────┼──────────┤\n│0│2020│4│12│22│10│57│789│+02:00│\n╰───┴──────┴───────┴─────┴──────┴────────┴────────┴────────────┴──────────╯\n```\n\nConvert a given date into a table.\n\n``` shiki\n>'2020-04-12 22:10:57 +0200'|into datetime|date to-table\n╭───┬──────┬───────┬─────┬──────┬────────┬────────┬────────────┬──────────╮\n│# │ year │ month │ day │ hour │ minute │ second │ nanosecond │ timezone │\n├───┼──────┼───────┼─────┼──────┼────────┼────────┼────────────┼──────────┤\n│0│2020│4│12│22│10│57│0│+02:00│\n╰───┴──────┴───────┴─────┴──────┴────────┴────────┴────────────┴──────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/date_to-table.html](https://www.nushell.sh/commands/docs/date_to-table.html)"
- name: date to-timezone
  summary: '> date to-timezone {flags} (time zone)'
  description: "# `date to-timezone` for date\n\nConvert a date to a given time zone.\n\n## Signature\n\n`> date to-timezone {flags} (time zone)`\n\n## Parameters\n\n- `time zone`: time zone description\n\n## Input/output types:\n\n| input    | output   |\n|----------|----------|\n| datetime | datetime |\n| string   | datetime |\n\n## Examples\n\nGet the current date in UTC+05:00\n\n``` shiki\n>date now|date to-timezone'+0500'\n```\n\nGet the current local date\n\n``` shiki\n>date now|date to-timezonelocal\n```\n\nGet the current date in Hawaii\n\n``` shiki\n>date now|date to-timezoneUS/Hawaii\n```\n\nGet the current date in Hawaii\n\n``` shiki\n>\"2020-10-10 10:00:00 +02:00\"|date to-timezone\"+0500\"\nSat, 10Oct202013:00:00+0500 (2yearsago)\n```\n\nGet the current date in Hawaii, from a datetime object\n\n``` shiki\n>\"2020-10-10 10:00:00 +02:00\"|into datetime|date to-timezone\"+0500\"\nSat, 10Oct202013:00:00+0500 (2yearsago)\n```\n\n## Notes\n\nUse 'date list-timezone' to list all supported time zones.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/date_to-timezone.html](https://www.nushell.sh/commands/docs/date_to-timezone.html)"
- name: Debug
  summary: ''
  description: "# Debug\n\n| Command                              | Description                                                |\n|--------------------------------------|------------------------------------------------------------|\n| [ast](../docs/ast#_)                 | Print the abstract syntax tree (ast) for a pipeline.       |\n| [debug](../docs/debug#_)             | Debug print the value(s) piped in.                         |\n| [explain](../docs/explain#_)         | Explain closure contents.                                  |\n| [inspect](../docs/inspect#_)         | Inspect pipeline results while running a pipeline.         |\n| [metadata](../docs/metadata#_)       | Get the metadata for items in the stream.                  |\n| [profile](../docs/profile#_)         | Profile each pipeline element in a closure.                |\n| [timeit](../docs/timeit#_)           | Time the running time of a block.                          |\n| [view](../docs/view#_)               | Various commands for viewing debug information.            |\n| [view files](../docs/view_files#_)   | View the files registered in nushell's EngineState memory. |\n| [view source](../docs/view_source#_) | View a block, module, or a definition.                     |\n| [view span](../docs/view_span#_)     | View the contents of a span.                               |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/debug.html](https://www.nushell.sh/commands/categories/debug.html)"
- name: debug
  summary: '> debug {flags}'
  description: "# `debug` for debug\n\nDebug print the value(s) piped in.\n\n## Signature\n\n`> debug {flags} `\n\n## Flags\n\n- `--raw, -r`: Prints the raw value representation\n\n## Input/output types:\n\n| input       | output         |\n|-------------|----------------|\n| any         | string         |\n| list\\<any\\> | list\\<string\\> |\n| table       | list\\<string\\> |\n\n## Examples\n\nDebug print a string\n\n``` shiki\n>'hello'|debug\nhello\n```\n\nDebug print a list\n\n``` shiki\n> ['hello'] |debug\n╭───┬───────╮\n│0│hello│\n╰───┴───────╯\n```\n\nDebug print a table\n\n``` shiki\n> [[versionpatch]; ['0.1.0'false] ['0.1.1'true] ['0.2.0'false]] |debug\n╭───┬────────────────────────────────╮\n│0│ {version:0.1.0, patch:false} │\n│1│ {version:0.1.1, patch:true}  │\n│2│ {version:0.2.0, patch:false} │\n╰───┴────────────────────────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/debug.html](https://www.nushell.sh/commands/docs/debug.html)"
- name: decode
  summary: '> decode {flags} (encoding)'
  description: "# `decode` for strings\n\nDecode bytes into a string.\n\n## Signature\n\n`> decode {flags} (encoding)`\n\n## Parameters\n\n- `encoding`: the text encoding to use\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| binary | string |\n\n## Examples\n\nDecode the output of an external command\n\n``` shiki\n> ^catmyfile.q|decodeutf-8\n```\n\nDecode an UTF-16 string into nushell UTF-8 string\n\n``` shiki\n>0x[0053006F006D006500200044006100740061] |decodeutf-16be\nSomeData\n```\n\n## Notes\n\nMultiple encodings are supported; here are a few: big5, euc-jp, euc-kr, gbk, iso-8859-1, utf-16, cp1252, latin5\n\nFor a more complete list of encodings please refer to the encoding_rs documentation link at https://docs.rs/encoding_rs/latest/encoding_rs/#statics\n\n## Subcommands:\n\n| name                               | type    | usage                  |\n|------------------------------------|---------|------------------------|\n| [`decode base64`](decode_base64#_) | Builtin | Base64 decode a value. |\n| [`decode hex`](decode_hex#_)       | Builtin | Hex decode a value.    |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/decode.html](https://www.nushell.sh/commands/docs/decode.html)"
- name: decode base64
  summary: '> decode base64 {flags} ...rest'
  description: "# `decode base64` for hash\n\nBase64 decode a value.\n\n## Signature\n\n`> decode base64 {flags} ...rest`\n\n## Flags\n\n- `--character-set, -c {string}`: specify the character rules for encoding the input. Valid values are 'standard', 'standard-no-padding', 'url-safe', 'url-safe-no-padding','binhex', 'bcrypt', 'crypt', 'mutf7'\n- `--binary, -b`: Output a binary value instead of decoding payload as UTF-8\n\n## Parameters\n\n- `...rest`: For a data structure input, decode data at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nBase64 decode a value and output as UTF-8 string\n\n``` shiki\n>'U29tZSBEYXRh'|decode base64\nSomeData\n```\n\nBase64 decode a value and output as binary\n\n``` shiki\n>'U29tZSBEYXRh'|decode base64--binary\nLength:9 (0x9) bytes|printablewhitespaceascii_othernon_ascii\n00000000:536f6d652044617461SomeData\n```\n\n## Notes\n\nWill attempt to decode binary payload as an UTF-8 string by default. Use the `--binary(-b)` argument to force binary output.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/decode_base64.html](https://www.nushell.sh/commands/docs/decode_base64.html)"
- name: decode hex
  summary: '> decode hex {flags} ...rest'
  description: "# `decode hex` for formats\n\nHex decode a value.\n\n## Signature\n\n`> decode hex {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, decode data at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<binary\\> |\n| record         | record         |\n| string         | binary         |\n| table          | table          |\n\n## Examples\n\nHex decode a value and output as binary\n\n``` shiki\n>'0102030A0a0B'|decode hex\nLength:6 (0x6) bytes|printablewhitespaceascii_othernon_ascii\n00000000:0102030a0a0b•••__•\n```\n\nWhitespaces are allowed to be between hex digits\n\n``` shiki\n>'01 02  03 0A 0a 0B'|decode hex\nLength:6 (0x6) bytes|printablewhitespaceascii_othernon_ascii\n00000000:0102030a0a0b•••__•\n```\n\n**Tips:** Command `decode hex` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/decode_hex.html](https://www.nushell.sh/commands/docs/decode_hex.html)"
- name: def
  summary: '> def {flags} (def_name) (params) (body)'
  description: "# `def` for core\n\nDefine a custom command.\n\n## Signature\n\n`> def {flags} (def_name) (params) (body)`\n\n## Parameters\n\n- `def_name`: definition name\n- `params`: parameters\n- `body`: body of the definition\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nDefine a command and run it\n\n``` shiki\n>defsay-hi [] { echo'hi' };say-hi\nhi\n```\n\nDefine a command and run it with parameter(s)\n\n``` shiki\n>defsay-sth [sth: string] { echo$sth };say-sthhi\nhi\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/def.html](https://www.nushell.sh/commands/docs/def.html)"
- name: def-env
  summary: '> def-env {flags} (def_name) (params) (block)'
  description: "# `def-env` for core\n\nDefine a custom command, which participates in the caller environment.\n\n## Signature\n\n`> def-env {flags} (def_name) (params) (block)`\n\n## Parameters\n\n- `def_name`: definition name\n- `params`: parameters\n- `block`: body of the definition\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nSet environment variable by call a custom command\n\n``` shiki\n>def-envfoo [] { $env.BAR=\"BAZ\" };foo;$env.BAR\nBAZ\n```\n\n## Notes\n\n``` shiki\nThis command is a parser keyword. For details, check:\n  https://www.nushell.sh/book/thinking_in_nu.html\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/def-env.html](https://www.nushell.sh/commands/docs/def-env.html)"
- name: Default
  summary: ''
  description: "# Default\n\n| Command              | Description                                                         |\n|----------------------|---------------------------------------------------------------------|\n| [inc](../docs/inc#_) | Increment a value or version. Optionally use the column of a table. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/default.html](https://www.nushell.sh/commands/categories/default.html)"
- name: default
  summary: '> default {flags} (default value) (column name)'
  description: "# `default` for filters\n\nSets a default row's column if missing.\n\n## Signature\n\n`> default {flags} (default value) (column name)`\n\n## Parameters\n\n- `default value`: the value to use as a default\n- `column name`: the name of the column\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nGive a default 'target' column to all file entries\n\n``` shiki\n>ls-la|default'nothing'target\n```\n\nGet the env value of `MY_ENV` with a default value 'abc' if not present\n\n``` shiki\n>$env|get-iMY_ENV|default'abc'\n```\n\nReplace the `null` value in a list\n\n``` shiki\n> [1, 2, null, 4] |default3\n╭───┬───╮\n│0│1│\n│1│2│\n│2│3│\n│3│4│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/default.html](https://www.nushell.sh/commands/docs/default.html)"
- name: describe
  summary: '> describe {flags}'
  description: "# `describe` for core\n\nDescribe the type and structure of the value(s) piped in.\n\n## Signature\n\n`> describe {flags} `\n\n## Flags\n\n- `--no-collect, -n`: do not collect streams of structured data\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | string |\n\n## Examples\n\nDescribe the type of a string\n\n``` shiki\n>'hello'|describe\nstring\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/describe.html](https://www.nushell.sh/commands/docs/describe.html)"
- name: detect columns
  summary: '> detect columns {flags}'
  description: "# `detect columns` for strings\n\nAttempt to automatically split text into multiple columns.\n\n## Signature\n\n`> detect columns {flags} `\n\n## Flags\n\n- `--skip, -s {int}`: number of rows to skip before detecting\n- `--no-headers, -n`: don't detect headers\n- `--combine-columns, -c {range}`: columns to be combined; listed as a range\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | table  |\n\n## Examples\n\nSplits string across multiple columns\n\n``` shiki\n>'a b c'|detect columns-n\n╭───┬─────────┬─────────┬─────────╮\n│# │ column0 │ column1 │ column2 │\n├───┼─────────┼─────────┼─────────┤\n│0│a│b│c│\n╰───┴─────────┴─────────┴─────────╯\n```\n\n``` shiki\n>$'c1 c2 c3 c4 c5(char nl)a b c d e'|detect columns-c0..1\n```\n\nSplits a multi-line string into columns with headers detected\n\n``` shiki\n>$'c1 c2 c3 c4 c5(char nl)a b c d e'|detect columns-c-2..-1\n```\n\nSplits a multi-line string into columns with headers detected\n\n``` shiki\n>$'c1 c2 c3 c4 c5(char nl)a b c d e'|detect columns-c2..\n```\n\nParse external ls command and combine columns for datetime\n\n``` shiki\n> ^ls-lh|detect columns--no-headers--skip1--combine-columns5..7\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/detect_columns.html](https://www.nushell.sh/commands/docs/detect_columns.html)"
- name: dfr agg
  summary: '> dfr agg {flags} ...rest'
  description: "# `dfr agg` for lazyframe\n\nPerforms a series of aggregations from a group-by.\n\n## Signature\n\n`> dfr agg {flags} ...rest`\n\n## Parameters\n\n- `...rest`: Expression(s) that define the aggregations to be applied\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nGroup by and perform an aggregation\n\n``` shiki\n> [[ab]; [12] [14] [26] [24]]\n|dfr into-df\n|dfr group-bya\n|dfr agg [\n        (dfr colb|dfr min|dfr as\"b_min\")\n        (dfr colb|dfr max|dfr as\"b_max\")\n        (dfr colb|dfr sum|dfr as\"b_sum\")\n     ]\n╭───┬───┬───────┬───────┬───────╮\n│# │ a │ b_min │ b_max │ b_sum │\n├───┼───┼───────┼───────┼───────┤\n│0│1│2│4│6│\n│1│2│4│6│10│\n╰───┴───┴───────┴───────┴───────╯\n```\n\nGroup by and perform an aggregation\n\n``` shiki\n> [[ab]; [12] [14] [26] [24]]\n|dfr into-lazy\n|dfr group-bya\n|dfr agg [\n        (dfr colb|dfr min|dfr as\"b_min\")\n        (dfr colb|dfr max|dfr as\"b_max\")\n        (dfr colb|dfr sum|dfr as\"b_sum\")\n     ]\n|dfr collect\n╭───┬───┬───────┬───────┬───────╮\n│# │ a │ b_min │ b_max │ b_sum │\n├───┼───┼───────┼───────┼───────┤\n│0│1│2│4│6│\n│1│2│4│6│10│\n╰───┴───┴───────┴───────┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_agg.html](https://www.nushell.sh/commands/docs/dfr_agg.html)"
- name: dfr agg-groups
  summary: '> dfr agg-groups {flags}'
  description: "# `dfr agg-groups` for expression\n\ncreates an agg_groups expression\n\n## Signature\n\n`> dfr agg-groups {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\n``` shiki\n>\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_agg-groups.html](https://www.nushell.sh/commands/docs/dfr_agg-groups.html)"
- name: dfr all-false
  summary: '> dfr all-false {flags}'
  description: "# `dfr all-false` for dataframe\n\nReturns true if all values are false.\n\n## Signature\n\n`> dfr all-false {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns true if all values are false\n\n``` shiki\n> [falsefalsefalse] |dfr into-df|dfr all-false\n╭───┬───────────╮\n│# │ all_false │\n├───┼───────────┤\n│0│true│\n╰───┴───────────╯\n```\n\nChecks the result from a comparison\n\n``` shiki\n>lets= ([56210] |dfr into-df);\nletres= ($s>9);\n$res|dfr all-false\n╭───┬───────────╮\n│# │ all_false │\n├───┼───────────┤\n│0│false│\n╰───┴───────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_all-false.html](https://www.nushell.sh/commands/docs/dfr_all-false.html)"
- name: dfr all-true
  summary: '> dfr all-true {flags}'
  description: "# `dfr all-true` for dataframe\n\nReturns true if all values are true.\n\n## Signature\n\n`> dfr all-true {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns true if all values are true\n\n``` shiki\n> [truetruetrue] |dfr into-df|dfr all-true\n╭───┬──────────╮\n│# │ all_true │\n├───┼──────────┤\n│0│true│\n╰───┴──────────╯\n```\n\nChecks the result from a comparison\n\n``` shiki\n>lets= ([5628] |dfr into-df);\nletres= ($s>9);\n$res|dfr all-true\n╭───┬──────────╮\n│# │ all_true │\n├───┼──────────┤\n│0│false│\n╰───┴──────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_all-true.html](https://www.nushell.sh/commands/docs/dfr_all-true.html)"
- name: dfr append
  summary: '> dfr append {flags} (other)'
  description: "# `dfr append` for dataframe\n\nAppends a new dataframe.\n\n## Signature\n\n`> dfr append {flags} (other)`\n\n## Flags\n\n- `--col, -c`: appends in col orientation\n\n## Parameters\n\n- `other`: dataframe to be appended\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nAppends a dataframe as new columns\n\n``` shiki\n>leta= ([[ab]; [12] [34]] |dfr into-df);\n$a|dfr append$a\n╭───┬───┬───┬─────┬─────╮\n│# │ a │ b │ a_x │ b_x │\n├───┼───┼───┼─────┼─────┤\n│0│1│2│1│2│\n│1│3│4│3│4│\n╰───┴───┴───┴─────┴─────╯\n```\n\nAppends a dataframe merging at the end of columns\n\n``` shiki\n>leta= ([[ab]; [12] [34]] |dfr into-df);\n$a|dfr append$a--col\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n│1│3│4│\n│2│1│2│\n│3│3│4│\n╰───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_append.html](https://www.nushell.sh/commands/docs/dfr_append.html)"
- name: dfr arg-max
  summary: '> dfr arg-max {flags}'
  description: "# `dfr arg-max` for dataframe\n\nReturn index for max value in series.\n\n## Signature\n\n`> dfr arg-max {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns index for max value\n\n``` shiki\n> [132] |dfr into-df|dfr arg-max\n╭───┬─────────╮\n│# │ arg_max │\n├───┼─────────┤\n│0│1│\n╰───┴─────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_arg-max.html](https://www.nushell.sh/commands/docs/dfr_arg-max.html)"
- name: dfr arg-min
  summary: '> dfr arg-min {flags}'
  description: "# `dfr arg-min` for dataframe\n\nReturn index for min value in series.\n\n## Signature\n\n`> dfr arg-min {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns index for min value\n\n``` shiki\n> [132] |dfr into-df|dfr arg-min\n╭───┬─────────╮\n│# │ arg_min │\n├───┼─────────┤\n│0│0│\n╰───┴─────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_arg-min.html](https://www.nushell.sh/commands/docs/dfr_arg-min.html)"
- name: dfr arg-sort
  summary: '> dfr arg-sort {flags}'
  description: "# `dfr arg-sort` for dataframe\n\nReturns indexes for a sorted series.\n\n## Signature\n\n`> dfr arg-sort {flags} `\n\n## Flags\n\n- `--reverse, -r`: reverse order\n- `--nulls-last, -n`: nulls ordered last\n- `--maintain-order, -m`: maintain order on sorted items\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns indexes for a sorted series\n\n``` shiki\n> [12233] |dfr into-df|dfr arg-sort\n╭───┬──────────╮\n│# │ arg_sort │\n├───┼──────────┤\n│0│0│\n│1│1│\n│2│2│\n│3│3│\n│4│4│\n╰───┴──────────╯\n```\n\nReturns indexes for a sorted series\n\n``` shiki\n> [12233] |dfr into-df|dfr arg-sort-r\n╭───┬──────────╮\n│# │ arg_sort │\n├───┼──────────┤\n│0│3│\n│1│4│\n│2│1│\n│3│2│\n│4│0│\n╰───┴──────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_arg-sort.html](https://www.nushell.sh/commands/docs/dfr_arg-sort.html)"
- name: dfr arg-true
  summary: '> dfr arg-true {flags}'
  description: "# `dfr arg-true` for dataframe\n\nReturns indexes where values are true.\n\n## Signature\n\n`> dfr arg-true {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns indexes where values are true\n\n``` shiki\n> [falsetruefalse] |dfr into-df|dfr arg-true\n╭───┬──────────╮\n│# │ arg_true │\n├───┼──────────┤\n│0│1│\n╰───┴──────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_arg-true.html](https://www.nushell.sh/commands/docs/dfr_arg-true.html)"
- name: dfr arg-unique
  summary: '> dfr arg-unique {flags}'
  description: "# `dfr arg-unique` for dataframe\n\nReturns indexes for unique values.\n\n## Signature\n\n`> dfr arg-unique {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns indexes for unique values\n\n``` shiki\n> [12233] |dfr into-df|dfr arg-unique\n╭───┬────────────╮\n│# │ arg_unique │\n├───┼────────────┤\n│0│0│\n│1│1│\n│2│3│\n╰───┴────────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_arg-unique.html](https://www.nushell.sh/commands/docs/dfr_arg-unique.html)"
- name: dfr arg-where
  summary: '> dfr arg-where {flags} (column name)'
  description: "# `dfr arg-where` for expression\n\nCreates an expression that returns the arguments where expression is true.\n\n## Signature\n\n`> dfr arg-where {flags} (column name)`\n\n## Parameters\n\n- `column name`: Expression to evaluate\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturn a dataframe where the value match the expression\n\n``` shiki\n>letdf= ([[ab]; [one1] [two2] [three3]] |dfr into-df);\n$df|dfr select (dfr arg-where ((dfr colb) >=2) |dfr asb_arg)\n╭───┬───────╮\n│# │ b_arg │\n├───┼───────┤\n│0│1│\n│1│2│\n╰───┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_arg-where.html](https://www.nushell.sh/commands/docs/dfr_arg-where.html)"
- name: dfr as
  summary: '> dfr as {flags} (Alias name)'
  description: "# `dfr as` for expression\n\nCreates an alias expression.\n\n## Signature\n\n`> dfr as {flags} (Alias name)`\n\n## Parameters\n\n- `Alias name`: Alias name for the expression\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreates and alias expression\n\n``` shiki\n>dfr cola|dfr asnew_a|dfr into-nu\n╭───────┬────────────────────╮\n││╭───────┬────────╮│\n│expr││expr│column││\n│││value│a││\n││╰───────┴────────╯│\n│alias│new_a│\n╰───────┴────────────────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_as.html](https://www.nushell.sh/commands/docs/dfr_as.html)"
- name: dfr as-date
  summary: '> dfr as-date {flags} (format)'
  description: "# `dfr as-date` for dataframe\n\nConverts string to date.\n\n## Signature\n\n`> dfr as-date {flags} (format)`\n\n## Flags\n\n- `--not-exact, -n`: the format string may be contained in the date (e.g. foo-2021-01-01-bar could match 2021-01-01)\n\n## Parameters\n\n- `format`: formatting date string\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nConverts string to date\n\n``` shiki\n> [\"2021-12-30\"\"2021-12-31\"] |dfr into-df|dfr as-datetime\"%Y-%m-%d\"\n```\n\n## Notes\n\nFormat example: \"%Y-%m-%d\" =\\> 2021-12-31 \"%d-%m-%Y\" =\\> 31-12-2021 \"%Y%m%d\" =\\> 2021319 (2021-03-19)\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_as-date.html](https://www.nushell.sh/commands/docs/dfr_as-date.html)"
- name: dfr as-datetime
  summary: '> dfr as-datetime {flags} (format)'
  description: "# `dfr as-datetime` for dataframe\n\nConverts string to datetime.\n\n## Signature\n\n`> dfr as-datetime {flags} (format)`\n\n## Flags\n\n- `--not-exact, -n`: the format string may be contained in the date (e.g. foo-2021-01-01-bar could match 2021-01-01)\n\n## Parameters\n\n- `format`: formatting date time string\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nConverts string to datetime\n\n``` shiki\n> [\"2021-12-30 00:00:00\"\"2021-12-31 00:00:00\"] |dfr into-df|dfr as-datetime\"%Y-%m-%d %H:%M:%S\"\n╭───┬─────────────╮\n│# │  datetime   │\n├───┼─────────────┤\n│0│2yearsago│\n│1│2yearsago│\n╰───┴─────────────╯\n```\n\nConverts string to datetime with high resolutions\n\n``` shiki\n> [\"2021-12-30 00:00:00.123456789\"\"2021-12-31 00:00:00.123456789\"] |dfr into-df|dfr as-datetime\"%Y-%m-%d %H:%M:%S.%9f\"\n╭───┬─────────────╮\n│# │  datetime   │\n├───┼─────────────┤\n│0│2yearsago│\n│1│2yearsago│\n╰───┴─────────────╯\n```\n\n## Notes\n\nFormat example: \"%y/%m/%d %H:%M:%S\" =\\> 21/12/31 12:54:98 \"%y-%m-%d %H:%M:%S\" =\\> 2021-12-31 24:58:01 \"%y/%m/%d %H:%M:%S\" =\\> 21/12/31 24:58:01 \"%y%m%d %H:%M:%S\" =\\> 210319 23:58:50 \"%Y/%m/%d %H:%M:%S\" =\\> 2021/12/31 12:54:98 \"%Y-%m-%d %H:%M:%S\" =\\> 2021-12-31 24:58:01 \"%Y/%m/%d %H:%M:%S\" =\\> 2021/12/31 24:58:01 \"%Y%m%d %H:%M:%S\" =\\> 20210319 23:58:50 \"%FT%H:%M:%S\" =\\> 2019-04-18T02:45:55 \"%FT%H:%M:%S.%6f\" =\\> microseconds \"%FT%H:%M:%S.%9f\" =\\> nanoseconds\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_as-datetime.html](https://www.nushell.sh/commands/docs/dfr_as-datetime.html)"
- name: dfr cache
  summary: '> dfr cache {flags}'
  description: "# `dfr cache` for lazyframe\n\nCaches operations in a new LazyFrame\n\n## Signature\n\n`> dfr cache {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCaches the result into a new LazyFrame\n\n``` shiki\n> [[ab]; [62] [42] [22]] |dfr into-df|dfr reverse|dfr cache\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_cache.html](https://www.nushell.sh/commands/docs/dfr_cache.html)"
- name: dfr col
  summary: '> dfr col {flags} (column name)'
  description: "# `dfr col` for expression\n\nCreates a named column expression.\n\n## Signature\n\n`> dfr col {flags} (column name)`\n\n## Parameters\n\n- `column name`: Name of column to be used\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreates a named column expression and converts it to a nu object\n\n``` shiki\n>dfr cola|dfr into-nu\n╭───────┬────────╮\n│expr│column│\n│value│a│\n╰───────┴────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_col.html](https://www.nushell.sh/commands/docs/dfr_col.html)"
- name: dfr collect
  summary: '> dfr collect {flags}'
  description: "# `dfr collect` for lazyframe\n\nCollect lazy dataframe into eager dataframe.\n\n## Signature\n\n`> dfr collect {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\ndrop duplicates\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-lazy|dfr collect\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n│1│3│4│\n╰───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_collect.html](https://www.nushell.sh/commands/docs/dfr_collect.html)"
- name: dfr columns
  summary: '> dfr columns {flags}'
  description: "# `dfr columns` for dataframe\n\nShow dataframe columns.\n\n## Signature\n\n`> dfr columns {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nDataframe columns\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr columns\n╭───┬───╮\n│0│a│\n│1│b│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_columns.html](https://www.nushell.sh/commands/docs/dfr_columns.html)"
- name: dfr concat-str
  summary: '> dfr concat-str {flags} (separator) (concat expressions)'
  description: "# `dfr concat-str` for expression\n\nCreates a concat string expression.\n\n## Signature\n\n`> dfr concat-str {flags} (separator) (concat expressions)`\n\n## Parameters\n\n- `separator`: Separator used during the concatenation\n- `concat expressions`: Expression(s) that define the string concatenation\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreates a concat string expression\n\n``` shiki\n>letdf= ([[abc]; [onetwo1] [threefour2]] |dfr into-df);\n$df|dfr with-column ((dfr concat-str\"-\" [(dfr cola) (dfr colb) ((dfr colc) *2)]) |dfr asconcat)\n╭───┬───────┬──────┬───┬──────────────╮\n│# │   a   │  b   │ c │    concat    │\n├───┼───────┼──────┼───┼──────────────┤\n│0│one│two│1│one-two-2│\n│1│three│four│2│three-four-4│\n╰───┴───────┴──────┴───┴──────────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_concat-str.html](https://www.nushell.sh/commands/docs/dfr_concat-str.html)"
- name: dfr concatenate
  summary: '> dfr concatenate {flags} (other)'
  description: "# `dfr concatenate` for dataframe\n\nConcatenates strings with other array.\n\n## Signature\n\n`> dfr concatenate {flags} (other)`\n\n## Parameters\n\n- `other`: Other array with string to be concatenated\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nConcatenate string\n\n``` shiki\n>letother= ([zaxscd] |dfr into-df);\n    [abcabcabc] |dfr into-df|dfr concatenate$other\n╭───┬───────╮\n│# │   0   │\n├───┼───────┤\n│0│abcza│\n│1│abcxs│\n│2│abccd│\n╰───┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_concatenate.html](https://www.nushell.sh/commands/docs/dfr_concatenate.html)"
- name: dfr contains
  summary: '> dfr contains {flags} (pattern)'
  description: "# `dfr contains` for dataframe\n\nChecks if a pattern is contained in a string.\n\n## Signature\n\n`> dfr contains {flags} (pattern)`\n\n## Parameters\n\n- `pattern`: Regex pattern to be searched\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns boolean indicating if pattern was found\n\n``` shiki\n> [abcacbacb] |dfr into-df|dfr containsab\n╭───┬───────╮\n│# │   0   │\n├───┼───────┤\n│0│true│\n│1│false│\n│2│false│\n╰───┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_contains.html](https://www.nushell.sh/commands/docs/dfr_contains.html)"
- name: dfr count
  summary: '> dfr count {flags}'
  description: "# `dfr count` for expression\n\ncreates a count expression\n\n## Signature\n\n`> dfr count {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\n``` shiki\n>\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_count.html](https://www.nushell.sh/commands/docs/dfr_count.html)"
- name: dfr count-null
  summary: '> dfr count-null {flags}'
  description: "# `dfr count-null` for dataframe\n\nCounts null values.\n\n## Signature\n\n`> dfr count-null {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCounts null values\n\n``` shiki\n>lets= ([1100334] |dfr into-df);\n    ($s/$s) |dfr count-null\n╭───┬────────────╮\n│# │ count_null │\n├───┼────────────┤\n│0│2│\n╰───┴────────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_count-null.html](https://www.nushell.sh/commands/docs/dfr_count-null.html)"
- name: dfr cumulative
  summary: '> dfr cumulative {flags} (type)'
  description: "# `dfr cumulative` for dataframe\n\nCumulative calculation for a series.\n\n## Signature\n\n`> dfr cumulative {flags} (type)`\n\n## Flags\n\n- `--reverse, -r`: Reverse cumulative calculation\n\n## Parameters\n\n- `type`: rolling operation\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCumulative sum for a series\n\n``` shiki\n> [12345] |dfr into-df|dfr cumulativesum\n╭───┬──────────────────╮\n│# │ 0_cumulative_sum │\n├───┼──────────────────┤\n│0│1│\n│1│3│\n│2│6│\n│3│10│\n│4│15│\n╰───┴──────────────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_cumulative.html](https://www.nushell.sh/commands/docs/dfr_cumulative.html)"
- name: dfr datepart
  summary: '> dfr datepart {flags} (Datepart name)'
  description: "# `dfr datepart` for expression\n\nCreates an expression for capturing the specified datepart in a column.\n\n## Signature\n\n`> dfr datepart {flags} (Datepart name)`\n\n## Parameters\n\n- `Datepart name`: Part of the date to capture. Possible values are year, quarter, month, week, weekday, day, hour, minute, second, millisecond, microsecond, nanosecond\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreates an expression to capture the year date part\n\n``` shiki\n> [[\"2021-12-30T01:02:03.123456789\"]] |dfr into-df|dfr as-datetime\"%Y-%m-%dT%H:%M:%S.%9f\"|dfr with-column [(dfr coldatetime|dfr datepartyear|dfr asdatetime_year )]\n╭───┬─────────────┬───────────────╮\n│# │  datetime   │ datetime_year │\n├───┼─────────────┼───────────────┤\n│0│2yearsago│2021│\n╰───┴─────────────┴───────────────╯\n```\n\nCreates an expression to capture multiple date parts\n\n``` shiki\n> [[\"2021-12-30T01:02:03.123456789\"]] |dfr into-df|dfr as-datetime\"%Y-%m-%dT%H:%M:%S.%9f\"|\ndfr with-column [ (dfr coldatetime|dfr datepartyear|dfr asdatetime_year ),\n                (dfr coldatetime|dfr datepartmonth|dfr asdatetime_month ),\n                (dfr coldatetime|dfr datepartday|dfr asdatetime_day ),\n                (dfr coldatetime|dfr dateparthour|dfr asdatetime_hour ),\n                (dfr coldatetime|dfr datepartminute|dfr asdatetime_minute ),\n                (dfr coldatetime|dfr datepartsecond|dfr asdatetime_second ),\n                (dfr coldatetime|dfr datepartnanosecond|dfr asdatetime_ns ) ]\n╭─────┬───────────────┬────────────────┬─────────────────┬───────────────┬────────────────┬──────────────────┬──────╮\n│# │   datetime    │ datetime_year  │ datetime_month  │ datetime_day  │ datetime_hour  │ datetime_minute  │ ...  │\n├─────┼───────────────┼────────────────┼─────────────────┼───────────────┼────────────────┼──────────────────┼──────┤\n│0│2yearsago│2021│12│30│1│2│...│\n╰─────┴───────────────┴────────────────┴─────────────────┴───────────────┴────────────────┴──────────────────┴──────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_datepart.html](https://www.nushell.sh/commands/docs/dfr_datepart.html)"
- name: dfr drop
  summary: '> dfr drop {flags} ...rest'
  description: "# `dfr drop` for dataframe\n\nCreates a new dataframe by dropping the selected columns.\n\n## Signature\n\n`> dfr drop {flags} ...rest`\n\n## Parameters\n\n- `...rest`: column names to be dropped\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\ndrop column a\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr dropa\n╭───┬───╮\n│# │ b │\n├───┼───┤\n│0│2│\n│1│4│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_drop.html](https://www.nushell.sh/commands/docs/dfr_drop.html)"
- name: dfr drop-duplicates
  summary: '> dfr drop-duplicates {flags} (subset)'
  description: "# `dfr drop-duplicates` for dataframe\n\nDrops duplicate values in dataframe.\n\n## Signature\n\n`> dfr drop-duplicates {flags} (subset)`\n\n## Flags\n\n- `--maintain, -m`: maintain order\n- `--last, -l`: keeps last duplicate value (by default keeps first)\n\n## Parameters\n\n- `subset`: subset of columns to drop duplicates\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\ndrop duplicates\n\n``` shiki\n> [[ab]; [12] [34] [12]] |dfr into-df|dfr drop-duplicates\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│3│4│\n│1│1│2│\n╰───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_drop-duplicates.html](https://www.nushell.sh/commands/docs/dfr_drop-duplicates.html)"
- name: dfr drop-nulls
  summary: '> dfr drop-nulls {flags} (subset)'
  description: "# `dfr drop-nulls` for dataframe\n\nDrops null values in dataframe.\n\n## Signature\n\n`> dfr drop-nulls {flags} (subset)`\n\n## Parameters\n\n- `subset`: subset of columns to drop nulls\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\ndrop null values in dataframe\n\n``` shiki\n>letdf= ([[ab]; [12] [30] [12]] |dfr into-df);\nletres= ($df.b/$df.b);\nleta= ($df|dfr with-column$res--nameres);\n$a|dfr drop-nulls\n╭───┬───┬───┬─────╮\n│# │ a │ b │ res │\n├───┼───┼───┼─────┤\n│0│1│2│1│\n│1│1│2│1│\n╰───┴───┴───┴─────╯\n```\n\ndrop null values in dataframe\n\n``` shiki\n>lets= ([120034] |dfr into-df);\n    ($s/$s) |dfr drop-nulls\n╭───┬─────────╮\n│# │ div_0_0 │\n├───┼─────────┤\n│0│1│\n│1│1│\n│2│1│\n│3│1│\n╰───┴─────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_drop-nulls.html](https://www.nushell.sh/commands/docs/dfr_drop-nulls.html)"
- name: dfr dtypes
  summary: '> dfr dtypes {flags}'
  description: "# `dfr dtypes` for dataframe\n\nShow dataframe data types.\n\n## Signature\n\n`> dfr dtypes {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nDataframe dtypes\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr dtypes\n╭───┬────────┬───────╮\n│# │ column │ dtype │\n├───┼────────┼───────┤\n│0│a│i64│\n│1│b│i64│\n╰───┴────────┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_dtypes.html](https://www.nushell.sh/commands/docs/dfr_dtypes.html)"
- name: dfr dummies
  summary: '> dfr dummies {flags}'
  description: "# `dfr dummies` for dataframe\n\nCreates a new dataframe with dummy variables.\n\n## Signature\n\n`> dfr dummies {flags} `\n\n## Flags\n\n- `--drop-first, -d`: Drop first row\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreate new dataframe with dummy variables from a dataframe\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr dummies\n╭───┬─────┬─────┬─────┬─────╮\n│# │ a_1 │ a_3 │ b_2 │ b_4 │\n├───┼─────┼─────┼─────┼─────┤\n│0│1│0│1│0│\n│1│0│1│0│1│\n╰───┴─────┴─────┴─────┴─────╯\n```\n\nCreate new dataframe with dummy variables from a series\n\n``` shiki\n> [12233] |dfr into-df|dfr dummies\n╭───┬─────┬─────┬─────╮\n│# │ 0_1 │ 0_2 │ 0_3 │\n├───┼─────┼─────┼─────┤\n│0│1│0│0│\n│1│0│1│0│\n│2│0│1│0│\n│3│0│0│1│\n│4│0│0│1│\n╰───┴─────┴─────┴─────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_dummies.html](https://www.nushell.sh/commands/docs/dfr_dummies.html)"
- name: dfr explode
  summary: '> dfr explode {flags} ...rest'
  description: "# `dfr explode` for lazyframe\n\nExplodes a dataframe or creates a explode expression.\n\n## Signature\n\n`> dfr explode {flags} ...rest`\n\n## Parameters\n\n- `...rest`: columns to explode, only applicable for dataframes\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nExplode the specified dataframe\n\n``` shiki\n> [[idnamehobbies]; [1Mercy [CyclingKnitting]] [2Bob [SkiingFootball]]] |dfr into-df|dfr explodehobbies|dfr collect\n╭───┬────┬───────┬──────────╮\n│# │ id │ name  │ hobbies  │\n├───┼────┼───────┼──────────┤\n│0│1│Mercy│Cycling│\n│1│1│Mercy│Knitting│\n│2│2│Bob│Skiing│\n│3│2│Bob│Football│\n╰───┴────┴───────┴──────────╯\n```\n\nSelect a column and explode the values\n\n``` shiki\n> [[idnamehobbies]; [1Mercy [CyclingKnitting]] [2Bob [SkiingFootball]]] |dfr into-df|dfr select (dfr colhobbies|dfr explode)\n╭───┬──────────╮\n│# │ hobbies  │\n├───┼──────────┤\n│0│Cycling│\n│1│Knitting│\n│2│Skiing│\n│3│Football│\n╰───┴──────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_explode.html](https://www.nushell.sh/commands/docs/dfr_explode.html)"
- name: dfr expr-not
  summary: '> dfr expr-not {flags}'
  description: "# `dfr expr-not` for expression\n\ncreates a not expression\n\n## Signature\n\n`> dfr expr-not {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreates a not expression\n\n``` shiki\n> (dfr cola) >2)|dfr expr-not\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_expr-not.html](https://www.nushell.sh/commands/docs/dfr_expr-not.html)"
- name: dfr fetch
  summary: '> dfr fetch {flags} (rows)'
  description: "# `dfr fetch` for lazyframe\n\ncollects the lazyframe to the selected rows.\n\n## Signature\n\n`> dfr fetch {flags} (rows)`\n\n## Parameters\n\n- `rows`: number of rows to be fetched from lazyframe\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nFetch a rows from the dataframe\n\n``` shiki\n> [[ab]; [62] [42] [22]] |dfr into-df|dfr fetch2\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│6│2│\n│1│4│2│\n╰───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_fetch.html](https://www.nushell.sh/commands/docs/dfr_fetch.html)"
- name: dfr fill-nan
  summary: '> dfr fill-nan {flags} (fill)'
  description: "# `dfr fill-nan` for lazyframe\n\nReplaces NaN values with the given expression.\n\n## Signature\n\n`> dfr fill-nan {flags} (fill)`\n\n## Parameters\n\n- `fill`: Expression to use to fill the NAN values\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nFills the NaN values with 0\n\n``` shiki\n> [12NaN3NaN] |dfr into-df|dfr fill-nan0\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│1│\n│1│2│\n│2│0│\n│3│3│\n│4│0│\n╰───┴───╯\n```\n\nFills the NaN values of a whole dataframe\n\n``` shiki\n> [[ab]; [0.21] [0.1NaN]] |dfr into-df|dfr fill-nan0\n╭───┬──────┬───╮\n│# │  a   │ b │\n├───┼──────┼───┤\n│0│0.20│1│\n│1│0.10│0│\n╰───┴──────┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_fill-nan.html](https://www.nushell.sh/commands/docs/dfr_fill-nan.html)"
- name: dfr fill-null
  summary: '> dfr fill-null {flags} (fill)'
  description: "# `dfr fill-null` for lazyframe\n\nReplaces NULL values with the given expression.\n\n## Signature\n\n`> dfr fill-null {flags} (fill)`\n\n## Parameters\n\n- `fill`: Expression to use to fill the null values\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nFills the null values by 0\n\n``` shiki\n> [12233] |dfr into-df|dfr shift2|dfr fill-null0\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│0│\n│1│0│\n│2│1│\n│3│2│\n│4│2│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_fill-null.html](https://www.nushell.sh/commands/docs/dfr_fill-null.html)"
- name: dfr filter
  summary: '> dfr filter {flags} (filter expression)'
  description: "# `dfr filter` for lazyframe\n\nFilter dataframe based in expression.\n\n## Signature\n\n`> dfr filter {flags} (filter expression)`\n\n## Parameters\n\n- `filter expression`: Expression that define the column selection\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nFilter dataframe using an expression\n\n``` shiki\n> [[ab]; [62] [42] [22]] |dfr into-df|dfr filter ((dfr cola) >=4)\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│6│2│\n│1│4│2│\n╰───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_filter.html](https://www.nushell.sh/commands/docs/dfr_filter.html)"
- name: dfr filter-with
  summary: '> dfr filter-with {flags} (mask or expression)'
  description: "# `dfr filter-with` for dataframe or lazyframe\n\nFilters dataframe using a mask or expression as reference.\n\n## Signature\n\n`> dfr filter-with {flags} (mask or expression)`\n\n## Parameters\n\n- `mask or expression`: boolean mask used to filter data\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nFilter dataframe using a bool mask\n\n``` shiki\n>letmask= ([truefalse] |dfr into-df);\n    [[ab]; [12] [34]] |dfr into-df|dfr filter-with$mask\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n╰───┴───┴───╯\n```\n\nFilter dataframe using an expression\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr filter-with ((dfr cola) >1)\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│3│4│\n╰───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_filter-with.html](https://www.nushell.sh/commands/docs/dfr_filter-with.html)"
- name: dfr first
  summary: '> dfr first {flags} (rows)'
  description: "# `dfr first` for dataframe\n\nShow only the first number of rows or create a first expression\n\n## Signature\n\n`> dfr first {flags} (rows)`\n\n## Parameters\n\n- `rows`: starting from the front, the number of rows to return\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturn the first row of a dataframe\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr first\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n╰───┴───┴───╯\n```\n\nReturn the first two rows of a dataframe\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr first2\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n│1│3│4│\n╰───┴───┴───╯\n```\n\nCreates a first expression from a column\n\n``` shiki\n>dfr cola|dfr first\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_first.html](https://www.nushell.sh/commands/docs/dfr_first.html)"
- name: dfr flatten
  summary: '> dfr flatten {flags} ...rest'
  description: "# `dfr flatten` for lazyframe\n\nAn alias for dfr explode\n\n## Signature\n\n`> dfr flatten {flags} ...rest`\n\n## Parameters\n\n- `...rest`: columns to flatten, only applicable for dataframes\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nFlatten the specified dataframe\n\n``` shiki\n> [[idnamehobbies]; [1Mercy [CyclingKnitting]] [2Bob [SkiingFootball]]] |dfr into-df|dfr flattenhobbies|dfr collect\n╭───┬────┬───────┬──────────╮\n│# │ id │ name  │ hobbies  │\n├───┼────┼───────┼──────────┤\n│0│1│Mercy│Cycling│\n│1│1│Mercy│Knitting│\n│2│2│Bob│Skiing│\n│3│2│Bob│Football│\n╰───┴────┴───────┴──────────╯\n```\n\nSelect a column and flatten the values\n\n``` shiki\n> [[idnamehobbies]; [1Mercy [CyclingKnitting]] [2Bob [SkiingFootball]]] |dfr into-df|dfr select (dfr colhobbies|dfr flatten)\n╭───┬──────────╮\n│# │ hobbies  │\n├───┼──────────┤\n│0│Cycling│\n│1│Knitting│\n│2│Skiing│\n│3│Football│\n╰───┴──────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_flatten.html](https://www.nushell.sh/commands/docs/dfr_flatten.html)"
- name: dfr get
  summary: '> dfr get {flags} ...rest'
  description: "# `dfr get` for dataframe\n\nCreates dataframe with the selected columns.\n\n## Signature\n\n`> dfr get {flags} ...rest`\n\n## Parameters\n\n- `...rest`: column names to sort dataframe\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns the selected column\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr geta\n╭───┬───╮\n│# │ a │\n├───┼───┤\n│0│1│\n│1│3│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get.html](https://www.nushell.sh/commands/docs/dfr_get.html)"
- name: dfr get-day
  summary: '> dfr get-day {flags}'
  description: "# `dfr get-day` for dataframe\n\nGets day from date.\n\n## Signature\n\n`> dfr get-day {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns day from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-day\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│4│\n│1│4│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-day.html](https://www.nushell.sh/commands/docs/dfr_get-day.html)"
- name: dfr get-hour
  summary: '> dfr get-hour {flags}'
  description: "# `dfr get-hour` for dataframe\n\nGets hour from date.\n\n## Signature\n\n`> dfr get-hour {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns hour from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-hour\n╭───┬────╮\n│# │ 0  │\n├───┼────┤\n│0│16│\n│1│16│\n╰───┴────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-hour.html](https://www.nushell.sh/commands/docs/dfr_get-hour.html)"
- name: dfr get-minute
  summary: '> dfr get-minute {flags}'
  description: "# `dfr get-minute` for dataframe\n\nGets minute from date.\n\n## Signature\n\n`> dfr get-minute {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns minute from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-minute\n╭───┬────╮\n│# │ 0  │\n├───┼────┤\n│0│39│\n│1│39│\n╰───┴────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-minute.html](https://www.nushell.sh/commands/docs/dfr_get-minute.html)"
- name: dfr get-month
  summary: '> dfr get-month {flags}'
  description: "# `dfr get-month` for dataframe\n\nGets month from date.\n\n## Signature\n\n`> dfr get-month {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns month from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-month\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│8│\n│1│8│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-month.html](https://www.nushell.sh/commands/docs/dfr_get-month.html)"
- name: dfr get-nanosecond
  summary: '> dfr get-nanosecond {flags}'
  description: "# `dfr get-nanosecond` for dataframe\n\nGets nanosecond from date.\n\n## Signature\n\n`> dfr get-nanosecond {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns nanosecond from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-nanosecond\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│0│\n│1│0│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-nanosecond.html](https://www.nushell.sh/commands/docs/dfr_get-nanosecond.html)"
- name: dfr get-ordinal
  summary: '> dfr get-ordinal {flags}'
  description: "# `dfr get-ordinal` for dataframe\n\nGets ordinal from date.\n\n## Signature\n\n`> dfr get-ordinal {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns ordinal from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-ordinal\n╭───┬─────╮\n│# │  0  │\n├───┼─────┤\n│0│217│\n│1│217│\n╰───┴─────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-ordinal.html](https://www.nushell.sh/commands/docs/dfr_get-ordinal.html)"
- name: dfr get-second
  summary: '> dfr get-second {flags}'
  description: "# `dfr get-second` for dataframe\n\nGets second from date.\n\n## Signature\n\n`> dfr get-second {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns second from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-second\n╭───┬────╮\n│# │ 0  │\n├───┼────┤\n│0│18│\n│1│18│\n╰───┴────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-second.html](https://www.nushell.sh/commands/docs/dfr_get-second.html)"
- name: dfr get-week
  summary: '> dfr get-week {flags}'
  description: "# `dfr get-week` for dataframe\n\nGets week from date.\n\n## Signature\n\n`> dfr get-week {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns week from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-week\n╭───┬────╮\n│# │ 0  │\n├───┼────┤\n│0│32│\n│1│32│\n╰───┴────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-week.html](https://www.nushell.sh/commands/docs/dfr_get-week.html)"
- name: dfr get-weekday
  summary: '> dfr get-weekday {flags}'
  description: "# `dfr get-weekday` for dataframe\n\nGets weekday from date.\n\n## Signature\n\n`> dfr get-weekday {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns weekday from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-weekday\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│2│\n│1│2│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-weekday.html](https://www.nushell.sh/commands/docs/dfr_get-weekday.html)"
- name: dfr get-year
  summary: '> dfr get-year {flags}'
  description: "# `dfr get-year` for dataframe\n\nGets year from date.\n\n## Signature\n\n`> dfr get-year {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns year from a date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr get-year\n╭───┬──────╮\n│# │  0   │\n├───┼──────┤\n│0│2020│\n│1│2020│\n╰───┴──────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_get-year.html](https://www.nushell.sh/commands/docs/dfr_get-year.html)"
- name: dfr group-by
  summary: '> dfr group-by {flags} ...rest'
  description: "# `dfr group-by` for lazyframe\n\nCreates a group-by object that can be used for other aggregations.\n\n## Signature\n\n`> dfr group-by {flags} ...rest`\n\n## Parameters\n\n- `...rest`: Expression(s) that define the lazy group-by\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nGroup by and perform an aggregation\n\n``` shiki\n> [[ab]; [12] [14] [26] [24]]\n|dfr into-df\n|dfr group-bya\n|dfr agg [\n        (dfr colb|dfr min|dfr as\"b_min\")\n        (dfr colb|dfr max|dfr as\"b_max\")\n        (dfr colb|dfr sum|dfr as\"b_sum\")\n     ]\n╭───┬───┬───────┬───────┬───────╮\n│# │ a │ b_min │ b_max │ b_sum │\n├───┼───┼───────┼───────┼───────┤\n│0│1│2│4│6│\n│1│2│4│6│10│\n╰───┴───┴───────┴───────┴───────╯\n```\n\nGroup by and perform an aggregation\n\n``` shiki\n> [[ab]; [12] [14] [26] [24]]\n|dfr into-lazy\n|dfr group-bya\n|dfr agg [\n        (dfr colb|dfr min|dfr as\"b_min\")\n        (dfr colb|dfr max|dfr as\"b_max\")\n        (dfr colb|dfr sum|dfr as\"b_sum\")\n     ]\n|dfr collect\n╭───┬───┬───────┬───────┬───────╮\n│# │ a │ b_min │ b_max │ b_sum │\n├───┼───┼───────┼───────┼───────┤\n│0│1│2│4│6│\n│1│2│4│6│10│\n╰───┴───┴───────┴───────┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_group-by.html](https://www.nushell.sh/commands/docs/dfr_group-by.html)"
- name: dfr implode
  summary: '> dfr implode {flags}'
  description: "# `dfr implode` for expression\n\nAggregates a group to a Series\n\n## Signature\n\n`> dfr implode {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\n``` shiki\n>\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_implode.html](https://www.nushell.sh/commands/docs/dfr_implode.html)"
- name: dfr into-df
  summary: '> dfr into-df {flags}'
  description: "# `dfr into-df` for dataframe\n\nConverts a list, table or record into a dataframe.\n\n## Signature\n\n`> dfr into-df {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nTakes a dictionary and creates a dataframe\n\n``` shiki\n> [[ab];[12] [34]] |dfr into-df\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n│1│3│4│\n╰───┴───┴───╯\n```\n\nTakes a list of tables and creates a dataframe\n\n``` shiki\n> [[12a] [34b] [56c]] |dfr into-df\n╭───┬───┬───┬───╮\n│# │ 0 │ 1 │ 2 │\n├───┼───┼───┼───┤\n│0│1│2│a│\n│1│3│4│b│\n│2│5│6│c│\n╰───┴───┴───┴───╯\n```\n\nTakes a list and creates a dataframe\n\n``` shiki\n> [abc] |dfr into-df\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│a│\n│1│b│\n│2│c│\n╰───┴───╯\n```\n\nTakes a list of booleans and creates a dataframe\n\n``` shiki\n> [truetruefalse] |dfr into-df\n╭───┬───────╮\n│# │   0   │\n├───┼───────┤\n│0│true│\n│1│true│\n│2│false│\n╰───┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_into-df.html](https://www.nushell.sh/commands/docs/dfr_into-df.html)"
- name: dfr into-lazy
  summary: '> dfr into-lazy {flags}'
  description: "# `dfr into-lazy` for lazyframe\n\nConverts a dataframe into a lazy dataframe.\n\n## Signature\n\n`> dfr into-lazy {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nTakes a dictionary and creates a lazy dataframe\n\n``` shiki\n> [[ab];[12] [34]] |dfr into-lazy\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_into-lazy.html](https://www.nushell.sh/commands/docs/dfr_into-lazy.html)"
- name: dfr into-nu
  summary: '> dfr into-nu {flags}'
  description: "# `dfr into-nu` for dataframe\n\nConverts a dataframe or an expression into into nushell value for access and exploration.\n\n## Signature\n\n`> dfr into-nu {flags} `\n\n## Flags\n\n- `--rows, -n {number}`: number of rows to be shown\n- `--tail, -t`: shows tail rows\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nShows head rows from dataframe\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr into-nu\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n│1│3│4│\n╰───┴───┴───╯\n```\n\nShows tail rows from dataframe\n\n``` shiki\n> [[ab]; [12] [56] [34]] |dfr into-df|dfr into-nu-t-n1\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│2│3│4│\n╰───┴───┴───╯\n```\n\nConvert a col expression into a nushell value\n\n``` shiki\n>dfr cola|dfr into-nu\n╭───────┬────────╮\n│expr│column│\n│value│a│\n╰───────┴────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_into-nu.html](https://www.nushell.sh/commands/docs/dfr_into-nu.html)"
- name: dfr is-duplicated
  summary: '> dfr is-duplicated {flags}'
  description: "# `dfr is-duplicated` for dataframe\n\nCreates mask indicating duplicated values.\n\n## Signature\n\n`> dfr is-duplicated {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreate mask indicating duplicated values\n\n``` shiki\n> [5666888] |dfr into-df|dfr is-duplicated\n╭───┬───────────────╮\n│# │ is_duplicated │\n├───┼───────────────┤\n│0│false│\n│1│true│\n│2│true│\n│3│true│\n│4│true│\n│5│true│\n│6│true│\n╰───┴───────────────╯\n```\n\nCreate mask indicating duplicated rows in a dataframe\n\n``` shiki\n> [[a, b]; [12] [12] [33] [33] [11]] |dfr into-df|dfr is-duplicated\n╭───┬───────────────╮\n│# │ is_duplicated │\n├───┼───────────────┤\n│0│true│\n│1│true│\n│2│true│\n│3│true│\n│4│false│\n╰───┴───────────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_is-duplicated.html](https://www.nushell.sh/commands/docs/dfr_is-duplicated.html)"
- name: dfr is-in
  summary: '> dfr is-in {flags} (list)'
  description: "# `dfr is-in` for expression\n\nCreates an is-in expression.\n\n## Signature\n\n`> dfr is-in {flags} (list)`\n\n## Parameters\n\n- `list`: List to check if values are in\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreates a is-in expression\n\n``` shiki\n>letdf= ([[ab]; [one1] [two2] [three3]] |dfr into-df);\n$df|dfr with-column (dfr cola|dfr is-in [onetwo] |dfr asa_in)\n╭───┬───────┬───┬───────╮\n│# │   a   │ b │ a_in  │\n├───┼───────┼───┼───────┤\n│0│one│1│true│\n│1│two│2│true│\n│2│three│3│false│\n╰───┴───────┴───┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_is-in.html](https://www.nushell.sh/commands/docs/dfr_is-in.html)"
- name: dfr is-not-null
  summary: '> dfr is-not-null {flags}'
  description: "# `dfr is-not-null` for dataframe\n\nCreates mask where value is not null.\n\n## Signature\n\n`> dfr is-not-null {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreate mask where values are not null\n\n``` shiki\n>lets= ([5608] |dfr into-df);\nletres= ($s/$s);\n$res|dfr is-not-null\n╭───┬─────────────╮\n│# │ is_not_null │\n├───┼─────────────┤\n│0│true│\n│1│true│\n│2│false│\n│3│true│\n╰───┴─────────────╯\n```\n\nCreates a is not null expression from a column\n\n``` shiki\n>dfr cola|dfr is-not-null\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_is-not-null.html](https://www.nushell.sh/commands/docs/dfr_is-not-null.html)"
- name: dfr is-null
  summary: '> dfr is-null {flags}'
  description: "# `dfr is-null` for dataframe\n\nCreates mask where value is null.\n\n## Signature\n\n`> dfr is-null {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreate mask where values are null\n\n``` shiki\n>lets= ([5608] |dfr into-df);\nletres= ($s/$s);\n$res|dfr is-null\n╭───┬─────────╮\n│# │ is_null │\n├───┼─────────┤\n│0│false│\n│1│false│\n│2│true│\n│3│false│\n╰───┴─────────╯\n```\n\nCreates a is null expression from a column\n\n``` shiki\n>dfr cola|dfr is-null\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_is-null.html](https://www.nushell.sh/commands/docs/dfr_is-null.html)"
- name: dfr is-unique
  summary: '> dfr is-unique {flags}'
  description: "# `dfr is-unique` for dataframe\n\nCreates mask indicating unique values.\n\n## Signature\n\n`> dfr is-unique {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreate mask indicating unique values\n\n``` shiki\n> [5666888] |dfr into-df|dfr is-unique\n╭───┬───────────╮\n│# │ is_unique │\n├───┼───────────┤\n│0│true│\n│1│false│\n│2│false│\n│3│false│\n│4│false│\n│5│false│\n│6│false│\n╰───┴───────────╯\n```\n\nCreate mask indicating duplicated rows in a dataframe\n\n``` shiki\n> [[a, b]; [12] [12] [33] [33] [11]] |dfr into-df|dfr is-unique\n╭───┬───────────╮\n│# │ is_unique │\n├───┼───────────┤\n│0│false│\n│1│false│\n│2│false│\n│3│false│\n│4│true│\n╰───┴───────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_is-unique.html](https://www.nushell.sh/commands/docs/dfr_is-unique.html)"
- name: dfr join
  summary: '> dfr join {flags} (other) (left_on) (right_on)'
  description: "# `dfr join` for lazyframe\n\nJoins a lazy frame with other lazy frame.\n\n## Signature\n\n`> dfr join {flags} (other) (left_on) (right_on)`\n\n## Flags\n\n- `--inner, -i`: inner joing between lazyframes (default)\n- `--left, -l`: left join between lazyframes\n- `--outer, -o`: outer join between lazyframes\n- `--cross, -c`: cross join between lazyframes\n- `--suffix, -s {string}`: Suffix to use on columns with same name\n\n## Parameters\n\n- `other`: LazyFrame to join with\n- `left_on`: Left column(s) to join on\n- `right_on`: Right column(s) to join on\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nJoin two lazy dataframes\n\n``` shiki\n>letdf_a= ([[abc];[1\"a\"0] [2\"b\"1] [1\"c\"2] [1\"c\"3]] |dfr into-lazy);\nletdf_b= ([[\"foo\"\"bar\"\"ham\"];[1\"a\"\"let\"] [2\"c\"\"var\"] [3\"c\"\"const\"]] |dfr into-lazy);\n$df_a|dfr join$df_bafoo|dfr collect\n╭───┬───┬───┬───┬─────┬─────╮\n│# │ a │ b │ c │ bar │ ham │\n├───┼───┼───┼───┼─────┼─────┤\n│0│1│a│0│a│let│\n│1│2│b│1│c│var│\n│2│1│c│2│a│let│\n│3│1│c│3│a│let│\n╰───┴───┴───┴───┴─────┴─────╯\n```\n\nJoin one eager dataframe with a lazy dataframe\n\n``` shiki\n>letdf_a= ([[abc];[1\"a\"0] [2\"b\"1] [1\"c\"2] [1\"c\"3]] |dfr into-df);\nletdf_b= ([[\"foo\"\"bar\"\"ham\"];[1\"a\"\"let\"] [2\"c\"\"var\"] [3\"c\"\"const\"]] |dfr into-lazy);\n$df_a|dfr join$df_bafoo\n╭───┬───┬───┬───┬─────┬─────╮\n│# │ a │ b │ c │ bar │ ham │\n├───┼───┼───┼───┼─────┼─────┤\n│0│1│a│0│a│let│\n│1│2│b│1│c│var│\n│2│1│c│2│a│let│\n│3│1│c│3│a│let│\n╰───┴───┴───┴───┴─────┴─────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_join.html](https://www.nushell.sh/commands/docs/dfr_join.html)"
- name: dfr last
  summary: '> dfr last {flags} (rows)'
  description: "# `dfr last` for dataframe\n\nCreates new dataframe with tail rows or creates a last expression.\n\n## Signature\n\n`> dfr last {flags} (rows)`\n\n## Parameters\n\n- `rows`: Number of rows for tail\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreate new dataframe with last rows\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr last1\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│3│4│\n╰───┴───┴───╯\n```\n\nCreates a last expression from a column\n\n``` shiki\n>dfr cola|dfr last\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_last.html](https://www.nushell.sh/commands/docs/dfr_last.html)"
- name: dfr lit
  summary: '> dfr lit {flags} (literal)'
  description: "# `dfr lit` for expression\n\nCreates a literal expression.\n\n## Signature\n\n`> dfr lit {flags} (literal)`\n\n## Parameters\n\n- `literal`: literal to construct the expression\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreated a literal expression and converts it to a nu object\n\n``` shiki\n>dfr lit2|dfr into-nu\n╭───────┬─────────╮\n│expr│literal│\n│value│2│\n╰───────┴─────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_lit.html](https://www.nushell.sh/commands/docs/dfr_lit.html)"
- name: dfr lowercase
  summary: '> dfr lowercase {flags}'
  description: "# `dfr lowercase` for dataframe\n\nLowercase the strings in the column.\n\n## Signature\n\n`> dfr lowercase {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nModifies strings to lowercase\n\n``` shiki\n> [AbcaBcabC] |dfr into-df|dfr lowercase\n╭───┬─────╮\n│# │  0  │\n├───┼─────┤\n│0│abc│\n│1│abc│\n│2│abc│\n╰───┴─────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_lowercase.html](https://www.nushell.sh/commands/docs/dfr_lowercase.html)"
- name: dfr ls
  summary: '> dfr ls {flags}'
  description: "# `dfr ls` for dataframe\n\nLists stored dataframes.\n\n## Signature\n\n`> dfr ls {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreates a new dataframe and shows it in the dataframe list\n\n``` shiki\n>lettest= ([[ab];[12] [34]] |dfr into-df);\nls\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_ls.html](https://www.nushell.sh/commands/docs/dfr_ls.html)"
- name: dfr max
  summary: '> dfr max {flags}'
  description: "# `dfr max` for expression\n\nCreates a max expression or aggregates columns to their max value\n\n## Signature\n\n`> dfr max {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nMax value from columns in a dataframe\n\n``` shiki\n> [[ab]; [62] [14] [41]] |dfr into-df|dfr max\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│6│4│\n╰───┴───┴───╯\n```\n\nMax aggregation for a group-by\n\n``` shiki\n> [[ab]; [one2] [one4] [two1]]\n|dfr into-df\n|dfr group-bya\n|dfr agg (dfr colb|dfr max)\n╭───┬─────┬───╮\n│# │  a  │ b │\n├───┼─────┼───┤\n│0│one│4│\n│1│two│1│\n╰───┴─────┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_max.html](https://www.nushell.sh/commands/docs/dfr_max.html)"
- name: dfr mean
  summary: '> dfr mean {flags}'
  description: "# `dfr mean` for expression\n\nCreates a mean expression for an aggregation or aggregates columns to their mean value\n\n## Signature\n\n`> dfr mean {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nMean value from columns in a dataframe\n\n``` shiki\n> [[ab]; [62] [42] [22]] |dfr into-df|dfr mean\n╭───┬──────┬──────╮\n│# │  a   │  b   │\n├───┼──────┼──────┤\n│0│4.00│2.00│\n╰───┴──────┴──────╯\n```\n\nMean aggregation for a group-by\n\n``` shiki\n> [[ab]; [one2] [one4] [two1]]\n|dfr into-df\n|dfr group-bya\n|dfr agg (dfr colb|dfr mean)\n╭───┬─────┬──────╮\n│# │  a  │  b   │\n├───┼─────┼──────┤\n│0│one│3.00│\n│1│two│1.00│\n╰───┴─────┴──────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_mean.html](https://www.nushell.sh/commands/docs/dfr_mean.html)"
- name: dfr median
  summary: '> dfr median {flags}'
  description: "# `dfr median` for lazyframe\n\nAggregates columns to their median value\n\n## Signature\n\n`> dfr median {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nMedian value from columns in a dataframe\n\n``` shiki\n> [[ab]; [62] [42] [22]] |dfr into-df|dfr median\n╭───┬──────┬──────╮\n│# │  a   │  b   │\n├───┼──────┼──────┤\n│0│4.00│2.00│\n╰───┴──────┴──────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_median.html](https://www.nushell.sh/commands/docs/dfr_median.html)"
- name: dfr melt
  summary: '> dfr melt {flags}'
  description: "# `dfr melt` for dataframe\n\nUnpivot a DataFrame from wide to long format.\n\n## Signature\n\n`> dfr melt {flags} `\n\n## Flags\n\n- `--columns, -c {table}`: column names for melting\n- `--values, -v {table}`: column names used as value columns\n- `--variable-name, -r {string}`: optional name for variable column\n- `--value-name, -l {string}`: optional name for value column\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nmelt dataframe\n\n``` shiki\n> [[abcd]; [x14a] [y25b] [z36c]] |dfr into-df|dfr melt-c [bc] -v [ad]\n╭───┬───┬───┬──────────┬───────╮\n│# │ b │ c │ variable │ value │\n├───┼───┼───┼──────────┼───────┤\n│0│1│4│a│x│\n│1│2│5│a│y│\n│2│3│6│a│z│\n│3│1│4│d│a│\n│4│2│5│d│b│\n│5│3│6│d│c│\n╰───┴───┴───┴──────────┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_melt.html](https://www.nushell.sh/commands/docs/dfr_melt.html)"
- name: dfr min
  summary: '> dfr min {flags}'
  description: "# `dfr min` for expression\n\nCreates a min expression or aggregates columns to their min value\n\n## Signature\n\n`> dfr min {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nMin value from columns in a dataframe\n\n``` shiki\n> [[ab]; [62] [14] [41]] |dfr into-df|dfr min\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│1│\n╰───┴───┴───╯\n```\n\nMin aggregation for a group-by\n\n``` shiki\n> [[ab]; [one2] [one4] [two1]]\n|dfr into-df\n|dfr group-bya\n|dfr agg (dfr colb|dfr min)\n╭───┬─────┬───╮\n│# │  a  │ b │\n├───┼─────┼───┤\n│0│one│2│\n│1│two│1│\n╰───┴─────┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_min.html](https://www.nushell.sh/commands/docs/dfr_min.html)"
- name: dfr n-unique
  summary: '> dfr n-unique {flags}'
  description: "# `dfr n-unique` for dataframe\n\nCounts unique values.\n\n## Signature\n\n`> dfr n-unique {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCounts unique values\n\n``` shiki\n> [1122334] |dfr into-df|dfr n-unique\n╭───┬──────────────╮\n│# │ count_unique │\n├───┼──────────────┤\n│0│4│\n╰───┴──────────────╯\n```\n\nCreates a is n-unique expression from a column\n\n``` shiki\n>dfr cola|dfr n-unique\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_n-unique.html](https://www.nushell.sh/commands/docs/dfr_n-unique.html)"
- name: dfr not
  summary: '> dfr not {flags}'
  description: "# `dfr not` for dataframe\n\nInverts boolean mask.\n\n## Signature\n\n`> dfr not {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nInverts boolean mask\n\n``` shiki\n> [truefalsetrue] |dfr into-df|dfr not\n╭───┬───────╮\n│# │   0   │\n├───┼───────┤\n│0│false│\n│1│true│\n│2│false│\n╰───┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_not.html](https://www.nushell.sh/commands/docs/dfr_not.html)"
- name: dfr open
  summary: '> dfr open {flags} (file)'
  description: "# `dfr open` for dataframe\n\nOpens CSV, JSON, JSON lines, arrow, avro, or parquet file to create dataframe.\n\n## Signature\n\n`> dfr open {flags} (file)`\n\n## Flags\n\n- `--lazy, -l`: creates a lazy dataframe\n- `--type, -t {string}`: File type: csv, tsv, json, parquet, arrow, avro. If omitted, derive from file extension\n- `--delimiter, -d {string}`: file delimiter character. CSV file\n- `--no-header, -`: Indicates if file doesn't have header. CSV file\n- `--infer-schema, - {number}`: Number of rows to infer the schema of the file. CSV file\n- `--skip-rows, - {number}`: Number of rows to skip from file. CSV file\n- `--columns, - {list<string>}`: Columns to be selected from csv file. CSV and Parquet file\n\n## Parameters\n\n- `file`: file path to load values from\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nTakes a file name and creates a dataframe\n\n``` shiki\n>dfr opentest.csv\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_open.html](https://www.nushell.sh/commands/docs/dfr_open.html)"
- name: dfr otherwise
  summary: '> dfr otherwise {flags} (otherwise expression)'
  description: "# `dfr otherwise` for expression\n\ncompletes a when expression.\n\n## Signature\n\n`> dfr otherwise {flags} (otherwise expression)`\n\n## Parameters\n\n- `otherwise expression`: expression to apply when no when predicate matches\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreate a when conditions\n\n``` shiki\n>dfr when ((dfr cola) >2) 4|dfr otherwise5\n```\n\nCreate a when conditions\n\n``` shiki\n>dfr when ((dfr cola) >2) 4|dfr when ((dfr cola) <0) 6|dfr otherwise0\n```\n\nCreate a new column for the dataframe\n\n``` shiki\n> [[ab]; [62] [14] [41]]\n|dfr into-lazy\n|dfr with-column (\ndfr when ((dfr cola) >2) 4|dfr otherwise5|dfr asc\n     )\n|dfr with-column (\ndfr when ((dfr cola) >5) 10|dfr when ((dfr cola) <2) 6|dfr otherwise0|dfr asd\n     )\n|dfr collect\n╭───┬───┬───┬───┬────╮\n│# │ a │ b │ c │ d  │\n├───┼───┼───┼───┼────┤\n│0│6│2│4│10│\n│1│1│4│5│6│\n│2│4│1│4│0│\n╰───┴───┴───┴───┴────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_otherwise.html](https://www.nushell.sh/commands/docs/dfr_otherwise.html)"
- name: dfr quantile
  summary: '> dfr quantile {flags} (quantile)'
  description: "# `dfr quantile` for lazyframe\n\nAggregates the columns to the selected quantile.\n\n## Signature\n\n`> dfr quantile {flags} (quantile)`\n\n## Parameters\n\n- `quantile`: quantile value for quantile operation\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nquantile value from columns in a dataframe\n\n``` shiki\n> [[ab]; [62] [14] [41]] |dfr into-df|dfr quantile0.5\n╭───┬──────┬──────╮\n│# │  a   │  b   │\n├───┼──────┼──────┤\n│0│4.00│2.00│\n╰───┴──────┴──────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_quantile.html](https://www.nushell.sh/commands/docs/dfr_quantile.html)"
- name: dfr query
  summary: '> dfr query {flags} (sql)'
  description: "# `dfr query` for dataframe\n\nQuery dataframe using SQL. Note: The dataframe is always named 'df' in your query's from clause.\n\n## Signature\n\n`> dfr query {flags} (sql)`\n\n## Parameters\n\n- `sql`: sql query\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nQuery dataframe using SQL\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr query'select a from df'\n╭───┬───╮\n│# │ a │\n├───┼───┤\n│0│1│\n│1│3│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_query.html](https://www.nushell.sh/commands/docs/dfr_query.html)"
- name: dfr rename
  summary: '> dfr rename {flags} (columns) (new names)'
  description: "# `dfr rename` for dataframe or lazyframe\n\nRename a dataframe column.\n\n## Signature\n\n`> dfr rename {flags} (columns) (new names)`\n\n## Parameters\n\n- `columns`: Column(s) to be renamed. A string or list of strings\n- `new names`: New names for the selected column(s). A string or list of strings\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nRenames a series\n\n``` shiki\n> [5678] |dfr into-df|dfr rename'0'new_name\n╭───┬──────────╮\n│# │ new_name │\n├───┼──────────┤\n│0│5│\n│1│6│\n│2│7│\n│3│8│\n╰───┴──────────╯\n```\n\nRenames a dataframe column\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr renameaa_new\n╭───┬───────┬───╮\n│# │ a_new │ b │\n├───┼───────┼───┤\n│0│1│2│\n│1│3│4│\n╰───┴───────┴───╯\n```\n\nRenames two dataframe columns\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr rename [ab] [a_newb_new]\n╭───┬───────┬───────╮\n│# │ a_new │ b_new │\n├───┼───────┼───────┤\n│0│1│2│\n│1│3│4│\n╰───┴───────┴───────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_rename.html](https://www.nushell.sh/commands/docs/dfr_rename.html)"
- name: dfr replace
  summary: '> dfr replace {flags}'
  description: "# `dfr replace` for dataframe\n\nReplace the leftmost (sub)string by a regex pattern.\n\n## Signature\n\n`> dfr replace {flags} `\n\n## Flags\n\n- `--pattern, -p {string}`: Regex pattern to be matched\n- `--replace, -r {string}`: replacing string\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReplaces string\n\n``` shiki\n> [abcabcabc] |dfr into-df|dfr replace-pab-rAB\n╭───┬─────╮\n│# │  0  │\n├───┼─────┤\n│0│ABc│\n│1│ABc│\n│2│ABc│\n╰───┴─────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_replace.html](https://www.nushell.sh/commands/docs/dfr_replace.html)"
- name: dfr replace-all
  summary: '> dfr replace-all {flags}'
  description: "# `dfr replace-all` for dataframe\n\nReplace all (sub)strings by a regex pattern.\n\n## Signature\n\n`> dfr replace-all {flags} `\n\n## Flags\n\n- `--pattern, -p {string}`: Regex pattern to be matched\n- `--replace, -r {string}`: replacing string\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReplaces string\n\n``` shiki\n> [abacabacabac] |dfr into-df|dfr replace-all-pa-rA\n╭───┬──────╮\n│# │  0   │\n├───┼──────┤\n│0│AbAc│\n│1│AbAc│\n│2│AbAc│\n╰───┴──────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_replace-all.html](https://www.nushell.sh/commands/docs/dfr_replace-all.html)"
- name: dfr reverse
  summary: '> dfr reverse {flags}'
  description: "# `dfr reverse` for lazyframe\n\nReverses the LazyFrame\n\n## Signature\n\n`> dfr reverse {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReverses the dataframe\n\n``` shiki\n> [[ab]; [62] [42] [22]] |dfr into-df|dfr reverse\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│2│2│\n│1│4│2│\n│2│6│2│\n╰───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_reverse.html](https://www.nushell.sh/commands/docs/dfr_reverse.html)"
- name: dfr rolling
  summary: '> dfr rolling {flags} (type) (window)'
  description: "# `dfr rolling` for dataframe\n\nRolling calculation for a series.\n\n## Signature\n\n`> dfr rolling {flags} (type) (window)`\n\n## Parameters\n\n- `type`: rolling operation\n- `window`: Window size for rolling\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nRolling sum for a series\n\n``` shiki\n> [12345] |dfr into-df|dfr rollingsum2|dfr drop-nulls\n╭───┬───────────────╮\n│# │ 0_rolling_sum │\n├───┼───────────────┤\n│0│3│\n│1│5│\n│2│7│\n│3│9│\n╰───┴───────────────╯\n```\n\nRolling max for a series\n\n``` shiki\n> [12345] |dfr into-df|dfr rollingmax2|dfr drop-nulls\n╭───┬───────────────╮\n│# │ 0_rolling_max │\n├───┼───────────────┤\n│0│2│\n│1│3│\n│2│4│\n│3│5│\n╰───┴───────────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_rolling.html](https://www.nushell.sh/commands/docs/dfr_rolling.html)"
- name: dfr sample
  summary: '> dfr sample {flags}'
  description: "# `dfr sample` for dataframe\n\nCreate sample dataframe.\n\n## Signature\n\n`> dfr sample {flags} `\n\n## Flags\n\n- `--n-rows, -n {int}`: number of rows to be taken from dataframe\n- `--fraction, -f {number}`: fraction of dataframe to be taken\n- `--seed, -s {number}`: seed for the selection\n- `--replace, -e`: sample with replace\n- `--shuffle, -u`: shuffle sample\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSample rows from dataframe\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr sample-n1\n```\n\nShows sample row using fraction and replace\n\n``` shiki\n> [[ab]; [12] [34] [56]] |dfr into-df|dfr sample-f0.5-e\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_sample.html](https://www.nushell.sh/commands/docs/dfr_sample.html)"
- name: dfr select
  summary: '> dfr select {flags} ...rest'
  description: "# `dfr select` for lazyframe\n\nSelects columns from lazyframe.\n\n## Signature\n\n`> dfr select {flags} ...rest`\n\n## Parameters\n\n- `...rest`: Expression(s) that define the column selection\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSelect a column from the dataframe\n\n``` shiki\n> [[ab]; [62] [42] [22]] |dfr into-df|dfr selecta\n╭───┬───╮\n│# │ a │\n├───┼───┤\n│0│6│\n│1│4│\n│2│2│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_select.html](https://www.nushell.sh/commands/docs/dfr_select.html)"
- name: dfr set
  summary: '> dfr set {flags} (value)'
  description: "# `dfr set` for dataframe\n\nSets value where given mask is true.\n\n## Signature\n\n`> dfr set {flags} (value)`\n\n## Flags\n\n- `--mask, -m {any}`: mask indicating insertions\n\n## Parameters\n\n- `value`: value to be inserted in series\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nShifts the values by a given period\n\n``` shiki\n>lets= ([12233] |dfr into-df|dfr shift2);\nletmask= ($s|dfr is-null);\n$s|dfr set0--mask$mask\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│0│\n│1│0│\n│2│1│\n│3│2│\n│4│2│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_set.html](https://www.nushell.sh/commands/docs/dfr_set.html)"
- name: dfr set-with-idx
  summary: '> dfr set-with-idx {flags} (value)'
  description: "# `dfr set-with-idx` for dataframe\n\nSets value in the given index.\n\n## Signature\n\n`> dfr set-with-idx {flags} (value)`\n\n## Flags\n\n- `--indices, -i {any}`: list of indices indicating where to set the value\n\n## Parameters\n\n- `value`: value to be inserted in series\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSet value in selected rows from series\n\n``` shiki\n>letseries= ([415243] |dfr into-df);\nletindices= ([02] |dfr into-df);\n$series|dfr set-with-idx6-i$indices\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│6│\n│1│1│\n│2│6│\n│3│2│\n│4│4│\n│5│3│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_set-with-idx.html](https://www.nushell.sh/commands/docs/dfr_set-with-idx.html)"
- name: dfr shape
  summary: '> dfr shape {flags}'
  description: "# `dfr shape` for dataframe\n\nShows column and row size for a dataframe.\n\n## Signature\n\n`> dfr shape {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nShows row and column shape\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr shape\n╭───┬──────┬─────────╮\n│# │ rows │ columns │\n├───┼──────┼─────────┤\n│0│2│2│\n╰───┴──────┴─────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_shape.html](https://www.nushell.sh/commands/docs/dfr_shape.html)"
- name: dfr shift
  summary: '> dfr shift {flags} (period)'
  description: "# `dfr shift` for dataframe or lazyframe\n\nShifts the values by a given period.\n\n## Signature\n\n`> dfr shift {flags} (period)`\n\n## Flags\n\n- `--fill, -f {any}`: Expression used to fill the null values (lazy df)\n\n## Parameters\n\n- `period`: shift period\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nShifts the values by a given period\n\n``` shiki\n> [12233] |dfr into-df|dfr shift2|dfr drop-nulls\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│1│\n│1│2│\n│2│2│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_shift.html](https://www.nushell.sh/commands/docs/dfr_shift.html)"
- name: dfr slice
  summary: '> dfr slice {flags} (offset) (size)'
  description: "# `dfr slice` for dataframe\n\nCreates new dataframe from a slice of rows.\n\n## Signature\n\n`> dfr slice {flags} (offset) (size)`\n\n## Parameters\n\n- `offset`: start of slice\n- `size`: size of slice\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreate new dataframe from a slice of the rows\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr slice01\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n╰───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_slice.html](https://www.nushell.sh/commands/docs/dfr_slice.html)"
- name: dfr sort-by
  summary: '> dfr sort-by {flags} ...rest'
  description: "# `dfr sort-by` for lazyframe\n\nsorts a lazy dataframe based on expression(s).\n\n## Signature\n\n`> dfr sort-by {flags} ...rest`\n\n## Flags\n\n- `--reverse, -r {list<bool>}`: Reverse sorting. Default is false\n- `--nulls-last, -n`: nulls are shown last in the dataframe\n- `--maintain-order, -m`: Maintains order during sort\n\n## Parameters\n\n- `...rest`: sort expression for the dataframe\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSort dataframe by one column\n\n``` shiki\n> [[ab]; [62] [14] [41]] |dfr into-df|dfr sort-bya\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│4│\n│1│4│1│\n│2│6│2│\n╰───┴───┴───╯\n```\n\nSort column using two columns\n\n``` shiki\n> [[ab]; [62] [11] [14] [24]] |dfr into-df|dfr sort-by [ab] -r [falsetrue]\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│4│\n│1│1│1│\n│2│2│4│\n│3│6│2│\n╰───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_sort-by.html](https://www.nushell.sh/commands/docs/dfr_sort-by.html)"
- name: dfr std
  summary: '> dfr std {flags}'
  description: "# `dfr std` for expression\n\nCreates a std expression for an aggregation of std value from columns in a dataframe\n\n## Signature\n\n`> dfr std {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nStd value from columns in a dataframe\n\n``` shiki\n> [[ab]; [62] [42] [22]] |dfr into-df|dfr std\n╭───┬──────┬──────╮\n│# │  a   │  b   │\n├───┼──────┼──────┤\n│0│2.00│0.00│\n╰───┴──────┴──────╯\n```\n\nStd aggregation for a group-by\n\n``` shiki\n> [[ab]; [one2] [one2] [two1] [two1]]\n|dfr into-df\n|dfr group-bya\n|dfr agg (dfr colb|dfr std)\n╭───┬─────┬──────╮\n│# │  a  │  b   │\n├───┼─────┼──────┤\n│0│one│0.00│\n│1│two│0.00│\n╰───┴─────┴──────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_std.html](https://www.nushell.sh/commands/docs/dfr_std.html)"
- name: dfr str-lengths
  summary: '> dfr str-lengths {flags}'
  description: "# `dfr str-lengths` for dataframe\n\nGet lengths of all strings.\n\n## Signature\n\n`> dfr str-lengths {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns string lengths\n\n``` shiki\n> [aababc] |dfr into-df|dfr str-lengths\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│1│\n│1│2│\n│2│3│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_str-lengths.html](https://www.nushell.sh/commands/docs/dfr_str-lengths.html)"
- name: dfr str-slice
  summary: '> dfr str-slice {flags} (start)'
  description: "# `dfr str-slice` for dataframe\n\nSlices the string from the start position until the selected length.\n\n## Signature\n\n`> dfr str-slice {flags} (start)`\n\n## Flags\n\n- `--length, -l {int}`: optional length\n\n## Parameters\n\n- `start`: start of slice\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreates slices from the strings\n\n``` shiki\n> [abcdedabc321abc123] |dfr into-df|dfr str-slice1-l2\n╭───┬────╮\n│# │ 0  │\n├───┼────┤\n│0│bc│\n│1│bc│\n│2│bc│\n╰───┴────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_str-slice.html](https://www.nushell.sh/commands/docs/dfr_str-slice.html)"
- name: dfr strftime
  summary: '> dfr strftime {flags} (fmt)'
  description: "# `dfr strftime` for dataframe\n\nFormats date based on string rule.\n\n## Signature\n\n`> dfr strftime {flags} (fmt)`\n\n## Parameters\n\n- `fmt`: Format rule\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nFormats date\n\n``` shiki\n>letdt= ('2020-08-04T16:39:18+00:00'|into datetime-z'UTC');\nletdf= ([$dt$dt] |dfr into-df);\n$df|dfr strftime\"%Y/%m/%d\"\n╭───┬────────────╮\n│# │     0      │\n├───┼────────────┤\n│0│2020/08/04│\n│1│2020/08/04│\n╰───┴────────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_strftime.html](https://www.nushell.sh/commands/docs/dfr_strftime.html)"
- name: dfr sum
  summary: '> dfr sum {flags}'
  description: "# `dfr sum` for expression\n\nCreates a sum expression for an aggregation or aggregates columns to their sum value\n\n## Signature\n\n`> dfr sum {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSums all columns in a dataframe\n\n``` shiki\n> [[ab]; [62] [14] [41]] |dfr into-df|dfr sum\n╭───┬────┬───╮\n│# │ a  │ b │\n├───┼────┼───┤\n│0│11│7│\n╰───┴────┴───╯\n```\n\nSum aggregation for a group-by\n\n``` shiki\n> [[ab]; [one2] [one4] [two1]]\n|dfr into-df\n|dfr group-bya\n|dfr agg (dfr colb|dfr sum)\n╭───┬─────┬───╮\n│# │  a  │ b │\n├───┼─────┼───┤\n│0│one│6│\n│1│two│1│\n╰───┴─────┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_sum.html](https://www.nushell.sh/commands/docs/dfr_sum.html)"
- name: dfr summary
  summary: '> dfr summary {flags}'
  description: "# `dfr summary` for dataframe\n\nFor a dataframe, produces descriptive statistics (summary statistics) for its numeric columns.\n\n## Signature\n\n`> dfr summary {flags} `\n\n## Flags\n\n- `--quantiles, -q {table}`: provide optional quantiles\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nlist dataframe descriptives\n\n``` shiki\n> [[ab]; [11] [11]] |dfr into-df|dfr summary\n╭───┬────────────┬─────────┬─────────╮\n│# │ descriptor │ a (i64) │ b (i64) │\n├───┼────────────┼─────────┼─────────┤\n│0│count│2.00│2.00│\n│1│sum│2.00│2.00│\n│2│mean│1.00│1.00│\n│3│median│1.00│1.00│\n│4│std│0.00│0.00│\n│5│min│1.00│1.00│\n│6│25%│1.00│1.00│\n│7│50%│1.00│1.00│\n│8│75%│1.00│1.00│\n│9│max│1.00│1.00│\n╰───┴────────────┴─────────┴─────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_summary.html](https://www.nushell.sh/commands/docs/dfr_summary.html)"
- name: dfr take
  summary: '> dfr take {flags} (indices)'
  description: "# `dfr take` for dataframe\n\nCreates new dataframe using the given indices.\n\n## Signature\n\n`> dfr take {flags} (indices)`\n\n## Parameters\n\n- `indices`: list of indices used to take data\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nTakes selected rows from dataframe\n\n``` shiki\n>letdf= ([[ab]; [41] [52] [43]] |dfr into-df);\nletindices= ([02] |dfr into-df);\n$df|dfr take$indices\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│4│1│\n│1│4│3│\n╰───┴───┴───╯\n```\n\nTakes selected rows from series\n\n``` shiki\n>letseries= ([415243] |dfr into-df);\nletindices= ([02] |dfr into-df);\n$series|dfr take$indices\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│4│\n│1│5│\n╰───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_take.html](https://www.nushell.sh/commands/docs/dfr_take.html)"
- name: dfr to-arrow
  summary: '> dfr to-arrow {flags} (file)'
  description: "# `dfr to-arrow` for dataframe\n\nSaves dataframe to arrow file.\n\n## Signature\n\n`> dfr to-arrow {flags} (file)`\n\n## Parameters\n\n- `file`: file path to save dataframe\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSaves dataframe to arrow file\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr to-arrowtest.arrow\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_to-arrow.html](https://www.nushell.sh/commands/docs/dfr_to-arrow.html)"
- name: dfr to-avro
  summary: '> dfr to-avro {flags} (file)'
  description: "# `dfr to-avro` for dataframe\n\nSaves dataframe to avro file.\n\n## Signature\n\n`> dfr to-avro {flags} (file)`\n\n## Flags\n\n- `--compression, -c {string}`: use compression, supports deflate or snappy\n\n## Parameters\n\n- `file`: file path to save dataframe\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSaves dataframe to avro file\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr to-avrotest.avro\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_to-avro.html](https://www.nushell.sh/commands/docs/dfr_to-avro.html)"
- name: dfr to-csv
  summary: '> dfr to-csv {flags} (file)'
  description: "# `dfr to-csv` for dataframe\n\nSaves dataframe to CSV file.\n\n## Signature\n\n`> dfr to-csv {flags} (file)`\n\n## Flags\n\n- `--delimiter, -d {string}`: file delimiter character\n- `--no-header, -`: Indicates if file doesn't have header\n\n## Parameters\n\n- `file`: file path to save dataframe\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSaves dataframe to CSV file\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr to-csvtest.csv\n```\n\nSaves dataframe to CSV file using other delimiter\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr to-csvtest.csv-d'|'\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_to-csv.html](https://www.nushell.sh/commands/docs/dfr_to-csv.html)"
- name: dfr to-jsonl
  summary: '> dfr to-jsonl {flags} (file)'
  description: "# `dfr to-jsonl` for dataframe\n\nSaves dataframe to a JSON lines file.\n\n## Signature\n\n`> dfr to-jsonl {flags} (file)`\n\n## Parameters\n\n- `file`: file path to save dataframe\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSaves dataframe to JSON lines file\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr to-jsonltest.jsonl\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_to-jsonl.html](https://www.nushell.sh/commands/docs/dfr_to-jsonl.html)"
- name: dfr to-parquet
  summary: '> dfr to-parquet {flags} (file)'
  description: "# `dfr to-parquet` for dataframe\n\nSaves dataframe to parquet file.\n\n## Signature\n\n`> dfr to-parquet {flags} (file)`\n\n## Parameters\n\n- `file`: file path to save dataframe\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSaves dataframe to parquet file\n\n``` shiki\n> [[ab]; [12] [34]] |dfr into-df|dfr to-parquettest.parquet\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_to-parquet.html](https://www.nushell.sh/commands/docs/dfr_to-parquet.html)"
- name: dfr unique
  summary: '> dfr unique {flags}'
  description: "# `dfr unique` for dataframe or lazyframe\n\nReturns unique values from a dataframe.\n\n## Signature\n\n`> dfr unique {flags} `\n\n## Flags\n\n- `--subset, -s {any}`: Subset of column(s) to use to maintain rows (lazy df)\n- `--last, -l`: Keeps last unique value. Default keeps first value (lazy df)\n- `--maintain-order, -k`: Keep the same order as the original DataFrame (lazy df)\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nReturns unique values from a series\n\n``` shiki\n> [22222] |dfr into-df|dfr unique\n╭───┬───╮\n│# │ 0 │\n├───┼───┤\n│0│2│\n╰───┴───╯\n```\n\nCreates a is unique expression from a column\n\n``` shiki\n>cola|unique\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_unique.html](https://www.nushell.sh/commands/docs/dfr_unique.html)"
- name: dfr uppercase
  summary: '> dfr uppercase {flags}'
  description: "# `dfr uppercase` for dataframe\n\nUppercase the strings in the column.\n\n## Signature\n\n`> dfr uppercase {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nModifies strings to uppercase\n\n``` shiki\n> [AbcaBcabC] |dfr into-df|dfr uppercase\n╭───┬─────╮\n│# │  0  │\n├───┼─────┤\n│0│ABC│\n│1│ABC│\n│2│ABC│\n╰───┴─────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_uppercase.html](https://www.nushell.sh/commands/docs/dfr_uppercase.html)"
- name: dfr value-counts
  summary: '> dfr value-counts {flags}'
  description: "# `dfr value-counts` for dataframe\n\nReturns a dataframe with the counts for unique values in series.\n\n## Signature\n\n`> dfr value-counts {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCalculates value counts\n\n``` shiki\n> [555566] |dfr into-df|dfr value-counts\n╭───┬───┬────────╮\n│# │ 0 │ counts │\n├───┼───┼────────┤\n│0│5│4│\n│1│6│2│\n╰───┴───┴────────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_value-counts.html](https://www.nushell.sh/commands/docs/dfr_value-counts.html)"
- name: dfr var
  summary: '> dfr var {flags}'
  description: "# `dfr var` for expression\n\nCreate a var expression for an aggregation\n\n## Signature\n\n`> dfr var {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nVar value from columns in a dataframe or aggregates columns to their var value\n\n``` shiki\n> [[ab]; [62] [42] [22]] |dfr into-df|dfr var\n╭───┬──────┬──────╮\n│# │  a   │  b   │\n├───┼──────┼──────┤\n│0│4.00│0.00│\n╰───┴──────┴──────╯\n```\n\nVar aggregation for a group-by\n\n``` shiki\n> [[ab]; [one2] [one2] [two1] [two1]]\n|dfr into-df\n|dfr group-bya\n|dfr agg (dfr colb|dfr var)\n╭───┬─────┬──────╮\n│# │  a  │  b   │\n├───┼─────┼──────┤\n│0│one│0.00│\n│1│two│0.00│\n╰───┴─────┴──────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_var.html](https://www.nushell.sh/commands/docs/dfr_var.html)"
- name: dfr when
  summary: '> dfr when {flags} (when expression) (then expression)'
  description: "# `dfr when` for expression\n\nCreates and modifies a when expression.\n\n## Signature\n\n`> dfr when {flags} (when expression) (then expression)`\n\n## Parameters\n\n- `when expression`: when expression used for matching\n- `then expression`: expression that will be applied when predicate is true\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nCreate a when conditions\n\n``` shiki\n>dfr when ((dfr cola) >2) 4\n```\n\nCreate a when conditions\n\n``` shiki\n>dfr when ((dfr cola) >2) 4|dfr when ((dfr cola) <0) 6\n```\n\nCreate a new column for the dataframe\n\n``` shiki\n> [[ab]; [62] [14] [41]]\n|dfr into-lazy\n|dfr with-column (\ndfr when ((dfr cola) >2) 4|dfr otherwise5|dfr asc\n     )\n|dfr with-column (\ndfr when ((dfr cola) >5) 10|dfr when ((dfr cola) <2) 6|dfr otherwise0|dfr asd\n     )\n|dfr collect\n╭───┬───┬───┬───┬────╮\n│# │ a │ b │ c │ d  │\n├───┼───┼───┼───┼────┤\n│0│6│2│4│10│\n│1│1│4│5│6│\n│2│4│1│4│0│\n╰───┴───┴───┴───┴────╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_when.html](https://www.nushell.sh/commands/docs/dfr_when.html)"
- name: dfr with-column
  summary: '> dfr with-column {flags} ...rest'
  description: "# `dfr with-column` for dataframe or lazyframe\n\nAdds a series to the dataframe.\n\n## Signature\n\n`> dfr with-column {flags} ...rest`\n\n## Flags\n\n- `--name, -n {string}`: new column name\n\n## Parameters\n\n- `...rest`: series to be added or expressions used to define the new columns\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nAdds a series to the dataframe\n\n``` shiki\n> [[ab]; [12] [34]]\n|dfr into-df\n|dfr with-column ([56] |dfr into-df) --namec\n╭───┬───┬───┬───╮\n│# │ a │ b │ c │\n├───┼───┼───┼───┤\n│0│1│2│5│\n│1│3│4│6│\n╰───┴───┴───┴───╯\n```\n\nAdds a series to the dataframe\n\n``` shiki\n> [[ab]; [12] [34]]\n|dfr into-lazy\n|dfr with-column [\n        ((dfr cola) *2|dfr as\"c\")\n        ((dfr cola) *3|dfr as\"d\")\n      ]\n|dfr collect\n╭───┬───┬───┬───┬───╮\n│# │ a │ b │ c │ d │\n├───┼───┼───┼───┼───┤\n│0│1│2│2│3│\n│1│3│4│6│9│\n╰───┴───┴───┴───┴───╯\n```\n\n**Tips:** Dataframe commands were not shipped in the official binaries by default, you have to build it with `--features=dataframe` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/dfr_with-column.html](https://www.nushell.sh/commands/docs/dfr_with-column.html)"
- name: do
  summary: '> do {flags} (closure) ...rest'
  description: "# `do` for core\n\nRun a closure, providing it with the pipeline input.\n\n## Signature\n\n`> do {flags} (closure) ...rest`\n\n## Flags\n\n- `--ignore-errors, -i`: ignore errors as the closure runs\n- `--ignore-shell-errors, -s`: ignore shell errors as the closure runs\n- `--ignore-program-errors, -p`: ignore external program errors as the closure runs\n- `--capture-errors, -c`: catch errors as the closure runs, and return them\n\n## Parameters\n\n- `closure`: the closure to run\n- `...rest`: the parameter(s) for the closure\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nRun the closure\n\n``` shiki\n>do { echohello }\nhello\n```\n\nRun a stored first-class closure\n\n``` shiki\n>lettext=\"I am enclosed\";lethello= {|| echo$text};do$hello\nIamenclosed\n```\n\nRun the closure and ignore both shell and external program errors\n\n``` shiki\n>do-i { thisisnotarealcommand }\n```\n\nRun the closure and ignore shell errors\n\n``` shiki\n>do-s { thisisnotarealcommand }\n```\n\nRun the closure and ignore external program errors\n\n``` shiki\n>do-p { nu-c'exit 1' };echo\"I'll still run\"\n```\n\nAbort the pipeline if a program returns a non-zero exit code\n\n``` shiki\n>do-c { nu-c'exit 1' } |myscarycommand\n```\n\nRun the closure, with a positional parameter\n\n``` shiki\n>do {|x| 100+$x } 77\n177\n```\n\nRun the closure, with input\n\n``` shiki\n>77|do {|x| 100+$in }\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/do.html](https://www.nushell.sh/commands/docs/do.html)"
- name: drop
  summary: '> drop {flags} (rows)'
  description: "# `drop` for filters\n\nRemove items/rows from the end of the input list/table. Counterpart of \\`skip\\`. Opposite of \\`last\\`.\n\n## Signature\n\n`> drop {flags} (rows)`\n\n## Parameters\n\n- `rows`: The number of items to remove\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nRemove the last item of a list\n\n``` shiki\n> [0,1,2,3] |drop\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n╰───┴───╯\n```\n\nRemove zero item of a list\n\n``` shiki\n> [0,1,2,3] |drop0\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n│3│3│\n╰───┴───╯\n```\n\nRemove the last two items of a list\n\n``` shiki\n> [0,1,2,3] |drop2\n╭───┬───╮\n│0│0│\n│1│1│\n╰───┴───╯\n```\n\nRemove the last row in a table\n\n``` shiki\n> [[a, b]; [1, 2] [3, 4]] |drop1\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n╰───┴───┴───╯\n```\n\n## Subcommands:\n\n| name                           | type    | usage                                                                                               |\n|--------------------------------|---------|-----------------------------------------------------------------------------------------------------|\n| [`drop column`](drop_column#_) | Builtin | Remove N columns at the right-hand end of the input table. To remove columns by name, use `reject`. |\n| [`drop nth`](drop_nth#_)       | Builtin | Drop the selected rows.                                                                             |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/drop.html](https://www.nushell.sh/commands/docs/drop.html)"
- name: drop column
  summary: '> drop column {flags} (columns)'
  description: "# `drop column` for filters\n\nRemove N columns at the right-hand end of the input table. To remove columns by name, use \\`reject\\`.\n\n## Signature\n\n`> drop column {flags} (columns)`\n\n## Parameters\n\n- `columns`: starting from the end, the number of columns to remove\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| table | table  |\n\n## Examples\n\nRemove the last column of a table\n\n``` shiki\n> [[lib, extension]; [nu-lib, rs] [nu-core, rb]] |drop column\n╭───┬─────────╮\n│# │   lib   │\n├───┼─────────┤\n│0│nu-lib│\n│1│nu-core│\n╰───┴─────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/drop_column.html](https://www.nushell.sh/commands/docs/drop_column.html)"
- name: drop nth
  summary: '> drop nth {flags} (row number or row range) ...rest'
  description: "# `drop nth` for filters\n\nDrop the selected rows.\n\n## Signature\n\n`> drop nth {flags} (row number or row range) ...rest`\n\n## Parameters\n\n- `row number or row range`: the number of the row to drop or a range to drop consecutive rows\n- `...rest`: the number of the row to drop\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n\n## Examples\n\nDrop the first, second, and third row\n\n``` shiki\n> [sam,sarah,2,3,4,5] |drop nth012\n╭───┬───╮\n│0│3│\n│1│4│\n│2│5│\n╰───┴───╯\n```\n\nDrop the first, second, and third row\n\n``` shiki\n> [0,1,2,3,4,5] |drop nth012\n╭───┬───╮\n│0│3│\n│1│4│\n│2│5│\n╰───┴───╯\n```\n\nDrop rows 0 2 4\n\n``` shiki\n> [0,1,2,3,4,5] |drop nth024\n╭───┬───╮\n│0│1│\n│1│3│\n│2│5│\n╰───┴───╯\n```\n\nDrop rows 2 0 4\n\n``` shiki\n> [0,1,2,3,4,5] |drop nth204\n╭───┬───╮\n│0│1│\n│1│3│\n│2│5│\n╰───┴───╯\n```\n\nDrop range rows from second to fourth\n\n``` shiki\n> [firstsecondthirdfourthfifth] |drop nth (1..3)\n╭───┬───────╮\n│0│first│\n│1│fifth│\n╰───┴───────╯\n```\n\nDrop all rows except first row\n\n``` shiki\n> [0,1,2,3,4,5] |drop nth1..\n╭───┬───╮\n│0│0│\n╰───┴───╯\n```\n\nDrop rows 3,4,5\n\n``` shiki\n> [0,1,2,3,4,5] |drop nth3..\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/drop_nth.html](https://www.nushell.sh/commands/docs/drop_nth.html)"
- name: du
  summary: '> du {flags} (path)'
  description: "# `du` for core\n\nFind disk usage sizes of specified items.\n\n## Signature\n\n`> du {flags} (path)`\n\n## Flags\n\n- `--all, -a`: Output file sizes as well as directory sizes\n- `--deref, -r`: Dereference symlinks to their targets for size\n- `--exclude, -x {glob}`: Exclude these file names\n- `--max-depth, -d {int}`: Directory recursion limit\n- `--min-size, -m {int}`: Exclude files below this size\n\n## Parameters\n\n- `path`: starting directory\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nDisk usage of the current directory\n\n``` shiki\n>du\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/du.html](https://www.nushell.sh/commands/docs/du.html)"
- name: each
  summary: '> each {flags} (closure)'
  description: "# `each` for filters\n\nRun a closure on each row of the input list, creating a new list with the results.\n\n## Signature\n\n`> each {flags} (closure)`\n\n## Flags\n\n- `--keep-empty, -k`: keep empty result cells\n\n## Parameters\n\n- `closure`: the closure to run\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| any         | any         |\n| list\\<any\\> | list\\<any\\> |\n| table       | list\\<any\\> |\n\n## Examples\n\nMultiplies elements in the list\n\n``` shiki\n> [123] |each {|e| 2*$e }\n╭───┬───╮\n│0│2│\n│1│4│\n│2│6│\n╰───┴───╯\n```\n\nProduce a list of values in the record, converted to string\n\n``` shiki\n> {major:2, minor:1, patch:4} |values|each {|| into string }\n╭───┬───╮\n│0│2│\n│1│1│\n│2│4│\n╰───┴───╯\n```\n\nProduce a list that has \"two\" for each 2 in the input\n\n``` shiki\n> [1232] |each {|e| if$e==2 { \"two\" } }\n╭───┬─────╮\n│0│two│\n│1│two│\n╰───┴─────╯\n```\n\nIterate over each element, producing a list showing indexes of any 2s\n\n``` shiki\n> [123] |enumerate|each {|e| if$e.item==2 { $\"found 2 at ($e.index)!\"} }\n╭───┬───────────────╮\n│0│found2at1!│\n╰───┴───────────────╯\n```\n\nIterate over each element, keeping null results\n\n``` shiki\n> [123] |each--keep-empty {|e| if$e==2 { \"found 2!\"} }\n╭───┬──────────╮\n│0││\n│1│found2!│\n│2││\n╰───┴──────────╯\n```\n\n## Notes\n\nSince tables are lists of records, passing a table into 'each' will iterate over each record, not necessarily each cell within it.\n\nAvoid passing single records to this command. Since a record is a one-row structure, 'each' will only run once, behaving similar to 'do'. To iterate over a record's values, try converting it to a table with 'transpose' first.\n\n## Subcommands:\n\n| name                         | type    | usage                                                                                                     |\n|------------------------------|---------|-----------------------------------------------------------------------------------------------------------|\n| [`each while`](each_while#_) | Builtin | Run a block on each row of the input list until a null is found, then create a new list with the results. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/each.html](https://www.nushell.sh/commands/docs/each.html)"
- name: each while
  summary: '> each while {flags} (closure)'
  description: "# `each while` for filters\n\nRun a block on each row of the input list until a null is found, then create a new list with the results.\n\n## Signature\n\n`> each while {flags} (closure)`\n\n## Parameters\n\n- `closure`: the closure to run\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | list\\<any\\> |\n\n## Examples\n\nProduces a list of each element before the 3, doubled\n\n``` shiki\n> [12321] |each while {|e| if$e<3 { $e*2 } }\n╭───┬───╮\n│0│2│\n│1│4│\n╰───┴───╯\n```\n\nOutput elements until reaching 'stop'\n\n``` shiki\n> [12stop34] |each while {|e| if$e!='stop' { $\"Output: ($e)\" } }\n╭───┬───────────╮\n│0│Output:1│\n│1│Output:2│\n╰───┴───────────╯\n```\n\nIterate over each element, printing the matching value and its index\n\n``` shiki\n> [123] |enumerate|each while {|e| if$e.item<2 { $\"value ($e.item) at ($e.index)!\"} }\n╭───┬───────────────╮\n│0│value1at0!│\n╰───┴───────────────╯\n```\n\n**Tips:** Command `each while` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/each_while.html](https://www.nushell.sh/commands/docs/each_while.html)"
- name: echo
  summary: '> echo {flags} ...rest'
  description: "# `echo` for core\n\nReturns its arguments, ignoring the piped-in value.\n\n## Signature\n\n`> echo {flags} ...rest`\n\n## Parameters\n\n- `...rest`: the values to echo\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nPut a list of numbers in the pipeline. This is the same as \\[1 2 3\\].\n\n``` shiki\n>echo123\n╭───┬───╮\n│0│1│\n│1│2│\n│2│3│\n╰───┴───╯\n```\n\nReturns the piped-in value, by using the special \\$in variable to obtain it.\n\n``` shiki\n>echo$in\n```\n\n## Notes\n\nWhen given no arguments, it returns an empty string. When given one argument, it returns it. Otherwise, it returns a list of the arguments. There is usually little reason to use this over just writing the values as-is.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/echo.html](https://www.nushell.sh/commands/docs/echo.html)"
- name: encode
  summary: '> encode {flags} (encoding)'
  description: "# `encode` for strings\n\nEncode a string into bytes.\n\n## Signature\n\n`> encode {flags} (encoding)`\n\n## Flags\n\n- `--ignore-errors, -i`: when a character isn't in the given encoding, replace with a HTML entity (like `&#127880;`)\n\n## Parameters\n\n- `encoding`: the text encoding to use\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | binary |\n\n## Examples\n\nEncode an UTF-8 string into Shift-JIS\n\n``` shiki\n>\"負けると知って戦うのが、遥かに美しいのだ\"|encodeshift-jis\nLength:40 (0x28) bytes|printablewhitespaceascii_othernon_ascii\n00000000:958982af82e982c6926d82c182c490ed×××××××××m××××××\n00000010:82a482cc82aa8141977982a982c994fc×××××××A×y××××××\n00000020:82b582a282cc82be××××××××\n```\n\nReplace characters with HTML entities if they can't be encoded\n\n``` shiki\n>\"🎈\"|encode-ishift-jis\nLength:9 (0x9) bytes|printablewhitespaceascii_othernon_ascii\n00000000:26233132373838303b&#127880;\n```\n\n## Notes\n\nMultiple encodings are supported; here are a few: big5, euc-jp, euc-kr, gbk, iso-8859-1, cp1252, latin5\n\nNote that since the Encoding Standard doesn't specify encoders for utf-16le and utf-16be, these are not yet supported.\n\nFor a more complete list of encodings, please refer to the encoding_rs documentation link at https://docs.rs/encoding_rs/latest/encoding_rs/#statics\n\n## Subcommands:\n\n| name                               | type    | usage                                         |\n|------------------------------------|---------|-----------------------------------------------|\n| [`encode base64`](encode_base64#_) | Builtin | Encode a string or binary value using Base64. |\n| [`encode hex`](encode_hex#_)       | Builtin | Encode a binary value using hex.              |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/encode.html](https://www.nushell.sh/commands/docs/encode.html)"
- name: encode base64
  summary: '> encode base64 {flags} ...rest'
  description: "# `encode base64` for hash\n\nEncode a string or binary value using Base64.\n\n## Signature\n\n`> encode base64 {flags} ...rest`\n\n## Flags\n\n- `--character-set, -c {string}`: specify the character rules for encoding the input. Valid values are 'standard', 'standard-no-padding', 'url-safe', 'url-safe-no-padding','binhex', 'bcrypt', 'crypt', 'mutf7'\n\n## Parameters\n\n- `...rest`: For a data structure input, encode data at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| binary         | string         |\n| list\\<any\\>    | list\\<string\\> |\n| list\\<binary\\> | list\\<string\\> |\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nEncode binary data\n\n``` shiki\n>0x[09F911029D74E35BD84156C5635688C0] |encode base64\nCfkRAp1041vYQVbFY1aIwA==\n```\n\nEncode a string with default settings\n\n``` shiki\n>'Some Data'|encode base64\nU29tZSBEYXRh\n```\n\nEncode a string with the binhex character set\n\n``` shiki\n>'Some Data'|encode base64--character-setbinhex\n7epXB5\"%A@4J\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/encode_base64.html](https://www.nushell.sh/commands/docs/encode_base64.html)"
- name: encode hex
  summary: '> encode hex {flags} ...rest'
  description: "# `encode hex` for formats\n\nEncode a binary value using hex.\n\n## Signature\n\n`> encode hex {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, encode data at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| binary         | string         |\n| list\\<binary\\> | list\\<string\\> |\n| record         | record         |\n| table          | table          |\n\n## Examples\n\nEncode binary data\n\n``` shiki\n>0x[09F911029D74E35BD84156C5635688C0] |encode hex\n09F911029D74E35BD84156C5635688C0\n```\n\n**Tips:** Command `encode hex` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/encode_hex.html](https://www.nushell.sh/commands/docs/encode_hex.html)"
- name: enter
  summary: '> enter (path)'
  description: "# `enter` for shells\n\nEnters a new shell at the given path.\n\n## Signature\n\n`> enter (path)`\n\n## Parameters\n\n- `path`: the path to enter as a new shell\n\n## Examples\n\nEnter a new shell at path '../dir-foo'\n\n``` shiki\n>enter../dir-foo\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/enter.html](https://www.nushell.sh/commands/docs/enter.html)"
- name: enumerate
  summary: '> enumerate {flags}'
  description: "# `enumerate` for filters\n\nEnumerate the elements in a stream.\n\n## Signature\n\n`> enumerate {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | table  |\n\n## Examples\n\nAdd an index to each element of a list\n\n``` shiki\n> [a, b, c] |enumerate\n╭───┬──────╮\n│# │ item │\n├───┼──────┤\n│0│a│\n│1│b│\n│2│c│\n╰───┴──────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/enumerate.html](https://www.nushell.sh/commands/docs/enumerate.html)"
- name: Env
  summary: ''
  description: "# Env\n\n| Command                                | Description                                                                                                                           |\n|----------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------|\n| [config](../docs/config#_)             | Edit nushell configuration files.                                                                                                     |\n| [config env](../docs/config_env#_)     | Edit nu environment configurations.                                                                                                   |\n| [config nu](../docs/config_nu#_)       | Edit nu configurations.                                                                                                               |\n| [config reset](../docs/config_reset#_) | Reset nushell environment configurations to default, and saves old config files in the config location as oldconfig.nu and oldenv.nu. |\n| [export-env](../docs/export-env#_)     | Run a block and preserve its environment in a current scope.                                                                          |\n| [with-env](../docs/with-env#_)         | Runs a block with an environment variable set.                                                                                        |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/env.html](https://www.nushell.sh/commands/categories/env.html)"
- name: error make
  summary: '> error make {flags} (error_struct)'
  description: "# `error make` for core\n\nCreate an error.\n\n## Signature\n\n`> error make {flags} (error_struct)`\n\n## Flags\n\n- `--unspanned, -u`: remove the origin label from the error\n\n## Parameters\n\n- `error_struct`: the error to create\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nCreate a simple custom error\n\n``` shiki\n>error make {msg:\"my custom error message\"}\n{msg:mycustomerrormessage, debug:GenericError(\"my custom error message\", \"\", None, None, []), raw:GenericError(\"my custom error message\", \"\", None, None, [])}\n```\n\nCreate a more complex custom error\n\n``` shiki\n>error make {\nmsg:\"my custom error message\"\nlabel: {\ntext:\"my custom label text\"# not mandatory unless $.label exists\nstart:123# not mandatory unless $.label.end is set\nend:456# not mandatory unless $.label.start is set\n        }\n    }\n{msg:mycustomerrormessage, debug:GenericError(\"my custom error message\", \"my custom label text\", Some(Span { start:123, end:456 }), None, []), raw:GenericError(\"my custom error message\", \"my custom label text\", Some(Span { start:123, end:456 }), None, [])}\n```\n\nCreate a custom error for a custom command that shows the span of the argument\n\n``` shiki\n>deffoo [x] {\nletspan= (metadata$x).span;\nerror make {\nmsg:\"this is fishy\"\nlabel: {\ntext:\"fish right here\"\nstart:$span.start\nend:$span.end\n            }\n        }\n    }\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/error_make.html](https://www.nushell.sh/commands/docs/error_make.html)"
- name: every
  summary: '> every {flags} (stride)'
  description: "# `every` for filters\n\nShow (or skip) every n-th row, starting from the first one.\n\n## Signature\n\n`> every {flags} (stride)`\n\n## Flags\n\n- `--skip, -s`: skip the rows that would be returned, instead of selecting them\n\n## Parameters\n\n- `stride`: how many rows to skip between (and including) each row returned\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n\n## Examples\n\nGet every second row\n\n``` shiki\n> [12345] |every2\n╭───┬───╮\n│0│1│\n│1│3│\n│2│5│\n╰───┴───╯\n```\n\nSkip every second row\n\n``` shiki\n> [12345] |every2--skip\n╭───┬───╮\n│0│2│\n│1│4│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/every.html](https://www.nushell.sh/commands/docs/every.html)"
- name: exec
  summary: '> exec {flags} (command)'
  description: "# `exec` for system\n\nExecute a command, replacing the current process.\n\n## Signature\n\n`> exec {flags} (command)`\n\n## Parameters\n\n- `command`: the command to execute\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nExecute external 'ps aux' tool\n\n``` shiki\n>execpsaux\n```\n\nExecute 'nautilus'\n\n``` shiki\n>execnautilus\n```\n\n## Notes\n\nCurrently supported only on Unix-based systems.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/exec.html](https://www.nushell.sh/commands/docs/exec.html)"
- name: exit
  summary: '> exit {flags} (exit_code)'
  description: "# `exit` for shells\n\nExit Nu.\n\n## Signature\n\n`> exit {flags} (exit_code)`\n\n## Parameters\n\n- `exit_code`: Exit code to return immediately with\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nExit the current shell\n\n``` shiki\n>exit\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/exit.html](https://www.nushell.sh/commands/docs/exit.html)"
- name: explain
  summary: '> explain {flags} (closure)'
  description: "# `explain` for debug\n\nExplain closure contents.\n\n## Signature\n\n`> explain {flags} (closure)`\n\n## Parameters\n\n- `closure`: the closure to run\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| any     | any    |\n| nothing | any    |\n\n## Examples\n\nExplain a command within a closure\n\n``` shiki\n>explain {|| ls|sort-bynametype-i|getname } |table-e\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/explain.html](https://www.nushell.sh/commands/docs/explain.html)"
- name: explore
  summary: '> explore {flags}'
  description: "# `explore` for viewers\n\nExplore acts as a table pager, just like \\`less\\` does for text.\n\n## Signature\n\n`> explore {flags} `\n\n## Flags\n\n- `--head, - {bool}`: Show or hide column headers (default true)\n- `--index, -i`: Show row indexes when viewing a list\n- `--reverse, -r`: Start with the viewport scrolled to the bottom\n- `--peek, -p`: When quitting, output the value of the cell the cursor was on\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nExplore the system information record\n\n``` shiki\n>sys|explore\n```\n\nExplore the output of `ls` without column names\n\n``` shiki\n>ls|explore--headfalse\n```\n\nExplore a list of Markdown files' contents, with row indexes\n\n``` shiki\n>glob*.md|each {|| open } |explore-i\n```\n\nExplore a JSON file, then save the last visited sub-structure to a file\n\n``` shiki\n>openfile.json|explore-p|to json|savepart.json\n```\n\n## Notes\n\nPress `:` then `h` to get a help menu.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/explore.html](https://www.nushell.sh/commands/docs/explore.html)"
- name: export
  summary: '> export {flags}'
  description: "# `export` for core\n\nExport definitions or environment variables from a module.\n\n## Signature\n\n`> export {flags} `\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nExport a definition from a module\n\n``` shiki\n>moduleutils { export defmy-command [] { \"hello\" } };useutilsmy-command;my-command\nhello\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\n## Subcommands:\n\n| name                                               | type    | usage                                                                                     |\n|----------------------------------------------------|---------|-------------------------------------------------------------------------------------------|\n| [`export alias`](export_alias#_)                   | Builtin | Alias a command (with optional flags) to a new name and export it from a module.          |\n| [`export const`](export_const#_)                   | Builtin | Use parse-time constant from a module and export them from this module.                   |\n| [`export def`](export_def#_)                       | Builtin | Define a custom command and export it from a module.                                      |\n| [`export def-env`](export_def-env#_)               | Builtin | Define a custom command that participates in the environment and export it from a module. |\n| [`export extern`](export_extern#_)                 | Builtin | Define an extern and export it from a module.                                             |\n| [`export extern-wrapped`](export_extern-wrapped#_) | Builtin | Define an extern with a custom code block and export it from a module.                    |\n| [`export module`](export_module#_)                 | Builtin | Export a custom module from a module.                                                     |\n| [`export use`](export_use#_)                       | Builtin | Use definitions from a module and export them from this module.                           |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export.html](https://www.nushell.sh/commands/docs/export.html)"
- name: export alias
  summary: '> export alias {flags} (name) (initial_value)'
  description: "# `export alias` for core\n\nAlias a command (with optional flags) to a new name and export it from a module.\n\n## Signature\n\n`> export alias {flags} (name) (initial_value)`\n\n## Parameters\n\n- `name`: name of the alias\n- `initial_value`: equals sign followed by value\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nAlias ll to ls -l and export it from a module\n\n``` shiki\n>modulespam { export aliasll=ls-l }\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export_alias.html](https://www.nushell.sh/commands/docs/export_alias.html)"
- name: export const
  summary: '> export const {flags} (const_name) (initial_value)'
  description: "# `export const` for core\n\nUse parse-time constant from a module and export them from this module.\n\n## Signature\n\n`> export const {flags} (const_name) (initial_value)`\n\n## Parameters\n\n- `const_name`: constant name\n- `initial_value`: equals sign followed by constant value\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nRe-export a command from another module\n\n``` shiki\n>modulespam { export constfoo=3; }\nmoduleeggs { export usespamfoo }\nuseeggsfoo\nfoo\n\n3\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export_const.html](https://www.nushell.sh/commands/docs/export_const.html)"
- name: export def
  summary: '> export def {flags} (name) (params) (block)'
  description: "# `export def` for core\n\nDefine a custom command and export it from a module.\n\n## Signature\n\n`> export def {flags} (name) (params) (block)`\n\n## Parameters\n\n- `name`: definition name\n- `params`: parameters\n- `block`: body of the definition\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nDefine a custom command in a module and call it\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" } };usespamfoo;foo\nfoo\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export_def.html](https://www.nushell.sh/commands/docs/export_def.html)"
- name: export def-env
  summary: '> export def-env {flags} (name) (params) (block)'
  description: "# `export def-env` for core\n\nDefine a custom command that participates in the environment and export it from a module.\n\n## Signature\n\n`> export def-env {flags} (name) (params) (block)`\n\n## Parameters\n\n- `name`: definition name\n- `params`: parameters\n- `block`: body of the definition\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nDefine a custom command that participates in the environment in a module and call it\n\n``` shiki\n>modulefoo { export def-envbar [] { $env.FOO_BAR=\"BAZ\" } };usefoobar;bar;$env.FOO_BAR\nBAZ\n```\n\n## Notes\n\n``` shiki\nThis command is a parser keyword. For details, check:\n  https://www.nushell.sh/book/thinking_in_nu.html\n\n=== EXTRA NOTE ===\nAll blocks are scoped, including variable definition and environment variable changes.\n\nBecause of this, the following doesn't work:\n\nexport def-env cd_with_fallback [arg = \"\"] {\n    let fall_back_path = \"/tmp\"\n    if $arg != \"\" {\n        cd $arg\n    } else {\n        cd $fall_back_path\n    }\n}\n\nInstead, you have to use cd in the top level scope:\n\nexport def-env cd_with_fallback [arg = \"\"] {\n    let fall_back_path = \"/tmp\"\n    let path = if $arg != \"\" {\n        $arg\n    } else {\n        $fall_back_path\n    }\n    cd $path\n}\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export_def-env.html](https://www.nushell.sh/commands/docs/export_def-env.html)"
- name: export extern
  summary: '> export extern {flags} (def_name) (params)'
  description: "# `export extern` for core\n\nDefine an extern and export it from a module.\n\n## Signature\n\n`> export extern {flags} (def_name) (params)`\n\n## Parameters\n\n- `def_name`: definition name\n- `params`: parameters\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nExport the signature for an external command\n\n``` shiki\n>export externecho [text: string]\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export_extern.html](https://www.nushell.sh/commands/docs/export_extern.html)"
- name: export extern-wrapped
  summary: '> export extern-wrapped {flags} (def_name) (params) (body)'
  description: "# `export extern-wrapped` for core\n\nDefine an extern with a custom code block and export it from a module.\n\n## Signature\n\n`> export extern-wrapped {flags} (def_name) (params) (body)`\n\n## Parameters\n\n- `def_name`: definition name\n- `params`: parameters\n- `body`: wrapper code block\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nExport the signature for an external command\n\n``` shiki\n>export extern-wrappedmy-echo [...rest] { echo$rest }\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export_extern-wrapped.html](https://www.nushell.sh/commands/docs/export_extern-wrapped.html)"
- name: export module
  summary: '> export module {flags} (module) (block)'
  description: "# `export module` for core\n\nExport a custom module from a module.\n\n## Signature\n\n`> export module {flags} (module) (block)`\n\n## Parameters\n\n- `module`: module name or module path\n- `block`: body of the module if 'module' parameter is not a path\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nDefine a custom command in a submodule of a module and call it\n\n``` shiki\n>modulespam {\nexport moduleeggs {\nexport deffoo [] { \"foo\" }\n        }\n    }\nusespameggs\neggsfoo\nfoo\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export_module.html](https://www.nushell.sh/commands/docs/export_module.html)"
- name: export use
  summary: '> export use {flags} (module) (members)'
  description: "# `export use` for core\n\nUse definitions from a module and export them from this module.\n\n## Signature\n\n`> export use {flags} (module) (members)`\n\n## Parameters\n\n- `module`: Module or module file\n- `members`: Which members of the module to import\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nRe-export a command from another module\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" } }\nmoduleeggs { export usespamfoo }\nuseeggsfoo\nfoo\n\nfoo\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export_use.html](https://www.nushell.sh/commands/docs/export_use.html)"
- name: export-env
  summary: '> export-env {flags} (block)'
  description: "# `export-env` for env\n\nRun a block and preserve its environment in a current scope.\n\n## Signature\n\n`> export-env {flags} (block)`\n\n## Parameters\n\n- `block`: the block to run to set the environment\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nSet an environment variable\n\n``` shiki\n>export-env { $env.SPAM='eggs' }\n```\n\nSet an environment variable and examine its value\n\n``` shiki\n>export-env { $env.SPAM='eggs' };$env.SPAM\neggs\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/export-env.html](https://www.nushell.sh/commands/docs/export-env.html)"
- name: Expression
  summary: ''
  description: "# Expression\n\n| Command                                    | Description                                                                            |\n|--------------------------------------------|----------------------------------------------------------------------------------------|\n| [dfr agg-groups](../docs/dfr_agg-groups#_) | creates an agg_groups expression                                                       |\n| [dfr arg-where](../docs/dfr_arg-where#_)   | Creates an expression that returns the arguments where expression is true.             |\n| [dfr as](../docs/dfr_as#_)                 | Creates an alias expression.                                                           |\n| [dfr col](../docs/dfr_col#_)               | Creates a named column expression.                                                     |\n| [dfr concat-str](../docs/dfr_concat-str#_) | Creates a concat string expression.                                                    |\n| [dfr count](../docs/dfr_count#_)           | creates a count expression                                                             |\n| [dfr datepart](../docs/dfr_datepart#_)     | Creates an expression for capturing the specified datepart in a column.                |\n| [dfr expr-not](../docs/dfr_expr-not#_)     | creates a not expression                                                               |\n| [dfr implode](../docs/dfr_implode#_)       | Aggregates a group to a Series                                                         |\n| [dfr is-in](../docs/dfr_is-in#_)           | Creates an is-in expression.                                                           |\n| [dfr lit](../docs/dfr_lit#_)               | Creates a literal expression.                                                          |\n| [dfr max](../docs/dfr_max#_)               | Creates a max expression or aggregates columns to their max value                      |\n| [dfr mean](../docs/dfr_mean#_)             | Creates a mean expression for an aggregation or aggregates columns to their mean value |\n| [dfr min](../docs/dfr_min#_)               | Creates a min expression or aggregates columns to their min value                      |\n| [dfr otherwise](../docs/dfr_otherwise#_)   | completes a when expression.                                                           |\n| [dfr std](../docs/dfr_std#_)               | Creates a std expression for an aggregation of std value from columns in a dataframe   |\n| [dfr sum](../docs/dfr_sum#_)               | Creates a sum expression for an aggregation or aggregates columns to their sum value   |\n| [dfr var](../docs/dfr_var#_)               | Create a var expression for an aggregation                                             |\n| [dfr when](../docs/dfr_when#_)             | Creates and modifies a when expression.                                                |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/expression.html](https://www.nushell.sh/commands/categories/expression.html)"
- name: extern
  summary: '> extern {flags} (def_name) (params)'
  description: "# `extern` for core\n\nDefine a signature for an external command.\n\n## Signature\n\n`> extern {flags} (def_name) (params)`\n\n## Parameters\n\n- `def_name`: definition name\n- `params`: parameters\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nWrite a signature for an external command\n\n``` shiki\n>externecho [text: string]\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/extern.html](https://www.nushell.sh/commands/docs/extern.html)"
- name: extern-wrapped
  summary: '> extern-wrapped {flags} (def_name) (params) (body)'
  description: "# `extern-wrapped` for core\n\nDefine a signature for an external command with a custom code block.\n\n## Signature\n\n`> extern-wrapped {flags} (def_name) (params) (body)`\n\n## Parameters\n\n- `def_name`: definition name\n- `params`: parameters\n- `body`: wrapper code block\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nDefine a custom wrapper for an external command\n\n``` shiki\n>extern-wrappedmy-echo [...rest] { echo$rest };my-echospam\n╭───┬──────╮\n│0│spam│\n╰───┴──────╯\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/extern-wrapped.html](https://www.nushell.sh/commands/docs/extern-wrapped.html)"
- name: Filesystem
  summary: ''
  description: "# Filesystem\n\n| Command                        | Description                                                                            |\n|--------------------------------|----------------------------------------------------------------------------------------|\n| [cd](../docs/cd#_)             | Change directory.                                                                      |\n| [cp](../docs/cp#_)             | Copy files.                                                                            |\n| [glob](../docs/glob#_)         | Creates a list of files and/or folders based on the glob pattern provided.             |\n| [load-env](../docs/load-env#_) | Loads an environment update from a record.                                             |\n| [ls](../docs/ls#_)             | List the filenames, sizes, and modification times of items in a directory.             |\n| [mkdir](../docs/mkdir#_)       | Make directories, creates intermediary directories as required.                        |\n| [mv](../docs/mv#_)             | Move files or directories.                                                             |\n| [open](../docs/open#_)         | Load a file into a cell, converting to table if possible (avoid by appending '--raw'). |\n| [rm](../docs/rm#_)             | Remove files and directories.                                                          |\n| [save](../docs/save#_)         | Save a file.                                                                           |\n| [start](../docs/start#_)       | Open a folder, file or website in the default application or viewer.                   |\n| [touch](../docs/touch#_)       | Creates one or more files.                                                             |\n| [ucp](../docs/ucp#_)           | Copy files using uutils/coreutils cp.                                                  |\n| [watch](../docs/watch#_)       | Watch for file changes and execute Nu code when they happen.                           |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/filesystem.html](https://www.nushell.sh/commands/categories/filesystem.html)"
- name: fill
  summary: '> fill {flags}'
  description: "# `fill` for conversions\n\nFill and Align.\n\n## Signature\n\n`> fill {flags} `\n\n## Flags\n\n- `--width, -w {int}`: The width of the output. Defaults to 1\n- `--alignment, -a {string}`: The alignment of the output. Defaults to Left (Left(l), Right(r), Center(c/m), MiddleRight(cr/mr))\n- `--character, -c {string}`: The character to fill with. Defaults to ' ' (space)\n\n## Input/output types:\n\n| input            | output         |\n|------------------|----------------|\n| filesize         | string         |\n| int              | string         |\n| list\\<any\\>      | list\\<string\\> |\n| list\\<filesize\\> | list\\<string\\> |\n| list\\<int\\>      | list\\<string\\> |\n| list\\<number\\>   | list\\<string\\> |\n| list\\<string\\>   | list\\<string\\> |\n| number           | string         |\n| string           | string         |\n\n## Examples\n\nFill a string on the left side to a width of 15 with the character '─'\n\n``` shiki\n>'nushell'|fill-al-c'─'-w15\nnushell────────\n```\n\nFill a string on the right side to a width of 15 with the character '─'\n\n``` shiki\n>'nushell'|fill-ar-c'─'-w15\n────────nushell\n```\n\nFill a string on both sides to a width of 15 with the character '─'\n\n``` shiki\n>'nushell'|fill-am-c'─'-w15\n────nushell────\n```\n\nFill a number on the left side to a width of 5 with the character '0'\n\n``` shiki\n>1|fill--alignmentright--character'0'--width5\n00001\n```\n\nFill a number on both sides to a width of 5 with the character '0'\n\n``` shiki\n>1.1|fill--alignmentcenter--character'0'--width5\n01.10\n```\n\nFill a filesize on the left side to a width of 5 with the character '0'\n\n``` shiki\n>1kib|fill--alignmentmiddle--character'0'--width10\n0001024000\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/fill.html](https://www.nushell.sh/commands/docs/fill.html)"
- name: filter
  summary: '> filter {flags} (closure)'
  description: "# `filter` for filters\n\nFilter values based on a predicate closure.\n\n## Signature\n\n`> filter {flags} (closure)`\n\n## Parameters\n\n- `closure`: Predicate closure\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| range       | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nFilter items of a list according to a condition\n\n``` shiki\n> [12] |filter {|x| $x>1}\n╭───┬───╮\n│0│2│\n╰───┴───╯\n```\n\nFilter rows of a table according to a condition\n\n``` shiki\n> [{a:1} {a:2}] |filter {|x| $x.a>1}\n╭───┬───╮\n│# │ a │\n├───┼───┤\n│0│2│\n╰───┴───╯\n```\n\nFilter rows of a table according to a stored condition\n\n``` shiki\n>letcond= {|x| $x.a>1}; [{a:1} {a:2}] |filter$cond\n╭───┬───╮\n│# │ a │\n├───┼───┤\n│0│2│\n╰───┴───╯\n```\n\nFilter items of a range according to a condition\n\n``` shiki\n>9..13|filter {|el| $elmod2!=0}\n╭───┬────╮\n│0│9│\n│1│11│\n│2│13│\n╰───┴────╯\n```\n\nList all numbers above 3, using an existing closure condition\n\n``` shiki\n>leta= {$in>3}; [1, 2, 5, 6] |filter$a\n```\n\n## Notes\n\nThis command works similar to 'where' but allows reading the predicate closure from a variable. On the other hand, the \"row condition\" syntax is not supported.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/filter.html](https://www.nushell.sh/commands/docs/filter.html)"
- name: Filters
  summary: ''
  description: "# Filters\n\n| Command                                            | Description                                                                                               |\n|----------------------------------------------------|-----------------------------------------------------------------------------------------------------------|\n| [all](../docs/all#_)                               | Test if every element of the input fulfills a predicate expression.                                       |\n| [any](../docs/any#_)                               | Tests if any element of the input fulfills a predicate expression.                                        |\n| [append](../docs/append#_)                         | Append any number of rows to a table.                                                                     |\n| [collect](../docs/collect#_)                       | Collect the stream and pass it to a block.                                                                |\n| [columns](../docs/columns#_)                       | Given a record or table, produce a list of its columns' names.                                            |\n| [compact](../docs/compact#_)                       | Creates a table with non-empty rows.                                                                      |\n| [default](../docs/default#_)                       | Sets a default row's column if missing.                                                                   |\n| [drop](../docs/drop#_)                             | Remove items/rows from the end of the input list/table. Counterpart of \\`skip\\`. Opposite of \\`last\\`.    |\n| [drop column](../docs/drop_column#_)               | Remove N columns at the right-hand end of the input table. To remove columns by name, use \\`reject\\`.     |\n| [drop nth](../docs/drop_nth#_)                     | Drop the selected rows.                                                                                   |\n| [each](../docs/each#_)                             | Run a closure on each row of the input list, creating a new list with the results.                        |\n| [each while](../docs/each_while#_)                 | Run a block on each row of the input list until a null is found, then create a new list with the results. |\n| [enumerate](../docs/enumerate#_)                   | Enumerate the elements in a stream.                                                                       |\n| [every](../docs/every#_)                           | Show (or skip) every n-th row, starting from the first one.                                               |\n| [filter](../docs/filter#_)                         | Filter values based on a predicate closure.                                                               |\n| [find](../docs/find#_)                             | Searches terms in the input.                                                                              |\n| [first](../docs/first#_)                           | Return only the first several rows of the input. Counterpart of \\`last\\`. Opposite of \\`skip\\`.           |\n| [flatten](../docs/flatten#_)                       | Flatten the table.                                                                                        |\n| [get](../docs/get#_)                               | Extract data using a cell path.                                                                           |\n| [group](../docs/group#_)                           | Groups input into groups of \\`group_size\\`.                                                               |\n| [group-by](../docs/group-by#_)                     | Splits a list or table into groups, and returns a record containing those groups.                         |\n| [headers](../docs/headers#_)                       | Use the first row of the table as column names.                                                           |\n| [insert](../docs/insert#_)                         | Insert a new column, using an expression or closure to create each row's values.                          |\n| [is-empty](../docs/is-empty#_)                     | Check for empty values.                                                                                   |\n| [items](../docs/items#_)                           | Given a record, iterate on each pair of column name and associated value.                                 |\n| [join](../docs/join#_)                             | Join two tables                                                                                           |\n| [last](../docs/last#_)                             | Return only the last several rows of the input. Counterpart of \\`first\\`. Opposite of \\`drop\\`.           |\n| [length](../docs/length#_)                         | Count the number of items in an input list or rows in a table.                                            |\n| [lines](../docs/lines#_)                           | Converts input to lines.                                                                                  |\n| [merge](../docs/merge#_)                           | Merge the input with a record or table, overwriting values in matching columns.                           |\n| [move](../docs/move#_)                             | Move columns before or after other columns.                                                               |\n| [par-each](../docs/par-each#_)                     | Run a closure on each row of the input list in parallel, creating a new list with the results.            |\n| [prepend](../docs/prepend#_)                       | Prepend any number of rows to a table.                                                                    |\n| [query](../docs/query#_)                           | Show all the query commands                                                                               |\n| [query json](../docs/query_json#_)                 | execute json query on json file (open --raw \\<file\\> \\| query json 'query string')                        |\n| [query xml](../docs/query_xml#_)                   | execute xpath query on xml                                                                                |\n| [range](../docs/range#_)                           | Return only the selected rows.                                                                            |\n| [reduce](../docs/reduce#_)                         | Aggregate a list to a single value using an accumulator closure.                                          |\n| [reject](../docs/reject#_)                         | Remove the given columns or rows from the table. Opposite of \\`select\\`.                                  |\n| [rename](../docs/rename#_)                         | Creates a new table with columns renamed.                                                                 |\n| [reverse](../docs/reverse#_)                       | Reverses the input list or table.                                                                         |\n| [roll](../docs/roll#_)                             | Rolling commands for tables.                                                                              |\n| [roll down](../docs/roll_down#_)                   | Roll table rows down.                                                                                     |\n| [roll left](../docs/roll_left#_)                   | Roll record or table columns left.                                                                        |\n| [roll right](../docs/roll_right#_)                 | Roll table columns right.                                                                                 |\n| [roll up](../docs/roll_up#_)                       | Roll table rows up.                                                                                       |\n| [rotate](../docs/rotate#_)                         | Rotates a table or record clockwise (default) or counter-clockwise (use --ccw flag).                      |\n| [scope aliases](../docs/scope_aliases#_)           | Output info on the aliases in the current scope.                                                          |\n| [scope commands](../docs/scope_commands#_)         | Output info on the commands in the current scope.                                                         |\n| [scope engine-stats](../docs/scope_engine-stats#_) | Output stats on the engine in the current state.                                                          |\n| [scope externs](../docs/scope_externs#_)           | Output info on the known externals in the current scope.                                                  |\n| [scope modules](../docs/scope_modules#_)           | Output info on the modules in the current scope.                                                          |\n| [scope variables](../docs/scope_variables#_)       | Output info on the variables in the current scope.                                                        |\n| [select](../docs/select#_)                         | Select only these columns or rows from the input. Opposite of \\`reject\\`.                                 |\n| [shuffle](../docs/shuffle#_)                       | Shuffle rows randomly.                                                                                    |\n| [skip](../docs/skip#_)                             | Skip the first several rows of the input. Counterpart of \\`drop\\`. Opposite of \\`first\\`.                 |\n| [skip until](../docs/skip_until#_)                 | Skip elements of the input until a predicate is true.                                                     |\n| [skip while](../docs/skip_while#_)                 | Skip elements of the input while a predicate is true.                                                     |\n| [sort](../docs/sort#_)                             | Sort in increasing order.                                                                                 |\n| [sort-by](../docs/sort-by#_)                       | Sort by the given columns, in increasing order.                                                           |\n| [split list](../docs/split_list#_)                 | Split a list into multiple lists using a separator.                                                       |\n| [split-by](../docs/split-by#_)                     | Create a new table split.                                                                                 |\n| [take](../docs/take#_)                             | Take only the first n elements of a list, or the first n bytes of a binary value.                         |\n| [take until](../docs/take_until#_)                 | Take elements of the input until a predicate is true.                                                     |\n| [take while](../docs/take_while#_)                 | Take elements of the input while a predicate is true.                                                     |\n| [transpose](../docs/transpose#_)                   | Transposes the table contents so rows become columns and columns become rows.                             |\n| [uniq](../docs/uniq#_)                             | Return the distinct values in the input.                                                                  |\n| [uniq-by](../docs/uniq-by#_)                       | Return the distinct values in the input by the given column(s).                                           |\n| [update](../docs/update#_)                         | Update an existing column to have a new value.                                                            |\n| [update cells](../docs/update_cells#_)             | Update the table cells.                                                                                   |\n| [upsert](../docs/upsert#_)                         | Update an existing column to have a new value, or insert a new column.                                    |\n| [values](../docs/values#_)                         | Given a record or table, produce a list of its columns' values.                                           |\n| [where](../docs/where#_)                           | Filter values based on a row condition.                                                                   |\n| [window](../docs/window#_)                         | Creates a sliding window of \\`window_size\\` that slide by n rows/elements across input.                   |\n| [wrap](../docs/wrap#_)                             | Wrap the value into a column.                                                                             |\n| [zip](../docs/zip#_)                               | Combine a stream with the input.                                                                          |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/filters.html](https://www.nushell.sh/commands/categories/filters.html)"
- name: find
  summary: '> find {flags} ...rest'
  description: "# `find` for filters\n\nSearches terms in the input.\n\n## Signature\n\n`> find {flags} ...rest`\n\n## Flags\n\n- `--regex, -r {string}`: regex to match with\n- `--ignore-case, -i`: case-insensitive regex mode; equivalent to (?i)\n- `--multiline, -m`: multi-line regex mode: ^ and \\$ match begin/end of line; equivalent to (?m)\n- `--dotall, -s`: dotall regex mode: allow a dot . to match newlines \\n; equivalent to (?s)\n- `--columns, -c {list<string>}`: column names to be searched (with rest parameter, not regex yet)\n- `--invert, -v`: invert the match\n\n## Parameters\n\n- `...rest`: terms to search\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| string      | any         |\n| table       | table       |\n\n## Examples\n\nSearch for multiple terms in a command output\n\n``` shiki\n>ls|findtomlmdsh\n```\n\nSearch for a term in a string\n\n``` shiki\n>'Cargo.toml'|findtoml\nCargo.toml\n```\n\nSearch a number or a file size in a list of numbers\n\n``` shiki\n> [153kb43Mb] |find53kb\n╭───┬─────────╮\n│0│5│\n│1│2.9KiB│\n╰───┴─────────╯\n```\n\nSearch a char in a list of string\n\n``` shiki\n> [moelarrycurly] |findl\n╭───┬───────╮\n│0│larry│\n│1│curly│\n╰───┴───────╯\n```\n\nFind using regex\n\n``` shiki\n> [abcbdearcabf] |find--regex\"ab\"\n╭───┬─────╮\n│0│abc│\n│1│abf│\n╰───┴─────╯\n```\n\nFind using regex case insensitive\n\n``` shiki\n> [aBcbdeArcabf] |find--regex\"ab\"-i\n╭───┬─────╮\n│0│aBc│\n│1│abf│\n╰───┴─────╯\n```\n\nFind value in records using regex\n\n``` shiki\n> [[versionname]; ['0.1.0'nushell] ['0.1.1'fish] ['0.2.0'zsh]] |find-r\"nu\"\n╭───┬─────────┬─────────╮\n│# │ version │  name   │\n├───┼─────────┼─────────┤\n│0│0.1.0│nushell│\n╰───┴─────────┴─────────╯\n```\n\nFind inverted values in records using regex\n\n``` shiki\n> [[versionname]; ['0.1.0'nushell] ['0.1.1'fish] ['0.2.0'zsh]] |find-r\"nu\"--invert\n╭───┬─────────┬──────╮\n│# │ version │ name │\n├───┼─────────┼──────┤\n│0│0.1.1│fish│\n│1│0.2.0│zsh│\n╰───┴─────────┴──────╯\n```\n\nFind value in list using regex\n\n``` shiki\n> [[\"Larry\", \"Moe\"], [\"Victor\", \"Marina\"]] |find-r\"rr\"\n╭───┬───────────────╮\n│0│╭───┬───────╮│\n│││0│Larry││\n│││1│Moe││\n││╰───┴───────╯│\n╰───┴───────────────╯\n```\n\nFind inverted values in records using regex\n\n``` shiki\n> [[\"Larry\", \"Moe\"], [\"Victor\", \"Marina\"]] |find-r\"rr\"--invert\n╭───┬────────────────╮\n│0│╭───┬────────╮│\n│││0│Victor││\n│││1│Marina││\n││╰───┴────────╯│\n╰───┴────────────────╯\n```\n\nRemove ANSI sequences from result\n\n``` shiki\n> [[foobar]; [abc123] [def456]] |find123|getbar|ansi strip\n```\n\nFind and highlight text in specific columns\n\n``` shiki\n> [[col1col2col3]; [moelarrycurly] [larrycurlymoe]] |findmoe-c [col1]\n╭───┬──────┬───────┬───────╮\n│# │ col1 │ col2  │ col3  │\n├───┼──────┼───────┼───────┤\n│0│moe│larry│curly│\n╰───┴──────┴───────┴───────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/find.html](https://www.nushell.sh/commands/docs/find.html)"
- name: first
  summary: '> first {flags} (rows)'
  description: "# `first` for filters\n\nReturn only the first several rows of the input. Counterpart of \\`last\\`. Opposite of \\`skip\\`.\n\n## Signature\n\n`> first {flags} (rows)`\n\n## Parameters\n\n- `rows`: starting from the front, the number of rows to return\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| binary      | binary      |\n| list\\<any\\> | list\\<any\\> |\n| range       | any         |\n\n## Examples\n\nReturn the first item of a list/table\n\n``` shiki\n> [123] |first\n1\n```\n\nReturn the first 2 items of a list/table\n\n``` shiki\n> [123] |first2\n╭───┬───╮\n│0│1│\n│1│2│\n╰───┴───╯\n```\n\nReturn the first 2 bytes of a binary value\n\n``` shiki\n>0x[012345] |first2\nLength:2 (0x2) bytes|printablewhitespaceascii_othernon_ascii\n00000000:0123•#\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/first.html](https://www.nushell.sh/commands/docs/first.html)"
- name: flatten
  summary: '> flatten {flags} ...rest'
  description: "# `flatten` for filters\n\nFlatten the table.\n\n## Signature\n\n`> flatten {flags} ...rest`\n\n## Flags\n\n- `--all, -a`: flatten inner table one level out\n\n## Parameters\n\n- `...rest`: optionally flatten data by column\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| record      | table       |\n\n## Examples\n\nflatten a table\n\n``` shiki\n> [[N, u, s, h, e, l, l]] |flatten\n╭───┬───╮\n│0│N│\n│1│u│\n│2│s│\n│3│h│\n│4│e│\n│5│l│\n│6│l│\n╰───┴───╯\n```\n\nflatten a table, get the first item\n\n``` shiki\n> [[N, u, s, h, e, l, l]] |flatten|first\n```\n\nflatten a column having a nested table\n\n``` shiki\n> [[origin, people]; [Ecuador, ([[name, meal]; ['Andres', 'arepa']])]] |flatten--all|getmeal\n```\n\nrestrict the flattening by passing column names\n\n``` shiki\n> [[origin, crate, versions]; [World, ([[name]; ['nu-cli']]), ['0.21', '0.22']]] |flattenversions--all|last|getversions\n```\n\nFlatten inner table\n\n``` shiki\n> { a:b, d: [ 1234 ],  e: [ 43  ] } |flattend--all\n╭───┬───┬───┬───────────╮\n│# │ a │ d │     e     │\n├───┼───┼───┼───────────┤\n│0│b│1│╭───┬───╮│\n│││││0│4││\n│││││1│3││\n││││╰───┴───╯│\n│1│b│2│╭───┬───╮│\n│││││0│4││\n│││││1│3││\n││││╰───┴───╯│\n│2│b│3│╭───┬───╮│\n│││││0│4││\n│││││1│3││\n││││╰───┴───╯│\n│3│b│4│╭───┬───╮│\n│││││0│4││\n│││││1│3││\n││││╰───┴───╯│\n╰───┴───┴───┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/flatten.html](https://www.nushell.sh/commands/docs/flatten.html)"
- name: fmt
  summary: '> fmt {flags}'
  description: "# `fmt` for conversions\n\nFormat a number.\n\n## Signature\n\n`> fmt {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| number | record |\n\n## Examples\n\nGet a record containing multiple formats for the number 42\n\n``` shiki\n>42|fmt\n╭──────────┬──────────╮\n│binary│0b101010│\n│debug│42│\n│display│42│\n│lowerexp│4.2e1│\n│lowerhex│0x2a│\n│octal│0o52│\n│upperexp│4.2E1│\n│upperhex│0x2A│\n╰──────────┴──────────╯\n```\n\n**Tips:** Command `fmt` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/fmt.html](https://www.nushell.sh/commands/docs/fmt.html)"
- name: for
  summary: '> for {flags} (var_name) (range) (block)'
  description: "# `for` for core\n\nLoop over a range.\n\n## Signature\n\n`> for {flags} (var_name) (range) (block)`\n\n## Flags\n\n- `--numbered, -n`: return a numbered item (\\$it.index and \\$it.item)\n\n## Parameters\n\n- `var_name`: name of the looping variable\n- `range`: range of the loop\n- `block`: the block to run\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nEcho the square of each integer\n\n``` shiki\n>forxin [123] { print ($x*$x) }\n```\n\nWork with elements of a range\n\n``` shiki\n>for$xin1..3 { print$x }\n```\n\nNumber each item and echo a message\n\n``` shiki\n>for$itin ['bob''fred'] --numbered { print$\"($it.index) is ($it.item)\" }\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/for.html](https://www.nushell.sh/commands/docs/for.html)"
- name: format
  summary: '> format {flags} (pattern)'
  description: "# `format` for strings\n\nFormat columns into a string using a simple pattern.\n\n## Signature\n\n`> format {flags} (pattern)`\n\n## Parameters\n\n- `pattern`: the pattern to output. e.g.) \"{foo}: {bar}\"\n\n## Input/output types:\n\n| input  | output         |\n|--------|----------------|\n| record | any            |\n| table  | list\\<string\\> |\n\n## Examples\n\nPrint filenames with their sizes\n\n``` shiki\n>ls|format'{name}: {size}'\n```\n\nPrint elements from some columns of a table\n\n``` shiki\n> [[col1, col2]; [v1, v2] [v3, v4]] |format'{col2}'\n╭───┬────╮\n│0│v2│\n│1│v4│\n╰───┴────╯\n```\n\n## Subcommands:\n\n| name                                   | type    | usage                                                    |\n|----------------------------------------|---------|----------------------------------------------------------|\n| [`format date`](format_date#_)         | Builtin | Format a given date using a format string.               |\n| [`format duration`](format_duration#_) | Builtin | Outputs duration with a specified unit of time.          |\n| [`format filesize`](format_filesize#_) | Builtin | Converts a column of filesizes to some specified format. |\n\n**Tips:** Command `format` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/format.html](https://www.nushell.sh/commands/docs/format.html)"
- name: format date
  summary: '> format date {flags} (format string)'
  description: "# `format date` for date\n\nFormat a given date using a format string.\n\n## Signature\n\n`> format date {flags} (format string)`\n\n## Flags\n\n- `--list, -l`: lists strftime cheatsheet\n\n## Parameters\n\n- `format string`: the desired format date\n\n## Input/output types:\n\n| input    | output |\n|----------|--------|\n| datetime | string |\n| string   | string |\n\n## Examples\n\nFormat a given date-time using the default format (RFC 2822).\n\n``` shiki\n>'2021-10-22 20:00:12 +01:00'|into datetime|format date\nFri, 22Oct202120:00:12+0100\n```\n\nFormat a given date-time as a string using the default format (RFC 2822).\n\n``` shiki\n>\"2021-10-22 20:00:12 +01:00\"|format date\nFri, 22Oct202120:00:12+0100\n```\n\nFormat the current date-time using a given format string.\n\n``` shiki\n>date now|format date\"%Y-%m-%d %H:%M:%S\"\n```\n\nFormat the current date using a given format string.\n\n``` shiki\n>date now|format date\"%Y-%m-%d %H:%M:%S\"\n```\n\nFormat a given date using a given format string.\n\n``` shiki\n>\"2021-10-22 20:00:12 +01:00\"|format date\"%Y-%m-%d\"\n2021-10-22\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/format_date.html](https://www.nushell.sh/commands/docs/format_date.html)"
- name: format duration
  summary: '> format duration {flags} (format value) ...rest'
  description: "# `format duration` for strings\n\nOutputs duration with a specified unit of time.\n\n## Signature\n\n`> format duration {flags} (format value) ...rest`\n\n## Parameters\n\n- `format value`: the unit in which to display the duration\n- `...rest`: For a data structure input, format duration at the given cell paths\n\n## Input/output types:\n\n| input            | output         |\n|------------------|----------------|\n| duration         | string         |\n| list\\<duration\\> | list\\<string\\> |\n| table            | table          |\n\n## Examples\n\nConvert µs duration to the requested second duration as a string\n\n``` shiki\n>1000000µs|format durationsec\n1sec\n```\n\nConvert durations to µs duration as strings\n\n``` shiki\n> [1sec2sec] |format durationµs\n╭───┬────────────╮\n│0│1000000µs│\n│1│2000000µs│\n╰───┴────────────╯\n```\n\nConvert duration to µs as a string if unit asked for was us\n\n``` shiki\n>1sec|format durationus\n1000000µs\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/format_duration.html](https://www.nushell.sh/commands/docs/format_duration.html)"
- name: format filesize
  summary: '> format filesize {flags} (format value) ...rest'
  description: "# `format filesize` for strings\n\nConverts a column of filesizes to some specified format.\n\n## Signature\n\n`> format filesize {flags} (format value) ...rest`\n\n## Parameters\n\n- `format value`: the format into which convert the file sizes\n- `...rest`: For a data structure input, format filesizes at the given cell paths\n\n## Input/output types:\n\n| input    | output |\n|----------|--------|\n| filesize | string |\n| record   | record |\n| table    | table  |\n\n## Examples\n\nConvert the size column to KB\n\n``` shiki\n>ls|format filesizeKBsize\n```\n\nConvert the apparent column to B\n\n``` shiki\n>du|format filesizeBapparent\n```\n\nConvert the size data to MB\n\n``` shiki\n>4Gb|format filesizeMB\n4000.0MB\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/format_filesize.html](https://www.nushell.sh/commands/docs/format_filesize.html)"
- name: Formats
  summary: ''
  description: "# Formats\n\n| Command                            | Description                                                                                                                |\n|------------------------------------|----------------------------------------------------------------------------------------------------------------------------|\n| [decode hex](../docs/decode_hex#_) | Hex decode a value.                                                                                                        |\n| [encode hex](../docs/encode_hex#_) | Encode a binary value using hex.                                                                                           |\n| [from](../docs/from#_)             | Parse a string or binary data into structured data.                                                                        |\n| [from csv](../docs/from_csv#_)     | Parse text as .csv and create table.                                                                                       |\n| [from eml](../docs/from_eml#_)     | Parse text as .eml and create record.                                                                                      |\n| [from ics](../docs/from_ics#_)     | Parse text as .ics and create table.                                                                                       |\n| [from ini](../docs/from_ini#_)     | Parse text as .ini and create table.                                                                                       |\n| [from json](../docs/from_json#_)   | Convert from json to structured data.                                                                                      |\n| [from nuon](../docs/from_nuon#_)   | Convert from nuon to structured data.                                                                                      |\n| [from ods](../docs/from_ods#_)     | Parse OpenDocument Spreadsheet(.ods) data and create table.                                                                |\n| [from ssv](../docs/from_ssv#_)     | Parse text as space-separated values and create a table. The default minimum number of spaces counted as a separator is 2. |\n| [from toml](../docs/from_toml#_)   | Parse text as .toml and create record.                                                                                     |\n| [from tsv](../docs/from_tsv#_)     | Parse text as .tsv and create table.                                                                                       |\n| [from url](../docs/from_url#_)     | Parse url-encoded string as a record.                                                                                      |\n| [from vcf](../docs/from_vcf#_)     | Parse text as .vcf and create table.                                                                                       |\n| [from xlsx](../docs/from_xlsx#_)   | Parse binary Excel(.xlsx) data and create table.                                                                           |\n| [from xml](../docs/from_xml#_)     | Parse text as .xml and create record.                                                                                      |\n| [from yaml](../docs/from_yaml#_)   | Parse text as .yaml/.yml and create table.                                                                                 |\n| [from yml](../docs/from_yml#_)     | Parse text as .yaml/.yml and create table.                                                                                 |\n| [to](../docs/to#_)                 | Translate structured data to a format.                                                                                     |\n| [to csv](../docs/to_csv#_)         | Convert table into .csv text .                                                                                             |\n| [to html](../docs/to_html#_)       | Convert table into simple HTML.                                                                                            |\n| [to json](../docs/to_json#_)       | Converts table data into JSON text.                                                                                        |\n| [to md](../docs/to_md#_)           | Convert table into simple Markdown.                                                                                        |\n| [to nuon](../docs/to_nuon#_)       | Converts table data into Nuon (Nushell Object Notation) text.                                                              |\n| [to text](../docs/to_text#_)       | Converts data into simple text.                                                                                            |\n| [to toml](../docs/to_toml#_)       | Convert record into .toml text.                                                                                            |\n| [to tsv](../docs/to_tsv#_)         | Convert table into .tsv text.                                                                                              |\n| [to xml](../docs/to_xml#_)         | Convert special record structure into .xml text.                                                                           |\n| [to yaml](../docs/to_yaml#_)       | Convert table into .yaml/.yml text.                                                                                        |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/formats.html](https://www.nushell.sh/commands/categories/formats.html)"
- name: from
  summary: '> from {flags}'
  description: "# `from` for formats\n\nParse a string or binary data into structured data.\n\n## Signature\n\n`> from {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                       | type    | usage                                                                                                                      |\n|----------------------------|---------|----------------------------------------------------------------------------------------------------------------------------|\n| [`from csv`](from_csv#_)   | Builtin | Parse text as .csv and create table.                                                                                       |\n| [`from json`](from_json#_) | Builtin | Convert from json to structured data.                                                                                      |\n| [`from nuon`](from_nuon#_) | Builtin | Convert from nuon to structured data.                                                                                      |\n| [`from ods`](from_ods#_)   | Builtin | Parse OpenDocument Spreadsheet(.ods) data and create table.                                                                |\n| [`from ssv`](from_ssv#_)   | Builtin | Parse text as space-separated values and create a table. The default minimum number of spaces counted as a separator is 2. |\n| [`from toml`](from_toml#_) | Builtin | Parse text as .toml and create record.                                                                                     |\n| [`from tsv`](from_tsv#_)   | Builtin | Parse text as .tsv and create table.                                                                                       |\n| [`from url`](from_url#_)   | Builtin | Parse url-encoded string as a record.                                                                                      |\n| [`from xlsx`](from_xlsx#_) | Builtin | Parse binary Excel(.xlsx) data and create table.                                                                           |\n| [`from xml`](from_xml#_)   | Builtin | Parse text as .xml and create record.                                                                                      |\n| [`from yaml`](from_yaml#_) | Builtin | Parse text as .yaml/.yml and create table.                                                                                 |\n| [`from yml`](from_yml#_)   | Builtin | Parse text as .yaml/.yml and create table.                                                                                 |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from.html](https://www.nushell.sh/commands/docs/from.html)"
- name: from csv
  summary: '> from csv {flags}'
  description: "# `from csv` for formats\n\nParse text as .csv and create table.\n\n## Signature\n\n`> from csv {flags} `\n\n## Flags\n\n- `--separator, -s {string}`: a character to separate columns (either single char or 4 byte unicode sequence), defaults to ','\n- `--comment, -c {string}`: a comment character to ignore lines starting with it\n- `--quote, -q {string}`: a quote character to ignore separators in strings, defaults to '\"'\n- `--escape, -e {string}`: an escape character for strings containing the quote character\n- `--noheaders, -n`: don't treat the first row as column names\n- `--flexible, -`: allow the number of fields in records to be variable\n- `--no-infer, -`: no field type inferencing\n- `--trim, -t {string}`: drop leading and trailing whitespaces around headers names and/or field values\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | table  |\n\n## Examples\n\nConvert comma-separated data to a table\n\n``` shiki\n>\"ColA,ColB\n1,2\"|from csv\n╭───┬──────┬──────╮\n│# │ ColA │ ColB │\n├───┼──────┼──────┤\n│0│1│2│\n╰───┴──────┴──────╯\n```\n\nConvert comma-separated data to a table, ignoring headers\n\n``` shiki\n>opendata.txt|from csv--noheaders\n```\n\nConvert semicolon-separated data to a table\n\n``` shiki\n>opendata.txt|from csv--separator';'\n```\n\nConvert comma-separated data to a table, ignoring lines starting with '#'\n\n``` shiki\n>opendata.txt|from csv--comment'#'\n```\n\nConvert comma-separated data to a table, dropping all possible whitespaces around header names and field values\n\n``` shiki\n>opendata.txt|from csv--trimall\n```\n\nConvert comma-separated data to a table, dropping all possible whitespaces around header names\n\n``` shiki\n>opendata.txt|from csv--trimheaders\n```\n\nConvert comma-separated data to a table, dropping all possible whitespaces around field values\n\n``` shiki\n>opendata.txt|from csv--trimfields\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_csv.html](https://www.nushell.sh/commands/docs/from_csv.html)"
- name: from eml
  summary: '> from eml --preview-body'
  description: "# `from eml` for formats\n\nParse text as .eml and create record.\n\n## Signature\n\n`> from eml --preview-body`\n\n## Parameters\n\n- `--preview-body {int}`: How many bytes of the body to preview\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | record |\n\n## Examples\n\nConvert eml structured data into record\n\n``` shiki\n>'From: test@email.com\nSubject: Welcome\nTo: someone@somewhere.com\nTest'|from eml\n╭─────────┬─────────────────────────────────────╮\n│Subject│Welcome│\n││╭─────────┬────────────────╮│\n│From││Name│││\n│││Address│test@email.com││\n││╰─────────┴────────────────╯│\n││╭─────────┬───────────────────────╮│\n│To││Name│││\n│││Address│someone@somewhere.com││\n││╰─────────┴───────────────────────╯│\n│Body│Test│\n╰─────────┴─────────────────────────────────────╯\n```\n\nConvert eml structured data into record\n\n``` shiki\n>'From: test@email.com\nSubject: Welcome\nTo: someone@somewhere.com\nTest'|from eml-b1\n╭─────────┬─────────────────────────────────────╮\n│Subject│Welcome│\n││╭─────────┬────────────────╮│\n│From││Name│││\n│││Address│test@email.com││\n││╰─────────┴────────────────╯│\n││╭─────────┬───────────────────────╮│\n│To││Name│││\n│││Address│someone@somewhere.com││\n││╰─────────┴───────────────────────╯│\n│Body│T│\n╰─────────┴─────────────────────────────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_eml.html](https://www.nushell.sh/commands/docs/from_eml.html)"
- name: from ics
  summary: '> from ics'
  description: "# `from ics` for formats\n\nParse text as .ics and create table.\n\n## Signature\n\n`> from ics `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | table  |\n\n## Examples\n\nConverts ics formatted string to table\n\n``` shiki\n>'BEGIN:VCALENDAR\n            END:VCALENDAR'|from ics\n╭───┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────┬────────────────╮\n│# │   properties   │     events     │     alarms     │     to-Dos     │    journals    │   free-busys   │   timezones    │\n├───┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┼────────────────┤\n│0│ [list0items] │ [list0items] │ [list0items] │ [list0items] │ [list0items] │ [list0items] │ [list0items] │\n╰───┴────────────────┴────────────────┴────────────────┴────────────────┴────────────────┴────────────────┴────────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_ics.html](https://www.nushell.sh/commands/docs/from_ics.html)"
- name: from ini
  summary: '> from ini'
  description: "# `from ini` for formats\n\nParse text as .ini and create table.\n\n## Signature\n\n`> from ini `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | record |\n\n## Examples\n\nConverts ini formatted string to record\n\n``` shiki\n>'[foo]\na=1\nb=2'|from ini\n╭─────┬───────────╮\n││╭───┬───╮│\n│foo││a│1││\n│││b│2││\n││╰───┴───╯│\n╰─────┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_ini.html](https://www.nushell.sh/commands/docs/from_ini.html)"
- name: from json
  summary: '> from json {flags}'
  description: "# `from json` for formats\n\nConvert from json to structured data.\n\n## Signature\n\n`> from json {flags} `\n\n## Flags\n\n- `--objects, -o`: treat each line as a separate value\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | any    |\n\n## Examples\n\nConverts json formatted string to table\n\n``` shiki\n>'{ \"a\": 1 }'|from json\n╭───┬───╮\n│a│1│\n╰───┴───╯\n```\n\nConverts json formatted string to table\n\n``` shiki\n>'{ \"a\": 1, \"b\": [1, 2] }'|from json\n╭───┬───────────╮\n│a│1│\n││╭───┬───╮│\n│b││0│1││\n│││1│2││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_json.html](https://www.nushell.sh/commands/docs/from_json.html)"
- name: from nuon
  summary: '> from nuon {flags}'
  description: "# `from nuon` for formats\n\nConvert from nuon to structured data.\n\n## Signature\n\n`> from nuon {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | any    |\n\n## Examples\n\nConverts nuon formatted string to table\n\n``` shiki\n>'{ a:1 }'|from nuon\n╭───┬───╮\n│a│1│\n╰───┴───╯\n```\n\nConverts nuon formatted string to table\n\n``` shiki\n>'{ a:1, b: [1, 2] }'|from nuon\n╭───┬───────────╮\n│a│1│\n││╭───┬───╮│\n│b││0│1││\n│││1│2││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_nuon.html](https://www.nushell.sh/commands/docs/from_nuon.html)"
- name: from ods
  summary: '> from ods {flags}'
  description: "# `from ods` for formats\n\nParse OpenDocument Spreadsheet(.ods) data and create table.\n\n## Signature\n\n`> from ods {flags} `\n\n## Flags\n\n- `--sheets, -s {list<string>}`: Only convert specified sheets\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | table  |\n\n## Examples\n\nConvert binary .ods data to a table\n\n``` shiki\n>open--rawtest.ods|from ods\n```\n\nConvert binary .ods data to a table, specifying the tables\n\n``` shiki\n>open--rawtest.ods|from ods-s [Spreadsheet1]\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_ods.html](https://www.nushell.sh/commands/docs/from_ods.html)"
- name: from ssv
  summary: '> from ssv {flags}'
  description: "# `from ssv` for formats\n\nParse text as space-separated values and create a table. The default minimum number of spaces counted as a separator is 2.\n\n## Signature\n\n`> from ssv {flags} `\n\n## Flags\n\n- `--noheaders, -n`: don't treat the first row as column names\n- `--aligned-columns, -a`: assume columns are aligned\n- `--minimum-spaces, -m {int}`: the minimum spaces to separate columns\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | table  |\n\n## Examples\n\nConverts ssv formatted string to table\n\n``` shiki\n>'FOO   BAR\n1   2'|from ssv\n╭───┬─────┬─────╮\n│# │ FOO │ BAR │\n├───┼─────┼─────┤\n│0│1│2│\n╰───┴─────┴─────╯\n```\n\nConverts ssv formatted string to table but not treating the first row as column names\n\n``` shiki\n>'FOO   BAR\n1   2'|from ssv-n\n╭───┬─────────┬─────────╮\n│# │ column1 │ column2 │\n├───┼─────────┼─────────┤\n│0│FOO│BAR│\n│1│1│2│\n╰───┴─────────┴─────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_ssv.html](https://www.nushell.sh/commands/docs/from_ssv.html)"
- name: from toml
  summary: '> from toml {flags}'
  description: "# `from toml` for formats\n\nParse text as .toml and create record.\n\n## Signature\n\n`> from toml {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | record |\n\n## Examples\n\nConverts toml formatted string to record\n\n``` shiki\n>'a = 1'|from toml\n╭───┬───╮\n│a│1│\n╰───┴───╯\n```\n\nConverts toml formatted string to record\n\n``` shiki\n>'a = 1\nb = [1, 2]'|from toml\n╭───┬───────────╮\n│a│1│\n││╭───┬───╮│\n│b││0│1││\n│││1│2││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_toml.html](https://www.nushell.sh/commands/docs/from_toml.html)"
- name: from tsv
  summary: '> from tsv {flags}'
  description: "# `from tsv` for formats\n\nParse text as .tsv and create table.\n\n## Signature\n\n`> from tsv {flags} `\n\n## Flags\n\n- `--comment, -c {string}`: a comment character to ignore lines starting with it\n- `--quote, -q {string}`: a quote character to ignore separators in strings, defaults to '\"'\n- `--escape, -e {string}`: an escape character for strings containing the quote character\n- `--noheaders, -n`: don't treat the first row as column names\n- `--flexible, -`: allow the number of fields in records to be variable\n- `--no-infer, -`: no field type inferencing\n- `--trim, -t {string}`: drop leading and trailing whitespaces around headers names and/or field values\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | table  |\n\n## Examples\n\nConvert tab-separated data to a table\n\n``` shiki\n>\"ColA  ColB\n1   2\"|from tsv\n╭───┬──────┬──────╮\n│# │ ColA │ ColB │\n├───┼──────┼──────┤\n│0│1│2│\n╰───┴──────┴──────╯\n```\n\nCreate a tsv file with header columns and open it\n\n``` shiki\n>$'c1(char tab)c2(char tab)c3(char nl)1(char tab)2(char tab)3'|savetsv-data|opentsv-data|from tsv\n```\n\nCreate a tsv file without header columns and open it\n\n``` shiki\n>$'a1(char tab)b1(char tab)c1(char nl)a2(char tab)b2(char tab)c2'|savetsv-data|opentsv-data|from tsv-n\n```\n\nCreate a tsv file without header columns and open it, removing all unnecessary whitespaces\n\n``` shiki\n>$'a1(char tab)b1(char tab)c1(char nl)a2(char tab)b2(char tab)c2'|savetsv-data|opentsv-data|from tsv--trimall\n```\n\nCreate a tsv file without header columns and open it, removing all unnecessary whitespaces in the header names\n\n``` shiki\n>$'a1(char tab)b1(char tab)c1(char nl)a2(char tab)b2(char tab)c2'|savetsv-data|opentsv-data|from tsv--trimheaders\n```\n\nCreate a tsv file without header columns and open it, removing all unnecessary whitespaces in the field values\n\n``` shiki\n>$'a1(char tab)b1(char tab)c1(char nl)a2(char tab)b2(char tab)c2'|savetsv-data|opentsv-data|from tsv--trimfields\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_tsv.html](https://www.nushell.sh/commands/docs/from_tsv.html)"
- name: from url
  summary: '> from url {flags}'
  description: "# `from url` for formats\n\nParse url-encoded string as a record.\n\n## Signature\n\n`> from url {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | record |\n\n## Examples\n\nConvert url encoded string into a record\n\n``` shiki\n>'bread=baguette&cheese=comt%C3%A9&meat=ham&fat=butter'|from url\n╭────────┬──────────╮\n│bread│baguette│\n│cheese│comté│\n│meat│ham│\n│fat│butter│\n╰────────┴──────────╯\n```\n\n**Tips:** Command `from url` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_url.html](https://www.nushell.sh/commands/docs/from_url.html)"
- name: from vcf
  summary: '> from vcf'
  description: "# `from vcf` for formats\n\nParse text as .vcf and create table.\n\n## Signature\n\n`> from vcf `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | table  |\n\n## Examples\n\nConverts ics formatted string to table\n\n``` shiki\n>'BEGIN:VCARD\nN:Foo\nFN:Bar\nEMAIL:foo@bar.com\nEND:VCARD'|from vcf\n╭───┬──────────────────────────────────────╮\n│# │              properties              │\n├───┼──────────────────────────────────────┤\n│0│╭───┬───────┬─────────────┬────────╮│\n│││# │ name  │    value    │ params │ │\n││├───┼───────┼─────────────┼────────┤│\n│││0│N│Foo│││\n│││1│FN│Bar│││\n│││2│EMAIL│foo@bar.com│││\n││╰───┴───────┴─────────────┴────────╯│\n╰───┴──────────────────────────────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_vcf.html](https://www.nushell.sh/commands/docs/from_vcf.html)"
- name: from xlsx
  summary: '> from xlsx {flags}'
  description: "# `from xlsx` for formats\n\nParse binary Excel(.xlsx) data and create table.\n\n## Signature\n\n`> from xlsx {flags} `\n\n## Flags\n\n- `--sheets, -s {list<string>}`: Only convert specified sheets\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| binary | table  |\n\n## Examples\n\nConvert binary .xlsx data to a table\n\n``` shiki\n>open--rawtest.xlsx|from xlsx\n```\n\nConvert binary .xlsx data to a table, specifying the tables\n\n``` shiki\n>open--rawtest.xlsx|from xlsx-s [Spreadsheet1]\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_xlsx.html](https://www.nushell.sh/commands/docs/from_xlsx.html)"
- name: from xml
  summary: '> from xml {flags}'
  description: "# `from xml` for formats\n\nParse text as .xml and create record.\n\n## Signature\n\n`> from xml {flags} `\n\n## Flags\n\n- `--keep-comments, -`: add comment nodes to result\n- `--keep-pi, -`: add processing instruction nodes to result\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | record |\n\n## Examples\n\nConverts xml formatted string to record\n\n``` shiki\n>'<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<note>\n  <remember>Event</remember>\n</note>'|from xml\n╭────────────┬───────────────────────────────────────────────────────────────────────────╮\n│tag│note│\n│attributes│ {record0fields}                                                         │\n││╭───┬──────────┬───────────────────┬────────────────────────────────────╮│\n│content││# │   tag    │    attributes     │              content               │ │\n││├───┼──────────┼───────────────────┼────────────────────────────────────┤│\n│││0│remember│ {record0fields} │╭───┬─────┬────────────┬─────────╮││\n│││││││# │ tag │ attributes │ content │ │ │\n││││││├───┼─────┼────────────┼─────────┤││\n│││││││0│││Event│││\n││││││╰───┴─────┴────────────┴─────────╯││\n││╰───┴──────────┴───────────────────┴────────────────────────────────────╯│\n╰────────────┴───────────────────────────────────────────────────────────────────────────╯\n```\n\n## Notes\n\nEvery XML entry is represented via a record with tag, attribute and content fields. To represent different types of entries different values are written to this fields:\n\n1.  Tag entry: `{tag: <tag name> attrs: {<attr name>: \"<string value>\" ...} content: [<entries>]}`\n2.  Comment entry: `{tag: '!' attrs: null content: \"<comment string>\"}`\n3.  Processing instruction (PI): `{tag: '?<pi name>' attrs: null content: \"<pi content string>\"}`\n4.  Text: `{tag: null attrs: null content: \"<text>\"}`.\n\nUnlike to xml command all null values are always present and text is never represented via plain string. This way content of every tag is always a table and is easier to parse\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_xml.html](https://www.nushell.sh/commands/docs/from_xml.html)"
- name: from yaml
  summary: '> from yaml {flags}'
  description: "# `from yaml` for formats\n\nParse text as .yaml/.yml and create table.\n\n## Signature\n\n`> from yaml {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | any    |\n\n## Examples\n\nConverts yaml formatted string to table\n\n``` shiki\n>'a: 1'|from yaml\n╭───┬───╮\n│a│1│\n╰───┴───╯\n```\n\nConverts yaml formatted string to table\n\n``` shiki\n>'[ a: 1, b: [1, 2] ]'|from yaml\n╭───┬────┬───────────╮\n│# │ a  │     b     │\n├───┼────┼───────────┤\n│0│1│❎│\n│1│❎│╭───┬───╮│\n││││0│1││\n││││1│2││\n│││╰───┴───╯│\n╰───┴────┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_yaml.html](https://www.nushell.sh/commands/docs/from_yaml.html)"
- name: from yml
  summary: '> from yml {flags}'
  description: "# `from yml` for formats\n\nParse text as .yaml/.yml and create table.\n\n## Signature\n\n`> from yml {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | any    |\n\n## Examples\n\nConverts yaml formatted string to table\n\n``` shiki\n>'a: 1'|from yaml\n╭───┬───╮\n│a│1│\n╰───┴───╯\n```\n\nConverts yaml formatted string to table\n\n``` shiki\n>'[ a: 1, b: [1, 2] ]'|from yaml\n╭───┬────┬───────────╮\n│# │ a  │     b     │\n├───┼────┼───────────┤\n│0│1│❎│\n│1│❎│╭───┬───╮│\n││││0│1││\n││││1│2││\n│││╰───┴───╯│\n╰───┴────┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/from_yml.html](https://www.nushell.sh/commands/docs/from_yml.html)"
- name: g
  summary: '> g (shell_number)'
  description: "# `g` for shells\n\nSwitch to a given shell, or list all shells if no given shell number.\n\n## Signature\n\n`> g (shell_number)`\n\n## Parameters\n\n- `shell_number`: shell number to change to\n\n## Examples\n\nLists all open shells\n\n``` shiki\n>g\n```\n\nMake two directories and enter new shells for them, use `g` to jump to the specific shell\n\n``` shiki\n>mkdirfoobar;enterfoo;enter../bar;g1\n```\n\nUse `shells` to show all the opened shells and run `g 2` to jump to the third one\n\n``` shiki\n>shells;g2\n```\n\nMake two directories and enter new shells for them, use `g -` to jump to the last used shell\n\n``` shiki\n>mkdirfoobar;enterfoo;enter../bar;g-\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/g.html](https://www.nushell.sh/commands/docs/g.html)"
- name: Generators
  summary: ''
  description: "# Generators\n\n| Command                        | Description                           |\n|--------------------------------|---------------------------------------|\n| [cal](../docs/cal#_)           | Display a calendar.                   |\n| [seq](../docs/seq#_)           | Output sequences of numbers.          |\n| [seq char](../docs/seq_char#_) | Print a sequence of ASCII characters. |\n| [seq date](../docs/seq_date#_) | Print sequences of dates.             |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/generators.html](https://www.nushell.sh/commands/categories/generators.html)"
- name: get
  summary: '> get {flags} (cell_path) ...rest'
  description: "# `get` for filters\n\nExtract data using a cell path.\n\n## Signature\n\n`> get {flags} (cell_path) ...rest`\n\n## Flags\n\n- `--ignore-errors, -i`: ignore missing data (make all cell path members optional)\n- `--sensitive, -s`: get path in a case sensitive manner\n\n## Parameters\n\n- `cell_path`: the cell path to the data\n- `...rest`: additional cell paths\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | any    |\n| record      | any    |\n| table       | any    |\n\n## Examples\n\nGet an item from a list\n\n``` shiki\n> [012] |get1\n1\n```\n\nGet a column from a table\n\n``` shiki\n> [{A:A0}] |getA\n╭───┬────╮\n│0│A0│\n╰───┴────╯\n```\n\nGet a cell from a table\n\n``` shiki\n> [{A:A0}] |get0.A\nA0\n```\n\nExtract the name of the 3rd record in a list (same as `ls | $in.name`)\n\n``` shiki\n>ls|getname.2\n```\n\nExtract the name of the 3rd record in a list\n\n``` shiki\n>ls|get2.name\n```\n\nExtract the cpu list from the sys information record\n\n``` shiki\n>sys|getcpu\n```\n\nGetting Path/PATH in a case insensitive way\n\n``` shiki\n>$env|getpaTH\n```\n\nGetting Path in a case sensitive way, won't work for 'PATH'\n\n``` shiki\n>$env|get-sPath\n```\n\n## Notes\n\nThis is equivalent to using the cell path access syntax: `$env.OS` is the same as `$env | get OS`.\n\nIf multiple cell paths are given, this will produce a list of values.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/get.html](https://www.nushell.sh/commands/docs/get.html)"
- name: glob
  summary: '> glob {flags} (glob)'
  description: "# `glob` for filesystem\n\nCreates a list of files and/or folders based on the glob pattern provided.\n\n## Signature\n\n`> glob {flags} (glob)`\n\n## Flags\n\n- `--depth, -d {int}`: directory depth to search\n- `--no-dir, -D`: Whether to filter out directories from the returned paths\n- `--no-file, -F`: Whether to filter out files from the returned paths\n- `--no-symlink, -S`: Whether to filter out symlinks from the returned paths\n- `--not, -n {list<string>}`: Patterns to exclude from the results\n\n## Parameters\n\n- `glob`: the glob expression\n\n## Input/output types:\n\n| input   | output         |\n|---------|----------------|\n| nothing | list\\<string\\> |\n\n## Examples\n\nSearch for \\*.rs files\n\n``` shiki\n>glob*.rs\n```\n\nSearch for \\*.rs and \\*.toml files recursively up to 2 folders deep\n\n``` shiki\n>glob**/*.{rs,toml} --depth2\n```\n\nSearch for files and folders that begin with uppercase C and lowercase c\n\n``` shiki\n>glob\"[Cc]*\"\n```\n\nSearch for files and folders like abc or xyz substituting a character for ?\n\n``` shiki\n>glob\"{a?c,x?z}\"\n```\n\nA case-insensitive search for files and folders that begin with c\n\n``` shiki\n>glob\"(?i)c*\"\n```\n\nSearch for files for folders that do not begin with c, C, b, M, or s\n\n``` shiki\n>glob\"[!cCbMs]*\"\n```\n\nSearch for files or folders with 3 a's in a row in the name\n\n``` shiki\n>glob<a*:3>\n```\n\nSearch for files or folders with only a, b, c, or d in the file name between 1 and 10 times\n\n``` shiki\n>glob<[a-d]:1,10>\n```\n\nSearch for folders that begin with an uppercase ASCII letter, ignoring files and symlinks\n\n``` shiki\n>glob\"[A-Z]*\"--no-file--no-symlink\n```\n\nSearch for files named tsconfig.json that are not in node_modules directories\n\n``` shiki\n>glob**/tsconfig.json--not [**/node_modules/**]\n```\n\nSearch for all files that are not in the target nor .git directories\n\n``` shiki\n>glob**/*--not [**/target/****/.git/***/]\n```\n\n## Notes\n\nFor more glob pattern help, please refer to https://github.com/olson-sean-k/wax\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/glob.html](https://www.nushell.sh/commands/docs/glob.html)"
- name: grid
  summary: '> grid {flags}'
  description: "# `grid` for viewers\n\nRenders the output to a textual terminal grid.\n\n## Signature\n\n`> grid {flags} `\n\n## Flags\n\n- `--width, -w {int}`: number of terminal columns wide (not output columns)\n- `--color, -c`: draw output with color\n- `--separator, -s {string}`: character to separate grid with\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | string |\n| record      | string |\n| table       | string |\n\n## Examples\n\nRender a simple list to a grid\n\n``` shiki\n> [123abc] |grid\n1│2│3│a│b│c\n```\n\nThe above example is the same as:\n\n``` shiki\n> [123abc] |wrapname|grid\n1│2│3│a│b│c\n```\n\nRender a record to a grid\n\n``` shiki\n> {name:'foo', b:1, c:2} |grid\nfoo\n```\n\nRender a list of records to a grid\n\n``` shiki\n> [{name:'A', v:1} {name:'B', v:2} {name:'C', v:3}] |grid\nA│B│C\n```\n\nRender a table with 'name' column in it to a grid\n\n``` shiki\n> [[namepatch]; [0.1.0false] [0.1.1true] [0.2.0false]] |grid\n0.1.0│0.1.1│0.2.0\n```\n\n## Notes\n\ngrid was built to give a concise gridded layout for ls. however, it determines what to put in the grid by looking for a column named 'name'. this works great for tables and records but for lists we need to do something different. such as with '\\[one two three\\] \\| grid' it creates a fake column called 'name' for these values so that it prints out the list properly.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/grid.html](https://www.nushell.sh/commands/docs/grid.html)"
- name: group
  summary: '> group {flags} (group_size)'
  description: "# `group` for filters\n\nGroups input into groups of \\`group_size\\`.\n\n## Signature\n\n`> group {flags} (group_size)`\n\n## Parameters\n\n- `group_size`: the size of each group\n\n## Input/output types:\n\n| input       | output              |\n|-------------|---------------------|\n| list\\<any\\> | list\\<list\\<any\\>\\> |\n\n## Examples\n\nGroup the a list by pairs\n\n``` shiki\n> [1234] |group2\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│1││\n│││1│2││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│3││\n│││1│4││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/group.html](https://www.nushell.sh/commands/docs/group.html)"
- name: group-by
  summary: '> group-by {flags} (grouper)'
  description: "# `group-by` for filters\n\nSplits a list or table into groups, and returns a record containing those groups.\n\n## Signature\n\n`> group-by {flags} (grouper)`\n\n## Parameters\n\n- `grouper`: the path to the column to group on\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | record |\n\n## Examples\n\nGroup items by the \"type\" column's values\n\n``` shiki\n>ls|group-bytype\n```\n\nGroup items by the \"foo\" column's values, ignoring records without a \"foo\" column\n\n``` shiki\n>opencool.json|group-byfoo?\n```\n\nGroup using a block which is evaluated against each input value\n\n``` shiki\n> [foo.txtbar.csvbaz.txt] |group-by { path parse|getextension }\n╭─────┬─────────────────╮\n││╭───┬─────────╮│\n│txt││0│foo.txt││\n│││1│baz.txt││\n││╰───┴─────────╯│\n││╭───┬─────────╮│\n│csv││0│bar.csv││\n││╰───┴─────────╯│\n╰─────┴─────────────────╯\n```\n\nYou can also group by raw values by leaving out the argument\n\n``` shiki\n> ['1''3''1''3''2''1''1'] |group-by\n╭───┬───────────╮\n││╭───┬───╮│\n│1││0│1││\n│││1│1││\n│││2│1││\n│││3│1││\n││╰───┴───╯│\n││╭───┬───╮│\n│3││0│3││\n│││1│3││\n││╰───┴───╯│\n││╭───┬───╮│\n│2││0│2││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/group-by.html](https://www.nushell.sh/commands/docs/group-by.html)"
- name: gstat
  summary: '> gstat (path)'
  description: "# `gstat` for prompt\n\nGet the git status of a repo\n\n## Signature\n\n`> gstat (path)`\n\n## Parameters\n\n- `path`: path to repo\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/gstat.html](https://www.nushell.sh/commands/docs/gstat.html)"
- name: Hash
  summary: ''
  description: "# Hash\n\n| Command                                  | Description                                   |\n|------------------------------------------|-----------------------------------------------|\n| [decode base64](../docs/decode_base64#_) | Base64 decode a value.                        |\n| [encode base64](../docs/encode_base64#_) | Encode a string or binary value using Base64. |\n| [hash](../docs/hash#_)                   | Apply hash function.                          |\n| [hash md5](../docs/hash_md5#_)           | Hash a value using the md5 hash algorithm     |\n| [hash sha256](../docs/hash_sha256#_)     | Hash a value using the sha256 hash algorithm  |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/hash.html](https://www.nushell.sh/commands/categories/hash.html)"
- name: hash
  summary: '> hash {flags}'
  description: "# `hash` for hash\n\nApply hash function.\n\n## Signature\n\n`> hash {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                           | type    | usage                                        |\n|--------------------------------|---------|----------------------------------------------|\n| [`hash md5`](hash_md5#_)       | Builtin | Hash a value using the md5 hash algorithm    |\n| [`hash sha256`](hash_sha256#_) | Builtin | Hash a value using the sha256 hash algorithm |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/hash.html](https://www.nushell.sh/commands/docs/hash.html)"
- name: hash md5
  summary: '> hash md5 {flags} ...rest'
  description: "# `hash md5` for hash\n\nHash a value using the md5 hash algorithm\n\n## Signature\n\n`> hash md5 {flags} ...rest`\n\n## Flags\n\n- `--binary, -b`: Output binary instead of hexadecimal representation\n\n## Parameters\n\n- `...rest`: optionally md5 hash data by cell path\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| string | string |\n| table  | table  |\n\n## Examples\n\nReturn the md5 hash of a string, hex-encoded\n\n``` shiki\n>'abcdefghijklmnopqrstuvwxyz'|hash md5\nc3fcd3d76192e4007dfb496cca67e13b\n```\n\nReturn the md5 hash of a string, as binary\n\n``` shiki\n>'abcdefghijklmnopqrstuvwxyz'|hash md5--binary\nLength:16 (0x10) bytes|printablewhitespaceascii_othernon_ascii\n00000000:c3fcd3d76192e4007dfb496cca67e13b××××a××0}×Il×g×;\n```\n\nReturn the md5 hash of a file's contents\n\n``` shiki\n>open./nu_0_24_1_windows.zip|hash md5\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/hash_md5.html](https://www.nushell.sh/commands/docs/hash_md5.html)"
- name: hash sha256
  summary: '> hash sha256 {flags} ...rest'
  description: "# `hash sha256` for hash\n\nHash a value using the sha256 hash algorithm\n\n## Signature\n\n`> hash sha256 {flags} ...rest`\n\n## Flags\n\n- `--binary, -b`: Output binary instead of hexadecimal representation\n\n## Parameters\n\n- `...rest`: optionally sha256 hash data by cell path\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| string | string |\n| table  | table  |\n\n## Examples\n\nReturn the sha256 hash of a string, hex-encoded\n\n``` shiki\n>'abcdefghijklmnopqrstuvwxyz'|hash sha256\n71c480df93d6ae2f1efad1447c66c9525e316218cf51fc8d9ed832f2daf18b73\n```\n\nReturn the sha256 hash of a string, as binary\n\n``` shiki\n>'abcdefghijklmnopqrstuvwxyz'|hash sha256--binary\nLength:32 (0x20) bytes|printablewhitespaceascii_othernon_ascii\n00000000:71c480df93d6ae2f1efad1447c66c952q××××××/•××D|f×R\n00000010:5e316218cf51fc8d9ed832f2daf18b73^1b•×Q××××2××××s\n```\n\nReturn the sha256 hash of a file's contents\n\n``` shiki\n>open./nu_0_24_1_windows.zip|hash sha256\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/hash_sha256.html](https://www.nushell.sh/commands/docs/hash_sha256.html)"
- name: headers
  summary: '> headers {flags}'
  description: "# `headers` for filters\n\nUse the first row of the table as column names.\n\n## Signature\n\n`> headers {flags} `\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | table  |\n| table       | table  |\n\n## Examples\n\nSets the column names for a table created by `split column`\n\n``` shiki\n>\"a b c|1 2 3\"|split row\"|\"|split column\" \"|headers\n╭───┬───┬───┬───╮\n│# │ a │ b │ c │\n├───┼───┼───┼───┤\n│0│1│2│3│\n╰───┴───┴───┴───╯\n```\n\nColumns which don't have data in their first row are removed\n\n``` shiki\n>\"a b c|1 2 3|1 2 3 4\"|split row\"|\"|split column\" \"|headers\n╭───┬───┬───┬───╮\n│# │ a │ b │ c │\n├───┼───┼───┼───┤\n│0│1│2│3│\n│1│1│2│3│\n╰───┴───┴───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/headers.html](https://www.nushell.sh/commands/docs/headers.html)"
- name: help
  summary: '> help {flags} ...rest'
  description: "# `help` for core\n\nDisplay help information about different parts of Nushell.\n\n## Signature\n\n`> help {flags} ...rest`\n\n## Flags\n\n- `--find, -f {string}`: string to find in command names, usage, and search terms\n\n## Parameters\n\n- `...rest`: the name of command, alias or module to get help on\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nshow help for single command, alias, or module\n\n``` shiki\n>helpmatch\n```\n\nshow help for single sub-command, alias, or module\n\n``` shiki\n>helpstrlpad\n```\n\nsearch for string in command names, usage and search terms\n\n``` shiki\n>help--findchar\n```\n\n## Notes\n\n`help word` searches for \"word\" in commands, aliases and modules, in that order.\n\n## Subcommands:\n\n| name                                 | type    | usage                           |\n|--------------------------------------|---------|---------------------------------|\n| [`help aliases`](help_aliases#_)     | Builtin | Show help on nushell aliases.   |\n| [`help commands`](help_commands#_)   | Builtin | Show help on nushell commands.  |\n| [`help externs`](help_externs#_)     | Builtin | Show help on nushell externs.   |\n| [`help modules`](help_modules#_)     | Builtin | Show help on nushell modules.   |\n| [`help operators`](help_operators#_) | Builtin | Show help on nushell operators. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/help.html](https://www.nushell.sh/commands/docs/help.html)"
- name: help aliases
  summary: '> help aliases {flags} ...rest'
  description: "# `help aliases` for core\n\nShow help on nushell aliases.\n\n## Signature\n\n`> help aliases {flags} ...rest`\n\n## Flags\n\n- `--find, -f {string}`: string to find in alias names and usage\n\n## Parameters\n\n- `...rest`: the name of alias to get help on\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nshow all aliases\n\n``` shiki\n>help aliases\n```\n\nshow help for single alias\n\n``` shiki\n>help aliasesmy-alias\n```\n\nsearch for string in alias names and usages\n\n``` shiki\n>help aliases--findmy-alias\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/help_aliases.html](https://www.nushell.sh/commands/docs/help_aliases.html)"
- name: help commands
  summary: '> help commands {flags} ...rest'
  description: "# `help commands` for core\n\nShow help on nushell commands.\n\n## Signature\n\n`> help commands {flags} ...rest`\n\n## Flags\n\n- `--find, -f {string}`: string to find in command names, usage, and search terms\n\n## Parameters\n\n- `...rest`: the name of command to get help on\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/help_commands.html](https://www.nushell.sh/commands/docs/help_commands.html)"
- name: help externs
  summary: '> help externs {flags} ...rest'
  description: "# `help externs` for core\n\nShow help on nushell externs.\n\n## Signature\n\n`> help externs {flags} ...rest`\n\n## Flags\n\n- `--find, -f {string}`: string to find in extern names and usage\n\n## Parameters\n\n- `...rest`: the name of extern to get help on\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nshow all externs\n\n``` shiki\n>help externs\n```\n\nshow help for single extern\n\n``` shiki\n>help externssmth\n```\n\nsearch for string in extern names and usages\n\n``` shiki\n>help externs--findsmth\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/help_externs.html](https://www.nushell.sh/commands/docs/help_externs.html)"
- name: help modules
  summary: '> help modules {flags} ...rest'
  description: "# `help modules` for core\n\nShow help on nushell modules.\n\n## Signature\n\n`> help modules {flags} ...rest`\n\n## Flags\n\n- `--find, -f {string}`: string to find in module names and usage\n\n## Parameters\n\n- `...rest`: the name of module to get help on\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nshow all modules\n\n``` shiki\n>help modules\n```\n\nshow help for single module\n\n``` shiki\n>help modulesmy-module\n```\n\nsearch for string in module names and usages\n\n``` shiki\n>help modules--findmy-module\n```\n\n## Notes\n\nWhen requesting help for a single module, its commands and aliases will be highlighted if they are also available in the current scope. Commands/aliases that were imported under a different name (such as with a prefix after `use some-module`) will be highlighted in parentheses.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/help_modules.html](https://www.nushell.sh/commands/docs/help_modules.html)"
- name: help operators
  summary: '> help operators {flags}'
  description: "# `help operators` for core\n\nShow help on nushell operators.\n\n## Signature\n\n`> help operators {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/help_operators.html](https://www.nushell.sh/commands/docs/help_operators.html)"
- name: hide
  summary: '> hide {flags} (module) (members)'
  description: "# `hide` for core\n\nHide definitions in the current scope.\n\n## Signature\n\n`> hide {flags} (module) (members)`\n\n## Parameters\n\n- `module`: Module or module file\n- `members`: Which members of the module to import\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nHide the alias just defined\n\n``` shiki\n>aliaslll=ls-l;hidelll\n```\n\nHide a custom command\n\n``` shiki\n>defsay-hi [] { echo'Hi!' };hidesay-hi\n```\n\n## Notes\n\nDefinitions are hidden by priority: First aliases, then custom commands.\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/hide.html](https://www.nushell.sh/commands/docs/hide.html)"
- name: hide-env
  summary: '> hide-env {flags} ...rest'
  description: "# `hide-env` for core\n\nHide environment variables in the current scope.\n\n## Signature\n\n`> hide-env {flags} ...rest`\n\n## Flags\n\n- `--ignore-errors, -i`: do not throw an error if an environment variable was not found\n\n## Parameters\n\n- `...rest`: environment variable names to hide\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nHide an environment variable\n\n``` shiki\n>$env.HZ_ENV_ABC=1;hide-envHZ_ENV_ABC;'HZ_ENV_ABC'in (env).name\nfalse\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/hide-env.html](https://www.nushell.sh/commands/docs/hide-env.html)"
- name: histogram
  summary: '> histogram {flags} (column-name) (frequency-column-name)'
  description: "# `histogram` for chart\n\nCreates a new table with a histogram based on the column name passed in.\n\n## Signature\n\n`> histogram {flags} (column-name) (frequency-column-name)`\n\n## Flags\n\n- `--percentage-type, -t {string}`: percentage calculate method, can be 'normalize' or 'relative', in 'normalize', defaults to be 'normalize'\n\n## Parameters\n\n- `column-name`: column name to calc frequency, no need to provide if input is just a list\n- `frequency-column-name`: histogram's frequency column, default to be frequency column output\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | table  |\n\n## Examples\n\nCompute a histogram of file types\n\n``` shiki\n>ls|histogramtype\n```\n\nCompute a histogram for the types of files, with frequency column named freq\n\n``` shiki\n>ls|histogramtypefreq\n```\n\nCompute a histogram for a list of numbers\n\n``` shiki\n> [121] |histogram\n╭────┬────────┬────────┬──────────┬────────────┬────────────────────────────────────────────────────────────────────╮\n│# │ value  │ count  │ quantile │ percentage │                             frequency                              │\n├────┼────────┼────────┼──────────┼────────────┼────────────────────────────────────────────────────────────────────┤\n│0│1│2│0.67│66.67%│******************************************************************│\n│1│2│1│0.33│33.33%│*********************************│\n╰────┴────────┴────────┴──────────┴────────────┴────────────────────────────────────────────────────────────────────╯\n```\n\nCompute a histogram for a list of numbers, and percentage is based on the maximum value\n\n``` shiki\n> [1231112211] |histogram--percentage-typerelative\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/histogram.html](https://www.nushell.sh/commands/docs/histogram.html)"
- name: history
  summary: '> history {flags}'
  description: "# `history` for misc\n\nGet the command history.\n\n## Signature\n\n`> history {flags} `\n\n## Flags\n\n- `--clear, -c`: Clears out the history entries\n- `--long, -l`: Show long listing of entries for sqlite history\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nGet current history length\n\n``` shiki\n>history|length\n```\n\nShow last 5 commands you have ran\n\n``` shiki\n>history|last5\n```\n\nSearch all the commands from history that contains 'cargo'\n\n``` shiki\n>history|wherecommand=~cargo|getcommand\n```\n\n## Subcommands:\n\n| name                                   | type    | usage                            |\n|----------------------------------------|---------|----------------------------------|\n| [`history session`](history_session#_) | Builtin | Get the command history session. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/history.html](https://www.nushell.sh/commands/docs/history.html)"
- name: history session
  summary: '> history session {flags}'
  description: "# `history session` for misc\n\nGet the command history session.\n\n## Signature\n\n`> history session {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | int    |\n\n## Examples\n\nGet current history session\n\n``` shiki\n>history session\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/history_session.html](https://www.nushell.sh/commands/docs/history_session.html)"
- name: http
  summary: '> http {flags}'
  description: "# `http` for network\n\nVarious commands for working with http methods.\n\n## Signature\n\n`> http {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                             | type    | usage                                                     |\n|----------------------------------|---------|-----------------------------------------------------------|\n| [`http delete`](http_delete#_)   | Builtin | Delete the specified resource.                            |\n| [`http get`](http_get#_)         | Builtin | Fetch the contents from a URL.                            |\n| [`http head`](http_head#_)       | Builtin | Get the headers from a URL.                               |\n| [`http options`](http_options#_) | Builtin | Requests permitted communication options for a given URL. |\n| [`http patch`](http_patch#_)     | Builtin | Patch a body to a URL.                                    |\n| [`http post`](http_post#_)       | Builtin | Post a body to a URL.                                     |\n| [`http put`](http_put#_)         | Builtin | Put a body to a URL.                                      |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/http.html](https://www.nushell.sh/commands/docs/http.html)"
- name: http delete
  summary: '> http delete {flags} (URL)'
  description: "# `http delete` for network\n\nDelete the specified resource.\n\n## Signature\n\n`> http delete {flags} (URL)`\n\n## Flags\n\n- `--user, -u {any}`: the username when authenticating\n- `--password, -p {any}`: the password when authenticating\n- `--data, -d {any}`: the content to post\n- `--content-type, -t {any}`: the MIME type of content to post\n- `--max-time, -m {int}`: timeout period in seconds\n- `--headers, -H {any}`: custom headers you want to add\n- `--raw, -r`: fetch contents as text rather than a table\n- `--insecure, -k`: allow insecure server connections when using SSL\n- `--full, -f`: returns the full response instead of only the body\n- `--allow-errors, -e`: do not fail if the server returns an error code\n\n## Parameters\n\n- `URL`: the URL to fetch the contents from\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nhttp delete from example.com\n\n``` shiki\n>http deletehttps://www.example.com\n```\n\nhttp delete from example.com, with username and password\n\n``` shiki\n>http delete-umyuser-pmypasshttps://www.example.com\n```\n\nhttp delete from example.com, with custom header\n\n``` shiki\n>http delete-H [my-header-keymy-header-value] https://www.example.com\n```\n\nhttp delete from example.com, with body\n\n``` shiki\n>http delete-d'body'https://www.example.com\n```\n\nhttp delete from example.com, with JSON body\n\n``` shiki\n>http delete-tapplication/json-d { field:value } https://www.example.com\n```\n\n## Notes\n\nPerforms HTTP DELETE operation.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/http_delete.html](https://www.nushell.sh/commands/docs/http_delete.html)"
- name: http get
  summary: '> http get {flags} (URL)'
  description: "# `http get` for network\n\nFetch the contents from a URL.\n\n## Signature\n\n`> http get {flags} (URL)`\n\n## Flags\n\n- `--user, -u {any}`: the username when authenticating\n- `--password, -p {any}`: the password when authenticating\n- `--max-time, -m {int}`: timeout period in seconds\n- `--headers, -H {any}`: custom headers you want to add\n- `--raw, -r`: fetch contents as text rather than a table\n- `--insecure, -k`: allow insecure server connections when using SSL\n- `--full, -f`: returns the full response instead of only the body\n- `--allow-errors, -e`: do not fail if the server returns an error code\n\n## Parameters\n\n- `URL`: the URL to fetch the contents from\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nGet content from example.com\n\n``` shiki\n>http gethttps://www.example.com\n```\n\nGet content from example.com, with username and password\n\n``` shiki\n>http get-umyuser-pmypasshttps://www.example.com\n```\n\nGet content from example.com, with custom header\n\n``` shiki\n>http get-H [my-header-keymy-header-value] https://www.example.com\n```\n\nGet content from example.com, with custom headers\n\n``` shiki\n>http get-H [my-header-key-Amy-header-value-Amy-header-key-Bmy-header-value-B] https://www.example.com\n```\n\n## Notes\n\nPerforms HTTP GET operation.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/http_get.html](https://www.nushell.sh/commands/docs/http_get.html)"
- name: http head
  summary: '> http head {flags} (URL)'
  description: "# `http head` for network\n\nGet the headers from a URL.\n\n## Signature\n\n`> http head {flags} (URL)`\n\n## Flags\n\n- `--user, -u {any}`: the username when authenticating\n- `--password, -p {any}`: the password when authenticating\n- `--max-time, -m {int}`: timeout period in seconds\n- `--headers, -H {any}`: custom headers you want to add\n- `--insecure, -k`: allow insecure server connections when using SSL\n\n## Parameters\n\n- `URL`: the URL to fetch the contents from\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nGet headers from example.com\n\n``` shiki\n>http headhttps://www.example.com\n```\n\nGet headers from example.com, with username and password\n\n``` shiki\n>http head-umyuser-pmypasshttps://www.example.com\n```\n\nGet headers from example.com, with custom header\n\n``` shiki\n>http head-H [my-header-keymy-header-value] https://www.example.com\n```\n\n## Notes\n\nPerforms HTTP HEAD operation.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/http_head.html](https://www.nushell.sh/commands/docs/http_head.html)"
- name: http options
  summary: '> http options {flags} (URL)'
  description: "# `http options` for network\n\nRequests permitted communication options for a given URL.\n\n## Signature\n\n`> http options {flags} (URL)`\n\n## Flags\n\n- `--user, -u {any}`: the username when authenticating\n- `--password, -p {any}`: the password when authenticating\n- `--max-time, -m {int}`: timeout period in seconds\n- `--headers, -H {any}`: custom headers you want to add\n- `--insecure, -k`: allow insecure server connections when using SSL\n- `--allow-errors, -e`: do not fail if the server returns an error code\n\n## Parameters\n\n- `URL`: the URL to fetch the options from\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nGet options from example.com\n\n``` shiki\n>http optionshttps://www.example.com\n```\n\nGet options from example.com, with username and password\n\n``` shiki\n>http options-umyuser-pmypasshttps://www.example.com\n```\n\nGet options from example.com, with custom header\n\n``` shiki\n>http options-H [my-header-keymy-header-value] https://www.example.com\n```\n\nGet options from example.com, with custom headers\n\n``` shiki\n>http options-H [my-header-key-Amy-header-value-Amy-header-key-Bmy-header-value-B] https://www.example.com\n```\n\nSimulate a browser cross-origin preflight request from www.example.com to media.example.com\n\n``` shiki\n>http optionshttps://media.example.com/api/-H [Originhttps://www.example.comAccess-Control-Request-Headers\"Content-Type, X-Custom-Header\"Access-Control-Request-MethodGET]\n```\n\n## Notes\n\nPerforms an HTTP OPTIONS request. Most commonly used for making CORS preflight requests.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/http_options.html](https://www.nushell.sh/commands/docs/http_options.html)"
- name: http patch
  summary: '> http patch {flags} (URL) (data)'
  description: "# `http patch` for network\n\nPatch a body to a URL.\n\n## Signature\n\n`> http patch {flags} (URL) (data)`\n\n## Flags\n\n- `--user, -u {any}`: the username when authenticating\n- `--password, -p {any}`: the password when authenticating\n- `--content-type, -t {any}`: the MIME type of content to post\n- `--max-time, -m {int}`: timeout period in seconds\n- `--headers, -H {any}`: custom headers you want to add\n- `--raw, -r`: return values as a string instead of a table\n- `--insecure, -k`: allow insecure server connections when using SSL\n- `--full, -f`: returns the full response instead of only the body\n- `--allow-errors, -e`: do not fail if the server returns an error code\n\n## Parameters\n\n- `URL`: the URL to post to\n- `data`: the contents of the post body\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nPatch content to example.com\n\n``` shiki\n>http patchhttps://www.example.com'body'\n```\n\nPatch content to example.com, with username and password\n\n``` shiki\n>http patch-umyuser-pmypasshttps://www.example.com'body'\n```\n\nPatch content to example.com, with custom header\n\n``` shiki\n>http patch-H [my-header-keymy-header-value] https://www.example.com\n```\n\nPatch content to example.com, with JSON body\n\n``` shiki\n>http patch-tapplication/jsonhttps://www.example.com { field:value }\n```\n\n## Notes\n\nPerforms HTTP PATCH operation.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/http_patch.html](https://www.nushell.sh/commands/docs/http_patch.html)"
- name: http post
  summary: '> http post {flags} (URL) (data)'
  description: "# `http post` for network\n\nPost a body to a URL.\n\n## Signature\n\n`> http post {flags} (URL) (data)`\n\n## Flags\n\n- `--user, -u {any}`: the username when authenticating\n- `--password, -p {any}`: the password when authenticating\n- `--content-type, -t {any}`: the MIME type of content to post\n- `--max-time, -m {int}`: timeout period in seconds\n- `--headers, -H {any}`: custom headers you want to add\n- `--raw, -r`: return values as a string instead of a table\n- `--insecure, -k`: allow insecure server connections when using SSL\n- `--full, -f`: returns the full response instead of only the body\n- `--allow-errors, -e`: do not fail if the server returns an error code\n\n## Parameters\n\n- `URL`: the URL to post to\n- `data`: the contents of the post body\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nPost content to example.com\n\n``` shiki\n>http posthttps://www.example.com'body'\n```\n\nPost content to example.com, with username and password\n\n``` shiki\n>http post-umyuser-pmypasshttps://www.example.com'body'\n```\n\nPost content to example.com, with custom header\n\n``` shiki\n>http post-H [my-header-keymy-header-value] https://www.example.com\n```\n\nPost content to example.com, with JSON body\n\n``` shiki\n>http post-tapplication/jsonhttps://www.example.com { field:value }\n```\n\n## Notes\n\nPerforms HTTP POST operation.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/http_post.html](https://www.nushell.sh/commands/docs/http_post.html)"
- name: http put
  summary: '> http put {flags} (URL) (data)'
  description: "# `http put` for network\n\nPut a body to a URL.\n\n## Signature\n\n`> http put {flags} (URL) (data)`\n\n## Flags\n\n- `--user, -u {any}`: the username when authenticating\n- `--password, -p {any}`: the password when authenticating\n- `--content-type, -t {any}`: the MIME type of content to post\n- `--max-time, -m {int}`: timeout period in seconds\n- `--headers, -H {any}`: custom headers you want to add\n- `--raw, -r`: return values as a string instead of a table\n- `--insecure, -k`: allow insecure server connections when using SSL\n- `--full, -f`: returns the full response instead of only the body\n- `--allow-errors, -e`: do not fail if the server returns an error code\n\n## Parameters\n\n- `URL`: the URL to post to\n- `data`: the contents of the post body\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nPut content to example.com\n\n``` shiki\n>http puthttps://www.example.com'body'\n```\n\nPut content to example.com, with username and password\n\n``` shiki\n>http put-umyuser-pmypasshttps://www.example.com'body'\n```\n\nPut content to example.com, with custom header\n\n``` shiki\n>http put-H [my-header-keymy-header-value] https://www.example.com\n```\n\nPut content to example.com, with JSON body\n\n``` shiki\n>http put-tapplication/jsonhttps://www.example.com { field:value }\n```\n\n## Notes\n\nPerforms HTTP PUT operation.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/http_put.html](https://www.nushell.sh/commands/docs/http_put.html)"
- name: if
  summary: '> if {flags} (cond) (then_block) (else_expression)'
  description: "# `if` for core\n\nConditionally run a block.\n\n## Signature\n\n`> if {flags} (cond) (then_block) (else_expression)`\n\n## Parameters\n\n- `cond`: condition to check\n- `then_block`: block to run if check succeeds\n- `else_expression`: expression or block to run if check fails\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nOutput a value if a condition matches, otherwise return nothing\n\n``` shiki\n>if2<3 { 'yes!' }\nyes!\n```\n\nOutput a value if a condition matches, else return another value\n\n``` shiki\n>if5<3 { 'yes!' } else { 'no!' }\nno!\n```\n\nChain multiple if's together\n\n``` shiki\n>if5<3 { 'yes!' } else if4<5 { 'no!' } else { 'okay!' }\nno!\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/if.html](https://www.nushell.sh/commands/docs/if.html)"
- name: ignore
  summary: '> ignore {flags}'
  description: "# `ignore` for core\n\nIgnore the output of the previous command in the pipeline.\n\n## Signature\n\n`> ignore {flags} `\n\n## Input/output types:\n\n| input | output  |\n|-------|---------|\n| any   | nothing |\n\n## Examples\n\nIgnore the output of an echo command\n\n``` shiki\n>echodone|ignore\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/ignore.html](https://www.nushell.sh/commands/docs/ignore.html)"
- name: inc
  summary: '> inc (cell_path) --major --minor --patch'
  description: "# `inc` for default\n\nIncrement a value or version. Optionally use the column of a table.\n\n## Signature\n\n`> inc (cell_path) --major --minor --patch`\n\n## Parameters\n\n- `cell_path`: cell path to update\n- `--major` `(-M)`: increment the major version (eg 1.2.1 -\\> 2.0.0)\n- `--minor` `(-m)`: increment the minor version (eg 1.2.1 -\\> 1.3.0)\n- `--patch` `(-p)`: increment the patch version (eg 1.2.1 -\\> 1.2.2)\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/inc.html](https://www.nushell.sh/commands/docs/inc.html)"
- name: input
  summary: '> input {flags} (prompt)'
  description: "# `input` for platform\n\nGet input from the user.\n\n## Signature\n\n`> input {flags} (prompt)`\n\n## Flags\n\n- `--bytes-until-any, -u {string}`: read bytes (not text) until any of the given stop bytes is seen\n- `--numchar, -n {int}`: number of characters to read; suppresses output\n- `--suppress-output, -s`: don't print keystroke values\n\n## Parameters\n\n- `prompt`: prompt to show the user\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nGet input from the user, and assign to a variable\n\n``` shiki\n>letuser_input= (input)\n```\n\nGet two characters from the user, and assign to a variable\n\n``` shiki\n>letuser_input= (input--numchar2)\n```\n\n## Subcommands:\n\n| name                             | type    | usage                           |\n|----------------------------------|---------|---------------------------------|\n| [`input list`](input_list#_)     | Builtin | Interactive list selection.     |\n| [`input listen`](input_listen#_) | Builtin | Listen for user interface event |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/input.html](https://www.nushell.sh/commands/docs/input.html)"
- name: input list
  summary: '> input list {flags} (prompt)'
  description: "# `input list` for platform\n\nInteractive list selection.\n\n## Signature\n\n`> input list {flags} (prompt)`\n\n## Flags\n\n- `--multi, -m`: Use multiple results, you can press a to toggle all options on/off\n- `--fuzzy, -f`: Use a fuzzy select.\n\n## Parameters\n\n- `prompt`: the prompt to display\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n\n## Examples\n\nReturn a single value from a list\n\n``` shiki\n> [12345] |input list'Rate it'\n```\n\nReturn multiple values from a list\n\n``` shiki\n> [BananaKiwiPearPeachStrawberry] |input list-m'Add fruits to the basket'\n```\n\nReturn a single record from a table with fuzzy search\n\n``` shiki\n>ls|input list-f'Select the target'\n```\n\n## Notes\n\nAbort with esc or q.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/input_list.html](https://www.nushell.sh/commands/docs/input_list.html)"
- name: input listen
  summary: '> input listen {flags}'
  description: "# `input listen` for platform\n\nListen for user interface event\n\n## Signature\n\n`> input listen {flags} `\n\n## Flags\n\n- `--types, -t {list<string>}`: Listen for event of specified types only (can be one of: focus, key, mouse, paste, resize)\n- `--raw, -r`: Add raw_code field with numeric value of keycode and raw_flags with bit mask flags\n\n## Input/output types:\n\n| input   | output                                               |\n|---------|------------------------------------------------------|\n| nothing | record\\<keycode: string, modifiers: list\\<string\\>\\> |\n\n## Examples\n\nListen for a keyboard shortcut and find out how nu receives it\n\n``` shiki\n>input listen--types [key]\n```\n\n## Notes\n\nThere are 5 different type of events: focus, key, mouse, paste, resize. Each will produce a corresponding record, distinguished by type field:\n\n``` shiki\n    { type: focus event: (gained|lost) }\n    { type: key key_type: <key_type> code: <string> modifiers: [ <modifier> ... ] }\n    { type: mouse col: <int> row: <int> kind: <string> modifiers: [ <modifier> ... ] }\n    { type: paste content: <string> }\n    { type: resize col: <int> row: <int> }\n```\n\nThere are 6 `modifier` variants: shift, control, alt, super, hyper, meta. There are 4 `key_type` variants: f - f1, f2, f3 ... keys char - alphanumeric and special symbols (a, A, 1, \\$ ...) media - dedicated media keys (play, pause, tracknext ...) other - keys not falling under previous categories (up, down, backspace, enter ...)\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/input_listen.html](https://www.nushell.sh/commands/docs/input_listen.html)"
- name: insert
  summary: '> insert {flags} (field) (new value)'
  description: "# `insert` for filters\n\nInsert a new column, using an expression or closure to create each row's values.\n\n## Signature\n\n`> insert {flags} (field) (new value)`\n\n## Parameters\n\n- `field`: the name of the column to insert\n- `new value`: the new value to give the cell(s)\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| record      | record      |\n| table       | table       |\n\n## Examples\n\nInsert a new entry into a single record\n\n``` shiki\n> {'name':'nu', 'stars':5} |insertalias'Nushell'\n╭───────┬─────────╮\n│name│nu│\n│stars│5│\n│alias│Nushell│\n╰───────┴─────────╯\n```\n\nInsert a new column into a table, populating all rows\n\n``` shiki\n> [[project, lang]; ['Nushell', 'Rust']] |inserttype'shell'\n╭───┬─────────┬──────┬───────╮\n│# │ project │ lang │ type  │\n├───┼─────────┼──────┼───────┤\n│0│Nushell│Rust│shell│\n╰───┴─────────┴──────┴───────╯\n```\n\nInsert a column with values equal to their row index, plus the value of 'foo' in each row\n\n``` shiki\n> [[foo]; [7] [8] [9]] |enumerate|insertbar {|e| $e.item.foo+$e.index } |flatten\n╭───┬─────┬─────╮\n│# │ foo │ bar │\n├───┼─────┼─────┤\n│0│7│7│\n│1│8│9│\n│2│9│11│\n╰───┴─────┴─────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/insert.html](https://www.nushell.sh/commands/docs/insert.html)"
- name: inspect
  summary: '> inspect {flags}'
  description: "# `inspect` for debug\n\nInspect pipeline results while running a pipeline.\n\n## Signature\n\n`> inspect {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nInspect pipeline results\n\n``` shiki\n>ls|inspect|getname|inspect\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/inspect.html](https://www.nushell.sh/commands/docs/inspect.html)"
- name: into
  summary: '> into {flags}'
  description: "# `into` for conversions\n\nCommands to convert data from one type to another.\n\n## Signature\n\n`> into {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                               | type    | usage                                                  |\n|------------------------------------|---------|--------------------------------------------------------|\n| [`into binary`](into_binary#_)     | Builtin | Convert value to a binary primitive.                   |\n| [`into bits`](into_bits#_)         | Builtin | Convert value to a binary primitive.                   |\n| [`into bool`](into_bool#_)         | Builtin | Convert value to boolean.                              |\n| [`into datetime`](into_datetime#_) | Builtin | Convert text or timestamp into a datetime.             |\n| [`into decimal`](into_decimal#_)   | Builtin | deprecated: convert data into a floating point number. |\n| [`into duration`](into_duration#_) | Builtin | Convert value to duration.                             |\n| [`into filesize`](into_filesize#_) | Builtin | Convert value to filesize.                             |\n| [`into float`](into_float#_)       | Builtin | Convert data into floating point number.               |\n| [`into int`](into_int#_)           | Builtin | Convert value to integer.                              |\n| [`into record`](into_record#_)     | Builtin | Convert value to record.                               |\n| [`into sqlite`](into_sqlite#_)     | Builtin | Convert table into a SQLite database.                  |\n| [`into string`](into_string#_)     | Builtin | Convert value to string.                               |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into.html](https://www.nushell.sh/commands/docs/into.html)"
- name: into binary
  summary: '> into binary {flags} ...rest'
  description: "# `into binary` for conversions\n\nConvert value to a binary primitive.\n\n## Signature\n\n`> into binary {flags} ...rest`\n\n## Flags\n\n- `--compact, -c`: output without padding zeros\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input    | output |\n|----------|--------|\n| binary   | binary |\n| bool     | binary |\n| datetime | binary |\n| filesize | binary |\n| int      | binary |\n| number   | binary |\n| record   | record |\n| string   | binary |\n| table    | table  |\n\n## Examples\n\nconvert string to a nushell binary primitive\n\n``` shiki\n>'This is a string that is exactly 52 characters long.'|into binary\nLength:52 (0x34) bytes|printablewhitespaceascii_othernon_ascii\n00000000:54686973206973206120737472696e67Thisisastring\n00000010:20746861742069732065786163746c79thatisexactly\n00000020:2035322063686172616374657273206c52charactersl\n00000030:6f6e672eong.\n```\n\nconvert a number to a nushell binary primitive\n\n``` shiki\n>1|into binary\nLength:8 (0x8) bytes|printablewhitespaceascii_othernon_ascii\n00000000:0100000000000000•0000000\n```\n\nconvert a boolean to a nushell binary primitive\n\n``` shiki\n>true|into binary\nLength:8 (0x8) bytes|printablewhitespaceascii_othernon_ascii\n00000000:0100000000000000•0000000\n```\n\nconvert a filesize to a nushell binary primitive\n\n``` shiki\n>ls|wherename==LICENSE|getsize|into binary\n```\n\nconvert a filepath to a nushell binary primitive\n\n``` shiki\n>ls|wherename==LICENSE|getname|path expand|into binary\n```\n\nconvert a float to a nushell binary primitive\n\n``` shiki\n>1.234|into binary\nLength:8 (0x8) bytes|printablewhitespaceascii_othernon_ascii\n00000000:5839b4c876bef33fX9××v××?\n```\n\nconvert an integer to a nushell binary primitive with compact enabled\n\n``` shiki\n>10|into binary--compact\nLength:1 (0x1) bytes|printablewhitespaceascii_othernon_ascii\n00000000:0a_\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_binary.html](https://www.nushell.sh/commands/docs/into_binary.html)"
- name: into bits
  summary: '> into bits {flags} ...rest'
  description: "# `into bits` for conversions\n\nConvert value to a binary primitive.\n\n## Signature\n\n`> into bits {flags} ...rest`\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input    | output |\n|----------|--------|\n| binary   | string |\n| bool     | string |\n| datetime | string |\n| duration | string |\n| filesize | string |\n| int      | string |\n| record   | record |\n| string   | string |\n| table    | table  |\n\n## Examples\n\nconvert a binary value into a string, padded to 8 places with 0s\n\n``` shiki\n>01b|into bits\n00000001\n```\n\nconvert an int into a string, padded to 8 places with 0s\n\n``` shiki\n>1|into bits\n00000001\n```\n\nconvert a filesize value into a string, padded to 8 places with 0s\n\n``` shiki\n>1b|into bits\n00000001\n```\n\nconvert a duration value into a string, padded to 8 places with 0s\n\n``` shiki\n>1ns|into bits\n00000001\n```\n\nconvert a boolean value into a string, padded to 8 places with 0s\n\n``` shiki\n>true|into bits\n00000001\n```\n\nconvert a datetime value into a string, padded to 8 places with 0s\n\n``` shiki\n>2023-04-17T01:02:03|into bits\n010011010110111101101110001000000100000101110000011100100010000000110001001101110010000000110000001100010011101000110000001100100011101000110000001100110010000000110010001100000011001000110011\n```\n\nconvert a string into a raw binary string, padded with 0s to 8 places\n\n``` shiki\n>'nushell.sh'|into bits\n01101110011101010111001101101000011001010110110001101100001011100111001101101000\n```\n\n**Tips:** Command `into bits` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_bits.html](https://www.nushell.sh/commands/docs/into_bits.html)"
- name: into bool
  summary: '> into bool {flags} ...rest'
  description: "# `into bool` for conversions\n\nConvert value to boolean.\n\n## Signature\n\n`> into bool {flags} ...rest`\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| bool        | bool   |\n| int         | bool   |\n| list\\<any\\> | table  |\n| number      | bool   |\n| record      | record |\n| string      | bool   |\n| table       | table  |\n\n## Examples\n\nConvert value to boolean in table\n\n``` shiki\n> [[value]; ['false'] ['1'] [0] [1.0] [true]] |into boolvalue\n╭───┬───────╮\n│# │ value │\n├───┼───────┤\n│0│false│\n│1│true│\n│2│false│\n│3│true│\n│4│true│\n╰───┴───────╯\n```\n\nConvert bool to boolean\n\n``` shiki\n>true|into bool\ntrue\n```\n\nconvert integer to boolean\n\n``` shiki\n>1|into bool\ntrue\n```\n\nconvert float to boolean\n\n``` shiki\n>0.3|into bool\ntrue\n```\n\nconvert float string to boolean\n\n``` shiki\n>'0.0'|into bool\nfalse\n```\n\nconvert string to boolean\n\n``` shiki\n>'true'|into bool\ntrue\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_bool.html](https://www.nushell.sh/commands/docs/into_bool.html)"
- name: into datetime
  summary: '> into datetime {flags} ...rest'
  description: "# `into datetime` for conversions\n\nConvert text or timestamp into a datetime.\n\n## Signature\n\n`> into datetime {flags} ...rest`\n\n## Flags\n\n- `--timezone, -z {string}`: Specify timezone if the input is a Unix timestamp. Valid options: 'UTC' ('u') or 'LOCAL' ('l')\n- `--offset, -o {int}`: Specify timezone by offset from UTC if the input is a Unix timestamp, like '+8', '-4'\n- `--format, -f {string}`: Specify expected format of INPUT string to parse to datetime. Use --list to see options\n- `--list, -l`: Show all possible variables for use in --format flag\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input          | output           |\n|----------------|------------------|\n| int            | datetime         |\n| list\\<string\\> | list\\<datetime\\> |\n| record         | record           |\n| string         | datetime         |\n| table          | table            |\n\n## Examples\n\nConvert any standard timestamp string to datetime\n\n``` shiki\n>'27.02.2021 1:55 pm +0000'|into datetime\nSat, 27Feb202113:55:00+0000 (2yearsago)\n```\n\nConvert any standard timestamp string to datetime\n\n``` shiki\n>'2021-02-27T13:55:40.2246+00:00'|into datetime\nSat, 27Feb202113:55:40+0000 (2yearsago)\n```\n\nConvert non-standard timestamp string to datetime using a custom format\n\n``` shiki\n>'20210227_135540+0000'|into datetime-f'%Y%m%d_%H%M%S%z'\nSat, 27Feb202113:55:40+0000 (2yearsago)\n```\n\nConvert nanosecond-precision unix timestamp to a datetime with offset from UTC\n\n``` shiki\n>1614434140123456789|into datetime--offset-5\nSat, 27Feb202113:55:40+0000 (2yearsago)\n```\n\nConvert standard (seconds) unix timestamp to a UTC datetime\n\n``` shiki\n>1614434140*1_000_000_000|into datetime\nSat, 27Feb202113:55:40+0000 (2yearsago)\n```\n\nConvert list of timestamps to datetimes\n\n``` shiki\n> [\"2023-03-30 10:10:07 -05:00\", \"2023-05-05 13:43:49 -05:00\", \"2023-06-05 01:37:42 -05:00\"] |into datetime\n╭───┬──────────────╮\n│0│6monthsago│\n│1│5monthsago│\n│2│4monthsago│\n╰───┴──────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_datetime.html](https://www.nushell.sh/commands/docs/into_datetime.html)"
- name: into decimal
  summary: '> into decimal {flags} ...rest'
  description: "# `into decimal` for conversions\n\ndeprecated: convert data into a floating point number.\n\n## Signature\n\n`> into decimal {flags} ...rest`\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input       | output         |\n|-------------|----------------|\n| bool        | number         |\n| int         | number         |\n| list\\<any\\> | list\\<number\\> |\n| number      | number         |\n| record      | record         |\n| string      | number         |\n| table       | table          |\n\n## Examples\n\nConvert string to float in table\n\n``` shiki\n> [[num]; ['5.01']] |into decimalnum\n╭───┬──────╮\n│# │ num  │\n├───┼──────┤\n│0│5.01│\n╰───┴──────╯\n```\n\nConvert string to float\n\n``` shiki\n>'1.345'|into decimal\n1.345\n```\n\nCoerce list of ints and floats to float\n\n``` shiki\n> [4-5.9] |into decimal\n╭───┬───────╮\n│0│4.00│\n│1│-5.90│\n╰───┴───────╯\n```\n\nConvert boolean to float\n\n``` shiki\n>true|into decimal\n1\n```\n\n## Notes\n\nUse `into float` instead\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_decimal.html](https://www.nushell.sh/commands/docs/into_decimal.html)"
- name: into duration
  summary: '> into duration {flags} ...rest'
  description: "# `into duration` for conversions\n\nConvert value to duration.\n\n## Signature\n\n`> into duration {flags} ...rest`\n\n## Flags\n\n- `--unit, -u {string}`: Unit to convert number into (will have an effect only with integer input)\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input    | output   |\n|----------|----------|\n| duration | duration |\n| int      | duration |\n| string   | duration |\n| table    | table    |\n\n## Examples\n\nConvert duration string to duration value\n\n``` shiki\n>'7min'|into duration\n7min\n```\n\nConvert compound duration string to duration value\n\n``` shiki\n>'1day 2hr 3min 4sec'|into duration\n1day2hr3min4sec\n```\n\nConvert table of duration strings to table of duration values\n\n``` shiki\n> [[value]; ['1sec'] ['2min'] ['3hr'] ['4day'] ['5wk']] |into durationvalue\n╭───┬───────╮\n│# │ value │\n├───┼───────┤\n│0│1sec│\n│1│2min│\n│2│3hr│\n│3│4day│\n│4│5wk│\n╰───┴───────╯\n```\n\nConvert duration to duration\n\n``` shiki\n>420sec|into duration\n7min\n```\n\nConvert a number of ns to duration\n\n``` shiki\n>1_234_567|into duration\n1ms234µs567ns\n```\n\nConvert a number of an arbitrary unit to duration\n\n``` shiki\n>1_234|into duration--unitms\n1sec234ms\n```\n\n## Notes\n\nMax duration value is i64::MAX nanoseconds; max duration time unit is wk (weeks).\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_duration.html](https://www.nushell.sh/commands/docs/into_duration.html)"
- name: into filesize
  summary: '> into filesize {flags} ...rest'
  description: "# `into filesize` for conversions\n\nConvert value to filesize.\n\n## Signature\n\n`> into filesize {flags} ...rest`\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input            | output           |\n|------------------|------------------|\n| filesize         | filesize         |\n| int              | filesize         |\n| list\\<any\\>      | list\\<filesize\\> |\n| list\\<filesize\\> | list\\<filesize\\> |\n| list\\<int\\>      | list\\<filesize\\> |\n| list\\<number\\>   | list\\<filesize\\> |\n| list\\<string\\>   | list\\<filesize\\> |\n| number           | filesize         |\n| record           | record           |\n| string           | filesize         |\n| table            | table            |\n\n## Examples\n\nConvert string to filesize in table\n\n``` shiki\n> [[devicesize]; [\"/dev/sda1\"\"200\"] [\"/dev/loop0\"\"50\"]] |into filesizesize\n╭───┬────────────┬───────╮\n│# │   device   │ size  │\n├───┼────────────┼───────┤\n│0│/dev/sda1│200B│\n│1│/dev/loop0│50B│\n╰───┴────────────┴───────╯\n```\n\nConvert string to filesize\n\n``` shiki\n>'2'|into filesize\n2B\n```\n\nConvert float to filesize\n\n``` shiki\n>8.3|into filesize\n8B\n```\n\nConvert int to filesize\n\n``` shiki\n>5|into filesize\n5B\n```\n\nConvert file size to filesize\n\n``` shiki\n>4KB|into filesize\n3.9KiB\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_filesize.html](https://www.nushell.sh/commands/docs/into_filesize.html)"
- name: into float
  summary: '> into float {flags} ...rest'
  description: "# `into float` for conversions\n\nConvert data into floating point number.\n\n## Signature\n\n`> into float {flags} ...rest`\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input       | output         |\n|-------------|----------------|\n| bool        | number         |\n| int         | number         |\n| list\\<any\\> | list\\<number\\> |\n| number      | number         |\n| record      | record         |\n| string      | number         |\n| table       | table          |\n\n## Examples\n\nConvert string to float in table\n\n``` shiki\n> [[num]; ['5.01']] |into floatnum\n╭───┬──────╮\n│# │ num  │\n├───┼──────┤\n│0│5.01│\n╰───┴──────╯\n```\n\nConvert string to floating point number\n\n``` shiki\n>'1.345'|into float\n1.345\n```\n\nCoerce list of ints and floats to float\n\n``` shiki\n> [4-5.9] |into float\n╭───┬───────╮\n│0│4.00│\n│1│-5.90│\n╰───┴───────╯\n```\n\nConvert boolean to float\n\n``` shiki\n>true|into float\n1\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_float.html](https://www.nushell.sh/commands/docs/into_float.html)"
- name: into int
  summary: '> into int {flags} ...rest'
  description: "# `into int` for conversions\n\nConvert value to integer.\n\n## Signature\n\n`> into int {flags} ...rest`\n\n## Flags\n\n- `--radix, -r {number}`: radix of integer\n- `--endian, -e {string}`: byte encode endian, available options: native(default), little, big\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input            | output      |\n|------------------|-------------|\n| binary           | int         |\n| bool             | int         |\n| datetime         | int         |\n| duration         | int         |\n| filesize         | int         |\n| list\\<any\\>      | list\\<int\\> |\n| list\\<bool\\>     | list\\<int\\> |\n| list\\<datetime\\> | list\\<int\\> |\n| list\\<duration\\> | list\\<int\\> |\n| list\\<filesize\\> | list\\<int\\> |\n| list\\<number\\>   | list\\<int\\> |\n| list\\<string\\>   | list\\<int\\> |\n| number           | int         |\n| record           | record      |\n| string           | int         |\n| table            | table       |\n\n## Examples\n\nConvert string to integer in table\n\n``` shiki\n> [[num]; ['-5'] [4] [1.5]] |into intnum\n```\n\nConvert string to integer\n\n``` shiki\n>'2'|into int\n2\n```\n\nConvert float to integer\n\n``` shiki\n>5.9|into int\n5\n```\n\nConvert decimal string to integer\n\n``` shiki\n>'5.9'|into int\n5\n```\n\nConvert file size to integer\n\n``` shiki\n>4KB|into int\n4000\n```\n\nConvert bool to integer\n\n``` shiki\n> [false, true] |into int\n╭───┬───╮\n│0│0│\n│1│1│\n╰───┴───╯\n```\n\nConvert date to integer (Unix nanosecond timestamp)\n\n``` shiki\n>1983-04-13T12:09:14.123456789-05:00|into int\n419101754123456789\n```\n\nConvert to integer from binary\n\n``` shiki\n>'1101'|into int-r2\n13\n```\n\nConvert to integer from hex\n\n``` shiki\n>'FF'|into int-r16\n255\n```\n\nConvert octal string to integer\n\n``` shiki\n>'0o10132'|into int\n4186\n```\n\nConvert 0 padded string to integer\n\n``` shiki\n>'0010132'|into int\n10132\n```\n\nConvert 0 padded string to integer with radix\n\n``` shiki\n>'0010132'|into int-r8\n4186\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_int.html](https://www.nushell.sh/commands/docs/into_int.html)"
- name: into record
  summary: '> into record {flags}'
  description: "# `into record` for conversions\n\nConvert value to record.\n\n## Signature\n\n`> into record {flags} `\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| datetime    | record |\n| duration    | record |\n| list\\<any\\> | record |\n| range       | record |\n| record      | record |\n| table       | record |\n\n## Examples\n\nConvert from one row table to record\n\n``` shiki\n> [[value]; [false]] |into record\n╭───────┬───────╮\n│value│false│\n╰───────┴───────╯\n```\n\nConvert from list to record\n\n``` shiki\n> [123] |into record\n╭───┬───╮\n│0│1│\n│1│2│\n│2│3│\n╰───┴───╯\n```\n\nConvert from range to record\n\n``` shiki\n>0..2|into record\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n╰───┴───╯\n```\n\nconvert duration to record (weeks max)\n\n``` shiki\n> (-500day-4hr-5sec) |into record\n╭────────┬────╮\n│week│71│\n│day│3│\n│hour│4│\n│second│5│\n│sign│-│\n╰────────┴────╯\n```\n\nconvert record to record\n\n``` shiki\n> {a:1, b:2} |into record\n╭───┬───╮\n│a│1│\n│b│2│\n╰───┴───╯\n```\n\nconvert date to record\n\n``` shiki\n>2020-04-12T22:10:57+02:00|into record\n╭──────────┬────────╮\n│year│2020│\n│month│4│\n│day│12│\n│hour│22│\n│minute│10│\n│second│57│\n│timezone│+02:00│\n╰──────────┴────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_record.html](https://www.nushell.sh/commands/docs/into_record.html)"
- name: into sqlite
  summary: '> into sqlite {flags} (file_name)'
  description: "# `into sqlite` for conversions\n\nConvert table into a SQLite database.\n\n## Signature\n\n`> into sqlite {flags} (file_name)`\n\n## Flags\n\n- `--table_name, -t {string}`: Specify table name to store the data in\n\n## Parameters\n\n- `file_name`: Specify the filename to save the database to\n\n## Input/output types:\n\n| input | output  |\n|-------|---------|\n| any   | nothing |\n\n## Examples\n\nConvert ls entries into a SQLite database with 'main' as the table name\n\n``` shiki\n>ls|into sqlitemy_ls.db\n```\n\nConvert ls entries into a SQLite database with 'my_table' as the table name\n\n``` shiki\n>ls|into sqlitemy_ls.db-tmy_table\n```\n\nConvert table literal into a SQLite database with 'main' as the table name\n\n``` shiki\n> [[name]; [-----] [someone] [=====] [somename] ['(((((']] |into sqlitefilename.db\n```\n\nConvert a variety of values in table literal form into a SQLite database\n\n``` shiki\n> [one25.2sixtrue100mib25sec] |into sqlitevariety.db\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_sqlite.html](https://www.nushell.sh/commands/docs/into_sqlite.html)"
- name: into string
  summary: '> into string {flags} ...rest'
  description: "# `into string` for conversions\n\nConvert value to string.\n\n## Signature\n\n`> into string {flags} ...rest`\n\n## Flags\n\n- `--decimals, -d {int}`: decimal digits to which to round\n\n## Parameters\n\n- `...rest`: for a data structure input, convert data at the given cell paths\n\n## Input/output types:\n\n| input       | output         |\n|-------------|----------------|\n| binary      | string         |\n| bool        | string         |\n| datetime    | string         |\n| duration    | string         |\n| filesize    | string         |\n| int         | string         |\n| list\\<any\\> | list\\<string\\> |\n| number      | string         |\n| record      | record         |\n| string      | string         |\n| table       | table          |\n\n## Examples\n\nconvert integer to string and append three decimal places\n\n``` shiki\n>5|into string-d3\n5.000\n```\n\nconvert float to string and round to nearest integer\n\n``` shiki\n>1.7|into string-d0\n2\n```\n\nconvert float to string\n\n``` shiki\n>1.7|into string-d1\n1.7\n```\n\nconvert float to string and limit to 2 decimals\n\n``` shiki\n>1.734|into string-d2\n1.73\n```\n\ntry to convert float to string and provide negative decimal points\n\n``` shiki\n>1.734|into string-d-2\n```\n\nconvert float to string\n\n``` shiki\n>4.3|into string\n4.3\n```\n\nconvert string to string\n\n``` shiki\n>'1234'|into string\n1234\n```\n\nconvert boolean to string\n\n``` shiki\n>true|into string\ntrue\n```\n\nconvert date to string\n\n``` shiki\n>'2020-10-10 10:00:00 +02:00'|into datetime|into string\nSatOct1010:00:002020\n```\n\nconvert filepath to string\n\n``` shiki\n>lsCargo.toml|getname|into string\n```\n\nconvert filesize to string\n\n``` shiki\n>1KiB|into string\n1,024B\n```\n\nconvert duration to string\n\n``` shiki\n>9day|into string\n1wk2day\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/into_string.html](https://www.nushell.sh/commands/docs/into_string.html)"
- name: Introduction
  summary: If you're new to Nushell, the quick tour can show you the most important commands
  description: "# Command Reference\n\nIf you're new to Nushell, [the quick tour](https://www.nushell.sh/book/quick_tour.html) can show you the most important commands. You don't need to know them all!\n\nTo see all commands from inside Nushell, run [`help commands`](docs/help#_).\n\n| Command                                                     | Categories             | Description                                                                                                                           |\n|-------------------------------------------------------------|------------------------|---------------------------------------------------------------------------------------------------------------------------------------|\n| [alias](docs/alias#_)                                       | core                   | Alias a command (with optional flags) to a new name.                                                                                  |\n| [all](docs/all#_)                                           | filters                | Test if every element of the input fulfills a predicate expression.                                                                   |\n| [ansi](docs/ansi#_)                                         | platform               | Output ANSI codes to change color and style of text.                                                                                  |\n| [ansi gradient](docs/ansi_gradient#_)                       | platform               | Add a color gradient (using ANSI color codes) to the given string.                                                                    |\n| [ansi link](docs/ansi_link#_)                               | platform               | Add a link (using OSC 8 escape sequence) to the given string.                                                                         |\n| [ansi strip](docs/ansi_strip#_)                             | platform               | Strip ANSI escape sequences from a string.                                                                                            |\n| [any](docs/any#_)                                           | filters                | Tests if any element of the input fulfills a predicate expression.                                                                    |\n| [append](docs/append#_)                                     | filters                | Append any number of rows to a table.                                                                                                 |\n| [ast](docs/ast#_)                                           | debug                  | Print the abstract syntax tree (ast) for a pipeline.                                                                                  |\n| [bits](docs/bits#_)                                         | bits                   | Various commands for working with bits.                                                                                               |\n| [bits and](docs/bits_and#_)                                 | bits                   | Performs bitwise and for integers.                                                                                                    |\n| [bits not](docs/bits_not#_)                                 | bits                   | Performs logical negation on each bit.                                                                                                |\n| [bits or](docs/bits_or#_)                                   | bits                   | Performs bitwise or for integers.                                                                                                     |\n| [bits rol](docs/bits_rol#_)                                 | bits                   | Bitwise rotate left for integers.                                                                                                     |\n| [bits ror](docs/bits_ror#_)                                 | bits                   | Bitwise rotate right for integers.                                                                                                    |\n| [bits shl](docs/bits_shl#_)                                 | bits                   | Bitwise shift left for integers.                                                                                                      |\n| [bits shr](docs/bits_shr#_)                                 | bits                   | Bitwise shift right for integers.                                                                                                     |\n| [bits xor](docs/bits_xor#_)                                 | bits                   | Performs bitwise xor for integers.                                                                                                    |\n| [break](docs/break#_)                                       | core                   | Break a loop.                                                                                                                         |\n| [bytes](docs/bytes#_)                                       | bytes                  | Various commands for working with byte data.                                                                                          |\n| [bytes add](docs/bytes_add#_)                               | bytes                  | Add specified bytes to the input.                                                                                                     |\n| [bytes at](docs/bytes_at#_)                                 | bytes                  | Get bytes defined by a range                                                                                                          |\n| [bytes build](docs/bytes_build#_)                           | bytes                  | Create bytes from the arguments.                                                                                                      |\n| [bytes collect](docs/bytes_collect#_)                       | bytes                  | Concatenate multiple binary into a single binary, with an optional separator between each.                                            |\n| [bytes ends-with](docs/bytes_ends-with#_)                   | bytes                  | Check if bytes ends with a pattern.                                                                                                   |\n| [bytes index-of](docs/bytes_index-of#_)                     | bytes                  | Returns start index of first occurrence of pattern in bytes, or -1 if no match.                                                       |\n| [bytes length](docs/bytes_length#_)                         | bytes                  | Output the length of any bytes in the pipeline.                                                                                       |\n| [bytes remove](docs/bytes_remove#_)                         | bytes                  | Remove bytes.                                                                                                                         |\n| [bytes replace](docs/bytes_replace#_)                       | bytes                  | Find and replace binary.                                                                                                              |\n| [bytes reverse](docs/bytes_reverse#_)                       | bytes                  | Reverse the bytes in the pipeline.                                                                                                    |\n| [bytes starts-with](docs/bytes_starts-with#_)               | bytes                  | Check if bytes starts with a pattern.                                                                                                 |\n| [cal](docs/cal#_)                                           | generators             | Display a calendar.                                                                                                                   |\n| [cd](docs/cd#_)                                             | filesystem             | Change directory.                                                                                                                     |\n| [char](docs/char#_)                                         | strings                | Output special characters (e.g., 'newline').                                                                                          |\n| [clear](docs/clear#_)                                       | platform               | Clear the terminal.                                                                                                                   |\n| [collect](docs/collect#_)                                   | filters                | Collect the stream and pass it to a block.                                                                                            |\n| [columns](docs/columns#_)                                   | filters                | Given a record or table, produce a list of its columns' names.                                                                        |\n| [commandline](docs/commandline#_)                           | core                   | View or modify the current command line input buffer.                                                                                 |\n| [compact](docs/compact#_)                                   | filters                | Creates a table with non-empty rows.                                                                                                  |\n| [complete](docs/complete#_)                                 | system                 | Capture the outputs and exit code from an external piped in command in a nushell table.                                               |\n| [config](docs/config#_)                                     | env                    | Edit nushell configuration files.                                                                                                     |\n| [config env](docs/config_env#_)                             | env                    | Edit nu environment configurations.                                                                                                   |\n| [config nu](docs/config_nu#_)                               | env                    | Edit nu configurations.                                                                                                               |\n| [config reset](docs/config_reset#_)                         | env                    | Reset nushell environment configurations to default, and saves old config files in the config location as oldconfig.nu and oldenv.nu. |\n| [const](docs/const#_)                                       | core                   | Create a parse-time constant.                                                                                                         |\n| [continue](docs/continue#_)                                 | core                   | Continue a loop from the next iteration.                                                                                              |\n| [cp](docs/cp#_)                                             | filesystem             | Copy files.                                                                                                                           |\n| [date](docs/date#_)                                         | date                   | Date-related commands.                                                                                                                |\n| [date format](docs/date_format#_)                           | removed                | Removed command: use \\`format date\\` instead                                                                                          |\n| [date humanize](docs/date_humanize#_)                       | date                   | Print a 'humanized' format for the date, relative to now.                                                                             |\n| [date list-timezone](docs/date_list-timezone#_)             | date                   | List supported time zones.                                                                                                            |\n| [date now](docs/date_now#_)                                 | date                   | Get the current date.                                                                                                                 |\n| [date to-record](docs/date_to-record#_)                     | date                   | Convert the date into a record.                                                                                                       |\n| [date to-table](docs/date_to-table#_)                       | date                   | Convert the date into a structured table.                                                                                             |\n| [date to-timezone](docs/date_to-timezone#_)                 | date                   | Convert a date to a given time zone.                                                                                                  |\n| [debug](docs/debug#_)                                       | debug                  | Debug print the value(s) piped in.                                                                                                    |\n| [decode](docs/decode#_)                                     | strings                | Decode bytes into a string.                                                                                                           |\n| [decode base64](docs/decode_base64#_)                       | hash                   | Base64 decode a value.                                                                                                                |\n| [decode hex](docs/decode_hex#_)                             | formats                | Hex decode a value.                                                                                                                   |\n| [def](docs/def#_)                                           | core                   | Define a custom command.                                                                                                              |\n| [def-env](docs/def-env#_)                                   | core                   | Define a custom command, which participates in the caller environment.                                                                |\n| [default](docs/default#_)                                   | filters                | Sets a default row's column if missing.                                                                                               |\n| [describe](docs/describe#_)                                 | core                   | Describe the type and structure of the value(s) piped in.                                                                             |\n| [detect columns](docs/detect_columns#_)                     | strings                | Attempt to automatically split text into multiple columns.                                                                            |\n| [dfr agg](docs/dfr_agg#_)                                   | lazyframe              | Performs a series of aggregations from a group-by.                                                                                    |\n| [dfr agg-groups](docs/dfr_agg-groups#_)                     | expression             | creates an agg_groups expression                                                                                                      |\n| [dfr all-false](docs/dfr_all-false#_)                       | dataframe              | Returns true if all values are false.                                                                                                 |\n| [dfr all-true](docs/dfr_all-true#_)                         | dataframe              | Returns true if all values are true.                                                                                                  |\n| [dfr append](docs/dfr_append#_)                             | dataframe              | Appends a new dataframe.                                                                                                              |\n| [dfr arg-max](docs/dfr_arg-max#_)                           | dataframe              | Return index for max value in series.                                                                                                 |\n| [dfr arg-min](docs/dfr_arg-min#_)                           | dataframe              | Return index for min value in series.                                                                                                 |\n| [dfr arg-sort](docs/dfr_arg-sort#_)                         | dataframe              | Returns indexes for a sorted series.                                                                                                  |\n| [dfr arg-true](docs/dfr_arg-true#_)                         | dataframe              | Returns indexes where values are true.                                                                                                |\n| [dfr arg-unique](docs/dfr_arg-unique#_)                     | dataframe              | Returns indexes for unique values.                                                                                                    |\n| [dfr arg-where](docs/dfr_arg-where#_)                       | expression             | Creates an expression that returns the arguments where expression is true.                                                            |\n| [dfr as](docs/dfr_as#_)                                     | expression             | Creates an alias expression.                                                                                                          |\n| [dfr as-date](docs/dfr_as-date#_)                           | dataframe              | Converts string to date.                                                                                                              |\n| [dfr as-datetime](docs/dfr_as-datetime#_)                   | dataframe              | Converts string to datetime.                                                                                                          |\n| [dfr cache](docs/dfr_cache#_)                               | lazyframe              | Caches operations in a new LazyFrame                                                                                                  |\n| [dfr col](docs/dfr_col#_)                                   | expression             | Creates a named column expression.                                                                                                    |\n| [dfr collect](docs/dfr_collect#_)                           | lazyframe              | Collect lazy dataframe into eager dataframe.                                                                                          |\n| [dfr columns](docs/dfr_columns#_)                           | dataframe              | Show dataframe columns.                                                                                                               |\n| [dfr concat-str](docs/dfr_concat-str#_)                     | expression             | Creates a concat string expression.                                                                                                   |\n| [dfr concatenate](docs/dfr_concatenate#_)                   | dataframe              | Concatenates strings with other array.                                                                                                |\n| [dfr contains](docs/dfr_contains#_)                         | dataframe              | Checks if a pattern is contained in a string.                                                                                         |\n| [dfr count](docs/dfr_count#_)                               | expression             | creates a count expression                                                                                                            |\n| [dfr count-null](docs/dfr_count-null#_)                     | dataframe              | Counts null values.                                                                                                                   |\n| [dfr cumulative](docs/dfr_cumulative#_)                     | dataframe              | Cumulative calculation for a series.                                                                                                  |\n| [dfr datepart](docs/dfr_datepart#_)                         | expression             | Creates an expression for capturing the specified datepart in a column.                                                               |\n| [dfr drop](docs/dfr_drop#_)                                 | dataframe              | Creates a new dataframe by dropping the selected columns.                                                                             |\n| [dfr drop-duplicates](docs/dfr_drop-duplicates#_)           | dataframe              | Drops duplicate values in dataframe.                                                                                                  |\n| [dfr drop-nulls](docs/dfr_drop-nulls#_)                     | dataframe              | Drops null values in dataframe.                                                                                                       |\n| [dfr dtypes](docs/dfr_dtypes#_)                             | dataframe              | Show dataframe data types.                                                                                                            |\n| [dfr dummies](docs/dfr_dummies#_)                           | dataframe              | Creates a new dataframe with dummy variables.                                                                                         |\n| [dfr explode](docs/dfr_explode#_)                           | lazyframe              | Explodes a dataframe or creates a explode expression.                                                                                 |\n| [dfr expr-not](docs/dfr_expr-not#_)                         | expression             | creates a not expression                                                                                                              |\n| [dfr fetch](docs/dfr_fetch#_)                               | lazyframe              | collects the lazyframe to the selected rows.                                                                                          |\n| [dfr fill-nan](docs/dfr_fill-nan#_)                         | lazyframe              | Replaces NaN values with the given expression.                                                                                        |\n| [dfr fill-null](docs/dfr_fill-null#_)                       | lazyframe              | Replaces NULL values with the given expression.                                                                                       |\n| [dfr filter](docs/dfr_filter#_)                             | lazyframe              | Filter dataframe based in expression.                                                                                                 |\n| [dfr filter-with](docs/dfr_filter-with#_)                   | dataframe or lazyframe | Filters dataframe using a mask or expression as reference.                                                                            |\n| [dfr first](docs/dfr_first#_)                               | dataframe              | Show only the first number of rows or create a first expression                                                                       |\n| [dfr flatten](docs/dfr_flatten#_)                           | lazyframe              | An alias for dfr explode                                                                                                              |\n| [dfr get](docs/dfr_get#_)                                   | dataframe              | Creates dataframe with the selected columns.                                                                                          |\n| [dfr get-day](docs/dfr_get-day#_)                           | dataframe              | Gets day from date.                                                                                                                   |\n| [dfr get-hour](docs/dfr_get-hour#_)                         | dataframe              | Gets hour from date.                                                                                                                  |\n| [dfr get-minute](docs/dfr_get-minute#_)                     | dataframe              | Gets minute from date.                                                                                                                |\n| [dfr get-month](docs/dfr_get-month#_)                       | dataframe              | Gets month from date.                                                                                                                 |\n| [dfr get-nanosecond](docs/dfr_get-nanosecond#_)             | dataframe              | Gets nanosecond from date.                                                                                                            |\n| [dfr get-ordinal](docs/dfr_get-ordinal#_)                   | dataframe              | Gets ordinal from date.                                                                                                               |\n| [dfr get-second](docs/dfr_get-second#_)                     | dataframe              | Gets second from date.                                                                                                                |\n| [dfr get-week](docs/dfr_get-week#_)                         | dataframe              | Gets week from date.                                                                                                                  |\n| [dfr get-weekday](docs/dfr_get-weekday#_)                   | dataframe              | Gets weekday from date.                                                                                                               |\n| [dfr get-year](docs/dfr_get-year#_)                         | dataframe              | Gets year from date.                                                                                                                  |\n| [dfr group-by](docs/dfr_group-by#_)                         | lazyframe              | Creates a group-by object that can be used for other aggregations.                                                                    |\n| [dfr implode](docs/dfr_implode#_)                           | expression             | Aggregates a group to a Series                                                                                                        |\n| [dfr into-df](docs/dfr_into-df#_)                           | dataframe              | Converts a list, table or record into a dataframe.                                                                                    |\n| [dfr into-lazy](docs/dfr_into-lazy#_)                       | lazyframe              | Converts a dataframe into a lazy dataframe.                                                                                           |\n| [dfr into-nu](docs/dfr_into-nu#_)                           | dataframe              | Converts a dataframe or an expression into into nushell value for access and exploration.                                             |\n| [dfr is-duplicated](docs/dfr_is-duplicated#_)               | dataframe              | Creates mask indicating duplicated values.                                                                                            |\n| [dfr is-in](docs/dfr_is-in#_)                               | expression             | Creates an is-in expression.                                                                                                          |\n| [dfr is-not-null](docs/dfr_is-not-null#_)                   | dataframe              | Creates mask where value is not null.                                                                                                 |\n| [dfr is-null](docs/dfr_is-null#_)                           | dataframe              | Creates mask where value is null.                                                                                                     |\n| [dfr is-unique](docs/dfr_is-unique#_)                       | dataframe              | Creates mask indicating unique values.                                                                                                |\n| [dfr join](docs/dfr_join#_)                                 | lazyframe              | Joins a lazy frame with other lazy frame.                                                                                             |\n| [dfr last](docs/dfr_last#_)                                 | dataframe              | Creates new dataframe with tail rows or creates a last expression.                                                                    |\n| [dfr lit](docs/dfr_lit#_)                                   | expression             | Creates a literal expression.                                                                                                         |\n| [dfr lowercase](docs/dfr_lowercase#_)                       | dataframe              | Lowercase the strings in the column.                                                                                                  |\n| [dfr ls](docs/dfr_ls#_)                                     | dataframe              | Lists stored dataframes.                                                                                                              |\n| [dfr max](docs/dfr_max#_)                                   | expression             | Creates a max expression or aggregates columns to their max value                                                                     |\n| [dfr mean](docs/dfr_mean#_)                                 | expression             | Creates a mean expression for an aggregation or aggregates columns to their mean value                                                |\n| [dfr median](docs/dfr_median#_)                             | lazyframe              | Aggregates columns to their median value                                                                                              |\n| [dfr melt](docs/dfr_melt#_)                                 | dataframe              | Unpivot a DataFrame from wide to long format.                                                                                         |\n| [dfr min](docs/dfr_min#_)                                   | expression             | Creates a min expression or aggregates columns to their min value                                                                     |\n| [dfr n-unique](docs/dfr_n-unique#_)                         | dataframe              | Counts unique values.                                                                                                                 |\n| [dfr not](docs/dfr_not#_)                                   | dataframe              | Inverts boolean mask.                                                                                                                 |\n| [dfr open](docs/dfr_open#_)                                 | dataframe              | Opens CSV, JSON, JSON lines, arrow, avro, or parquet file to create dataframe.                                                        |\n| [dfr otherwise](docs/dfr_otherwise#_)                       | expression             | completes a when expression.                                                                                                          |\n| [dfr quantile](docs/dfr_quantile#_)                         | lazyframe              | Aggregates the columns to the selected quantile.                                                                                      |\n| [dfr query](docs/dfr_query#_)                               | dataframe              | Query dataframe using SQL. Note: The dataframe is always named 'df' in your query's from clause.                                      |\n| [dfr rename](docs/dfr_rename#_)                             | dataframe or lazyframe | Rename a dataframe column.                                                                                                            |\n| [dfr replace](docs/dfr_replace#_)                           | dataframe              | Replace the leftmost (sub)string by a regex pattern.                                                                                  |\n| [dfr replace-all](docs/dfr_replace-all#_)                   | dataframe              | Replace all (sub)strings by a regex pattern.                                                                                          |\n| [dfr reverse](docs/dfr_reverse#_)                           | lazyframe              | Reverses the LazyFrame                                                                                                                |\n| [dfr rolling](docs/dfr_rolling#_)                           | dataframe              | Rolling calculation for a series.                                                                                                     |\n| [dfr sample](docs/dfr_sample#_)                             | dataframe              | Create sample dataframe.                                                                                                              |\n| [dfr select](docs/dfr_select#_)                             | lazyframe              | Selects columns from lazyframe.                                                                                                       |\n| [dfr set](docs/dfr_set#_)                                   | dataframe              | Sets value where given mask is true.                                                                                                  |\n| [dfr set-with-idx](docs/dfr_set-with-idx#_)                 | dataframe              | Sets value in the given index.                                                                                                        |\n| [dfr shape](docs/dfr_shape#_)                               | dataframe              | Shows column and row size for a dataframe.                                                                                            |\n| [dfr shift](docs/dfr_shift#_)                               | dataframe or lazyframe | Shifts the values by a given period.                                                                                                  |\n| [dfr slice](docs/dfr_slice#_)                               | dataframe              | Creates new dataframe from a slice of rows.                                                                                           |\n| [dfr sort-by](docs/dfr_sort-by#_)                           | lazyframe              | sorts a lazy dataframe based on expression(s).                                                                                        |\n| [dfr std](docs/dfr_std#_)                                   | expression             | Creates a std expression for an aggregation of std value from columns in a dataframe                                                  |\n| [dfr str-lengths](docs/dfr_str-lengths#_)                   | dataframe              | Get lengths of all strings.                                                                                                           |\n| [dfr str-slice](docs/dfr_str-slice#_)                       | dataframe              | Slices the string from the start position until the selected length.                                                                  |\n| [dfr strftime](docs/dfr_strftime#_)                         | dataframe              | Formats date based on string rule.                                                                                                    |\n| [dfr sum](docs/dfr_sum#_)                                   | expression             | Creates a sum expression for an aggregation or aggregates columns to their sum value                                                  |\n| [dfr summary](docs/dfr_summary#_)                           | dataframe              | For a dataframe, produces descriptive statistics (summary statistics) for its numeric columns.                                        |\n| [dfr take](docs/dfr_take#_)                                 | dataframe              | Creates new dataframe using the given indices.                                                                                        |\n| [dfr to-arrow](docs/dfr_to-arrow#_)                         | dataframe              | Saves dataframe to arrow file.                                                                                                        |\n| [dfr to-avro](docs/dfr_to-avro#_)                           | dataframe              | Saves dataframe to avro file.                                                                                                         |\n| [dfr to-csv](docs/dfr_to-csv#_)                             | dataframe              | Saves dataframe to CSV file.                                                                                                          |\n| [dfr to-jsonl](docs/dfr_to-jsonl#_)                         | dataframe              | Saves dataframe to a JSON lines file.                                                                                                 |\n| [dfr to-parquet](docs/dfr_to-parquet#_)                     | dataframe              | Saves dataframe to parquet file.                                                                                                      |\n| [dfr unique](docs/dfr_unique#_)                             | dataframe or lazyframe | Returns unique values from a dataframe.                                                                                               |\n| [dfr uppercase](docs/dfr_uppercase#_)                       | dataframe              | Uppercase the strings in the column.                                                                                                  |\n| [dfr value-counts](docs/dfr_value-counts#_)                 | dataframe              | Returns a dataframe with the counts for unique values in series.                                                                      |\n| [dfr var](docs/dfr_var#_)                                   | expression             | Create a var expression for an aggregation                                                                                            |\n| [dfr when](docs/dfr_when#_)                                 | expression             | Creates and modifies a when expression.                                                                                               |\n| [dfr with-column](docs/dfr_with-column#_)                   | dataframe or lazyframe | Adds a series to the dataframe.                                                                                                       |\n| [do](docs/do#_)                                             | core                   | Run a closure, providing it with the pipeline input.                                                                                  |\n| [drop](docs/drop#_)                                         | filters                | Remove items/rows from the end of the input list/table. Counterpart of \\`skip\\`. Opposite of \\`last\\`.                                |\n| [drop column](docs/drop_column#_)                           | filters                | Remove N columns at the right-hand end of the input table. To remove columns by name, use \\`reject\\`.                                 |\n| [drop nth](docs/drop_nth#_)                                 | filters                | Drop the selected rows.                                                                                                               |\n| [du](docs/du#_)                                             | core                   | Find disk usage sizes of specified items.                                                                                             |\n| [each](docs/each#_)                                         | filters                | Run a closure on each row of the input list, creating a new list with the results.                                                    |\n| [each while](docs/each_while#_)                             | filters                | Run a block on each row of the input list until a null is found, then create a new list with the results.                             |\n| [echo](docs/echo#_)                                         | core                   | Returns its arguments, ignoring the piped-in value.                                                                                   |\n| [encode](docs/encode#_)                                     | strings                | Encode a string into bytes.                                                                                                           |\n| [encode base64](docs/encode_base64#_)                       | hash                   | Encode a string or binary value using Base64.                                                                                         |\n| [encode hex](docs/encode_hex#_)                             | formats                | Encode a binary value using hex.                                                                                                      |\n| [enter](docs/enter#_)                                       | shells                 | Enters a new shell at the given path.                                                                                                 |\n| [enumerate](docs/enumerate#_)                               | filters                | Enumerate the elements in a stream.                                                                                                   |\n| [error make](docs/error_make#_)                             | core                   | Create an error.                                                                                                                      |\n| [every](docs/every#_)                                       | filters                | Show (or skip) every n-th row, starting from the first one.                                                                           |\n| [exec](docs/exec#_)                                         | system                 | Execute a command, replacing the current process.                                                                                     |\n| [exit](docs/exit#_)                                         | shells                 | Exit Nu.                                                                                                                              |\n| [explain](docs/explain#_)                                   | debug                  | Explain closure contents.                                                                                                             |\n| [explore](docs/explore#_)                                   | viewers                | Explore acts as a table pager, just like \\`less\\` does for text.                                                                      |\n| [export](docs/export#_)                                     | core                   | Export definitions or environment variables from a module.                                                                            |\n| [export alias](docs/export_alias#_)                         | core                   | Alias a command (with optional flags) to a new name and export it from a module.                                                      |\n| [export const](docs/export_const#_)                         | core                   | Use parse-time constant from a module and export them from this module.                                                               |\n| [export def](docs/export_def#_)                             | core                   | Define a custom command and export it from a module.                                                                                  |\n| [export def-env](docs/export_def-env#_)                     | core                   | Define a custom command that participates in the environment and export it from a module.                                             |\n| [export extern](docs/export_extern#_)                       | core                   | Define an extern and export it from a module.                                                                                         |\n| [export extern-wrapped](docs/export_extern-wrapped#_)       | core                   | Define an extern with a custom code block and export it from a module.                                                                |\n| [export module](docs/export_module#_)                       | core                   | Export a custom module from a module.                                                                                                 |\n| [export use](docs/export_use#_)                             | core                   | Use definitions from a module and export them from this module.                                                                       |\n| [export-env](docs/export-env#_)                             | env                    | Run a block and preserve its environment in a current scope.                                                                          |\n| [extern](docs/extern#_)                                     | core                   | Define a signature for an external command.                                                                                           |\n| [extern-wrapped](docs/extern-wrapped#_)                     | core                   | Define a signature for an external command with a custom code block.                                                                  |\n| [fill](docs/fill#_)                                         | conversions            | Fill and Align.                                                                                                                       |\n| [filter](docs/filter#_)                                     | filters                | Filter values based on a predicate closure.                                                                                           |\n| [find](docs/find#_)                                         | filters                | Searches terms in the input.                                                                                                          |\n| [first](docs/first#_)                                       | filters                | Return only the first several rows of the input. Counterpart of \\`last\\`. Opposite of \\`skip\\`.                                       |\n| [flatten](docs/flatten#_)                                   | filters                | Flatten the table.                                                                                                                    |\n| [fmt](docs/fmt#_)                                           | conversions            | Format a number.                                                                                                                      |\n| [for](docs/for#_)                                           | core                   | Loop over a range.                                                                                                                    |\n| [format](docs/format#_)                                     | strings                | Format columns into a string using a simple pattern.                                                                                  |\n| [format date](docs/format_date#_)                           | date                   | Format a given date using a format string.                                                                                            |\n| [format duration](docs/format_duration#_)                   | strings                | Outputs duration with a specified unit of time.                                                                                       |\n| [format filesize](docs/format_filesize#_)                   | strings                | Converts a column of filesizes to some specified format.                                                                              |\n| [from](docs/from#_)                                         | formats                | Parse a string or binary data into structured data.                                                                                   |\n| [from csv](docs/from_csv#_)                                 | formats                | Parse text as .csv and create table.                                                                                                  |\n| [from eml](docs/from_eml#_)                                 | formats                | Parse text as .eml and create record.                                                                                                 |\n| [from ics](docs/from_ics#_)                                 | formats                | Parse text as .ics and create table.                                                                                                  |\n| [from ini](docs/from_ini#_)                                 | formats                | Parse text as .ini and create table.                                                                                                  |\n| [from json](docs/from_json#_)                               | formats                | Convert from json to structured data.                                                                                                 |\n| [from nuon](docs/from_nuon#_)                               | formats                | Convert from nuon to structured data.                                                                                                 |\n| [from ods](docs/from_ods#_)                                 | formats                | Parse OpenDocument Spreadsheet(.ods) data and create table.                                                                           |\n| [from ssv](docs/from_ssv#_)                                 | formats                | Parse text as space-separated values and create a table. The default minimum number of spaces counted as a separator is 2.            |\n| [from toml](docs/from_toml#_)                               | formats                | Parse text as .toml and create record.                                                                                                |\n| [from tsv](docs/from_tsv#_)                                 | formats                | Parse text as .tsv and create table.                                                                                                  |\n| [from url](docs/from_url#_)                                 | formats                | Parse url-encoded string as a record.                                                                                                 |\n| [from vcf](docs/from_vcf#_)                                 | formats                | Parse text as .vcf and create table.                                                                                                  |\n| [from xlsx](docs/from_xlsx#_)                               | formats                | Parse binary Excel(.xlsx) data and create table.                                                                                      |\n| [from xml](docs/from_xml#_)                                 | formats                | Parse text as .xml and create record.                                                                                                 |\n| [from yaml](docs/from_yaml#_)                               | formats                | Parse text as .yaml/.yml and create table.                                                                                            |\n| [from yml](docs/from_yml#_)                                 | formats                | Parse text as .yaml/.yml and create table.                                                                                            |\n| [g](docs/g#_)                                               | shells                 | Switch to a given shell, or list all shells if no given shell number.                                                                 |\n| [get](docs/get#_)                                           | filters                | Extract data using a cell path.                                                                                                       |\n| [glob](docs/glob#_)                                         | filesystem             | Creates a list of files and/or folders based on the glob pattern provided.                                                            |\n| [grid](docs/grid#_)                                         | viewers                | Renders the output to a textual terminal grid.                                                                                        |\n| [group](docs/group#_)                                       | filters                | Groups input into groups of \\`group_size\\`.                                                                                           |\n| [group-by](docs/group-by#_)                                 | filters                | Splits a list or table into groups, and returns a record containing those groups.                                                     |\n| [gstat](docs/gstat#_)                                       | prompt                 | Get the git status of a repo                                                                                                          |\n| [hash](docs/hash#_)                                         | hash                   | Apply hash function.                                                                                                                  |\n| [hash md5](docs/hash_md5#_)                                 | hash                   | Hash a value using the md5 hash algorithm                                                                                             |\n| [hash sha256](docs/hash_sha256#_)                           | hash                   | Hash a value using the sha256 hash algorithm                                                                                          |\n| [headers](docs/headers#_)                                   | filters                | Use the first row of the table as column names.                                                                                       |\n| [help](docs/help#_)                                         | core                   | Display help information about different parts of Nushell.                                                                            |\n| [help aliases](docs/help_aliases#_)                         | core                   | Show help on nushell aliases.                                                                                                         |\n| [help commands](docs/help_commands#_)                       | core                   | Show help on nushell commands.                                                                                                        |\n| [help externs](docs/help_externs#_)                         | core                   | Show help on nushell externs.                                                                                                         |\n| [help modules](docs/help_modules#_)                         | core                   | Show help on nushell modules.                                                                                                         |\n| [help operators](docs/help_operators#_)                     | core                   | Show help on nushell operators.                                                                                                       |\n| [hide](docs/hide#_)                                         | core                   | Hide definitions in the current scope.                                                                                                |\n| [hide-env](docs/hide-env#_)                                 | core                   | Hide environment variables in the current scope.                                                                                      |\n| [histogram](docs/histogram#_)                               | chart                  | Creates a new table with a histogram based on the column name passed in.                                                              |\n| [history](docs/history#_)                                   | misc                   | Get the command history.                                                                                                              |\n| [history session](docs/history_session#_)                   | misc                   | Get the command history session.                                                                                                      |\n| [http](docs/http#_)                                         | network                | Various commands for working with http methods.                                                                                       |\n| [http delete](docs/http_delete#_)                           | network                | Delete the specified resource.                                                                                                        |\n| [http get](docs/http_get#_)                                 | network                | Fetch the contents from a URL.                                                                                                        |\n| [http head](docs/http_head#_)                               | network                | Get the headers from a URL.                                                                                                           |\n| [http options](docs/http_options#_)                         | network                | Requests permitted communication options for a given URL.                                                                             |\n| [http patch](docs/http_patch#_)                             | network                | Patch a body to a URL.                                                                                                                |\n| [http post](docs/http_post#_)                               | network                | Post a body to a URL.                                                                                                                 |\n| [http put](docs/http_put#_)                                 | network                | Put a body to a URL.                                                                                                                  |\n| [if](docs/if#_)                                             | core                   | Conditionally run a block.                                                                                                            |\n| [ignore](docs/ignore#_)                                     | core                   | Ignore the output of the previous command in the pipeline.                                                                            |\n| [inc](docs/inc#_)                                           | default                | Increment a value or version. Optionally use the column of a table.                                                                   |\n| [input](docs/input#_)                                       | platform               | Get input from the user.                                                                                                              |\n| [input list](docs/input_list#_)                             | platform               | Interactive list selection.                                                                                                           |\n| [input listen](docs/input_listen#_)                         | platform               | Listen for user interface event                                                                                                       |\n| [insert](docs/insert#_)                                     | filters                | Insert a new column, using an expression or closure to create each row's values.                                                      |\n| [inspect](docs/inspect#_)                                   | debug                  | Inspect pipeline results while running a pipeline.                                                                                    |\n| [into](docs/into#_)                                         | conversions            | Commands to convert data from one type to another.                                                                                    |\n| [into binary](docs/into_binary#_)                           | conversions            | Convert value to a binary primitive.                                                                                                  |\n| [into bits](docs/into_bits#_)                               | conversions            | Convert value to a binary primitive.                                                                                                  |\n| [into bool](docs/into_bool#_)                               | conversions            | Convert value to boolean.                                                                                                             |\n| [into datetime](docs/into_datetime#_)                       | conversions            | Convert text or timestamp into a datetime.                                                                                            |\n| [into decimal](docs/into_decimal#_)                         | conversions            | deprecated: convert data into a floating point number.                                                                                |\n| [into duration](docs/into_duration#_)                       | conversions            | Convert value to duration.                                                                                                            |\n| [into filesize](docs/into_filesize#_)                       | conversions            | Convert value to filesize.                                                                                                            |\n| [into float](docs/into_float#_)                             | conversions            | Convert data into floating point number.                                                                                              |\n| [into int](docs/into_int#_)                                 | conversions            | Convert value to integer.                                                                                                             |\n| [into record](docs/into_record#_)                           | conversions            | Convert value to record.                                                                                                              |\n| [into sqlite](docs/into_sqlite#_)                           | conversions            | Convert table into a SQLite database.                                                                                                 |\n| [into string](docs/into_string#_)                           | conversions            | Convert value to string.                                                                                                              |\n| [is-admin](docs/is-admin#_)                                 | core                   | Check if nushell is running with administrator or root privileges.                                                                    |\n| [is-empty](docs/is-empty#_)                                 | filters                | Check for empty values.                                                                                                               |\n| [items](docs/items#_)                                       | filters                | Given a record, iterate on each pair of column name and associated value.                                                             |\n| [join](docs/join#_)                                         | filters                | Join two tables                                                                                                                       |\n| [keybindings](docs/keybindings#_)                           | platform               | Keybindings related commands.                                                                                                         |\n| [keybindings default](docs/keybindings_default#_)           | platform               | List default keybindings.                                                                                                             |\n| [keybindings list](docs/keybindings_list#_)                 | platform               | List available options that can be used to create keybindings.                                                                        |\n| [keybindings listen](docs/keybindings_listen#_)             | platform               | Get input from the user.                                                                                                              |\n| [kill](docs/kill#_)                                         | platform               | Kill a process using the process id.                                                                                                  |\n| [last](docs/last#_)                                         | filters                | Return only the last several rows of the input. Counterpart of \\`first\\`. Opposite of \\`drop\\`.                                       |\n| [lazy make](docs/lazy_make#_)                               | core                   | Create a lazy record.                                                                                                                 |\n| [length](docs/length#_)                                     | filters                | Count the number of items in an input list or rows in a table.                                                                        |\n| [let](docs/let#_)                                           | core                   | Create a variable and give it a value.                                                                                                |\n| [let-env](docs/let-env#_)                                   | removed                | \\`let-env FOO = ...\\` has been removed, use \\`\\$env.FOO = ...\\` instead.                                                              |\n| [lines](docs/lines#_)                                       | filters                | Converts input to lines.                                                                                                              |\n| [load-env](docs/load-env#_)                                 | filesystem             | Loads an environment update from a record.                                                                                            |\n| [loop](docs/loop#_)                                         | core                   | Run a block in a loop.                                                                                                                |\n| [ls](docs/ls#_)                                             | filesystem             | List the filenames, sizes, and modification times of items in a directory.                                                            |\n| [match](docs/match#_)                                       | core                   | Conditionally run a block on a matched value.                                                                                         |\n| [math](docs/math#_)                                         | math                   | Use mathematical functions as aggregate functions on a list of numbers or tables.                                                     |\n| [math abs](docs/math_abs#_)                                 | math                   | Returns the absolute value of a number.                                                                                               |\n| [math arccos](docs/math_arccos#_)                           | math                   | Returns the arccosine of the number.                                                                                                  |\n| [math arccosh](docs/math_arccosh#_)                         | math                   | Returns the inverse of the hyperbolic cosine function.                                                                                |\n| [math arcsin](docs/math_arcsin#_)                           | math                   | Returns the arcsine of the number.                                                                                                    |\n| [math arcsinh](docs/math_arcsinh#_)                         | math                   | Returns the inverse of the hyperbolic sine function.                                                                                  |\n| [math arctan](docs/math_arctan#_)                           | math                   | Returns the arctangent of the number.                                                                                                 |\n| [math arctanh](docs/math_arctanh#_)                         | math                   | Returns the inverse of the hyperbolic tangent function.                                                                               |\n| [math avg](docs/math_avg#_)                                 | math                   | Returns the average of a list of numbers.                                                                                             |\n| [math ceil](docs/math_ceil#_)                               | math                   | Returns the ceil of a number (smallest integer greater than or equal to that number).                                                 |\n| [math cos](docs/math_cos#_)                                 | math                   | Returns the cosine of the number.                                                                                                     |\n| [math cosh](docs/math_cosh#_)                               | math                   | Returns the hyperbolic cosine of the number.                                                                                          |\n| [math exp](docs/math_exp#_)                                 | math                   | Returns e raised to the power of x.                                                                                                   |\n| [math floor](docs/math_floor#_)                             | math                   | Returns the floor of a number (largest integer less than or equal to that number).                                                    |\n| [math ln](docs/math_ln#_)                                   | math                   | Returns the natural logarithm. Base: (math e).                                                                                        |\n| [math log](docs/math_log#_)                                 | math                   | Returns the logarithm for an arbitrary base.                                                                                          |\n| [math max](docs/math_max#_)                                 | math                   | Returns the maximum of a list of values, or of columns in a table.                                                                    |\n| [math median](docs/math_median#_)                           | math                   | Computes the median of a list of numbers.                                                                                             |\n| [math min](docs/math_min#_)                                 | math                   | Finds the minimum within a list of values or tables.                                                                                  |\n| [math mode](docs/math_mode#_)                               | math                   | Returns the most frequent element(s) from a list of numbers or tables.                                                                |\n| [math product](docs/math_product#_)                         | math                   | Returns the product of a list of numbers or the products of each column of a table.                                                   |\n| [math round](docs/math_round#_)                             | math                   | Returns the input number rounded to the specified precision.                                                                          |\n| [math sin](docs/math_sin#_)                                 | math                   | Returns the sine of the number.                                                                                                       |\n| [math sinh](docs/math_sinh#_)                               | math                   | Returns the hyperbolic sine of the number.                                                                                            |\n| [math sqrt](docs/math_sqrt#_)                               | math                   | Returns the square root of the input number.                                                                                          |\n| [math stddev](docs/math_stddev#_)                           | math                   | Returns the standard deviation of a list of numbers, or of each column in a table.                                                    |\n| [math sum](docs/math_sum#_)                                 | math                   | Returns the sum of a list of numbers or of each column in a table.                                                                    |\n| [math tan](docs/math_tan#_)                                 | math                   | Returns the tangent of the number.                                                                                                    |\n| [math tanh](docs/math_tanh#_)                               | math                   | Returns the hyperbolic tangent of the number.                                                                                         |\n| [math variance](docs/math_variance#_)                       | math                   | Returns the variance of a list of numbers or of each column in a table.                                                               |\n| [merge](docs/merge#_)                                       | filters                | Merge the input with a record or table, overwriting values in matching columns.                                                       |\n| [metadata](docs/metadata#_)                                 | debug                  | Get the metadata for items in the stream.                                                                                             |\n| [mkdir](docs/mkdir#_)                                       | filesystem             | Make directories, creates intermediary directories as required.                                                                       |\n| [module](docs/module#_)                                     | core                   | Define a custom module.                                                                                                               |\n| [move](docs/move#_)                                         | filters                | Move columns before or after other columns.                                                                                           |\n| [mut](docs/mut#_)                                           | core                   | Create a mutable variable and give it a value.                                                                                        |\n| [mv](docs/mv#_)                                             | filesystem             | Move files or directories.                                                                                                            |\n| [n](docs/n#_)                                               | shells                 | Switch to the next shell.                                                                                                             |\n| [nu-check](docs/nu-check#_)                                 | strings                | Validate and parse input content.                                                                                                     |\n| [nu-highlight](docs/nu-highlight#_)                         | strings                | Syntax highlight the input string.                                                                                                    |\n| [open](docs/open#_)                                         | filesystem             | Load a file into a cell, converting to table if possible (avoid by appending '--raw').                                                |\n| [overlay](docs/overlay#_)                                   | core                   | Commands for manipulating overlays.                                                                                                   |\n| [overlay hide](docs/overlay_hide#_)                         | core                   | Hide an active overlay.                                                                                                               |\n| [overlay list](docs/overlay_list#_)                         | core                   | List all active overlays.                                                                                                             |\n| [overlay new](docs/overlay_new#_)                           | core                   | Create an empty overlay.                                                                                                              |\n| [overlay use](docs/overlay_use#_)                           | core                   | Use definitions from a module as an overlay.                                                                                          |\n| [p](docs/p#_)                                               | shells                 | Switch to the previous shell.                                                                                                         |\n| [par-each](docs/par-each#_)                                 | filters                | Run a closure on each row of the input list in parallel, creating a new list with the results.                                        |\n| [parse](docs/parse#_)                                       | strings                | Parse columns from string data using a simple pattern.                                                                                |\n| [path](docs/path#_)                                         | path                   | Explore and manipulate paths.                                                                                                         |\n| [path basename](docs/path_basename#_)                       | path                   | Get the final component of a path.                                                                                                    |\n| [path dirname](docs/path_dirname#_)                         | path                   | Get the parent directory of a path.                                                                                                   |\n| [path exists](docs/path_exists#_)                           | path                   | Check whether a path exists.                                                                                                          |\n| [path expand](docs/path_expand#_)                           | path                   | Try to expand a path to its absolute form.                                                                                            |\n| [path join](docs/path_join#_)                               | path                   | Join a structured path or a list of path parts.                                                                                       |\n| [path parse](docs/path_parse#_)                             | path                   | Convert a path into structured data.                                                                                                  |\n| [path relative-to](docs/path_relative-to#_)                 | path                   | Express a path as relative to another path.                                                                                           |\n| [path split](docs/path_split#_)                             | path                   | Split a path into a list based on the system's path separator.                                                                        |\n| [path type](docs/path_type#_)                               | path                   | Get the type of the object a path refers to (e.g., file, dir, symlink).                                                               |\n| [port](docs/port#_)                                         | network                | Get a free port from system.                                                                                                          |\n| [prepend](docs/prepend#_)                                   | filters                | Prepend any number of rows to a table.                                                                                                |\n| [print](docs/print#_)                                       | strings                | Print the given values to stdout.                                                                                                     |\n| [profile](docs/profile#_)                                   | debug                  | Profile each pipeline element in a closure.                                                                                           |\n| [ps](docs/ps#_)                                             | system                 | View information about system processes.                                                                                              |\n| [query](docs/query#_)                                       | filters                | Show all the query commands                                                                                                           |\n| [query db](docs/query_db#_)                                 | database               | Query a database using SQL.                                                                                                           |\n| [query json](docs/query_json#_)                             | filters                | execute json query on json file (open --raw \\<file\\> \\| query json 'query string')                                                    |\n| [query web](docs/query_web#_)                               | network                | execute selector query on html/web                                                                                                    |\n| [query xml](docs/query_xml#_)                               | filters                | execute xpath query on xml                                                                                                            |\n| [random](docs/random#_)                                     | random                 | Generate a random value.                                                                                                              |\n| [random bool](docs/random_bool#_)                           | random                 | Generate a random boolean value.                                                                                                      |\n| [random chars](docs/random_chars#_)                         | random                 | Generate random chars.                                                                                                                |\n| [random decimal](docs/random_decimal#_)                     | random                 | deprecated: Generate a random float within a range \\[min..max\\].                                                                      |\n| [random dice](docs/random_dice#_)                           | random                 | Generate a random dice roll.                                                                                                          |\n| [random float](docs/random_float#_)                         | random                 | Generate a random float within a range \\[min..max\\].                                                                                  |\n| [random integer](docs/random_integer#_)                     | random                 | Generate a random integer \\[min..max\\].                                                                                               |\n| [random uuid](docs/random_uuid#_)                           | random                 | Generate a random uuid4 string.                                                                                                       |\n| [range](docs/range#_)                                       | filters                | Return only the selected rows.                                                                                                        |\n| [reduce](docs/reduce#_)                                     | filters                | Aggregate a list to a single value using an accumulator closure.                                                                      |\n| [register](docs/register#_)                                 | core                   | Register a plugin.                                                                                                                    |\n| [registry query](docs/registry_query#_)                     | system                 | Query the Windows registry.                                                                                                           |\n| [reject](docs/reject#_)                                     | filters                | Remove the given columns or rows from the table. Opposite of \\`select\\`.                                                              |\n| [rename](docs/rename#_)                                     | filters                | Creates a new table with columns renamed.                                                                                             |\n| [return](docs/return#_)                                     | core                   | Return early from a function.                                                                                                         |\n| [reverse](docs/reverse#_)                                   | filters                | Reverses the input list or table.                                                                                                     |\n| [rm](docs/rm#_)                                             | filesystem             | Remove files and directories.                                                                                                         |\n| [roll](docs/roll#_)                                         | filters                | Rolling commands for tables.                                                                                                          |\n| [roll down](docs/roll_down#_)                               | filters                | Roll table rows down.                                                                                                                 |\n| [roll left](docs/roll_left#_)                               | filters                | Roll record or table columns left.                                                                                                    |\n| [roll right](docs/roll_right#_)                             | filters                | Roll table columns right.                                                                                                             |\n| [roll up](docs/roll_up#_)                                   | filters                | Roll table rows up.                                                                                                                   |\n| [rotate](docs/rotate#_)                                     | filters                | Rotates a table or record clockwise (default) or counter-clockwise (use --ccw flag).                                                  |\n| [run-external](docs/run-external#_)                         | system                 | Runs external command.                                                                                                                |\n| [save](docs/save#_)                                         | filesystem             | Save a file.                                                                                                                          |\n| [schema](docs/schema#_)                                     | database               | Show the schema of a SQLite database.                                                                                                 |\n| [scope](docs/scope#_)                                       | core                   | Commands for getting info about what is in scope.                                                                                     |\n| [scope aliases](docs/scope_aliases#_)                       | filters                | Output info on the aliases in the current scope.                                                                                      |\n| [scope commands](docs/scope_commands#_)                     | filters                | Output info on the commands in the current scope.                                                                                     |\n| [scope engine-stats](docs/scope_engine-stats#_)             | filters                | Output stats on the engine in the current state.                                                                                      |\n| [scope externs](docs/scope_externs#_)                       | filters                | Output info on the known externals in the current scope.                                                                              |\n| [scope modules](docs/scope_modules#_)                       | filters                | Output info on the modules in the current scope.                                                                                      |\n| [scope variables](docs/scope_variables#_)                   | filters                | Output info on the variables in the current scope.                                                                                    |\n| [select](docs/select#_)                                     | filters                | Select only these columns or rows from the input. Opposite of \\`reject\\`.                                                             |\n| [seq](docs/seq#_)                                           | generators             | Output sequences of numbers.                                                                                                          |\n| [seq char](docs/seq_char#_)                                 | generators             | Print a sequence of ASCII characters.                                                                                                 |\n| [seq date](docs/seq_date#_)                                 | generators             | Print sequences of dates.                                                                                                             |\n| [shells](docs/shells#_)                                     | shells                 | Lists all open shells.                                                                                                                |\n| [shuffle](docs/shuffle#_)                                   | filters                | Shuffle rows randomly.                                                                                                                |\n| [size](docs/size#_)                                         | strings                | Gather word count statistics on the text.                                                                                             |\n| [skip](docs/skip#_)                                         | filters                | Skip the first several rows of the input. Counterpart of \\`drop\\`. Opposite of \\`first\\`.                                             |\n| [skip until](docs/skip_until#_)                             | filters                | Skip elements of the input until a predicate is true.                                                                                 |\n| [skip while](docs/skip_while#_)                             | filters                | Skip elements of the input while a predicate is true.                                                                                 |\n| [sleep](docs/sleep#_)                                       | platform               | Delay for a specified amount of time.                                                                                                 |\n| [sort](docs/sort#_)                                         | filters                | Sort in increasing order.                                                                                                             |\n| [sort-by](docs/sort-by#_)                                   | filters                | Sort by the given columns, in increasing order.                                                                                       |\n| [source](docs/source#_)                                     | core                   | Runs a script file in the current context.                                                                                            |\n| [source-env](docs/source-env#_)                             | core                   | Source the environment from a source file into the current environment.                                                               |\n| [split](docs/split#_)                                       | strings                | Split contents across desired subcommand (like row, column) via the separator.                                                        |\n| [split chars](docs/split_chars#_)                           | strings                | Split a string into a list of characters.                                                                                             |\n| [split column](docs/split_column#_)                         | strings                | Split a string into multiple columns using a separator.                                                                               |\n| [split list](docs/split_list#_)                             | filters                | Split a list into multiple lists using a separator.                                                                                   |\n| [split row](docs/split_row#_)                               | strings                | Split a string into multiple rows using a separator.                                                                                  |\n| [split words](docs/split_words#_)                           | strings                | Split a string's words into separate rows.                                                                                            |\n| [split-by](docs/split-by#_)                                 | filters                | Create a new table split.                                                                                                             |\n| [start](docs/start#_)                                       | filesystem             | Open a folder, file or website in the default application or viewer.                                                                  |\n| [str](docs/str#_)                                           | strings                | Various commands for working with string data.                                                                                        |\n| [str camel-case](docs/str_camel-case#_)                     | strings                | Convert a string to camelCase.                                                                                                        |\n| [str capitalize](docs/str_capitalize#_)                     | strings                | Capitalize first letter of text.                                                                                                      |\n| [str contains](docs/str_contains#_)                         | strings                | Checks if string input contains a substring.                                                                                          |\n| [str distance](docs/str_distance#_)                         | strings                | Compare two strings and return the edit distance/Levenshtein distance.                                                                |\n| [str downcase](docs/str_downcase#_)                         | strings                | Make text lowercase.                                                                                                                  |\n| [str ends-with](docs/str_ends-with#_)                       | strings                | Check if an input ends with a string.                                                                                                 |\n| [str expand](docs/str_expand#_)                             | strings                | Generates all possible combinations defined in brace expansion syntax.                                                                |\n| [str index-of](docs/str_index-of#_)                         | strings                | Returns start index of first occurrence of string in input, or -1 if no match.                                                        |\n| [str join](docs/str_join#_)                                 | strings                | Concatenate multiple strings into a single string, with an optional separator between each.                                           |\n| [str kebab-case](docs/str_kebab-case#_)                     | strings                | Convert a string to kebab-case.                                                                                                       |\n| [str length](docs/str_length#_)                             | strings                | Output the length of any strings in the pipeline.                                                                                     |\n| [str pascal-case](docs/str_pascal-case#_)                   | strings                | Convert a string to PascalCase.                                                                                                       |\n| [str replace](docs/str_replace#_)                           | strings                | Find and replace text.                                                                                                                |\n| [str reverse](docs/str_reverse#_)                           | strings                | Reverse every string in the pipeline.                                                                                                 |\n| [str screaming-snake-case](docs/str_screaming-snake-case#_) | strings                | Convert a string to SCREAMING_SNAKE_CASE.                                                                                             |\n| [str snake-case](docs/str_snake-case#_)                     | strings                | Convert a string to snake_case.                                                                                                       |\n| [str starts-with](docs/str_starts-with#_)                   | strings                | Check if an input starts with a string.                                                                                               |\n| [str substring](docs/str_substring#_)                       | strings                | Get part of a string. Note that the start is included but the end is excluded, and that the first character of a string is index 0.   |\n| [str title-case](docs/str_title-case#_)                     | strings                | Convert a string to Title Case.                                                                                                       |\n| [str trim](docs/str_trim#_)                                 | strings                | Trim whitespace or specific character.                                                                                                |\n| [str upcase](docs/str_upcase#_)                             | strings                | Make text uppercase.                                                                                                                  |\n| [sys](docs/sys#_)                                           | system                 | View information about the system.                                                                                                    |\n| [table](docs/table#_)                                       | viewers                | Render the table.                                                                                                                     |\n| [take](docs/take#_)                                         | filters                | Take only the first n elements of a list, or the first n bytes of a binary value.                                                     |\n| [take until](docs/take_until#_)                             | filters                | Take elements of the input until a predicate is true.                                                                                 |\n| [take while](docs/take_while#_)                             | filters                | Take elements of the input while a predicate is true.                                                                                 |\n| [term size](docs/term_size#_)                               | platform               | Returns a record containing the number of columns (width) and rows (height) of the terminal.                                          |\n| [timeit](docs/timeit#_)                                     | debug                  | Time the running time of a block.                                                                                                     |\n| [to](docs/to#_)                                             | formats                | Translate structured data to a format.                                                                                                |\n| [to csv](docs/to_csv#_)                                     | formats                | Convert table into .csv text .                                                                                                        |\n| [to html](docs/to_html#_)                                   | formats                | Convert table into simple HTML.                                                                                                       |\n| [to json](docs/to_json#_)                                   | formats                | Converts table data into JSON text.                                                                                                   |\n| [to md](docs/to_md#_)                                       | formats                | Convert table into simple Markdown.                                                                                                   |\n| [to nuon](docs/to_nuon#_)                                   | formats                | Converts table data into Nuon (Nushell Object Notation) text.                                                                         |\n| [to text](docs/to_text#_)                                   | formats                | Converts data into simple text.                                                                                                       |\n| [to toml](docs/to_toml#_)                                   | formats                | Convert record into .toml text.                                                                                                       |\n| [to tsv](docs/to_tsv#_)                                     | formats                | Convert table into .tsv text.                                                                                                         |\n| [to xml](docs/to_xml#_)                                     | formats                | Convert special record structure into .xml text.                                                                                      |\n| [to yaml](docs/to_yaml#_)                                   | formats                | Convert table into .yaml/.yml text.                                                                                                   |\n| [touch](docs/touch#_)                                       | filesystem             | Creates one or more files.                                                                                                            |\n| [transpose](docs/transpose#_)                               | filters                | Transposes the table contents so rows become columns and columns become rows.                                                         |\n| [try](docs/try#_)                                           | core                   | Try to run a block, if it fails optionally run a catch block.                                                                         |\n| [tutor](docs/tutor#_)                                       | misc                   | Run the tutorial. To begin, run: tutor.                                                                                               |\n| [ucp](docs/ucp#_)                                           | filesystem             | Copy files using uutils/coreutils cp.                                                                                                 |\n| [uniq](docs/uniq#_)                                         | filters                | Return the distinct values in the input.                                                                                              |\n| [uniq-by](docs/uniq-by#_)                                   | filters                | Return the distinct values in the input by the given column(s).                                                                       |\n| [update](docs/update#_)                                     | filters                | Update an existing column to have a new value.                                                                                        |\n| [update cells](docs/update_cells#_)                         | filters                | Update the table cells.                                                                                                               |\n| [upsert](docs/upsert#_)                                     | filters                | Update an existing column to have a new value, or insert a new column.                                                                |\n| [url](docs/url#_)                                           | network                | Various commands for working with URLs.                                                                                               |\n| [url build-query](docs/url_build-query#_)                   | network                | Converts record or table into query string applying percent-encoding.                                                                 |\n| [url encode](docs/url_encode#_)                             | strings                | Converts a string to a percent encoded web safe string.                                                                               |\n| [url join](docs/url_join#_)                                 | network                | Converts a record to url.                                                                                                             |\n| [url parse](docs/url_parse#_)                               | network                | Parses a url.                                                                                                                         |\n| [use](docs/use#_)                                           | core                   | Use definitions from a module, making them available in your shell.                                                                   |\n| [values](docs/values#_)                                     | filters                | Given a record or table, produce a list of its columns' values.                                                                       |\n| [version](docs/version#_)                                   | core                   | Display Nu version, and its build configuration.                                                                                      |\n| [view](docs/view#_)                                         | debug                  | Various commands for viewing debug information.                                                                                       |\n| [view files](docs/view_files#_)                             | debug                  | View the files registered in nushell's EngineState memory.                                                                            |\n| [view source](docs/view_source#_)                           | debug                  | View a block, module, or a definition.                                                                                                |\n| [view span](docs/view_span#_)                               | debug                  | View the contents of a span.                                                                                                          |\n| [watch](docs/watch#_)                                       | filesystem             | Watch for file changes and execute Nu code when they happen.                                                                          |\n| [where](docs/where#_)                                       | filters                | Filter values based on a row condition.                                                                                               |\n| [which](docs/which#_)                                       | system                 | Finds a program file, alias or custom command.                                                                                        |\n| [while](docs/while#_)                                       | core                   | Conditionally run a block in a loop.                                                                                                  |\n| [window](docs/window#_)                                     | filters                | Creates a sliding window of \\`window_size\\` that slide by n rows/elements across input.                                               |\n| [with-env](docs/with-env#_)                                 | env                    | Runs a block with an environment variable set.                                                                                        |\n| [wrap](docs/wrap#_)                                         | filters                | Wrap the value into a column.                                                                                                         |\n| [zip](docs/zip#_)                                           | filters                | Combine a stream with the input.                                                                                                      |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/](https://www.nushell.sh/commands/)"
- name: is-admin
  summary: '> is-admin {flags}'
  description: "# `is-admin` for core\n\nCheck if nushell is running with administrator or root privileges.\n\n## Signature\n\n`> is-admin {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | bool   |\n\n## Examples\n\nReturn 'iamroot' if nushell is running with admin/root privileges, and 'iamnotroot' if not.\n\n``` shiki\n>if (is-admin) { \"iamroot\" } else { \"iamnotroot\" }\niamnotroot\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/is-admin.html](https://www.nushell.sh/commands/docs/is-admin.html)"
- name: is-empty
  summary: '> is-empty {flags} ...rest'
  description: "# `is-empty` for filters\n\nCheck for empty values.\n\n## Signature\n\n`> is-empty {flags} ...rest`\n\n## Parameters\n\n- `...rest`: the names of the columns to check emptiness\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | bool   |\n\n## Examples\n\nCheck if a string is empty\n\n``` shiki\n>''|is-empty\ntrue\n```\n\nCheck if a list is empty\n\n``` shiki\n> [] |is-empty\ntrue\n```\n\nCheck if more than one column are empty\n\n``` shiki\n> [[mealsize]; [arepasmall] [taco'']] |is-emptymealsize\nfalse\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/is-empty.html](https://www.nushell.sh/commands/docs/is-empty.html)"
- name: items
  summary: '> items {flags} (closure)'
  description: "# `items` for filters\n\nGiven a record, iterate on each pair of column name and associated value.\n\n## Signature\n\n`> items {flags} (closure)`\n\n## Parameters\n\n- `closure`: the closure to run\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | any    |\n\n## Examples\n\nIterate over each key-value pair of a record\n\n``` shiki\n> { new:york, san:francisco } |items {|key, value| echo$'($key) ($value)' }\n╭───┬───────────────╮\n│0│newyork│\n│1│sanfrancisco│\n╰───┴───────────────╯\n```\n\n## Notes\n\nThis is a the fusion of `columns`, `values` and `each`.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/items.html](https://www.nushell.sh/commands/docs/items.html)"
- name: join
  summary: '> join {flags} (right-table) (left-on) (right-on)'
  description: "# `join` for filters\n\nJoin two tables\n\n## Signature\n\n`> join {flags} (right-table) (left-on) (right-on)`\n\n## Flags\n\n- `--inner, -i`: Inner join (default)\n- `--left, -l`: Left-outer join\n- `--right, -r`: Right-outer join\n- `--outer, -o`: Outer join\n\n## Parameters\n\n- `right-table`: The right table in the join\n- `left-on`: Name of column in input (left) table to join on\n- `right-on`: Name of column in right table to join on. Defaults to same column as left table.\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| table | table  |\n\n## Examples\n\nJoin two tables\n\n``` shiki\n> [{a:1b:2}] |join [{a:1c:3}] a\n╭───┬───┬───┬───╮\n│# │ a │ b │ c │\n├───┼───┼───┼───┤\n│0│1│2│3│\n╰───┴───┴───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/join.html](https://www.nushell.sh/commands/docs/join.html)"
- name: keybindings
  summary: '> keybindings {flags}'
  description: "# `keybindings` for platform\n\nKeybindings related commands.\n\n## Signature\n\n`> keybindings {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\nFor more information on input and keybindings, check: https://www.nushell.sh/book/line_editor.html\n\n## Subcommands:\n\n| name                                           | type    | usage                                                          |\n|------------------------------------------------|---------|----------------------------------------------------------------|\n| [`keybindings default`](keybindings_default#_) | Builtin | List default keybindings.                                      |\n| [`keybindings list`](keybindings_list#_)       | Builtin | List available options that can be used to create keybindings. |\n| [`keybindings listen`](keybindings_listen#_)   | Builtin | Get input from the user.                                       |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/keybindings.html](https://www.nushell.sh/commands/docs/keybindings.html)"
- name: keybindings default
  summary: '> keybindings default {flags}'
  description: "# `keybindings default` for platform\n\nList default keybindings.\n\n## Signature\n\n`> keybindings default {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nGet list with default keybindings\n\n``` shiki\n>keybindings default\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/keybindings_default.html](https://www.nushell.sh/commands/docs/keybindings_default.html)"
- name: keybindings list
  summary: '> keybindings list {flags}'
  description: "# `keybindings list` for platform\n\nList available options that can be used to create keybindings.\n\n## Signature\n\n`> keybindings list {flags} `\n\n## Flags\n\n- `--modifiers, -m`: list of modifiers\n- `--keycodes, -k`: list of keycodes\n- `--modes, -o`: list of edit modes\n- `--events, -e`: list of reedline event\n- `--edits, -d`: list of edit commands\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nGet list of key modifiers\n\n``` shiki\n>keybindings list-m\n```\n\nGet list of reedline events and edit commands\n\n``` shiki\n>keybindings list-e-d\n```\n\nGet list with all the available options\n\n``` shiki\n>keybindings list\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/keybindings_list.html](https://www.nushell.sh/commands/docs/keybindings_list.html)"
- name: keybindings listen
  summary: '> keybindings listen {flags}'
  description: "# `keybindings listen` for platform\n\nGet input from the user.\n\n## Signature\n\n`> keybindings listen {flags} `\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nType and see key event codes\n\n``` shiki\n>keybindings listen\n```\n\n## Notes\n\nThis is an internal debugging tool. For better output, try `input listen --types [key]`\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/keybindings_listen.html](https://www.nushell.sh/commands/docs/keybindings_listen.html)"
- name: kill
  summary: '> kill {flags} (pid) ...rest'
  description: "# `kill` for platform\n\nKill a process using the process id.\n\n## Signature\n\n`> kill {flags} (pid) ...rest`\n\n## Flags\n\n- `--force, -f`: forcefully kill the process\n- `--quiet, -q`: won't print anything to the console\n- `--signal, -s {int}`: signal decimal number to be sent instead of the default 15 (unsupported on Windows)\n\n## Parameters\n\n- `pid`: process id of process that is to be killed\n- `...rest`: rest of processes to kill\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nKill the pid using the most memory\n\n``` shiki\n>ps|sort-bymem|last|kill$in.pid\n```\n\nForce kill a given pid\n\n``` shiki\n>kill--force12345\n```\n\nSend INT signal\n\n``` shiki\n>kill-s212345\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/kill.html](https://www.nushell.sh/commands/docs/kill.html)"
- name: last
  summary: '> last {flags} (rows)'
  description: "# `last` for filters\n\nReturn only the last several rows of the input. Counterpart of \\`first\\`. Opposite of \\`drop\\`.\n\n## Signature\n\n`> last {flags} (rows)`\n\n## Parameters\n\n- `rows`: starting from the back, the number of rows to return\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| binary      | binary      |\n| list\\<any\\> | list\\<any\\> |\n\n## Examples\n\nReturn the last 2 items of a list/table\n\n``` shiki\n> [1,2,3] |last2\n╭───┬───╮\n│0│2│\n│1│3│\n╰───┴───╯\n```\n\nReturn the last item of a list/table\n\n``` shiki\n> [1,2,3] |last\n3\n```\n\nReturn the last 2 bytes of a binary value\n\n``` shiki\n>0x[012345] |last2\nLength:2 (0x2) bytes|printablewhitespaceascii_othernon_ascii\n00000000:2345#E\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/last.html](https://www.nushell.sh/commands/docs/last.html)"
- name: lazy make
  summary: '> lazy make {flags}'
  description: "# `lazy make` for core\n\nCreate a lazy record.\n\n## Signature\n\n`> lazy make {flags} `\n\n## Flags\n\n- `--columns, -c {list<string>}`: Closure that gets called when the LazyRecord needs to list the available column names\n- `--get-value, -g {closure(string)}`: Closure to call when a value needs to be produced on demand\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | record |\n\n## Examples\n\nCreate a lazy record\n\n``` shiki\n>lazy make--columns [\"haskell\", \"futures\", \"nushell\"] --get-value { |lazything| $lazything+\"!\" }\n```\n\nTest the laziness of lazy records\n\n``` shiki\n>lazy make-c [\"hello\"] -g { |key| print$\"getting ($key)!\";$key|str upcase }\n```\n\n## Notes\n\nLazy records are special records that only evaluate their values once the property is requested. For example, when printing a lazy record, all of its fields will be collected. But when accessing a specific property, only it will be evaluated.\n\n        Note that this is unrelated to the lazyframes feature bundled with dataframes.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/lazy_make.html](https://www.nushell.sh/commands/docs/lazy_make.html)"
- name: Lazyframe
  summary: ''
  description: "# Lazyframe\n\n| Command                                      | Description                                                        |\n|----------------------------------------------|--------------------------------------------------------------------|\n| [dfr agg](../docs/dfr_agg#_)                 | Performs a series of aggregations from a group-by.                 |\n| [dfr cache](../docs/dfr_cache#_)             | Caches operations in a new LazyFrame                               |\n| [dfr collect](../docs/dfr_collect#_)         | Collect lazy dataframe into eager dataframe.                       |\n| [dfr explode](../docs/dfr_explode#_)         | Explodes a dataframe or creates a explode expression.              |\n| [dfr fetch](../docs/dfr_fetch#_)             | collects the lazyframe to the selected rows.                       |\n| [dfr fill-nan](../docs/dfr_fill-nan#_)       | Replaces NaN values with the given expression.                     |\n| [dfr fill-null](../docs/dfr_fill-null#_)     | Replaces NULL values with the given expression.                    |\n| [dfr filter](../docs/dfr_filter#_)           | Filter dataframe based in expression.                              |\n| [dfr filter-with](../docs/dfr_filter-with#_) | Filters dataframe using a mask or expression as reference.         |\n| [dfr flatten](../docs/dfr_flatten#_)         | An alias for dfr explode                                           |\n| [dfr group-by](../docs/dfr_group-by#_)       | Creates a group-by object that can be used for other aggregations. |\n| [dfr into-lazy](../docs/dfr_into-lazy#_)     | Converts a dataframe into a lazy dataframe.                        |\n| [dfr join](../docs/dfr_join#_)               | Joins a lazy frame with other lazy frame.                          |\n| [dfr median](../docs/dfr_median#_)           | Aggregates columns to their median value                           |\n| [dfr quantile](../docs/dfr_quantile#_)       | Aggregates the columns to the selected quantile.                   |\n| [dfr rename](../docs/dfr_rename#_)           | Rename a dataframe column.                                         |\n| [dfr reverse](../docs/dfr_reverse#_)         | Reverses the LazyFrame                                             |\n| [dfr select](../docs/dfr_select#_)           | Selects columns from lazyframe.                                    |\n| [dfr shift](../docs/dfr_shift#_)             | Shifts the values by a given period.                               |\n| [dfr sort-by](../docs/dfr_sort-by#_)         | sorts a lazy dataframe based on expression(s).                     |\n| [dfr unique](../docs/dfr_unique#_)           | Returns unique values from a dataframe.                            |\n| [dfr with-column](../docs/dfr_with-column#_) | Adds a series to the dataframe.                                    |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/lazyframe.html](https://www.nushell.sh/commands/categories/lazyframe.html)"
- name: length
  summary: '> length {flags}'
  description: "# `length` for filters\n\nCount the number of items in an input list or rows in a table.\n\n## Signature\n\n`> length {flags} `\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | int    |\n| table       | int    |\n\n## Examples\n\nCount the number of items in a list\n\n``` shiki\n> [12345] |length\n5\n```\n\nCount the number of rows in a table\n\n``` shiki\n> [{a:1b:2}, {a:2b:3}] |length\n2\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/length.html](https://www.nushell.sh/commands/docs/length.html)"
- name: let
  summary: '> let {flags} (var_name) (initial_value)'
  description: "# `let` for core\n\nCreate a variable and give it a value.\n\n## Signature\n\n`> let {flags} (var_name) (initial_value)`\n\n## Parameters\n\n- `var_name`: variable name\n- `initial_value`: equals sign followed by value\n\n## Input/output types:\n\n| input | output  |\n|-------|---------|\n| any   | nothing |\n\n## Examples\n\nSet a variable to a value\n\n``` shiki\n>letx=10\n```\n\nSet a variable to the result of an expression\n\n``` shiki\n>letx=10+100\n```\n\nSet a variable based on the condition\n\n``` shiki\n>letx=iffalse { -1 } else { 1 }\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/let.html](https://www.nushell.sh/commands/docs/let.html)"
- name: let-env
  summary: '> let-env {flags} (var_name) (initial_value)'
  description: "# `let-env` for removed\n\n\\`let-env FOO = ...\\` has been removed, use \\`\\$env.FOO = ...\\` instead.\n\n## Signature\n\n`> let-env {flags} (var_name) (initial_value)`\n\n## Parameters\n\n- `var_name`: variable name\n- `initial_value`: equals sign followed by value\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/let-env.html](https://www.nushell.sh/commands/docs/let-env.html)"
- name: lines
  summary: '> lines {flags}'
  description: "# `lines` for filters\n\nConverts input to lines.\n\n## Signature\n\n`> lines {flags} `\n\n## Flags\n\n- `--skip-empty, -s`: skip empty lines\n\n## Input/output types:\n\n| input | output         |\n|-------|----------------|\n| any   | list\\<string\\> |\n\n## Examples\n\nSplit multi-line string into lines\n\n``` shiki\n>$\"two\\nlines\"|lines\n╭───┬───────╮\n│0│two│\n│1│lines│\n╰───┴───────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/lines.html](https://www.nushell.sh/commands/docs/lines.html)"
- name: load-env
  summary: '> load-env {flags} (update)'
  description: "# `load-env` for filesystem\n\nLoads an environment update from a record.\n\n## Signature\n\n`> load-env {flags} (update)`\n\n## Parameters\n\n- `update`: the record to use for updates\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n| record  | nothing |\n\n## Examples\n\nLoad variables from an input stream\n\n``` shiki\n> {NAME:ABE, AGE:UNKNOWN} |load-env;$env.NAME\nABE\n```\n\nLoad variables from an argument\n\n``` shiki\n>load-env {NAME:ABE, AGE:UNKNOWN};$env.NAME\nABE\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/load-env.html](https://www.nushell.sh/commands/docs/load-env.html)"
- name: loop
  summary: '> loop {flags} (block)'
  description: "# `loop` for core\n\nRun a block in a loop.\n\n## Signature\n\n`> loop {flags} (block)`\n\n## Parameters\n\n- `block`: block to loop\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nLoop while a condition is true\n\n``` shiki\n>mutx=0;loop { if$x>10 { break };$x=$x+1 };$x\n11\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/loop.html](https://www.nushell.sh/commands/docs/loop.html)"
- name: ls
  summary: '> ls {flags} (pattern)'
  description: "# `ls` for filesystem\n\nList the filenames, sizes, and modification times of items in a directory.\n\n## Signature\n\n`> ls {flags} (pattern)`\n\n## Flags\n\n- `--all, -a`: Show hidden files\n- `--long, -l`: Get all available columns for each entry (slower; columns are platform-dependent)\n- `--short-names, -s`: Only print the file names, and not the path\n- `--full-paths, -f`: display paths as absolute paths\n- `--du, -d`: Display the apparent directory size (\"disk usage\") in place of the directory metadata size\n- `--directory, -D`: List the specified directory itself instead of its contents\n- `--mime-type, -m`: Show mime-type in type column instead of 'file' (based on filenames only; files' contents are not examined)\n\n## Parameters\n\n- `pattern`: the glob pattern to use\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nList visible files in the current directory\n\n``` shiki\n>ls\n```\n\nList visible files in a subdirectory\n\n``` shiki\n>lssubdir\n```\n\nList visible files with full path in the parent directory\n\n``` shiki\n>ls-f..\n```\n\nList Rust files\n\n``` shiki\n>ls*.rs\n```\n\nList files and directories whose name do not contain 'bar'\n\n``` shiki\n>ls-s|wherename!~bar\n```\n\nList all dirs in your home directory\n\n``` shiki\n>ls-a~|wheretype==dir\n```\n\nList all dirs in your home directory which have not been modified in 7 days\n\n``` shiki\n>ls-as~|wheretype==dirandmodified< ((date now) -7day)\n```\n\nList given paths and show directories themselves\n\n``` shiki\n> ['/path/to/directory''/path/to/file'] |each {|| ls-D$in } |flatten\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/ls.html](https://www.nushell.sh/commands/docs/ls.html)"
- name: match
  summary: '> match {flags} (value) (match_block)'
  description: "# `match` for core\n\nConditionally run a block on a matched value.\n\n## Signature\n\n`> match {flags} (value) (match_block)`\n\n## Parameters\n\n- `value`: value to check\n- `match_block`: block to run if check succeeds\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nMatch on a value in range\n\n``` shiki\n>match3 { 1..10=>'yes!' }\nyes!\n```\n\nMatch on a field in a record\n\n``` shiki\n>match {a:100} { {a:$my_value} => { $my_value } }\n100\n```\n\nMatch with a catch-all\n\n``` shiki\n>match3 { 1=> { 'yes!' }, _=> { 'no!' } }\nno!\n```\n\nMatch against a list\n\n``` shiki\n>match [1, 2, 3] { [$a, $b, $c] => { $a+$b+$c }, _=>0 }\n6\n```\n\nMatch against pipeline input\n\n``` shiki\n> {a: {b:3}} |match$in {{a: { $b }} => ($b+10) }\n13\n```\n\nMatch with a guard\n\n``` shiki\n>match [123] {\n        [$x, ..$y] if$x==1=> { 'good list' },\n_=> { 'not a very good list' }\n    }\n\ngoodlist\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/match.html](https://www.nushell.sh/commands/docs/match.html)"
- name: math
  summary: '> math {flags}'
  description: "# `math` for math\n\nUse mathematical functions as aggregate functions on a list of numbers or tables.\n\n## Signature\n\n`> math {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                               | type    | usage                                                                                 |\n|------------------------------------|---------|---------------------------------------------------------------------------------------|\n| [`math abs`](math_abs#_)           | Builtin | Returns the absolute value of a number.                                               |\n| [`math arccos`](math_arccos#_)     | Builtin | Returns the arccosine of the number.                                                  |\n| [`math arccosh`](math_arccosh#_)   | Builtin | Returns the inverse of the hyperbolic cosine function.                                |\n| [`math arcsin`](math_arcsin#_)     | Builtin | Returns the arcsine of the number.                                                    |\n| [`math arcsinh`](math_arcsinh#_)   | Builtin | Returns the inverse of the hyperbolic sine function.                                  |\n| [`math arctan`](math_arctan#_)     | Builtin | Returns the arctangent of the number.                                                 |\n| [`math arctanh`](math_arctanh#_)   | Builtin | Returns the inverse of the hyperbolic tangent function.                               |\n| [`math avg`](math_avg#_)           | Builtin | Returns the average of a list of numbers.                                             |\n| [`math ceil`](math_ceil#_)         | Builtin | Returns the ceil of a number (smallest integer greater than or equal to that number). |\n| [`math cos`](math_cos#_)           | Builtin | Returns the cosine of the number.                                                     |\n| [`math cosh`](math_cosh#_)         | Builtin | Returns the hyperbolic cosine of the number.                                          |\n| [`math exp`](math_exp#_)           | Builtin | Returns e raised to the power of x.                                                   |\n| [`math floor`](math_floor#_)       | Builtin | Returns the floor of a number (largest integer less than or equal to that number).    |\n| [`math ln`](math_ln#_)             | Builtin | Returns the natural logarithm. Base: (math e).                                        |\n| [`math log`](math_log#_)           | Builtin | Returns the logarithm for an arbitrary base.                                          |\n| [`math max`](math_max#_)           | Builtin | Returns the maximum of a list of values, or of columns in a table.                    |\n| [`math median`](math_median#_)     | Builtin | Computes the median of a list of numbers.                                             |\n| [`math min`](math_min#_)           | Builtin | Finds the minimum within a list of values or tables.                                  |\n| [`math mode`](math_mode#_)         | Builtin | Returns the most frequent element(s) from a list of numbers or tables.                |\n| [`math product`](math_product#_)   | Builtin | Returns the product of a list of numbers or the products of each column of a table.   |\n| [`math round`](math_round#_)       | Builtin | Returns the input number rounded to the specified precision.                          |\n| [`math sin`](math_sin#_)           | Builtin | Returns the sine of the number.                                                       |\n| [`math sinh`](math_sinh#_)         | Builtin | Returns the hyperbolic sine of the number.                                            |\n| [`math sqrt`](math_sqrt#_)         | Builtin | Returns the square root of the input number.                                          |\n| [`math stddev`](math_stddev#_)     | Builtin | Returns the standard deviation of a list of numbers, or of each column in a table.    |\n| [`math sum`](math_sum#_)           | Builtin | Returns the sum of a list of numbers or of each column in a table.                    |\n| [`math tan`](math_tan#_)           | Builtin | Returns the tangent of the number.                                                    |\n| [`math tanh`](math_tanh#_)         | Builtin | Returns the hyperbolic tangent of the number.                                         |\n| [`math variance`](math_variance#_) | Builtin | Returns the variance of a list of numbers or of each column in a table.               |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math.html](https://www.nushell.sh/commands/docs/math.html)"
- name: Math
  summary: ''
  description: "# Math\n\n| Command                                  | Description                                                                           |\n|------------------------------------------|---------------------------------------------------------------------------------------|\n| [math](../docs/math#_)                   | Use mathematical functions as aggregate functions on a list of numbers or tables.     |\n| [math abs](../docs/math_abs#_)           | Returns the absolute value of a number.                                               |\n| [math arccos](../docs/math_arccos#_)     | Returns the arccosine of the number.                                                  |\n| [math arccosh](../docs/math_arccosh#_)   | Returns the inverse of the hyperbolic cosine function.                                |\n| [math arcsin](../docs/math_arcsin#_)     | Returns the arcsine of the number.                                                    |\n| [math arcsinh](../docs/math_arcsinh#_)   | Returns the inverse of the hyperbolic sine function.                                  |\n| [math arctan](../docs/math_arctan#_)     | Returns the arctangent of the number.                                                 |\n| [math arctanh](../docs/math_arctanh#_)   | Returns the inverse of the hyperbolic tangent function.                               |\n| [math avg](../docs/math_avg#_)           | Returns the average of a list of numbers.                                             |\n| [math ceil](../docs/math_ceil#_)         | Returns the ceil of a number (smallest integer greater than or equal to that number). |\n| [math cos](../docs/math_cos#_)           | Returns the cosine of the number.                                                     |\n| [math cosh](../docs/math_cosh#_)         | Returns the hyperbolic cosine of the number.                                          |\n| [math exp](../docs/math_exp#_)           | Returns e raised to the power of x.                                                   |\n| [math floor](../docs/math_floor#_)       | Returns the floor of a number (largest integer less than or equal to that number).    |\n| [math ln](../docs/math_ln#_)             | Returns the natural logarithm. Base: (math e).                                        |\n| [math log](../docs/math_log#_)           | Returns the logarithm for an arbitrary base.                                          |\n| [math max](../docs/math_max#_)           | Returns the maximum of a list of values, or of columns in a table.                    |\n| [math median](../docs/math_median#_)     | Computes the median of a list of numbers.                                             |\n| [math min](../docs/math_min#_)           | Finds the minimum within a list of values or tables.                                  |\n| [math mode](../docs/math_mode#_)         | Returns the most frequent element(s) from a list of numbers or tables.                |\n| [math product](../docs/math_product#_)   | Returns the product of a list of numbers or the products of each column of a table.   |\n| [math round](../docs/math_round#_)       | Returns the input number rounded to the specified precision.                          |\n| [math sin](../docs/math_sin#_)           | Returns the sine of the number.                                                       |\n| [math sinh](../docs/math_sinh#_)         | Returns the hyperbolic sine of the number.                                            |\n| [math sqrt](../docs/math_sqrt#_)         | Returns the square root of the input number.                                          |\n| [math stddev](../docs/math_stddev#_)     | Returns the standard deviation of a list of numbers, or of each column in a table.    |\n| [math sum](../docs/math_sum#_)           | Returns the sum of a list of numbers or of each column in a table.                    |\n| [math tan](../docs/math_tan#_)           | Returns the tangent of the number.                                                    |\n| [math tanh](../docs/math_tanh#_)         | Returns the hyperbolic tangent of the number.                                         |\n| [math variance](../docs/math_variance#_) | Returns the variance of a list of numbers or of each column in a table.               |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/math.html](https://www.nushell.sh/commands/categories/math.html)"
- name: math abs
  summary: '> math abs {flags}'
  description: "# `math abs` for math\n\nReturns the absolute value of a number.\n\n## Signature\n\n`> math abs {flags} `\n\n## Input/output types:\n\n| input            | output           |\n|------------------|------------------|\n| duration         | duration         |\n| list\\<duration\\> | list\\<duration\\> |\n| list\\<number\\>   | list\\<number\\>   |\n| number           | number           |\n\n## Examples\n\nCompute absolute value of each number in a list of numbers\n\n``` shiki\n> [-50-100.025] |math abs\n╭───┬────────╮\n│0│50│\n│1│100.00│\n│2│25│\n╰───┴────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_abs.html](https://www.nushell.sh/commands/docs/math_abs.html)"
- name: math arccos
  summary: '> math arccos {flags}'
  description: "# `math arccos` for math\n\nReturns the arccosine of the number.\n\n## Signature\n\n`> math arccos {flags} `\n\n## Flags\n\n- `--degrees, -d`: Return degrees instead of radians\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nGet the arccosine of 1\n\n``` shiki\n>1|math arccos\n0\n```\n\nGet the arccosine of -1 in degrees\n\n``` shiki\n>-1|math arccos-d\n180\n```\n\n**Tips:** Command `math arccos` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_arccos.html](https://www.nushell.sh/commands/docs/math_arccos.html)"
- name: math arccosh
  summary: '> math arccosh {flags}'
  description: "# `math arccosh` for math\n\nReturns the inverse of the hyperbolic cosine function.\n\n## Signature\n\n`> math arccosh {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nGet the arccosh of 1\n\n``` shiki\n>1|math arccosh\n0\n```\n\n**Tips:** Command `math arccosh` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_arccosh.html](https://www.nushell.sh/commands/docs/math_arccosh.html)"
- name: math arcsin
  summary: '> math arcsin {flags}'
  description: "# `math arcsin` for math\n\nReturns the arcsine of the number.\n\n## Signature\n\n`> math arcsin {flags} `\n\n## Flags\n\n- `--degrees, -d`: Return degrees instead of radians\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nGet the arcsine of 1\n\n``` shiki\n>1|math arcsin\n1.5707963267948966\n```\n\nGet the arcsine of 1 in degrees\n\n``` shiki\n>1|math arcsin-d\n90\n```\n\n**Tips:** Command `math arcsin` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_arcsin.html](https://www.nushell.sh/commands/docs/math_arcsin.html)"
- name: math arcsinh
  summary: '> math arcsinh {flags}'
  description: "# `math arcsinh` for math\n\nReturns the inverse of the hyperbolic sine function.\n\n## Signature\n\n`> math arcsinh {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nGet the arcsinh of 0\n\n``` shiki\n>0|math arcsinh\n0\n```\n\n**Tips:** Command `math arcsinh` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_arcsinh.html](https://www.nushell.sh/commands/docs/math_arcsinh.html)"
- name: math arctan
  summary: '> math arctan {flags}'
  description: "# `math arctan` for math\n\nReturns the arctangent of the number.\n\n## Signature\n\n`> math arctan {flags} `\n\n## Flags\n\n- `--degrees, -d`: Return degrees instead of radians\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nGet the arctangent of 1\n\n``` shiki\n>1|math arctan\n0.7853981633974483\n```\n\nGet the arctangent of -1 in degrees\n\n``` shiki\n>-1|math arctan-d\n-45\n```\n\n**Tips:** Command `math arctan` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_arctan.html](https://www.nushell.sh/commands/docs/math_arctan.html)"
- name: math arctanh
  summary: '> math arctanh {flags}'
  description: "# `math arctanh` for math\n\nReturns the inverse of the hyperbolic tangent function.\n\n## Signature\n\n`> math arctanh {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nGet the arctanh of 1\n\n``` shiki\n>1|math arctanh\ninf\n```\n\n**Tips:** Command `math arctanh` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_arctanh.html](https://www.nushell.sh/commands/docs/math_arctanh.html)"
- name: math avg
  summary: '> math avg {flags}'
  description: "# `math avg` for math\n\nReturns the average of a list of numbers.\n\n## Signature\n\n`> math avg {flags} `\n\n## Input/output types:\n\n| input            | output   |\n|------------------|----------|\n| list\\<duration\\> | duration |\n| list\\<filesize\\> | filesize |\n| list\\<number\\>   | number   |\n\n## Examples\n\nCompute the average of a list of numbers\n\n``` shiki\n> [-50100.025] |math avg\n25\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_avg.html](https://www.nushell.sh/commands/docs/math_avg.html)"
- name: math ceil
  summary: '> math ceil {flags}'
  description: "# `math ceil` for math\n\nReturns the ceil of a number (smallest integer greater than or equal to that number).\n\n## Signature\n\n`> math ceil {flags} `\n\n## Input/output types:\n\n| input          | output      |\n|----------------|-------------|\n| list\\<number\\> | list\\<int\\> |\n| number         | int         |\n\n## Examples\n\nApply the ceil function to a list of numbers\n\n``` shiki\n> [1.52.3-3.1] |math ceil\n╭───┬────╮\n│0│2│\n│1│3│\n│2│-3│\n╰───┴────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_ceil.html](https://www.nushell.sh/commands/docs/math_ceil.html)"
- name: math cos
  summary: '> math cos {flags}'
  description: "# `math cos` for math\n\nReturns the cosine of the number.\n\n## Signature\n\n`> math cos {flags} `\n\n## Flags\n\n- `--degrees, -d`: Use degrees instead of radians\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nApply the cosine to π\n\n``` shiki\n>3.141592|math cos|math round--precision4\n-1\n```\n\nApply the cosine to a list of angles in degrees\n\n``` shiki\n> [090180270360] |math cos-d\n╭───┬───────╮\n│0│1.00│\n│1│0.00│\n│2│-1.00│\n│3│0.00│\n│4│1.00│\n╰───┴───────╯\n```\n\n**Tips:** Command `math cos` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_cos.html](https://www.nushell.sh/commands/docs/math_cos.html)"
- name: math cosh
  summary: '> math cosh {flags}'
  description: "# `math cosh` for math\n\nReturns the hyperbolic cosine of the number.\n\n## Signature\n\n`> math cosh {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nApply the hyperbolic cosine to 1\n\n``` shiki\n>1|math cosh\n1.5430806348152435\n```\n\n**Tips:** Command `math cosh` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_cosh.html](https://www.nushell.sh/commands/docs/math_cosh.html)"
- name: math exp
  summary: '> math exp {flags}'
  description: "# `math exp` for math\n\nReturns e raised to the power of x.\n\n## Signature\n\n`> math exp {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nGet e raised to the power of zero\n\n``` shiki\n>0|math exp\n1\n```\n\nGet e (same as 'math e')\n\n``` shiki\n>1|math exp\n2.718281828459045\n```\n\n**Tips:** Command `math exp` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_exp.html](https://www.nushell.sh/commands/docs/math_exp.html)"
- name: math floor
  summary: '> math floor {flags}'
  description: "# `math floor` for math\n\nReturns the floor of a number (largest integer less than or equal to that number).\n\n## Signature\n\n`> math floor {flags} `\n\n## Input/output types:\n\n| input          | output      |\n|----------------|-------------|\n| list\\<number\\> | list\\<int\\> |\n| number         | int         |\n\n## Examples\n\nApply the floor function to a list of numbers\n\n``` shiki\n> [1.52.3-3.1] |math floor\n╭───┬────╮\n│0│1│\n│1│2│\n│2│-4│\n╰───┴────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_floor.html](https://www.nushell.sh/commands/docs/math_floor.html)"
- name: math ln
  summary: '> math ln {flags}'
  description: "# `math ln` for math\n\nReturns the natural logarithm. Base: (math e).\n\n## Signature\n\n`> math ln {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nGet the natural logarithm of e\n\n``` shiki\n>2.7182818|math ln|math round--precision4\n1\n```\n\n**Tips:** Command `math ln` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_ln.html](https://www.nushell.sh/commands/docs/math_ln.html)"
- name: math log
  summary: '> math log {flags} (base)'
  description: "# `math log` for math\n\nReturns the logarithm for an arbitrary base.\n\n## Signature\n\n`> math log {flags} (base)`\n\n## Parameters\n\n- `base`: Base for which the logarithm should be computed\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nGet the logarithm of 100 to the base 10\n\n``` shiki\n>100|math log10\n2\n```\n\nGet the log2 of a list of values\n\n``` shiki\n> [1684] |math log2\n╭───┬──────╮\n│0│4.00│\n│1│3.00│\n│2│2.00│\n╰───┴──────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_log.html](https://www.nushell.sh/commands/docs/math_log.html)"
- name: math max
  summary: '> math max {flags}'
  description: "# `math max` for math\n\nReturns the maximum of a list of values, or of columns in a table.\n\n## Signature\n\n`> math max {flags} `\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | any    |\n| table       | record |\n\n## Examples\n\nFind the maximum of list of numbers\n\n``` shiki\n> [-5010025] |math max\n100\n```\n\nFind the maxima of the columns of a table\n\n``` shiki\n> [{a:1b:3} {a:2b:-1}] |math max\n╭───┬───╮\n│a│2│\n│b│3│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_max.html](https://www.nushell.sh/commands/docs/math_max.html)"
- name: math median
  summary: '> math median {flags}'
  description: "# `math median` for math\n\nComputes the median of a list of numbers.\n\n## Signature\n\n`> math median {flags} `\n\n## Input/output types:\n\n| input            | output   |\n|------------------|----------|\n| list\\<duration\\> | duration |\n| list\\<filesize\\> | filesize |\n| list\\<number\\>   | number   |\n| table            | record   |\n\n## Examples\n\nCompute the median of a list of numbers\n\n``` shiki\n> [389121215] |math median\n10.5\n```\n\nCompute the medians of the columns of a table\n\n``` shiki\n> [{a:1b:3} {a:2b:-1} {a:-3b:5}] |math median\n╭───┬───╮\n│a│1│\n│b│3│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_median.html](https://www.nushell.sh/commands/docs/math_median.html)"
- name: math min
  summary: '> math min {flags}'
  description: "# `math min` for math\n\nFinds the minimum within a list of values or tables.\n\n## Signature\n\n`> math min {flags} `\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | any    |\n| table       | record |\n\n## Examples\n\nCompute the minimum of a list of numbers\n\n``` shiki\n> [-5010025] |math min\n-50\n```\n\nCompute the minima of the columns of a table\n\n``` shiki\n> [{a:1b:3} {a:2b:-1}] |math min\n╭───┬────╮\n│a│1│\n│b│-1│\n╰───┴────╯\n```\n\nFind the minimum of a list of arbitrary values (Warning: Weird)\n\n``` shiki\n> [-50'hello'true] |math min\ntrue\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_min.html](https://www.nushell.sh/commands/docs/math_min.html)"
- name: math mode
  summary: '> math mode {flags}'
  description: "# `math mode` for math\n\nReturns the most frequent element(s) from a list of numbers or tables.\n\n## Signature\n\n`> math mode {flags} `\n\n## Input/output types:\n\n| input            | output           |\n|------------------|------------------|\n| list\\<duration\\> | list\\<duration\\> |\n| list\\<filesize\\> | list\\<filesize\\> |\n| list\\<number\\>   | list\\<number\\>   |\n| table            | record           |\n\n## Examples\n\nCompute the mode(s) of a list of numbers\n\n``` shiki\n> [339121215] |math mode\n╭───┬────╮\n│0│3│\n│1│12│\n╰───┴────╯\n```\n\nCompute the mode(s) of the columns of a table\n\n``` shiki\n> [{a:1b:3} {a:2b:-1} {a:1b:5}] |math mode\n╭───┬────────────╮\n││╭───┬───╮│\n│a││0│1││\n││╰───┴───╯│\n││╭───┬────╮│\n│b││0│-1││\n│││1│3││\n│││2│5││\n││╰───┴────╯│\n╰───┴────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_mode.html](https://www.nushell.sh/commands/docs/math_mode.html)"
- name: math product
  summary: '> math product {flags}'
  description: "# `math product` for math\n\nReturns the product of a list of numbers or the products of each column of a table.\n\n## Signature\n\n`> math product {flags} `\n\n## Input/output types:\n\n| input          | output |\n|----------------|--------|\n| list\\<number\\> | number |\n\n## Examples\n\nCompute the product of a list of numbers\n\n``` shiki\n> [2334] |math product\n72\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_product.html](https://www.nushell.sh/commands/docs/math_product.html)"
- name: math round
  summary: '> math round {flags}'
  description: "# `math round` for math\n\nReturns the input number rounded to the specified precision.\n\n## Signature\n\n`> math round {flags} `\n\n## Flags\n\n- `--precision, -p {number}`: digits of precision\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nApply the round function to a list of numbers\n\n``` shiki\n> [1.52.3-3.1] |math round\n╭───┬────╮\n│0│2│\n│1│2│\n│2│-3│\n╰───┴────╯\n```\n\nApply the round function with precision specified\n\n``` shiki\n> [1.5552.333-3.111] |math round-p2\n╭───┬───────╮\n│0│1.56│\n│1│2.33│\n│2│-3.11│\n╰───┴───────╯\n```\n\nApply negative precision to a list of numbers\n\n``` shiki\n> [123, 123.3, -123.4] |math round-p-1\n╭───┬──────╮\n│0│120│\n│1│120│\n│2│-120│\n╰───┴──────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_round.html](https://www.nushell.sh/commands/docs/math_round.html)"
- name: math sin
  summary: '> math sin {flags}'
  description: "# `math sin` for math\n\nReturns the sine of the number.\n\n## Signature\n\n`> math sin {flags} `\n\n## Flags\n\n- `--degrees, -d`: Use degrees instead of radians\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nApply the sine to π/2\n\n``` shiki\n>3.141592/2|math sin|math round--precision4\n1\n```\n\nApply the sine to a list of angles in degrees\n\n``` shiki\n> [090180270360] |math sin-d|math round--precision4\n╭───┬───────╮\n│0│0.00│\n│1│1.00│\n│2│0.00│\n│3│-1.00│\n│4│0.00│\n╰───┴───────╯\n```\n\n**Tips:** Command `math sin` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_sin.html](https://www.nushell.sh/commands/docs/math_sin.html)"
- name: math sinh
  summary: '> math sinh {flags}'
  description: "# `math sinh` for math\n\nReturns the hyperbolic sine of the number.\n\n## Signature\n\n`> math sinh {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nApply the hyperbolic sine to 1\n\n``` shiki\n>1|math sinh\n1.1752011936438014\n```\n\n**Tips:** Command `math sinh` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_sinh.html](https://www.nushell.sh/commands/docs/math_sinh.html)"
- name: math sqrt
  summary: '> math sqrt {flags}'
  description: "# `math sqrt` for math\n\nReturns the square root of the input number.\n\n## Signature\n\n`> math sqrt {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nCompute the square root of each number in a list\n\n``` shiki\n> [916] |math sqrt\n╭───┬───╮\n│0│3│\n│1│4│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_sqrt.html](https://www.nushell.sh/commands/docs/math_sqrt.html)"
- name: math stddev
  summary: '> math stddev {flags}'
  description: "# `math stddev` for math\n\nReturns the standard deviation of a list of numbers, or of each column in a table.\n\n## Signature\n\n`> math stddev {flags} `\n\n## Flags\n\n- `--sample, -s`: calculate sample standard deviation (i.e. using N-1 as the denominator)\n\n## Input/output types:\n\n| input          | output |\n|----------------|--------|\n| list\\<number\\> | number |\n\n## Examples\n\nCompute the standard deviation of a list of numbers\n\n``` shiki\n> [12345] |math stddev\n1.4142135623730951\n```\n\nCompute the sample standard deviation of a list of numbers\n\n``` shiki\n> [12345] |math stddev-s\n1.5811388300841898\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_stddev.html](https://www.nushell.sh/commands/docs/math_stddev.html)"
- name: math sum
  summary: '> math sum {flags}'
  description: "# `math sum` for math\n\nReturns the sum of a list of numbers or of each column in a table.\n\n## Signature\n\n`> math sum {flags} `\n\n## Input/output types:\n\n| input            | output   |\n|------------------|----------|\n| list\\<duration\\> | duration |\n| list\\<filesize\\> | filesize |\n| list\\<number\\>   | number   |\n| range            | number   |\n| table            | table    |\n\n## Examples\n\nSum a list of numbers\n\n``` shiki\n> [123] |math sum\n6\n```\n\nGet the disk usage for the current directory\n\n``` shiki\n>ls|getsize|math sum\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_sum.html](https://www.nushell.sh/commands/docs/math_sum.html)"
- name: math tan
  summary: '> math tan {flags}'
  description: "# `math tan` for math\n\nReturns the tangent of the number.\n\n## Signature\n\n`> math tan {flags} `\n\n## Flags\n\n- `--degrees, -d`: Use degrees instead of radians\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nApply the tangent to π/4\n\n``` shiki\n>3.141592/4|math tan|math round--precision4\n1\n```\n\nApply the tangent to a list of angles in degrees\n\n``` shiki\n> [-45045] |math tan-d\n╭───┬───────╮\n│0│-1.00│\n│1│0.00│\n│2│1.00│\n╰───┴───────╯\n```\n\n**Tips:** Command `math tan` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_tan.html](https://www.nushell.sh/commands/docs/math_tan.html)"
- name: math tanh
  summary: '> math tanh {flags}'
  description: "# `math tanh` for math\n\nReturns the hyperbolic tangent of the number.\n\n## Signature\n\n`> math tanh {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<number\\> | list\\<number\\> |\n| number         | number         |\n\n## Examples\n\nApply the hyperbolic tangent to 10\\*π\n\n``` shiki\n>3.141592*10|math tanh|math round--precision4\n1\n```\n\n**Tips:** Command `math tanh` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_tanh.html](https://www.nushell.sh/commands/docs/math_tanh.html)"
- name: math variance
  summary: '> math variance {flags}'
  description: "# `math variance` for math\n\nReturns the variance of a list of numbers or of each column in a table.\n\n## Signature\n\n`> math variance {flags} `\n\n## Flags\n\n- `--sample, -s`: calculate sample variance (i.e. using N-1 as the denominator)\n\n## Input/output types:\n\n| input          | output |\n|----------------|--------|\n| list\\<number\\> | number |\n\n## Examples\n\nGet the variance of a list of numbers\n\n``` shiki\n> [12345] |math variance\n2\n```\n\nGet the sample variance of a list of numbers\n\n``` shiki\n> [12345] |math variance-s\n2.5\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/math_variance.html](https://www.nushell.sh/commands/docs/math_variance.html)"
- name: merge
  summary: '> merge {flags} (value)'
  description: "# `merge` for filters\n\nMerge the input with a record or table, overwriting values in matching columns.\n\n## Signature\n\n`> merge {flags} (value)`\n\n## Parameters\n\n- `value`: the new value to merge with\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| table  | table  |\n\n## Examples\n\nAdd an 'index' column to the input table\n\n``` shiki\n> [abc] |wrapname|merge ( [123] |wrapindex )\n╭───┬──────╮\n│# │ name │\n├───┼──────┤\n│1│a│\n│2│b│\n│3│c│\n╰───┴──────╯\n```\n\nMerge two records\n\n``` shiki\n> {a:1, b:2} |merge {c:3}\n╭───┬───╮\n│a│1│\n│b│2│\n│c│3│\n╰───┴───╯\n```\n\nMerge two tables, overwriting overlapping columns\n\n``` shiki\n> [{columnA:A0columnB:B0}] |merge [{columnA:'A0*'}]\n╭───┬─────────┬─────────╮\n│# │ columnA │ columnB │\n├───┼─────────┼─────────┤\n│0│A0*│B0│\n╰───┴─────────┴─────────╯\n```\n\n## Notes\n\nYou may provide a column structure to merge\n\nWhen merging tables, row 0 of the input table is overwritten with values from row 0 of the provided table, then repeating this process with row 1, and so on.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/merge.html](https://www.nushell.sh/commands/docs/merge.html)"
- name: metadata
  summary: '> metadata {flags} (expression)'
  description: "# `metadata` for debug\n\nGet the metadata for items in the stream.\n\n## Signature\n\n`> metadata {flags} (expression)`\n\n## Parameters\n\n- `expression`: the expression you want metadata for\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | record |\n\n## Examples\n\nGet the metadata of a variable\n\n``` shiki\n>leta=42;metadata$a\n```\n\nGet the metadata of the input\n\n``` shiki\n>ls|metadata\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/metadata.html](https://www.nushell.sh/commands/docs/metadata.html)"
- name: Misc
  summary: ''
  description: "# Misc\n\n| Command                                      | Description                             |\n|----------------------------------------------|-----------------------------------------|\n| [history](../docs/history#_)                 | Get the command history.                |\n| [history session](../docs/history_session#_) | Get the command history session.        |\n| [tutor](../docs/tutor#_)                     | Run the tutorial. To begin, run: tutor. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/misc.html](https://www.nushell.sh/commands/categories/misc.html)"
- name: mkdir
  summary: '> mkdir {flags} ...rest'
  description: "# `mkdir` for filesystem\n\nMake directories, creates intermediary directories as required.\n\n## Signature\n\n`> mkdir {flags} ...rest`\n\n## Flags\n\n- `--verbose, -v`: print created path(s).\n\n## Parameters\n\n- `...rest`: the name(s) of the path(s) to create\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nMake a directory named foo\n\n``` shiki\n>mkdirfoo\n```\n\nMake multiple directories and show the paths created\n\n``` shiki\n>mkdir-vfoo/barfoo2\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/mkdir.html](https://www.nushell.sh/commands/docs/mkdir.html)"
- name: module
  summary: '> module {flags} (module) (block)'
  description: "# `module` for core\n\nDefine a custom module.\n\n## Signature\n\n`> module {flags} (module) (block)`\n\n## Parameters\n\n- `module`: module name or module path\n- `block`: body of the module if 'module' parameter is not a module path\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nDefine a custom command in a module and call it\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" } };usespamfoo;foo\nfoo\n```\n\nDefine an environment variable in a module\n\n``` shiki\n>modulefoo { export-env { $env.FOO=\"BAZ\" } };usefoo;$env.FOO\nBAZ\n```\n\nDefine a custom command that participates in the environment in a module and call it\n\n``` shiki\n>modulefoo { export def-envbar [] { $env.FOO_BAR=\"BAZ\" } };usefoobar;bar;$env.FOO_BAR\nBAZ\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/module.html](https://www.nushell.sh/commands/docs/module.html)"
- name: move
  summary: '> move {flags} ...rest'
  description: "# `move` for filters\n\nMove columns before or after other columns.\n\n## Signature\n\n`> move {flags} ...rest`\n\n## Flags\n\n- `--after, - {string}`: the column that will precede the columns moved\n- `--before, - {string}`: the column that will be the next after the columns moved\n\n## Parameters\n\n- `...rest`: the columns to move\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| table  | table  |\n\n## Examples\n\nMove a column before the first column\n\n``` shiki\n> [[namevalueindex]; [fooa1] [barb2] [bazc3]] |moveindex--beforename\n╭───┬──────┬───────╮\n│# │ name │ value │\n├───┼──────┼───────┤\n│1│foo│a│\n│2│bar│b│\n│3│baz│c│\n╰───┴──────┴───────╯\n```\n\nMove multiple columns after the last column and reorder them\n\n``` shiki\n> [[namevalueindex]; [fooa1] [barb2] [bazc3]] |movevaluename--afterindex\n╭───┬───────┬──────╮\n│# │ value │ name │\n├───┼───────┼──────┤\n│1│a│foo│\n│2│b│bar│\n│3│c│baz│\n╰───┴───────┴──────╯\n```\n\nMove columns of a record\n\n``` shiki\n> { name:foo, value:a, index:1 } |movename--beforeindex\n╭───────┬─────╮\n│value│a│\n│name│foo│\n│index│1│\n╰───────┴─────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/move.html](https://www.nushell.sh/commands/docs/move.html)"
- name: mut
  summary: '> mut {flags} (var_name) (initial_value)'
  description: "# `mut` for core\n\nCreate a mutable variable and give it a value.\n\n## Signature\n\n`> mut {flags} (var_name) (initial_value)`\n\n## Parameters\n\n- `var_name`: variable name\n- `initial_value`: equals sign followed by value\n\n## Input/output types:\n\n| input | output  |\n|-------|---------|\n| any   | nothing |\n\n## Examples\n\nSet a mutable variable to a value, then update it\n\n``` shiki\n>mutx=10;$x=12\n```\n\nUpsert a value inside a mutable data structure\n\n``` shiki\n>muta= {b:{c:1}};$a.b.c=2\n```\n\nSet a mutable variable to the result of an expression\n\n``` shiki\n>mutx=10+100\n```\n\nSet a mutable variable based on the condition\n\n``` shiki\n>mutx=iffalse { -1 } else { 1 }\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/mut.html](https://www.nushell.sh/commands/docs/mut.html)"
- name: mv
  summary: '> mv {flags} (source) (destination)'
  description: "# `mv` for filesystem\n\nMove files or directories.\n\n## Signature\n\n`> mv {flags} (source) (destination)`\n\n## Flags\n\n- `--verbose, -v`: make mv to be verbose, showing files been moved.\n- `--force, -f`: overwrite the destination.\n- `--interactive, -i`: ask user to confirm action\n- `--update, -u`: move only when the SOURCE file is newer than the destination file(with -f) or when the destination file is missing\n\n## Parameters\n\n- `source`: the location to move files/directories from\n- `destination`: the location to move files/directories to\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nRename a file\n\n``` shiki\n>mvbefore.txtafter.txt\n```\n\nMove a file into a directory\n\n``` shiki\n>mvtest.txtmy/subdirectory\n```\n\nMove many files into a directory\n\n``` shiki\n>mv*.txtmy/subdirectory\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/mv.html](https://www.nushell.sh/commands/docs/mv.html)"
- name: n
  summary: '> n'
  description: "# `n` for shells\n\nSwitch to the next shell.\n\n## Signature\n\n`> n `\n\n## Examples\n\nMake two directories and enter new shells for them, use `n` to jump to the next shell\n\n``` shiki\n>mkdirfoobar;enterfoo;enter../bar;n\n```\n\nRun `n` several times and note the changes of current directory\n\n``` shiki\n>n\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/n.html](https://www.nushell.sh/commands/docs/n.html)"
- name: Network
  summary: ''
  description: "# Network\n\n| Command                                      | Description                                                           |\n|----------------------------------------------|-----------------------------------------------------------------------|\n| [http](../docs/http#_)                       | Various commands for working with http methods.                       |\n| [http delete](../docs/http_delete#_)         | Delete the specified resource.                                        |\n| [http get](../docs/http_get#_)               | Fetch the contents from a URL.                                        |\n| [http head](../docs/http_head#_)             | Get the headers from a URL.                                           |\n| [http options](../docs/http_options#_)       | Requests permitted communication options for a given URL.             |\n| [http patch](../docs/http_patch#_)           | Patch a body to a URL.                                                |\n| [http post](../docs/http_post#_)             | Post a body to a URL.                                                 |\n| [http put](../docs/http_put#_)               | Put a body to a URL.                                                  |\n| [port](../docs/port#_)                       | Get a free port from system.                                          |\n| [query web](../docs/query_web#_)             | execute selector query on html/web                                    |\n| [url](../docs/url#_)                         | Various commands for working with URLs.                               |\n| [url build-query](../docs/url_build-query#_) | Converts record or table into query string applying percent-encoding. |\n| [url join](../docs/url_join#_)               | Converts a record to url.                                             |\n| [url parse](../docs/url_parse#_)             | Parses a url.                                                         |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/network.html](https://www.nushell.sh/commands/categories/network.html)"
- name: nu-check
  summary: '> nu-check {flags} (path)'
  description: "# `nu-check` for strings\n\nValidate and parse input content.\n\n## Signature\n\n`> nu-check {flags} (path)`\n\n## Flags\n\n- `--as-module, -m`: Parse content as module\n- `--debug, -d`: Show error messages\n- `--all, -a`: Parse content as script first, returns result if success, otherwise, try with module\n\n## Parameters\n\n- `path`: File path to parse\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | bool   |\n| string      | bool   |\n\n## Examples\n\nParse a input file as script(Default)\n\n``` shiki\n>nu-checkscript.nu\n```\n\nParse a input file as module\n\n``` shiki\n>nu-check--as-modulemodule.nu\n```\n\nParse a input file by showing error message\n\n``` shiki\n>nu-check-dscript.nu\n```\n\nParse an external stream as script by showing error message\n\n``` shiki\n>openfoo.nu|nu-check-dscript.nu\n```\n\nParse an internal stream as module by showing error message\n\n``` shiki\n>openmodule.nu|lines|nu-check-d--as-modulemodule.nu\n```\n\nParse a string as script\n\n``` shiki\n>$'two(char nl)lines'|nu-check\n```\n\nHeuristically parse which begins with script first, if it sees a failure, try module afterwards\n\n``` shiki\n>nu-check-ascript.nu\n```\n\nHeuristically parse by showing error message\n\n``` shiki\n>openfoo.nu|lines|nu-check-ad\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/nu-check.html](https://www.nushell.sh/commands/docs/nu-check.html)"
- name: nu-highlight
  summary: '> nu-highlight {flags}'
  description: "# `nu-highlight` for strings\n\nSyntax highlight the input string.\n\n## Signature\n\n`> nu-highlight {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | string |\n\n## Examples\n\nDescribe the type of a string\n\n``` shiki\n>'let x = 3'|nu-highlight\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/nu-highlight.html](https://www.nushell.sh/commands/docs/nu-highlight.html)"
- name: open
  summary: '> open {flags} (filename) ...rest'
  description: "# `open` for filesystem\n\nLoad a file into a cell, converting to table if possible (avoid by appending '--raw').\n\n## Signature\n\n`> open {flags} (filename) ...rest`\n\n## Flags\n\n- `--raw, -r`: open file as raw binary\n\n## Parameters\n\n- `filename`: the filename to use\n- `...rest`: optional additional files to open\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n| string  | any    |\n\n## Examples\n\nOpen a file, with structure (based on file extension or SQLite database header)\n\n``` shiki\n>openmyfile.json\n```\n\nOpen a file, as raw bytes\n\n``` shiki\n>openmyfile.json--raw\n```\n\nOpen a file, using the input to get filename\n\n``` shiki\n>'myfile.txt'|open\n```\n\nOpen a file, and decode it by the specified encoding\n\n``` shiki\n>openmyfile.txt--raw|decodeutf-8\n```\n\nCreate a custom `from` parser to open newline-delimited JSON files with `open`\n\n``` shiki\n>def\"from ndjson\" [] { from json-o };openmyfile.ndjson\n```\n\n## Notes\n\nSupport to automatically parse files with an extension `.xyz` can be provided by a `from xyz` command in scope.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/open.html](https://www.nushell.sh/commands/docs/open.html)"
- name: overlay
  summary: '> overlay {flags}'
  description: "# `overlay` for core\n\nCommands for manipulating overlays.\n\n## Signature\n\n`> overlay {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                             | type    | usage                                        |\n|----------------------------------|---------|----------------------------------------------|\n| [`overlay hide`](overlay_hide#_) | Builtin | Hide an active overlay.                      |\n| [`overlay list`](overlay_list#_) | Builtin | List all active overlays.                    |\n| [`overlay new`](overlay_new#_)   | Builtin | Create an empty overlay.                     |\n| [`overlay use`](overlay_use#_)   | Builtin | Use definitions from a module as an overlay. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/overlay.html](https://www.nushell.sh/commands/docs/overlay.html)"
- name: overlay hide
  summary: '> overlay hide {flags} (name)'
  description: "# `overlay hide` for core\n\nHide an active overlay.\n\n## Signature\n\n`> overlay hide {flags} (name)`\n\n## Flags\n\n- `--keep-custom, -k`: Keep all newly added commands and aliases in the next activated overlay\n- `--keep-env, -e {list<string>}`: List of environment variables to keep in the next activated overlay\n\n## Parameters\n\n- `name`: Overlay to hide\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nKeep a custom command after hiding the overlay\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" } }\noverlay usespam\ndefbar [] { \"bar\" }\noverlay hidespam--keep-custom\nbar\n\n```\n\nHide an overlay created from a file\n\n``` shiki\n>'export alias f = \"foo\"'|savespam.nu\noverlay usespam.nu\noverlay hidespam\n```\n\nHide the last activated overlay\n\n``` shiki\n>modulespam { export-env { $env.FOO=\"foo\" } }\noverlay usespam\noverlay hide\n```\n\nKeep the current working directory when removing an overlay\n\n``` shiki\n>overlay newspam\ncdsome-dir\noverlay hide--keep-env [ PWD ] spam\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/overlay_hide.html](https://www.nushell.sh/commands/docs/overlay_hide.html)"
- name: overlay list
  summary: '> overlay list {flags}'
  description: "# `overlay list` for core\n\nList all active overlays.\n\n## Signature\n\n`> overlay list {flags} `\n\n## Input/output types:\n\n| input   | output         |\n|---------|----------------|\n| nothing | list\\<string\\> |\n\n## Examples\n\nGet the last activated overlay\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" } }\noverlay usespam\noverlay list|last\nspam\n```\n\n## Notes\n\nThe overlays are listed in the order they were activated.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/overlay_list.html](https://www.nushell.sh/commands/docs/overlay_list.html)"
- name: overlay new
  summary: '> overlay new {flags} (name)'
  description: "# `overlay new` for core\n\nCreate an empty overlay.\n\n## Signature\n\n`> overlay new {flags} (name)`\n\n## Parameters\n\n- `name`: Name of the overlay\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nCreate an empty overlay\n\n``` shiki\n>overlay newspam\n```\n\n## Notes\n\nThe command will first create an empty module, then add it as an overlay.\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/overlay_new.html](https://www.nushell.sh/commands/docs/overlay_new.html)"
- name: overlay use
  summary: '> overlay use {flags} (name) (as)'
  description: "# `overlay use` for core\n\nUse definitions from a module as an overlay.\n\n## Signature\n\n`> overlay use {flags} (name) (as)`\n\n## Flags\n\n- `--prefix, -p`: Prepend module name to the imported commands and aliases\n- `--reload, -r`: If the overlay already exists, reload its definitions and environment.\n\n## Parameters\n\n- `name`: Module name to use overlay for\n- `as`: as keyword followed by a new name\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nCreate an overlay from a module\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" } }\noverlay usespam\nfoo\n```\n\nCreate an overlay from a module and rename it\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" } }\noverlay usespamasspam_new\nfoo\n```\n\nCreate an overlay with a prefix\n\n``` shiki\n>'export def foo { \"foo\" }'\noverlay use--prefixspam\nspamfoo\n```\n\nCreate an overlay from a file\n\n``` shiki\n>'export-env { $env.FOO = \"foo\" }'|savespam.nu\noverlay usespam.nu\n$env.FOO\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/overlay_use.html](https://www.nushell.sh/commands/docs/overlay_use.html)"
- name: p
  summary: '> p'
  description: "# `p` for shells\n\nSwitch to the previous shell.\n\n## Signature\n\n`> p `\n\n## Examples\n\nMake two directories and enter new shells for them, use `p` to jump to the previous shell\n\n``` shiki\n>mkdirfoobar;enterfoo;enter../bar;p\n```\n\nRun `p` several times and note the changes of current directory\n\n``` shiki\n>p\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/p.html](https://www.nushell.sh/commands/docs/p.html)"
- name: par-each
  summary: '> par-each {flags} (closure)'
  description: "# `par-each` for filters\n\nRun a closure on each row of the input list in parallel, creating a new list with the results.\n\n## Signature\n\n`> par-each {flags} (closure)`\n\n## Flags\n\n- `--threads, -t {int}`: the number of threads to use\n- `--keep-order, -k`: keep sequence of output same as the order of input\n\n## Parameters\n\n- `closure`: the closure to run\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| range       | list\\<any\\> |\n| table       | list\\<any\\> |\n\n## Examples\n\nMultiplies each number. Note that the list will become arbitrarily disordered.\n\n``` shiki\n> [123] |par-each {|e| $e*2 }\n```\n\nMultiplies each number, keeping an original order\n\n``` shiki\n> [123] |par-each--keep-order {|e| $e*2 }\n╭───┬───╮\n│0│2│\n│1│4│\n│2│6│\n╰───┴───╯\n```\n\nEnumerate and sort-by can be used to reconstruct the original order\n\n``` shiki\n>1..3|enumerate|par-each {|p| updateitem ($p.item*2)} |sort-byitem|getitem\n╭───┬───╮\n│0│2│\n│1│4│\n│2│6│\n╰───┴───╯\n```\n\nOutput can still be sorted afterward\n\n``` shiki\n> [foobarbaz] |par-each {|e| $e+'!' } |sort\n╭───┬──────╮\n│0│bar!│\n│1│baz!│\n│2│foo!│\n╰───┴──────╯\n```\n\nIterate over each element, producing a list showing indexes of any 2s\n\n``` shiki\n> [123] |enumerate|par-each { |e| if$e.item==2 { $\"found 2 at ($e.index)!\"} }\n╭───┬───────────────╮\n│0│found2at1!│\n╰───┴───────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/par-each.html](https://www.nushell.sh/commands/docs/par-each.html)"
- name: parse
  summary: '> parse {flags} (pattern)'
  description: "# `parse` for strings\n\nParse columns from string data using a simple pattern.\n\n## Signature\n\n`> parse {flags} (pattern)`\n\n## Flags\n\n- `--regex, -r`: use full regex syntax for patterns\n\n## Parameters\n\n- `pattern`: the pattern to match. Eg) \"{foo}: {bar}\"\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | table  |\n| string      | table  |\n\n## Examples\n\nParse a string into two named columns\n\n``` shiki\n>\"hi there\"|parse\"{foo} {bar}\"\n╭───┬─────┬───────╮\n│# │ foo │  bar  │\n├───┼─────┼───────┤\n│0│hi│there│\n╰───┴─────┴───────╯\n```\n\nParse a string using regex pattern\n\n``` shiki\n>\"hi there\"|parse-r'(?P<foo>\\w+) (?P<bar>\\w+)'\n╭───┬─────┬───────╮\n│# │ foo │  bar  │\n├───┼─────┼───────┤\n│0│hi│there│\n╰───┴─────┴───────╯\n```\n\nParse a string using fancy-regex named capture group pattern\n\n``` shiki\n>\"foo bar.\"|parse-r'\\s*(?<name>\\w+)(?=\\.)'\n╭───┬──────╮\n│# │ name │\n├───┼──────┤\n│0│bar│\n╰───┴──────╯\n```\n\nParse a string using fancy-regex capture group pattern\n\n``` shiki\n>\"foo! bar.\"|parse-r'(\\w+)(?=\\.)|(\\w+)(?=!)'\n╭───┬──────────┬──────────╮\n│# │ capture0 │ capture1 │\n├───┼──────────┼──────────┤\n│0││foo│\n│1│bar││\n╰───┴──────────┴──────────╯\n```\n\nParse a string using fancy-regex look behind pattern\n\n``` shiki\n>\" @another(foo bar)   \"|parse-r'\\s*(?<=[() ])(@\\w+)(\\([^)]*\\))?\\s*'\n╭───┬──────────┬───────────╮\n│# │ capture0 │ capture1  │\n├───┼──────────┼───────────┤\n│0│@another│ (foobar) │\n╰───┴──────────┴───────────╯\n```\n\nParse a string using fancy-regex look ahead atomic group pattern\n\n``` shiki\n>\"abcd\"|parse-r'^a(bc(?=d)|b)cd$'\n╭───┬──────────╮\n│# │ capture0 │\n├───┼──────────┤\n│0│b│\n╰───┴──────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/parse.html](https://www.nushell.sh/commands/docs/parse.html)"
- name: Path
  summary: ''
  description: "# Path\n\n| Command                                        | Description                                                             |\n|------------------------------------------------|-------------------------------------------------------------------------|\n| [path](../docs/path#_)                         | Explore and manipulate paths.                                           |\n| [path basename](../docs/path_basename#_)       | Get the final component of a path.                                      |\n| [path dirname](../docs/path_dirname#_)         | Get the parent directory of a path.                                     |\n| [path exists](../docs/path_exists#_)           | Check whether a path exists.                                            |\n| [path expand](../docs/path_expand#_)           | Try to expand a path to its absolute form.                              |\n| [path join](../docs/path_join#_)               | Join a structured path or a list of path parts.                         |\n| [path parse](../docs/path_parse#_)             | Convert a path into structured data.                                    |\n| [path relative-to](../docs/path_relative-to#_) | Express a path as relative to another path.                             |\n| [path split](../docs/path_split#_)             | Split a path into a list based on the system's path separator.          |\n| [path type](../docs/path_type#_)               | Get the type of the object a path refers to (e.g., file, dir, symlink). |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/path.html](https://www.nushell.sh/commands/categories/path.html)"
- name: path
  summary: '> path {flags}'
  description: "# `path` for path\n\nExplore and manipulate paths.\n\n## Signature\n\n`> path {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\nThere are three ways to represent a path:\n\n- As a path literal, e.g., '/home/viking/spam.txt'\n- As a structured path: a table with 'parent', 'stem', and 'extension' (and\n- 'prefix' on Windows) columns. This format is produced by the 'path parse' subcommand.\n- As a list of path parts, e.g., '\\[ / home viking spam.txt \\]'. Splitting into parts is done by the `path split` command.\n\nAll subcommands accept all three variants as an input. Furthermore, the 'path join' subcommand can be used to join the structured path or path parts back into the path literal.\n\n## Subcommands:\n\n| name                                     | type    | usage                                                                   |\n|------------------------------------------|---------|-------------------------------------------------------------------------|\n| [`path basename`](path_basename#_)       | Builtin | Get the final component of a path.                                      |\n| [`path dirname`](path_dirname#_)         | Builtin | Get the parent directory of a path.                                     |\n| [`path exists`](path_exists#_)           | Builtin | Check whether a path exists.                                            |\n| [`path expand`](path_expand#_)           | Builtin | Try to expand a path to its absolute form.                              |\n| [`path join`](path_join#_)               | Builtin | Join a structured path or a list of path parts.                         |\n| [`path parse`](path_parse#_)             | Builtin | Convert a path into structured data.                                    |\n| [`path relative-to`](path_relative-to#_) | Builtin | Express a path as relative to another path.                             |\n| [`path split`](path_split#_)             | Builtin | Split a path into a list based on the system's path separator.          |\n| [`path type`](path_type#_)               | Builtin | Get the type of the object a path refers to (e.g., file, dir, symlink). |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path.html](https://www.nushell.sh/commands/docs/path.html)"
- name: path basename
  summary: '> path basename {flags}'
  description: "# `path basename` for path\n\nGet the final component of a path.\n\n## Signature\n\n`> path basename {flags} `\n\n## Flags\n\n- `--replace, -r {string}`: Return original path with basename replaced by this string\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| string         | string         |\n\n## Examples\n\nGet basename of a path\n\n``` shiki\n>'/home/joe/test.txt'|path basename\ntest.txt\n```\n\nGet basename of a list of paths\n\n``` shiki\n> [ /home/joe, /home/doe ] |path basename\n╭───┬─────╮\n│0│joe│\n│1│doe│\n╰───┴─────╯\n```\n\nReplace basename of a path\n\n``` shiki\n>'/home/joe/test.txt'|path basename-r'spam.png'\n/home/joe/spam.png\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path_basename.html](https://www.nushell.sh/commands/docs/path_basename.html)"
- name: path dirname
  summary: '> path dirname {flags}'
  description: "# `path dirname` for path\n\nGet the parent directory of a path.\n\n## Signature\n\n`> path dirname {flags} `\n\n## Flags\n\n- `--replace, -r {string}`: Return original path with dirname replaced by this string\n- `--num-levels, -n {int}`: Number of directories to walk up\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| string         | string         |\n\n## Examples\n\nGet dirname of a path\n\n``` shiki\n>'/home/joe/code/test.txt'|path dirname\n/home/joe/code\n```\n\nGet dirname of a list of paths\n\n``` shiki\n> [ /home/joe/test.txt, /home/doe/test.txt ] |path dirname\n╭───┬───────────╮\n│0│/home/joe│\n│1│/home/doe│\n╰───┴───────────╯\n```\n\nWalk up two levels\n\n``` shiki\n>'/home/joe/code/test.txt'|path dirname-n2\n/home/joe\n```\n\nReplace the part that would be returned with a custom path\n\n``` shiki\n>'/home/joe/code/test.txt'|path dirname-n2-r/home/viking\n/home/viking/code/test.txt\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path_dirname.html](https://www.nushell.sh/commands/docs/path_dirname.html)"
- name: path exists
  summary: '> path exists {flags}'
  description: "# `path exists` for path\n\nCheck whether a path exists.\n\n## Signature\n\n`> path exists {flags} `\n\n## Input/output types:\n\n| input          | output       |\n|----------------|--------------|\n| list\\<string\\> | list\\<bool\\> |\n| string         | bool         |\n\n## Examples\n\nCheck if a file exists\n\n``` shiki\n>'/home/joe/todo.txt'|path exists\nfalse\n```\n\nCheck if files in list exist\n\n``` shiki\n> [ /home/joe/todo.txt, /home/doe/todo.txt ] |path exists\n╭───┬───────╮\n│0│false│\n│1│false│\n╰───┴───────╯\n```\n\n## Notes\n\nThis only checks if it is possible to either `open` or `cd` to the given path. If you need to distinguish dirs and files, please use `path type`.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path_exists.html](https://www.nushell.sh/commands/docs/path_exists.html)"
- name: path expand
  summary: '> path expand {flags}'
  description: "# `path expand` for path\n\nTry to expand a path to its absolute form.\n\n## Signature\n\n`> path expand {flags} `\n\n## Flags\n\n- `--strict, -s`: Throw an error if the path could not be expanded\n- `--no-symlink, -n`: Do not resolve symbolic links\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| string         | string         |\n\n## Examples\n\nExpand an absolute path\n\n``` shiki\n>'/home/joe/foo/../bar'|path expand\n/home/joe/bar\n```\n\nExpand a relative path\n\n``` shiki\n>'foo/../bar'|path expand\n```\n\nExpand a list of paths\n\n``` shiki\n> [ /foo/../bar, /foo/../baz ] |path expand\n╭───┬──────╮\n│0│/bar│\n│1│/baz│\n╰───┴──────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path_expand.html](https://www.nushell.sh/commands/docs/path_expand.html)"
- name: path join
  summary: '> path join {flags} ...rest'
  description: "# `path join` for path\n\nJoin a structured path or a list of path parts.\n\n## Signature\n\n`> path join {flags} ...rest`\n\n## Parameters\n\n- `...rest`: Path to append to the input\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | string         |\n| record         | string         |\n| string         | string         |\n| table          | list\\<string\\> |\n\n## Examples\n\nAppend a filename to a path\n\n``` shiki\n>'/home/viking'|path joinspam.txt\n/home/viking/spam.txt\n```\n\nAppend a filename to a path\n\n``` shiki\n>'/home/viking'|path joinspamsthis_spam.txt\n/home/viking/spams/this_spam.txt\n```\n\nJoin a list of parts into a path\n\n``` shiki\n> [ '/''home''viking''spam.txt' ] |path join\n/home/viking/spam.txt\n```\n\nJoin a structured path into a path\n\n``` shiki\n> { parent:'/home/viking', stem:'spam', extension:'txt' } |path join\n/home/viking/spam.txt\n```\n\nJoin a table of structured paths into a list of paths\n\n``` shiki\n> [[ parentstemextension ]; [ '/home/viking''spam''txt' ]] |path join\n╭───┬───────────────────────╮\n│0│/home/viking/spam.txt│\n╰───┴───────────────────────╯\n```\n\n## Notes\n\nOptionally, append an additional path to the result. It is designed to accept the output of 'path parse' and 'path split' subcommands.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path_join.html](https://www.nushell.sh/commands/docs/path_join.html)"
- name: path parse
  summary: '> path parse {flags}'
  description: "# `path parse` for path\n\nConvert a path into structured data.\n\n## Signature\n\n`> path parse {flags} `\n\n## Flags\n\n- `--extension, -e {string}`: Manually supply the extension (without the dot)\n\n## Input/output types:\n\n| input          | output |\n|----------------|--------|\n| list\\<string\\> | table  |\n| string         | record |\n\n## Examples\n\nParse a path\n\n``` shiki\n>'/home/viking/spam.txt'|path parse\n╭───────────┬──────────────╮\n│parent│/home/viking│\n│stem│spam│\n│extension│txt│\n╰───────────┴──────────────╯\n```\n\nReplace a complex extension\n\n``` shiki\n>'/home/viking/spam.tar.gz'|path parse-etar.gz|upsertextension { 'txt' }\n```\n\nIgnore the extension\n\n``` shiki\n>'/etc/conf.d'|path parse-e''\n╭───────────┬────────╮\n│parent│/etc│\n│stem│conf.d│\n│extension││\n╰───────────┴────────╯\n```\n\nParse all paths in a list\n\n``` shiki\n> [ /home/viking.d/home/spam.txt ] |path parse\n╭───┬────────┬────────┬───────────╮\n│# │ parent │  stem  │ extension │\n├───┼────────┼────────┼───────────┤\n│0│/home│viking│d│\n│1│/home│spam│txt│\n╰───┴────────┴────────┴───────────╯\n```\n\n## Notes\n\nEach path is split into a table with 'parent', 'stem' and 'extension' fields. On Windows, an extra 'prefix' column is added.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path_parse.html](https://www.nushell.sh/commands/docs/path_parse.html)"
- name: path relative-to
  summary: '> path relative-to {flags} (path)'
  description: "# `path relative-to` for path\n\nExpress a path as relative to another path.\n\n## Signature\n\n`> path relative-to {flags} (path)`\n\n## Parameters\n\n- `path`: Parent shared with the input path\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| string         | string         |\n\n## Examples\n\nFind a relative path from two absolute paths\n\n``` shiki\n>'/home/viking'|path relative-to'/home'\nviking\n```\n\nFind a relative path from absolute paths in list\n\n``` shiki\n> [ /home/viking, /home/spam ] |path relative-to'/home'\n╭───┬────────╮\n│0│viking│\n│1│spam│\n╰───┴────────╯\n```\n\nFind a relative path from two relative paths\n\n``` shiki\n>'eggs/bacon/sausage/spam'|path relative-to'eggs/bacon/sausage'\nspam\n```\n\n## Notes\n\nCan be used only when the input and the argument paths are either both absolute or both relative. The argument path needs to be a parent of the input path.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path_relative-to.html](https://www.nushell.sh/commands/docs/path_relative-to.html)"
- name: path split
  summary: '> path split {flags}'
  description: "# `path split` for path\n\nSplit a path into a list based on the system's path separator.\n\n## Signature\n\n`> path split {flags} `\n\n## Input/output types:\n\n| input          | output                 |\n|----------------|------------------------|\n| list\\<string\\> | list\\<list\\<string\\>\\> |\n| string         | list\\<string\\>         |\n\n## Examples\n\nSplit a path into parts\n\n``` shiki\n>'/home/viking/spam.txt'|path split\n╭───┬──────────╮\n│0│/│\n│1│home│\n│2│viking│\n│3│spam.txt│\n╰───┴──────────╯\n```\n\nSplit paths in list into parts\n\n``` shiki\n> [ /home/viking/spam.txt/home/viking/eggs.txt ] |path split\n╭───┬──────────────────╮\n│0│╭───┬──────────╮│\n│││0│/││\n│││1│home││\n│││2│viking││\n│││3│spam.txt││\n││╰───┴──────────╯│\n│1│╭───┬──────────╮│\n│││0│/││\n│││1│home││\n│││2│viking││\n│││3│eggs.txt││\n││╰───┴──────────╯│\n╰───┴──────────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path_split.html](https://www.nushell.sh/commands/docs/path_split.html)"
- name: path type
  summary: '> path type {flags}'
  description: "# `path type` for path\n\nGet the type of the object a path refers to (e.g., file, dir, symlink).\n\n## Signature\n\n`> path type {flags} `\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| string         | string         |\n\n## Examples\n\nShow type of a filepath\n\n``` shiki\n>'.'|path type\ndir\n```\n\nShow type of a filepaths in a list\n\n``` shiki\n>ls|getname|path type\n```\n\n## Notes\n\nThis checks the file system to confirm the path's object type. If nothing is found, an empty string will be returned.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/path_type.html](https://www.nushell.sh/commands/docs/path_type.html)"
- name: Platform
  summary: ''
  description: "# Platform\n\n| Command                                              | Description                                                                                  |\n|------------------------------------------------------|----------------------------------------------------------------------------------------------|\n| [ansi](../docs/ansi#_)                               | Output ANSI codes to change color and style of text.                                         |\n| [ansi gradient](../docs/ansi_gradient#_)             | Add a color gradient (using ANSI color codes) to the given string.                           |\n| [ansi link](../docs/ansi_link#_)                     | Add a link (using OSC 8 escape sequence) to the given string.                                |\n| [ansi strip](../docs/ansi_strip#_)                   | Strip ANSI escape sequences from a string.                                                   |\n| [clear](../docs/clear#_)                             | Clear the terminal.                                                                          |\n| [input](../docs/input#_)                             | Get input from the user.                                                                     |\n| [input list](../docs/input_list#_)                   | Interactive list selection.                                                                  |\n| [input listen](../docs/input_listen#_)               | Listen for user interface event                                                              |\n| [keybindings](../docs/keybindings#_)                 | Keybindings related commands.                                                                |\n| [keybindings default](../docs/keybindings_default#_) | List default keybindings.                                                                    |\n| [keybindings list](../docs/keybindings_list#_)       | List available options that can be used to create keybindings.                               |\n| [keybindings listen](../docs/keybindings_listen#_)   | Get input from the user.                                                                     |\n| [kill](../docs/kill#_)                               | Kill a process using the process id.                                                         |\n| [sleep](../docs/sleep#_)                             | Delay for a specified amount of time.                                                        |\n| [term size](../docs/term_size#_)                     | Returns a record containing the number of columns (width) and rows (height) of the terminal. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/platform.html](https://www.nushell.sh/commands/categories/platform.html)"
- name: port
  summary: '> port {flags} (start) (end)'
  description: "# `port` for network\n\nGet a free port from system.\n\n## Signature\n\n`> port {flags} (start) (end)`\n\n## Parameters\n\n- `start`: The start port to scan (inclusive)\n- `end`: The end port to scan (inclusive)\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | int    |\n\n## Examples\n\nget a free port between 3121 and 4000\n\n``` shiki\n>port31214000\n3121\n```\n\nget a free port from system\n\n``` shiki\n>port\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/port.html](https://www.nushell.sh/commands/docs/port.html)"
- name: prepend
  summary: '> prepend {flags} (row)'
  description: "# `prepend` for filters\n\nPrepend any number of rows to a table.\n\n## Signature\n\n`> prepend {flags} (row)`\n\n## Parameters\n\n- `row`: the row, list, or table to prepend\n\n## Input/output types:\n\n| input | output      |\n|-------|-------------|\n| any   | list\\<any\\> |\n\n## Examples\n\nprepend a list to an item\n\n``` shiki\n>0|prepend [123]\n╭───┬───╮\n│0│1│\n│1│2│\n│2│3│\n│3│0│\n╰───┴───╯\n```\n\nPrepend a list of strings to a string\n\n``` shiki\n>\"a\"|prepend [\"b\"]\n╭───┬───╮\n│0│b│\n│1│a│\n╰───┴───╯\n```\n\nPrepend one integer item\n\n``` shiki\n> [1234] |prepend0\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n│3│3│\n│4│4│\n╰───┴───╯\n```\n\nPrepend two integer items\n\n``` shiki\n> [234] |prepend [01]\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n│3│3│\n│4│4│\n╰───┴───╯\n```\n\nPrepend integers and strings\n\n``` shiki\n> [2nu4shell] |prepend [01rocks]\n╭───┬───────╮\n│0│0│\n│1│1│\n│2│rocks│\n│3│2│\n│4│nu│\n│5│4│\n│6│shell│\n╰───┴───────╯\n```\n\nPrepend a range\n\n``` shiki\n> [34] |prepend0..2\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n│3│3│\n│4│4│\n╰───┴───╯\n```\n\n## Notes\n\nBe aware that this command 'unwraps' lists passed to it. So, if you pass a variable to it, and you want the variable's contents to be prepended without being unwrapped, it's wise to pre-emptively wrap the variable in a list, like so: `prepend [$val]`. This way, `prepend` will only unwrap the outer list, and leave the variable's contents untouched.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/prepend.html](https://www.nushell.sh/commands/docs/prepend.html)"
- name: print
  summary: '> print {flags} ...rest'
  description: "# `print` for strings\n\nPrint the given values to stdout.\n\n## Signature\n\n`> print {flags} ...rest`\n\n## Flags\n\n- `--no-newline, -n`: print without inserting a newline for the line ending\n- `--stderr, -e`: print to stderr instead of stdout\n\n## Parameters\n\n- `...rest`: the values to print\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| any     | nothing |\n| nothing | nothing |\n\n## Examples\n\nPrint 'hello world'\n\n``` shiki\n>print\"hello world\"\n```\n\nPrint the sum of 2 and 3\n\n``` shiki\n>print (2+3)\n```\n\n## Notes\n\nUnlike `echo`, this command does not return any value (`print | describe` will return \"nothing\"). Since this command has no output, there is no point in piping it with other commands.\n\n`print` may be used inside blocks of code (e.g.: hooks) to display text during execution without interfering with the pipeline.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/print.html](https://www.nushell.sh/commands/docs/print.html)"
- name: profile
  summary: '> profile {flags} (closure)'
  description: "# `profile` for debug\n\nProfile each pipeline element in a closure.\n\n## Signature\n\n`> profile {flags} (closure)`\n\n## Flags\n\n- `--source, -`: Collect source code in the report\n- `--values, -`: Collect values in the report\n- `--max-depth, -d {int}`: How many levels of blocks to step into (default: 1)\n\n## Parameters\n\n- `closure`: the closure to run\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | table  |\n\n## Examples\n\nProfile some code, stepping into the `spam` command and collecting source.\n\n``` shiki\n>defspam [] { \"spam\" };profile {|| spam|str length } -d2--source\n```\n\n## Notes\n\nThe command collects run time of every pipeline element, recursively stepping into child closures until a maximum depth. Optionally, it also collects the source code and intermediate values.\n\nCurrent known limitations are:\n\n- profiling data from subexpressions is not tracked\n- it does not step into loop iterations\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/profile.html](https://www.nushell.sh/commands/docs/profile.html)"
- name: Prompt
  summary: ''
  description: "# Prompt\n\n| Command                  | Description                  |\n|--------------------------|------------------------------|\n| [gstat](../docs/gstat#_) | Get the git status of a repo |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/prompt.html](https://www.nushell.sh/commands/categories/prompt.html)"
- name: ps
  summary: '> ps {flags}'
  description: "# `ps` for system\n\nView information about system processes.\n\n## Signature\n\n`> ps {flags} `\n\n## Flags\n\n- `--long, -l`: list all available columns for each entry\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nList the system processes\n\n``` shiki\n>ps\n```\n\nList the top 5 system processes with the highest memory usage\n\n``` shiki\n>ps|sort-bymem|last5\n```\n\nList the top 3 system processes with the highest CPU usage\n\n``` shiki\n>ps|sort-bycpu|last3\n```\n\nList the system processes with 'nu' in their names\n\n``` shiki\n>ps|wherename=~'nu'\n```\n\nGet the parent process id of the current nu process\n\n``` shiki\n>ps|wherepid==$nu.pid|getppid\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/ps.html](https://www.nushell.sh/commands/docs/ps.html)"
- name: query
  summary: '> query'
  description: "# `query` for filters\n\nShow all the query commands\n\n## Signature\n\n`> query `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Subcommands:\n\n| name                         | type           | usage                                                |\n|------------------------------|----------------|------------------------------------------------------|\n| [`query db`](query_db#_)     | Builtin        | Query a database using SQL.                          |\n| [`query json`](query_json#_) | Builtin,Plugin | execute json query on json file (open --raw \\<file\\> |\n| [`query web`](query_web#_)   | Builtin,Plugin | execute selector query on html/web                   |\n| [`query xml`](query_xml#_)   | Builtin,Plugin | execute xpath query on xml                           |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/query.html](https://www.nushell.sh/commands/docs/query.html)"
- name: query db
  summary: '> query db {flags} (SQL)'
  description: "# `query db` for database\n\nQuery a database using SQL.\n\n## Signature\n\n`> query db {flags} (SQL)`\n\n## Parameters\n\n- `SQL`: SQL to execute against the database\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nExecute SQL against a SQLite database\n\n``` shiki\n>openfoo.db|query db\"SELECT * FROM Bar\"\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/query_db.html](https://www.nushell.sh/commands/docs/query_db.html)"
- name: query json
  summary: '> query json (query)'
  description: "# `query json` for filters\n\nexecute json query on json file (open --raw \\<file\\> \\| query json 'query string')\n\n## Signature\n\n`> query json (query)`\n\n## Parameters\n\n- `query`: json query\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/query_json.html](https://www.nushell.sh/commands/docs/query_json.html)"
- name: query web
  summary: '> query web --query --as-html --attribute --as-table --inspect'
  description: "# `query web` for network\n\nexecute selector query on html/web\n\n## Signature\n\n`> query web --query --as-html --attribute --as-table --inspect`\n\n## Parameters\n\n- `--query {string}`: selector query\n- `--as-html` `(-m)`: return the query output as html\n- `--attribute {string}`: downselect based on the given attribute\n- `--as-table {table}`: find table based on column header list\n- `--inspect` `(-i)`: run in inspect mode to provide more information for determining column headers\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nRetrieve all `<header>` elements from phoronix.com website\n\n``` shiki\n>http gethttps://phoronix.com|query web-q'header'\n```\n\nRetrieve a html table from Wikipedia and parse it into a nushell table using table headers as guides\n\n``` shiki\n>http gethttps://en.wikipedia.org/wiki/List_of_cities_in_India_by_population\n|query web-t [RankCity'Population(2011)[3]''Population(2001)[3][a]''State or union territory']\n```\n\nPass multiple css selectors to extract several elements within single query, group the query results together and rotate them to create a table\n\n``` shiki\n>http gethttps://www.nushell.sh|query web-q'h2, h2 + p'|group2|each {rotate--ccwtaglinedescription} |flatten\n```\n\nRetrieve a specific html attribute instead of the default text\n\n``` shiki\n>http gethttps://example.org|query web--querya--attributehref\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/query_web.html](https://www.nushell.sh/commands/docs/query_web.html)"
- name: query xml
  summary: '> query xml (query)'
  description: "# `query xml` for filters\n\nexecute xpath query on xml\n\n## Signature\n\n`> query xml (query)`\n\n## Parameters\n\n- `query`: xpath query\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/query_xml.html](https://www.nushell.sh/commands/docs/query_xml.html)"
- name: Random
  summary: ''
  description: "# Random\n\n| Command                                    | Description                                                      |\n|--------------------------------------------|------------------------------------------------------------------|\n| [random](../docs/random#_)                 | Generate a random value.                                         |\n| [random bool](../docs/random_bool#_)       | Generate a random boolean value.                                 |\n| [random chars](../docs/random_chars#_)     | Generate random chars.                                           |\n| [random decimal](../docs/random_decimal#_) | deprecated: Generate a random float within a range \\[min..max\\]. |\n| [random dice](../docs/random_dice#_)       | Generate a random dice roll.                                     |\n| [random float](../docs/random_float#_)     | Generate a random float within a range \\[min..max\\].             |\n| [random integer](../docs/random_integer#_) | Generate a random integer \\[min..max\\].                          |\n| [random uuid](../docs/random_uuid#_)       | Generate a random uuid4 string.                                  |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/random.html](https://www.nushell.sh/commands/categories/random.html)"
- name: random
  summary: '> random {flags}'
  description: "# `random` for random\n\nGenerate a random value.\n\n## Signature\n\n`> random {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                                 | type    | usage                                                            |\n|--------------------------------------|---------|------------------------------------------------------------------|\n| [`random bool`](random_bool#_)       | Builtin | Generate a random boolean value.                                 |\n| [`random chars`](random_chars#_)     | Builtin | Generate random chars.                                           |\n| [`random decimal`](random_decimal#_) | Builtin | deprecated: Generate a random float within a range \\[min..max\\]. |\n| [`random dice`](random_dice#_)       | Builtin | Generate a random dice roll.                                     |\n| [`random float`](random_float#_)     | Builtin | Generate a random float within a range \\[min..max\\].             |\n| [`random integer`](random_integer#_) | Builtin | Generate a random integer \\[min..max\\].                          |\n| [`random uuid`](random_uuid#_)       | Builtin | Generate a random uuid4 string.                                  |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/random.html](https://www.nushell.sh/commands/docs/random.html)"
- name: random bool
  summary: '> random bool {flags}'
  description: "# `random bool` for random\n\nGenerate a random boolean value.\n\n## Signature\n\n`> random bool {flags} `\n\n## Flags\n\n- `--bias, -b {number}`: Adjusts the probability of a \"true\" outcome\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | bool   |\n\n## Examples\n\nGenerate a random boolean value\n\n``` shiki\n>random bool\n```\n\nGenerate a random boolean value with a 75% chance of \"true\"\n\n``` shiki\n>random bool--bias0.75\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/random_bool.html](https://www.nushell.sh/commands/docs/random_bool.html)"
- name: random chars
  summary: '> random chars {flags}'
  description: "# `random chars` for random\n\nGenerate random chars.\n\n## Signature\n\n`> random chars {flags} `\n\n## Flags\n\n- `--length, -l {int}`: Number of chars\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nGenerate random chars\n\n``` shiki\n>random chars\n```\n\nGenerate random chars with specified length\n\n``` shiki\n>random chars-l20\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/random_chars.html](https://www.nushell.sh/commands/docs/random_chars.html)"
- name: random decimal
  summary: '> random decimal {flags} (range)'
  description: "# `random decimal` for random\n\ndeprecated: Generate a random float within a range \\[min..max\\].\n\n## Signature\n\n`> random decimal {flags} (range)`\n\n## Parameters\n\n- `range`: Range of values\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | number |\n\n## Examples\n\nGenerate a default float value between 0 and 1\n\n``` shiki\n>random decimal\n```\n\nGenerate a random float less than or equal to 500\n\n``` shiki\n>random decimal..500\n```\n\nGenerate a random float greater than or equal to 100000\n\n``` shiki\n>random decimal100000..\n```\n\nGenerate a random float between 1.0 and 1.1\n\n``` shiki\n>random decimal1.0..1.1\n```\n\n## Notes\n\nUse `random float` instead\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/random_decimal.html](https://www.nushell.sh/commands/docs/random_decimal.html)"
- name: random dice
  summary: '> random dice {flags}'
  description: "# `random dice` for random\n\nGenerate a random dice roll.\n\n## Signature\n\n`> random dice {flags} `\n\n## Flags\n\n- `--dice, -d {int}`: The amount of dice being rolled\n- `--sides, -s {int}`: The amount of sides a die has\n\n## Input/output types:\n\n| input   | output      |\n|---------|-------------|\n| nothing | list\\<any\\> |\n\n## Examples\n\nRoll 1 dice with 6 sides each\n\n``` shiki\n>random dice\n```\n\nRoll 10 dice with 12 sides each\n\n``` shiki\n>random dice-d10-s12\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/random_dice.html](https://www.nushell.sh/commands/docs/random_dice.html)"
- name: random float
  summary: '> random float {flags} (range)'
  description: "# `random float` for random\n\nGenerate a random float within a range \\[min..max\\].\n\n## Signature\n\n`> random float {flags} (range)`\n\n## Parameters\n\n- `range`: Range of values\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | number |\n\n## Examples\n\nGenerate a default float value between 0 and 1\n\n``` shiki\n>random float\n```\n\nGenerate a random float less than or equal to 500\n\n``` shiki\n>random float..500\n```\n\nGenerate a random float greater than or equal to 100000\n\n``` shiki\n>random float100000..\n```\n\nGenerate a random float between 1.0 and 1.1\n\n``` shiki\n>random float1.0..1.1\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/random_float.html](https://www.nushell.sh/commands/docs/random_float.html)"
- name: random integer
  summary: '> random integer {flags} (range)'
  description: "# `random integer` for random\n\nGenerate a random integer \\[min..max\\].\n\n## Signature\n\n`> random integer {flags} (range)`\n\n## Parameters\n\n- `range`: Range of values\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | int    |\n\n## Examples\n\nGenerate an unconstrained random integer\n\n``` shiki\n>random integer\n```\n\nGenerate a random integer less than or equal to 500\n\n``` shiki\n>random integer..500\n```\n\nGenerate a random integer greater than or equal to 100000\n\n``` shiki\n>random integer100000..\n```\n\nGenerate a random integer between 1 and 10\n\n``` shiki\n>random integer1..10\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/random_integer.html](https://www.nushell.sh/commands/docs/random_integer.html)"
- name: random uuid
  summary: '> random uuid {flags}'
  description: "# `random uuid` for random\n\nGenerate a random uuid4 string.\n\n## Signature\n\n`> random uuid {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nGenerate a random uuid4 string\n\n``` shiki\n>random uuid\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/random_uuid.html](https://www.nushell.sh/commands/docs/random_uuid.html)"
- name: range
  summary: '> range {flags} (rows)'
  description: "# `range` for filters\n\nReturn only the selected rows.\n\n## Signature\n\n`> range {flags} (rows)`\n\n## Parameters\n\n- `rows`: range of rows to return: Eg) 4..7 (=\\> from 4 to 7)\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n\n## Examples\n\nGet the last 2 items\n\n``` shiki\n> [0,1,2,3,4,5] |range4..5\n╭───┬───╮\n│0│4│\n│1│5│\n╰───┴───╯\n```\n\nGet the last 2 items\n\n``` shiki\n> [0,1,2,3,4,5] |range (-2)..\n╭───┬───╮\n│0│4│\n│1│5│\n╰───┴───╯\n```\n\nGet the next to last 2 items\n\n``` shiki\n> [0,1,2,3,4,5] |range (-3)..-2\n╭───┬───╮\n│0│3│\n│1│4│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/range.html](https://www.nushell.sh/commands/docs/range.html)"
- name: reduce
  summary: '> reduce {flags} (closure)'
  description: "# `reduce` for filters\n\nAggregate a list to a single value using an accumulator closure.\n\n## Signature\n\n`> reduce {flags} (closure)`\n\n## Flags\n\n- `--fold, -f {any}`: reduce with initial value\n\n## Parameters\n\n- `closure`: reducing function\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | any    |\n| range       | any    |\n| table       | any    |\n\n## Examples\n\nSum values of a list (same as 'math sum')\n\n``` shiki\n> [ 1234 ] |reduce {|it, acc| $it+$acc }\n10\n```\n\nSum values of a list, plus their indexes\n\n``` shiki\n> [ 876 ] |enumerate|reduce-f0 {|it, acc| $acc+$it.item+$it.index }\n24\n```\n\nSum values with a starting value (fold)\n\n``` shiki\n> [ 1234 ] |reduce-f10 {|it, acc| $acc+$it }\n20\n```\n\nReplace selected characters in a string with 'X'\n\n``` shiki\n> [ iot ] |reduce-f\"Arthur, King of the Britons\" {|it, acc| $acc|str replace-a$it\"X\" }\nArXhur, KXngXfXheBrXXXns\n```\n\nAdd ascending numbers to each of the filenames, and join with semicolons.\n\n``` shiki\n> ['foo.gz', 'bar.gz', 'baz.gz'] |enumerate|reduce-f'' {|strall| $\"($all)(if$str.index!=0 {'; '})($str.index+1)-($str.item)\" }\n1-foo.gz;2-bar.gz;3-baz.gz\n```\n\nConcatenate a string with itself, using a range to determine the number of times.\n\n``` shiki\n>lets=\"Str\";0..2|reduce-f'' {|it, acc| $acc+$s}\nStrStrStr\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/reduce.html](https://www.nushell.sh/commands/docs/reduce.html)"
- name: register
  summary: '> register {flags} (plugin) (signature)'
  description: "# `register` for core\n\nRegister a plugin.\n\n## Signature\n\n`> register {flags} (plugin) (signature)`\n\n## Flags\n\n- `--shell, -s {path}`: path of shell used to run plugin (cmd, sh, python, etc)\n\n## Parameters\n\n- `plugin`: path of executable for plugin\n- `signature`: Block with signature description as json object\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nRegister `nu_plugin_query` plugin from ~/.cargo/bin/ dir\n\n``` shiki\n>register~/.cargo/bin/nu_plugin_query\n```\n\nRegister `nu_plugin_query` plugin from `nu -c` (writes/updates \\$nu.plugin-path)\n\n``` shiki\n>letplugin= ((whichnu).path.0|path dirname|path join'nu_plugin_query');nu-c$'register ($plugin); version'\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/register.html](https://www.nushell.sh/commands/docs/register.html)"
- name: registry query
  summary: '> registry query (key) (value) --hkcr --hkcu --hklm --hku --hkpd --hkpt --hkpnls --hkcc --hkdd --hkculs'
  description: "# `registry query` for system\n\nQuery the Windows registry.\n\n## Signature\n\n`> registry query (key) (value) --hkcr --hkcu --hklm --hku --hkpd --hkpt --hkpnls --hkcc --hkdd --hkculs`\n\n## Parameters\n\n- `key`: registry key to query\n- `value`: optionally supply a registry value to query\n- `--hkcr` `(-)`: query the hkey_classes_root hive\n- `--hkcu` `(-)`: query the hkey_current_user hive\n- `--hklm` `(-)`: query the hkey_local_machine hive\n- `--hku` `(-)`: query the hkey_users hive\n- `--hkpd` `(-)`: query the hkey_performance_data hive\n- `--hkpt` `(-)`: query the hkey_performance_text hive\n- `--hkpnls` `(-)`: query the hkey_performance_nls_text hive\n- `--hkcc` `(-)`: query the hkey_current_config hive\n- `--hkdd` `(-)`: query the hkey_dyn_data hive\n- `--hkculs` `(-)`: query the hkey_current_user_local_settings hive\n\n## Notes\n\nCurrently supported only on Windows systems.\n\n## Examples\n\nQuery the HKEY_CURRENT_USER hive\n\n``` shiki\n>registry query--hkcuenvironment\n```\n\nQuery the HKEY_LOCAL_MACHINE hive\n\n``` shiki\n>registry query--hklm'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment'\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/registry_query.html](https://www.nushell.sh/commands/docs/registry_query.html)"
- name: reject
  summary: '> reject {flags} ...rest'
  description: "# `reject` for filters\n\nRemove the given columns or rows from the table. Opposite of \\`select\\`.\n\n## Signature\n\n`> reject {flags} ...rest`\n\n## Parameters\n\n- `...rest`: the names of columns to remove from the table\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| table  | table  |\n\n## Examples\n\nReject a column in the `ls` table\n\n``` shiki\n>ls|rejectmodified\n```\n\nReject a column in a table\n\n``` shiki\n> [[a, b]; [1, 2]] |rejecta\n╭───┬───╮\n│# │ b │\n├───┼───┤\n│0│2│\n╰───┴───╯\n```\n\nReject a row in a table\n\n``` shiki\n> [[a, b]; [1, 2] [3, 4]] |reject1\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n╰───┴───┴───╯\n```\n\nReject the specified field in a record\n\n``` shiki\n> {a:1, b:2} |rejecta\n╭───┬───╮\n│b│2│\n╰───┴───╯\n```\n\nReject a nested field in a record\n\n``` shiki\n> {a: {b:3, c:5}} |rejecta.b\n╭───┬───────────╮\n││╭───┬───╮│\n│a││c│5││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nReject columns by a provided list of columns\n\n``` shiki\n>letcols= [sizetype];[[nametypesize]; [Cargo.tomltoml1kb] [Cargo.locktoml2kb]] |reject$cols\n```\n\nReject rows by a provided list of rows\n\n``` shiki\n>letrows= [02];[[nametypesize]; [Cargo.tomltoml1kb] [Cargo.locktoml2kb] [file.jsonjson3kb]] |reject$rows\n```\n\n## Notes\n\nTo remove a quantity of rows or columns, use `skip`, `drop`, or `drop column`.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/reject.html](https://www.nushell.sh/commands/docs/reject.html)"
- name: Removed
  summary: ''
  description: "# Removed\n\n| Command                              | Description                                                              |\n|--------------------------------------|--------------------------------------------------------------------------|\n| [date format](../docs/date_format#_) | Removed command: use \\`format date\\` instead                             |\n| [let-env](../docs/let-env#_)         | \\`let-env FOO = ...\\` has been removed, use \\`\\$env.FOO = ...\\` instead. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/removed.html](https://www.nushell.sh/commands/categories/removed.html)"
- name: rename
  summary: '> rename {flags} ...rest'
  description: "# `rename` for filters\n\nCreates a new table with columns renamed.\n\n## Signature\n\n`> rename {flags} ...rest`\n\n## Flags\n\n- `--column, -c {list<string>}`: column name to be changed\n- `--block, -b {closure(any)}`: A closure to apply changes on each column\n\n## Parameters\n\n- `...rest`: the new names for the columns\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| table  | table  |\n\n## Examples\n\nRename a column\n\n``` shiki\n> [[a, b]; [1, 2]] |renamemy_column\n╭───┬───────────┬───╮\n│# │ my_column │ b │\n├───┼───────────┼───┤\n│0│1│2│\n╰───┴───────────┴───╯\n```\n\nRename many columns\n\n``` shiki\n> [[a, b, c]; [1, 2, 3]] |renameeggshambacon\n╭───┬──────┬─────┬───────╮\n│# │ eggs │ ham │ bacon │\n├───┼──────┼─────┼───────┤\n│0│1│2│3│\n╰───┴──────┴─────┴───────╯\n```\n\nRename a specific column\n\n``` shiki\n> [[a, b, c]; [1, 2, 3]] |rename-c [aham]\n╭───┬─────┬───┬───╮\n│# │ ham │ b │ c │\n├───┼─────┼───┼───┤\n│0│1│2│3│\n╰───┴─────┴───┴───╯\n```\n\nRename the fields of a record\n\n``` shiki\n> {a:1b:2} |renamexy\n╭───┬───╮\n│x│1│\n│y│2│\n╰───┴───╯\n```\n\nRename fields based on a given closure\n\n``` shiki\n> {abc:1, bbc:2} |rename-b {str replace-a'b''z'}\n╭─────┬───╮\n│azc│1│\n│zzc│2│\n╰─────┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/rename.html](https://www.nushell.sh/commands/docs/rename.html)"
- name: return
  summary: '> return {flags} (return_value)'
  description: "# `return` for core\n\nReturn early from a function.\n\n## Signature\n\n`> return {flags} (return_value)`\n\n## Parameters\n\n- `return_value`: optional value to return\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nReturn early\n\n``` shiki\n>deffoo [] { return }\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/return.html](https://www.nushell.sh/commands/docs/return.html)"
- name: reverse
  summary: '> reverse {flags}'
  description: "# `reverse` for filters\n\nReverses the input list or table.\n\n## Signature\n\n`> reverse {flags} `\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nReverse a list\n\n``` shiki\n> [0,1,2,3] |reverse\n╭───┬───╮\n│0│3│\n│1│2│\n│2│1│\n│3│0│\n╰───┴───╯\n```\n\nReverse a table\n\n``` shiki\n> [{a:1} {a:2}] |reverse\n╭───┬───╮\n│# │ a │\n├───┼───┤\n│0│2│\n│1│1│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/reverse.html](https://www.nushell.sh/commands/docs/reverse.html)"
- name: rm
  summary: '> rm {flags} (filename) ...rest'
  description: "# `rm` for filesystem\n\nRemove files and directories.\n\n## Signature\n\n`> rm {flags} (filename) ...rest`\n\n## Flags\n\n- `--trash, -t`: move to the platform's trash instead of permanently deleting. not used on android and ios\n- `--permanent, -p`: delete permanently, ignoring the 'always_trash' config option. always enabled on android and ios\n- `--recursive, -r`: delete subdirectories recursively\n- `--force, -f`: suppress error when no file\n- `--verbose, -v`: print names of deleted files\n- `--interactive, -i`: ask user to confirm action\n- `--interactive-once, -I`: ask user to confirm action only once\n\n## Parameters\n\n- `filename`: the path of the file you want to remove\n- `...rest`: additional file path(s) to remove\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nDelete, or move a file to the trash (based on the 'always_trash' config option)\n\n``` shiki\n>rmfile.txt\n```\n\nMove a file to the trash\n\n``` shiki\n>rm--trashfile.txt\n```\n\nDelete a file permanently, even if the 'always_trash' config option is true\n\n``` shiki\n>rm--permanentfile.txt\n```\n\nDelete a file, ignoring 'file not found' errors\n\n``` shiki\n>rm--forcefile.txt\n```\n\nDelete all 0KB files in the current directory\n\n``` shiki\n>ls|wheresize==0KBandtype==file|each { rm$in.name } |null\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/rm.html](https://www.nushell.sh/commands/docs/rm.html)"
- name: roll
  summary: '> roll {flags}'
  description: "# `roll` for filters\n\nRolling commands for tables.\n\n## Signature\n\n`> roll {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                         | type    | usage                              |\n|------------------------------|---------|------------------------------------|\n| [`roll down`](roll_down#_)   | Builtin | Roll table rows down.              |\n| [`roll left`](roll_left#_)   | Builtin | Roll record or table columns left. |\n| [`roll right`](roll_right#_) | Builtin | Roll table columns right.          |\n| [`roll up`](roll_up#_)       | Builtin | Roll table rows up.                |\n\n**Tips:** Command `roll` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/roll.html](https://www.nushell.sh/commands/docs/roll.html)"
- name: roll down
  summary: '> roll down {flags}'
  description: "# `roll down` for filters\n\nRoll table rows down.\n\n## Signature\n\n`> roll down {flags} `\n\n## Flags\n\n- `--by, -b {int}`: Number of rows to roll\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| table | table  |\n\n## Examples\n\nRolls rows down of a table\n\n``` shiki\n> [[ab]; [12] [34] [56]] |roll down\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│5│6│\n│1│1│2│\n│2│3│4│\n╰───┴───┴───╯\n```\n\n**Tips:** Command `roll down` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/roll_down.html](https://www.nushell.sh/commands/docs/roll_down.html)"
- name: roll left
  summary: '> roll left {flags}'
  description: "# `roll left` for filters\n\nRoll record or table columns left.\n\n## Signature\n\n`> roll left {flags} `\n\n## Flags\n\n- `--by, -b {int}`: Number of columns to roll\n- `--cells-only, -c`: rotates columns leaving headers fixed\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| table  | table  |\n\n## Examples\n\nRolls columns of a record to the left\n\n``` shiki\n> {a:1b:2c:3} |roll left\n╭───┬───╮\n│b│2│\n│c│3│\n│a│1│\n╰───┴───╯\n```\n\nRolls columns of a table to the left\n\n``` shiki\n> [[abc]; [123] [456]] |roll left\n╭───┬───┬───┬───╮\n│# │ b │ c │ a │\n├───┼───┼───┼───┤\n│0│2│3│1│\n│1│5│6│4│\n╰───┴───┴───┴───╯\n```\n\nRolls columns to the left without changing column names\n\n``` shiki\n> [[abc]; [123] [456]] |roll left--cells-only\n╭───┬───┬───┬───╮\n│# │ a │ b │ c │\n├───┼───┼───┼───┤\n│0│2│3│1│\n│1│5│6│4│\n╰───┴───┴───┴───╯\n```\n\n**Tips:** Command `roll left` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/roll_left.html](https://www.nushell.sh/commands/docs/roll_left.html)"
- name: roll right
  summary: '> roll right {flags}'
  description: "# `roll right` for filters\n\nRoll table columns right.\n\n## Signature\n\n`> roll right {flags} `\n\n## Flags\n\n- `--by, -b {int}`: Number of columns to roll\n- `--cells-only, -c`: rotates columns leaving headers fixed\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| table  | table  |\n\n## Examples\n\nRolls columns of a record to the right\n\n``` shiki\n> {a:1b:2c:3} |roll right\n╭───┬───╮\n│c│3│\n│a│1│\n│b│2│\n╰───┴───╯\n```\n\nRolls columns to the right\n\n``` shiki\n> [[abc]; [123] [456]] |roll right\n╭───┬───┬───┬───╮\n│# │ c │ a │ b │\n├───┼───┼───┼───┤\n│0│3│1│2│\n│1│6│4│5│\n╰───┴───┴───┴───╯\n```\n\nRolls columns to the right with fixed headers\n\n``` shiki\n> [[abc]; [123] [456]] |roll right--cells-only\n╭───┬───┬───┬───╮\n│# │ a │ b │ c │\n├───┼───┼───┼───┤\n│0│3│1│2│\n│1│6│4│5│\n╰───┴───┴───┴───╯\n```\n\n**Tips:** Command `roll right` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/roll_right.html](https://www.nushell.sh/commands/docs/roll_right.html)"
- name: roll up
  summary: '> roll up {flags}'
  description: "# `roll up` for filters\n\nRoll table rows up.\n\n## Signature\n\n`> roll up {flags} `\n\n## Flags\n\n- `--by, -b {int}`: Number of rows to roll\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| table | table  |\n\n## Examples\n\nRolls rows up\n\n``` shiki\n> [[ab]; [12] [34] [56]] |roll up\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│3│4│\n│1│5│6│\n│2│1│2│\n╰───┴───┴───╯\n```\n\n**Tips:** Command `roll up` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/roll_up.html](https://www.nushell.sh/commands/docs/roll_up.html)"
- name: rotate
  summary: '> rotate {flags} ...rest'
  description: "# `rotate` for filters\n\nRotates a table or record clockwise (default) or counter-clockwise (use --ccw flag).\n\n## Signature\n\n`> rotate {flags} ...rest`\n\n## Flags\n\n- `--ccw, -`: rotate counter clockwise\n\n## Parameters\n\n- `...rest`: the names to give columns once rotated\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | table  |\n| table  | table  |\n\n## Examples\n\nRotate a record clockwise, producing a table (like `transpose` but with column order reversed)\n\n``` shiki\n> {a:1, b:2} |rotate\n╭───┬─────────┬─────────╮\n│# │ column0 │ column1 │\n├───┼─────────┼─────────┤\n│0│1│a│\n│1│2│b│\n╰───┴─────────┴─────────╯\n```\n\nRotate 2x3 table clockwise\n\n``` shiki\n> [[ab]; [12] [34] [56]] |rotate\n╭───┬─────────┬─────────┬─────────┬─────────╮\n│# │ column0 │ column1 │ column2 │ column3 │\n├───┼─────────┼─────────┼─────────┼─────────┤\n│0│5│3│1│a│\n│1│6│4│2│b│\n╰───┴─────────┴─────────┴─────────┴─────────╯\n```\n\nRotate table clockwise and change columns names\n\n``` shiki\n> [[ab]; [12]] |rotatecol_acol_b\n╭───┬───────┬───────╮\n│# │ col_a │ col_b │\n├───┼───────┼───────┤\n│0│1│a│\n│1│2│b│\n╰───┴───────┴───────╯\n```\n\nRotate table counter clockwise\n\n``` shiki\n> [[ab]; [12]] |rotate--ccw\n╭───┬─────────┬─────────╮\n│# │ column0 │ column1 │\n├───┼─────────┼─────────┤\n│0│b│2│\n│1│a│1│\n╰───┴─────────┴─────────╯\n```\n\nRotate table counter-clockwise\n\n``` shiki\n> [[ab]; [12] [34] [56]] |rotate--ccw\n╭───┬─────────┬─────────┬─────────┬─────────╮\n│# │ column0 │ column1 │ column2 │ column3 │\n├───┼─────────┼─────────┼─────────┼─────────┤\n│0│b│2│4│6│\n│1│a│1│3│5│\n╰───┴─────────┴─────────┴─────────┴─────────╯\n```\n\nRotate table counter-clockwise and change columns names\n\n``` shiki\n> [[ab]; [12]] |rotate--ccwcol_acol_b\n╭───┬───────┬───────╮\n│# │ col_a │ col_b │\n├───┼───────┼───────┤\n│0│b│2│\n│1│a│1│\n╰───┴───────┴───────╯\n```\n\n**Tips:** Command `rotate` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/rotate.html](https://www.nushell.sh/commands/docs/rotate.html)"
- name: run-external
  summary: '> run-external {flags} (command) ...rest'
  description: "# `run-external` for system\n\nRuns external command.\n\n## Signature\n\n`> run-external {flags} (command) ...rest`\n\n## Flags\n\n- `--redirect-stdout, -`: redirect stdout to the pipeline\n- `--redirect-stderr, -`: redirect stderr to the pipeline\n- `--redirect-combine, -`: redirect both stdout and stderr combined to the pipeline (collected in stdout)\n- `--trim-end-newline, -`: trimming end newlines\n\n## Parameters\n\n- `command`: external command to run\n- `...rest`: arguments for external command\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nRun an external command\n\n``` shiki\n>run-external\"echo\"\"-n\"\"hello\"\n```\n\nRedirect stdout from an external command into the pipeline\n\n``` shiki\n>run-external--redirect-stdout\"echo\"\"-n\"\"hello\"|split chars\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/run-external.html](https://www.nushell.sh/commands/docs/run-external.html)"
- name: save
  summary: '> save {flags} (filename)'
  description: "# `save` for filesystem\n\nSave a file.\n\n## Signature\n\n`> save {flags} (filename)`\n\n## Flags\n\n- `--stderr, -e {path}`: the filename used to save stderr, only works with `-r` flag\n- `--raw, -r`: save file as raw binary\n- `--append, -a`: append input to the end of the file\n- `--force, -f`: overwrite the destination\n- `--progress, -p`: enable progress bar\n\n## Parameters\n\n- `filename`: the filename to use\n\n## Input/output types:\n\n| input | output  |\n|-------|---------|\n| any   | nothing |\n\n## Examples\n\nSave a string to foo.txt in the current directory\n\n``` shiki\n>'save me'|savefoo.txt\n```\n\nAppend a string to the end of foo.txt\n\n``` shiki\n>'append me'|save--appendfoo.txt\n```\n\nSave a record to foo.json in the current directory\n\n``` shiki\n> { a:1, b:2 } |savefoo.json\n```\n\nSave a running program's stderr to foo.txt\n\n``` shiki\n>do-i {} |savefoo.txt--stderrfoo.txt\n```\n\nSave a running program's stderr to separate file\n\n``` shiki\n>do-i {} |savefoo.txt--stderrbar.txt\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/save.html](https://www.nushell.sh/commands/docs/save.html)"
- name: schema
  summary: '> schema {flags}'
  description: "# `schema` for database\n\nShow the schema of a SQLite database.\n\n## Signature\n\n`> schema {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nShow the schema of a SQLite database\n\n``` shiki\n>openfoo.db|schema\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/schema.html](https://www.nushell.sh/commands/docs/schema.html)"
- name: scope
  summary: '> scope {flags}'
  description: "# `scope` for core\n\nCommands for getting info about what is in scope.\n\n## Signature\n\n`> scope {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Subcommands:\n\n| name                                         | type    | usage                                                    |\n|----------------------------------------------|---------|----------------------------------------------------------|\n| [`scope aliases`](scope_aliases#_)           | Builtin | Output info on the aliases in the current scope.         |\n| [`scope commands`](scope_commands#_)         | Builtin | Output info on the commands in the current scope.        |\n| [`scope engine-stats`](scope_engine-stats#_) | Builtin | Output stats on the engine in the current state.         |\n| [`scope externs`](scope_externs#_)           | Builtin | Output info on the known externals in the current scope. |\n| [`scope modules`](scope_modules#_)           | Builtin | Output info on the modules in the current scope.         |\n| [`scope variables`](scope_variables#_)       | Builtin | Output info on the variables in the current scope.       |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/scope.html](https://www.nushell.sh/commands/docs/scope.html)"
- name: scope aliases
  summary: '> scope aliases {flags}'
  description: "# `scope aliases` for filters\n\nOutput info on the aliases in the current scope.\n\n## Signature\n\n`> scope aliases {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nShow the aliases in the current scope\n\n``` shiki\n>scope aliases\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/scope_aliases.html](https://www.nushell.sh/commands/docs/scope_aliases.html)"
- name: scope commands
  summary: '> scope commands {flags}'
  description: "# `scope commands` for filters\n\nOutput info on the commands in the current scope.\n\n## Signature\n\n`> scope commands {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nShow the commands in the current scope\n\n``` shiki\n>scope commands\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/scope_commands.html](https://www.nushell.sh/commands/docs/scope_commands.html)"
- name: scope engine-stats
  summary: '> scope engine-stats {flags}'
  description: "# `scope engine-stats` for filters\n\nOutput stats on the engine in the current state.\n\n## Signature\n\n`> scope engine-stats {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nShow the stats on the current engine state\n\n``` shiki\n>scope engine-stats\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/scope_engine-stats.html](https://www.nushell.sh/commands/docs/scope_engine-stats.html)"
- name: scope externs
  summary: '> scope externs {flags}'
  description: "# `scope externs` for filters\n\nOutput info on the known externals in the current scope.\n\n## Signature\n\n`> scope externs {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nShow the known externals in the current scope\n\n``` shiki\n>scope externs\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/scope_externs.html](https://www.nushell.sh/commands/docs/scope_externs.html)"
- name: scope modules
  summary: '> scope modules {flags}'
  description: "# `scope modules` for filters\n\nOutput info on the modules in the current scope.\n\n## Signature\n\n`> scope modules {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nShow the modules in the current scope\n\n``` shiki\n>scope modules\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/scope_modules.html](https://www.nushell.sh/commands/docs/scope_modules.html)"
- name: scope variables
  summary: '> scope variables {flags}'
  description: "# `scope variables` for filters\n\nOutput info on the variables in the current scope.\n\n## Signature\n\n`> scope variables {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n\n## Examples\n\nShow the variables in the current scope\n\n``` shiki\n>scope variables\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/scope_variables.html](https://www.nushell.sh/commands/docs/scope_variables.html)"
- name: select
  summary: '> select {flags} ...rest'
  description: "# `select` for filters\n\nSelect only these columns or rows from the input. Opposite of \\`reject\\`.\n\n## Signature\n\n`> select {flags} ...rest`\n\n## Flags\n\n- `--ignore-errors, -i`: ignore missing data (make all cell path members optional)\n\n## Parameters\n\n- `...rest`: the columns to select from the table\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | any    |\n| record      | record |\n| table       | table  |\n\n## Examples\n\nSelect a column in a table\n\n``` shiki\n> [{a:ab:b}] |selecta\n╭───┬───╮\n│# │ a │\n├───┼───┤\n│0│a│\n╰───┴───╯\n```\n\nSelect a field in a record\n\n``` shiki\n> {a:ab:b} |selecta\n╭───┬───╮\n│a│a│\n╰───┴───╯\n```\n\nSelect just the `name` column\n\n``` shiki\n>ls|selectname\n```\n\nSelect the first four rows (this is the same as `first 4`)\n\n``` shiki\n>ls|select0123\n```\n\nSelect columns by a provided list of columns\n\n``` shiki\n>letcols= [nametype];[[nametypesize]; [Cargo.tomltoml1kb] [Cargo.locktoml2kb]] |select$cols\n```\n\nSelect rows by a provided list of rows\n\n``` shiki\n>letrows= [02];[[nametypesize]; [Cargo.tomltoml1kb] [Cargo.locktoml2kb] [file.jsonjson3kb]] |select$rows\n```\n\n## Notes\n\nThis differs from `get` in that, rather than accessing the given value in the data structure, it removes all non-selected values from the structure. Hence, using `select` on a table will produce a table, a list will produce a list, and a record will produce a record.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/select.html](https://www.nushell.sh/commands/docs/select.html)"
- name: seq
  summary: '> seq {flags} ...rest'
  description: "# `seq` for generators\n\nOutput sequences of numbers.\n\n## Signature\n\n`> seq {flags} ...rest`\n\n## Parameters\n\n- `...rest`: sequence values\n\n## Input/output types:\n\n| input   | output         |\n|---------|----------------|\n| nothing | list\\<number\\> |\n\n## Examples\n\nsequence 1 to 10\n\n``` shiki\n>seq110\n╭───┬────╮\n│0│1│\n│1│2│\n│2│3│\n│3│4│\n│4│5│\n│5│6│\n│6│7│\n│7│8│\n│8│9│\n│9│10│\n╰───┴────╯\n```\n\nsequence 1.0 to 2.0 by 0.1s\n\n``` shiki\n>seq1.00.12.0\n╭────┬──────╮\n│0│1.00│\n│1│1.10│\n│2│1.20│\n│3│1.30│\n│4│1.40│\n│5│1.50│\n│6│1.60│\n│7│1.70│\n│8│1.80│\n│9│1.90│\n│10│2.00│\n╰────┴──────╯\n```\n\nsequence 1 to 5, then convert to a string with a pipe separator\n\n``` shiki\n>seq15|str join'|'\n```\n\n## Subcommands:\n\n| name                     | type    | usage                                 |\n|--------------------------|---------|---------------------------------------|\n| [`seq char`](seq_char#_) | Builtin | Print a sequence of ASCII characters. |\n| [`seq date`](seq_date#_) | Builtin | Print sequences of dates.             |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/seq.html](https://www.nushell.sh/commands/docs/seq.html)"
- name: seq char
  summary: '> seq char {flags} (start) (end)'
  description: "# `seq char` for generators\n\nPrint a sequence of ASCII characters.\n\n## Signature\n\n`> seq char {flags} (start) (end)`\n\n## Parameters\n\n- `start`: start of character sequence (inclusive)\n- `end`: end of character sequence (inclusive)\n\n## Input/output types:\n\n| input   | output         |\n|---------|----------------|\n| nothing | list\\<string\\> |\n\n## Examples\n\nsequence a to e\n\n``` shiki\n>seq charae\n╭───┬───╮\n│0│a│\n│1│b│\n│2│c│\n│3│d│\n│4│e│\n╰───┴───╯\n```\n\nsequence a to e, and put the characters in a pipe-separated string\n\n``` shiki\n>seq charae|str join'|'\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/seq_char.html](https://www.nushell.sh/commands/docs/seq_char.html)"
- name: seq date
  summary: '> seq date {flags}'
  description: "# `seq date` for generators\n\nPrint sequences of dates.\n\n## Signature\n\n`> seq date {flags} `\n\n## Flags\n\n- `--output-format, -o {string}`: prints dates in this format (defaults to %Y-%m-%d)\n- `--input-format, -i {string}`: give argument dates in this format (defaults to %Y-%m-%d)\n- `--begin-date, -b {string}`: beginning date range\n- `--end-date, -e {string}`: ending date\n- `--increment, -n {int}`: increment dates by this number\n- `--days, -d {int}`: number of days to print\n- `--reverse, -r`: print dates in reverse\n\n## Input/output types:\n\n| input   | output         |\n|---------|----------------|\n| nothing | list\\<string\\> |\n\n## Examples\n\nprint the next 10 days in YYYY-MM-DD format with newline separator\n\n``` shiki\n>seq date--days10\n```\n\nprint the previous 10 days in YYYY-MM-DD format with newline separator\n\n``` shiki\n>seq date--days10-r\n```\n\nprint the previous 10 days starting today in MM/DD/YYYY format with newline separator\n\n``` shiki\n>seq date--days10-o'%m/%d/%Y'-r\n```\n\nprint the first 10 days in January, 2020\n\n``` shiki\n>seq date-b'2020-01-01'-e'2020-01-10'\n╭───┬────────────╮\n│0│2020-01-01│\n│1│2020-01-02│\n│2│2020-01-03│\n│3│2020-01-04│\n│4│2020-01-05│\n│5│2020-01-06│\n│6│2020-01-07│\n│7│2020-01-08│\n│8│2020-01-09│\n│9│2020-01-10│\n╰───┴────────────╯\n```\n\nprint every fifth day between January 1st 2020 and January 31st 2020\n\n``` shiki\n>seq date-b'2020-01-01'-e'2020-01-31'-n5\n╭───┬────────────╮\n│0│2020-01-01│\n│1│2020-01-06│\n│2│2020-01-11│\n│3│2020-01-16│\n│4│2020-01-21│\n│5│2020-01-26│\n│6│2020-01-31│\n╰───┴────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/seq_date.html](https://www.nushell.sh/commands/docs/seq_date.html)"
- name: shells
  summary: '> shells'
  description: "# `shells` for shells\n\nLists all open shells.\n\n## Signature\n\n`> shells `\n\n## Examples\n\nEnter a new shell at parent path '..' and show all opened shells\n\n``` shiki\n>enter..;shells\n```\n\nShow currently active shell\n\n``` shiki\n>shells|whereactive==true\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/shells.html](https://www.nushell.sh/commands/docs/shells.html)"
- name: Shells
  summary: ''
  description: "# Shells\n\n| Command                    | Description                                                           |\n|----------------------------|-----------------------------------------------------------------------|\n| [enter](../docs/enter#_)   | Enters a new shell at the given path.                                 |\n| [exit](../docs/exit#_)     | Exit Nu.                                                              |\n| [g](../docs/g#_)           | Switch to a given shell, or list all shells if no given shell number. |\n| [n](../docs/n#_)           | Switch to the next shell.                                             |\n| [p](../docs/p#_)           | Switch to the previous shell.                                         |\n| [shells](../docs/shells#_) | Lists all open shells.                                                |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/shells.html](https://www.nushell.sh/commands/categories/shells.html)"
- name: shuffle
  summary: '> shuffle {flags}'
  description: "# `shuffle` for filters\n\nShuffle rows randomly.\n\n## Signature\n\n`> shuffle {flags} `\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n\n## Examples\n\nShuffle rows randomly (execute it several times and see the difference)\n\n``` shiki\n> [[versionpatch]; ['1.0.0'false] ['3.0.1'true] ['2.0.0'false]] |shuffle\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/shuffle.html](https://www.nushell.sh/commands/docs/shuffle.html)"
- name: size
  summary: '> size {flags}'
  description: "# `size` for strings\n\nGather word count statistics on the text.\n\n## Signature\n\n`> size {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| string | record |\n\n## Examples\n\nCount the number of words in a string\n\n``` shiki\n>\"There are seven words in this sentence\"|size\n╭───────────┬────╮\n│lines│1│\n│words│7│\n│bytes│38│\n│chars│38│\n│graphemes│38│\n╰───────────┴────╯\n```\n\nCounts unicode characters\n\n``` shiki\n>'今天天气真好'|size\n╭───────────┬────╮\n│lines│1│\n│words│6│\n│bytes│18│\n│chars│6│\n│graphemes│6│\n╰───────────┴────╯\n```\n\nCounts Unicode characters correctly in a string\n\n``` shiki\n>\"Amélie Amelie\"|size\n╭───────────┬────╮\n│lines│1│\n│words│2│\n│bytes│15│\n│chars│14│\n│graphemes│13│\n╰───────────┴────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/size.html](https://www.nushell.sh/commands/docs/size.html)"
- name: skip
  summary: '> skip {flags} (n)'
  description: "# `skip` for filters\n\nSkip the first several rows of the input. Counterpart of \\`drop\\`. Opposite of \\`first\\`.\n\n## Signature\n\n`> skip {flags} (n)`\n\n## Parameters\n\n- `n`: the number of elements to skip\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nSkip the first value of a list\n\n``` shiki\n> [2468] |skip1\n╭───┬───╮\n│0│4│\n│1│6│\n│2│8│\n╰───┴───╯\n```\n\nSkip two rows of a table\n\n``` shiki\n> [[editions]; [2015] [2018] [2021]] |skip2\n╭───┬──────────╮\n│# │ editions │\n├───┼──────────┤\n│0│2021│\n╰───┴──────────╯\n```\n\n## Notes\n\nTo skip specific numbered rows, try `drop nth`. To skip specific named columns, try `reject`.\n\n## Subcommands:\n\n| name                         | type    | usage                                                 |\n|------------------------------|---------|-------------------------------------------------------|\n| [`skip until`](skip_until#_) | Builtin | Skip elements of the input until a predicate is true. |\n| [`skip while`](skip_while#_) | Builtin | Skip elements of the input while a predicate is true. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/skip.html](https://www.nushell.sh/commands/docs/skip.html)"
- name: skip until
  summary: '> skip until {flags} (predicate)'
  description: "# `skip until` for filters\n\nSkip elements of the input until a predicate is true.\n\n## Signature\n\n`> skip until {flags} (predicate)`\n\n## Parameters\n\n- `predicate`: the predicate that skipped element must not match\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nSkip until the element is positive\n\n``` shiki\n> [-202-1] |skip until {|x| $x>0 }\n╭───┬────╮\n│0│2│\n│1│-1│\n╰───┴────╯\n```\n\nSkip until the element is positive using stored condition\n\n``` shiki\n>letcond= {|x| $x>0 }; [-202-1] |skip until$cond\n╭───┬────╮\n│0│2│\n│1│-1│\n╰───┴────╯\n```\n\nSkip until the field value is positive\n\n``` shiki\n> [{a:-2} {a:0} {a:2} {a:-1}] |skip until {|x| $x.a>0 }\n╭───┬────╮\n│# │ a  │\n├───┼────┤\n│0│2│\n│1│-1│\n╰───┴────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/skip_until.html](https://www.nushell.sh/commands/docs/skip_until.html)"
- name: skip while
  summary: '> skip while {flags} (predicate)'
  description: "# `skip while` for filters\n\nSkip elements of the input while a predicate is true.\n\n## Signature\n\n`> skip while {flags} (predicate)`\n\n## Parameters\n\n- `predicate`: the predicate that skipped element must match\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nSkip while the element is negative\n\n``` shiki\n> [-202-1] |skip while {|x| $x<0 }\n╭───┬────╮\n│0│0│\n│1│2│\n│2│-1│\n╰───┴────╯\n```\n\nSkip while the element is negative using stored condition\n\n``` shiki\n>letcond= {|x| $x<0 }; [-202-1] |skip while$cond\n╭───┬────╮\n│0│0│\n│1│2│\n│2│-1│\n╰───┴────╯\n```\n\nSkip while the field value is negative\n\n``` shiki\n> [{a:-2} {a:0} {a:2} {a:-1}] |skip while {|x| $x.a<0 }\n╭───┬────╮\n│# │ a  │\n├───┼────┤\n│0│0│\n│1│2│\n│2│-1│\n╰───┴────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/skip_while.html](https://www.nushell.sh/commands/docs/skip_while.html)"
- name: sleep
  summary: '> sleep {flags} (duration) ...rest'
  description: "# `sleep` for platform\n\nDelay for a specified amount of time.\n\n## Signature\n\n`> sleep {flags} (duration) ...rest`\n\n## Parameters\n\n- `duration`: time to sleep\n- `...rest`: additional time\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nSleep for 1sec\n\n``` shiki\n>sleep1sec\n```\n\nSleep for 3sec\n\n``` shiki\n>sleep1sec1sec1sec\n```\n\nSend output after 1sec\n\n``` shiki\n>sleep1sec;echodone\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/sleep.html](https://www.nushell.sh/commands/docs/sleep.html)"
- name: sort
  summary: '> sort {flags}'
  description: "# `sort` for filters\n\nSort in increasing order.\n\n## Signature\n\n`> sort {flags} `\n\n## Flags\n\n- `--reverse, -r`: Sort in reverse order\n- `--ignore-case, -i`: Sort string-based data case-insensitively\n- `--values, -v`: If input is a single record, sort the record by values; ignored if input is not a single record\n- `--natural, -n`: Sort alphanumeric string-based values naturally (1, 9, 10, 99, 100, ...)\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| record      | record      |\n\n## Examples\n\nsort the list by increasing value\n\n``` shiki\n> [201] |sort\n╭───┬───╮\n│0│0│\n│1│1│\n│2│2│\n╰───┴───╯\n```\n\nsort the list by decreasing value\n\n``` shiki\n> [201] |sort-r\n╭───┬───╮\n│0│2│\n│1│1│\n│2│0│\n╰───┴───╯\n```\n\nsort a list of strings\n\n``` shiki\n> [bettyamysarah] |sort\n╭───┬───────╮\n│0│amy│\n│1│betty│\n│2│sarah│\n╰───┴───────╯\n```\n\nsort a list of strings in reverse\n\n``` shiki\n> [bettyamysarah] |sort-r\n╭───┬───────╮\n│0│sarah│\n│1│betty│\n│2│amy│\n╰───┴───────╯\n```\n\nSort strings (case-insensitive)\n\n``` shiki\n> [airplaneTruckCar] |sort-i\n╭───┬──────────╮\n│0│airplane│\n│1│Car│\n│2│Truck│\n╰───┴──────────╯\n```\n\nSort strings (reversed case-insensitive)\n\n``` shiki\n> [airplaneTruckCar] |sort-i-r\n╭───┬──────────╮\n│0│Truck│\n│1│Car│\n│2│airplane│\n╰───┴──────────╯\n```\n\nSort record by key (case-insensitive)\n\n``` shiki\n> {b:3, a:4} |sort\n╭───┬───╮\n│a│4│\n│b│3│\n╰───┴───╯\n```\n\nSort record by value\n\n``` shiki\n> {b:4, a:3, c:1} |sort-v\n╭───┬───╮\n│c│1│\n│a│3│\n│b│4│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/sort.html](https://www.nushell.sh/commands/docs/sort.html)"
- name: sort-by
  summary: '> sort-by {flags} ...rest'
  description: "# `sort-by` for filters\n\nSort by the given columns, in increasing order.\n\n## Signature\n\n`> sort-by {flags} ...rest`\n\n## Flags\n\n- `--reverse, -r`: Sort in reverse order\n- `--ignore-case, -i`: Sort string-based columns case-insensitively\n- `--natural, -n`: Sort alphanumeric string-based columns naturally (1, 9, 10, 99, 100, ...)\n\n## Parameters\n\n- `...rest`: the column(s) to sort by\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nSort files by modified date\n\n``` shiki\n>ls|sort-bymodified\n```\n\nSort files by name (case-insensitive)\n\n``` shiki\n>ls|sort-byname-i\n```\n\nSort a table by a column (reversed order)\n\n``` shiki\n> [[fruitcount]; [apple9] [pear3] [orange7]] |sort-byfruit-r\n╭───┬────────┬───────╮\n│# │ fruit  │ count │\n├───┼────────┼───────┤\n│0│pear│3│\n│1│orange│7│\n│2│apple│9│\n╰───┴────────┴───────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/sort-by.html](https://www.nushell.sh/commands/docs/sort-by.html)"
- name: source
  summary: '> source {flags} (filename)'
  description: "# `source` for core\n\nRuns a script file in the current context.\n\n## Signature\n\n`> source {flags} (filename)`\n\n## Parameters\n\n- `filename`: the filepath to the script file to source\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nRuns foo.nu in the current context\n\n``` shiki\n>sourcefoo.nu\n```\n\nRuns foo.nu in current context and call the command defined, suppose foo.nu has content: `def say-hi [] { echo 'Hi!' }`\n\n``` shiki\n>source./foo.nu;say-hi\n```\n\n## Notes\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/source.html](https://www.nushell.sh/commands/docs/source.html)"
- name: source-env
  summary: '> source-env {flags} (filename)'
  description: "# `source-env` for core\n\nSource the environment from a source file into the current environment.\n\n## Signature\n\n`> source-env {flags} (filename)`\n\n## Parameters\n\n- `filename`: the filepath to the script file to source the environment from\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSources the environment from foo.nu in the current context\n\n``` shiki\n>source-envfoo.nu\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/source-env.html](https://www.nushell.sh/commands/docs/source-env.html)"
- name: split
  summary: '> split {flags}'
  description: "# `split` for strings\n\nSplit contents across desired subcommand (like row, column) via the separator.\n\n## Signature\n\n`> split {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                             | type    | usage                                                   |\n|----------------------------------|---------|---------------------------------------------------------|\n| [`split chars`](split_chars#_)   | Builtin | Split a string into a list of characters.               |\n| [`split column`](split_column#_) | Builtin | Split a string into multiple columns using a separator. |\n| [`split list`](split_list#_)     | Builtin | Split a list into multiple lists using a separator.     |\n| [`split row`](split_row#_)       | Builtin | Split a string into multiple rows using a separator.    |\n| [`split words`](split_words#_)   | Builtin | Split a string's words into separate rows.              |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/split.html](https://www.nushell.sh/commands/docs/split.html)"
- name: split chars
  summary: '> split chars {flags}'
  description: "# `split chars` for strings\n\nSplit a string into a list of characters.\n\n## Signature\n\n`> split chars {flags} `\n\n## Flags\n\n- `--grapheme-clusters, -g`: split on grapheme clusters\n- `--code-points, -c`: split on code points (default; splits combined characters)\n\n## Input/output types:\n\n| input          | output                 |\n|----------------|------------------------|\n| list\\<string\\> | list\\<list\\<string\\>\\> |\n| string         | list\\<string\\>         |\n\n## Examples\n\nSplit the string into a list of characters\n\n``` shiki\n>'hello'|split chars\n╭───┬───╮\n│0│h│\n│1│e│\n│2│l│\n│3│l│\n│4│o│\n╰───┴───╯\n```\n\nSplit on grapheme clusters\n\n``` shiki\n>'🇯🇵ほげ'|split chars-g\n╭───┬────╮\n│0│🇯🇵│\n│1│ほ│\n│2│げ│\n╰───┴────╯\n```\n\nSplit multiple strings into lists of characters\n\n``` shiki\n> ['hello', 'world'] |split chars\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│h││\n│││1│e││\n│││2│l││\n│││3│l││\n│││4│o││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│w││\n│││1│o││\n│││2│r││\n│││3│l││\n│││4│d││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/split_chars.html](https://www.nushell.sh/commands/docs/split_chars.html)"
- name: split column
  summary: '> split column {flags} (separator) ...rest'
  description: "# `split column` for strings\n\nSplit a string into multiple columns using a separator.\n\n## Signature\n\n`> split column {flags} (separator) ...rest`\n\n## Flags\n\n- `--collapse-empty, -c`: remove empty columns\n- `--regex, -r`: separator is a regular expression\n\n## Parameters\n\n- `separator`: the character or string that denotes what separates columns\n- `...rest`: column names to give the new columns\n\n## Input/output types:\n\n| input          | output |\n|----------------|--------|\n| list\\<string\\> | table  |\n| string         | table  |\n\n## Examples\n\nSplit a string into columns by the specified separator\n\n``` shiki\n>'a--b--c'|split column'--'\n╭───┬─────────┬─────────┬─────────╮\n│# │ column1 │ column2 │ column3 │\n├───┼─────────┼─────────┼─────────┤\n│0│a│b│c│\n╰───┴─────────┴─────────┴─────────╯\n```\n\nSplit a string into columns of char and remove the empty columns\n\n``` shiki\n>'abc'|split column-c''\n╭───┬─────────┬─────────┬─────────╮\n│# │ column1 │ column2 │ column3 │\n├───┼─────────┼─────────┼─────────┤\n│0│a│b│c│\n╰───┴─────────┴─────────┴─────────╯\n```\n\nSplit a list of strings into a table\n\n``` shiki\n> ['a-b''c-d'] |split column-\n╭───┬─────────┬─────────╮\n│# │ column1 │ column2 │\n├───┼─────────┼─────────┤\n│0│a│b│\n│1│c│d│\n╰───┴─────────┴─────────╯\n```\n\nSplit a list of strings into a table, ignoring padding\n\n``` shiki\n> ['a -  b''c  -    d'] |split column-r'\\s*-\\s*'\n╭───┬─────────┬─────────╮\n│# │ column1 │ column2 │\n├───┼─────────┼─────────┤\n│0│a│b│\n│1│c│d│\n╰───┴─────────┴─────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/split_column.html](https://www.nushell.sh/commands/docs/split_column.html)"
- name: split list
  summary: '> split list {flags} (separator)'
  description: "# `split list` for filters\n\nSplit a list into multiple lists using a separator.\n\n## Signature\n\n`> split list {flags} (separator)`\n\n## Flags\n\n- `--regex, -r`: separator is a regular expression, matching values that can be coerced into a string\n\n## Parameters\n\n- `separator`: the value that denotes what separates the list\n\n## Input/output types:\n\n| input       | output              |\n|-------------|---------------------|\n| list\\<any\\> | list\\<list\\<any\\>\\> |\n\n## Examples\n\nSplit a list of chars into two lists\n\n``` shiki\n> [a, b, c, d, e, f, g] |split listd\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│a││\n│││1│b││\n│││2│c││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│e││\n│││1│f││\n│││2│g││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nSplit a list of lists into two lists of lists\n\n``` shiki\n> [[1,2], [2,3], [3,4]] |split list [2,3]\n╭───┬───────────────────╮\n│0│╭───┬───────────╮│\n│││0│╭───┬───╮││\n│││││0│1│││\n│││││1│2│││\n││││╰───┴───╯││\n││╰───┴───────────╯│\n│1│╭───┬───────────╮│\n│││0│╭───┬───╮││\n│││││0│3│││\n│││││1│4│││\n││││╰───┴───╯││\n││╰───┴───────────╯│\n╰───┴───────────────────╯\n```\n\nSplit a list of chars into two lists\n\n``` shiki\n> [a, b, c, d, a, e, f, g] |split lista\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│b││\n│││1│c││\n│││2│d││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│e││\n│││1│f││\n│││2│g││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nSplit a list of chars into lists based on multiple characters\n\n``` shiki\n> [a, b, c, d, a, e, f, g] |split list-r'(b|e)'\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│a││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│c││\n│││1│d││\n│││2│a││\n││╰───┴───╯│\n│2│╭───┬───╮│\n│││0│f││\n│││1│g││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/split_list.html](https://www.nushell.sh/commands/docs/split_list.html)"
- name: split row
  summary: '> split row {flags} (separator)'
  description: "# `split row` for strings\n\nSplit a string into multiple rows using a separator.\n\n## Signature\n\n`> split row {flags} (separator)`\n\n## Flags\n\n- `--number, -n {int}`: Split into maximum number of items\n- `--regex, -r`: use regex syntax for separator\n\n## Parameters\n\n- `separator`: a character or regex that denotes what separates rows\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| string         | list\\<string\\> |\n\n## Examples\n\nSplit a string into rows of char\n\n``` shiki\n>'abc'|split row''\n╭───┬───╮\n│0││\n│1│a│\n│2│b│\n│3│c│\n│4││\n╰───┴───╯\n```\n\nSplit a string into rows by the specified separator\n\n``` shiki\n>'a--b--c'|split row'--'\n╭───┬───╮\n│0│a│\n│1│b│\n│2│c│\n╰───┴───╯\n```\n\nSplit a string by '-'\n\n``` shiki\n>'-a-b-c-'|split row'-'\n╭───┬───╮\n│0││\n│1│a│\n│2│b│\n│3│c│\n│4││\n╰───┴───╯\n```\n\nSplit a string by regex\n\n``` shiki\n>'a   b       c'|split row-r'\\s+'\n╭───┬───╮\n│0│a│\n│1│b│\n│2│c│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/split_row.html](https://www.nushell.sh/commands/docs/split_row.html)"
- name: split words
  summary: '> split words {flags}'
  description: "# `split words` for strings\n\nSplit a string's words into separate rows.\n\n## Signature\n\n`> split words {flags} `\n\n## Flags\n\n- `--min-word-length, -l {int}`: The minimum word length\n- `--grapheme-clusters, -g`: measure word length in grapheme clusters (requires -l)\n- `--utf-8-bytes, -b`: measure word length in UTF-8 bytes (default; requires -l; non-ASCII chars are length 2+)\n\n## Input/output types:\n\n| input          | output                 |\n|----------------|------------------------|\n| list\\<string\\> | list\\<list\\<string\\>\\> |\n| string         | list\\<string\\>         |\n\n## Examples\n\nSplit the string's words into separate rows\n\n``` shiki\n>'hello world'|split words\n╭───┬───────╮\n│0│hello│\n│1│world│\n╰───┴───────╯\n```\n\nSplit the string's words, of at least 3 characters, into separate rows\n\n``` shiki\n>'hello to the world'|split words-l3\n╭───┬───────╮\n│0│hello│\n│1│the│\n│2│world│\n╰───┴───────╯\n```\n\nA real-world example of splitting words\n\n``` shiki\n>http gethttps://www.gutenberg.org/files/11/11-0.txt|str downcase|split words-l2|uniq-c|sort-bycount--reverse|first10\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/split_words.html](https://www.nushell.sh/commands/docs/split_words.html)"
- name: split-by
  summary: '> split-by {flags} (splitter)'
  description: "# `split-by` for filters\n\nCreate a new table split.\n\n## Signature\n\n`> split-by {flags} (splitter)`\n\n## Parameters\n\n- `splitter`: the splitter value to use\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n\n## Examples\n\nsplit items by column named \"lang\"\n\n``` shiki\n> {\n'2019': [\n          { name:'andres', lang:'rb', year:'2019' },\n          { name:'jt', lang:'rs', year:'2019' }\n        ],\n'2021': [\n          { name:'storm', lang:'rs', 'year':'2021' }\n        ]\n    } |split-bylang\n╭────┬─────────────────────────────────────────╮\n││╭──────┬──────────────────────────────╮│\n│rb│││╭───┬────────┬──────┬──────╮││\n│││2019││# │  name  │ lang │ year │ │ │\n││││├───┼────────┼──────┼──────┤││\n│││││0│andres│rb│2019│││\n││││╰───┴────────┴──────┴──────╯││\n││╰──────┴──────────────────────────────╯│\n││╭──────┬─────────────────────────────╮│\n│rs│││╭───┬──────┬──────┬──────╮││\n│││2019││# │ name │ lang │ year │  │  │\n││││├───┼──────┼──────┼──────┤││\n│││││0│jt│rs│2019│││\n││││╰───┴──────┴──────┴──────╯││\n││││╭───┬───────┬──────┬──────╮││\n│││2021││# │ name  │ lang │ year │ │  │\n││││├───┼───────┼──────┼──────┤││\n│││││0│storm│rs│2021│││\n││││╰───┴───────┴──────┴──────╯││\n││╰──────┴─────────────────────────────╯│\n╰────┴─────────────────────────────────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/split-by.html](https://www.nushell.sh/commands/docs/split-by.html)"
- name: start
  summary: '> start {flags} (path)'
  description: "# `start` for filesystem\n\nOpen a folder, file or website in the default application or viewer.\n\n## Signature\n\n`> start {flags} (path)`\n\n## Parameters\n\n- `path`: path to open\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | any    |\n| string  | any    |\n\n## Examples\n\nOpen a text file with the default text editor\n\n``` shiki\n>startfile.txt\n```\n\nOpen an image with the default image viewer\n\n``` shiki\n>startfile.jpg\n```\n\nOpen the current directory with the default file manager\n\n``` shiki\n>start.\n```\n\nOpen a pdf with the default pdf viewer\n\n``` shiki\n>startfile.pdf\n```\n\nOpen a website with default browser\n\n``` shiki\n>starthttps://www.nushell.sh\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/start.html](https://www.nushell.sh/commands/docs/start.html)"
- name: str
  summary: '> str {flags}'
  description: "# `str` for strings\n\nVarious commands for working with string data.\n\n## Signature\n\n`> str {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                                                     | type    | usage                                                                                                                               |\n|----------------------------------------------------------|---------|-------------------------------------------------------------------------------------------------------------------------------------|\n| [`str camel-case`](str_camel-case#_)                     | Builtin | Convert a string to camelCase.                                                                                                      |\n| [`str capitalize`](str_capitalize#_)                     | Builtin | Capitalize first letter of text.                                                                                                    |\n| [`str contains`](str_contains#_)                         | Builtin | Checks if string input contains a substring.                                                                                        |\n| [`str distance`](str_distance#_)                         | Builtin | Compare two strings and return the edit distance/Levenshtein distance.                                                              |\n| [`str downcase`](str_downcase#_)                         | Builtin | Make text lowercase.                                                                                                                |\n| [`str ends-with`](str_ends-with#_)                       | Builtin | Check if an input ends with a string.                                                                                               |\n| [`str expand`](str_expand#_)                             | Builtin | Generates all possible combinations defined in brace expansion syntax.                                                              |\n| [`str index-of`](str_index-of#_)                         | Builtin | Returns start index of first occurrence of string in input, or -1 if no match.                                                      |\n| [`str join`](str_join#_)                                 | Builtin | Concatenate multiple strings into a single string, with an optional separator between each.                                         |\n| [`str kebab-case`](str_kebab-case#_)                     | Builtin | Convert a string to kebab-case.                                                                                                     |\n| [`str length`](str_length#_)                             | Builtin | Output the length of any strings in the pipeline.                                                                                   |\n| [`str pascal-case`](str_pascal-case#_)                   | Builtin | Convert a string to PascalCase.                                                                                                     |\n| [`str replace`](str_replace#_)                           | Builtin | Find and replace text.                                                                                                              |\n| [`str reverse`](str_reverse#_)                           | Builtin | Reverse every string in the pipeline.                                                                                               |\n| [`str screaming-snake-case`](str_screaming-snake-case#_) | Builtin | Convert a string to SCREAMING_SNAKE_CASE.                                                                                           |\n| [`str snake-case`](str_snake-case#_)                     | Builtin | Convert a string to snake_case.                                                                                                     |\n| [`str starts-with`](str_starts-with#_)                   | Builtin | Check if an input starts with a string.                                                                                             |\n| [`str substring`](str_substring#_)                       | Builtin | Get part of a string. Note that the start is included but the end is excluded, and that the first character of a string is index 0. |\n| [`str title-case`](str_title-case#_)                     | Builtin | Convert a string to Title Case.                                                                                                     |\n| [`str trim`](str_trim#_)                                 | Builtin | Trim whitespace or specific character.                                                                                              |\n| [`str upcase`](str_upcase#_)                             | Builtin | Make text uppercase.                                                                                                                |\n\n**Tips:** Command `str` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str.html](https://www.nushell.sh/commands/docs/str.html)"
- name: str camel-case
  summary: '> str camel-case {flags} ...rest'
  description: "# `str camel-case` for strings\n\nConvert a string to camelCase.\n\n## Signature\n\n`> str camel-case {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, convert strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nconvert a string to camelCase\n\n``` shiki\n>'NuShell'|str camel-case\nnuShell\n```\n\nconvert a string to camelCase\n\n``` shiki\n>'this-is-the-first-case'|str camel-case\nthisIsTheFirstCase\n```\n\nconvert a string to camelCase\n\n``` shiki\n>'this_is_the_second_case'|str camel-case\nthisIsTheSecondCase\n```\n\nconvert a column from a table to camelCase\n\n``` shiki\n> [[lang, gems]; [nu_test, 100]] |str camel-caselang\n╭───┬────────┬──────╮\n│# │  lang  │ gems │\n├───┼────────┼──────┤\n│0│nuTest│100│\n╰───┴────────┴──────╯\n```\n\n**Tips:** Command `str camel-case` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_camel-case.html](https://www.nushell.sh/commands/docs/str_camel-case.html)"
- name: str capitalize
  summary: '> str capitalize {flags} ...rest'
  description: "# `str capitalize` for strings\n\nCapitalize first letter of text.\n\n## Signature\n\n`> str capitalize {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, convert strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nCapitalize contents\n\n``` shiki\n>'good day'|str capitalize\nGoodday\n```\n\nCapitalize contents\n\n``` shiki\n>'anton'|str capitalize\nAnton\n```\n\nCapitalize a column in a table\n\n``` shiki\n> [[lang, gems]; [nu_test, 100]] |str capitalizelang\n╭───┬─────────┬──────╮\n│# │  lang   │ gems │\n├───┼─────────┼──────┤\n│0│Nu_test│100│\n╰───┴─────────┴──────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_capitalize.html](https://www.nushell.sh/commands/docs/str_capitalize.html)"
- name: str contains
  summary: '> str contains {flags} (string) ...rest'
  description: "# `str contains` for strings\n\nChecks if string input contains a substring.\n\n## Signature\n\n`> str contains {flags} (string) ...rest`\n\n## Flags\n\n- `--ignore-case, -i`: search is case insensitive\n- `--not, -n`: does not contain\n\n## Parameters\n\n- `string`: the substring to find\n- `...rest`: For a data structure input, check strings at the given cell paths, and replace with result\n\n## Input/output types:\n\n| input          | output       |\n|----------------|--------------|\n| list\\<string\\> | list\\<bool\\> |\n| record         | record       |\n| string         | bool         |\n| table          | table        |\n\n## Examples\n\nCheck if input contains string\n\n``` shiki\n>'my_library.rb'|str contains'.rb'\ntrue\n```\n\nCheck if input contains string case insensitive\n\n``` shiki\n>'my_library.rb'|str contains-i'.RB'\ntrue\n```\n\nCheck if input contains string in a record\n\n``` shiki\n> { ColA:test, ColB:100 } |str contains'e'ColA\n╭──────┬──────╮\n│ColA│true│\n│ColB│100│\n╰──────┴──────╯\n```\n\nCheck if input contains string in a table\n\n``` shiki\n>  [[ColAColB]; [test100]] |str contains-i'E'ColA\n╭───┬──────┬──────╮\n│# │ ColA │ ColB │\n├───┼──────┼──────┤\n│0│true│100│\n╰───┴──────┴──────╯\n```\n\nCheck if input contains string in a table\n\n``` shiki\n>  [[ColAColB]; [testhello]] |str contains'e'ColAColB\n╭───┬──────┬──────╮\n│# │ ColA │ ColB │\n├───┼──────┼──────┤\n│0│true│true│\n╰───┴──────┴──────╯\n```\n\nCheck if input string contains 'banana'\n\n``` shiki\n>'hello'|str contains'banana'\nfalse\n```\n\nCheck if list contains string\n\n``` shiki\n> [onetwothree] |str containso\n╭───┬───────╮\n│0│true│\n│1│true│\n│2│false│\n╰───┴───────╯\n```\n\nCheck if list does not contain string\n\n``` shiki\n> [onetwothree] |str contains-no\n╭───┬───────╮\n│0│false│\n│1│false│\n│2│true│\n╰───┴───────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_contains.html](https://www.nushell.sh/commands/docs/str_contains.html)"
- name: str distance
  summary: '> str distance {flags} (compare-string) ...rest'
  description: "# `str distance` for strings\n\nCompare two strings and return the edit distance/Levenshtein distance.\n\n## Signature\n\n`> str distance {flags} (compare-string) ...rest`\n\n## Parameters\n\n- `compare-string`: the first string to compare\n- `...rest`: For a data structure input, check strings at the given cell paths, and replace with result\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| string | int    |\n| table  | table  |\n\n## Examples\n\nget the edit distance between two strings\n\n``` shiki\n>'nushell'|str distance'nutshell'\n1\n```\n\nCompute edit distance between strings in table and another string, using cell paths\n\n``` shiki\n> [{a:'nutshell'b:'numetal'}] |str distance'nushell''a''b'\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│4│\n╰───┴───┴───╯\n```\n\nCompute edit distance between strings in record and another string, using cell paths\n\n``` shiki\n> {a:'nutshell'b:'numetal'} |str distance'nushell'ab\n╭───┬───╮\n│a│1│\n│b│4│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_distance.html](https://www.nushell.sh/commands/docs/str_distance.html)"
- name: str downcase
  summary: '> str downcase {flags} ...rest'
  description: "# `str downcase` for strings\n\nMake text lowercase.\n\n## Signature\n\n`> str downcase {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, convert strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nDowncase contents\n\n``` shiki\n>'NU'|str downcase\nnu\n```\n\nDowncase contents\n\n``` shiki\n>'TESTa'|str downcase\ntesta\n```\n\nDowncase contents\n\n``` shiki\n> [[ColAColB]; [TestABC]] |str downcaseColA\n╭───┬──────┬──────╮\n│# │ ColA │ ColB │\n├───┼──────┼──────┤\n│0│test│ABC│\n╰───┴──────┴──────╯\n```\n\nDowncase contents\n\n``` shiki\n> [[ColAColB]; [TestABC]] |str downcaseColAColB\n╭───┬──────┬──────╮\n│# │ ColA │ ColB │\n├───┼──────┼──────┤\n│0│test│abc│\n╰───┴──────┴──────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_downcase.html](https://www.nushell.sh/commands/docs/str_downcase.html)"
- name: str ends-with
  summary: '> str ends-with {flags} (string) ...rest'
  description: "# `str ends-with` for strings\n\nCheck if an input ends with a string.\n\n## Signature\n\n`> str ends-with {flags} (string) ...rest`\n\n## Flags\n\n- `--ignore-case, -i`: search is case insensitive\n\n## Parameters\n\n- `string`: the string to match\n- `...rest`: For a data structure input, check strings at the given cell paths, and replace with result\n\n## Input/output types:\n\n| input          | output       |\n|----------------|--------------|\n| list\\<string\\> | list\\<bool\\> |\n| record         | record       |\n| string         | bool         |\n| table          | table        |\n\n## Examples\n\nChecks if string ends with '.rb'\n\n``` shiki\n>'my_library.rb'|str ends-with'.rb'\ntrue\n```\n\nChecks if strings end with '.txt'\n\n``` shiki\n> ['my_library.rb', 'README.txt'] |str ends-with'.txt'\n╭───┬───────╮\n│0│false│\n│1│true│\n╰───┴───────╯\n```\n\nChecks if string ends with '.RB', case-insensitive\n\n``` shiki\n>'my_library.rb'|str ends-with-i'.RB'\ntrue\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_ends-with.html](https://www.nushell.sh/commands/docs/str_ends-with.html)"
- name: str expand
  summary: '> str expand {flags}'
  description: "# `str expand` for strings\n\nGenerates all possible combinations defined in brace expansion syntax.\n\n## Signature\n\n`> str expand {flags} `\n\n## Flags\n\n- `--path, -`: Replaces all backslashes with double backslashes, useful for Path.\n\n## Input/output types:\n\n| input          | output                 |\n|----------------|------------------------|\n| list\\<string\\> | list\\<list\\<string\\>\\> |\n| string         | list\\<string\\>         |\n\n## Examples\n\nDefine a range inside braces to produce a list of string.\n\n``` shiki\n>\"{3..5}\"|str expand\n╭───┬───╮\n│0│3│\n│1│4│\n│2│5│\n╰───┴───╯\n```\n\nIgnore the next character after the backslash ('')\n\n``` shiki\n>'A{B\\,,C}'|str expand\n╭───┬─────╮\n│0│AB, │\n│1│AC│\n╰───┴─────╯\n```\n\nCommas that are not inside any braces need to be skipped.\n\n``` shiki\n>'Welcome\\, {home,mon ami}!'|str expand\n╭───┬───────────────────╮\n│0│Welcome, home!│\n│1│Welcome, monami!│\n╰───┴───────────────────╯\n```\n\nUse double backslashes to add a backslash.\n\n``` shiki\n>'A{B\\\\,C}'|str expand\n╭───┬─────╮\n│0│AB\\│\n│1│AC│\n╰───┴─────╯\n```\n\nExport comma separated values inside braces (`{}`) to a string list.\n\n``` shiki\n>\"{apple,banana,cherry}\"|str expand\n╭───┬────────╮\n│0│apple│\n│1│banana│\n│2│cherry│\n╰───┴────────╯\n```\n\nIf the piped data is path, you may want to use --path flag, or else manually replace the backslashes with double backslashes.\n\n``` shiki\n>'C:\\{Users,Windows}'|str expand--path\n╭───┬────────────╮\n│0│C:\\Users│\n│1│C:\\Windows│\n╰───┴────────────╯\n```\n\nBrace expressions can be used one after another.\n\n``` shiki\n>\"A{b,c}D{e,f}G\"|str expand\n╭───┬───────╮\n│0│AbDeG│\n│1│AbDfG│\n│2│AcDeG│\n│3│AcDfG│\n╰───┴───────╯\n```\n\nCollection may include an empty item. It can be put at the start of the list.\n\n``` shiki\n>\"A{,B,C}\"|str expand\n╭───┬────╮\n│0│A│\n│1│AB│\n│2│AC│\n╰───┴────╯\n```\n\nEmpty item can be at the end of the collection.\n\n``` shiki\n>\"A{B,C,}\"|str expand\n╭───┬────╮\n│0│AB│\n│1│AC│\n│2│A│\n╰───┴────╯\n```\n\nEmpty item can be in the middle of the collection.\n\n``` shiki\n>\"A{B,,C}\"|str expand\n╭───┬────╮\n│0│AB│\n│1│A│\n│2│AC│\n╰───┴────╯\n```\n\nAlso, it is possible to use one inside another. Here is a real-world example, that creates files:\n\n``` shiki\n>\"A{B{1,3},C{2,5}}D\"|str expand\n╭───┬──────╮\n│0│AB1D│\n│1│AB3D│\n│2│AC2D│\n│3│AC5D│\n╰───┴──────╯\n```\n\n## Notes\n\nThis syntax may seem familiar with `glob {A,B}.C`. The difference is glob relies on filesystem, but str expand is not. Inside braces, we put variants. Then basically we're creating all possible outcomes.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_expand.html](https://www.nushell.sh/commands/docs/str_expand.html)"
- name: str index-of
  summary: '> str index-of {flags} (string) ...rest'
  description: "# `str index-of` for strings\n\nReturns start index of first occurrence of string in input, or -1 if no match.\n\n## Signature\n\n`> str index-of {flags} (string) ...rest`\n\n## Flags\n\n- `--grapheme-clusters, -g`: count indexes using grapheme clusters (all visible chars have length 1)\n- `--utf-8-bytes, -b`: count indexes using UTF-8 bytes (default; non-ASCII chars have length 2+)\n- `--range, -r {range}`: optional start and/or end index\n- `--end, -e`: search from the end of the input\n\n## Parameters\n\n- `string`: the string to find in the input\n- `...rest`: For a data structure input, search strings at the given cell paths, and replace with result\n\n## Input/output types:\n\n| input          | output      |\n|----------------|-------------|\n| list\\<string\\> | list\\<int\\> |\n| record         | record      |\n| string         | int         |\n| table          | table       |\n\n## Examples\n\nReturns index of string in input\n\n``` shiki\n>'my_library.rb'|str index-of'.rb'\n10\n```\n\nCount length using grapheme clusters\n\n``` shiki\n>'🇯🇵ほげ ふが ぴよ'|str index-of-g'ふが'\n4\n```\n\nReturns index of string in input within a`rhs open range`\n\n``` shiki\n>'.rb.rb'|str index-of'.rb'-r1..\n3\n```\n\nReturns index of string in input within a lhs open range\n\n``` shiki\n>'123456'|str index-of'6'-r..4\n-1\n```\n\nReturns index of string in input within a range\n\n``` shiki\n>'123456'|str index-of'3'-r1..4\n2\n```\n\nReturns index of string in input\n\n``` shiki\n>'/this/is/some/path/file.txt'|str index-of'/'-e\n18\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_index-of.html](https://www.nushell.sh/commands/docs/str_index-of.html)"
- name: str join
  summary: '> str join {flags} (separator)'
  description: "# `str join` for strings\n\nConcatenate multiple strings into a single string, with an optional separator between each.\n\n## Signature\n\n`> str join {flags} (separator)`\n\n## Parameters\n\n- `separator`: optional separator to use when creating string\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| list\\<any\\> | string |\n| string      | string |\n\n## Examples\n\nCreate a string from input\n\n``` shiki\n> ['nu', 'shell'] |str join\nnushell\n```\n\nCreate a string from input with a separator\n\n``` shiki\n> ['nu', 'shell'] |str join'-'\nnu-shell\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_join.html](https://www.nushell.sh/commands/docs/str_join.html)"
- name: str kebab-case
  summary: '> str kebab-case {flags} ...rest'
  description: "# `str kebab-case` for strings\n\nConvert a string to kebab-case.\n\n## Signature\n\n`> str kebab-case {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, convert strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nconvert a string to kebab-case\n\n``` shiki\n>'NuShell'|str kebab-case\nnu-shell\n```\n\nconvert a string to kebab-case\n\n``` shiki\n>'thisIsTheFirstCase'|str kebab-case\nthis-is-the-first-case\n```\n\nconvert a string to kebab-case\n\n``` shiki\n>'THIS_IS_THE_SECOND_CASE'|str kebab-case\nthis-is-the-second-case\n```\n\nconvert a column from a table to kebab-case\n\n``` shiki\n> [[lang, gems]; [nuTest, 100]] |str kebab-caselang\n╭───┬─────────┬──────╮\n│# │  lang   │ gems │\n├───┼─────────┼──────┤\n│0│nu-test│100│\n╰───┴─────────┴──────╯\n```\n\n**Tips:** Command `str kebab-case` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_kebab-case.html](https://www.nushell.sh/commands/docs/str_kebab-case.html)"
- name: str length
  summary: '> str length {flags} ...rest'
  description: "# `str length` for strings\n\nOutput the length of any strings in the pipeline.\n\n## Signature\n\n`> str length {flags} ...rest`\n\n## Flags\n\n- `--grapheme-clusters, -g`: count length using grapheme clusters (all visible chars have length 1)\n- `--utf-8-bytes, -b`: count length using UTF-8 bytes (default; all non-ASCII chars have length 2+)\n\n## Parameters\n\n- `...rest`: For a data structure input, replace strings at the given cell paths with their length\n\n## Input/output types:\n\n| input          | output      |\n|----------------|-------------|\n| list\\<string\\> | list\\<int\\> |\n| record         | record      |\n| string         | int         |\n| table          | table       |\n\n## Examples\n\nReturn the lengths of a string\n\n``` shiki\n>'hello'|str length\n5\n```\n\nCount length using grapheme clusters\n\n``` shiki\n>'🇯🇵ほげ ふが ぴよ'|str length-g\n9\n```\n\nReturn the lengths of multiple strings\n\n``` shiki\n> ['hi''there'] |str length\n╭───┬───╮\n│0│2│\n│1│5│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_length.html](https://www.nushell.sh/commands/docs/str_length.html)"
- name: str pascal-case
  summary: '> str pascal-case {flags} ...rest'
  description: "# `str pascal-case` for strings\n\nConvert a string to PascalCase.\n\n## Signature\n\n`> str pascal-case {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, convert strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nconvert a string to PascalCase\n\n``` shiki\n>'nu-shell'|str pascal-case\nNuShell\n```\n\nconvert a string to PascalCase\n\n``` shiki\n>'this-is-the-first-case'|str pascal-case\nThisIsTheFirstCase\n```\n\nconvert a string to PascalCase\n\n``` shiki\n>'this_is_the_second_case'|str pascal-case\nThisIsTheSecondCase\n```\n\nconvert a column from a table to PascalCase\n\n``` shiki\n> [[lang, gems]; [nu_test, 100]] |str pascal-caselang\n╭───┬────────┬──────╮\n│# │  lang  │ gems │\n├───┼────────┼──────┤\n│0│NuTest│100│\n╰───┴────────┴──────╯\n```\n\n**Tips:** Command `str pascal-case` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_pascal-case.html](https://www.nushell.sh/commands/docs/str_pascal-case.html)"
- name: str replace
  summary: '> str replace {flags} (find) (replace) ...rest'
  description: "# `str replace` for strings\n\nFind and replace text.\n\n## Signature\n\n`> str replace {flags} (find) (replace) ...rest`\n\n## Flags\n\n- `--all, -a`: replace all occurrences of the pattern\n- `--no-expand, -n`: do not expand capture groups (like \\$name) in the replacement string\n- `--regex, -r`: match the pattern as a regular expression in the input, instead of a substring\n- `--multiline, -m`: multi-line regex mode (implies --regex): ^ and \\$ match begin/end of line; equivalent to (?m)\n\n## Parameters\n\n- `find`: the pattern to find\n- `replace`: the replacement string\n- `...rest`: For a data structure input, operate on strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nFind and replace the first occurrence of a substring\n\n``` shiki\n>'c:\\some\\cool\\path'|str replace'c:\\some\\cool''~'\n~\\path\n```\n\nFind and replace all occurrences of a substring\n\n``` shiki\n>'abc abc abc'|str replace-a'b''z'\nazcazcazc\n```\n\nFind and replace contents with capture group using regular expression\n\n``` shiki\n>'my_library.rb'|str replace-r'(.+).rb''$1.nu'\nmy_library.nu\n```\n\nFind and replace all occurrences of find string using regular expression\n\n``` shiki\n>'abc abc abc'|str replace-ar'b''z'\nazcazcazc\n```\n\nFind and replace all occurrences of find string in table using regular expression\n\n``` shiki\n> [[ColAColBColC]; [abcabcads]] |str replace-ar'b''z'ColAColC\n╭───┬──────┬──────┬──────╮\n│# │ ColA │ ColB │ ColC │\n├───┼──────┼──────┼──────┤\n│0│azc│abc│ads│\n╰───┴──────┴──────┴──────╯\n```\n\nFind and replace all occurrences of find string in record using regular expression\n\n``` shiki\n> { KeyA:abc, KeyB:abc, KeyC:ads } |str replace-ar'b''z'KeyAKeyC\n╭──────┬─────╮\n│KeyA│azc│\n│KeyB│abc│\n│KeyC│ads│\n╰──────┴─────╯\n```\n\nFind and replace contents without using the replace parameter as a regular expression\n\n``` shiki\n>'dogs_$1_cats'|str replace-r'\\$1''$2'-n\ndogs_$2_cats\n```\n\nUse captures to manipulate the input text using regular expression\n\n``` shiki\n>\"abc-def\"|str replace-r\"(.+)-(.+)\"\"${2}_${1}\"\ndef_abc\n```\n\nFind and replace with fancy-regex using regular expression\n\n``` shiki\n>'a successful b'|str replace-r'\\b([sS])uc(?:cs|s?)e(ed(?:ed|ing|s?)|ss(?:es|ful(?:ly)?|i(?:ons?|ve(?:ly)?)|ors?)?)\\b''${1}ucce$2'\nasuccessfulb\n```\n\nFind and replace with fancy-regex using regular expression\n\n``` shiki\n>'GHIKK-9+*'|str replace-r'[*[:xdigit:]+]''z'\nGHIKK-z+*\n```\n\nFind and replace on individual lines using multiline regular expression\n\n``` shiki\n>\"non-matching line\\n123. one line\\n124. another line\\n\"|str replace-am'^[0-9]+\\. '''\nnon-matchingline\noneline\nanotherline\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_replace.html](https://www.nushell.sh/commands/docs/str_replace.html)"
- name: str reverse
  summary: '> str reverse {flags} ...rest'
  description: "# `str reverse` for strings\n\nReverse every string in the pipeline.\n\n## Signature\n\n`> str reverse {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, reverse strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nReverse a single string\n\n``` shiki\n>'Nushell'|str reverse\nllehsuN\n```\n\nReverse multiple strings in a list\n\n``` shiki\n> ['Nushell''is''cool'] |str reverse\n╭───┬─────────╮\n│0│llehsuN│\n│1│si│\n│2│looc│\n╰───┴─────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_reverse.html](https://www.nushell.sh/commands/docs/str_reverse.html)"
- name: str screaming-snake-case
  summary: '> str screaming-snake-case {flags} ...rest'
  description: "# `str screaming-snake-case` for strings\n\nConvert a string to SCREAMING_SNAKE_CASE.\n\n## Signature\n\n`> str screaming-snake-case {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, convert strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nconvert a string to SCREAMING_SNAKE_CASE\n\n``` shiki\n>\"NuShell\"|str screaming-snake-case\nNU_SHELL\n```\n\nconvert a string to SCREAMING_SNAKE_CASE\n\n``` shiki\n>\"this_is_the_second_case\"|str screaming-snake-case\nTHIS_IS_THE_SECOND_CASE\n```\n\nconvert a string to SCREAMING_SNAKE_CASE\n\n``` shiki\n>\"this-is-the-first-case\"|str screaming-snake-case\nTHIS_IS_THE_FIRST_CASE\n```\n\nconvert a column from a table to SCREAMING_SNAKE_CASE\n\n``` shiki\n> [[lang, gems]; [nu_test, 100]] |str screaming-snake-caselang\n╭───┬─────────┬──────╮\n│# │  lang   │ gems │\n├───┼─────────┼──────┤\n│0│NU_TEST│100│\n╰───┴─────────┴──────╯\n```\n\n**Tips:** Command `str screaming-snake-case` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_screaming-snake-case.html](https://www.nushell.sh/commands/docs/str_screaming-snake-case.html)"
- name: str snake-case
  summary: '> str snake-case {flags} ...rest'
  description: "# `str snake-case` for strings\n\nConvert a string to snake_case.\n\n## Signature\n\n`> str snake-case {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, convert strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nconvert a string to snake_case\n\n``` shiki\n>\"NuShell\"|str snake-case\nnu_shell\n```\n\nconvert a string to snake_case\n\n``` shiki\n>\"this_is_the_second_case\"|str snake-case\nthis_is_the_second_case\n```\n\nconvert a string to snake_case\n\n``` shiki\n>\"this-is-the-first-case\"|str snake-case\nthis_is_the_first_case\n```\n\nconvert a column from a table to snake_case\n\n``` shiki\n> [[lang, gems]; [nuTest, 100]] |str snake-caselang\n╭───┬─────────┬──────╮\n│# │  lang   │ gems │\n├───┼─────────┼──────┤\n│0│nu_test│100│\n╰───┴─────────┴──────╯\n```\n\n**Tips:** Command `str snake-case` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_snake-case.html](https://www.nushell.sh/commands/docs/str_snake-case.html)"
- name: str starts-with
  summary: '> str starts-with {flags} (string) ...rest'
  description: "# `str starts-with` for strings\n\nCheck if an input starts with a string.\n\n## Signature\n\n`> str starts-with {flags} (string) ...rest`\n\n## Flags\n\n- `--ignore-case, -i`: search is case insensitive\n\n## Parameters\n\n- `string`: the string to match\n- `...rest`: For a data structure input, check strings at the given cell paths, and replace with result\n\n## Input/output types:\n\n| input          | output       |\n|----------------|--------------|\n| list\\<string\\> | list\\<bool\\> |\n| record         | record       |\n| string         | bool         |\n| table          | table        |\n\n## Examples\n\nChecks if input string starts with 'my'\n\n``` shiki\n>'my_library.rb'|str starts-with'my'\ntrue\n```\n\nChecks if input string starts with 'Car'\n\n``` shiki\n>'Cargo.toml'|str starts-with'Car'\ntrue\n```\n\nChecks if input string starts with '.toml'\n\n``` shiki\n>'Cargo.toml'|str starts-with'.toml'\nfalse\n```\n\nChecks if input string starts with 'cargo', case-insensitive\n\n``` shiki\n>'Cargo.toml'|str starts-with-i'cargo'\ntrue\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_starts-with.html](https://www.nushell.sh/commands/docs/str_starts-with.html)"
- name: str substring
  summary: '> str substring {flags} (range) ...rest'
  description: "# `str substring` for strings\n\nGet part of a string. Note that the start is included but the end is excluded, and that the first character of a string is index 0.\n\n## Signature\n\n`> str substring {flags} (range) ...rest`\n\n## Flags\n\n- `--grapheme-clusters, -g`: count indexes and split using grapheme clusters (all visible chars have length 1)\n- `--utf-8-bytes, -b`: count indexes and split using UTF-8 bytes (default; non-ASCII chars have length 2+)\n\n## Parameters\n\n- `range`: the indexes to substring \\[start end\\]\n- `...rest`: For a data structure input, turn strings at the given cell paths into substrings\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nGet a substring \"nushell\" from the text \"good nushell\" using a range\n\n``` shiki\n>'good nushell'|str substring5..12\nnushell\n```\n\nCount indexes and split using grapheme clusters\n\n``` shiki\n>'🇯🇵ほげ ふが ぴよ'|str substring-g4..6\nふが\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_substring.html](https://www.nushell.sh/commands/docs/str_substring.html)"
- name: str title-case
  summary: '> str title-case {flags} ...rest'
  description: "# `str title-case` for strings\n\nConvert a string to Title Case.\n\n## Signature\n\n`> str title-case {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, convert strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nconvert a string to Title Case\n\n``` shiki\n>'nu-shell'|str title-case\nNuShell\n```\n\nconvert a string to Title Case\n\n``` shiki\n>'this is a test case'|str title-case\nThisIsATestCase\n```\n\nconvert a column from a table to Title Case\n\n``` shiki\n> [[title, count]; ['nu test', 100]] |str title-casetitle\n╭───┬─────────┬───────╮\n│# │  title  │ count │\n├───┼─────────┼───────┤\n│0│NuTest│100│\n╰───┴─────────┴───────╯\n```\n\n**Tips:** Command `str title-case` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_title-case.html](https://www.nushell.sh/commands/docs/str_title-case.html)"
- name: str trim
  summary: '> str trim {flags} ...rest'
  description: "# `str trim` for strings\n\nTrim whitespace or specific character.\n\n## Signature\n\n`> str trim {flags} ...rest`\n\n## Flags\n\n- `--char, -c {string}`: character to trim (default: whitespace)\n- `--left, -l`: trims characters only from the beginning of the string\n- `--right, -r`: trims characters only from the end of the string\n\n## Parameters\n\n- `...rest`: For a data structure input, trim strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nTrim whitespace\n\n``` shiki\n>'Nu shell '|str trim\nNushell\n```\n\nTrim a specific character\n\n``` shiki\n>'=== Nu shell ==='|str trim-c'='|str trim\nNushell\n```\n\nTrim whitespace from the beginning of string\n\n``` shiki\n>' Nu shell '|str trim-l\nNushell\n```\n\nTrim a specific character\n\n``` shiki\n>'=== Nu shell ==='|str trim-c'='\nNushell\n```\n\nTrim whitespace from the end of string\n\n``` shiki\n>' Nu shell '|str trim-r\nNushell\n```\n\nTrim a specific character\n\n``` shiki\n>'=== Nu shell ==='|str trim-r-c'='\n===Nushell\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_trim.html](https://www.nushell.sh/commands/docs/str_trim.html)"
- name: str upcase
  summary: '> str upcase {flags} ...rest'
  description: "# `str upcase` for strings\n\nMake text uppercase.\n\n## Signature\n\n`> str upcase {flags} ...rest`\n\n## Parameters\n\n- `...rest`: For a data structure input, convert strings at the given cell paths\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nUpcase contents\n\n``` shiki\n>'nu'|str upcase\nNU\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/str_upcase.html](https://www.nushell.sh/commands/docs/str_upcase.html)"
- name: Strings
  summary: ''
  description: "# Strings\n\n| Command                                                        | Description                                                                                                                         |\n|----------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------|\n| [char](../docs/char#_)                                         | Output special characters (e.g., 'newline').                                                                                        |\n| [decode](../docs/decode#_)                                     | Decode bytes into a string.                                                                                                         |\n| [detect columns](../docs/detect_columns#_)                     | Attempt to automatically split text into multiple columns.                                                                          |\n| [encode](../docs/encode#_)                                     | Encode a string into bytes.                                                                                                         |\n| [format](../docs/format#_)                                     | Format columns into a string using a simple pattern.                                                                                |\n| [format duration](../docs/format_duration#_)                   | Outputs duration with a specified unit of time.                                                                                     |\n| [format filesize](../docs/format_filesize#_)                   | Converts a column of filesizes to some specified format.                                                                            |\n| [nu-check](../docs/nu-check#_)                                 | Validate and parse input content.                                                                                                   |\n| [nu-highlight](../docs/nu-highlight#_)                         | Syntax highlight the input string.                                                                                                  |\n| [parse](../docs/parse#_)                                       | Parse columns from string data using a simple pattern.                                                                              |\n| [print](../docs/print#_)                                       | Print the given values to stdout.                                                                                                   |\n| [size](../docs/size#_)                                         | Gather word count statistics on the text.                                                                                           |\n| [split](../docs/split#_)                                       | Split contents across desired subcommand (like row, column) via the separator.                                                      |\n| [split chars](../docs/split_chars#_)                           | Split a string into a list of characters.                                                                                           |\n| [split column](../docs/split_column#_)                         | Split a string into multiple columns using a separator.                                                                             |\n| [split row](../docs/split_row#_)                               | Split a string into multiple rows using a separator.                                                                                |\n| [split words](../docs/split_words#_)                           | Split a string's words into separate rows.                                                                                          |\n| [str](../docs/str#_)                                           | Various commands for working with string data.                                                                                      |\n| [str camel-case](../docs/str_camel-case#_)                     | Convert a string to camelCase.                                                                                                      |\n| [str capitalize](../docs/str_capitalize#_)                     | Capitalize first letter of text.                                                                                                    |\n| [str contains](../docs/str_contains#_)                         | Checks if string input contains a substring.                                                                                        |\n| [str distance](../docs/str_distance#_)                         | Compare two strings and return the edit distance/Levenshtein distance.                                                              |\n| [str downcase](../docs/str_downcase#_)                         | Make text lowercase.                                                                                                                |\n| [str ends-with](../docs/str_ends-with#_)                       | Check if an input ends with a string.                                                                                               |\n| [str expand](../docs/str_expand#_)                             | Generates all possible combinations defined in brace expansion syntax.                                                              |\n| [str index-of](../docs/str_index-of#_)                         | Returns start index of first occurrence of string in input, or -1 if no match.                                                      |\n| [str join](../docs/str_join#_)                                 | Concatenate multiple strings into a single string, with an optional separator between each.                                         |\n| [str kebab-case](../docs/str_kebab-case#_)                     | Convert a string to kebab-case.                                                                                                     |\n| [str length](../docs/str_length#_)                             | Output the length of any strings in the pipeline.                                                                                   |\n| [str pascal-case](../docs/str_pascal-case#_)                   | Convert a string to PascalCase.                                                                                                     |\n| [str replace](../docs/str_replace#_)                           | Find and replace text.                                                                                                              |\n| [str reverse](../docs/str_reverse#_)                           | Reverse every string in the pipeline.                                                                                               |\n| [str screaming-snake-case](../docs/str_screaming-snake-case#_) | Convert a string to SCREAMING_SNAKE_CASE.                                                                                           |\n| [str snake-case](../docs/str_snake-case#_)                     | Convert a string to snake_case.                                                                                                     |\n| [str starts-with](../docs/str_starts-with#_)                   | Check if an input starts with a string.                                                                                             |\n| [str substring](../docs/str_substring#_)                       | Get part of a string. Note that the start is included but the end is excluded, and that the first character of a string is index 0. |\n| [str title-case](../docs/str_title-case#_)                     | Convert a string to Title Case.                                                                                                     |\n| [str trim](../docs/str_trim#_)                                 | Trim whitespace or specific character.                                                                                              |\n| [str upcase](../docs/str_upcase#_)                             | Make text uppercase.                                                                                                                |\n| [url encode](../docs/url_encode#_)                             | Converts a string to a percent encoded web safe string.                                                                             |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/strings.html](https://www.nushell.sh/commands/categories/strings.html)"
- name: sys
  summary: '> sys {flags}'
  description: "# `sys` for system\n\nView information about the system.\n\n## Signature\n\n`> sys {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | record |\n\n## Examples\n\nShow info about the system\n\n``` shiki\n>sys\n```\n\nShow the os system name with get\n\n``` shiki\n> (sys).host|getname\n```\n\nShow the os system name\n\n``` shiki\n> (sys).host.name\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/sys.html](https://www.nushell.sh/commands/docs/sys.html)"
- name: System
  summary: ''
  description: "# System\n\n| Command                                    | Description                                                                             |\n|--------------------------------------------|-----------------------------------------------------------------------------------------|\n| [cd](../docs/cd#_)                         | Change directory.                                                                       |\n| [complete](../docs/complete#_)             | Capture the outputs and exit code from an external piped in command in a nushell table. |\n| [cp](../docs/cp#_)                         | Copy files.                                                                             |\n| [exec](../docs/exec#_)                     | Execute a command, replacing the current process.                                       |\n| [glob](../docs/glob#_)                     | Creates a list of files and/or folders based on the glob pattern provided.              |\n| [load-env](../docs/load-env#_)             | Loads an environment update from a record.                                              |\n| [ls](../docs/ls#_)                         | List the filenames, sizes, and modification times of items in a directory.              |\n| [mkdir](../docs/mkdir#_)                   | Make directories, creates intermediary directories as required.                         |\n| [mv](../docs/mv#_)                         | Move files or directories.                                                              |\n| [open](../docs/open#_)                     | Load a file into a cell, converting to table if possible (avoid by appending '--raw').  |\n| [ps](../docs/ps#_)                         | View information about system processes.                                                |\n| [registry query](../docs/registry_query#_) | Query the Windows registry.                                                             |\n| [rm](../docs/rm#_)                         | Remove files and directories.                                                           |\n| [run-external](../docs/run-external#_)     | Runs external command.                                                                  |\n| [save](../docs/save#_)                     | Save a file.                                                                            |\n| [start](../docs/start#_)                   | Open a folder, file or website in the default application or viewer.                    |\n| [sys](../docs/sys#_)                       | View information about the system.                                                      |\n| [touch](../docs/touch#_)                   | Creates one or more files.                                                              |\n| [ucp](../docs/ucp#_)                       | Copy files using uutils/coreutils cp.                                                   |\n| [watch](../docs/watch#_)                   | Watch for file changes and execute Nu code when they happen.                            |\n| [which](../docs/which#_)                   | Finds a program file, alias or custom command.                                          |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/system.html](https://www.nushell.sh/commands/categories/system.html)"
- name: table
  summary: '> table {flags}'
  description: "# `table` for viewers\n\nRender the table.\n\n## Signature\n\n`> table {flags} `\n\n## Flags\n\n- `--start-number, -n {int}`: row number to start viewing from\n- `--list, -l`: list available table modes/themes\n- `--width, -w {int}`: number of terminal columns wide (not output columns)\n- `--expand, -e`: expand the table structure in a light mode\n- `--expand-deep, -d {int}`: an expand limit of recursion which will take place\n- `--flatten, -`: Flatten simple arrays\n- `--flatten-separator, - {string}`: sets a separator when 'flatten' used\n- `--collapse, -c`: expand the table structure in collapse mode. Be aware collapse mode currently doesn't support width control\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nList the files in current directory, with indexes starting from 1.\n\n``` shiki\n>ls|table-n1\n```\n\nRender data in table view\n\n``` shiki\n> [[ab]; [12] [34]] |table\n╭───┬───┬───╮\n│# │ a │ b │\n├───┼───┼───┤\n│0│1│2│\n│1│3│4│\n╰───┴───┴───╯\n```\n\nRender data in table view (expanded)\n\n``` shiki\n> [[ab]; [12] [2 [44]]] |table--expand\n╭───┬───┬───────────╮\n│# │ a │     b     │\n├───┼───┼───────────┤\n│0│1│2│\n│1│2│╭───┬───╮│\n││││0│4││\n││││1│4││\n│││╰───┴───╯│\n╰───┴───┴───────────╯\n```\n\nRender data in table view (collapsed)\n\n``` shiki\n> [[ab]; [12] [2 [44]]] |table--collapse\n╭───┬───╮\n│a│b│\n├───┼───┤\n│1│2│\n├───┼───┤\n│2│4│\n│├───┤\n││4│\n╰───┴───╯\n```\n\n## Notes\n\nIf the table contains a column called 'index', this column is used as the table index instead of the usual continuous index.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/table.html](https://www.nushell.sh/commands/docs/table.html)"
- name: take
  summary: '> take {flags} (n)'
  description: "# `take` for filters\n\nTake only the first n elements of a list, or the first n bytes of a binary value.\n\n## Signature\n\n`> take {flags} (n)`\n\n## Parameters\n\n- `n`: starting from the front, the number of elements to return\n\n## Input/output types:\n\n| input       | output         |\n|-------------|----------------|\n| binary      | binary         |\n| list\\<any\\> | list\\<any\\>    |\n| range       | list\\<number\\> |\n| table       | table          |\n\n## Examples\n\nReturn the first item of a list/table\n\n``` shiki\n> [123] |take1\n╭───┬───╮\n│0│1│\n╰───┴───╯\n```\n\nReturn the first 2 items of a list/table\n\n``` shiki\n> [123] |take2\n╭───┬───╮\n│0│1│\n│1│2│\n╰───┴───╯\n```\n\nReturn the first two rows of a table\n\n``` shiki\n> [[editions]; [2015] [2018] [2021]] |take2\n╭───┬──────────╮\n│# │ editions │\n├───┼──────────┤\n│0│2015│\n│1│2018│\n╰───┴──────────╯\n```\n\nReturn the first 2 bytes of a binary value\n\n``` shiki\n>0x[012345] |take2\nLength:2 (0x2) bytes|printablewhitespaceascii_othernon_ascii\n00000000:0123•#\n```\n\nReturn the first 3 elements of a range\n\n``` shiki\n>1..10|take3\n╭───┬───╮\n│0│1│\n│1│2│\n│2│3│\n╰───┴───╯\n```\n\n## Subcommands:\n\n| name                         | type    | usage                                                 |\n|------------------------------|---------|-------------------------------------------------------|\n| [`take until`](take_until#_) | Builtin | Take elements of the input until a predicate is true. |\n| [`take while`](take_while#_) | Builtin | Take elements of the input while a predicate is true. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/take.html](https://www.nushell.sh/commands/docs/take.html)"
- name: take until
  summary: '> take until {flags} (predicate)'
  description: "# `take until` for filters\n\nTake elements of the input until a predicate is true.\n\n## Signature\n\n`> take until {flags} (predicate)`\n\n## Parameters\n\n- `predicate`: the predicate that element(s) must not match\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nTake until the element is positive\n\n``` shiki\n> [-1-291] |take until {|x| $x>0 }\n╭───┬────╮\n│0│-1│\n│1│-2│\n╰───┴────╯\n```\n\nTake until the element is positive using stored condition\n\n``` shiki\n>letcond= {|x| $x>0 }; [-1-291] |take until$cond\n╭───┬────╮\n│0│-1│\n│1│-2│\n╰───┴────╯\n```\n\nTake until the field value is positive\n\n``` shiki\n> [{a:-1} {a:-2} {a:9} {a:1}] |take until {|x| $x.a>0 }\n╭───┬────╮\n│# │ a  │\n├───┼────┤\n│0│-1│\n│1│-2│\n╰───┴────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/take_until.html](https://www.nushell.sh/commands/docs/take_until.html)"
- name: take while
  summary: '> take while {flags} (predicate)'
  description: "# `take while` for filters\n\nTake elements of the input while a predicate is true.\n\n## Signature\n\n`> take while {flags} (predicate)`\n\n## Parameters\n\n- `predicate`: the predicate that element(s) must match\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nTake while the element is negative\n\n``` shiki\n> [-1-291] |take while {|x| $x<0 }\n╭───┬────╮\n│0│-1│\n│1│-2│\n╰───┴────╯\n```\n\nTake while the element is negative using stored condition\n\n``` shiki\n>letcond= {|x| $x<0 }; [-1-291] |take while$cond\n╭───┬────╮\n│0│-1│\n│1│-2│\n╰───┴────╯\n```\n\nTake while the field value is negative\n\n``` shiki\n> [{a:-1} {a:-2} {a:9} {a:1}] |take while {|x| $x.a<0 }\n╭───┬────╮\n│# │ a  │\n├───┼────┤\n│0│-1│\n│1│-2│\n╰───┴────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/take_while.html](https://www.nushell.sh/commands/docs/take_while.html)"
- name: term size
  summary: '> term size {flags}'
  description: "# `term size` for platform\n\nReturns a record containing the number of columns (width) and rows (height) of the terminal.\n\n## Signature\n\n`> term size {flags} `\n\n## Input/output types:\n\n| input   | output                            |\n|---------|-----------------------------------|\n| nothing | record\\<columns: int, rows: int\\> |\n\n## Examples\n\nReturn the columns (width) and rows (height) of the terminal\n\n``` shiki\n>term size\n```\n\nReturn the columns (width) of the terminal\n\n``` shiki\n> (term size).columns\n```\n\nReturn the rows (height) of the terminal\n\n``` shiki\n> (term size).rows\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/term_size.html](https://www.nushell.sh/commands/docs/term_size.html)"
- name: timeit
  summary: '> timeit {flags} (command)'
  description: "# `timeit` for debug\n\nTime the running time of a block.\n\n## Signature\n\n`> timeit {flags} (command)`\n\n## Parameters\n\n- `command`: the command or block to run\n\n## Input/output types:\n\n| input   | output   |\n|---------|----------|\n| any     | duration |\n| nothing | duration |\n\n## Examples\n\nTimes a command within a closure\n\n``` shiki\n>timeit { sleep500ms }\n```\n\nTimes a command using an existing input\n\n``` shiki\n>http gethttps://www.nushell.sh/book/|timeit { split chars }\n```\n\nTimes a command invocation\n\n``` shiki\n>timeitls-la\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/timeit.html](https://www.nushell.sh/commands/docs/timeit.html)"
- name: to
  summary: '> to {flags}'
  description: "# `to` for formats\n\nTranslate structured data to a format.\n\n## Signature\n\n`> to {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                   | type    | usage                                                         |\n|------------------------|---------|---------------------------------------------------------------|\n| [`to csv`](to_csv#_)   | Builtin | Convert table into .csv text .                                |\n| [`to html`](to_html#_) | Builtin | Convert table into simple HTML.                               |\n| [`to json`](to_json#_) | Builtin | Converts table data into JSON text.                           |\n| [`to md`](to_md#_)     | Builtin | Convert table into simple Markdown.                           |\n| [`to nuon`](to_nuon#_) | Builtin | Converts table data into Nuon (Nushell Object Notation) text. |\n| [`to text`](to_text#_) | Builtin | Converts data into simple text.                               |\n| [`to toml`](to_toml#_) | Builtin | Convert record into .toml text.                               |\n| [`to tsv`](to_tsv#_)   | Builtin | Convert table into .tsv text.                                 |\n| [`to xml`](to_xml#_)   | Builtin | Convert special record structure into .xml text.              |\n| [`to yaml`](to_yaml#_) | Builtin | Convert table into .yaml/.yml text.                           |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to.html](https://www.nushell.sh/commands/docs/to.html)"
- name: to csv
  summary: '> to csv {flags}'
  description: "# `to csv` for formats\n\nConvert table into .csv text .\n\n## Signature\n\n`> to csv {flags} `\n\n## Flags\n\n- `--separator, -s {string}`: a character to separate columns, defaults to ','\n- `--noheaders, -n`: do not output the columns names as the first row\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | string |\n| table  | string |\n\n## Examples\n\nOutputs an CSV string representing the contents of this table\n\n``` shiki\n> [[foobar]; [12]] |to csv\nfoo,bar\n1,2\n```\n\nOutputs an CSV string representing the contents of this table\n\n``` shiki\n> [[foobar]; [12]] |to csv-s';'\nfoo;bar\n1;2\n```\n\nOutputs an CSV string representing the contents of this record\n\n``` shiki\n> {a:1b:2} |to csv\na,b\n1,2\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_csv.html](https://www.nushell.sh/commands/docs/to_csv.html)"
- name: to html
  summary: '> to html {flags}'
  description: "# `to html` for formats\n\nConvert table into simple HTML.\n\n## Signature\n\n`> to html {flags} `\n\n## Flags\n\n- `--html-color, -c`: change ansi colors to html colors\n- `--no-color, -n`: remove all ansi colors in output\n- `--dark, -d`: indicate your background color is a darker color\n- `--partial, -p`: only output the html for the content itself\n- `--theme, -t {string}`: the name of the theme to use (github, blulocolight, ...)\n- `--list, -l`: produce a color table of all available themes\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | string |\n\n## Examples\n\nOutputs an HTML string representing the contents of this table\n\n``` shiki\n> [[foobar]; [12]] |to html\n<html><style>body { background-color:white;color:black; }</style><body><table><thead><tr><th>foo</th><th>bar</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table></body></html>\n```\n\nOptionally, only output the html for the content itself\n\n``` shiki\n> [[foobar]; [12]] |to html--partial\n<divstyle=\"background-color:white;color:black;\"><table><thead><tr><th>foo</th><th>bar</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table></div>\n```\n\nOptionally, output the string with a dark background\n\n``` shiki\n> [[foobar]; [12]] |to html--dark\n<html><style>body { background-color:black;color:white; }</style><body><table><thead><tr><th>foo</th><th>bar</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr></tbody></table></body></html>\n```\n\n## Notes\n\nScreenshots of the themes can be browsed here: https://github.com/mbadolato/iTerm2-Color-Schemes.\n\n**Tips:** Command `to html` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_html.html](https://www.nushell.sh/commands/docs/to_html.html)"
- name: to json
  summary: '> to json {flags}'
  description: "# `to json` for formats\n\nConverts table data into JSON text.\n\n## Signature\n\n`> to json {flags} `\n\n## Flags\n\n- `--raw, -r`: remove all of the whitespace\n- `--indent, -i {number}`: specify indentation width\n- `--tabs, -t {number}`: specify indentation tab quantity\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | string |\n\n## Examples\n\nOutputs a JSON string, with default indentation, representing the contents of this table\n\n``` shiki\n> [abc] |to json\n[\n\"a\",\n\"b\",\n\"c\"\n]\n```\n\nOutputs a JSON string, with 4-space indentation, representing the contents of this table\n\n``` shiki\n> [JoeBobSam] |to json-i4\n[\n\"Joe\",\n\"Bob\",\n\"Sam\"\n]\n```\n\nOutputs an unformatted JSON string representing the contents of this table\n\n``` shiki\n> [123] |to json-r\n[1,2,3]\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_json.html](https://www.nushell.sh/commands/docs/to_json.html)"
- name: to md
  summary: '> to md {flags}'
  description: "# `to md` for formats\n\nConvert table into simple Markdown.\n\n## Signature\n\n`> to md {flags} `\n\n## Flags\n\n- `--pretty, -p`: Formats the Markdown table to vertically align items\n- `--per-element, -e`: treat each row as markdown syntax element\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | string |\n\n## Examples\n\nOutputs an MD string representing the contents of this table\n\n``` shiki\n> [[foobar]; [12]] |to md\n|foo|bar|\n|-|-|\n|1|2|\n```\n\nOptionally, output a formatted markdown string\n\n``` shiki\n> [[foobar]; [12]] |to md--pretty\n| foo|bar|\n| ---|---|\n| 1|2|\n```\n\nTreat each row as a markdown element\n\n``` shiki\n> [{\"H1\":\"Welcome to Nushell\" } [[foobar]; [12]]] |to md--per-element--pretty\n# Welcome to Nushell\n| foo|bar|\n| ---|---|\n| 1|2|\n```\n\nRender a list\n\n``` shiki\n> [012] |to md--pretty\n0\n1\n2\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_md.html](https://www.nushell.sh/commands/docs/to_md.html)"
- name: to nuon
  summary: '> to nuon {flags}'
  description: "# `to nuon` for formats\n\nConverts table data into Nuon (Nushell Object Notation) text.\n\n## Signature\n\n`> to nuon {flags} `\n\n## Flags\n\n- `--raw, -r`: remove all of the whitespace (default behaviour and overwrites -i and -t)\n- `--indent, -i {number}`: specify indentation width\n- `--tabs, -t {number}`: specify indentation tab quantity\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | string |\n\n## Examples\n\nOutputs a NUON string representing the contents of this list, compact by default\n\n``` shiki\n> [123] |to nuon\n[1, 2, 3]\n```\n\nOutputs a NUON array of integers, with pretty indentation\n\n``` shiki\n> [123] |to nuon--indent2\n[\n1,\n2,\n3\n]\n```\n\nOverwrite any set option with --raw\n\n``` shiki\n> [123] |to nuon--indent2--raw\n[1, 2, 3]\n```\n\nA more complex record with multiple data types\n\n``` shiki\n> {date:2000-01-01, data: [1 [23] 4.56]} |to nuon--indent2\n{\ndate:2000-01-01T00:00:00+00:00,\ndata: [\n1,\n    [\n2,\n3\n    ],\n4.56\n  ]\n}\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_nuon.html](https://www.nushell.sh/commands/docs/to_nuon.html)"
- name: to text
  summary: '> to text {flags}'
  description: "# `to text` for formats\n\nConverts data into simple text.\n\n## Signature\n\n`> to text {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | string |\n\n## Examples\n\nOutputs data as simple text\n\n``` shiki\n>1|to text\n1\n```\n\nOutputs external data as simple text\n\n``` shiki\n>githelp-a|lines|find-r'^ '|to text\n```\n\nOutputs records as simple text\n\n``` shiki\n>ls|to text\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_text.html](https://www.nushell.sh/commands/docs/to_text.html)"
- name: to toml
  summary: '> to toml {flags}'
  description: "# `to toml` for formats\n\nConvert record into .toml text.\n\n## Signature\n\n`> to toml {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | string |\n\n## Examples\n\nOutputs an TOML string representing the contents of this record\n\n``` shiki\n> {foo:1bar:'qwe'} |to toml\nbar=\"qwe\"\nfoo=1\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_toml.html](https://www.nushell.sh/commands/docs/to_toml.html)"
- name: to tsv
  summary: '> to tsv {flags}'
  description: "# `to tsv` for formats\n\nConvert table into .tsv text.\n\n## Signature\n\n`> to tsv {flags} `\n\n## Flags\n\n- `--noheaders, -n`: do not output the column names as the first row\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | string |\n| table  | string |\n\n## Examples\n\nOutputs an TSV string representing the contents of this table\n\n``` shiki\n> [[foobar]; [12]] |to tsv\nfoobar\n12\n```\n\nOutputs an TSV string representing the contents of this record\n\n``` shiki\n> {a:1b:2} |to tsv\nab\n12\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_tsv.html](https://www.nushell.sh/commands/docs/to_tsv.html)"
- name: to xml
  summary: '> to xml {flags}'
  description: "# `to xml` for formats\n\nConvert special record structure into .xml text.\n\n## Signature\n\n`> to xml {flags} `\n\n## Flags\n\n- `--pretty, -p {int}`: Formats the XML text with the provided indentation setting\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | string |\n\n## Examples\n\nOutputs an XML string representing the contents of this table\n\n``` shiki\n> {tag:noteattributes: {} content: [{tag:rememberattributes: {} content: [{tag:nullattrs:nullcontent:Event}]}]} |to xml\n<note><remember>Event</remember></note>\n```\n\nWhen formatting xml null and empty record fields can be omitted and strings can be written without a wrapping record\n\n``` shiki\n> {tag:notecontent: [{tag:remembercontent: [Event]}]} |to xml\n<note><remember>Event</remember></note>\n```\n\nOptionally, formats the text with a custom indentation setting\n\n``` shiki\n> {tag:notecontent: [{tag:remembercontent: [Event]}]} |to xml-p3\n<note>\n<remember>Event</remember>\n</note>\n```\n\n## Notes\n\nEvery XML entry is represented via a record with tag, attribute and content fields. To represent different types of entries different values must be written to this fields:\n\n1.  Tag entry: `{tag: <tag name> attrs: {<attr name>: \"<string value>\" ...} content: [<entries>]}`\n2.  Comment entry: `{tag: '!' attrs: null content: \"<comment string>\"}`\n3.  Processing instruction (PI): `{tag: '?<pi name>' attrs: null content: \"<pi content string>\"}`\n4.  Text: `{tag: null attrs: null content: \"<text>\"}`. Or as plain `<text>` instead of record.\n\nAdditionally any field which is: empty record, empty list or null, can be omitted.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_xml.html](https://www.nushell.sh/commands/docs/to_xml.html)"
- name: to yaml
  summary: '> to yaml {flags}'
  description: "# `to yaml` for formats\n\nConvert table into .yaml/.yml text.\n\n## Signature\n\n`> to yaml {flags} `\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | string |\n\n## Examples\n\nOutputs an YAML string representing the contents of this table\n\n``` shiki\n> [[foobar]; [\"1\"\"2\"]] |to yaml\n-foo:'1'\nbar:'2'\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/to_yaml.html](https://www.nushell.sh/commands/docs/to_yaml.html)"
- name: touch
  summary: '> touch {flags} (filename) ...rest'
  description: "# `touch` for filesystem\n\nCreates one or more files.\n\n## Signature\n\n`> touch {flags} (filename) ...rest`\n\n## Flags\n\n- `--reference, -r {string}`: change the file or directory time to the time of the reference file/directory\n- `--modified, -m`: change the modification time of the file or directory. If no timestamp, date or reference file/directory is given, the current time is used\n- `--access, -a`: change the access time of the file or directory. If no timestamp, date or reference file/directory is given, the current time is used\n- `--no-create, -c`: do not create the file if it does not exist\n\n## Parameters\n\n- `filename`: the path of the file you want to create\n- `...rest`: additional files to create\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nCreates \"fixture.json\"\n\n``` shiki\n>touchfixture.json\n```\n\nCreates files a, b and c\n\n``` shiki\n>touchabc\n```\n\nChanges the last modified time of \"fixture.json\" to today's date\n\n``` shiki\n>touch-mfixture.json\n```\n\nChanges the last modified time of files a, b and c to a date\n\n``` shiki\n>touch-m-d\"yesterday\"abc\n```\n\nChanges the last modified time of file d and e to \"fixture.json\"'s last modified time\n\n``` shiki\n>touch-m-rfixture.jsonde\n```\n\nChanges the last accessed time of \"fixture.json\" to a date\n\n``` shiki\n>touch-a-d\"August 24, 2019; 12:30:30\"fixture.json\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/touch.html](https://www.nushell.sh/commands/docs/touch.html)"
- name: transpose
  summary: '> transpose {flags} ...rest'
  description: "# `transpose` for filters\n\nTransposes the table contents so rows become columns and columns become rows.\n\n## Signature\n\n`> transpose {flags} ...rest`\n\n## Flags\n\n- `--header-row, -r`: treat the first row as column names\n- `--ignore-titles, -i`: don't transpose the column names into values\n- `--as-record, -d`: transfer to record if the result is a table and contains only one row\n- `--keep-last, -l`: on repetition of record fields due to `header-row`, keep the last value obtained\n- `--keep-all, -a`: on repetition of record fields due to `header-row`, keep all the values obtained\n\n## Parameters\n\n- `...rest`: the names to give columns once transposed\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | table  |\n| table  | any    |\n\n## Examples\n\nTransposes the table contents with default column names\n\n``` shiki\n> [[c1c2]; [12]] |transpose\n╭───┬─────────┬─────────╮\n│# │ column0 │ column1 │\n├───┼─────────┼─────────┤\n│0│c1│1│\n│1│c2│2│\n╰───┴─────────┴─────────╯\n```\n\nTransposes the table contents with specified column names\n\n``` shiki\n> [[c1c2]; [12]] |transposekeyval\n╭───┬─────┬─────╮\n│# │ key │ val │\n├───┼─────┼─────┤\n│0│c1│1│\n│1│c2│2│\n╰───┴─────┴─────╯\n```\n\nTransposes the table without column names and specify a new column name\n\n``` shiki\n> [[c1c2]; [12]] |transpose-ival\n╭───┬─────╮\n│# │ val │\n├───┼─────┤\n│0│1│\n│1│2│\n╰───┴─────╯\n```\n\nTransfer back to record with -d flag\n\n``` shiki\n> {c1:1, c2:2} |transpose|transpose-i-r-d\n╭────┬───╮\n│c1│1│\n│c2│2│\n╰────┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/transpose.html](https://www.nushell.sh/commands/docs/transpose.html)"
- name: try
  summary: '> try {flags} (try_block) (catch_block)'
  description: "# `try` for core\n\nTry to run a block, if it fails optionally run a catch block.\n\n## Signature\n\n`> try {flags} (try_block) (catch_block)`\n\n## Parameters\n\n- `try_block`: block to run\n- `catch_block`: block to run if try block fails\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nTry to run a missing command\n\n``` shiki\n>try { asdfasdf }\n```\n\nTry to run a missing command\n\n``` shiki\n>try { asdfasdf } catch { 'missing' }\nmissing\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/try.html](https://www.nushell.sh/commands/docs/try.html)"
- name: tutor
  summary: '> tutor {flags} (search)'
  description: "# `tutor` for misc\n\nRun the tutorial. To begin, run: tutor.\n\n## Signature\n\n`> tutor {flags} (search)`\n\n## Flags\n\n- `--find, -f {string}`: Search tutorial for a phrase\n\n## Parameters\n\n- `search`: item to search for, or 'list' to list available tutorials\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nBegin the tutorial\n\n``` shiki\n>tutorbegin\n```\n\nSearch a tutorial by phrase\n\n``` shiki\n>tutor-f\"$in\"\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/tutor.html](https://www.nushell.sh/commands/docs/tutor.html)"
- name: ucp
  summary: '> ucp {flags} ...rest'
  description: "# `ucp` for filesystem\n\nCopy files using uutils/coreutils cp.\n\n## Signature\n\n`> ucp {flags} ...rest`\n\n## Flags\n\n- `--recursive, -r`: copy directories recursively\n- `--verbose, -v`: explicitly state what is being done\n- `--force, -f`: if an existing destination file cannot be opened, remove it and try again (this option is ignored when the -n option is also used). currently not implemented for windows\n- `--interactive, -i`: ask before overwriting files\n- `--progress, -p`: display a progress bar\n- `--no-clobber, -n`: do not overwrite an existing file\n- `--debug, -`: explain how a file is copied. Implies -v\n\n## Parameters\n\n- `...rest`: Copy SRC file/s to DEST\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nCopy myfile to dir_b\n\n``` shiki\n>ucpmyfiledir_b\n```\n\nRecursively copy dir_a to dir_b\n\n``` shiki\n>ucp-rdir_adir_b\n```\n\nRecursively copy dir_a to dir_b, and print the feedbacks\n\n``` shiki\n>ucp-r-vdir_adir_b\n```\n\nMove many files into a directory\n\n``` shiki\n>ucp*.txtdir_a\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/ucp.html](https://www.nushell.sh/commands/docs/ucp.html)"
- name: uniq
  summary: '> uniq {flags}'
  description: "# `uniq` for filters\n\nReturn the distinct values in the input.\n\n## Signature\n\n`> uniq {flags} `\n\n## Flags\n\n- `--count, -c`: Return a table containing the distinct input values together with their counts\n- `--repeated, -d`: Return the input values that occur more than once\n- `--ignore-case, -i`: Compare input values case-insensitively\n- `--unique, -u`: Return the input values that occur once only\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n\n## Examples\n\nReturn the distinct values of a list/table (remove duplicates so that each value occurs once only)\n\n``` shiki\n> [2334] |uniq\n╭───┬───╮\n│0│2│\n│1│3│\n│2│4│\n╰───┴───╯\n```\n\nReturn the input values that occur more than once\n\n``` shiki\n> [122] |uniq-d\n╭───┬───╮\n│0│2│\n╰───┴───╯\n```\n\nReturn the input values that occur once only\n\n``` shiki\n> [122] |uniq-u\n╭───┬───╮\n│0│1│\n╰───┴───╯\n```\n\nIgnore differences in case when comparing input values\n\n``` shiki\n> ['hello''goodbye''Hello'] |uniq-i\n╭───┬─────────╮\n│0│hello│\n│1│goodbye│\n╰───┴─────────╯\n```\n\nReturn a table containing the distinct input values together with their counts\n\n``` shiki\n> [122] |uniq-c\n╭───┬───────┬───────╮\n│# │ value │ count │\n├───┼───────┼───────┤\n│0│1│1│\n│1│2│2│\n╰───┴───────┴───────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/uniq.html](https://www.nushell.sh/commands/docs/uniq.html)"
- name: uniq-by
  summary: '> uniq-by {flags} ...rest'
  description: "# `uniq-by` for filters\n\nReturn the distinct values in the input by the given column(s).\n\n## Signature\n\n`> uniq-by {flags} ...rest`\n\n## Flags\n\n- `--count, -c`: Return a table containing the distinct input values together with their counts\n- `--repeated, -d`: Return the input values that occur more than once\n- `--ignore-case, -i`: Ignore differences in case when comparing input values\n- `--unique, -u`: Return the input values that occur once only\n\n## Parameters\n\n- `...rest`: the column(s) to filter by\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| table       | table       |\n\n## Examples\n\nGet rows from table filtered by column uniqueness\n\n``` shiki\n> [[fruitcount]; [apple9] [apple2] [pear3] [orange7]] |uniq-byfruit\n╭───┬────────┬───────╮\n│# │ fruit  │ count │\n├───┼────────┼───────┤\n│0│apple│9│\n│1│pear│3│\n│2│orange│7│\n╰───┴────────┴───────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/uniq-by.html](https://www.nushell.sh/commands/docs/uniq-by.html)"
- name: update
  summary: '> update {flags} (field) (replacement value)'
  description: "# `update` for filters\n\nUpdate an existing column to have a new value.\n\n## Signature\n\n`> update {flags} (field) (replacement value)`\n\n## Parameters\n\n- `field`: the name of the column to update\n- `replacement value`: the new value to give the cell(s), or a closure to create the value\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| record      | record      |\n| table       | table       |\n\n## Examples\n\nUpdate a column value\n\n``` shiki\n> {'name':'nu', 'stars':5} |updatename'Nushell'\n╭───────┬─────────╮\n│name│Nushell│\n│stars│5│\n╰───────┴─────────╯\n```\n\nUse in closure form for more involved updating logic\n\n``` shiki\n> [[countfruit]; [1'apple']] |enumerate|updateitem.count {|e| ($e.item.fruit|str length) +$e.index } |getitem\n╭───┬───────┬───────╮\n│# │ count │ fruit │\n├───┼───────┼───────┤\n│0│5│apple│\n╰───┴───────┴───────╯\n```\n\nAlter each value in the 'authors' column to use a single string instead of a list\n\n``` shiki\n> [[project, authors]; ['nu', ['Andrés', 'JT', 'Yehuda']]] |updateauthors {|row| $row.authors|str join','}\n╭───┬─────────┬──────────────────╮\n│# │ project │     authors      │\n├───┼─────────┼──────────────────┤\n│0│nu│Andrés,JT,Yehuda│\n╰───┴─────────┴──────────────────╯\n```\n\nYou can also use a simple command to update 'authors' to a single string\n\n``` shiki\n> [[project, authors]; ['nu', ['Andrés', 'JT', 'Yehuda']]] |updateauthors {|| str join','}\n╭───┬─────────┬──────────────────╮\n│# │ project │     authors      │\n├───┼─────────┼──────────────────┤\n│0│nu│Andrés,JT,Yehuda│\n╰───┴─────────┴──────────────────╯\n```\n\n## Subcommands:\n\n| name                             | type    | usage                   |\n|----------------------------------|---------|-------------------------|\n| [`update cells`](update_cells#_) | Builtin | Update the table cells. |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/update.html](https://www.nushell.sh/commands/docs/update.html)"
- name: update cells
  summary: '> update cells {flags} (closure)'
  description: "# `update cells` for filters\n\nUpdate the table cells.\n\n## Signature\n\n`> update cells {flags} (closure)`\n\n## Flags\n\n- `--columns, -c {table}`: list of columns to update\n\n## Parameters\n\n- `closure`: the closure to run an update for each cell\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| table | table  |\n\n## Examples\n\nUpdate the zero value cells to empty strings.\n\n``` shiki\n> [\n        [\"2021-04-16\", \"2021-06-10\", \"2021-09-18\", \"2021-10-15\", \"2021-11-16\", \"2021-11-17\", \"2021-11-18\"];\n        [          37,            0,            0,            0,           37,            0,            0]\n    ] |update cells { |value|\nif$value==0 {\n\"\"\n          } else {\n$value\n          }\n    }\n╭──────┬───────────────┬───────────────┬───────────────┬───────────────┬──────────────┬──────────────┬──────────────╮\n│# │  2021-04-16   │  2021-06-10   │  2021-09-18   │  2021-10-15   │  2021-11-16  │  2021-11-17  │  2021-11-18  │\n├──────┼───────────────┼───────────────┼───────────────┼───────────────┼──────────────┼──────────────┼──────────────┤\n│0│37││││37│││\n╰──────┴───────────────┴───────────────┴───────────────┴───────────────┴──────────────┴──────────────┴──────────────╯\n```\n\nUpdate the zero value cells to empty strings in 2 last columns.\n\n``` shiki\n> [\n        [\"2021-04-16\", \"2021-06-10\", \"2021-09-18\", \"2021-10-15\", \"2021-11-16\", \"2021-11-17\", \"2021-11-18\"];\n        [          37,            0,            0,            0,           37,            0,            0]\n    ] |update cells-c [\"2021-11-18\", \"2021-11-17\"] { |value|\nif$value==0 {\n\"\"\n            } else {\n$value\n            }\n    }\n╭──────┬───────────────┬───────────────┬───────────────┬───────────────┬──────────────┬──────────────┬──────────────╮\n│# │  2021-04-16   │  2021-06-10   │  2021-09-18   │  2021-10-15   │  2021-11-16  │  2021-11-17  │  2021-11-18  │\n├──────┼───────────────┼───────────────┼───────────────┼───────────────┼──────────────┼──────────────┼──────────────┤\n│0│37│0│0│0│37│││\n╰──────┴───────────────┴───────────────┴───────────────┴───────────────┴──────────────┴──────────────┴──────────────╯\n```\n\n**Tips:** Command `update cells` was not included in the official binaries by default, you have to build it with `--features=extra` flag\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/update_cells.html](https://www.nushell.sh/commands/docs/update_cells.html)"
- name: upsert
  summary: '> upsert {flags} (field) (replacement value)'
  description: "# `upsert` for filters\n\nUpdate an existing column to have a new value, or insert a new column.\n\n## Signature\n\n`> upsert {flags} (field) (replacement value)`\n\n## Parameters\n\n- `field`: the name of the column to update or insert\n- `replacement value`: the new value to give the cell(s), or a closure to create the value\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| record      | record      |\n| table       | table       |\n\n## Examples\n\nUpdate a record's value\n\n``` shiki\n> {'name':'nu', 'stars':5} |upsertname'Nushell'\n╭───────┬─────────╮\n│name│Nushell│\n│stars│5│\n╰───────┴─────────╯\n```\n\nUpdate each row of a table\n\n``` shiki\n> [[namelang]; [Nushell''] [Reedline'']] |upsertlang'Rust'\n╭───┬──────────┬──────╮\n│# │   name   │ lang │\n├───┼──────────┼──────┤\n│0│Nushell│Rust│\n│1│Reedline│Rust│\n╰───┴──────────┴──────╯\n```\n\nInsert a new entry into a single record\n\n``` shiki\n> {'name':'nu', 'stars':5} |upsertlanguage'Rust'\n╭──────────┬──────╮\n│name│nu│\n│stars│5│\n│language│Rust│\n╰──────────┴──────╯\n```\n\nUse in closure form for more involved updating logic\n\n``` shiki\n> [[countfruit]; [1'apple']] |enumerate|upsertitem.count {|e| ($e.item.fruit|str length) +$e.index } |getitem\n╭───┬───────┬───────╮\n│# │ count │ fruit │\n├───┼───────┼───────┤\n│0│5│apple│\n╰───┴───────┴───────╯\n```\n\nUpsert an int into a list, updating an existing value based on the index\n\n``` shiki\n> [123] |upsert02\n╭───┬───╮\n│0│2│\n│1│2│\n│2│3│\n╰───┴───╯\n```\n\nUpsert an int into a list, inserting a new value based on the index\n\n``` shiki\n> [123] |upsert34\n╭───┬───╮\n│0│1│\n│1│2│\n│2│3│\n│3│4│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/upsert.html](https://www.nushell.sh/commands/docs/upsert.html)"
- name: url
  summary: '> url {flags}'
  description: "# `url` for network\n\nVarious commands for working with URLs.\n\n## Signature\n\n`> url {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                                   | type    | usage                                                                 |\n|----------------------------------------|---------|-----------------------------------------------------------------------|\n| [`url build-query`](url_build-query#_) | Builtin | Converts record or table into query string applying percent-encoding. |\n| [`url encode`](url_encode#_)           | Builtin | Converts a string to a percent encoded web safe string.               |\n| [`url join`](url_join#_)               | Builtin | Converts a record to url.                                             |\n| [`url parse`](url_parse#_)             | Builtin | Parses a url.                                                         |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/url.html](https://www.nushell.sh/commands/docs/url.html)"
- name: url build-query
  summary: '> url build-query {flags}'
  description: "# `url build-query` for network\n\nConverts record or table into query string applying percent-encoding.\n\n## Signature\n\n`> url build-query {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | string |\n| table  | string |\n\n## Examples\n\nOutputs a query string representing the contents of this record\n\n``` shiki\n> { mode:normaluserid:31415 } |url build-query\nmode=normal&userid=31415\n```\n\nOutputs a query string representing the contents of this 1-row table\n\n``` shiki\n> [[foobar]; [\"1\"\"2\"]] |url build-query\nfoo=1&bar=2\n```\n\nOutputs a query string representing the contents of this record\n\n``` shiki\n> {a:\"AT&T\", b:\"AT T\"} |url build-query\na=AT%26T&b=AT+T\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/url_build-query.html](https://www.nushell.sh/commands/docs/url_build-query.html)"
- name: url encode
  summary: '> url encode {flags} ...rest'
  description: "# `url encode` for strings\n\nConverts a string to a percent encoded web safe string.\n\n## Signature\n\n`> url encode {flags} ...rest`\n\n## Flags\n\n- `--all, -a`: encode all non-alphanumeric chars including `/`, `.`, `:`\n\n## Parameters\n\n- `...rest`: For a data structure input, check strings at the given cell paths, and replace with result\n\n## Input/output types:\n\n| input          | output         |\n|----------------|----------------|\n| list\\<string\\> | list\\<string\\> |\n| record         | record         |\n| string         | string         |\n| table          | table          |\n\n## Examples\n\nEncode a url with escape characters\n\n``` shiki\n>'https://example.com/foo bar'|url encode\nhttps://example.com/foo%20bar\n```\n\nEncode multiple urls with escape characters in list\n\n``` shiki\n> ['https://example.com/foo bar''https://example.com/a>b''中文字/eng/12 34'] |url encode\n╭───┬─────────────────────────────────────────╮\n│0│https://example.com/foo%20bar│\n│1│https://example.com/a%3Eb│\n│2│%E4%B8%AD%E6%96%87%E5%AD%97/eng/12%2034│\n╰───┴─────────────────────────────────────────╯\n```\n\nEncode all non alphanumeric chars with all flag\n\n``` shiki\n>'https://example.com/foo bar'|url encode--all\nhttps%3A%2F%2Fexample%2Ecom%2Ffoo%20bar\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/url_encode.html](https://www.nushell.sh/commands/docs/url_encode.html)"
- name: url join
  summary: '> url join {flags}'
  description: "# `url join` for network\n\nConverts a record to url.\n\n## Signature\n\n`> url join {flags} `\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | string |\n\n## Examples\n\nOutputs a url representing the contents of this record\n\n``` shiki\n> {\n\"scheme\":\"http\",\n\"username\":\"\",\n\"password\":\"\",\n\"host\":\"www.pixiv.net\",\n\"port\":\"\",\n\"path\":\"/member_illust.php\",\n\"query\":\"mode=medium&illust_id=99260204\",\n\"fragment\":\"\",\n\"params\":\n        {\n\"mode\":\"medium\",\n\"illust_id\":\"99260204\"\n        }\n    } |url join\nhttp://www.pixiv.net/member_illust.php?mode=medium&illust_id=99260204\n```\n\nOutputs a url representing the contents of this record\n\n``` shiki\n> {\n\"scheme\":\"http\",\n\"username\":\"user\",\n\"password\":\"pwd\",\n\"host\":\"www.pixiv.net\",\n\"port\":\"1234\",\n\"query\":\"test=a\",\n\"fragment\":\"\"\n    } |url join\nhttp://user:pwd@www.pixiv.net:1234?test=a\n```\n\nOutputs a url representing the contents of this record\n\n``` shiki\n> {\n\"scheme\":\"http\",\n\"host\":\"www.pixiv.net\",\n\"port\":\"1234\",\n\"path\":\"user\",\n\"fragment\":\"frag\"\n    } |url join\nhttp://www.pixiv.net:1234/user#frag\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/url_join.html](https://www.nushell.sh/commands/docs/url_join.html)"
- name: url parse
  summary: '> url parse {flags} ...rest'
  description: "# `url parse` for network\n\nParses a url.\n\n## Signature\n\n`> url parse {flags} ...rest`\n\n## Parameters\n\n- `...rest`: optionally operate by cell path\n\n## Input/output types:\n\n| input  | output |\n|--------|--------|\n| record | record |\n| string | record |\n| table  | table  |\n\n## Examples\n\nParses a url\n\n``` shiki\n>'http://user123:pass567@www.example.com:8081/foo/bar?param1=section&p2=&f[name]=vldc#hello'|url parse\n╭──────────┬─────────────────────────────────╮\n│scheme│http│\n│username│user123│\n│password│pass567│\n│host│www.example.com│\n│port│8081│\n│path│/foo/bar│\n│query│param1=section&p2=&f[name]=vldc│\n│fragment│hello│\n││╭─────────┬─────────╮│\n│params││param1│section││\n│││p2│││\n│││f[name] │vldc││\n││╰─────────┴─────────╯│\n╰──────────┴─────────────────────────────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/url_parse.html](https://www.nushell.sh/commands/docs/url_parse.html)"
- name: use
  summary: '> use {flags} (module) ...rest'
  description: "# `use` for core\n\nUse definitions from a module, making them available in your shell.\n\n## Signature\n\n`> use {flags} (module) ...rest`\n\n## Parameters\n\n- `module`: Module or module file\n- `...rest`: Which members of the module to import\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nDefine a custom command in a module and call it\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" } };usespamfoo;foo\nfoo\n```\n\nDefine a custom command that participates in the environment in a module and call it\n\n``` shiki\n>modulefoo { export def-envbar [] { $env.FOO_BAR=\"BAZ\" } };usefoobar;bar;$env.FOO_BAR\nBAZ\n```\n\nUse a plain module name to import its definitions qualified by the module name\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" };export defbar [] { \"bar\" } };usespam; (spamfoo) + (spambar)\nfoobar\n```\n\nSpecify \\* to use all definitions in a module\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" };export defbar [] { \"bar\" } };usespam*; (foo) + (bar)\nfoobar\n```\n\nTo use commands with spaces, like subcommands, surround them with quotes\n\n``` shiki\n>modulespam { export def'foo bar' [] { \"baz\" } };usespam'foo bar';foobar\nbaz\n```\n\nTo use multiple definitions from a module, wrap them in a list\n\n``` shiki\n>modulespam { export deffoo [] { \"foo\" };export def'foo bar' [] { \"baz\" } };usespam ['foo', 'foo bar']; (foo) + (foobar)\nfoobaz\n```\n\n## Notes\n\nSee `help std` for the standard library module. See `help modules` to list all available modules.\n\nThis command is a parser keyword. For details, check: https://www.nushell.sh/book/thinking_in_nu.html\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/use.html](https://www.nushell.sh/commands/docs/use.html)"
- name: values
  summary: '> values {flags}'
  description: "# `values` for filters\n\nGiven a record or table, produce a list of its columns' values.\n\n## Signature\n\n`> values {flags} `\n\n## Input/output types:\n\n| input  | output      |\n|--------|-------------|\n| record | list\\<any\\> |\n| table  | list\\<any\\> |\n\n## Examples\n\nGet the values from the record (produce a list)\n\n``` shiki\n> { mode:normaluserid:31415 } |values\n╭───┬────────╮\n│0│normal│\n│1│31415│\n╰───┴────────╯\n```\n\nValues are ordered by the column order of the record\n\n``` shiki\n> { f:250g:191c:128d:1024e:2000a:16b:32 } |values\n╭───┬──────╮\n│0│250│\n│1│191│\n│2│128│\n│3│1024│\n│4│2000│\n│5│16│\n│6│32│\n╰───┴──────╯\n```\n\nGet the values from the table (produce a list of lists)\n\n``` shiki\n> [[namemeaning]; [lslist] [mvmove] [cd'change directory']] |values\n╭───┬──────────────────────────╮\n│0│╭───┬────╮│\n│││0│ls││\n│││1│mv││\n│││2│cd││\n││╰───┴────╯│\n│1│╭───┬──────────────────╮│\n│││0│list││\n│││1│move││\n│││2│changedirectory││\n││╰───┴──────────────────╯│\n╰───┴──────────────────────────╯\n```\n\n## Notes\n\nThis is a counterpart to `columns`, which produces a list of columns' names.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/values.html](https://www.nushell.sh/commands/docs/values.html)"
- name: version
  summary: '> version {flags}'
  description: "# `version` for core\n\nDisplay Nu version, and its build configuration.\n\n## Signature\n\n`> version {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | record |\n\n## Examples\n\nDisplay Nu version\n\n``` shiki\n>version\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/version.html](https://www.nushell.sh/commands/docs/version.html)"
- name: view
  summary: '> view {flags}'
  description: "# `view` for debug\n\nVarious commands for viewing debug information.\n\n## Signature\n\n`> view {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Notes\n\nYou must use one of the following subcommands. Using this command as-is will only produce this help message.\n\n## Subcommands:\n\n| name                           | type    | usage                                                      |\n|--------------------------------|---------|------------------------------------------------------------|\n| [`view files`](view_files#_)   | Builtin | View the files registered in nushell's EngineState memory. |\n| [`view source`](view_source#_) | Builtin | View a block, module, or a definition.                     |\n| [`view span`](view_span#_)     | Builtin | View the contents of a span.                               |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/view.html](https://www.nushell.sh/commands/docs/view.html)"
- name: view files
  summary: '> view files {flags}'
  description: "# `view files` for debug\n\nView the files registered in nushell's EngineState memory.\n\n## Signature\n\n`> view files {flags} `\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nView the files registered in nushell's EngineState memory\n\n``` shiki\n>view files\n```\n\n## Notes\n\nThese are files parsed and loaded at runtime.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/view_files.html](https://www.nushell.sh/commands/docs/view_files.html)"
- name: view source
  summary: '> view source {flags} (item)'
  description: "# `view source` for debug\n\nView a block, module, or a definition.\n\n## Signature\n\n`> view source {flags} (item)`\n\n## Parameters\n\n- `item`: name or block to view\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nView the source of a code block\n\n``` shiki\n>letabc= {|| echo'hi' };view source$abc\n{|| echo'hi' }\n```\n\nView the source of a custom command\n\n``` shiki\n>defhi [] { echo'Hi!' };view sourcehi\ndefhi [] { echo'Hi!' }\n```\n\nView the source of a custom command, which participates in the caller environment\n\n``` shiki\n>def-envfoo [] { $env.BAR='BAZ' };view sourcefoo\ndeffoo [] { $env.BAR='BAZ' }\n```\n\nView the source of a custom command with flags and arguments\n\n``` shiki\n>deftest [a?:any--b:int...rest:string] { echo'test' };view sourcetest\ndeftest [ a?: any--b: int...rest: string] { echo'test' }\n```\n\nView the source of a module\n\n``` shiki\n>modulemod-foo { export-env { $env.FOO_ENV='BAZ' } };view sourcemod-foo\nexport-env { $env.FOO_ENV='BAZ' }\n```\n\nView the source of an alias\n\n``` shiki\n>aliashello=echohi;viewsourcehello\nechohi\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/view_source.html](https://www.nushell.sh/commands/docs/view_source.html)"
- name: view span
  summary: '> view span {flags} (start) (end)'
  description: "# `view span` for debug\n\nView the contents of a span.\n\n## Signature\n\n`> view span {flags} (start) (end)`\n\n## Parameters\n\n- `start`: start of the span\n- `end`: end of the span\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | string |\n\n## Examples\n\nView the source of a span. 1 and 2 are just example values. Use the return of debug -r to get the actual values\n\n``` shiki\n>some|pipeline|or|variable|debug-r;viewspan12\n```\n\n## Notes\n\nThis command is meant for debugging purposes. It allows you to view the contents of nushell spans. One way to get spans is to pipe something into 'debug --raw'. Then you can use the Span { start, end } values as the start and end values for this command.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/view_span.html](https://www.nushell.sh/commands/docs/view_span.html)"
- name: Viewers
  summary: ''
  description: "# Viewers\n\n| Command                      | Description                                                      |\n|------------------------------|------------------------------------------------------------------|\n| [explore](../docs/explore#_) | Explore acts as a table pager, just like \\`less\\` does for text. |\n| [grid](../docs/grid#_)       | Renders the output to a textual terminal grid.                   |\n| [table](../docs/table#_)     | Render the table.                                                |\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/categories/viewers.html](https://www.nushell.sh/commands/categories/viewers.html)"
- name: watch
  summary: '> watch {flags} (path) (closure)'
  description: "# `watch` for filesystem\n\nWatch for file changes and execute Nu code when they happen.\n\n## Signature\n\n`> watch {flags} (path) (closure)`\n\n## Flags\n\n- `--debounce-ms, -d {int}`: Debounce changes for this many milliseconds (default: 100). Adjust if you find that single writes are reported as multiple events\n- `--glob, -g {string}`: Only report changes for files that match this glob pattern (default: all files)\n- `--recursive, -r {bool}`: Watch all directories under `<path>` recursively. Will be ignored if `<path>` is a file (default: true)\n- `--verbose, -v`: Operate in verbose mode (default: false)\n\n## Parameters\n\n- `path`: the path to watch. Can be a file or directory\n- `closure`: Some Nu code to run whenever a file changes. The closure will be passed `operation`, `path`, and `new_path` (for renames only) arguments in that order\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nRun `cargo test` whenever a Rust file changes\n\n``` shiki\n>watch.--glob=**/*.rs {|| cargotest }\n```\n\nWatch all changes in the current directory\n\n``` shiki\n>watch. { |op, path, new_path| $\"($op) ($path) ($new_path)\"}\n```\n\nLog all changes in a directory\n\n``` shiki\n>watch/foo/bar { |op, path| $\"($op) - ($path)(char nl)\"|save--appendchanges_in_bar.log }\n```\n\nNote: if you are looking to run a command every N units of time, this can be accomplished with a loop and sleep\n\n``` shiki\n>loop { command;sleepduration }\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/watch.html](https://www.nushell.sh/commands/docs/watch.html)"
- name: where
  summary: '> where {flags} (row_condition)'
  description: "# `where` for filters\n\nFilter values based on a row condition.\n\n## Signature\n\n`> where {flags} (row_condition)`\n\n## Parameters\n\n- `row_condition`: Filter condition\n\n## Input/output types:\n\n| input       | output      |\n|-------------|-------------|\n| list\\<any\\> | list\\<any\\> |\n| range       | any         |\n| table       | table       |\n\n## Examples\n\nFilter rows of a table according to a condition\n\n``` shiki\n> [{a:1} {a:2}] |wherea>1\n╭───┬───╮\n│# │ a │\n├───┼───┤\n│0│2│\n╰───┴───╯\n```\n\nFilter items of a list according to a condition\n\n``` shiki\n> [12] |where {|x| $x>1}\n╭───┬───╮\n│0│2│\n╰───┴───╯\n```\n\nList all files in the current directory with sizes greater than 2kb\n\n``` shiki\n>ls|wheresize>2kb\n```\n\nList only the files in the current directory\n\n``` shiki\n>ls|wheretype==file\n```\n\nList all files with names that contain \"Car\"\n\n``` shiki\n>ls|wherename=~\"Car\"\n```\n\nList all files that were modified in the last two weeks\n\n``` shiki\n>ls|wheremodified>= (date now) -2wk\n```\n\nFind files whose filenames don't begin with the correct sequential number\n\n``` shiki\n>ls|wheretype==file|sort-byname-n|enumerate|where {|e| $e.item.name!~$'^($e.index+1)' } |each {|| getitem }\n```\n\nFind case-insensitively files called \"readme\", without an explicit closure\n\n``` shiki\n>ls|where ($it.name|str downcase) =~readme\n```\n\nsame as above but with regex only\n\n``` shiki\n>ls|wherename=~'(?i)readme'\n```\n\n## Notes\n\nThis command works similar to 'filter' but allows extra shorthands for working with tables, known as \"row conditions\". On the other hand, reading the condition from a variable is not supported.\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/where.html](https://www.nushell.sh/commands/docs/where.html)"
- name: which
  summary: '> which {flags} (application) ...rest'
  description: "# `which` for system\n\nFinds a program file, alias or custom command.\n\n## Signature\n\n`> which {flags} (application) ...rest`\n\n## Flags\n\n- `--all, -a`: list all executables\n\n## Parameters\n\n- `application`: application\n- `...rest`: additional applications\n\n## Input/output types:\n\n| input   | output |\n|---------|--------|\n| nothing | table  |\n\n## Examples\n\nFind if the 'myapp' application is available\n\n``` shiki\n>whichmyapp\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/which.html](https://www.nushell.sh/commands/docs/which.html)"
- name: while
  summary: '> while {flags} (cond) (block)'
  description: "# `while` for core\n\nConditionally run a block in a loop.\n\n## Signature\n\n`> while {flags} (cond) (block)`\n\n## Parameters\n\n- `cond`: condition to check\n- `block`: block to loop if check succeeds\n\n## Input/output types:\n\n| input   | output  |\n|---------|---------|\n| nothing | nothing |\n\n## Examples\n\nLoop while a condition is true\n\n``` shiki\n>mutx=0;while$x<10 { $x=$x+1 }\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/while.html](https://www.nushell.sh/commands/docs/while.html)"
- name: window
  summary: '> window {flags} (window_size)'
  description: "# `window` for filters\n\nCreates a sliding window of \\`window_size\\` that slide by n rows/elements across input.\n\n## Signature\n\n`> window {flags} (window_size)`\n\n## Flags\n\n- `--stride, -s {int}`: the number of rows to slide over between windows\n- `--remainder, -r`: yield last chunks even if they have fewer elements than size\n\n## Parameters\n\n- `window_size`: the size of each window\n\n## Input/output types:\n\n| input       | output              |\n|-------------|---------------------|\n| list\\<any\\> | list\\<list\\<any\\>\\> |\n\n## Examples\n\nA sliding window of two elements\n\n``` shiki\n> [1234] |window2\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│1││\n│││1│2││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│2││\n│││1│3││\n││╰───┴───╯│\n│2│╭───┬───╮│\n│││0│3││\n│││1│4││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nA sliding window of two elements, with a stride of 3\n\n``` shiki\n> [1, 2, 3, 4, 5, 6, 7, 8] |window2--stride3\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│1││\n│││1│2││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│4││\n│││1│5││\n││╰───┴───╯│\n│2│╭───┬───╮│\n│││0│7││\n│││1│8││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nA sliding window of equal stride that includes remainder. Equivalent to chunking\n\n``` shiki\n> [1, 2, 3, 4, 5] |window3--stride3--remainder\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│1││\n│││1│2││\n│││2│3││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│4││\n│││1│5││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/window.html](https://www.nushell.sh/commands/docs/window.html)"
- name: with-env
  summary: '> with-env {flags} (variable) (block)'
  description: "# `with-env` for env\n\nRuns a block with an environment variable set.\n\n## Signature\n\n`> with-env {flags} (variable) (block)`\n\n## Parameters\n\n- `variable`: the environment variable to temporarily set\n- `block`: the block to run once the variable is set\n\n## Input/output types:\n\n| input | output |\n|-------|--------|\n| any   | any    |\n\n## Examples\n\nSet the MYENV environment variable\n\n``` shiki\n>with-env [MYENV\"my env value\"] { $env.MYENV }\nmyenvvalue\n```\n\nSet by primitive value list\n\n``` shiki\n>with-env [XYWZ] { $env.X }\nY\n```\n\nSet by single row table\n\n``` shiki\n>with-env [[XW]; [YZ]] { $env.W }\nZ\n```\n\nSet by key-value record\n\n``` shiki\n>with-env {X:\"Y\", W:\"Z\"} { [$env.X$env.W] }\n╭───┬───╮\n│0│Y│\n│1│Z│\n╰───┴───╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/with-env.html](https://www.nushell.sh/commands/docs/with-env.html)"
- name: wrap
  summary: '> wrap {flags} (name)'
  description: "# `wrap` for filters\n\nWrap the value into a column.\n\n## Signature\n\n`> wrap {flags} (name)`\n\n## Parameters\n\n- `name`: the name of the column\n\n## Input/output types:\n\n| input       | output |\n|-------------|--------|\n| any         | record |\n| list\\<any\\> | table  |\n| range       | table  |\n\n## Examples\n\nWrap a list into a table with a given column name\n\n``` shiki\n> [123] |wrapnum\n╭───┬─────╮\n│# │ num │\n├───┼─────┤\n│0│1│\n│1│2│\n│2│3│\n╰───┴─────╯\n```\n\nWrap a range into a table with a given column name\n\n``` shiki\n>1..3|wrapnum\n╭───┬─────╮\n│# │ num │\n├───┼─────┤\n│0│1│\n│1│2│\n│2│3│\n╰───┴─────╯\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/wrap.html](https://www.nushell.sh/commands/docs/wrap.html)"
- name: zip
  summary: '> zip {flags} (other)'
  description: "# `zip` for filters\n\nCombine a stream with the input.\n\n## Signature\n\n`> zip {flags} (other)`\n\n## Parameters\n\n- `other`: the other input\n\n## Input/output types:\n\n| input       | output              |\n|-------------|---------------------|\n| list\\<any\\> | list\\<list\\<any\\>\\> |\n| range       | list\\<list\\<any\\>\\> |\n\n## Examples\n\nZip two lists\n\n``` shiki\n> [12] |zip [34]\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│1││\n│││1│3││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│2││\n│││1│4││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nZip two ranges\n\n``` shiki\n>1..3|zip4..6\n╭───┬───────────╮\n│0│╭───┬───╮│\n│││0│1││\n│││1│4││\n││╰───┴───╯│\n│1│╭───┬───╮│\n│││0│2││\n│││1│5││\n││╰───┴───╯│\n│2│╭───┬───╮│\n│││0│3││\n│││1│6││\n││╰───┴───╯│\n╰───┴───────────╯\n```\n\nRename .ogg files to match an existing list of filenames\n\n``` shiki\n>glob*.ogg|zip ['bang.ogg', 'fanfare.ogg', 'laser.ogg'] |each {|| mv$in.0$in.1 }\n```\n\nCopyright © 2019–2023 The Nushell Project DevelopersLicensed under the MIT License.  \n[https://www.nushell.sh/commands/docs/zip.html](https://www.nushell.sh/commands/docs/zip.html)"
